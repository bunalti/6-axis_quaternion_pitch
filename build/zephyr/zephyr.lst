
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	20001d60 	.word	0x20001d60
   4:	00004d01 	.word	0x00004d01
   8:	00009de9 	.word	0x00009de9
   c:	00004cb9 	.word	0x00004cb9
  10:	00004cb9 	.word	0x00004cb9
  14:	00004cb9 	.word	0x00004cb9
  18:	00004cb9 	.word	0x00004cb9
	...
  2c:	000043f1 	.word	0x000043f1
  30:	00004cb9 	.word	0x00004cb9
  34:	00000000 	.word	0x00000000
  38:	00004399 	.word	0x00004399
  3c:	00004cb9 	.word	0x00004cb9

00000040 <_irq_vector_table>:
  40:	000044dd 000044dd 000044dd 000044dd     .D...D...D...D..
  50:	000044dd 000044dd 000044dd 000044dd     .D...D...D...D..
  60:	000044dd 000044dd 000044dd 000044dd     .D...D...D...D..
  70:	000044dd 000044dd 000044dd 000044dd     .D...D...D...D..
  80:	000044dd 000044dd 000044dd 000044dd     .D...D...D...D..
  90:	000044dd 000044dd 000044dd 000044dd     .D...D...D...D..
  a0:	000044dd 000044dd 000044dd 000044dd     .D...D...D...D..
  b0:	000044dd 000044dd 000044dd 000044dd     .D...D...D...D..
  c0:	000044dd 000044dd 000044dd 000044dd     .D...D...D...D..
  d0:	000044dd 000044dd 000044dd              .D...D...D..

Disassembly of section text:

000000e0 <__aeabi_drsub>:
      e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
      e4:	e002      	b.n	ec <__adddf3>
      e6:	bf00      	nop

000000e8 <__aeabi_dsub>:
      e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000000ec <__adddf3>:
      ec:	b530      	push	{r4, r5, lr}
      ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
      f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
      f6:	ea94 0f05 	teq	r4, r5
      fa:	bf08      	it	eq
      fc:	ea90 0f02 	teqeq	r0, r2
     100:	bf1f      	itttt	ne
     102:	ea54 0c00 	orrsne.w	ip, r4, r0
     106:	ea55 0c02 	orrsne.w	ip, r5, r2
     10a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     10e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     112:	f000 80e2 	beq.w	2da <CONFIG_FLASH_SIZE+0xda>
     116:	ea4f 5454 	mov.w	r4, r4, lsr #21
     11a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     11e:	bfb8      	it	lt
     120:	426d      	neglt	r5, r5
     122:	dd0c      	ble.n	13e <CONFIG_KOBJECT_TEXT_AREA+0x3e>
     124:	442c      	add	r4, r5
     126:	ea80 0202 	eor.w	r2, r0, r2
     12a:	ea81 0303 	eor.w	r3, r1, r3
     12e:	ea82 0000 	eor.w	r0, r2, r0
     132:	ea83 0101 	eor.w	r1, r3, r1
     136:	ea80 0202 	eor.w	r2, r0, r2
     13a:	ea81 0303 	eor.w	r3, r1, r3
     13e:	2d36      	cmp	r5, #54	; 0x36
     140:	bf88      	it	hi
     142:	bd30      	pophi	{r4, r5, pc}
     144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     148:	ea4f 3101 	mov.w	r1, r1, lsl #12
     14c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     154:	d002      	beq.n	15c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x12>
     156:	4240      	negs	r0, r0
     158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     15c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     160:	ea4f 3303 	mov.w	r3, r3, lsl #12
     164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     168:	d002      	beq.n	170 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x26>
     16a:	4252      	negs	r2, r2
     16c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     170:	ea94 0f05 	teq	r4, r5
     174:	f000 80a7 	beq.w	2c6 <CONFIG_FLASH_SIZE+0xc6>
     178:	f1a4 0401 	sub.w	r4, r4, #1
     17c:	f1d5 0e20 	rsbs	lr, r5, #32
     180:	db0d      	blt.n	19e <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x54>
     182:	fa02 fc0e 	lsl.w	ip, r2, lr
     186:	fa22 f205 	lsr.w	r2, r2, r5
     18a:	1880      	adds	r0, r0, r2
     18c:	f141 0100 	adc.w	r1, r1, #0
     190:	fa03 f20e 	lsl.w	r2, r3, lr
     194:	1880      	adds	r0, r0, r2
     196:	fa43 f305 	asr.w	r3, r3, r5
     19a:	4159      	adcs	r1, r3
     19c:	e00e      	b.n	1bc <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x72>
     19e:	f1a5 0520 	sub.w	r5, r5, #32
     1a2:	f10e 0e20 	add.w	lr, lr, #32
     1a6:	2a01      	cmp	r2, #1
     1a8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1ac:	bf28      	it	cs
     1ae:	f04c 0c02 	orrcs.w	ip, ip, #2
     1b2:	fa43 f305 	asr.w	r3, r3, r5
     1b6:	18c0      	adds	r0, r0, r3
     1b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1c0:	d507      	bpl.n	1d2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x88>
     1c2:	f04f 0e00 	mov.w	lr, #0
     1c6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ca:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ce:	eb6e 0101 	sbc.w	r1, lr, r1
     1d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1d6:	d31b      	bcc.n	210 <CONFIG_FLASH_SIZE+0x10>
     1d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1dc:	d30c      	bcc.n	1f8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xae>
     1de:	0849      	lsrs	r1, r1, #1
     1e0:	ea5f 0030 	movs.w	r0, r0, rrx
     1e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     1e8:	f104 0401 	add.w	r4, r4, #1
     1ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
     1f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     1f4:	f080 809a 	bcs.w	32c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2c>
     1f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     1fc:	bf08      	it	eq
     1fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     202:	f150 0000 	adcs.w	r0, r0, #0
     206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     20a:	ea41 0105 	orr.w	r1, r1, r5
     20e:	bd30      	pop	{r4, r5, pc}
     210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     214:	4140      	adcs	r0, r0
     216:	eb41 0101 	adc.w	r1, r1, r1
     21a:	3c01      	subs	r4, #1
     21c:	bf28      	it	cs
     21e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     222:	d2e9      	bcs.n	1f8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xae>
     224:	f091 0f00 	teq	r1, #0
     228:	bf04      	itt	eq
     22a:	4601      	moveq	r1, r0
     22c:	2000      	moveq	r0, #0
     22e:	fab1 f381 	clz	r3, r1
     232:	bf08      	it	eq
     234:	3320      	addeq	r3, #32
     236:	f1a3 030b 	sub.w	r3, r3, #11
     23a:	f1b3 0220 	subs.w	r2, r3, #32
     23e:	da0c      	bge.n	25a <CONFIG_FLASH_SIZE+0x5a>
     240:	320c      	adds	r2, #12
     242:	dd08      	ble.n	256 <CONFIG_FLASH_SIZE+0x56>
     244:	f102 0c14 	add.w	ip, r2, #20
     248:	f1c2 020c 	rsb	r2, r2, #12
     24c:	fa01 f00c 	lsl.w	r0, r1, ip
     250:	fa21 f102 	lsr.w	r1, r1, r2
     254:	e00c      	b.n	270 <CONFIG_FLASH_SIZE+0x70>
     256:	f102 0214 	add.w	r2, r2, #20
     25a:	bfd8      	it	le
     25c:	f1c2 0c20 	rsble	ip, r2, #32
     260:	fa01 f102 	lsl.w	r1, r1, r2
     264:	fa20 fc0c 	lsr.w	ip, r0, ip
     268:	bfdc      	itt	le
     26a:	ea41 010c 	orrle.w	r1, r1, ip
     26e:	4090      	lslle	r0, r2
     270:	1ae4      	subs	r4, r4, r3
     272:	bfa2      	ittt	ge
     274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     278:	4329      	orrge	r1, r5
     27a:	bd30      	popge	{r4, r5, pc}
     27c:	ea6f 0404 	mvn.w	r4, r4
     280:	3c1f      	subs	r4, #31
     282:	da1c      	bge.n	2be <CONFIG_FLASH_SIZE+0xbe>
     284:	340c      	adds	r4, #12
     286:	dc0e      	bgt.n	2a6 <CONFIG_FLASH_SIZE+0xa6>
     288:	f104 0414 	add.w	r4, r4, #20
     28c:	f1c4 0220 	rsb	r2, r4, #32
     290:	fa20 f004 	lsr.w	r0, r0, r4
     294:	fa01 f302 	lsl.w	r3, r1, r2
     298:	ea40 0003 	orr.w	r0, r0, r3
     29c:	fa21 f304 	lsr.w	r3, r1, r4
     2a0:	ea45 0103 	orr.w	r1, r5, r3
     2a4:	bd30      	pop	{r4, r5, pc}
     2a6:	f1c4 040c 	rsb	r4, r4, #12
     2aa:	f1c4 0220 	rsb	r2, r4, #32
     2ae:	fa20 f002 	lsr.w	r0, r0, r2
     2b2:	fa01 f304 	lsl.w	r3, r1, r4
     2b6:	ea40 0003 	orr.w	r0, r0, r3
     2ba:	4629      	mov	r1, r5
     2bc:	bd30      	pop	{r4, r5, pc}
     2be:	fa21 f004 	lsr.w	r0, r1, r4
     2c2:	4629      	mov	r1, r5
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f094 0f00 	teq	r4, #0
     2ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ce:	bf06      	itte	eq
     2d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2d4:	3401      	addeq	r4, #1
     2d6:	3d01      	subne	r5, #1
     2d8:	e74e      	b.n	178 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2e>
     2da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2de:	bf18      	it	ne
     2e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     2e4:	d029      	beq.n	33a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3a>
     2e6:	ea94 0f05 	teq	r4, r5
     2ea:	bf08      	it	eq
     2ec:	ea90 0f02 	teqeq	r0, r2
     2f0:	d005      	beq.n	2fe <CONFIG_FLASH_SIZE+0xfe>
     2f2:	ea54 0c00 	orrs.w	ip, r4, r0
     2f6:	bf04      	itt	eq
     2f8:	4619      	moveq	r1, r3
     2fa:	4610      	moveq	r0, r2
     2fc:	bd30      	pop	{r4, r5, pc}
     2fe:	ea91 0f03 	teq	r1, r3
     302:	bf1e      	ittt	ne
     304:	2100      	movne	r1, #0
     306:	2000      	movne	r0, #0
     308:	bd30      	popne	{r4, r5, pc}
     30a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     30e:	d105      	bne.n	31c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1c>
     310:	0040      	lsls	r0, r0, #1
     312:	4149      	adcs	r1, r1
     314:	bf28      	it	cs
     316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     31a:	bd30      	pop	{r4, r5, pc}
     31c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     320:	bf3c      	itt	cc
     322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     326:	bd30      	popcc	{r4, r5, pc}
     328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     32c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     334:	f04f 0000 	mov.w	r0, #0
     338:	bd30      	pop	{r4, r5, pc}
     33a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     33e:	bf1a      	itte	ne
     340:	4619      	movne	r1, r3
     342:	4610      	movne	r0, r2
     344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     348:	bf1c      	itt	ne
     34a:	460b      	movne	r3, r1
     34c:	4602      	movne	r2, r0
     34e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     352:	bf06      	itte	eq
     354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     358:	ea91 0f03 	teqeq	r1, r3
     35c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     360:	bd30      	pop	{r4, r5, pc}
     362:	bf00      	nop

00000364 <__aeabi_ui2d>:
     364:	f090 0f00 	teq	r0, #0
     368:	bf04      	itt	eq
     36a:	2100      	moveq	r1, #0
     36c:	4770      	bxeq	lr
     36e:	b530      	push	{r4, r5, lr}
     370:	f44f 6480 	mov.w	r4, #1024	; 0x400
     374:	f104 0432 	add.w	r4, r4, #50	; 0x32
     378:	f04f 0500 	mov.w	r5, #0
     37c:	f04f 0100 	mov.w	r1, #0
     380:	e750      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     382:	bf00      	nop

00000384 <__aeabi_i2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     39c:	bf48      	it	mi
     39e:	4240      	negmi	r0, r0
     3a0:	f04f 0100 	mov.w	r1, #0
     3a4:	e73e      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3a6:	bf00      	nop

000003a8 <__aeabi_f2d>:
     3a8:	0042      	lsls	r2, r0, #1
     3aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ae:	ea4f 0131 	mov.w	r1, r1, rrx
     3b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3b6:	bf1f      	itttt	ne
     3b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3c4:	4770      	bxne	lr
     3c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ca:	bf08      	it	eq
     3cc:	4770      	bxeq	lr
     3ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3d2:	bf04      	itt	eq
     3d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3d8:	4770      	bxeq	lr
     3da:	b530      	push	{r4, r5, lr}
     3dc:	f44f 7460 	mov.w	r4, #896	; 0x380
     3e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     3e8:	e71c      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3ea:	bf00      	nop

000003ec <__aeabi_ul2d>:
     3ec:	ea50 0201 	orrs.w	r2, r0, r1
     3f0:	bf08      	it	eq
     3f2:	4770      	bxeq	lr
     3f4:	b530      	push	{r4, r5, lr}
     3f6:	f04f 0500 	mov.w	r5, #0
     3fa:	e00a      	b.n	412 <CONFIG_LOG_BUFFER_SIZE+0x12>

000003fc <__aeabi_l2d>:
     3fc:	ea50 0201 	orrs.w	r2, r0, r1
     400:	bf08      	it	eq
     402:	4770      	bxeq	lr
     404:	b530      	push	{r4, r5, lr}
     406:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     40a:	d502      	bpl.n	412 <CONFIG_LOG_BUFFER_SIZE+0x12>
     40c:	4240      	negs	r0, r0
     40e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     412:	f44f 6480 	mov.w	r4, #1024	; 0x400
     416:	f104 0432 	add.w	r4, r4, #50	; 0x32
     41a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     41e:	f43f aed8 	beq.w	1d2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x88>
     422:	f04f 0203 	mov.w	r2, #3
     426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     42a:	bf18      	it	ne
     42c:	3203      	addne	r2, #3
     42e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     432:	bf18      	it	ne
     434:	3203      	addne	r2, #3
     436:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     43a:	f1c2 0320 	rsb	r3, r2, #32
     43e:	fa00 fc03 	lsl.w	ip, r0, r3
     442:	fa20 f002 	lsr.w	r0, r0, r2
     446:	fa01 fe03 	lsl.w	lr, r1, r3
     44a:	ea40 000e 	orr.w	r0, r0, lr
     44e:	fa21 f102 	lsr.w	r1, r1, r2
     452:	4414      	add	r4, r2
     454:	e6bd      	b.n	1d2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x88>
     456:	bf00      	nop

00000458 <__aeabi_dmul>:
     458:	b570      	push	{r4, r5, r6, lr}
     45a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     45e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     466:	bf1d      	ittte	ne
     468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     46c:	ea94 0f0c 	teqne	r4, ip
     470:	ea95 0f0c 	teqne	r5, ip
     474:	f000 f8de 	bleq	634 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14c>
     478:	442c      	add	r4, r5
     47a:	ea81 0603 	eor.w	r6, r1, r3
     47e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     482:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     486:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     48a:	bf18      	it	ne
     48c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     498:	d038      	beq.n	50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
     49a:	fba0 ce02 	umull	ip, lr, r0, r2
     49e:	f04f 0500 	mov.w	r5, #0
     4a2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4aa:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ae:	f04f 0600 	mov.w	r6, #0
     4b2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4b6:	f09c 0f00 	teq	ip, #0
     4ba:	bf18      	it	ne
     4bc:	f04e 0e01 	orrne.w	lr, lr, #1
     4c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4cc:	d204      	bcs.n	4d8 <__aeabi_dmul+0x80>
     4ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4d2:	416d      	adcs	r5, r5
     4d4:	eb46 0606 	adc.w	r6, r6, r6
     4d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     4e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     4e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     4e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     4ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     4f0:	bf88      	it	hi
     4f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     4f6:	d81e      	bhi.n	536 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4e>
     4f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     4fc:	bf08      	it	eq
     4fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     502:	f150 0000 	adcs.w	r0, r0, #0
     506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     50a:	bd70      	pop	{r4, r5, r6, pc}
     50c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     510:	ea46 0101 	orr.w	r1, r6, r1
     514:	ea40 0002 	orr.w	r0, r0, r2
     518:	ea81 0103 	eor.w	r1, r1, r3
     51c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     520:	bfc2      	ittt	gt
     522:	ebd4 050c 	rsbsgt	r5, r4, ip
     526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     52a:	bd70      	popgt	{r4, r5, r6, pc}
     52c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     530:	f04f 0e00 	mov.w	lr, #0
     534:	3c01      	subs	r4, #1
     536:	f300 80ab 	bgt.w	690 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a8>
     53a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     53e:	bfde      	ittt	le
     540:	2000      	movle	r0, #0
     542:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     546:	bd70      	pople	{r4, r5, r6, pc}
     548:	f1c4 0400 	rsb	r4, r4, #0
     54c:	3c20      	subs	r4, #32
     54e:	da35      	bge.n	5bc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd4>
     550:	340c      	adds	r4, #12
     552:	dc1b      	bgt.n	58c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa4>
     554:	f104 0414 	add.w	r4, r4, #20
     558:	f1c4 0520 	rsb	r5, r4, #32
     55c:	fa00 f305 	lsl.w	r3, r0, r5
     560:	fa20 f004 	lsr.w	r0, r0, r4
     564:	fa01 f205 	lsl.w	r2, r1, r5
     568:	ea40 0002 	orr.w	r0, r0, r2
     56c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     578:	fa21 f604 	lsr.w	r6, r1, r4
     57c:	eb42 0106 	adc.w	r1, r2, r6
     580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     584:	bf08      	it	eq
     586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     58a:	bd70      	pop	{r4, r5, r6, pc}
     58c:	f1c4 040c 	rsb	r4, r4, #12
     590:	f1c4 0520 	rsb	r5, r4, #32
     594:	fa00 f304 	lsl.w	r3, r0, r4
     598:	fa20 f005 	lsr.w	r0, r0, r5
     59c:	fa01 f204 	lsl.w	r2, r1, r4
     5a0:	ea40 0002 	orr.w	r0, r0, r2
     5a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5ac:	f141 0100 	adc.w	r1, r1, #0
     5b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5b4:	bf08      	it	eq
     5b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5ba:	bd70      	pop	{r4, r5, r6, pc}
     5bc:	f1c4 0520 	rsb	r5, r4, #32
     5c0:	fa00 f205 	lsl.w	r2, r0, r5
     5c4:	ea4e 0e02 	orr.w	lr, lr, r2
     5c8:	fa20 f304 	lsr.w	r3, r0, r4
     5cc:	fa01 f205 	lsl.w	r2, r1, r5
     5d0:	ea43 0302 	orr.w	r3, r3, r2
     5d4:	fa21 f004 	lsr.w	r0, r1, r4
     5d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5dc:	fa21 f204 	lsr.w	r2, r1, r4
     5e0:	ea20 0002 	bic.w	r0, r0, r2
     5e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     5e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5ec:	bf08      	it	eq
     5ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5f2:	bd70      	pop	{r4, r5, r6, pc}
     5f4:	f094 0f00 	teq	r4, #0
     5f8:	d10f      	bne.n	61a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x132>
     5fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     5fe:	0040      	lsls	r0, r0, #1
     600:	eb41 0101 	adc.w	r1, r1, r1
     604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     608:	bf08      	it	eq
     60a:	3c01      	subeq	r4, #1
     60c:	d0f7      	beq.n	5fe <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x116>
     60e:	ea41 0106 	orr.w	r1, r1, r6
     612:	f095 0f00 	teq	r5, #0
     616:	bf18      	it	ne
     618:	4770      	bxne	lr
     61a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     61e:	0052      	lsls	r2, r2, #1
     620:	eb43 0303 	adc.w	r3, r3, r3
     624:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3d01      	subeq	r5, #1
     62c:	d0f7      	beq.n	61e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x136>
     62e:	ea43 0306 	orr.w	r3, r3, r6
     632:	4770      	bx	lr
     634:	ea94 0f0c 	teq	r4, ip
     638:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     63c:	bf18      	it	ne
     63e:	ea95 0f0c 	teqne	r5, ip
     642:	d00c      	beq.n	65e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x176>
     644:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     648:	bf18      	it	ne
     64a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     64e:	d1d1      	bne.n	5f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10c>
     650:	ea81 0103 	eor.w	r1, r1, r3
     654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     658:	f04f 0000 	mov.w	r0, #0
     65c:	bd70      	pop	{r4, r5, r6, pc}
     65e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     662:	bf06      	itte	eq
     664:	4610      	moveq	r0, r2
     666:	4619      	moveq	r1, r3
     668:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66c:	d019      	beq.n	6a2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ba>
     66e:	ea94 0f0c 	teq	r4, ip
     672:	d102      	bne.n	67a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x192>
     674:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     678:	d113      	bne.n	6a2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ba>
     67a:	ea95 0f0c 	teq	r5, ip
     67e:	d105      	bne.n	68c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a4>
     680:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     684:	bf1c      	itt	ne
     686:	4610      	movne	r0, r2
     688:	4619      	movne	r1, r3
     68a:	d10a      	bne.n	6a2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ba>
     68c:	ea81 0103 	eor.w	r1, r1, r3
     690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     694:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     698:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     69c:	f04f 0000 	mov.w	r0, #0
     6a0:	bd70      	pop	{r4, r5, r6, pc}
     6a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6aa:	bd70      	pop	{r4, r5, r6, pc}

000006ac <__aeabi_ddiv>:
     6ac:	b570      	push	{r4, r5, r6, lr}
     6ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6ba:	bf1d      	ittte	ne
     6bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6c0:	ea94 0f0c 	teqne	r4, ip
     6c4:	ea95 0f0c 	teqne	r5, ip
     6c8:	f000 f8a7 	bleq	81a <CONFIG_HEAP_MEM_POOL_SIZE+0x1a>
     6cc:	eba4 0405 	sub.w	r4, r4, r5
     6d0:	ea81 0e03 	eor.w	lr, r1, r3
     6d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6dc:	f000 8088 	beq.w	7f0 <__aeabi_ddiv+0x144>
     6e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     6e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     6e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     6ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     6f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     6f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     6f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     6fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     700:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     704:	429d      	cmp	r5, r3
     706:	bf08      	it	eq
     708:	4296      	cmpeq	r6, r2
     70a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     70e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     712:	d202      	bcs.n	71a <__aeabi_ddiv+0x6e>
     714:	085b      	lsrs	r3, r3, #1
     716:	ea4f 0232 	mov.w	r2, r2, rrx
     71a:	1ab6      	subs	r6, r6, r2
     71c:	eb65 0503 	sbc.w	r5, r5, r3
     720:	085b      	lsrs	r3, r3, #1
     722:	ea4f 0232 	mov.w	r2, r2, rrx
     726:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     72a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     72e:	ebb6 0e02 	subs.w	lr, r6, r2
     732:	eb75 0e03 	sbcs.w	lr, r5, r3
     736:	bf22      	ittt	cs
     738:	1ab6      	subcs	r6, r6, r2
     73a:	4675      	movcs	r5, lr
     73c:	ea40 000c 	orrcs.w	r0, r0, ip
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	ebb6 0e02 	subs.w	lr, r6, r2
     74a:	eb75 0e03 	sbcs.w	lr, r5, r3
     74e:	bf22      	ittt	cs
     750:	1ab6      	subcs	r6, r6, r2
     752:	4675      	movcs	r5, lr
     754:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     758:	085b      	lsrs	r3, r3, #1
     75a:	ea4f 0232 	mov.w	r2, r2, rrx
     75e:	ebb6 0e02 	subs.w	lr, r6, r2
     762:	eb75 0e03 	sbcs.w	lr, r5, r3
     766:	bf22      	ittt	cs
     768:	1ab6      	subcs	r6, r6, r2
     76a:	4675      	movcs	r5, lr
     76c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     770:	085b      	lsrs	r3, r3, #1
     772:	ea4f 0232 	mov.w	r2, r2, rrx
     776:	ebb6 0e02 	subs.w	lr, r6, r2
     77a:	eb75 0e03 	sbcs.w	lr, r5, r3
     77e:	bf22      	ittt	cs
     780:	1ab6      	subcs	r6, r6, r2
     782:	4675      	movcs	r5, lr
     784:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     788:	ea55 0e06 	orrs.w	lr, r5, r6
     78c:	d018      	beq.n	7c0 <__aeabi_ddiv+0x114>
     78e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     792:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     796:	ea4f 1606 	mov.w	r6, r6, lsl #4
     79a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     79e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7aa:	d1c0      	bne.n	72e <__aeabi_ddiv+0x82>
     7ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7b0:	d10b      	bne.n	7ca <__aeabi_ddiv+0x11e>
     7b2:	ea41 0100 	orr.w	r1, r1, r0
     7b6:	f04f 0000 	mov.w	r0, #0
     7ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7be:	e7b6      	b.n	72e <__aeabi_ddiv+0x82>
     7c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7c4:	bf04      	itt	eq
     7c6:	4301      	orreq	r1, r0
     7c8:	2000      	moveq	r0, #0
     7ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ce:	bf88      	it	hi
     7d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7d4:	f63f aeaf 	bhi.w	536 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4e>
     7d8:	ebb5 0c03 	subs.w	ip, r5, r3
     7dc:	bf04      	itt	eq
     7de:	ebb6 0c02 	subseq.w	ip, r6, r2
     7e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     7e6:	f150 0000 	adcs.w	r0, r0, #0
     7ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     7ee:	bd70      	pop	{r4, r5, r6, pc}
     7f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     7f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     7f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     7fc:	bfc2      	ittt	gt
     7fe:	ebd4 050c 	rsbsgt	r5, r4, ip
     802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     806:	bd70      	popgt	{r4, r5, r6, pc}
     808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     80c:	f04f 0e00 	mov.w	lr, #0
     810:	3c01      	subs	r4, #1
     812:	e690      	b.n	536 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4e>
     814:	ea45 0e06 	orr.w	lr, r5, r6
     818:	e68d      	b.n	536 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4e>
     81a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     81e:	ea94 0f0c 	teq	r4, ip
     822:	bf08      	it	eq
     824:	ea95 0f0c 	teqeq	r5, ip
     828:	f43f af3b 	beq.w	6a2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ba>
     82c:	ea94 0f0c 	teq	r4, ip
     830:	d10a      	bne.n	848 <CONFIG_HEAP_MEM_POOL_SIZE+0x48>
     832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     836:	f47f af34 	bne.w	6a2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ba>
     83a:	ea95 0f0c 	teq	r5, ip
     83e:	f47f af25 	bne.w	68c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a4>
     842:	4610      	mov	r0, r2
     844:	4619      	mov	r1, r3
     846:	e72c      	b.n	6a2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ba>
     848:	ea95 0f0c 	teq	r5, ip
     84c:	d106      	bne.n	85c <CONFIG_HEAP_MEM_POOL_SIZE+0x5c>
     84e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     852:	f43f aefd 	beq.w	650 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x168>
     856:	4610      	mov	r0, r2
     858:	4619      	mov	r1, r3
     85a:	e722      	b.n	6a2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ba>
     85c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     860:	bf18      	it	ne
     862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     866:	f47f aec5 	bne.w	5f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10c>
     86a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     86e:	f47f af0d 	bne.w	68c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a4>
     872:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     876:	f47f aeeb 	bne.w	650 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x168>
     87a:	e712      	b.n	6a2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ba>

0000087c <__gedf2>:
     87c:	f04f 3cff 	mov.w	ip, #4294967295
     880:	e006      	b.n	890 <__cmpdf2+0x4>
     882:	bf00      	nop

00000884 <__ledf2>:
     884:	f04f 0c01 	mov.w	ip, #1
     888:	e002      	b.n	890 <__cmpdf2+0x4>
     88a:	bf00      	nop

0000088c <__cmpdf2>:
     88c:	f04f 0c01 	mov.w	ip, #1
     890:	f84d cd04 	str.w	ip, [sp, #-4]!
     894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     89c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     8a0:	bf18      	it	ne
     8a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     8a6:	d01b      	beq.n	8e0 <__cmpdf2+0x54>
     8a8:	b001      	add	sp, #4
     8aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     8ae:	bf0c      	ite	eq
     8b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     8b4:	ea91 0f03 	teqne	r1, r3
     8b8:	bf02      	ittt	eq
     8ba:	ea90 0f02 	teqeq	r0, r2
     8be:	2000      	moveq	r0, #0
     8c0:	4770      	bxeq	lr
     8c2:	f110 0f00 	cmn.w	r0, #0
     8c6:	ea91 0f03 	teq	r1, r3
     8ca:	bf58      	it	pl
     8cc:	4299      	cmppl	r1, r3
     8ce:	bf08      	it	eq
     8d0:	4290      	cmpeq	r0, r2
     8d2:	bf2c      	ite	cs
     8d4:	17d8      	asrcs	r0, r3, #31
     8d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     8da:	f040 0001 	orr.w	r0, r0, #1
     8de:	4770      	bx	lr
     8e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     8e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8e8:	d102      	bne.n	8f0 <__cmpdf2+0x64>
     8ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     8ee:	d107      	bne.n	900 <__cmpdf2+0x74>
     8f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     8f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8f8:	d1d6      	bne.n	8a8 <__cmpdf2+0x1c>
     8fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     8fe:	d0d3      	beq.n	8a8 <__cmpdf2+0x1c>
     900:	f85d 0b04 	ldr.w	r0, [sp], #4
     904:	4770      	bx	lr
     906:	bf00      	nop

00000908 <__aeabi_cdrcmple>:
     908:	4684      	mov	ip, r0
     90a:	4610      	mov	r0, r2
     90c:	4662      	mov	r2, ip
     90e:	468c      	mov	ip, r1
     910:	4619      	mov	r1, r3
     912:	4663      	mov	r3, ip
     914:	e000      	b.n	918 <__aeabi_cdcmpeq>
     916:	bf00      	nop

00000918 <__aeabi_cdcmpeq>:
     918:	b501      	push	{r0, lr}
     91a:	f7ff ffb7 	bl	88c <__cmpdf2>
     91e:	2800      	cmp	r0, #0
     920:	bf48      	it	mi
     922:	f110 0f00 	cmnmi.w	r0, #0
     926:	bd01      	pop	{r0, pc}

00000928 <__aeabi_dcmpeq>:
     928:	f84d ed08 	str.w	lr, [sp, #-8]!
     92c:	f7ff fff4 	bl	918 <__aeabi_cdcmpeq>
     930:	bf0c      	ite	eq
     932:	2001      	moveq	r0, #1
     934:	2000      	movne	r0, #0
     936:	f85d fb08 	ldr.w	pc, [sp], #8
     93a:	bf00      	nop

0000093c <__aeabi_dcmplt>:
     93c:	f84d ed08 	str.w	lr, [sp, #-8]!
     940:	f7ff ffea 	bl	918 <__aeabi_cdcmpeq>
     944:	bf34      	ite	cc
     946:	2001      	movcc	r0, #1
     948:	2000      	movcs	r0, #0
     94a:	f85d fb08 	ldr.w	pc, [sp], #8
     94e:	bf00      	nop

00000950 <__aeabi_dcmple>:
     950:	f84d ed08 	str.w	lr, [sp, #-8]!
     954:	f7ff ffe0 	bl	918 <__aeabi_cdcmpeq>
     958:	bf94      	ite	ls
     95a:	2001      	movls	r0, #1
     95c:	2000      	movhi	r0, #0
     95e:	f85d fb08 	ldr.w	pc, [sp], #8
     962:	bf00      	nop

00000964 <__aeabi_dcmpge>:
     964:	f84d ed08 	str.w	lr, [sp, #-8]!
     968:	f7ff ffce 	bl	908 <__aeabi_cdrcmple>
     96c:	bf94      	ite	ls
     96e:	2001      	movls	r0, #1
     970:	2000      	movhi	r0, #0
     972:	f85d fb08 	ldr.w	pc, [sp], #8
     976:	bf00      	nop

00000978 <__aeabi_dcmpgt>:
     978:	f84d ed08 	str.w	lr, [sp, #-8]!
     97c:	f7ff ffc4 	bl	908 <__aeabi_cdrcmple>
     980:	bf34      	ite	cc
     982:	2001      	movcc	r0, #1
     984:	2000      	movcs	r0, #0
     986:	f85d fb08 	ldr.w	pc, [sp], #8
     98a:	bf00      	nop

0000098c <__aeabi_d2f>:
     98c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     994:	bf24      	itt	cs
     996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     99a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     99e:	d90d      	bls.n	9bc <__aeabi_d2f+0x30>
     9a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     9a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     9a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     9ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     9b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     9b4:	bf08      	it	eq
     9b6:	f020 0001 	biceq.w	r0, r0, #1
     9ba:	4770      	bx	lr
     9bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     9c0:	d121      	bne.n	a06 <__aeabi_d2f+0x7a>
     9c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     9c6:	bfbc      	itt	lt
     9c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     9cc:	4770      	bxlt	lr
     9ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     9d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
     9d6:	f1c2 0218 	rsb	r2, r2, #24
     9da:	f1c2 0c20 	rsb	ip, r2, #32
     9de:	fa10 f30c 	lsls.w	r3, r0, ip
     9e2:	fa20 f002 	lsr.w	r0, r0, r2
     9e6:	bf18      	it	ne
     9e8:	f040 0001 	orrne.w	r0, r0, #1
     9ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     9f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     9f4:	fa03 fc0c 	lsl.w	ip, r3, ip
     9f8:	ea40 000c 	orr.w	r0, r0, ip
     9fc:	fa23 f302 	lsr.w	r3, r3, r2
     a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
     a04:	e7cc      	b.n	9a0 <__aeabi_d2f+0x14>
     a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
     a0a:	d107      	bne.n	a1c <__aeabi_d2f+0x90>
     a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     a10:	bf1e      	ittt	ne
     a12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     a16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     a1a:	4770      	bxne	lr
     a1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     a20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     a24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     a28:	4770      	bx	lr
     a2a:	bf00      	nop

00000a2c <__aeabi_frsub>:
     a2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     a30:	e002      	b.n	a38 <__addsf3>
     a32:	bf00      	nop

00000a34 <__aeabi_fsub>:
     a34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000a38 <__addsf3>:
     a38:	0042      	lsls	r2, r0, #1
     a3a:	bf1f      	itttt	ne
     a3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     a40:	ea92 0f03 	teqne	r2, r3
     a44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     a48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     a4c:	d06a      	beq.n	b24 <__addsf3+0xec>
     a4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
     a52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     a56:	bfc1      	itttt	gt
     a58:	18d2      	addgt	r2, r2, r3
     a5a:	4041      	eorgt	r1, r0
     a5c:	4048      	eorgt	r0, r1
     a5e:	4041      	eorgt	r1, r0
     a60:	bfb8      	it	lt
     a62:	425b      	neglt	r3, r3
     a64:	2b19      	cmp	r3, #25
     a66:	bf88      	it	hi
     a68:	4770      	bxhi	lr
     a6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     a6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     a72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a76:	bf18      	it	ne
     a78:	4240      	negne	r0, r0
     a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     a82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     a86:	bf18      	it	ne
     a88:	4249      	negne	r1, r1
     a8a:	ea92 0f03 	teq	r2, r3
     a8e:	d03f      	beq.n	b10 <__addsf3+0xd8>
     a90:	f1a2 0201 	sub.w	r2, r2, #1
     a94:	fa41 fc03 	asr.w	ip, r1, r3
     a98:	eb10 000c 	adds.w	r0, r0, ip
     a9c:	f1c3 0320 	rsb	r3, r3, #32
     aa0:	fa01 f103 	lsl.w	r1, r1, r3
     aa4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     aa8:	d502      	bpl.n	ab0 <__addsf3+0x78>
     aaa:	4249      	negs	r1, r1
     aac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     ab0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     ab4:	d313      	bcc.n	ade <__addsf3+0xa6>
     ab6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     aba:	d306      	bcc.n	aca <__addsf3+0x92>
     abc:	0840      	lsrs	r0, r0, #1
     abe:	ea4f 0131 	mov.w	r1, r1, rrx
     ac2:	f102 0201 	add.w	r2, r2, #1
     ac6:	2afe      	cmp	r2, #254	; 0xfe
     ac8:	d251      	bcs.n	b6e <__addsf3+0x136>
     aca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     ace:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     ad2:	bf08      	it	eq
     ad4:	f020 0001 	biceq.w	r0, r0, #1
     ad8:	ea40 0003 	orr.w	r0, r0, r3
     adc:	4770      	bx	lr
     ade:	0049      	lsls	r1, r1, #1
     ae0:	eb40 0000 	adc.w	r0, r0, r0
     ae4:	3a01      	subs	r2, #1
     ae6:	bf28      	it	cs
     ae8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     aec:	d2ed      	bcs.n	aca <__addsf3+0x92>
     aee:	fab0 fc80 	clz	ip, r0
     af2:	f1ac 0c08 	sub.w	ip, ip, #8
     af6:	ebb2 020c 	subs.w	r2, r2, ip
     afa:	fa00 f00c 	lsl.w	r0, r0, ip
     afe:	bfaa      	itet	ge
     b00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     b04:	4252      	neglt	r2, r2
     b06:	4318      	orrge	r0, r3
     b08:	bfbc      	itt	lt
     b0a:	40d0      	lsrlt	r0, r2
     b0c:	4318      	orrlt	r0, r3
     b0e:	4770      	bx	lr
     b10:	f092 0f00 	teq	r2, #0
     b14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     b18:	bf06      	itte	eq
     b1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     b1e:	3201      	addeq	r2, #1
     b20:	3b01      	subne	r3, #1
     b22:	e7b5      	b.n	a90 <__addsf3+0x58>
     b24:	ea4f 0341 	mov.w	r3, r1, lsl #1
     b28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     b2c:	bf18      	it	ne
     b2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     b32:	d021      	beq.n	b78 <__addsf3+0x140>
     b34:	ea92 0f03 	teq	r2, r3
     b38:	d004      	beq.n	b44 <__addsf3+0x10c>
     b3a:	f092 0f00 	teq	r2, #0
     b3e:	bf08      	it	eq
     b40:	4608      	moveq	r0, r1
     b42:	4770      	bx	lr
     b44:	ea90 0f01 	teq	r0, r1
     b48:	bf1c      	itt	ne
     b4a:	2000      	movne	r0, #0
     b4c:	4770      	bxne	lr
     b4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     b52:	d104      	bne.n	b5e <__addsf3+0x126>
     b54:	0040      	lsls	r0, r0, #1
     b56:	bf28      	it	cs
     b58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     b5c:	4770      	bx	lr
     b5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     b62:	bf3c      	itt	cc
     b64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     b68:	4770      	bxcc	lr
     b6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     b6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     b72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b76:	4770      	bx	lr
     b78:	ea7f 6222 	mvns.w	r2, r2, asr #24
     b7c:	bf16      	itet	ne
     b7e:	4608      	movne	r0, r1
     b80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     b84:	4601      	movne	r1, r0
     b86:	0242      	lsls	r2, r0, #9
     b88:	bf06      	itte	eq
     b8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     b8e:	ea90 0f01 	teqeq	r0, r1
     b92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     b96:	4770      	bx	lr

00000b98 <__aeabi_ui2f>:
     b98:	f04f 0300 	mov.w	r3, #0
     b9c:	e004      	b.n	ba8 <__aeabi_i2f+0x8>
     b9e:	bf00      	nop

00000ba0 <__aeabi_i2f>:
     ba0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     ba4:	bf48      	it	mi
     ba6:	4240      	negmi	r0, r0
     ba8:	ea5f 0c00 	movs.w	ip, r0
     bac:	bf08      	it	eq
     bae:	4770      	bxeq	lr
     bb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     bb4:	4601      	mov	r1, r0
     bb6:	f04f 0000 	mov.w	r0, #0
     bba:	e01c      	b.n	bf6 <__aeabi_l2f+0x2a>

00000bbc <__aeabi_ul2f>:
     bbc:	ea50 0201 	orrs.w	r2, r0, r1
     bc0:	bf08      	it	eq
     bc2:	4770      	bxeq	lr
     bc4:	f04f 0300 	mov.w	r3, #0
     bc8:	e00a      	b.n	be0 <__aeabi_l2f+0x14>
     bca:	bf00      	nop

00000bcc <__aeabi_l2f>:
     bcc:	ea50 0201 	orrs.w	r2, r0, r1
     bd0:	bf08      	it	eq
     bd2:	4770      	bxeq	lr
     bd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     bd8:	d502      	bpl.n	be0 <__aeabi_l2f+0x14>
     bda:	4240      	negs	r0, r0
     bdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     be0:	ea5f 0c01 	movs.w	ip, r1
     be4:	bf02      	ittt	eq
     be6:	4684      	moveq	ip, r0
     be8:	4601      	moveq	r1, r0
     bea:	2000      	moveq	r0, #0
     bec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     bf0:	bf08      	it	eq
     bf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     bf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     bfa:	fabc f28c 	clz	r2, ip
     bfe:	3a08      	subs	r2, #8
     c00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     c04:	db10      	blt.n	c28 <__aeabi_l2f+0x5c>
     c06:	fa01 fc02 	lsl.w	ip, r1, r2
     c0a:	4463      	add	r3, ip
     c0c:	fa00 fc02 	lsl.w	ip, r0, r2
     c10:	f1c2 0220 	rsb	r2, r2, #32
     c14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     c18:	fa20 f202 	lsr.w	r2, r0, r2
     c1c:	eb43 0002 	adc.w	r0, r3, r2
     c20:	bf08      	it	eq
     c22:	f020 0001 	biceq.w	r0, r0, #1
     c26:	4770      	bx	lr
     c28:	f102 0220 	add.w	r2, r2, #32
     c2c:	fa01 fc02 	lsl.w	ip, r1, r2
     c30:	f1c2 0220 	rsb	r2, r2, #32
     c34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     c38:	fa21 f202 	lsr.w	r2, r1, r2
     c3c:	eb43 0002 	adc.w	r0, r3, r2
     c40:	bf08      	it	eq
     c42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     c46:	4770      	bx	lr

00000c48 <__aeabi_fmul>:
     c48:	f04f 0cff 	mov.w	ip, #255	; 0xff
     c4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     c50:	bf1e      	ittt	ne
     c52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     c56:	ea92 0f0c 	teqne	r2, ip
     c5a:	ea93 0f0c 	teqne	r3, ip
     c5e:	d06f      	beq.n	d40 <__aeabi_fmul+0xf8>
     c60:	441a      	add	r2, r3
     c62:	ea80 0c01 	eor.w	ip, r0, r1
     c66:	0240      	lsls	r0, r0, #9
     c68:	bf18      	it	ne
     c6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     c6e:	d01e      	beq.n	cae <__aeabi_fmul+0x66>
     c70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     c74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     c78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     c7c:	fba0 3101 	umull	r3, r1, r0, r1
     c80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     c84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     c88:	bf3e      	ittt	cc
     c8a:	0049      	lslcc	r1, r1, #1
     c8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     c90:	005b      	lslcc	r3, r3, #1
     c92:	ea40 0001 	orr.w	r0, r0, r1
     c96:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     c9a:	2afd      	cmp	r2, #253	; 0xfd
     c9c:	d81d      	bhi.n	cda <__aeabi_fmul+0x92>
     c9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     ca2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     ca6:	bf08      	it	eq
     ca8:	f020 0001 	biceq.w	r0, r0, #1
     cac:	4770      	bx	lr
     cae:	f090 0f00 	teq	r0, #0
     cb2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     cb6:	bf08      	it	eq
     cb8:	0249      	lsleq	r1, r1, #9
     cba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     cbe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     cc2:	3a7f      	subs	r2, #127	; 0x7f
     cc4:	bfc2      	ittt	gt
     cc6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     cca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     cce:	4770      	bxgt	lr
     cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     cd4:	f04f 0300 	mov.w	r3, #0
     cd8:	3a01      	subs	r2, #1
     cda:	dc5d      	bgt.n	d98 <__aeabi_fmul+0x150>
     cdc:	f112 0f19 	cmn.w	r2, #25
     ce0:	bfdc      	itt	le
     ce2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     ce6:	4770      	bxle	lr
     ce8:	f1c2 0200 	rsb	r2, r2, #0
     cec:	0041      	lsls	r1, r0, #1
     cee:	fa21 f102 	lsr.w	r1, r1, r2
     cf2:	f1c2 0220 	rsb	r2, r2, #32
     cf6:	fa00 fc02 	lsl.w	ip, r0, r2
     cfa:	ea5f 0031 	movs.w	r0, r1, rrx
     cfe:	f140 0000 	adc.w	r0, r0, #0
     d02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     d06:	bf08      	it	eq
     d08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     d0c:	4770      	bx	lr
     d0e:	f092 0f00 	teq	r2, #0
     d12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     d16:	bf02      	ittt	eq
     d18:	0040      	lsleq	r0, r0, #1
     d1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     d1e:	3a01      	subeq	r2, #1
     d20:	d0f9      	beq.n	d16 <__aeabi_fmul+0xce>
     d22:	ea40 000c 	orr.w	r0, r0, ip
     d26:	f093 0f00 	teq	r3, #0
     d2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     d2e:	bf02      	ittt	eq
     d30:	0049      	lsleq	r1, r1, #1
     d32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     d36:	3b01      	subeq	r3, #1
     d38:	d0f9      	beq.n	d2e <__aeabi_fmul+0xe6>
     d3a:	ea41 010c 	orr.w	r1, r1, ip
     d3e:	e78f      	b.n	c60 <__aeabi_fmul+0x18>
     d40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     d44:	ea92 0f0c 	teq	r2, ip
     d48:	bf18      	it	ne
     d4a:	ea93 0f0c 	teqne	r3, ip
     d4e:	d00a      	beq.n	d66 <__aeabi_fmul+0x11e>
     d50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     d54:	bf18      	it	ne
     d56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     d5a:	d1d8      	bne.n	d0e <__aeabi_fmul+0xc6>
     d5c:	ea80 0001 	eor.w	r0, r0, r1
     d60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     d64:	4770      	bx	lr
     d66:	f090 0f00 	teq	r0, #0
     d6a:	bf17      	itett	ne
     d6c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     d70:	4608      	moveq	r0, r1
     d72:	f091 0f00 	teqne	r1, #0
     d76:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     d7a:	d014      	beq.n	da6 <__aeabi_fmul+0x15e>
     d7c:	ea92 0f0c 	teq	r2, ip
     d80:	d101      	bne.n	d86 <__aeabi_fmul+0x13e>
     d82:	0242      	lsls	r2, r0, #9
     d84:	d10f      	bne.n	da6 <__aeabi_fmul+0x15e>
     d86:	ea93 0f0c 	teq	r3, ip
     d8a:	d103      	bne.n	d94 <__aeabi_fmul+0x14c>
     d8c:	024b      	lsls	r3, r1, #9
     d8e:	bf18      	it	ne
     d90:	4608      	movne	r0, r1
     d92:	d108      	bne.n	da6 <__aeabi_fmul+0x15e>
     d94:	ea80 0001 	eor.w	r0, r0, r1
     d98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     d9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     da4:	4770      	bx	lr
     da6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     daa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     dae:	4770      	bx	lr

00000db0 <__aeabi_fdiv>:
     db0:	f04f 0cff 	mov.w	ip, #255	; 0xff
     db4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     db8:	bf1e      	ittt	ne
     dba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     dbe:	ea92 0f0c 	teqne	r2, ip
     dc2:	ea93 0f0c 	teqne	r3, ip
     dc6:	d069      	beq.n	e9c <__aeabi_fdiv+0xec>
     dc8:	eba2 0203 	sub.w	r2, r2, r3
     dcc:	ea80 0c01 	eor.w	ip, r0, r1
     dd0:	0249      	lsls	r1, r1, #9
     dd2:	ea4f 2040 	mov.w	r0, r0, lsl #9
     dd6:	d037      	beq.n	e48 <__aeabi_fdiv+0x98>
     dd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     ddc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     de0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     de4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     de8:	428b      	cmp	r3, r1
     dea:	bf38      	it	cc
     dec:	005b      	lslcc	r3, r3, #1
     dee:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     df2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     df6:	428b      	cmp	r3, r1
     df8:	bf24      	itt	cs
     dfa:	1a5b      	subcs	r3, r3, r1
     dfc:	ea40 000c 	orrcs.w	r0, r0, ip
     e00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     e04:	bf24      	itt	cs
     e06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     e0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     e0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     e12:	bf24      	itt	cs
     e14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     e18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     e1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     e20:	bf24      	itt	cs
     e22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     e26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     e2a:	011b      	lsls	r3, r3, #4
     e2c:	bf18      	it	ne
     e2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     e32:	d1e0      	bne.n	df6 <__aeabi_fdiv+0x46>
     e34:	2afd      	cmp	r2, #253	; 0xfd
     e36:	f63f af50 	bhi.w	cda <__aeabi_fmul+0x92>
     e3a:	428b      	cmp	r3, r1
     e3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     e40:	bf08      	it	eq
     e42:	f020 0001 	biceq.w	r0, r0, #1
     e46:	4770      	bx	lr
     e48:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     e4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     e50:	327f      	adds	r2, #127	; 0x7f
     e52:	bfc2      	ittt	gt
     e54:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     e58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     e5c:	4770      	bxgt	lr
     e5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     e62:	f04f 0300 	mov.w	r3, #0
     e66:	3a01      	subs	r2, #1
     e68:	e737      	b.n	cda <__aeabi_fmul+0x92>
     e6a:	f092 0f00 	teq	r2, #0
     e6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     e72:	bf02      	ittt	eq
     e74:	0040      	lsleq	r0, r0, #1
     e76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     e7a:	3a01      	subeq	r2, #1
     e7c:	d0f9      	beq.n	e72 <__aeabi_fdiv+0xc2>
     e7e:	ea40 000c 	orr.w	r0, r0, ip
     e82:	f093 0f00 	teq	r3, #0
     e86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     e8a:	bf02      	ittt	eq
     e8c:	0049      	lsleq	r1, r1, #1
     e8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     e92:	3b01      	subeq	r3, #1
     e94:	d0f9      	beq.n	e8a <__aeabi_fdiv+0xda>
     e96:	ea41 010c 	orr.w	r1, r1, ip
     e9a:	e795      	b.n	dc8 <__aeabi_fdiv+0x18>
     e9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     ea0:	ea92 0f0c 	teq	r2, ip
     ea4:	d108      	bne.n	eb8 <__aeabi_fdiv+0x108>
     ea6:	0242      	lsls	r2, r0, #9
     ea8:	f47f af7d 	bne.w	da6 <__aeabi_fmul+0x15e>
     eac:	ea93 0f0c 	teq	r3, ip
     eb0:	f47f af70 	bne.w	d94 <__aeabi_fmul+0x14c>
     eb4:	4608      	mov	r0, r1
     eb6:	e776      	b.n	da6 <__aeabi_fmul+0x15e>
     eb8:	ea93 0f0c 	teq	r3, ip
     ebc:	d104      	bne.n	ec8 <__aeabi_fdiv+0x118>
     ebe:	024b      	lsls	r3, r1, #9
     ec0:	f43f af4c 	beq.w	d5c <__aeabi_fmul+0x114>
     ec4:	4608      	mov	r0, r1
     ec6:	e76e      	b.n	da6 <__aeabi_fmul+0x15e>
     ec8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     ecc:	bf18      	it	ne
     ece:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     ed2:	d1ca      	bne.n	e6a <__aeabi_fdiv+0xba>
     ed4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     ed8:	f47f af5c 	bne.w	d94 <__aeabi_fmul+0x14c>
     edc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     ee0:	f47f af3c 	bne.w	d5c <__aeabi_fmul+0x114>
     ee4:	e75f      	b.n	da6 <__aeabi_fmul+0x15e>
     ee6:	bf00      	nop

00000ee8 <__gesf2>:
     ee8:	f04f 3cff 	mov.w	ip, #4294967295
     eec:	e006      	b.n	efc <__cmpsf2+0x4>
     eee:	bf00      	nop

00000ef0 <__lesf2>:
     ef0:	f04f 0c01 	mov.w	ip, #1
     ef4:	e002      	b.n	efc <__cmpsf2+0x4>
     ef6:	bf00      	nop

00000ef8 <__cmpsf2>:
     ef8:	f04f 0c01 	mov.w	ip, #1
     efc:	f84d cd04 	str.w	ip, [sp, #-4]!
     f00:	ea4f 0240 	mov.w	r2, r0, lsl #1
     f04:	ea4f 0341 	mov.w	r3, r1, lsl #1
     f08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     f0c:	bf18      	it	ne
     f0e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     f12:	d011      	beq.n	f38 <__cmpsf2+0x40>
     f14:	b001      	add	sp, #4
     f16:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     f1a:	bf18      	it	ne
     f1c:	ea90 0f01 	teqne	r0, r1
     f20:	bf58      	it	pl
     f22:	ebb2 0003 	subspl.w	r0, r2, r3
     f26:	bf88      	it	hi
     f28:	17c8      	asrhi	r0, r1, #31
     f2a:	bf38      	it	cc
     f2c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     f30:	bf18      	it	ne
     f32:	f040 0001 	orrne.w	r0, r0, #1
     f36:	4770      	bx	lr
     f38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     f3c:	d102      	bne.n	f44 <__cmpsf2+0x4c>
     f3e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
     f42:	d105      	bne.n	f50 <__cmpsf2+0x58>
     f44:	ea7f 6c23 	mvns.w	ip, r3, asr #24
     f48:	d1e4      	bne.n	f14 <__cmpsf2+0x1c>
     f4a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
     f4e:	d0e1      	beq.n	f14 <__cmpsf2+0x1c>
     f50:	f85d 0b04 	ldr.w	r0, [sp], #4
     f54:	4770      	bx	lr
     f56:	bf00      	nop

00000f58 <__aeabi_cfrcmple>:
     f58:	4684      	mov	ip, r0
     f5a:	4608      	mov	r0, r1
     f5c:	4661      	mov	r1, ip
     f5e:	e7ff      	b.n	f60 <__aeabi_cfcmpeq>

00000f60 <__aeabi_cfcmpeq>:
     f60:	b50f      	push	{r0, r1, r2, r3, lr}
     f62:	f7ff ffc9 	bl	ef8 <__cmpsf2>
     f66:	2800      	cmp	r0, #0
     f68:	bf48      	it	mi
     f6a:	f110 0f00 	cmnmi.w	r0, #0
     f6e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00000f70 <__aeabi_fcmpeq>:
     f70:	f84d ed08 	str.w	lr, [sp, #-8]!
     f74:	f7ff fff4 	bl	f60 <__aeabi_cfcmpeq>
     f78:	bf0c      	ite	eq
     f7a:	2001      	moveq	r0, #1
     f7c:	2000      	movne	r0, #0
     f7e:	f85d fb08 	ldr.w	pc, [sp], #8
     f82:	bf00      	nop

00000f84 <__aeabi_fcmplt>:
     f84:	f84d ed08 	str.w	lr, [sp, #-8]!
     f88:	f7ff ffea 	bl	f60 <__aeabi_cfcmpeq>
     f8c:	bf34      	ite	cc
     f8e:	2001      	movcc	r0, #1
     f90:	2000      	movcs	r0, #0
     f92:	f85d fb08 	ldr.w	pc, [sp], #8
     f96:	bf00      	nop

00000f98 <__aeabi_fcmple>:
     f98:	f84d ed08 	str.w	lr, [sp, #-8]!
     f9c:	f7ff ffe0 	bl	f60 <__aeabi_cfcmpeq>
     fa0:	bf94      	ite	ls
     fa2:	2001      	movls	r0, #1
     fa4:	2000      	movhi	r0, #0
     fa6:	f85d fb08 	ldr.w	pc, [sp], #8
     faa:	bf00      	nop

00000fac <__aeabi_fcmpge>:
     fac:	f84d ed08 	str.w	lr, [sp, #-8]!
     fb0:	f7ff ffd2 	bl	f58 <__aeabi_cfrcmple>
     fb4:	bf94      	ite	ls
     fb6:	2001      	movls	r0, #1
     fb8:	2000      	movhi	r0, #0
     fba:	f85d fb08 	ldr.w	pc, [sp], #8
     fbe:	bf00      	nop

00000fc0 <__aeabi_fcmpgt>:
     fc0:	f84d ed08 	str.w	lr, [sp, #-8]!
     fc4:	f7ff ffc8 	bl	f58 <__aeabi_cfrcmple>
     fc8:	bf34      	ite	cc
     fca:	2001      	movcc	r0, #1
     fcc:	2000      	movcs	r0, #0
     fce:	f85d fb08 	ldr.w	pc, [sp], #8
     fd2:	bf00      	nop

00000fd4 <__aeabi_f2iz>:
     fd4:	ea4f 0240 	mov.w	r2, r0, lsl #1
     fd8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     fdc:	d30f      	bcc.n	ffe <__aeabi_f2iz+0x2a>
     fde:	f04f 039e 	mov.w	r3, #158	; 0x9e
     fe2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     fe6:	d90d      	bls.n	1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
     fe8:	ea4f 2300 	mov.w	r3, r0, lsl #8
     fec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     ff0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     ff4:	fa23 f002 	lsr.w	r0, r3, r2
     ff8:	bf18      	it	ne
     ffa:	4240      	negne	r0, r0
     ffc:	4770      	bx	lr
     ffe:	f04f 0000 	mov.w	r0, #0
    1002:	4770      	bx	lr
    1004:	f112 0f61 	cmn.w	r2, #97	; 0x61
    1008:	d101      	bne.n	100e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
    100a:	0242      	lsls	r2, r0, #9
    100c:	d105      	bne.n	101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
    100e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    1012:	bf08      	it	eq
    1014:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    1018:	4770      	bx	lr
    101a:	f04f 0000 	mov.w	r0, #0
    101e:	4770      	bx	lr

00001020 <__aeabi_uldivmod>:
    1020:	b953      	cbnz	r3, 1038 <__aeabi_uldivmod+0x18>
    1022:	b94a      	cbnz	r2, 1038 <__aeabi_uldivmod+0x18>
    1024:	2900      	cmp	r1, #0
    1026:	bf08      	it	eq
    1028:	2800      	cmpeq	r0, #0
    102a:	bf1c      	itt	ne
    102c:	f04f 31ff 	movne.w	r1, #4294967295
    1030:	f04f 30ff 	movne.w	r0, #4294967295
    1034:	f000 b96c 	b.w	1310 <__aeabi_idiv0>
    1038:	f1ad 0c08 	sub.w	ip, sp, #8
    103c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1040:	f000 f806 	bl	1050 <__udivmoddi4>
    1044:	f8dd e004 	ldr.w	lr, [sp, #4]
    1048:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    104c:	b004      	add	sp, #16
    104e:	4770      	bx	lr

00001050 <__udivmoddi4>:
    1050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1054:	9e08      	ldr	r6, [sp, #32]
    1056:	460d      	mov	r5, r1
    1058:	4604      	mov	r4, r0
    105a:	468e      	mov	lr, r1
    105c:	2b00      	cmp	r3, #0
    105e:	f040 8082 	bne.w	1166 <__udivmoddi4+0x116>
    1062:	428a      	cmp	r2, r1
    1064:	4617      	mov	r7, r2
    1066:	d946      	bls.n	10f6 <__udivmoddi4+0xa6>
    1068:	fab2 f282 	clz	r2, r2
    106c:	b14a      	cbz	r2, 1082 <__udivmoddi4+0x32>
    106e:	f1c2 0120 	rsb	r1, r2, #32
    1072:	fa05 f302 	lsl.w	r3, r5, r2
    1076:	fa20 f101 	lsr.w	r1, r0, r1
    107a:	4097      	lsls	r7, r2
    107c:	ea41 0e03 	orr.w	lr, r1, r3
    1080:	4094      	lsls	r4, r2
    1082:	ea4f 4817 	mov.w	r8, r7, lsr #16
    1086:	0c23      	lsrs	r3, r4, #16
    1088:	fbbe fcf8 	udiv	ip, lr, r8
    108c:	b2b9      	uxth	r1, r7
    108e:	fb08 ee1c 	mls	lr, r8, ip, lr
    1092:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
    1096:	fb0c f001 	mul.w	r0, ip, r1
    109a:	4298      	cmp	r0, r3
    109c:	d90a      	bls.n	10b4 <__udivmoddi4+0x64>
    109e:	18fb      	adds	r3, r7, r3
    10a0:	f10c 35ff 	add.w	r5, ip, #4294967295
    10a4:	f080 8116 	bcs.w	12d4 <__udivmoddi4+0x284>
    10a8:	4298      	cmp	r0, r3
    10aa:	f240 8113 	bls.w	12d4 <__udivmoddi4+0x284>
    10ae:	f1ac 0c02 	sub.w	ip, ip, #2
    10b2:	443b      	add	r3, r7
    10b4:	1a1b      	subs	r3, r3, r0
    10b6:	b2a4      	uxth	r4, r4
    10b8:	fbb3 f0f8 	udiv	r0, r3, r8
    10bc:	fb08 3310 	mls	r3, r8, r0, r3
    10c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    10c4:	fb00 f101 	mul.w	r1, r0, r1
    10c8:	42a1      	cmp	r1, r4
    10ca:	d909      	bls.n	10e0 <__udivmoddi4+0x90>
    10cc:	193c      	adds	r4, r7, r4
    10ce:	f100 33ff 	add.w	r3, r0, #4294967295
    10d2:	f080 8101 	bcs.w	12d8 <__udivmoddi4+0x288>
    10d6:	42a1      	cmp	r1, r4
    10d8:	f240 80fe 	bls.w	12d8 <__udivmoddi4+0x288>
    10dc:	3802      	subs	r0, #2
    10de:	443c      	add	r4, r7
    10e0:	1a64      	subs	r4, r4, r1
    10e2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    10e6:	2100      	movs	r1, #0
    10e8:	b11e      	cbz	r6, 10f2 <__udivmoddi4+0xa2>
    10ea:	40d4      	lsrs	r4, r2
    10ec:	2300      	movs	r3, #0
    10ee:	e9c6 4300 	strd	r4, r3, [r6]
    10f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    10f6:	b902      	cbnz	r2, 10fa <__udivmoddi4+0xaa>
    10f8:	deff      	udf	#255	; 0xff
    10fa:	fab2 f282 	clz	r2, r2
    10fe:	2a00      	cmp	r2, #0
    1100:	d14f      	bne.n	11a2 <__udivmoddi4+0x152>
    1102:	1bcb      	subs	r3, r1, r7
    1104:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1108:	fa1f f887 	uxth.w	r8, r7
    110c:	2101      	movs	r1, #1
    110e:	fbb3 fcfe 	udiv	ip, r3, lr
    1112:	0c25      	lsrs	r5, r4, #16
    1114:	fb0e 331c 	mls	r3, lr, ip, r3
    1118:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    111c:	fb08 f30c 	mul.w	r3, r8, ip
    1120:	42ab      	cmp	r3, r5
    1122:	d907      	bls.n	1134 <__udivmoddi4+0xe4>
    1124:	197d      	adds	r5, r7, r5
    1126:	f10c 30ff 	add.w	r0, ip, #4294967295
    112a:	d202      	bcs.n	1132 <__udivmoddi4+0xe2>
    112c:	42ab      	cmp	r3, r5
    112e:	f200 80e7 	bhi.w	1300 <__udivmoddi4+0x2b0>
    1132:	4684      	mov	ip, r0
    1134:	1aed      	subs	r5, r5, r3
    1136:	b2a3      	uxth	r3, r4
    1138:	fbb5 f0fe 	udiv	r0, r5, lr
    113c:	fb0e 5510 	mls	r5, lr, r0, r5
    1140:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    1144:	fb08 f800 	mul.w	r8, r8, r0
    1148:	45a0      	cmp	r8, r4
    114a:	d907      	bls.n	115c <__udivmoddi4+0x10c>
    114c:	193c      	adds	r4, r7, r4
    114e:	f100 33ff 	add.w	r3, r0, #4294967295
    1152:	d202      	bcs.n	115a <__udivmoddi4+0x10a>
    1154:	45a0      	cmp	r8, r4
    1156:	f200 80d7 	bhi.w	1308 <__udivmoddi4+0x2b8>
    115a:	4618      	mov	r0, r3
    115c:	eba4 0408 	sub.w	r4, r4, r8
    1160:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    1164:	e7c0      	b.n	10e8 <__udivmoddi4+0x98>
    1166:	428b      	cmp	r3, r1
    1168:	d908      	bls.n	117c <__udivmoddi4+0x12c>
    116a:	2e00      	cmp	r6, #0
    116c:	f000 80af 	beq.w	12ce <__udivmoddi4+0x27e>
    1170:	2100      	movs	r1, #0
    1172:	e9c6 0500 	strd	r0, r5, [r6]
    1176:	4608      	mov	r0, r1
    1178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    117c:	fab3 f183 	clz	r1, r3
    1180:	2900      	cmp	r1, #0
    1182:	d14b      	bne.n	121c <__udivmoddi4+0x1cc>
    1184:	42ab      	cmp	r3, r5
    1186:	d302      	bcc.n	118e <__udivmoddi4+0x13e>
    1188:	4282      	cmp	r2, r0
    118a:	f200 80b7 	bhi.w	12fc <__udivmoddi4+0x2ac>
    118e:	1a84      	subs	r4, r0, r2
    1190:	eb65 0303 	sbc.w	r3, r5, r3
    1194:	2001      	movs	r0, #1
    1196:	469e      	mov	lr, r3
    1198:	2e00      	cmp	r6, #0
    119a:	d0aa      	beq.n	10f2 <__udivmoddi4+0xa2>
    119c:	e9c6 4e00 	strd	r4, lr, [r6]
    11a0:	e7a7      	b.n	10f2 <__udivmoddi4+0xa2>
    11a2:	f1c2 0c20 	rsb	ip, r2, #32
    11a6:	fa01 f302 	lsl.w	r3, r1, r2
    11aa:	4097      	lsls	r7, r2
    11ac:	fa20 f00c 	lsr.w	r0, r0, ip
    11b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    11b4:	fa21 fc0c 	lsr.w	ip, r1, ip
    11b8:	4318      	orrs	r0, r3
    11ba:	fbbc f1fe 	udiv	r1, ip, lr
    11be:	0c05      	lsrs	r5, r0, #16
    11c0:	fb0e cc11 	mls	ip, lr, r1, ip
    11c4:	fa1f f887 	uxth.w	r8, r7
    11c8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    11cc:	fb01 f308 	mul.w	r3, r1, r8
    11d0:	42ab      	cmp	r3, r5
    11d2:	fa04 f402 	lsl.w	r4, r4, r2
    11d6:	d909      	bls.n	11ec <__udivmoddi4+0x19c>
    11d8:	197d      	adds	r5, r7, r5
    11da:	f101 3cff 	add.w	ip, r1, #4294967295
    11de:	f080 808b 	bcs.w	12f8 <__udivmoddi4+0x2a8>
    11e2:	42ab      	cmp	r3, r5
    11e4:	f240 8088 	bls.w	12f8 <__udivmoddi4+0x2a8>
    11e8:	3902      	subs	r1, #2
    11ea:	443d      	add	r5, r7
    11ec:	1aeb      	subs	r3, r5, r3
    11ee:	b285      	uxth	r5, r0
    11f0:	fbb3 f0fe 	udiv	r0, r3, lr
    11f4:	fb0e 3310 	mls	r3, lr, r0, r3
    11f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    11fc:	fb00 f308 	mul.w	r3, r0, r8
    1200:	42ab      	cmp	r3, r5
    1202:	d907      	bls.n	1214 <__udivmoddi4+0x1c4>
    1204:	197d      	adds	r5, r7, r5
    1206:	f100 3cff 	add.w	ip, r0, #4294967295
    120a:	d271      	bcs.n	12f0 <__udivmoddi4+0x2a0>
    120c:	42ab      	cmp	r3, r5
    120e:	d96f      	bls.n	12f0 <__udivmoddi4+0x2a0>
    1210:	3802      	subs	r0, #2
    1212:	443d      	add	r5, r7
    1214:	1aeb      	subs	r3, r5, r3
    1216:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    121a:	e778      	b.n	110e <__udivmoddi4+0xbe>
    121c:	f1c1 0c20 	rsb	ip, r1, #32
    1220:	408b      	lsls	r3, r1
    1222:	fa22 f70c 	lsr.w	r7, r2, ip
    1226:	431f      	orrs	r7, r3
    1228:	fa20 f40c 	lsr.w	r4, r0, ip
    122c:	fa05 f301 	lsl.w	r3, r5, r1
    1230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1234:	fa25 f50c 	lsr.w	r5, r5, ip
    1238:	431c      	orrs	r4, r3
    123a:	0c23      	lsrs	r3, r4, #16
    123c:	fbb5 f9fe 	udiv	r9, r5, lr
    1240:	fa1f f887 	uxth.w	r8, r7
    1244:	fb0e 5519 	mls	r5, lr, r9, r5
    1248:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
    124c:	fb09 fa08 	mul.w	sl, r9, r8
    1250:	45aa      	cmp	sl, r5
    1252:	fa02 f201 	lsl.w	r2, r2, r1
    1256:	fa00 f301 	lsl.w	r3, r0, r1
    125a:	d908      	bls.n	126e <__udivmoddi4+0x21e>
    125c:	197d      	adds	r5, r7, r5
    125e:	f109 30ff 	add.w	r0, r9, #4294967295
    1262:	d247      	bcs.n	12f4 <__udivmoddi4+0x2a4>
    1264:	45aa      	cmp	sl, r5
    1266:	d945      	bls.n	12f4 <__udivmoddi4+0x2a4>
    1268:	f1a9 0902 	sub.w	r9, r9, #2
    126c:	443d      	add	r5, r7
    126e:	eba5 050a 	sub.w	r5, r5, sl
    1272:	b2a4      	uxth	r4, r4
    1274:	fbb5 f0fe 	udiv	r0, r5, lr
    1278:	fb0e 5510 	mls	r5, lr, r0, r5
    127c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    1280:	fb00 f808 	mul.w	r8, r0, r8
    1284:	45a0      	cmp	r8, r4
    1286:	d907      	bls.n	1298 <__udivmoddi4+0x248>
    1288:	193c      	adds	r4, r7, r4
    128a:	f100 35ff 	add.w	r5, r0, #4294967295
    128e:	d22d      	bcs.n	12ec <__udivmoddi4+0x29c>
    1290:	45a0      	cmp	r8, r4
    1292:	d92b      	bls.n	12ec <__udivmoddi4+0x29c>
    1294:	3802      	subs	r0, #2
    1296:	443c      	add	r4, r7
    1298:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    129c:	eba4 0408 	sub.w	r4, r4, r8
    12a0:	fba0 8902 	umull	r8, r9, r0, r2
    12a4:	454c      	cmp	r4, r9
    12a6:	46c6      	mov	lr, r8
    12a8:	464d      	mov	r5, r9
    12aa:	d319      	bcc.n	12e0 <__udivmoddi4+0x290>
    12ac:	d016      	beq.n	12dc <__udivmoddi4+0x28c>
    12ae:	b15e      	cbz	r6, 12c8 <__udivmoddi4+0x278>
    12b0:	ebb3 020e 	subs.w	r2, r3, lr
    12b4:	eb64 0405 	sbc.w	r4, r4, r5
    12b8:	fa04 fc0c 	lsl.w	ip, r4, ip
    12bc:	40ca      	lsrs	r2, r1
    12be:	ea4c 0202 	orr.w	r2, ip, r2
    12c2:	40cc      	lsrs	r4, r1
    12c4:	e9c6 2400 	strd	r2, r4, [r6]
    12c8:	2100      	movs	r1, #0
    12ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12ce:	4631      	mov	r1, r6
    12d0:	4630      	mov	r0, r6
    12d2:	e70e      	b.n	10f2 <__udivmoddi4+0xa2>
    12d4:	46ac      	mov	ip, r5
    12d6:	e6ed      	b.n	10b4 <__udivmoddi4+0x64>
    12d8:	4618      	mov	r0, r3
    12da:	e701      	b.n	10e0 <__udivmoddi4+0x90>
    12dc:	4543      	cmp	r3, r8
    12de:	d2e6      	bcs.n	12ae <__udivmoddi4+0x25e>
    12e0:	ebb8 0e02 	subs.w	lr, r8, r2
    12e4:	eb69 0507 	sbc.w	r5, r9, r7
    12e8:	3801      	subs	r0, #1
    12ea:	e7e0      	b.n	12ae <__udivmoddi4+0x25e>
    12ec:	4628      	mov	r0, r5
    12ee:	e7d3      	b.n	1298 <__udivmoddi4+0x248>
    12f0:	4660      	mov	r0, ip
    12f2:	e78f      	b.n	1214 <__udivmoddi4+0x1c4>
    12f4:	4681      	mov	r9, r0
    12f6:	e7ba      	b.n	126e <__udivmoddi4+0x21e>
    12f8:	4661      	mov	r1, ip
    12fa:	e777      	b.n	11ec <__udivmoddi4+0x19c>
    12fc:	4608      	mov	r0, r1
    12fe:	e74b      	b.n	1198 <__udivmoddi4+0x148>
    1300:	f1ac 0c02 	sub.w	ip, ip, #2
    1304:	443d      	add	r5, r7
    1306:	e715      	b.n	1134 <__udivmoddi4+0xe4>
    1308:	3802      	subs	r0, #2
    130a:	443c      	add	r4, r7
    130c:	e726      	b.n	115c <__udivmoddi4+0x10c>
    130e:	bf00      	nop

00001310 <__aeabi_idiv0>:
    1310:	4770      	bx	lr
    1312:	bf00      	nop

00001314 <__aeabi_dcmpun>:
    1314:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1318:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    131c:	d102      	bne.n	1324 <__aeabi_dcmpun+0x10>
    131e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    1322:	d10a      	bne.n	133a <__aeabi_dcmpun+0x26>
    1324:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1328:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    132c:	d102      	bne.n	1334 <__aeabi_dcmpun+0x20>
    132e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    1332:	d102      	bne.n	133a <__aeabi_dcmpun+0x26>
    1334:	f04f 0000 	mov.w	r0, #0
    1338:	4770      	bx	lr
    133a:	f04f 0001 	mov.w	r0, #1
    133e:	4770      	bx	lr

00001340 <strcmp>:
    1340:	f810 2b01 	ldrb.w	r2, [r0], #1
    1344:	f811 3b01 	ldrb.w	r3, [r1], #1
    1348:	2a01      	cmp	r2, #1
    134a:	bf28      	it	cs
    134c:	429a      	cmpcs	r2, r3
    134e:	d0f7      	beq.n	1340 <strcmp>
    1350:	1ad0      	subs	r0, r2, r3
    1352:	4770      	bx	lr

00001354 <strlen>:
    1354:	4603      	mov	r3, r0
    1356:	f813 2b01 	ldrb.w	r2, [r3], #1
    135a:	2a00      	cmp	r2, #0
    135c:	d1fb      	bne.n	1356 <strlen+0x2>
    135e:	1a18      	subs	r0, r3, r0
    1360:	3801      	subs	r0, #1
    1362:	4770      	bx	lr
    1364:	0000      	movs	r0, r0
	...

00001368 <quaternion_to_euler_angles>:
    vector_ijk rotated = vector_3d_initialize(quaternion_rotated_vector.b,quaternion_rotated_vector.c,quaternion_rotated_vector.d);
    return rotated;
}

euler_angles quaternion_to_euler_angles(Quaternion q)
{
    1368:	b084      	sub	sp, #16
    136a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    136e:	b089      	sub	sp, #36	; 0x24
    1370:	9001      	str	r0, [sp, #4]
    1372:	a813      	add	r0, sp, #76	; 0x4c
    1374:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    euler_angles result;
    double q0 = q.a;
    1378:	9813      	ldr	r0, [sp, #76]	; 0x4c
    137a:	f7ff f815 	bl	3a8 <__aeabi_f2d>
    137e:	4680      	mov	r8, r0
    1380:	4689      	mov	r9, r1
    double q1 = q.b;
    1382:	9814      	ldr	r0, [sp, #80]	; 0x50
    1384:	f7ff f810 	bl	3a8 <__aeabi_f2d>
    1388:	4682      	mov	sl, r0
    138a:	468b      	mov	fp, r1
    double q2 = q.c;
    138c:	9815      	ldr	r0, [sp, #84]	; 0x54
    138e:	f7ff f80b 	bl	3a8 <__aeabi_f2d>
    1392:	4604      	mov	r4, r0
    1394:	460d      	mov	r5, r1
    double q3 = q.d;
    1396:	9816      	ldr	r0, [sp, #88]	; 0x58
    1398:	f7ff f806 	bl	3a8 <__aeabi_f2d>
    139c:	4606      	mov	r6, r0
    139e:	460f      	mov	r7, r1
    result.roll = atan2(2*(q0*q1 + q2*q3),1 - 2*(q1*q1 + q2*q2))*180/3.14;
    13a0:	4652      	mov	r2, sl
    13a2:	465b      	mov	r3, fp
    13a4:	e9cd 8902 	strd	r8, r9, [sp, #8]
    13a8:	4640      	mov	r0, r8
    13aa:	4649      	mov	r1, r9
    13ac:	f7ff f854 	bl	458 <__aeabi_dmul>
    13b0:	4680      	mov	r8, r0
    13b2:	4689      	mov	r9, r1
    13b4:	4632      	mov	r2, r6
    13b6:	463b      	mov	r3, r7
    13b8:	4620      	mov	r0, r4
    13ba:	4629      	mov	r1, r5
    13bc:	f7ff f84c 	bl	458 <__aeabi_dmul>
    13c0:	4602      	mov	r2, r0
    13c2:	460b      	mov	r3, r1
    13c4:	4640      	mov	r0, r8
    13c6:	4649      	mov	r1, r9
    13c8:	f7fe fe90 	bl	ec <__adddf3>
    13cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
    13d0:	4652      	mov	r2, sl
    13d2:	465b      	mov	r3, fp
    13d4:	4650      	mov	r0, sl
    13d6:	4659      	mov	r1, fp
    13d8:	f7ff f83e 	bl	458 <__aeabi_dmul>
    13dc:	4680      	mov	r8, r0
    13de:	4689      	mov	r9, r1
    13e0:	4622      	mov	r2, r4
    13e2:	462b      	mov	r3, r5
    13e4:	4620      	mov	r0, r4
    13e6:	4629      	mov	r1, r5
    13e8:	f7ff f836 	bl	458 <__aeabi_dmul>
    13ec:	460a      	mov	r2, r1
    13ee:	4601      	mov	r1, r0
    13f0:	e9cd 1206 	strd	r1, r2, [sp, #24]
    13f4:	4613      	mov	r3, r2
    13f6:	4602      	mov	r2, r0
    13f8:	4640      	mov	r0, r8
    13fa:	4649      	mov	r1, r9
    13fc:	f7fe fe76 	bl	ec <__adddf3>
    1400:	4602      	mov	r2, r0
    1402:	460b      	mov	r3, r1
    1404:	f7fe fe72 	bl	ec <__adddf3>
    1408:	4602      	mov	r2, r0
    140a:	460b      	mov	r3, r1
    140c:	2000      	movs	r0, #0
    140e:	494a      	ldr	r1, [pc, #296]	; (1538 <quaternion_to_euler_angles+0x1d0>)
    1410:	f7fe fe6a 	bl	e8 <__aeabi_dsub>
    1414:	4680      	mov	r8, r0
    1416:	4689      	mov	r9, r1
    1418:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    141c:	4602      	mov	r2, r0
    141e:	460b      	mov	r3, r1
    1420:	f7fe fe64 	bl	ec <__adddf3>
    1424:	4642      	mov	r2, r8
    1426:	464b      	mov	r3, r9
    1428:	f007 fb96 	bl	8b58 <atan2>
    142c:	2200      	movs	r2, #0
    142e:	4b43      	ldr	r3, [pc, #268]	; (153c <quaternion_to_euler_angles+0x1d4>)
    1430:	f7ff f812 	bl	458 <__aeabi_dmul>
    1434:	a33e      	add	r3, pc, #248	; (adr r3, 1530 <quaternion_to_euler_angles+0x1c8>)
    1436:	e9d3 2300 	ldrd	r2, r3, [r3]
    143a:	f7ff f937 	bl	6ac <__aeabi_ddiv>
    143e:	f7ff faa5 	bl	98c <__aeabi_d2f>
    1442:	9a01      	ldr	r2, [sp, #4]
    1444:	6010      	str	r0, [r2, #0]
    result.pitch = asin(2*(q0*q2 - q3*q1))*180/3.14;
    1446:	4622      	mov	r2, r4
    1448:	462b      	mov	r3, r5
    144a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    144e:	f7ff f803 	bl	458 <__aeabi_dmul>
    1452:	4680      	mov	r8, r0
    1454:	4689      	mov	r9, r1
    1456:	4632      	mov	r2, r6
    1458:	463b      	mov	r3, r7
    145a:	4650      	mov	r0, sl
    145c:	4659      	mov	r1, fp
    145e:	f7fe fffb 	bl	458 <__aeabi_dmul>
    1462:	4602      	mov	r2, r0
    1464:	460b      	mov	r3, r1
    1466:	4640      	mov	r0, r8
    1468:	4649      	mov	r1, r9
    146a:	f7fe fe3d 	bl	e8 <__aeabi_dsub>
    146e:	4602      	mov	r2, r0
    1470:	460b      	mov	r3, r1
    1472:	f7fe fe3b 	bl	ec <__adddf3>
    1476:	f007 fb17 	bl	8aa8 <asin>
    147a:	2200      	movs	r2, #0
    147c:	4b2f      	ldr	r3, [pc, #188]	; (153c <quaternion_to_euler_angles+0x1d4>)
    147e:	f7fe ffeb 	bl	458 <__aeabi_dmul>
    1482:	a32b      	add	r3, pc, #172	; (adr r3, 1530 <quaternion_to_euler_angles+0x1c8>)
    1484:	e9d3 2300 	ldrd	r2, r3, [r3]
    1488:	f7ff f910 	bl	6ac <__aeabi_ddiv>
    148c:	f7ff fa7e 	bl	98c <__aeabi_d2f>
    1490:	9901      	ldr	r1, [sp, #4]
    1492:	6048      	str	r0, [r1, #4]
    if (0) //q.d==0
        result.yaw = 0.0;
    else
        result.yaw = atan2(2*(q0*q3 + q1*q2),1 - 2*(q2*q2 + q3*q3))*180/3.14;
    1494:	4632      	mov	r2, r6
    1496:	463b      	mov	r3, r7
    1498:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    149c:	f7fe ffdc 	bl	458 <__aeabi_dmul>
    14a0:	4680      	mov	r8, r0
    14a2:	4689      	mov	r9, r1
    14a4:	4622      	mov	r2, r4
    14a6:	462b      	mov	r3, r5
    14a8:	4650      	mov	r0, sl
    14aa:	4659      	mov	r1, fp
    14ac:	f7fe ffd4 	bl	458 <__aeabi_dmul>
    14b0:	4602      	mov	r2, r0
    14b2:	460b      	mov	r3, r1
    14b4:	4640      	mov	r0, r8
    14b6:	4649      	mov	r1, r9
    14b8:	f7fe fe18 	bl	ec <__adddf3>
    14bc:	4604      	mov	r4, r0
    14be:	460d      	mov	r5, r1
    14c0:	4632      	mov	r2, r6
    14c2:	463b      	mov	r3, r7
    14c4:	4630      	mov	r0, r6
    14c6:	4639      	mov	r1, r7
    14c8:	f7fe ffc6 	bl	458 <__aeabi_dmul>
    14cc:	4602      	mov	r2, r0
    14ce:	460b      	mov	r3, r1
    14d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    14d4:	f7fe fe0a 	bl	ec <__adddf3>
    14d8:	4602      	mov	r2, r0
    14da:	460b      	mov	r3, r1
    14dc:	f7fe fe06 	bl	ec <__adddf3>
    14e0:	4602      	mov	r2, r0
    14e2:	460b      	mov	r3, r1
    14e4:	2000      	movs	r0, #0
    14e6:	4914      	ldr	r1, [pc, #80]	; (1538 <quaternion_to_euler_angles+0x1d0>)
    14e8:	f7fe fdfe 	bl	e8 <__aeabi_dsub>
    14ec:	4680      	mov	r8, r0
    14ee:	4689      	mov	r9, r1
    14f0:	4622      	mov	r2, r4
    14f2:	462b      	mov	r3, r5
    14f4:	4620      	mov	r0, r4
    14f6:	4629      	mov	r1, r5
    14f8:	f7fe fdf8 	bl	ec <__adddf3>
    14fc:	4642      	mov	r2, r8
    14fe:	464b      	mov	r3, r9
    1500:	f007 fb2a 	bl	8b58 <atan2>
    1504:	2200      	movs	r2, #0
    1506:	4b0d      	ldr	r3, [pc, #52]	; (153c <quaternion_to_euler_angles+0x1d4>)
    1508:	f7fe ffa6 	bl	458 <__aeabi_dmul>
    150c:	a308      	add	r3, pc, #32	; (adr r3, 1530 <quaternion_to_euler_angles+0x1c8>)
    150e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1512:	f7ff f8cb 	bl	6ac <__aeabi_ddiv>
    1516:	f7ff fa39 	bl	98c <__aeabi_d2f>
    151a:	9b01      	ldr	r3, [sp, #4]
    151c:	6098      	str	r0, [r3, #8]
    return result;
}
    151e:	4618      	mov	r0, r3
    1520:	b009      	add	sp, #36	; 0x24
    1522:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1526:	b004      	add	sp, #16
    1528:	4770      	bx	lr
    152a:	bf00      	nop
    152c:	f3af 8000 	nop.w
    1530:	51eb851f 	.word	0x51eb851f
    1534:	40091eb8 	.word	0x40091eb8
    1538:	3ff00000 	.word	0x3ff00000
    153c:	40668000 	.word	0x40668000

00001540 <quaternion_from_accelerometer>:
#include "sensor_processing_lib.h"


Quaternion quaternion_from_accelerometer(float ax, float ay, float az)
{
    1540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1542:	4604      	mov	r4, r0
    1544:	460f      	mov	r7, r1
    1546:	4615      	mov	r5, r2
    /*vector_ijk gravity = vector_3d_initialize(0.0f, 0.0f, -1.0f);
    vector_ijk accelerometer = vector_3d_initialize(ax, ay, az);
    Quaternion orientation = quaternion_between_vectors(gravity,accelerometer);
    return orientation;*/
    float norm_u_norm_v = 1.0;
    float cos_theta = -1.0*az;
    1548:	f103 4000 	add.w	r0, r3, #2147483648	; 0x80000000
    //float half_cos = sqrt(0.5*(1.0 + cos_theta));
    float half_cos = 0.7071*sqrt(1.0 + cos_theta);
    154c:	f7fe ff2c 	bl	3a8 <__aeabi_f2d>
    1550:	2200      	movs	r2, #0
    1552:	4b13      	ldr	r3, [pc, #76]	; (15a0 <quaternion_from_accelerometer+0x60>)
    1554:	f7fe fdca 	bl	ec <__adddf3>
    1558:	f007 fb00 	bl	8b5c <sqrt>
    155c:	a30e      	add	r3, pc, #56	; (adr r3, 1598 <quaternion_from_accelerometer+0x58>)
    155e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1562:	f7fe ff79 	bl	458 <__aeabi_dmul>
    1566:	f7ff fa11 	bl	98c <__aeabi_d2f>
    156a:	4601      	mov	r1, r0
    Quaternion orientation;
    orientation.a = half_cos;
    156c:	6020      	str	r0, [r4, #0]
    //float temp = 1/(2.0*half_cos);
    float temp = 0.5/half_cos;
    156e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
    1572:	f7ff fc1d 	bl	db0 <__aeabi_fdiv>
    1576:	4606      	mov	r6, r0
    orientation.b = -ay*temp;
    1578:	f105 4000 	add.w	r0, r5, #2147483648	; 0x80000000
    157c:	4631      	mov	r1, r6
    157e:	f7ff fb63 	bl	c48 <__aeabi_fmul>
    1582:	6060      	str	r0, [r4, #4]
    orientation.c = ax*temp;
    1584:	4639      	mov	r1, r7
    1586:	4630      	mov	r0, r6
    1588:	f7ff fb5e 	bl	c48 <__aeabi_fmul>
    158c:	60a0      	str	r0, [r4, #8]
    orientation.d = 0.0;
    158e:	2300      	movs	r3, #0
    1590:	60e3      	str	r3, [r4, #12]
    return orientation;
}
    1592:	4620      	mov	r0, r4
    1594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1596:	bf00      	nop
    1598:	2de00d1b 	.word	0x2de00d1b
    159c:	3fe6a090 	.word	0x3fe6a090
    15a0:	3ff00000 	.word	0x3ff00000
    15a4:	00000000 	.word	0x00000000

000015a8 <fusion_coeffecient>:
    Quaternion result = quaternion_initialize(a,b,c,d);
    return result;
}

float fusion_coeffecient(vector_ijk virtual_gravity, vector_ijk sensor_gravity)
{
    15a8:	b082      	sub	sp, #8
    15aa:	b500      	push	{lr}
    15ac:	b087      	sub	sp, #28
    15ae:	f10d 0c18 	add.w	ip, sp, #24
    15b2:	e90c 0007 	stmdb	ip, {r0, r1, r2}
    15b6:	aa08      	add	r2, sp, #32
    15b8:	f842 3f04 	str.w	r3, [r2, #4]!
    float dot = vector_3d_dot_product(sensor_gravity,virtual_gravity);
    15bc:	e95c 0102 	ldrd	r0, r1, [ip, #-8]
    15c0:	e88d 0003 	stmia.w	sp, {r0, r1}
    15c4:	9b03      	ldr	r3, [sp, #12]
    15c6:	ca07      	ldmia	r2, {r0, r1, r2}
    15c8:	f007 fe9f 	bl	930a <vector_3d_dot_product>

    if (dot<=0.96)
    15cc:	f7fe feec 	bl	3a8 <__aeabi_f2d>
    15d0:	a307      	add	r3, pc, #28	; (adr r3, 15f0 <fusion_coeffecient+0x48>)
    15d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    15d6:	f7ff f9bb 	bl	950 <__aeabi_dcmple>
    15da:	b928      	cbnz	r0, 15e8 <fusion_coeffecient+0x40>
        return 40.0;

    return 10.0;
    15dc:	4806      	ldr	r0, [pc, #24]	; (15f8 <fusion_coeffecient+0x50>)
}
    15de:	b007      	add	sp, #28
    15e0:	f85d eb04 	ldr.w	lr, [sp], #4
    15e4:	b002      	add	sp, #8
    15e6:	4770      	bx	lr
        return 40.0;
    15e8:	4804      	ldr	r0, [pc, #16]	; (15fc <fusion_coeffecient+0x54>)
    15ea:	e7f8      	b.n	15de <fusion_coeffecient+0x36>
    15ec:	f3af 8000 	nop.w
    15f0:	eb851eb8 	.word	0xeb851eb8
    15f4:	3feeb851 	.word	0x3feeb851
    15f8:	41200000 	.word	0x41200000
    15fc:	42200000 	.word	0x42200000

00001600 <__ieee754_asin>:
    1600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1604:	4bca      	ldr	r3, [pc, #808]	; (1930 <__ieee754_asin+0x330>)
    1606:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    160a:	429f      	cmp	r7, r3
    160c:	b087      	sub	sp, #28
    160e:	460c      	mov	r4, r1
    1610:	4605      	mov	r5, r0
    1612:	dd16      	ble.n	1642 <__ieee754_asin+0x42>
    1614:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
    1618:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
    161c:	4603      	mov	r3, r0
    161e:	433b      	orrs	r3, r7
    1620:	f000 810c 	beq.w	183c <__ieee754_asin+0x23c>
    1624:	4602      	mov	r2, r0
    1626:	460b      	mov	r3, r1
    1628:	f7fe fd5e 	bl	e8 <__aeabi_dsub>
    162c:	4602      	mov	r2, r0
    162e:	460b      	mov	r3, r1
    1630:	f7ff f83c 	bl	6ac <__aeabi_ddiv>
    1634:	4603      	mov	r3, r0
    1636:	460a      	mov	r2, r1
    1638:	4618      	mov	r0, r3
    163a:	4611      	mov	r1, r2
    163c:	b007      	add	sp, #28
    163e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1642:	4bbc      	ldr	r3, [pc, #752]	; (1934 <__ieee754_asin+0x334>)
    1644:	429f      	cmp	r7, r3
    1646:	460e      	mov	r6, r1
    1648:	dc0f      	bgt.n	166a <__ieee754_asin+0x6a>
    164a:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
    164e:	f280 8179 	bge.w	1944 <__ieee754_asin+0x344>
    1652:	a39b      	add	r3, pc, #620	; (adr r3, 18c0 <__ieee754_asin+0x2c0>)
    1654:	e9d3 2300 	ldrd	r2, r3, [r3]
    1658:	f7fe fd48 	bl	ec <__adddf3>
    165c:	4bb6      	ldr	r3, [pc, #728]	; (1938 <__ieee754_asin+0x338>)
    165e:	2200      	movs	r2, #0
    1660:	f7ff f98a 	bl	978 <__aeabi_dcmpgt>
    1664:	2800      	cmp	r0, #0
    1666:	f040 8127 	bne.w	18b8 <__ieee754_asin+0x2b8>
    166a:	4628      	mov	r0, r5
    166c:	4621      	mov	r1, r4
    166e:	f007 fb99 	bl	8da4 <fabs>
    1672:	4602      	mov	r2, r0
    1674:	460b      	mov	r3, r1
    1676:	2000      	movs	r0, #0
    1678:	49af      	ldr	r1, [pc, #700]	; (1938 <__ieee754_asin+0x338>)
    167a:	f7fe fd35 	bl	e8 <__aeabi_dsub>
    167e:	4baf      	ldr	r3, [pc, #700]	; (193c <__ieee754_asin+0x33c>)
    1680:	2200      	movs	r2, #0
    1682:	f7fe fee9 	bl	458 <__aeabi_dmul>
    1686:	a390      	add	r3, pc, #576	; (adr r3, 18c8 <__ieee754_asin+0x2c8>)
    1688:	e9d3 2300 	ldrd	r2, r3, [r3]
    168c:	4604      	mov	r4, r0
    168e:	460d      	mov	r5, r1
    1690:	f7fe fee2 	bl	458 <__aeabi_dmul>
    1694:	a38e      	add	r3, pc, #568	; (adr r3, 18d0 <__ieee754_asin+0x2d0>)
    1696:	e9d3 2300 	ldrd	r2, r3, [r3]
    169a:	f7fe fd27 	bl	ec <__adddf3>
    169e:	4622      	mov	r2, r4
    16a0:	462b      	mov	r3, r5
    16a2:	f7fe fed9 	bl	458 <__aeabi_dmul>
    16a6:	a38c      	add	r3, pc, #560	; (adr r3, 18d8 <__ieee754_asin+0x2d8>)
    16a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    16ac:	f7fe fd1c 	bl	e8 <__aeabi_dsub>
    16b0:	4622      	mov	r2, r4
    16b2:	462b      	mov	r3, r5
    16b4:	f7fe fed0 	bl	458 <__aeabi_dmul>
    16b8:	a389      	add	r3, pc, #548	; (adr r3, 18e0 <__ieee754_asin+0x2e0>)
    16ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    16be:	f7fe fd15 	bl	ec <__adddf3>
    16c2:	4622      	mov	r2, r4
    16c4:	462b      	mov	r3, r5
    16c6:	f7fe fec7 	bl	458 <__aeabi_dmul>
    16ca:	a387      	add	r3, pc, #540	; (adr r3, 18e8 <__ieee754_asin+0x2e8>)
    16cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    16d0:	f7fe fd0a 	bl	e8 <__aeabi_dsub>
    16d4:	4622      	mov	r2, r4
    16d6:	462b      	mov	r3, r5
    16d8:	f7fe febe 	bl	458 <__aeabi_dmul>
    16dc:	a384      	add	r3, pc, #528	; (adr r3, 18f0 <__ieee754_asin+0x2f0>)
    16de:	e9d3 2300 	ldrd	r2, r3, [r3]
    16e2:	f7fe fd03 	bl	ec <__adddf3>
    16e6:	4622      	mov	r2, r4
    16e8:	462b      	mov	r3, r5
    16ea:	f7fe feb5 	bl	458 <__aeabi_dmul>
    16ee:	a382      	add	r3, pc, #520	; (adr r3, 18f8 <__ieee754_asin+0x2f8>)
    16f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    16f4:	4680      	mov	r8, r0
    16f6:	4689      	mov	r9, r1
    16f8:	4620      	mov	r0, r4
    16fa:	4629      	mov	r1, r5
    16fc:	e9cd 8902 	strd	r8, r9, [sp, #8]
    1700:	f7fe feaa 	bl	458 <__aeabi_dmul>
    1704:	a37e      	add	r3, pc, #504	; (adr r3, 1900 <__ieee754_asin+0x300>)
    1706:	e9d3 2300 	ldrd	r2, r3, [r3]
    170a:	f7fe fced 	bl	e8 <__aeabi_dsub>
    170e:	4622      	mov	r2, r4
    1710:	462b      	mov	r3, r5
    1712:	f7fe fea1 	bl	458 <__aeabi_dmul>
    1716:	a37c      	add	r3, pc, #496	; (adr r3, 1908 <__ieee754_asin+0x308>)
    1718:	e9d3 2300 	ldrd	r2, r3, [r3]
    171c:	f7fe fce6 	bl	ec <__adddf3>
    1720:	4622      	mov	r2, r4
    1722:	462b      	mov	r3, r5
    1724:	f7fe fe98 	bl	458 <__aeabi_dmul>
    1728:	a379      	add	r3, pc, #484	; (adr r3, 1910 <__ieee754_asin+0x310>)
    172a:	e9d3 2300 	ldrd	r2, r3, [r3]
    172e:	f7fe fcdb 	bl	e8 <__aeabi_dsub>
    1732:	4622      	mov	r2, r4
    1734:	462b      	mov	r3, r5
    1736:	f7fe fe8f 	bl	458 <__aeabi_dmul>
    173a:	4b7f      	ldr	r3, [pc, #508]	; (1938 <__ieee754_asin+0x338>)
    173c:	2200      	movs	r2, #0
    173e:	f7fe fcd5 	bl	ec <__adddf3>
    1742:	4602      	mov	r2, r0
    1744:	460b      	mov	r3, r1
    1746:	4692      	mov	sl, r2
    1748:	469b      	mov	fp, r3
    174a:	4620      	mov	r0, r4
    174c:	4629      	mov	r1, r5
    174e:	e9cd ab04 	strd	sl, fp, [sp, #16]
    1752:	f007 fa63 	bl	8c1c <__ieee754_sqrt>
    1756:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 1940 <__ieee754_asin+0x340>
    175a:	4567      	cmp	r7, ip
    175c:	4680      	mov	r8, r0
    175e:	4689      	mov	r9, r1
    1760:	f300 8089 	bgt.w	1876 <__ieee754_asin+0x276>
    1764:	468b      	mov	fp, r1
    1766:	f04f 0a00 	mov.w	sl, #0
    176a:	4602      	mov	r2, r0
    176c:	460b      	mov	r3, r1
    176e:	e9cd ab00 	strd	sl, fp, [sp]
    1772:	f7fe fcbb 	bl	ec <__adddf3>
    1776:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    177a:	4682      	mov	sl, r0
    177c:	468b      	mov	fp, r1
    177e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1782:	f7fe ff93 	bl	6ac <__aeabi_ddiv>
    1786:	4602      	mov	r2, r0
    1788:	460b      	mov	r3, r1
    178a:	4650      	mov	r0, sl
    178c:	4659      	mov	r1, fp
    178e:	f7fe fe63 	bl	458 <__aeabi_dmul>
    1792:	e9dd 2300 	ldrd	r2, r3, [sp]
    1796:	4682      	mov	sl, r0
    1798:	468b      	mov	fp, r1
    179a:	4610      	mov	r0, r2
    179c:	4619      	mov	r1, r3
    179e:	f7fe fe5b 	bl	458 <__aeabi_dmul>
    17a2:	4602      	mov	r2, r0
    17a4:	460b      	mov	r3, r1
    17a6:	4620      	mov	r0, r4
    17a8:	4629      	mov	r1, r5
    17aa:	f7fe fc9d 	bl	e8 <__aeabi_dsub>
    17ae:	e9dd 2300 	ldrd	r2, r3, [sp]
    17b2:	4604      	mov	r4, r0
    17b4:	460d      	mov	r5, r1
    17b6:	4640      	mov	r0, r8
    17b8:	4649      	mov	r1, r9
    17ba:	f7fe fc97 	bl	ec <__adddf3>
    17be:	4602      	mov	r2, r0
    17c0:	460b      	mov	r3, r1
    17c2:	4620      	mov	r0, r4
    17c4:	4629      	mov	r1, r5
    17c6:	f7fe ff71 	bl	6ac <__aeabi_ddiv>
    17ca:	4602      	mov	r2, r0
    17cc:	460b      	mov	r3, r1
    17ce:	f7fe fc8d 	bl	ec <__adddf3>
    17d2:	4602      	mov	r2, r0
    17d4:	460b      	mov	r3, r1
    17d6:	a150      	add	r1, pc, #320	; (adr r1, 1918 <__ieee754_asin+0x318>)
    17d8:	e9d1 0100 	ldrd	r0, r1, [r1]
    17dc:	f7fe fc84 	bl	e8 <__aeabi_dsub>
    17e0:	4602      	mov	r2, r0
    17e2:	460b      	mov	r3, r1
    17e4:	4650      	mov	r0, sl
    17e6:	4659      	mov	r1, fp
    17e8:	f7fe fc7e 	bl	e8 <__aeabi_dsub>
    17ec:	e9dd 2300 	ldrd	r2, r3, [sp]
    17f0:	4604      	mov	r4, r0
    17f2:	460d      	mov	r5, r1
    17f4:	4610      	mov	r0, r2
    17f6:	4619      	mov	r1, r3
    17f8:	f7fe fc78 	bl	ec <__adddf3>
    17fc:	4602      	mov	r2, r0
    17fe:	460b      	mov	r3, r1
    1800:	a147      	add	r1, pc, #284	; (adr r1, 1920 <__ieee754_asin+0x320>)
    1802:	e9d1 0100 	ldrd	r0, r1, [r1]
    1806:	f7fe fc6f 	bl	e8 <__aeabi_dsub>
    180a:	4602      	mov	r2, r0
    180c:	460b      	mov	r3, r1
    180e:	4620      	mov	r0, r4
    1810:	4629      	mov	r1, r5
    1812:	f7fe fc69 	bl	e8 <__aeabi_dsub>
    1816:	4602      	mov	r2, r0
    1818:	460b      	mov	r3, r1
    181a:	a141      	add	r1, pc, #260	; (adr r1, 1920 <__ieee754_asin+0x320>)
    181c:	e9d1 0100 	ldrd	r0, r1, [r1]
    1820:	f7fe fc62 	bl	e8 <__aeabi_dsub>
    1824:	4603      	mov	r3, r0
    1826:	460a      	mov	r2, r1
    1828:	2e00      	cmp	r6, #0
    182a:	f73f af05 	bgt.w	1638 <__ieee754_asin+0x38>
    182e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
    1832:	4618      	mov	r0, r3
    1834:	4611      	mov	r1, r2
    1836:	b007      	add	sp, #28
    1838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    183c:	a33a      	add	r3, pc, #232	; (adr r3, 1928 <__ieee754_asin+0x328>)
    183e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1842:	f7fe fe09 	bl	458 <__aeabi_dmul>
    1846:	4602      	mov	r2, r0
    1848:	460b      	mov	r3, r1
    184a:	4628      	mov	r0, r5
    184c:	4621      	mov	r1, r4
    184e:	461d      	mov	r5, r3
    1850:	4614      	mov	r4, r2
    1852:	a331      	add	r3, pc, #196	; (adr r3, 1918 <__ieee754_asin+0x318>)
    1854:	e9d3 2300 	ldrd	r2, r3, [r3]
    1858:	f7fe fdfe 	bl	458 <__aeabi_dmul>
    185c:	4602      	mov	r2, r0
    185e:	460b      	mov	r3, r1
    1860:	4620      	mov	r0, r4
    1862:	4629      	mov	r1, r5
    1864:	f7fe fc42 	bl	ec <__adddf3>
    1868:	4603      	mov	r3, r0
    186a:	460a      	mov	r2, r1
    186c:	4618      	mov	r0, r3
    186e:	4611      	mov	r1, r2
    1870:	b007      	add	sp, #28
    1872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1876:	4652      	mov	r2, sl
    1878:	465b      	mov	r3, fp
    187a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    187e:	f7fe ff15 	bl	6ac <__aeabi_ddiv>
    1882:	4642      	mov	r2, r8
    1884:	464b      	mov	r3, r9
    1886:	f7fe fde7 	bl	458 <__aeabi_dmul>
    188a:	4642      	mov	r2, r8
    188c:	464b      	mov	r3, r9
    188e:	f7fe fc2d 	bl	ec <__adddf3>
    1892:	4602      	mov	r2, r0
    1894:	460b      	mov	r3, r1
    1896:	f7fe fc29 	bl	ec <__adddf3>
    189a:	a31f      	add	r3, pc, #124	; (adr r3, 1918 <__ieee754_asin+0x318>)
    189c:	e9d3 2300 	ldrd	r2, r3, [r3]
    18a0:	f7fe fc22 	bl	e8 <__aeabi_dsub>
    18a4:	4602      	mov	r2, r0
    18a6:	460b      	mov	r3, r1
    18a8:	a11f      	add	r1, pc, #124	; (adr r1, 1928 <__ieee754_asin+0x328>)
    18aa:	e9d1 0100 	ldrd	r0, r1, [r1]
    18ae:	f7fe fc1b 	bl	e8 <__aeabi_dsub>
    18b2:	4603      	mov	r3, r0
    18b4:	460a      	mov	r2, r1
    18b6:	e7b7      	b.n	1828 <__ieee754_asin+0x228>
    18b8:	462b      	mov	r3, r5
    18ba:	4622      	mov	r2, r4
    18bc:	e6bc      	b.n	1638 <__ieee754_asin+0x38>
    18be:	bf00      	nop
    18c0:	8800759c 	.word	0x8800759c
    18c4:	7e37e43c 	.word	0x7e37e43c
    18c8:	0dfdf709 	.word	0x0dfdf709
    18cc:	3f023de1 	.word	0x3f023de1
    18d0:	7501b288 	.word	0x7501b288
    18d4:	3f49efe0 	.word	0x3f49efe0
    18d8:	b5688f3b 	.word	0xb5688f3b
    18dc:	3fa48228 	.word	0x3fa48228
    18e0:	0e884455 	.word	0x0e884455
    18e4:	3fc9c155 	.word	0x3fc9c155
    18e8:	03eb6f7d 	.word	0x03eb6f7d
    18ec:	3fd4d612 	.word	0x3fd4d612
    18f0:	55555555 	.word	0x55555555
    18f4:	3fc55555 	.word	0x3fc55555
    18f8:	b12e9282 	.word	0xb12e9282
    18fc:	3fb3b8c5 	.word	0x3fb3b8c5
    1900:	1b8d0159 	.word	0x1b8d0159
    1904:	3fe6066c 	.word	0x3fe6066c
    1908:	9c598ac8 	.word	0x9c598ac8
    190c:	40002ae5 	.word	0x40002ae5
    1910:	1c8a2d4b 	.word	0x1c8a2d4b
    1914:	40033a27 	.word	0x40033a27
    1918:	33145c07 	.word	0x33145c07
    191c:	3c91a626 	.word	0x3c91a626
    1920:	54442d18 	.word	0x54442d18
    1924:	3fe921fb 	.word	0x3fe921fb
    1928:	54442d18 	.word	0x54442d18
    192c:	3ff921fb 	.word	0x3ff921fb
    1930:	3fefffff 	.word	0x3fefffff
    1934:	3fdfffff 	.word	0x3fdfffff
    1938:	3ff00000 	.word	0x3ff00000
    193c:	3fe00000 	.word	0x3fe00000
    1940:	3fef3332 	.word	0x3fef3332
    1944:	4602      	mov	r2, r0
    1946:	460b      	mov	r3, r1
    1948:	f7fe fd86 	bl	458 <__aeabi_dmul>
    194c:	a338      	add	r3, pc, #224	; (adr r3, 1a30 <__ieee754_asin+0x430>)
    194e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1952:	4606      	mov	r6, r0
    1954:	460f      	mov	r7, r1
    1956:	f7fe fd7f 	bl	458 <__aeabi_dmul>
    195a:	a337      	add	r3, pc, #220	; (adr r3, 1a38 <__ieee754_asin+0x438>)
    195c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1960:	f7fe fbc4 	bl	ec <__adddf3>
    1964:	4632      	mov	r2, r6
    1966:	463b      	mov	r3, r7
    1968:	f7fe fd76 	bl	458 <__aeabi_dmul>
    196c:	a334      	add	r3, pc, #208	; (adr r3, 1a40 <__ieee754_asin+0x440>)
    196e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1972:	f7fe fbb9 	bl	e8 <__aeabi_dsub>
    1976:	4632      	mov	r2, r6
    1978:	463b      	mov	r3, r7
    197a:	f7fe fd6d 	bl	458 <__aeabi_dmul>
    197e:	a332      	add	r3, pc, #200	; (adr r3, 1a48 <__ieee754_asin+0x448>)
    1980:	e9d3 2300 	ldrd	r2, r3, [r3]
    1984:	f7fe fbb2 	bl	ec <__adddf3>
    1988:	4632      	mov	r2, r6
    198a:	463b      	mov	r3, r7
    198c:	f7fe fd64 	bl	458 <__aeabi_dmul>
    1990:	a32f      	add	r3, pc, #188	; (adr r3, 1a50 <__ieee754_asin+0x450>)
    1992:	e9d3 2300 	ldrd	r2, r3, [r3]
    1996:	f7fe fba7 	bl	e8 <__aeabi_dsub>
    199a:	4632      	mov	r2, r6
    199c:	463b      	mov	r3, r7
    199e:	f7fe fd5b 	bl	458 <__aeabi_dmul>
    19a2:	a32d      	add	r3, pc, #180	; (adr r3, 1a58 <__ieee754_asin+0x458>)
    19a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    19a8:	f7fe fba0 	bl	ec <__adddf3>
    19ac:	4632      	mov	r2, r6
    19ae:	463b      	mov	r3, r7
    19b0:	f7fe fd52 	bl	458 <__aeabi_dmul>
    19b4:	a32a      	add	r3, pc, #168	; (adr r3, 1a60 <__ieee754_asin+0x460>)
    19b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    19ba:	4680      	mov	r8, r0
    19bc:	4689      	mov	r9, r1
    19be:	4630      	mov	r0, r6
    19c0:	4639      	mov	r1, r7
    19c2:	f7fe fd49 	bl	458 <__aeabi_dmul>
    19c6:	a328      	add	r3, pc, #160	; (adr r3, 1a68 <__ieee754_asin+0x468>)
    19c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    19cc:	f7fe fb8c 	bl	e8 <__aeabi_dsub>
    19d0:	4632      	mov	r2, r6
    19d2:	463b      	mov	r3, r7
    19d4:	f7fe fd40 	bl	458 <__aeabi_dmul>
    19d8:	a325      	add	r3, pc, #148	; (adr r3, 1a70 <__ieee754_asin+0x470>)
    19da:	e9d3 2300 	ldrd	r2, r3, [r3]
    19de:	f7fe fb85 	bl	ec <__adddf3>
    19e2:	4632      	mov	r2, r6
    19e4:	463b      	mov	r3, r7
    19e6:	f7fe fd37 	bl	458 <__aeabi_dmul>
    19ea:	a323      	add	r3, pc, #140	; (adr r3, 1a78 <__ieee754_asin+0x478>)
    19ec:	e9d3 2300 	ldrd	r2, r3, [r3]
    19f0:	f7fe fb7a 	bl	e8 <__aeabi_dsub>
    19f4:	4632      	mov	r2, r6
    19f6:	463b      	mov	r3, r7
    19f8:	f7fe fd2e 	bl	458 <__aeabi_dmul>
    19fc:	4b20      	ldr	r3, [pc, #128]	; (1a80 <__ieee754_asin+0x480>)
    19fe:	2200      	movs	r2, #0
    1a00:	f7fe fb74 	bl	ec <__adddf3>
    1a04:	4602      	mov	r2, r0
    1a06:	460b      	mov	r3, r1
    1a08:	4640      	mov	r0, r8
    1a0a:	4649      	mov	r1, r9
    1a0c:	f7fe fe4e 	bl	6ac <__aeabi_ddiv>
    1a10:	462a      	mov	r2, r5
    1a12:	4623      	mov	r3, r4
    1a14:	f7fe fd20 	bl	458 <__aeabi_dmul>
    1a18:	462a      	mov	r2, r5
    1a1a:	4623      	mov	r3, r4
    1a1c:	f7fe fb66 	bl	ec <__adddf3>
    1a20:	4603      	mov	r3, r0
    1a22:	460a      	mov	r2, r1
    1a24:	4618      	mov	r0, r3
    1a26:	4611      	mov	r1, r2
    1a28:	b007      	add	sp, #28
    1a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a2e:	bf00      	nop
    1a30:	0dfdf709 	.word	0x0dfdf709
    1a34:	3f023de1 	.word	0x3f023de1
    1a38:	7501b288 	.word	0x7501b288
    1a3c:	3f49efe0 	.word	0x3f49efe0
    1a40:	b5688f3b 	.word	0xb5688f3b
    1a44:	3fa48228 	.word	0x3fa48228
    1a48:	0e884455 	.word	0x0e884455
    1a4c:	3fc9c155 	.word	0x3fc9c155
    1a50:	03eb6f7d 	.word	0x03eb6f7d
    1a54:	3fd4d612 	.word	0x3fd4d612
    1a58:	55555555 	.word	0x55555555
    1a5c:	3fc55555 	.word	0x3fc55555
    1a60:	b12e9282 	.word	0xb12e9282
    1a64:	3fb3b8c5 	.word	0x3fb3b8c5
    1a68:	1b8d0159 	.word	0x1b8d0159
    1a6c:	3fe6066c 	.word	0x3fe6066c
    1a70:	9c598ac8 	.word	0x9c598ac8
    1a74:	40002ae5 	.word	0x40002ae5
    1a78:	1c8a2d4b 	.word	0x1c8a2d4b
    1a7c:	40033a27 	.word	0x40033a27
    1a80:	3ff00000 	.word	0x3ff00000
    1a84:	00000000 	.word	0x00000000

00001a88 <__ieee754_atan2>:
    1a88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a8c:	461f      	mov	r7, r3
    1a8e:	4253      	negs	r3, r2
    1a90:	4e5f      	ldr	r6, [pc, #380]	; (1c10 <__ieee754_atan2+0x188>)
    1a92:	4313      	orrs	r3, r2
    1a94:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
    1a98:	ea49 73d3 	orr.w	r3, r9, r3, lsr #31
    1a9c:	42b3      	cmp	r3, r6
    1a9e:	4694      	mov	ip, r2
    1aa0:	460d      	mov	r5, r1
    1aa2:	4686      	mov	lr, r0
    1aa4:	d83b      	bhi.n	1b1e <__ieee754_atan2+0x96>
    1aa6:	4244      	negs	r4, r0
    1aa8:	4304      	orrs	r4, r0
    1aaa:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
    1aae:	ea4a 74d4 	orr.w	r4, sl, r4, lsr #31
    1ab2:	42b4      	cmp	r4, r6
    1ab4:	4603      	mov	r3, r0
    1ab6:	468b      	mov	fp, r1
    1ab8:	d831      	bhi.n	1b1e <__ieee754_atan2+0x96>
    1aba:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
    1abe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
    1ac2:	4314      	orrs	r4, r2
    1ac4:	d03b      	beq.n	1b3e <__ieee754_atan2+0xb6>
    1ac6:	17bc      	asrs	r4, r7, #30
    1ac8:	f004 0402 	and.w	r4, r4, #2
    1acc:	ea5a 0303 	orrs.w	r3, sl, r3
    1ad0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
    1ad4:	d02b      	beq.n	1b2e <__ieee754_atan2+0xa6>
    1ad6:	ea59 0302 	orrs.w	r3, r9, r2
    1ada:	d034      	beq.n	1b46 <__ieee754_atan2+0xbe>
    1adc:	45b1      	cmp	r9, r6
    1ade:	d045      	beq.n	1b6c <__ieee754_atan2+0xe4>
    1ae0:	45b2      	cmp	sl, r6
    1ae2:	d030      	beq.n	1b46 <__ieee754_atan2+0xbe>
    1ae4:	ebaa 0909 	sub.w	r9, sl, r9
    1ae8:	f1b9 7f74 	cmp.w	r9, #63963136	; 0x3d00000
    1aec:	ea4f 5329 	mov.w	r3, r9, asr #20
    1af0:	da38      	bge.n	1b64 <__ieee754_atan2+0xdc>
    1af2:	2f00      	cmp	r7, #0
    1af4:	da46      	bge.n	1b84 <__ieee754_atan2+0xfc>
    1af6:	333c      	adds	r3, #60	; 0x3c
    1af8:	da44      	bge.n	1b84 <__ieee754_atan2+0xfc>
    1afa:	2000      	movs	r0, #0
    1afc:	2100      	movs	r1, #0
    1afe:	2c01      	cmp	r4, #1
    1b00:	d058      	beq.n	1bb4 <__ieee754_atan2+0x12c>
    1b02:	2c02      	cmp	r4, #2
    1b04:	d049      	beq.n	1b9a <__ieee754_atan2+0x112>
    1b06:	b184      	cbz	r4, 1b2a <__ieee754_atan2+0xa2>
    1b08:	a335      	add	r3, pc, #212	; (adr r3, 1be0 <__ieee754_atan2+0x158>)
    1b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b0e:	f7fe faeb 	bl	e8 <__aeabi_dsub>
    1b12:	a335      	add	r3, pc, #212	; (adr r3, 1be8 <__ieee754_atan2+0x160>)
    1b14:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b18:	f7fe fae6 	bl	e8 <__aeabi_dsub>
    1b1c:	e005      	b.n	1b2a <__ieee754_atan2+0xa2>
    1b1e:	4672      	mov	r2, lr
    1b20:	4660      	mov	r0, ip
    1b22:	462b      	mov	r3, r5
    1b24:	4639      	mov	r1, r7
    1b26:	f7fe fae1 	bl	ec <__adddf3>
    1b2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b2e:	2c02      	cmp	r4, #2
    1b30:	d010      	beq.n	1b54 <__ieee754_atan2+0xcc>
    1b32:	2c03      	cmp	r4, #3
    1b34:	d1f9      	bne.n	1b2a <__ieee754_atan2+0xa2>
    1b36:	a12e      	add	r1, pc, #184	; (adr r1, 1bf0 <__ieee754_atan2+0x168>)
    1b38:	e9d1 0100 	ldrd	r0, r1, [r1]
    1b3c:	e7f5      	b.n	1b2a <__ieee754_atan2+0xa2>
    1b3e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b42:	f000 b86d 	b.w	1c20 <atan>
    1b46:	f1bb 0f00 	cmp.w	fp, #0
    1b4a:	db07      	blt.n	1b5c <__ieee754_atan2+0xd4>
    1b4c:	a12a      	add	r1, pc, #168	; (adr r1, 1bf8 <__ieee754_atan2+0x170>)
    1b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
    1b52:	e7ea      	b.n	1b2a <__ieee754_atan2+0xa2>
    1b54:	a124      	add	r1, pc, #144	; (adr r1, 1be8 <__ieee754_atan2+0x160>)
    1b56:	e9d1 0100 	ldrd	r0, r1, [r1]
    1b5a:	e7e6      	b.n	1b2a <__ieee754_atan2+0xa2>
    1b5c:	a128      	add	r1, pc, #160	; (adr r1, 1c00 <__ieee754_atan2+0x178>)
    1b5e:	e9d1 0100 	ldrd	r0, r1, [r1]
    1b62:	e7e2      	b.n	1b2a <__ieee754_atan2+0xa2>
    1b64:	a124      	add	r1, pc, #144	; (adr r1, 1bf8 <__ieee754_atan2+0x170>)
    1b66:	e9d1 0100 	ldrd	r0, r1, [r1]
    1b6a:	e7c8      	b.n	1afe <__ieee754_atan2+0x76>
    1b6c:	45ca      	cmp	sl, r9
    1b6e:	f104 34ff 	add.w	r4, r4, #4294967295
    1b72:	d023      	beq.n	1bbc <__ieee754_atan2+0x134>
    1b74:	2c02      	cmp	r4, #2
    1b76:	d829      	bhi.n	1bcc <__ieee754_atan2+0x144>
    1b78:	4b26      	ldr	r3, [pc, #152]	; (1c14 <__ieee754_atan2+0x18c>)
    1b7a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    1b7e:	e9d4 0100 	ldrd	r0, r1, [r4]
    1b82:	e7d2      	b.n	1b2a <__ieee754_atan2+0xa2>
    1b84:	4662      	mov	r2, ip
    1b86:	4670      	mov	r0, lr
    1b88:	463b      	mov	r3, r7
    1b8a:	4629      	mov	r1, r5
    1b8c:	f7fe fd8e 	bl	6ac <__aeabi_ddiv>
    1b90:	f007 f908 	bl	8da4 <fabs>
    1b94:	f000 f844 	bl	1c20 <atan>
    1b98:	e7b1      	b.n	1afe <__ieee754_atan2+0x76>
    1b9a:	a311      	add	r3, pc, #68	; (adr r3, 1be0 <__ieee754_atan2+0x158>)
    1b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ba0:	f7fe faa2 	bl	e8 <__aeabi_dsub>
    1ba4:	4602      	mov	r2, r0
    1ba6:	460b      	mov	r3, r1
    1ba8:	a10f      	add	r1, pc, #60	; (adr r1, 1be8 <__ieee754_atan2+0x160>)
    1baa:	e9d1 0100 	ldrd	r0, r1, [r1]
    1bae:	f7fe fa9b 	bl	e8 <__aeabi_dsub>
    1bb2:	e7ba      	b.n	1b2a <__ieee754_atan2+0xa2>
    1bb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    1bb8:	4619      	mov	r1, r3
    1bba:	e7b6      	b.n	1b2a <__ieee754_atan2+0xa2>
    1bbc:	2c02      	cmp	r4, #2
    1bbe:	d808      	bhi.n	1bd2 <__ieee754_atan2+0x14a>
    1bc0:	4b15      	ldr	r3, [pc, #84]	; (1c18 <__ieee754_atan2+0x190>)
    1bc2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    1bc6:	e9d4 0100 	ldrd	r0, r1, [r4]
    1bca:	e7ae      	b.n	1b2a <__ieee754_atan2+0xa2>
    1bcc:	2000      	movs	r0, #0
    1bce:	2100      	movs	r1, #0
    1bd0:	e7ab      	b.n	1b2a <__ieee754_atan2+0xa2>
    1bd2:	a10d      	add	r1, pc, #52	; (adr r1, 1c08 <__ieee754_atan2+0x180>)
    1bd4:	e9d1 0100 	ldrd	r0, r1, [r1]
    1bd8:	e7a7      	b.n	1b2a <__ieee754_atan2+0xa2>
    1bda:	bf00      	nop
    1bdc:	f3af 8000 	nop.w
    1be0:	33145c07 	.word	0x33145c07
    1be4:	3ca1a626 	.word	0x3ca1a626
    1be8:	54442d18 	.word	0x54442d18
    1bec:	400921fb 	.word	0x400921fb
    1bf0:	54442d18 	.word	0x54442d18
    1bf4:	c00921fb 	.word	0xc00921fb
    1bf8:	54442d18 	.word	0x54442d18
    1bfc:	3ff921fb 	.word	0x3ff921fb
    1c00:	54442d18 	.word	0x54442d18
    1c04:	bff921fb 	.word	0xbff921fb
    1c08:	54442d18 	.word	0x54442d18
    1c0c:	3fe921fb 	.word	0x3fe921fb
    1c10:	7ff00000 	.word	0x7ff00000
    1c14:	0000b040 	.word	0x0000b040
    1c18:	0000b028 	.word	0x0000b028
    1c1c:	00000000 	.word	0x00000000

00001c20 <atan>:
    1c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c24:	4bc6      	ldr	r3, [pc, #792]	; (1f40 <atan+0x320>)
    1c26:	b083      	sub	sp, #12
    1c28:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    1c2c:	429e      	cmp	r6, r3
    1c2e:	4604      	mov	r4, r0
    1c30:	9101      	str	r1, [sp, #4]
    1c32:	468a      	mov	sl, r1
    1c34:	dd11      	ble.n	1c5a <atan+0x3a>
    1c36:	4bc3      	ldr	r3, [pc, #780]	; (1f44 <atan+0x324>)
    1c38:	429e      	cmp	r6, r3
    1c3a:	f300 80b8 	bgt.w	1dae <atan+0x18e>
    1c3e:	f000 80b3 	beq.w	1da8 <atan+0x188>
    1c42:	4bc1      	ldr	r3, [pc, #772]	; (1f48 <atan+0x328>)
    1c44:	4ac1      	ldr	r2, [pc, #772]	; (1f4c <atan+0x32c>)
    1c46:	4cc2      	ldr	r4, [pc, #776]	; (1f50 <atan+0x330>)
    1c48:	f1ba 0f00 	cmp.w	sl, #0
    1c4c:	bfd8      	it	le
    1c4e:	4613      	movle	r3, r2
    1c50:	4620      	mov	r0, r4
    1c52:	4619      	mov	r1, r3
    1c54:	b003      	add	sp, #12
    1c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c5a:	4bbe      	ldr	r3, [pc, #760]	; (1f54 <atan+0x334>)
    1c5c:	429e      	cmp	r6, r3
    1c5e:	f300 80c1 	bgt.w	1de4 <atan+0x1c4>
    1c62:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
    1c66:	429e      	cmp	r6, r3
    1c68:	f340 80ae 	ble.w	1dc8 <atan+0x1a8>
    1c6c:	f04f 3bff 	mov.w	fp, #4294967295
    1c70:	9b01      	ldr	r3, [sp, #4]
    1c72:	4622      	mov	r2, r4
    1c74:	4619      	mov	r1, r3
    1c76:	4620      	mov	r0, r4
    1c78:	f7fe fbee 	bl	458 <__aeabi_dmul>
    1c7c:	4602      	mov	r2, r0
    1c7e:	460b      	mov	r3, r1
    1c80:	4680      	mov	r8, r0
    1c82:	4689      	mov	r9, r1
    1c84:	f7fe fbe8 	bl	458 <__aeabi_dmul>
    1c88:	a395      	add	r3, pc, #596	; (adr r3, 1ee0 <atan+0x2c0>)
    1c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c8e:	4606      	mov	r6, r0
    1c90:	460f      	mov	r7, r1
    1c92:	f7fe fbe1 	bl	458 <__aeabi_dmul>
    1c96:	a394      	add	r3, pc, #592	; (adr r3, 1ee8 <atan+0x2c8>)
    1c98:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c9c:	f7fe fa26 	bl	ec <__adddf3>
    1ca0:	4632      	mov	r2, r6
    1ca2:	463b      	mov	r3, r7
    1ca4:	f7fe fbd8 	bl	458 <__aeabi_dmul>
    1ca8:	a391      	add	r3, pc, #580	; (adr r3, 1ef0 <atan+0x2d0>)
    1caa:	e9d3 2300 	ldrd	r2, r3, [r3]
    1cae:	f7fe fa1d 	bl	ec <__adddf3>
    1cb2:	4632      	mov	r2, r6
    1cb4:	463b      	mov	r3, r7
    1cb6:	f7fe fbcf 	bl	458 <__aeabi_dmul>
    1cba:	a38f      	add	r3, pc, #572	; (adr r3, 1ef8 <atan+0x2d8>)
    1cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
    1cc0:	f7fe fa14 	bl	ec <__adddf3>
    1cc4:	4632      	mov	r2, r6
    1cc6:	463b      	mov	r3, r7
    1cc8:	f7fe fbc6 	bl	458 <__aeabi_dmul>
    1ccc:	a38c      	add	r3, pc, #560	; (adr r3, 1f00 <atan+0x2e0>)
    1cce:	e9d3 2300 	ldrd	r2, r3, [r3]
    1cd2:	f7fe fa0b 	bl	ec <__adddf3>
    1cd6:	4632      	mov	r2, r6
    1cd8:	463b      	mov	r3, r7
    1cda:	f7fe fbbd 	bl	458 <__aeabi_dmul>
    1cde:	a38a      	add	r3, pc, #552	; (adr r3, 1f08 <atan+0x2e8>)
    1ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ce4:	f7fe fa02 	bl	ec <__adddf3>
    1ce8:	4642      	mov	r2, r8
    1cea:	464b      	mov	r3, r9
    1cec:	f7fe fbb4 	bl	458 <__aeabi_dmul>
    1cf0:	a387      	add	r3, pc, #540	; (adr r3, 1f10 <atan+0x2f0>)
    1cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
    1cf6:	4680      	mov	r8, r0
    1cf8:	4689      	mov	r9, r1
    1cfa:	4630      	mov	r0, r6
    1cfc:	4639      	mov	r1, r7
    1cfe:	f7fe fbab 	bl	458 <__aeabi_dmul>
    1d02:	a385      	add	r3, pc, #532	; (adr r3, 1f18 <atan+0x2f8>)
    1d04:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d08:	f7fe f9ee 	bl	e8 <__aeabi_dsub>
    1d0c:	4632      	mov	r2, r6
    1d0e:	463b      	mov	r3, r7
    1d10:	f7fe fba2 	bl	458 <__aeabi_dmul>
    1d14:	a382      	add	r3, pc, #520	; (adr r3, 1f20 <atan+0x300>)
    1d16:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d1a:	f7fe f9e5 	bl	e8 <__aeabi_dsub>
    1d1e:	4632      	mov	r2, r6
    1d20:	463b      	mov	r3, r7
    1d22:	f7fe fb99 	bl	458 <__aeabi_dmul>
    1d26:	a380      	add	r3, pc, #512	; (adr r3, 1f28 <atan+0x308>)
    1d28:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d2c:	f7fe f9dc 	bl	e8 <__aeabi_dsub>
    1d30:	4632      	mov	r2, r6
    1d32:	463b      	mov	r3, r7
    1d34:	f7fe fb90 	bl	458 <__aeabi_dmul>
    1d38:	a37d      	add	r3, pc, #500	; (adr r3, 1f30 <atan+0x310>)
    1d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d3e:	f7fe f9d3 	bl	e8 <__aeabi_dsub>
    1d42:	4632      	mov	r2, r6
    1d44:	463b      	mov	r3, r7
    1d46:	f7fe fb87 	bl	458 <__aeabi_dmul>
    1d4a:	f1bb 3fff 	cmp.w	fp, #4294967295
    1d4e:	4602      	mov	r2, r0
    1d50:	460b      	mov	r3, r1
    1d52:	d06e      	beq.n	1e32 <atan+0x212>
    1d54:	4640      	mov	r0, r8
    1d56:	4649      	mov	r1, r9
    1d58:	f7fe f9c8 	bl	ec <__adddf3>
    1d5c:	4e7e      	ldr	r6, [pc, #504]	; (1f58 <atan+0x338>)
    1d5e:	9b01      	ldr	r3, [sp, #4]
    1d60:	4622      	mov	r2, r4
    1d62:	f7fe fb79 	bl	458 <__aeabi_dmul>
    1d66:	4b7d      	ldr	r3, [pc, #500]	; (1f5c <atan+0x33c>)
    1d68:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
    1d6c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
    1d70:	449b      	add	fp, r3
    1d72:	e9db 2300 	ldrd	r2, r3, [fp]
    1d76:	f7fe f9b7 	bl	e8 <__aeabi_dsub>
    1d7a:	4622      	mov	r2, r4
    1d7c:	9b01      	ldr	r3, [sp, #4]
    1d7e:	f7fe f9b3 	bl	e8 <__aeabi_dsub>
    1d82:	460b      	mov	r3, r1
    1d84:	4602      	mov	r2, r0
    1d86:	e9d6 0100 	ldrd	r0, r1, [r6]
    1d8a:	f7fe f9ad 	bl	e8 <__aeabi_dsub>
    1d8e:	f1ba 0f00 	cmp.w	sl, #0
    1d92:	4604      	mov	r4, r0
    1d94:	460b      	mov	r3, r1
    1d96:	f6bf af5b 	bge.w	1c50 <atan+0x30>
    1d9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    1d9e:	4620      	mov	r0, r4
    1da0:	4619      	mov	r1, r3
    1da2:	b003      	add	sp, #12
    1da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1da8:	2800      	cmp	r0, #0
    1daa:	f43f af4a 	beq.w	1c42 <atan+0x22>
    1dae:	9b01      	ldr	r3, [sp, #4]
    1db0:	4622      	mov	r2, r4
    1db2:	4620      	mov	r0, r4
    1db4:	4619      	mov	r1, r3
    1db6:	f7fe f999 	bl	ec <__adddf3>
    1dba:	4604      	mov	r4, r0
    1dbc:	460b      	mov	r3, r1
    1dbe:	4620      	mov	r0, r4
    1dc0:	4619      	mov	r1, r3
    1dc2:	b003      	add	sp, #12
    1dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1dc8:	a35b      	add	r3, pc, #364	; (adr r3, 1f38 <atan+0x318>)
    1dca:	e9d3 2300 	ldrd	r2, r3, [r3]
    1dce:	f7fe f98d 	bl	ec <__adddf3>
    1dd2:	4b63      	ldr	r3, [pc, #396]	; (1f60 <atan+0x340>)
    1dd4:	2200      	movs	r2, #0
    1dd6:	f7fe fdcf 	bl	978 <__aeabi_dcmpgt>
    1dda:	2800      	cmp	r0, #0
    1ddc:	f43f af46 	beq.w	1c6c <atan+0x4c>
    1de0:	4653      	mov	r3, sl
    1de2:	e735      	b.n	1c50 <atan+0x30>
    1de4:	f006 ffde 	bl	8da4 <fabs>
    1de8:	4b5e      	ldr	r3, [pc, #376]	; (1f64 <atan+0x344>)
    1dea:	429e      	cmp	r6, r3
    1dec:	4604      	mov	r4, r0
    1dee:	460d      	mov	r5, r1
    1df0:	dc34      	bgt.n	1e5c <atan+0x23c>
    1df2:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
    1df6:	429e      	cmp	r6, r3
    1df8:	dc59      	bgt.n	1eae <atan+0x28e>
    1dfa:	4602      	mov	r2, r0
    1dfc:	460b      	mov	r3, r1
    1dfe:	f7fe f975 	bl	ec <__adddf3>
    1e02:	4b57      	ldr	r3, [pc, #348]	; (1f60 <atan+0x340>)
    1e04:	2200      	movs	r2, #0
    1e06:	f7fe f96f 	bl	e8 <__aeabi_dsub>
    1e0a:	2200      	movs	r2, #0
    1e0c:	4606      	mov	r6, r0
    1e0e:	460f      	mov	r7, r1
    1e10:	4620      	mov	r0, r4
    1e12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1e16:	4629      	mov	r1, r5
    1e18:	f7fe f968 	bl	ec <__adddf3>
    1e1c:	4602      	mov	r2, r0
    1e1e:	460b      	mov	r3, r1
    1e20:	4630      	mov	r0, r6
    1e22:	4639      	mov	r1, r7
    1e24:	f7fe fc42 	bl	6ac <__aeabi_ddiv>
    1e28:	f04f 0b00 	mov.w	fp, #0
    1e2c:	4604      	mov	r4, r0
    1e2e:	9101      	str	r1, [sp, #4]
    1e30:	e71e      	b.n	1c70 <atan+0x50>
    1e32:	4640      	mov	r0, r8
    1e34:	4649      	mov	r1, r9
    1e36:	f7fe f959 	bl	ec <__adddf3>
    1e3a:	9b01      	ldr	r3, [sp, #4]
    1e3c:	4622      	mov	r2, r4
    1e3e:	f7fe fb0b 	bl	458 <__aeabi_dmul>
    1e42:	4602      	mov	r2, r0
    1e44:	460b      	mov	r3, r1
    1e46:	4620      	mov	r0, r4
    1e48:	9901      	ldr	r1, [sp, #4]
    1e4a:	f7fe f94d 	bl	e8 <__aeabi_dsub>
    1e4e:	4604      	mov	r4, r0
    1e50:	460b      	mov	r3, r1
    1e52:	4620      	mov	r0, r4
    1e54:	4619      	mov	r1, r3
    1e56:	b003      	add	sp, #12
    1e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e5c:	4b42      	ldr	r3, [pc, #264]	; (1f68 <atan+0x348>)
    1e5e:	429e      	cmp	r6, r3
    1e60:	da1a      	bge.n	1e98 <atan+0x278>
    1e62:	4b42      	ldr	r3, [pc, #264]	; (1f6c <atan+0x34c>)
    1e64:	2200      	movs	r2, #0
    1e66:	f7fe f93f 	bl	e8 <__aeabi_dsub>
    1e6a:	4b40      	ldr	r3, [pc, #256]	; (1f6c <atan+0x34c>)
    1e6c:	4606      	mov	r6, r0
    1e6e:	460f      	mov	r7, r1
    1e70:	2200      	movs	r2, #0
    1e72:	4620      	mov	r0, r4
    1e74:	4629      	mov	r1, r5
    1e76:	f7fe faef 	bl	458 <__aeabi_dmul>
    1e7a:	4b39      	ldr	r3, [pc, #228]	; (1f60 <atan+0x340>)
    1e7c:	2200      	movs	r2, #0
    1e7e:	f7fe f935 	bl	ec <__adddf3>
    1e82:	4602      	mov	r2, r0
    1e84:	460b      	mov	r3, r1
    1e86:	4630      	mov	r0, r6
    1e88:	4639      	mov	r1, r7
    1e8a:	f7fe fc0f 	bl	6ac <__aeabi_ddiv>
    1e8e:	f04f 0b02 	mov.w	fp, #2
    1e92:	4604      	mov	r4, r0
    1e94:	9101      	str	r1, [sp, #4]
    1e96:	e6eb      	b.n	1c70 <atan+0x50>
    1e98:	4602      	mov	r2, r0
    1e9a:	460b      	mov	r3, r1
    1e9c:	2000      	movs	r0, #0
    1e9e:	4934      	ldr	r1, [pc, #208]	; (1f70 <atan+0x350>)
    1ea0:	f7fe fc04 	bl	6ac <__aeabi_ddiv>
    1ea4:	f04f 0b03 	mov.w	fp, #3
    1ea8:	4604      	mov	r4, r0
    1eaa:	9101      	str	r1, [sp, #4]
    1eac:	e6e0      	b.n	1c70 <atan+0x50>
    1eae:	4b2c      	ldr	r3, [pc, #176]	; (1f60 <atan+0x340>)
    1eb0:	2200      	movs	r2, #0
    1eb2:	f7fe f919 	bl	e8 <__aeabi_dsub>
    1eb6:	4b2a      	ldr	r3, [pc, #168]	; (1f60 <atan+0x340>)
    1eb8:	4606      	mov	r6, r0
    1eba:	460f      	mov	r7, r1
    1ebc:	4620      	mov	r0, r4
    1ebe:	2200      	movs	r2, #0
    1ec0:	4629      	mov	r1, r5
    1ec2:	f7fe f913 	bl	ec <__adddf3>
    1ec6:	4602      	mov	r2, r0
    1ec8:	460b      	mov	r3, r1
    1eca:	4630      	mov	r0, r6
    1ecc:	4639      	mov	r1, r7
    1ece:	f7fe fbed 	bl	6ac <__aeabi_ddiv>
    1ed2:	f04f 0b01 	mov.w	fp, #1
    1ed6:	4604      	mov	r4, r0
    1ed8:	9101      	str	r1, [sp, #4]
    1eda:	e6c9      	b.n	1c70 <atan+0x50>
    1edc:	f3af 8000 	nop.w
    1ee0:	e322da11 	.word	0xe322da11
    1ee4:	3f90ad3a 	.word	0x3f90ad3a
    1ee8:	24760deb 	.word	0x24760deb
    1eec:	3fa97b4b 	.word	0x3fa97b4b
    1ef0:	a0d03d51 	.word	0xa0d03d51
    1ef4:	3fb10d66 	.word	0x3fb10d66
    1ef8:	c54c206e 	.word	0xc54c206e
    1efc:	3fb745cd 	.word	0x3fb745cd
    1f00:	920083ff 	.word	0x920083ff
    1f04:	3fc24924 	.word	0x3fc24924
    1f08:	5555550d 	.word	0x5555550d
    1f0c:	3fd55555 	.word	0x3fd55555
    1f10:	2c6a6c2f 	.word	0x2c6a6c2f
    1f14:	bfa2b444 	.word	0xbfa2b444
    1f18:	52defd9a 	.word	0x52defd9a
    1f1c:	3fadde2d 	.word	0x3fadde2d
    1f20:	af749a6d 	.word	0xaf749a6d
    1f24:	3fb3b0f2 	.word	0x3fb3b0f2
    1f28:	fe231671 	.word	0xfe231671
    1f2c:	3fbc71c6 	.word	0x3fbc71c6
    1f30:	9998ebc4 	.word	0x9998ebc4
    1f34:	3fc99999 	.word	0x3fc99999
    1f38:	8800759c 	.word	0x8800759c
    1f3c:	7e37e43c 	.word	0x7e37e43c
    1f40:	440fffff 	.word	0x440fffff
    1f44:	7ff00000 	.word	0x7ff00000
    1f48:	3ff921fb 	.word	0x3ff921fb
    1f4c:	bff921fb 	.word	0xbff921fb
    1f50:	54442d18 	.word	0x54442d18
    1f54:	3fdbffff 	.word	0x3fdbffff
    1f58:	0000b058 	.word	0x0000b058
    1f5c:	0000b078 	.word	0x0000b078
    1f60:	3ff00000 	.word	0x3ff00000
    1f64:	3ff2ffff 	.word	0x3ff2ffff
    1f68:	40038000 	.word	0x40038000
    1f6c:	3ff80000 	.word	0x3ff80000
    1f70:	bff00000 	.word	0xbff00000

00001f74 <main>:

#define SENSOR_READ_MS_THREAD   0.625 //ms = 1600 HZ
LOG_MODULE_REGISTER(app, CONFIG_LOG_DEFAULT_LEVEL);

void main(void)
{
    1f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f78:	b08c      	sub	sp, #48	; 0x30

	printk("Hello World! %s\n", CONFIG_BOARD);
    1f7a:	4979      	ldr	r1, [pc, #484]	; (2160 <main+0x1ec>)
    1f7c:	4879      	ldr	r0, [pc, #484]	; (2164 <main+0x1f0>)
    1f7e:	f007 fa74 	bl	946a <printk>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    1f82:	4879      	ldr	r0, [pc, #484]	; (2168 <main+0x1f4>)
    1f84:	f005 fb12 	bl	75ac <z_impl_device_get_binding>

	bmxIMU_spi.gpio0_dev= device_get_binding("GPIO_0");
    1f88:	4d78      	ldr	r5, [pc, #480]	; (216c <main+0x1f8>)
    1f8a:	6168      	str	r0, [r5, #20]
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    1f8c:	4c78      	ldr	r4, [pc, #480]	; (2170 <main+0x1fc>)
    1f8e:	4b79      	ldr	r3, [pc, #484]	; (2174 <main+0x200>)
    1f90:	1ae4      	subs	r4, r4, r3
    1f92:	08e4      	lsrs	r4, r4, #3

	
	LOG_ERR("This is a error message!");
    1f94:	2601      	movs	r6, #1
    1f96:	f04f 0100 	mov.w	r1, #0
    1f9a:	f366 0102 	bfi	r1, r6, #0, #3
    1f9e:	f36f 01c5 	bfc	r1, #3, #3
    1fa2:	f364 118f 	bfi	r1, r4, #6, #10
    1fa6:	4874      	ldr	r0, [pc, #464]	; (2178 <main+0x204>)
    1fa8:	f001 fbde 	bl	3768 <log_0>
	LOG_WRN("This is a warning message!");
    1fac:	f04f 0100 	mov.w	r1, #0
    1fb0:	2302      	movs	r3, #2
    1fb2:	f363 0102 	bfi	r1, r3, #0, #3
    1fb6:	f36f 01c5 	bfc	r1, #3, #3
    1fba:	f364 118f 	bfi	r1, r4, #6, #10
    1fbe:	486f      	ldr	r0, [pc, #444]	; (217c <main+0x208>)
    1fc0:	f001 fbd2 	bl	3768 <log_0>
	LOG_INF("This is a information message!");
    1fc4:	f04f 0100 	mov.w	r1, #0
    1fc8:	2303      	movs	r3, #3
    1fca:	f363 0102 	bfi	r1, r3, #0, #3
    1fce:	f36f 01c5 	bfc	r1, #3, #3
    1fd2:	f364 118f 	bfi	r1, r4, #6, #10
    1fd6:	486a      	ldr	r0, [pc, #424]	; (2180 <main+0x20c>)
    1fd8:	f001 fbc6 	bl	3768 <log_0>
	LOG_DBG("This is a debugging message!");
    1fdc:	f04f 0200 	mov.w	r2, #0
    1fe0:	2304      	movs	r3, #4
    1fe2:	f363 0202 	bfi	r2, r3, #0, #3
    1fe6:	f36f 02c5 	bfc	r2, #3, #3
    1fea:	f364 128f 	bfi	r2, r4, #6, #10
    1fee:	4965      	ldr	r1, [pc, #404]	; (2184 <main+0x210>)
    1ff0:	4865      	ldr	r0, [pc, #404]	; (2188 <main+0x214>)
    1ff2:	f001 fb47 	bl	3684 <log_1>

	gpio_pin_configure(bmxIMU_spi.gpio0_dev, bmxIMU_spi.spi_cs_pin, GPIO_OUTPUT | GPIO_ACTIVE_LOW);
    1ff6:	6968      	ldr	r0, [r5, #20]
    1ff8:	7c29      	ldrb	r1, [r5, #16]

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
	const struct gpio_driver_api *api =
    1ffa:	6887      	ldr	r7, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    1ffc:	6904      	ldr	r4, [r0, #16]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
    1ffe:	fa06 f301 	lsl.w	r3, r6, r1
    2002:	6822      	ldr	r2, [r4, #0]
    2004:	4313      	orrs	r3, r2
    2006:	6023      	str	r3, [r4, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
    2008:	683b      	ldr	r3, [r7, #0]
    200a:	f240 2201 	movw	r2, #513	; 0x201
    200e:	4798      	blx	r3
    2010:	485e      	ldr	r0, [pc, #376]	; (218c <main+0x218>)
    2012:	f005 facb 	bl	75ac <z_impl_device_get_binding>


	const char* const spiName0 = "SPI_0";
	bmxIMU_spi.spi_dev = device_get_binding(spiName0);
    2016:	60e8      	str	r0, [r5, #12]

	if (bmxIMU_spi.spi_dev == NULL) {
    2018:	b130      	cbz	r0, 2028 <main+0xb4>
		printk("Could not get %s device\n", spiName0);
		return;
	}
	else
		printk("Got SPI device\n");
    201a:	485d      	ldr	r0, [pc, #372]	; (2190 <main+0x21c>)
    201c:	f007 fa25 	bl	946a <printk>



	begin_bmx160(&bmxIMU_spi);
    2020:	4852      	ldr	r0, [pc, #328]	; (216c <main+0x1f8>)
    2022:	f006 ff9b 	bl	8f5c <begin_bmx160>
    2026:	e023      	b.n	2070 <main+0xfc>
		printk("Could not get %s device\n", spiName0);
    2028:	4958      	ldr	r1, [pc, #352]	; (218c <main+0x218>)
    202a:	485a      	ldr	r0, [pc, #360]	; (2194 <main+0x220>)
    202c:	f007 fa1d 	bl	946a <printk>


    // Sleep and wait for next cycle
	k_sleep(K_MSEC(SENSOR_READ_MS_THREAD));
	}
}
    2030:	b00c      	add	sp, #48	; 0x30
    2032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if(angles.yaw < 0 && angles.pitch > 0)
    2036:	2100      	movs	r1, #0
    2038:	4620      	mov	r0, r4
    203a:	f7fe ffa3 	bl	f84 <__aeabi_fcmplt>
    203e:	2800      	cmp	r0, #0
    2040:	d169      	bne.n	2116 <main+0x1a2>
	else if(angles.yaw > 0 && angles.pitch < 0)
    2042:	2100      	movs	r1, #0
    2044:	4620      	mov	r0, r4
    2046:	f7fe ffbb 	bl	fc0 <__aeabi_fcmpgt>
    204a:	b138      	cbz	r0, 205c <main+0xe8>
    204c:	4b52      	ldr	r3, [pc, #328]	; (2198 <main+0x224>)
    204e:	685d      	ldr	r5, [r3, #4]
    2050:	2100      	movs	r1, #0
    2052:	4628      	mov	r0, r5
    2054:	f7fe ff96 	bl	f84 <__aeabi_fcmplt>
    2058:	2800      	cmp	r0, #0
    205a:	d16b      	bne.n	2134 <main+0x1c0>
	else if(angles.yaw < 0 && angles.pitch < 0)
    205c:	2100      	movs	r1, #0
    205e:	4620      	mov	r0, r4
    2060:	f7fe ff90 	bl	f84 <__aeabi_fcmplt>
    2064:	2800      	cmp	r0, #0
    2066:	d16c      	bne.n	2142 <main+0x1ce>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    2068:	2000      	movs	r0, #0
    206a:	2100      	movs	r1, #0
    206c:	f006 fa6c 	bl	8548 <z_impl_k_sleep>
	getData_bmx160(&bmxIMU_spi, &bmx160_data);
    2070:	4e4a      	ldr	r6, [pc, #296]	; (219c <main+0x228>)
    2072:	4631      	mov	r1, r6
    2074:	483d      	ldr	r0, [pc, #244]	; (216c <main+0x1f8>)
    2076:	f000 f901 	bl	227c <getData_bmx160>
	delta = 0.001f * SENSOR_READ_MS_THREAD;
    207a:	4b49      	ldr	r3, [pc, #292]	; (21a0 <main+0x22c>)
    207c:	4a49      	ldr	r2, [pc, #292]	; (21a4 <main+0x230>)
    207e:	6013      	str	r3, [r2, #0]
									   bmx160_data.ax,bmx160_data.ay,bmx160_data.az,
    2080:	6837      	ldr	r7, [r6, #0]
    2082:	f8d6 8004 	ldr.w	r8, [r6, #4]
	fused_vector = update_fused_vector(fused_vector,
    2086:	4d48      	ldr	r5, [pc, #288]	; (21a8 <main+0x234>)
    2088:	ac08      	add	r4, sp, #32
    208a:	9306      	str	r3, [sp, #24]
    208c:	6973      	ldr	r3, [r6, #20]
    208e:	9305      	str	r3, [sp, #20]
    2090:	6933      	ldr	r3, [r6, #16]
    2092:	9304      	str	r3, [sp, #16]
    2094:	68f3      	ldr	r3, [r6, #12]
    2096:	9303      	str	r3, [sp, #12]
    2098:	68b0      	ldr	r0, [r6, #8]
    209a:	f7fe ff9b 	bl	fd4 <__aeabi_f2iz>
    209e:	b200      	sxth	r0, r0
    20a0:	9002      	str	r0, [sp, #8]
    20a2:	4640      	mov	r0, r8
    20a4:	f7fe ff96 	bl	fd4 <__aeabi_f2iz>
    20a8:	b200      	sxth	r0, r0
    20aa:	9001      	str	r0, [sp, #4]
    20ac:	4638      	mov	r0, r7
    20ae:	f7fe ff91 	bl	fd4 <__aeabi_f2iz>
    20b2:	b200      	sxth	r0, r0
    20b4:	9000      	str	r0, [sp, #0]
    20b6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
    20ba:	4620      	mov	r0, r4
    20bc:	f007 f8d9 	bl	9272 <update_fused_vector>
    20c0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    20c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	q_acc = quaternion_from_accelerometer(fused_vector.a,fused_vector.b,fused_vector.c);
    20c8:	4e38      	ldr	r6, [pc, #224]	; (21ac <main+0x238>)
    20ca:	68ab      	ldr	r3, [r5, #8]
    20cc:	686a      	ldr	r2, [r5, #4]
    20ce:	6829      	ldr	r1, [r5, #0]
    20d0:	4620      	mov	r0, r4
    20d2:	f7ff fa35 	bl	1540 <quaternion_from_accelerometer>
    20d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    20da:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	angles = quaternion_to_euler_angles(q_acc);
    20de:	4d2e      	ldr	r5, [pc, #184]	; (2198 <main+0x224>)
    20e0:	9300      	str	r3, [sp, #0]
    20e2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
    20e6:	4620      	mov	r0, r4
    20e8:	f7ff f93e 	bl	1368 <quaternion_to_euler_angles>
    20ec:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    20f0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if(angles.yaw > 0 && angles.pitch > 0)
    20f4:	68ac      	ldr	r4, [r5, #8]
    20f6:	2100      	movs	r1, #0
    20f8:	4620      	mov	r0, r4
    20fa:	f7fe ff61 	bl	fc0 <__aeabi_fcmpgt>
    20fe:	2800      	cmp	r0, #0
    2100:	d099      	beq.n	2036 <main+0xc2>
    2102:	686d      	ldr	r5, [r5, #4]
    2104:	2100      	movs	r1, #0
    2106:	4628      	mov	r0, r5
    2108:	f7fe ff5a 	bl	fc0 <__aeabi_fcmpgt>
    210c:	2800      	cmp	r0, #0
    210e:	d092      	beq.n	2036 <main+0xc2>
		pitch_angle = angles.pitch;
    2110:	4b27      	ldr	r3, [pc, #156]	; (21b0 <main+0x23c>)
    2112:	601d      	str	r5, [r3, #0]
    2114:	e7a8      	b.n	2068 <main+0xf4>
	else if(angles.yaw < 0 && angles.pitch > 0)
    2116:	4b20      	ldr	r3, [pc, #128]	; (2198 <main+0x224>)
    2118:	685d      	ldr	r5, [r3, #4]
    211a:	2100      	movs	r1, #0
    211c:	4628      	mov	r0, r5
    211e:	f7fe ff4f 	bl	fc0 <__aeabi_fcmpgt>
    2122:	2800      	cmp	r0, #0
    2124:	d08d      	beq.n	2042 <main+0xce>
		pitch_angle = 180 - angles.pitch;
    2126:	4629      	mov	r1, r5
    2128:	4822      	ldr	r0, [pc, #136]	; (21b4 <main+0x240>)
    212a:	f7fe fc83 	bl	a34 <__aeabi_fsub>
    212e:	4b20      	ldr	r3, [pc, #128]	; (21b0 <main+0x23c>)
    2130:	6018      	str	r0, [r3, #0]
    2132:	e799      	b.n	2068 <main+0xf4>
		pitch_angle = 180 - angles.pitch;    
    2134:	4629      	mov	r1, r5
    2136:	481f      	ldr	r0, [pc, #124]	; (21b4 <main+0x240>)
    2138:	f7fe fc7c 	bl	a34 <__aeabi_fsub>
    213c:	4b1c      	ldr	r3, [pc, #112]	; (21b0 <main+0x23c>)
    213e:	6018      	str	r0, [r3, #0]
    2140:	e792      	b.n	2068 <main+0xf4>
	else if(angles.yaw < 0 && angles.pitch < 0)
    2142:	4b15      	ldr	r3, [pc, #84]	; (2198 <main+0x224>)
    2144:	685c      	ldr	r4, [r3, #4]
    2146:	2100      	movs	r1, #0
    2148:	4620      	mov	r0, r4
    214a:	f7fe ff1b 	bl	f84 <__aeabi_fcmplt>
    214e:	2800      	cmp	r0, #0
    2150:	d08a      	beq.n	2068 <main+0xf4>
		pitch_angle = 360 + angles.pitch;
    2152:	4919      	ldr	r1, [pc, #100]	; (21b8 <main+0x244>)
    2154:	4620      	mov	r0, r4
    2156:	f7fe fc6f 	bl	a38 <__addsf3>
    215a:	4b15      	ldr	r3, [pc, #84]	; (21b0 <main+0x23c>)
    215c:	6018      	str	r0, [r3, #0]
    215e:	e783      	b.n	2068 <main+0xf4>
    2160:	0000b098 	.word	0x0000b098
    2164:	0000b0a4 	.word	0x0000b0a4
    2168:	0000b0b8 	.word	0x0000b0b8
    216c:	20000000 	.word	0x20000000
    2170:	0000af70 	.word	0x0000af70
    2174:	0000af70 	.word	0x0000af70
    2178:	0000b0c0 	.word	0x0000b0c0
    217c:	0000b0dc 	.word	0x0000b0dc
    2180:	0000b0f8 	.word	0x0000b0f8
    2184:	0000b174 	.word	0x0000b174
    2188:	0000b118 	.word	0x0000b118
    218c:	0000b13c 	.word	0x0000b13c
    2190:	0000b160 	.word	0x0000b160
    2194:	0000b144 	.word	0x0000b144
    2198:	20000398 	.word	0x20000398
    219c:	200003a4 	.word	0x200003a4
    21a0:	3a23d70b 	.word	0x3a23d70b
    21a4:	200003bc 	.word	0x200003bc
    21a8:	200003c0 	.word	0x200003c0
    21ac:	200003d0 	.word	0x200003d0
    21b0:	200003cc 	.word	0x200003cc
    21b4:	43340000 	.word	0x43340000
    21b8:	43b40000 	.word	0x43b40000

000021bc <setAccelRange_bmx160>:
    sentVal = (uint8_t)(passVal_odr | passVal_osr);
    writeReg_bmx160(bmxIMU_spi_p, BMX160_GYR_CONF_REG, sentVal);
}

void setAccelRange_bmx160(bmx160_spi * bmxIMU_spi_p, bmx160_accel_range passVal)
{
    21bc:	b510      	push	{r4, lr}
    21be:	460c      	mov	r4, r1
    uint8_t sentVal = 0b0;
    sentVal = (uint8_t)passVal;
    writeReg_bmx160(bmxIMU_spi_p, BMX160_ACC_RANGE_REG, sentVal);
    21c0:	460a      	mov	r2, r1
    21c2:	2141      	movs	r1, #65	; 0x41
    21c4:	f006 fdfa 	bl	8dbc <writeReg_bmx160>
    switch (passVal){
    21c8:	3c03      	subs	r4, #3
    21ca:	2c09      	cmp	r4, #9
    21cc:	d816      	bhi.n	21fc <setAccelRange_bmx160+0x40>
    21ce:	e8df f004 	tbb	[pc, r4]
    21d2:	1505      	.short	0x1505
    21d4:	0d151509 	.word	0x0d151509
    21d8:	11151515 	.word	0x11151515
        case bmx160_accelRange_2g:
            accelRange = BMX160_ACCEL_MG_LSB_2G * G_CONST;
    21dc:	4b09      	ldr	r3, [pc, #36]	; (2204 <setAccelRange_bmx160+0x48>)
    21de:	4a0a      	ldr	r2, [pc, #40]	; (2208 <setAccelRange_bmx160+0x4c>)
    21e0:	601a      	str	r2, [r3, #0]
            break;
        default:
            accelRange = BMX160_ACCEL_MG_LSB_2G * G_CONST;
            break;
    }
}
    21e2:	bd10      	pop	{r4, pc}
            accelRange = BMX160_ACCEL_MG_LSB_4G * G_CONST;
    21e4:	4b07      	ldr	r3, [pc, #28]	; (2204 <setAccelRange_bmx160+0x48>)
    21e6:	4a09      	ldr	r2, [pc, #36]	; (220c <setAccelRange_bmx160+0x50>)
    21e8:	601a      	str	r2, [r3, #0]
            break;
    21ea:	e7fa      	b.n	21e2 <setAccelRange_bmx160+0x26>
            accelRange = BMX160_ACCEL_MG_LSB_8G * G_CONST;
    21ec:	4b05      	ldr	r3, [pc, #20]	; (2204 <setAccelRange_bmx160+0x48>)
    21ee:	4a08      	ldr	r2, [pc, #32]	; (2210 <setAccelRange_bmx160+0x54>)
    21f0:	601a      	str	r2, [r3, #0]
            break;
    21f2:	e7f6      	b.n	21e2 <setAccelRange_bmx160+0x26>
            accelRange = BMX160_ACCEL_MG_LSB_16G * G_CONST;
    21f4:	4b03      	ldr	r3, [pc, #12]	; (2204 <setAccelRange_bmx160+0x48>)
    21f6:	4a07      	ldr	r2, [pc, #28]	; (2214 <setAccelRange_bmx160+0x58>)
    21f8:	601a      	str	r2, [r3, #0]
            break;
    21fa:	e7f2      	b.n	21e2 <setAccelRange_bmx160+0x26>
            accelRange = BMX160_ACCEL_MG_LSB_2G * G_CONST;
    21fc:	4b01      	ldr	r3, [pc, #4]	; (2204 <setAccelRange_bmx160+0x48>)
    21fe:	4a02      	ldr	r2, [pc, #8]	; (2208 <setAccelRange_bmx160+0x4c>)
    2200:	601a      	str	r2, [r3, #0]
}
    2202:	e7ee      	b.n	21e2 <setAccelRange_bmx160+0x26>
    2204:	20000018 	.word	0x20000018
    2208:	3a1cf5a9 	.word	0x3a1cf5a9
    220c:	3a9cf5a9 	.word	0x3a9cf5a9
    2210:	3b1cf5d3 	.word	0x3b1cf5d3
    2214:	3b9cf5bd 	.word	0x3b9cf5bd

00002218 <setGyroRange_bmx160>:

void setGyroRange_bmx160(bmx160_spi * bmxIMU_spi_p, bmx160_gyro_range passVal)
{
    2218:	b510      	push	{r4, lr}
    221a:	460c      	mov	r4, r1
    uint8_t sentVal = 0b0;
    sentVal = (uint8_t)passVal;
    writeReg_bmx160(bmxIMU_spi_p, BMX160_GYR_RANGE_REG, sentVal);
    221c:	460a      	mov	r2, r1
    221e:	2143      	movs	r1, #67	; 0x43
    2220:	f006 fdcc 	bl	8dbc <writeReg_bmx160>
    switch (passVal){
    2224:	2c04      	cmp	r4, #4
    2226:	d818      	bhi.n	225a <setGyroRange_bmx160+0x42>
    2228:	e8df f004 	tbb	[pc, r4]
    222c:	070b0f13 	.word	0x070b0f13
    2230:	03          	.byte	0x03
    2231:	00          	.byte	0x00
        case bmx160_gyroRange_125dps:
            gyroRange = BMX160_GYRO_SENSITIVITY_125DPS;
    2232:	4b0c      	ldr	r3, [pc, #48]	; (2264 <setGyroRange_bmx160+0x4c>)
    2234:	4a0c      	ldr	r2, [pc, #48]	; (2268 <setGyroRange_bmx160+0x50>)
    2236:	601a      	str	r2, [r3, #0]
            break;
        default:
            gyroRange = BMX160_GYRO_SENSITIVITY_250DPS;
            break;
    }
}
    2238:	bd10      	pop	{r4, pc}
            gyroRange = BMX160_GYRO_SENSITIVITY_250DPS;
    223a:	4b0a      	ldr	r3, [pc, #40]	; (2264 <setGyroRange_bmx160+0x4c>)
    223c:	4a0b      	ldr	r2, [pc, #44]	; (226c <setGyroRange_bmx160+0x54>)
    223e:	601a      	str	r2, [r3, #0]
            break;
    2240:	e7fa      	b.n	2238 <setGyroRange_bmx160+0x20>
            gyroRange = BMX160_GYRO_SENSITIVITY_500DPS;
    2242:	4b08      	ldr	r3, [pc, #32]	; (2264 <setGyroRange_bmx160+0x4c>)
    2244:	4a0a      	ldr	r2, [pc, #40]	; (2270 <setGyroRange_bmx160+0x58>)
    2246:	601a      	str	r2, [r3, #0]
            break;
    2248:	e7f6      	b.n	2238 <setGyroRange_bmx160+0x20>
            gyroRange = BMX160_GYRO_SENSITIVITY_1000DPS;
    224a:	4b06      	ldr	r3, [pc, #24]	; (2264 <setGyroRange_bmx160+0x4c>)
    224c:	4a09      	ldr	r2, [pc, #36]	; (2274 <setGyroRange_bmx160+0x5c>)
    224e:	601a      	str	r2, [r3, #0]
            break;
    2250:	e7f2      	b.n	2238 <setGyroRange_bmx160+0x20>
            gyroRange = BMX160_GYRO_SENSITIVITY_2000DPS;
    2252:	4b04      	ldr	r3, [pc, #16]	; (2264 <setGyroRange_bmx160+0x4c>)
    2254:	4a08      	ldr	r2, [pc, #32]	; (2278 <setGyroRange_bmx160+0x60>)
    2256:	601a      	str	r2, [r3, #0]
            break;
    2258:	e7ee      	b.n	2238 <setGyroRange_bmx160+0x20>
            gyroRange = BMX160_GYRO_SENSITIVITY_250DPS;
    225a:	4b02      	ldr	r3, [pc, #8]	; (2264 <setGyroRange_bmx160+0x4c>)
    225c:	4a03      	ldr	r2, [pc, #12]	; (226c <setGyroRange_bmx160+0x54>)
    225e:	601a      	str	r2, [r3, #0]
}
    2260:	e7ea      	b.n	2238 <setGyroRange_bmx160+0x20>
    2262:	bf00      	nop
    2264:	2000001c 	.word	0x2000001c
    2268:	3b79c1f8 	.word	0x3b79c1f8
    226c:	3bf9c1f8 	.word	0x3bf9c1f8
    2270:	3c79c18d 	.word	0x3c79c18d
    2274:	3cf9c18d 	.word	0x3cf9c18d
    2278:	3d79c18d 	.word	0x3d79c18d

0000227c <getData_bmx160>:
}*/
uint8_t getData_bmx160(bmx160_spi * bmxIMU_spi_p, bmx160_sensor_data * sen_data)
{
    int result;
    int16_t x=0,y=0,z=0; 
    if (sen_data == NULL)
    227c:	2900      	cmp	r1, #0
    227e:	d06d      	beq.n	235c <getData_bmx160+0xe0>
{
    2280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2284:	b084      	sub	sp, #16
    2286:	460d      	mov	r5, r1
    z = (int16_t) (((uint16_t)data[19] << 8) | data[18]);
    sen_data->ax = (float)(x) * accelRange;
    sen_data->ay = (float)(y) * accelRange;
    sen_data->az = (float)(z) * accelRange;
#elif USE_BMI160
    uint8_t data[12] = {0};
    2288:	2300      	movs	r3, #0
    228a:	9301      	str	r3, [sp, #4]
    228c:	9302      	str	r3, [sp, #8]
    228e:	9303      	str	r3, [sp, #12]
    result = readReg_bmx160(bmxIMU_spi_p, BMX160_GYR_X_LSB_REG, data, 12);
    2290:	230c      	movs	r3, #12
    2292:	aa01      	add	r2, sp, #4
    2294:	4619      	mov	r1, r3
    2296:	f006 fe05 	bl	8ea4 <readReg_bmx160>
    229a:	4606      	mov	r6, r0
    
    x = (int16_t) (((uint16_t)data[1] << 8) | data[0]);
    229c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    22a0:	021b      	lsls	r3, r3, #8
    22a2:	b21b      	sxth	r3, r3
    22a4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    y = (int16_t) (((uint16_t)data[3] << 8) | data[2]);
    22a8:	f89d 7007 	ldrb.w	r7, [sp, #7]
    22ac:	023f      	lsls	r7, r7, #8
    22ae:	b23f      	sxth	r7, r7
    22b0:	f89d 2006 	ldrb.w	r2, [sp, #6]
    22b4:	4317      	orrs	r7, r2
    z = (int16_t) (((uint16_t)data[5] << 8) | data[4]);
    22b6:	f89d 4009 	ldrb.w	r4, [sp, #9]
    22ba:	0224      	lsls	r4, r4, #8
    22bc:	b224      	sxth	r4, r4
    22be:	f89d 2008 	ldrb.w	r2, [sp, #8]
    22c2:	4314      	orrs	r4, r2
    sen_data->gx = (float)(x) * gyroRange;
    22c4:	4318      	orrs	r0, r3
    22c6:	f7fe fc6b 	bl	ba0 <__aeabi_i2f>
    22ca:	4b25      	ldr	r3, [pc, #148]	; (2360 <getData_bmx160+0xe4>)
    22cc:	f8d3 8000 	ldr.w	r8, [r3]
    22d0:	4641      	mov	r1, r8
    22d2:	f7fe fcb9 	bl	c48 <__aeabi_fmul>
    22d6:	60e8      	str	r0, [r5, #12]
    sen_data->gy = (float)(y) * gyroRange;
    22d8:	4638      	mov	r0, r7
    22da:	f7fe fc61 	bl	ba0 <__aeabi_i2f>
    22de:	4601      	mov	r1, r0
    22e0:	4640      	mov	r0, r8
    22e2:	f7fe fcb1 	bl	c48 <__aeabi_fmul>
    22e6:	6128      	str	r0, [r5, #16]
    sen_data->gz = (float)(z) * gyroRange;
    22e8:	4620      	mov	r0, r4
    22ea:	f7fe fc59 	bl	ba0 <__aeabi_i2f>
    22ee:	4601      	mov	r1, r0
    22f0:	4640      	mov	r0, r8
    22f2:	f7fe fca9 	bl	c48 <__aeabi_fmul>
    22f6:	6168      	str	r0, [r5, #20]

    x = (int16_t) (((uint16_t)data[7] << 8) | data[6]);
    22f8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    22fc:	021b      	lsls	r3, r3, #8
    22fe:	b21b      	sxth	r3, r3
    2300:	f89d 000a 	ldrb.w	r0, [sp, #10]
    y = (int16_t) (((uint16_t)data[9] << 8) | data[8]);
    2304:	f89d 700d 	ldrb.w	r7, [sp, #13]
    2308:	023f      	lsls	r7, r7, #8
    230a:	b23f      	sxth	r7, r7
    230c:	f89d 200c 	ldrb.w	r2, [sp, #12]
    2310:	4317      	orrs	r7, r2
    z = (int16_t) (((uint16_t)data[11] << 8) | data[10]);
    2312:	f89d 400f 	ldrb.w	r4, [sp, #15]
    2316:	0224      	lsls	r4, r4, #8
    2318:	b224      	sxth	r4, r4
    231a:	f89d 200e 	ldrb.w	r2, [sp, #14]
    231e:	4314      	orrs	r4, r2
    sen_data->ax = (float)(x) * accelRange;
    2320:	4318      	orrs	r0, r3
    2322:	f7fe fc3d 	bl	ba0 <__aeabi_i2f>
    2326:	4b0f      	ldr	r3, [pc, #60]	; (2364 <getData_bmx160+0xe8>)
    2328:	f8d3 8000 	ldr.w	r8, [r3]
    232c:	4641      	mov	r1, r8
    232e:	f7fe fc8b 	bl	c48 <__aeabi_fmul>
    2332:	6028      	str	r0, [r5, #0]
    sen_data->ay = (float)(y) * accelRange;
    2334:	4638      	mov	r0, r7
    2336:	f7fe fc33 	bl	ba0 <__aeabi_i2f>
    233a:	4601      	mov	r1, r0
    233c:	4640      	mov	r0, r8
    233e:	f7fe fc83 	bl	c48 <__aeabi_fmul>
    2342:	6068      	str	r0, [r5, #4]
    sen_data->az = (float)(z) * accelRange;
    2344:	4620      	mov	r0, r4
    2346:	f7fe fc2b 	bl	ba0 <__aeabi_i2f>
    234a:	4601      	mov	r1, r0
    234c:	4640      	mov	r0, r8
    234e:	f7fe fc7b 	bl	c48 <__aeabi_fmul>
    2352:	60a8      	str	r0, [r5, #8]
#else
    #error Please Select only the sed CHIP in 'bmx160.h'
#endif

    return result;
    2354:	b2f0      	uxtb	r0, r6
}
    2356:	b004      	add	sp, #16
    2358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BMX160_E_NULL_PTR;
    235c:	20ff      	movs	r0, #255	; 0xff
}
    235e:	4770      	bx	lr
    2360:	2000001c 	.word	0x2000001c
    2364:	20000018 	.word	0x20000018

00002368 <quaternion_from_gyro>:
{
    2368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    236c:	b082      	sub	sp, #8
    236e:	4680      	mov	r8, r0
    2370:	460c      	mov	r4, r1
    2372:	4615      	mov	r5, r2
    2374:	461e      	mov	r6, r3
    float alpha = 0.5*time;
    2376:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    237a:	9808      	ldr	r0, [sp, #32]
    237c:	f7fe fc64 	bl	c48 <__aeabi_fmul>
    2380:	4607      	mov	r7, r0
    b = alpha*(-wx);
    2382:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
    2386:	4639      	mov	r1, r7
    2388:	f7fe fc5e 	bl	c48 <__aeabi_fmul>
    238c:	4604      	mov	r4, r0
    c = alpha*(-wy);
    238e:	f105 4000 	add.w	r0, r5, #2147483648	; 0x80000000
    2392:	4639      	mov	r1, r7
    2394:	f7fe fc58 	bl	c48 <__aeabi_fmul>
    2398:	4605      	mov	r5, r0
    d = alpha*(-wz);
    239a:	f106 4000 	add.w	r0, r6, #2147483648	; 0x80000000
    239e:	4639      	mov	r1, r7
    23a0:	f7fe fc52 	bl	c48 <__aeabi_fmul>
    23a4:	4606      	mov	r6, r0
    a = 1 - 0.5*(b*b+c*c+d*d);
    23a6:	4621      	mov	r1, r4
    23a8:	4620      	mov	r0, r4
    23aa:	f7fe fc4d 	bl	c48 <__aeabi_fmul>
    23ae:	4607      	mov	r7, r0
    23b0:	4629      	mov	r1, r5
    23b2:	4628      	mov	r0, r5
    23b4:	f7fe fc48 	bl	c48 <__aeabi_fmul>
    23b8:	4601      	mov	r1, r0
    23ba:	4638      	mov	r0, r7
    23bc:	f7fe fb3c 	bl	a38 <__addsf3>
    23c0:	4607      	mov	r7, r0
    23c2:	4631      	mov	r1, r6
    23c4:	4630      	mov	r0, r6
    23c6:	f7fe fc3f 	bl	c48 <__aeabi_fmul>
    23ca:	4601      	mov	r1, r0
    23cc:	4638      	mov	r0, r7
    23ce:	f7fe fb33 	bl	a38 <__addsf3>
    23d2:	f7fd ffe9 	bl	3a8 <__aeabi_f2d>
    23d6:	2200      	movs	r2, #0
    23d8:	4b0a      	ldr	r3, [pc, #40]	; (2404 <quaternion_from_gyro+0x9c>)
    23da:	f7fe f83d 	bl	458 <__aeabi_dmul>
    23de:	4602      	mov	r2, r0
    23e0:	460b      	mov	r3, r1
    23e2:	2000      	movs	r0, #0
    23e4:	4908      	ldr	r1, [pc, #32]	; (2408 <quaternion_from_gyro+0xa0>)
    23e6:	f7fd fe7f 	bl	e8 <__aeabi_dsub>
    23ea:	f7fe facf 	bl	98c <__aeabi_d2f>
    23ee:	4601      	mov	r1, r0
    Quaternion result = quaternion_initialize(a,b,c,d);
    23f0:	9600      	str	r6, [sp, #0]
    23f2:	462b      	mov	r3, r5
    23f4:	4622      	mov	r2, r4
    23f6:	4640      	mov	r0, r8
    23f8:	f006 fde5 	bl	8fc6 <quaternion_initialize>
}
    23fc:	4640      	mov	r0, r8
    23fe:	b002      	add	sp, #8
    2400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2404:	3fe00000 	.word	0x3fe00000
    2408:	3ff00000 	.word	0x3ff00000

0000240c <InvSqrt>:
    v2.c = v1.c*scale;
    return v2;
}

float InvSqrt(float x)
{
    240c:	b510      	push	{r4, lr}
   uint32_t i = 0x5F1F1412 - (*(uint32_t*)&x >> 1);
   float tmp = *(float*)&i;
    240e:	4c0a      	ldr	r4, [pc, #40]	; (2438 <InvSqrt+0x2c>)
    2410:	eba4 0450 	sub.w	r4, r4, r0, lsr #1
   return tmp * (1.69000231f - 0.714158168f * x * tmp * tmp);
    2414:	4909      	ldr	r1, [pc, #36]	; (243c <InvSqrt+0x30>)
    2416:	f7fe fc17 	bl	c48 <__aeabi_fmul>
    241a:	4621      	mov	r1, r4
    241c:	f7fe fc14 	bl	c48 <__aeabi_fmul>
    2420:	4621      	mov	r1, r4
    2422:	f7fe fc11 	bl	c48 <__aeabi_fmul>
    2426:	4601      	mov	r1, r0
    2428:	4805      	ldr	r0, [pc, #20]	; (2440 <InvSqrt+0x34>)
    242a:	f7fe fb03 	bl	a34 <__aeabi_fsub>
    242e:	4621      	mov	r1, r4
    2430:	f7fe fc0a 	bl	c48 <__aeabi_fmul>
}
    2434:	bd10      	pop	{r4, pc}
    2436:	bf00      	nop
    2438:	5f1f1412 	.word	0x5f1f1412
    243c:	3f36d312 	.word	0x3f36d312
    2440:	3fd851ff 	.word	0x3fd851ff

00002444 <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    2444:	4b01      	ldr	r3, [pc, #4]	; (244c <__printk_hook_install+0x8>)
    2446:	6018      	str	r0, [r3, #0]
}
    2448:	4770      	bx	lr
    244a:	bf00      	nop
    244c:	20000020 	.word	0x20000020

00002450 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    2450:	b510      	push	{r4, lr}
    2452:	b084      	sub	sp, #16
    2454:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    2456:	9001      	str	r0, [sp, #4]
    2458:	9102      	str	r1, [sp, #8]
    245a:	2100      	movs	r1, #0
    245c:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
    245e:	a901      	add	r1, sp, #4
    2460:	4805      	ldr	r0, [pc, #20]	; (2478 <vsnprintk+0x28>)
    2462:	f000 f93d 	bl	26e0 <cbvprintf>

	if (ctx.count < ctx.max) {
    2466:	9b03      	ldr	r3, [sp, #12]
    2468:	9a02      	ldr	r2, [sp, #8]
    246a:	4293      	cmp	r3, r2
    246c:	da01      	bge.n	2472 <vsnprintk+0x22>
		str[ctx.count] = '\0';
    246e:	2200      	movs	r2, #0
    2470:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    2472:	9803      	ldr	r0, [sp, #12]
    2474:	b004      	add	sp, #16
    2476:	bd10      	pop	{r4, pc}
    2478:	0000943b 	.word	0x0000943b

0000247c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    247c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2480:	b083      	sub	sp, #12
    2482:	4604      	mov	r4, r0
    2484:	4608      	mov	r0, r1
    2486:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2488:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    248a:	f013 0f08 	tst.w	r3, #8
    248e:	d105      	bne.n	249c <process_event+0x20>
    2490:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    2494:	2300      	movs	r3, #0
    2496:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    2498:	9301      	str	r3, [sp, #4]
}
    249a:	e069      	b.n	2570 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
    249c:	2901      	cmp	r1, #1
    249e:	d009      	beq.n	24b4 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    24a0:	f043 0320 	orr.w	r3, r3, #32
    24a4:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    24a6:	f385 8811 	msr	BASEPRI, r5
    24aa:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    24ae:	b003      	add	sp, #12
    24b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    24b4:	f043 0310 	orr.w	r3, r3, #16
    24b8:	8323      	strh	r3, [r4, #24]
    24ba:	e7f4      	b.n	24a6 <process_event+0x2a>
			evt = process_recheck(mgr);
    24bc:	4620      	mov	r0, r4
    24be:	f007 f817 	bl	94f0 <process_recheck>
    24c2:	e057      	b.n	2574 <process_event+0xf8>
			res = mgr->last_res;
    24c4:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
    24c8:	464a      	mov	r2, r9
    24ca:	4669      	mov	r1, sp
    24cc:	4620      	mov	r0, r4
    24ce:	f007 f828 	bl	9522 <process_complete>
		onoff_transition_fn transit = NULL;
    24d2:	2700      	movs	r7, #0
    24d4:	e05a      	b.n	258c <process_event+0x110>
			transit = mgr->transitions->start;
    24d6:	6923      	ldr	r3, [r4, #16]
    24d8:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
    24da:	2106      	movs	r1, #6
    24dc:	4620      	mov	r0, r4
    24de:	f006 ffe0 	bl	94a2 <set_state>
		res = 0;
    24e2:	f04f 0900 	mov.w	r9, #0
    24e6:	e051      	b.n	258c <process_event+0x110>
			transit = mgr->transitions->stop;
    24e8:	6923      	ldr	r3, [r4, #16]
    24ea:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    24ec:	2104      	movs	r1, #4
    24ee:	4620      	mov	r0, r4
    24f0:	f006 ffd7 	bl	94a2 <set_state>
		res = 0;
    24f4:	f04f 0900 	mov.w	r9, #0
    24f8:	e048      	b.n	258c <process_event+0x110>
			transit = mgr->transitions->reset;
    24fa:	6923      	ldr	r3, [r4, #16]
    24fc:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    24fe:	2105      	movs	r1, #5
    2500:	4620      	mov	r0, r4
    2502:	f006 ffce 	bl	94a2 <set_state>
		res = 0;
    2506:	f04f 0900 	mov.w	r9, #0
    250a:	e03f      	b.n	258c <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    250c:	2200      	movs	r2, #0
    250e:	e046      	b.n	259e <process_event+0x122>
    2510:	2200      	movs	r2, #0
    2512:	e044      	b.n	259e <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2514:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    2518:	8323      	strh	r3, [r4, #24]
    251a:	f385 8811 	msr	BASEPRI, r5
    251e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    2522:	2900      	cmp	r1, #0
    2524:	d144      	bne.n	25b0 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    2526:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    2528:	b12b      	cbz	r3, 2536 <process_event+0xba>
				notify_all(mgr, &clients, state, res);
    252a:	464b      	mov	r3, r9
    252c:	4642      	mov	r2, r8
    252e:	4669      	mov	r1, sp
    2530:	4620      	mov	r0, r4
    2532:	f007 f86c 	bl	960e <notify_all>
			if (transit != NULL) {
    2536:	b117      	cbz	r7, 253e <process_event+0xc2>
				transit(mgr, transition_complete);
    2538:	4925      	ldr	r1, [pc, #148]	; (25d0 <process_event+0x154>)
    253a:	4620      	mov	r0, r4
    253c:	47b8      	blx	r7
	__asm__ volatile(
    253e:	f04f 0320 	mov.w	r3, #32
    2542:	f3ef 8511 	mrs	r5, BASEPRI
    2546:	f383 8812 	msr	BASEPRI_MAX, r3
    254a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    254e:	8b23      	ldrh	r3, [r4, #24]
    2550:	f023 0308 	bic.w	r3, r3, #8
    2554:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    2556:	8b23      	ldrh	r3, [r4, #24]
    2558:	f013 0f10 	tst.w	r3, #16
    255c:	d02e      	beq.n	25bc <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    255e:	f023 0310 	bic.w	r3, r3, #16
    2562:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    2564:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    2566:	8b26      	ldrh	r6, [r4, #24]
    2568:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    256c:	2800      	cmp	r0, #0
    256e:	d09a      	beq.n	24a6 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    2570:	2802      	cmp	r0, #2
    2572:	d0a3      	beq.n	24bc <process_event+0x40>
		if (evt == EVT_NOP) {
    2574:	2800      	cmp	r0, #0
    2576:	d096      	beq.n	24a6 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    2578:	2801      	cmp	r0, #1
    257a:	d0a3      	beq.n	24c4 <process_event+0x48>
		} else if (evt == EVT_START) {
    257c:	2803      	cmp	r0, #3
    257e:	d0aa      	beq.n	24d6 <process_event+0x5a>
		} else if (evt == EVT_STOP) {
    2580:	2804      	cmp	r0, #4
    2582:	d0b1      	beq.n	24e8 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
    2584:	2805      	cmp	r0, #5
    2586:	d0b8      	beq.n	24fa <process_event+0x7e>
		onoff_transition_fn transit = NULL;
    2588:	2700      	movs	r7, #0
		res = 0;
    258a:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    258c:	8b23      	ldrh	r3, [r4, #24]
    258e:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2592:	45b0      	cmp	r8, r6
    2594:	d0ba      	beq.n	250c <process_event+0x90>
    2596:	68a2      	ldr	r2, [r4, #8]
    2598:	2a00      	cmp	r2, #0
    259a:	d0b9      	beq.n	2510 <process_event+0x94>
    259c:	2201      	movs	r2, #1
		if (do_monitors
    259e:	4611      	mov	r1, r2
    25a0:	2a00      	cmp	r2, #0
    25a2:	d1b7      	bne.n	2514 <process_event+0x98>
    25a4:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    25a6:	2a00      	cmp	r2, #0
    25a8:	d1b4      	bne.n	2514 <process_event+0x98>
		    || (transit != NULL)) {
    25aa:	2f00      	cmp	r7, #0
    25ac:	d1b2      	bne.n	2514 <process_event+0x98>
    25ae:	e7d2      	b.n	2556 <process_event+0xda>
				notify_monitors(mgr, state, res);
    25b0:	464a      	mov	r2, r9
    25b2:	4641      	mov	r1, r8
    25b4:	4620      	mov	r0, r4
    25b6:	f006 ff7c 	bl	94b2 <notify_monitors>
    25ba:	e7b4      	b.n	2526 <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    25bc:	f013 0f20 	tst.w	r3, #32
    25c0:	d004      	beq.n	25cc <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    25c2:	f023 0320 	bic.w	r3, r3, #32
    25c6:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
    25c8:	2002      	movs	r0, #2
    25ca:	e7cc      	b.n	2566 <process_event+0xea>
		evt = EVT_NOP;
    25cc:	2000      	movs	r0, #0
    25ce:	e7ca      	b.n	2566 <process_event+0xea>
    25d0:	0000963d 	.word	0x0000963d

000025d4 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    25d4:	b410      	push	{r4}
    25d6:	4604      	mov	r4, r0
	const char *sp = *str;
    25d8:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    25da:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
    25dc:	7813      	ldrb	r3, [r2, #0]
    25de:	4907      	ldr	r1, [pc, #28]	; (25fc <extract_decimal+0x28>)
    25e0:	5c59      	ldrb	r1, [r3, r1]
    25e2:	f011 0f04 	tst.w	r1, #4
    25e6:	d006      	beq.n	25f6 <extract_decimal+0x22>
		val = 10U * val + *sp++ - '0';
    25e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    25ec:	3201      	adds	r2, #1
    25ee:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    25f2:	3830      	subs	r0, #48	; 0x30
    25f4:	e7f2      	b.n	25dc <extract_decimal+0x8>
	}
	*str = sp;
    25f6:	6022      	str	r2, [r4, #0]
	return val;
}
    25f8:	bc10      	pop	{r4}
    25fa:	4770      	bx	lr
    25fc:	0000bb4a 	.word	0x0000bb4a

00002600 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    2600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2604:	b083      	sub	sp, #12
    2606:	4604      	mov	r4, r0
    2608:	460d      	mov	r5, r1
    260a:	9201      	str	r2, [sp, #4]
    260c:	469a      	mov	sl, r3
    260e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    2612:	78d3      	ldrb	r3, [r2, #3]
    2614:	4a31      	ldr	r2, [pc, #196]	; (26dc <encode_uint+0xdc>)
    2616:	f813 b002 	ldrb.w	fp, [r3, r2]
    261a:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    261e:	2b6f      	cmp	r3, #111	; 0x6f
    2620:	d00f      	beq.n	2642 <encode_uint+0x42>
    2622:	d906      	bls.n	2632 <encode_uint+0x32>
    2624:	2b70      	cmp	r3, #112	; 0x70
    2626:	d00f      	beq.n	2648 <encode_uint+0x48>
    2628:	2b78      	cmp	r3, #120	; 0x78
    262a:	d110      	bne.n	264e <encode_uint+0x4e>
		return 16;
    262c:	f04f 0910 	mov.w	r9, #16
    2630:	e023      	b.n	267a <encode_uint+0x7a>
	switch (specifier) {
    2632:	2b58      	cmp	r3, #88	; 0x58
    2634:	d002      	beq.n	263c <encode_uint+0x3c>
    2636:	f04f 090a 	mov.w	r9, #10
    263a:	e01e      	b.n	267a <encode_uint+0x7a>
		return 16;
    263c:	f04f 0910 	mov.w	r9, #16
    2640:	e01b      	b.n	267a <encode_uint+0x7a>
		return 8;
    2642:	f04f 0908 	mov.w	r9, #8
    2646:	e018      	b.n	267a <encode_uint+0x7a>
		return 16;
    2648:	f04f 0910 	mov.w	r9, #16
    264c:	e015      	b.n	267a <encode_uint+0x7a>
	switch (specifier) {
    264e:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    2652:	e012      	b.n	267a <encode_uint+0x7a>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
    2654:	b2d2      	uxtb	r2, r2
    2656:	3230      	adds	r2, #48	; 0x30
    2658:	b2d2      	uxtb	r2, r2
    265a:	f808 2d01 	strb.w	r2, [r8, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
    265e:	4632      	mov	r2, r6
    2660:	463b      	mov	r3, r7
    2662:	4620      	mov	r0, r4
    2664:	4629      	mov	r1, r5
    2666:	f7fe fcdb 	bl	1020 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    266a:	42bd      	cmp	r5, r7
    266c:	bf08      	it	eq
    266e:	42b4      	cmpeq	r4, r6
    2670:	d318      	bcc.n	26a4 <encode_uint+0xa4>
    2672:	45d0      	cmp	r8, sl
    2674:	d916      	bls.n	26a4 <encode_uint+0xa4>
		value /= radix;
    2676:	4604      	mov	r4, r0
    2678:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    267a:	464e      	mov	r6, r9
    267c:	2700      	movs	r7, #0
    267e:	464a      	mov	r2, r9
    2680:	463b      	mov	r3, r7
    2682:	4620      	mov	r0, r4
    2684:	4629      	mov	r1, r5
    2686:	f7fe fccb 	bl	1020 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    268a:	2a09      	cmp	r2, #9
    268c:	d9e2      	bls.n	2654 <encode_uint+0x54>
    268e:	f1bb 0f01 	cmp.w	fp, #1
    2692:	d003      	beq.n	269c <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    2694:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    2696:	3257      	adds	r2, #87	; 0x57
    2698:	b2d2      	uxtb	r2, r2
    269a:	e7de      	b.n	265a <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    269c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    269e:	3237      	adds	r2, #55	; 0x37
    26a0:	b2d2      	uxtb	r2, r2
    26a2:	e7da      	b.n	265a <encode_uint+0x5a>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    26a4:	9b01      	ldr	r3, [sp, #4]
    26a6:	781b      	ldrb	r3, [r3, #0]
    26a8:	f013 0f20 	tst.w	r3, #32
    26ac:	d005      	beq.n	26ba <encode_uint+0xba>
		if (radix == 8) {
    26ae:	f1b9 0f08 	cmp.w	r9, #8
    26b2:	d006      	beq.n	26c2 <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
    26b4:	f1b9 0f10 	cmp.w	r9, #16
    26b8:	d009      	beq.n	26ce <encode_uint+0xce>
			;
		}
	}

	return bp;
}
    26ba:	4640      	mov	r0, r8
    26bc:	b003      	add	sp, #12
    26be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    26c2:	9a01      	ldr	r2, [sp, #4]
    26c4:	7893      	ldrb	r3, [r2, #2]
    26c6:	f043 0308 	orr.w	r3, r3, #8
    26ca:	7093      	strb	r3, [r2, #2]
    26cc:	e7f5      	b.n	26ba <encode_uint+0xba>
			conv->altform_0c = true;
    26ce:	9a01      	ldr	r2, [sp, #4]
    26d0:	7893      	ldrb	r3, [r2, #2]
    26d2:	f043 0310 	orr.w	r3, r3, #16
    26d6:	7093      	strb	r3, [r2, #2]
    26d8:	e7ef      	b.n	26ba <encode_uint+0xba>
    26da:	bf00      	nop
    26dc:	0000bb4a 	.word	0x0000bb4a

000026e0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    26e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    26e4:	b093      	sub	sp, #76	; 0x4c
    26e6:	4606      	mov	r6, r0
    26e8:	460d      	mov	r5, r1
    26ea:	4692      	mov	sl, r2
    26ec:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    26ee:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    26f0:	f89a 0000 	ldrb.w	r0, [sl]
    26f4:	2800      	cmp	r0, #0
    26f6:	f000 84d6 	beq.w	30a6 <cbvprintf+0x9c6>
		if (*fp != '%') {
    26fa:	2825      	cmp	r0, #37	; 0x25
    26fc:	d008      	beq.n	2710 <cbvprintf+0x30>
			OUTC(*fp++);
    26fe:	f10a 0a01 	add.w	sl, sl, #1
    2702:	4629      	mov	r1, r5
    2704:	47b0      	blx	r6
    2706:	2800      	cmp	r0, #0
    2708:	f2c0 84ce 	blt.w	30a8 <cbvprintf+0x9c8>
    270c:	3401      	adds	r4, #1
			continue;
    270e:	e7ef      	b.n	26f0 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    2710:	2300      	movs	r3, #0
    2712:	9306      	str	r3, [sp, #24]
    2714:	9307      	str	r3, [sp, #28]
    2716:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
    2718:	9308      	str	r3, [sp, #32]
    271a:	9309      	str	r3, [sp, #36]	; 0x24
    271c:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
    271e:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
    2722:	f89a 3001 	ldrb.w	r3, [sl, #1]
    2726:	2b25      	cmp	r3, #37	; 0x25
    2728:	d001      	beq.n	272e <cbvprintf+0x4e>
	bool loop = true;
    272a:	2701      	movs	r7, #1
    272c:	e02c      	b.n	2788 <cbvprintf+0xa8>
		conv->specifier = *sp++;
    272e:	f10a 0802 	add.w	r8, sl, #2
    2732:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
    2736:	e1a8      	b.n	2a8a <cbvprintf+0x3aa>
			conv->flag_dash = true;
    2738:	f89d 3020 	ldrb.w	r3, [sp, #32]
    273c:	f043 0304 	orr.w	r3, r3, #4
    2740:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
    2744:	b1ff      	cbz	r7, 2786 <cbvprintf+0xa6>
			++sp;
    2746:	f108 0801 	add.w	r8, r8, #1
    274a:	e01c      	b.n	2786 <cbvprintf+0xa6>
			conv->flag_plus = true;
    274c:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2750:	f043 0308 	orr.w	r3, r3, #8
    2754:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    2758:	e7f4      	b.n	2744 <cbvprintf+0x64>
			conv->flag_space = true;
    275a:	f89d 3020 	ldrb.w	r3, [sp, #32]
    275e:	f043 0310 	orr.w	r3, r3, #16
    2762:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    2766:	e7ed      	b.n	2744 <cbvprintf+0x64>
			conv->flag_hash = true;
    2768:	f89d 3020 	ldrb.w	r3, [sp, #32]
    276c:	f043 0320 	orr.w	r3, r3, #32
    2770:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    2774:	e7e6      	b.n	2744 <cbvprintf+0x64>
			conv->flag_zero = true;
    2776:	f89d 3020 	ldrb.w	r3, [sp, #32]
    277a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    277e:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    2782:	e7df      	b.n	2744 <cbvprintf+0x64>
		switch (*sp) {
    2784:	2700      	movs	r7, #0
	} while (loop);
    2786:	b34f      	cbz	r7, 27dc <cbvprintf+0xfc>
		switch (*sp) {
    2788:	f898 3000 	ldrb.w	r3, [r8]
    278c:	3b20      	subs	r3, #32
    278e:	2b10      	cmp	r3, #16
    2790:	d8f8      	bhi.n	2784 <cbvprintf+0xa4>
    2792:	a201      	add	r2, pc, #4	; (adr r2, 2798 <cbvprintf+0xb8>)
    2794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2798:	0000275b 	.word	0x0000275b
    279c:	00002785 	.word	0x00002785
    27a0:	00002785 	.word	0x00002785
    27a4:	00002769 	.word	0x00002769
    27a8:	00002785 	.word	0x00002785
    27ac:	00002785 	.word	0x00002785
    27b0:	00002785 	.word	0x00002785
    27b4:	00002785 	.word	0x00002785
    27b8:	00002785 	.word	0x00002785
    27bc:	00002785 	.word	0x00002785
    27c0:	00002785 	.word	0x00002785
    27c4:	0000274d 	.word	0x0000274d
    27c8:	00002785 	.word	0x00002785
    27cc:	00002739 	.word	0x00002739
    27d0:	00002785 	.word	0x00002785
    27d4:	00002785 	.word	0x00002785
    27d8:	00002777 	.word	0x00002777
	if (conv->flag_zero && conv->flag_dash) {
    27dc:	f89d 3020 	ldrb.w	r3, [sp, #32]
    27e0:	f003 0344 	and.w	r3, r3, #68	; 0x44
    27e4:	2b44      	cmp	r3, #68	; 0x44
    27e6:	d06d      	beq.n	28c4 <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
    27e8:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
    27ec:	f89d 3020 	ldrb.w	r3, [sp, #32]
    27f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    27f4:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
    27f8:	f898 3000 	ldrb.w	r3, [r8]
    27fc:	2b2a      	cmp	r3, #42	; 0x2a
    27fe:	d068      	beq.n	28d2 <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
    2800:	a805      	add	r0, sp, #20
    2802:	f7ff fee7 	bl	25d4 <extract_decimal>
	if (sp != wp) {
    2806:	9b05      	ldr	r3, [sp, #20]
    2808:	4598      	cmp	r8, r3
    280a:	d012      	beq.n	2832 <cbvprintf+0x152>
		conv->width_present = true;
    280c:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2814:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
    2818:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
    281a:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    281e:	2800      	cmp	r0, #0
    2820:	db60      	blt.n	28e4 <cbvprintf+0x204>
    2822:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    2824:	4313      	orrs	r3, r2
    2826:	f89d 2020 	ldrb.w	r2, [sp, #32]
    282a:	f363 0241 	bfi	r2, r3, #1, #1
    282e:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    2832:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
    2834:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    2836:	781b      	ldrb	r3, [r3, #0]
    2838:	2b2e      	cmp	r3, #46	; 0x2e
    283a:	bf14      	ite	ne
    283c:	2300      	movne	r3, #0
    283e:	2301      	moveq	r3, #1
    2840:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    2844:	f363 0241 	bfi	r2, r3, #1, #1
    2848:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
    284c:	2b00      	cmp	r3, #0
    284e:	d04b      	beq.n	28e8 <cbvprintf+0x208>
	++sp;
    2850:	9b05      	ldr	r3, [sp, #20]
    2852:	1c5a      	adds	r2, r3, #1
    2854:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    2856:	785b      	ldrb	r3, [r3, #1]
    2858:	2b2a      	cmp	r3, #42	; 0x2a
    285a:	d048      	beq.n	28ee <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
    285c:	a805      	add	r0, sp, #20
    285e:	f7ff feb9 	bl	25d4 <extract_decimal>
	conv->prec_value = prec;
    2862:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
    2864:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2868:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    286c:	2800      	cmp	r0, #0
    286e:	db47      	blt.n	2900 <cbvprintf+0x220>
    2870:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    2872:	4313      	orrs	r3, r2
    2874:	f89d 2020 	ldrb.w	r2, [sp, #32]
    2878:	f363 0241 	bfi	r2, r3, #1, #1
    287c:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    2880:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
    2884:	f898 3000 	ldrb.w	r3, [r8]
    2888:	3b4c      	subs	r3, #76	; 0x4c
    288a:	2b2e      	cmp	r3, #46	; 0x2e
    288c:	f200 80dc 	bhi.w	2a48 <cbvprintf+0x368>
    2890:	e8df f003 	tbb	[pc, r3]
    2894:	dadadaca 	.word	0xdadadaca
    2898:	dadadada 	.word	0xdadadada
    289c:	dadadada 	.word	0xdadadada
    28a0:	dadadada 	.word	0xdadadada
    28a4:	dadadada 	.word	0xdadadada
    28a8:	dadadada 	.word	0xdadadada
    28ac:	dadadada 	.word	0xdadadada
    28b0:	da6ada38 	.word	0xda6ada38
    28b4:	dadada51 	.word	0xdadada51
    28b8:	dadadada 	.word	0xdadadada
    28bc:	dadadac0 	.word	0xdadadac0
    28c0:	dada      	.short	0xdada
    28c2:	b6          	.byte	0xb6
    28c3:	00          	.byte	0x00
		conv->flag_zero = false;
    28c4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    28c8:	f36f 1386 	bfc	r3, #6, #1
    28cc:	f88d 3020 	strb.w	r3, [sp, #32]
    28d0:	e78a      	b.n	27e8 <cbvprintf+0x108>
		conv->width_star = true;
    28d2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    28d6:	f043 0301 	orr.w	r3, r3, #1
    28da:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    28de:	4643      	mov	r3, r8
    28e0:	3301      	adds	r3, #1
    28e2:	e7a7      	b.n	2834 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
    28e4:	2201      	movs	r2, #1
    28e6:	e79d      	b.n	2824 <cbvprintf+0x144>
		return sp;
    28e8:	f8dd 8014 	ldr.w	r8, [sp, #20]
    28ec:	e7ca      	b.n	2884 <cbvprintf+0x1a4>
		conv->prec_star = true;
    28ee:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    28f2:	f043 0304 	orr.w	r3, r3, #4
    28f6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    28fa:	f102 0801 	add.w	r8, r2, #1
    28fe:	e7c1      	b.n	2884 <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
    2900:	2201      	movs	r2, #1
    2902:	e7b6      	b.n	2872 <cbvprintf+0x192>
		if (*++sp == 'h') {
    2904:	f108 0201 	add.w	r2, r8, #1
    2908:	f898 3001 	ldrb.w	r3, [r8, #1]
    290c:	2b68      	cmp	r3, #104	; 0x68
    290e:	d008      	beq.n	2922 <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
    2910:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2914:	2102      	movs	r1, #2
    2916:	f361 03c6 	bfi	r3, r1, #3, #4
    291a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
    291e:	4690      	mov	r8, r2
    2920:	e02b      	b.n	297a <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
    2922:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2926:	2201      	movs	r2, #1
    2928:	f362 03c6 	bfi	r3, r2, #3, #4
    292c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    2930:	f108 0802 	add.w	r8, r8, #2
    2934:	e021      	b.n	297a <cbvprintf+0x29a>
		if (*++sp == 'l') {
    2936:	f108 0201 	add.w	r2, r8, #1
    293a:	f898 3001 	ldrb.w	r3, [r8, #1]
    293e:	2b6c      	cmp	r3, #108	; 0x6c
    2940:	d008      	beq.n	2954 <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
    2942:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2946:	2103      	movs	r1, #3
    2948:	f361 03c6 	bfi	r3, r1, #3, #4
    294c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
    2950:	4690      	mov	r8, r2
    2952:	e012      	b.n	297a <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
    2954:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2958:	2204      	movs	r2, #4
    295a:	f362 03c6 	bfi	r3, r2, #3, #4
    295e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    2962:	f108 0802 	add.w	r8, r8, #2
    2966:	e008      	b.n	297a <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
    2968:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    296c:	2205      	movs	r2, #5
    296e:	f362 03c6 	bfi	r3, r2, #3, #4
    2972:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    2976:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
    297a:	f818 3b01 	ldrb.w	r3, [r8], #1
    297e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
    2982:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    2986:	2a37      	cmp	r2, #55	; 0x37
    2988:	f200 8150 	bhi.w	2c2c <cbvprintf+0x54c>
    298c:	e8df f012 	tbh	[pc, r2, lsl #1]
    2990:	014e0126 	.word	0x014e0126
    2994:	014e014e 	.word	0x014e014e
    2998:	01260126 	.word	0x01260126
    299c:	014e0126 	.word	0x014e0126
    29a0:	014e014e 	.word	0x014e014e
    29a4:	014e014e 	.word	0x014e014e
    29a8:	014e014e 	.word	0x014e014e
    29ac:	014e014e 	.word	0x014e014e
    29b0:	014e014e 	.word	0x014e014e
    29b4:	014e014e 	.word	0x014e014e
    29b8:	014e014e 	.word	0x014e014e
    29bc:	0113014e 	.word	0x0113014e
    29c0:	014e014e 	.word	0x014e014e
    29c4:	014e014e 	.word	0x014e014e
    29c8:	014e014e 	.word	0x014e014e
    29cc:	014e014e 	.word	0x014e014e
    29d0:	014e0126 	.word	0x014e0126
    29d4:	00630113 	.word	0x00630113
    29d8:	01260126 	.word	0x01260126
    29dc:	014e0126 	.word	0x014e0126
    29e0:	014e0063 	.word	0x014e0063
    29e4:	014e014e 	.word	0x014e014e
    29e8:	012f014e 	.word	0x012f014e
    29ec:	013f0113 	.word	0x013f0113
    29f0:	014e014e 	.word	0x014e014e
    29f4:	014e013f 	.word	0x014e013f
    29f8:	014e0113 	.word	0x014e0113
    29fc:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
    2a00:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2a04:	2206      	movs	r2, #6
    2a06:	f362 03c6 	bfi	r3, r2, #3, #4
    2a0a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    2a0e:	f108 0801 	add.w	r8, r8, #1
		break;
    2a12:	e7b2      	b.n	297a <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
    2a14:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2a18:	2207      	movs	r2, #7
    2a1a:	f362 03c6 	bfi	r3, r2, #3, #4
    2a1e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    2a22:	f108 0801 	add.w	r8, r8, #1
		break;
    2a26:	e7a8      	b.n	297a <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
    2a28:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2a2c:	2208      	movs	r2, #8
    2a2e:	f362 03c6 	bfi	r3, r2, #3, #4
    2a32:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    2a36:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
    2a3a:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2a3e:	f043 0302 	orr.w	r3, r3, #2
    2a42:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    2a46:	e798      	b.n	297a <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
    2a48:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2a4c:	f36f 03c6 	bfc	r3, #3, #4
    2a50:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
    2a54:	e791      	b.n	297a <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
    2a56:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    2a5a:	2101      	movs	r1, #1
    2a5c:	f361 0202 	bfi	r2, r1, #0, #3
    2a60:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    2a64:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    2a68:	f002 0278 	and.w	r2, r2, #120	; 0x78
    2a6c:	2a40      	cmp	r2, #64	; 0x40
    2a6e:	f000 80aa 	beq.w	2bc6 <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
    2a72:	2b63      	cmp	r3, #99	; 0x63
    2a74:	f000 80ae 	beq.w	2bd4 <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
    2a78:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2a7c:	f3c3 0240 	ubfx	r2, r3, #1, #1
    2a80:	4317      	orrs	r7, r2
    2a82:	f367 0341 	bfi	r3, r7, #1, #1
    2a86:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    2a8a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2a8e:	f013 0f01 	tst.w	r3, #1
    2a92:	f000 80da 	beq.w	2c4a <cbvprintf+0x56a>
			width = va_arg(ap, int);
    2a96:	9b03      	ldr	r3, [sp, #12]
    2a98:	1d1a      	adds	r2, r3, #4
    2a9a:	9203      	str	r2, [sp, #12]
    2a9c:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    2a9e:	2f00      	cmp	r7, #0
    2aa0:	f2c0 80cb 	blt.w	2c3a <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    2aa4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2aa8:	f013 0f04 	tst.w	r3, #4
    2aac:	f000 80df 	beq.w	2c6e <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
    2ab0:	9b03      	ldr	r3, [sp, #12]
    2ab2:	1d1a      	adds	r2, r3, #4
    2ab4:	9203      	str	r2, [sp, #12]
    2ab6:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
    2aba:	f1bb 0f00 	cmp.w	fp, #0
    2abe:	f2c0 80cd 	blt.w	2c5c <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    2ac2:	2300      	movs	r3, #0
    2ac4:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
    2ac6:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    2ac8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    2acc:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    2ad0:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
    2ad4:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    2ad8:	2b01      	cmp	r3, #1
    2ada:	f000 80d1 	beq.w	2c80 <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    2ade:	2b02      	cmp	r3, #2
    2ae0:	f000 8116 	beq.w	2d10 <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    2ae4:	2b04      	cmp	r3, #4
    2ae6:	f000 8167 	beq.w	2db8 <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    2aea:	2b03      	cmp	r3, #3
    2aec:	f000 817e 	beq.w	2dec <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    2af0:	f89d 9020 	ldrb.w	r9, [sp, #32]
    2af4:	f019 0303 	ands.w	r3, r9, #3
    2af8:	9302      	str	r3, [sp, #8]
    2afa:	f040 817d 	bne.w	2df8 <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    2afe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    2b02:	3b25      	subs	r3, #37	; 0x25
    2b04:	2b53      	cmp	r3, #83	; 0x53
    2b06:	f200 8233 	bhi.w	2f70 <cbvprintf+0x890>
    2b0a:	e8df f013 	tbh	[pc, r3, lsl #1]
    2b0e:	0181      	.short	0x0181
    2b10:	02310231 	.word	0x02310231
    2b14:	02310231 	.word	0x02310231
    2b18:	02310231 	.word	0x02310231
    2b1c:	02310231 	.word	0x02310231
    2b20:	02310231 	.word	0x02310231
    2b24:	02310231 	.word	0x02310231
    2b28:	02310231 	.word	0x02310231
    2b2c:	02310231 	.word	0x02310231
    2b30:	02310231 	.word	0x02310231
    2b34:	02310231 	.word	0x02310231
    2b38:	02310231 	.word	0x02310231
    2b3c:	02310231 	.word	0x02310231
    2b40:	02310231 	.word	0x02310231
    2b44:	02310231 	.word	0x02310231
    2b48:	02310231 	.word	0x02310231
    2b4c:	02310231 	.word	0x02310231
    2b50:	02310231 	.word	0x02310231
    2b54:	02310231 	.word	0x02310231
    2b58:	02310231 	.word	0x02310231
    2b5c:	02310231 	.word	0x02310231
    2b60:	02310231 	.word	0x02310231
    2b64:	02310231 	.word	0x02310231
    2b68:	02310231 	.word	0x02310231
    2b6c:	02310231 	.word	0x02310231
    2b70:	02310231 	.word	0x02310231
    2b74:	023101c7 	.word	0x023101c7
    2b78:	02310231 	.word	0x02310231
    2b7c:	02310231 	.word	0x02310231
    2b80:	02310231 	.word	0x02310231
    2b84:	02310231 	.word	0x02310231
    2b88:	01a10231 	.word	0x01a10231
    2b8c:	023101ab 	.word	0x023101ab
    2b90:	02310231 	.word	0x02310231
    2b94:	01ab0231 	.word	0x01ab0231
    2b98:	02310231 	.word	0x02310231
    2b9c:	02310231 	.word	0x02310231
    2ba0:	01c70208 	.word	0x01c70208
    2ba4:	023101ea 	.word	0x023101ea
    2ba8:	018f0231 	.word	0x018f0231
    2bac:	01c70231 	.word	0x01c70231
    2bb0:	02310231 	.word	0x02310231
    2bb4:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
    2bb6:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    2bba:	2102      	movs	r1, #2
    2bbc:	f361 0202 	bfi	r2, r1, #0, #3
    2bc0:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    2bc4:	e74e      	b.n	2a64 <cbvprintf+0x384>
			conv->invalid = true;
    2bc6:	f89d 1020 	ldrb.w	r1, [sp, #32]
    2bca:	f041 0101 	orr.w	r1, r1, #1
    2bce:	f88d 1020 	strb.w	r1, [sp, #32]
    2bd2:	e74e      	b.n	2a72 <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
    2bd4:	1e17      	subs	r7, r2, #0
    2bd6:	bf18      	it	ne
    2bd8:	2701      	movne	r7, #1
    2bda:	e74d      	b.n	2a78 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
    2bdc:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    2be0:	2204      	movs	r2, #4
    2be2:	f362 0302 	bfi	r3, r2, #0, #3
    2be6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
    2bea:	2701      	movs	r7, #1
			break;
    2bec:	e744      	b.n	2a78 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    2bee:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    2bf2:	2203      	movs	r2, #3
    2bf4:	f362 0302 	bfi	r3, r2, #0, #3
    2bf8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    2bfc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2c00:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2c04:	2b40      	cmp	r3, #64	; 0x40
    2c06:	f47f af37 	bne.w	2a78 <cbvprintf+0x398>
			unsupported = true;
    2c0a:	2701      	movs	r7, #1
    2c0c:	e734      	b.n	2a78 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    2c0e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    2c12:	2203      	movs	r2, #3
    2c14:	f362 0302 	bfi	r3, r2, #0, #3
    2c18:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
    2c1c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2c20:	f013 0f78 	tst.w	r3, #120	; 0x78
    2c24:	f43f af28 	beq.w	2a78 <cbvprintf+0x398>
			unsupported = true;
    2c28:	2701      	movs	r7, #1
    2c2a:	e725      	b.n	2a78 <cbvprintf+0x398>
		conv->invalid = true;
    2c2c:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2c30:	f043 0301 	orr.w	r3, r3, #1
    2c34:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    2c38:	e71e      	b.n	2a78 <cbvprintf+0x398>
				conv->flag_dash = true;
    2c3a:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2c3e:	f043 0304 	orr.w	r3, r3, #4
    2c42:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
    2c46:	427f      	negs	r7, r7
    2c48:	e72c      	b.n	2aa4 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    2c4a:	f99d 3020 	ldrsb.w	r3, [sp, #32]
    2c4e:	2b00      	cmp	r3, #0
    2c50:	db02      	blt.n	2c58 <cbvprintf+0x578>
		int width = -1;
    2c52:	f04f 37ff 	mov.w	r7, #4294967295
    2c56:	e725      	b.n	2aa4 <cbvprintf+0x3c4>
			width = conv->width_value;
    2c58:	9f09      	ldr	r7, [sp, #36]	; 0x24
    2c5a:	e723      	b.n	2aa4 <cbvprintf+0x3c4>
				conv->prec_present = false;
    2c5c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2c60:	f36f 0341 	bfc	r3, #1, #1
    2c64:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
    2c68:	f04f 3bff 	mov.w	fp, #4294967295
    2c6c:	e729      	b.n	2ac2 <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
    2c6e:	f013 0f02 	tst.w	r3, #2
    2c72:	d002      	beq.n	2c7a <cbvprintf+0x59a>
			precision = conv->prec_value;
    2c74:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    2c78:	e723      	b.n	2ac2 <cbvprintf+0x3e2>
		int precision = -1;
    2c7a:	f04f 3bff 	mov.w	fp, #4294967295
    2c7e:	e720      	b.n	2ac2 <cbvprintf+0x3e2>
			switch (length_mod) {
    2c80:	1ecb      	subs	r3, r1, #3
    2c82:	2b04      	cmp	r3, #4
    2c84:	d804      	bhi.n	2c90 <cbvprintf+0x5b0>
    2c86:	e8df f003 	tbb	[pc, r3]
    2c8a:	1d0b      	.short	0x1d0b
    2c8c:	3529      	.short	0x3529
    2c8e:	35          	.byte	0x35
    2c8f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    2c90:	9b03      	ldr	r3, [sp, #12]
    2c92:	1d1a      	adds	r2, r3, #4
    2c94:	9203      	str	r2, [sp, #12]
    2c96:	681a      	ldr	r2, [r3, #0]
    2c98:	17d3      	asrs	r3, r2, #31
    2c9a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    2c9e:	e006      	b.n	2cae <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
    2ca0:	9b03      	ldr	r3, [sp, #12]
    2ca2:	1d1a      	adds	r2, r3, #4
    2ca4:	9203      	str	r2, [sp, #12]
    2ca6:	681a      	ldr	r2, [r3, #0]
    2ca8:	17d3      	asrs	r3, r2, #31
    2caa:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    2cae:	2901      	cmp	r1, #1
    2cb0:	d028      	beq.n	2d04 <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
    2cb2:	2902      	cmp	r1, #2
    2cb4:	f47f af1c 	bne.w	2af0 <cbvprintf+0x410>
				value->sint = (short)value->sint;
    2cb8:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    2cbc:	17d3      	asrs	r3, r2, #31
    2cbe:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2cc2:	e715      	b.n	2af0 <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
    2cc4:	9b03      	ldr	r3, [sp, #12]
    2cc6:	3307      	adds	r3, #7
    2cc8:	f023 0307 	bic.w	r3, r3, #7
    2ccc:	f103 0208 	add.w	r2, r3, #8
    2cd0:	9203      	str	r2, [sp, #12]
    2cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    2cd6:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    2cda:	e7e8      	b.n	2cae <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
    2cdc:	9b03      	ldr	r3, [sp, #12]
    2cde:	3307      	adds	r3, #7
    2ce0:	f023 0307 	bic.w	r3, r3, #7
    2ce4:	f103 0208 	add.w	r2, r3, #8
    2ce8:	9203      	str	r2, [sp, #12]
    2cea:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    2cee:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    2cf2:	e7dc      	b.n	2cae <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2cf4:	9b03      	ldr	r3, [sp, #12]
    2cf6:	1d1a      	adds	r2, r3, #4
    2cf8:	9203      	str	r2, [sp, #12]
    2cfa:	681a      	ldr	r2, [r3, #0]
    2cfc:	17d3      	asrs	r3, r2, #31
				value->sint =
    2cfe:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    2d02:	e7d4      	b.n	2cae <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
    2d04:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2d08:	9306      	str	r3, [sp, #24]
    2d0a:	2300      	movs	r3, #0
    2d0c:	9307      	str	r3, [sp, #28]
    2d0e:	e6ef      	b.n	2af0 <cbvprintf+0x410>
			switch (length_mod) {
    2d10:	1ecb      	subs	r3, r1, #3
    2d12:	2b04      	cmp	r3, #4
    2d14:	d804      	bhi.n	2d20 <cbvprintf+0x640>
    2d16:	e8df f003 	tbb	[pc, r3]
    2d1a:	1f0b      	.short	0x1f0b
    2d1c:	4135      	.short	0x4135
    2d1e:	41          	.byte	0x41
    2d1f:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    2d20:	9b03      	ldr	r3, [sp, #12]
    2d22:	1d1a      	adds	r2, r3, #4
    2d24:	9203      	str	r2, [sp, #12]
    2d26:	681b      	ldr	r3, [r3, #0]
    2d28:	9306      	str	r3, [sp, #24]
    2d2a:	2300      	movs	r3, #0
    2d2c:	9307      	str	r3, [sp, #28]
				break;
    2d2e:	e01e      	b.n	2d6e <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
    2d30:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
    2d34:	2b63      	cmp	r3, #99	; 0x63
    2d36:	d007      	beq.n	2d48 <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
    2d38:	9b03      	ldr	r3, [sp, #12]
    2d3a:	1d1a      	adds	r2, r3, #4
    2d3c:	9203      	str	r2, [sp, #12]
    2d3e:	681b      	ldr	r3, [r3, #0]
    2d40:	9306      	str	r3, [sp, #24]
    2d42:	2300      	movs	r3, #0
    2d44:	9307      	str	r3, [sp, #28]
    2d46:	e012      	b.n	2d6e <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
    2d48:	9b03      	ldr	r3, [sp, #12]
    2d4a:	1d1a      	adds	r2, r3, #4
    2d4c:	9203      	str	r2, [sp, #12]
    2d4e:	681b      	ldr	r3, [r3, #0]
    2d50:	9306      	str	r3, [sp, #24]
    2d52:	2300      	movs	r3, #0
    2d54:	9307      	str	r3, [sp, #28]
    2d56:	e00a      	b.n	2d6e <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
    2d58:	9b03      	ldr	r3, [sp, #12]
    2d5a:	3307      	adds	r3, #7
    2d5c:	f023 0307 	bic.w	r3, r3, #7
    2d60:	f103 0208 	add.w	r2, r3, #8
    2d64:	9203      	str	r2, [sp, #12]
    2d66:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    2d6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    2d6e:	2901      	cmp	r1, #1
    2d70:	d01c      	beq.n	2dac <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
    2d72:	2902      	cmp	r1, #2
    2d74:	f47f aebc 	bne.w	2af0 <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
    2d78:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    2d7c:	9306      	str	r3, [sp, #24]
    2d7e:	2300      	movs	r3, #0
    2d80:	9307      	str	r3, [sp, #28]
    2d82:	e6b5      	b.n	2af0 <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
    2d84:	9b03      	ldr	r3, [sp, #12]
    2d86:	3307      	adds	r3, #7
    2d88:	f023 0307 	bic.w	r3, r3, #7
    2d8c:	f103 0208 	add.w	r2, r3, #8
    2d90:	9203      	str	r2, [sp, #12]
    2d92:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    2d96:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    2d9a:	e7e8      	b.n	2d6e <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
    2d9c:	9b03      	ldr	r3, [sp, #12]
    2d9e:	1d1a      	adds	r2, r3, #4
    2da0:	9203      	str	r2, [sp, #12]
    2da2:	681b      	ldr	r3, [r3, #0]
				value->uint =
    2da4:	9306      	str	r3, [sp, #24]
    2da6:	2300      	movs	r3, #0
    2da8:	9307      	str	r3, [sp, #28]
				break;
    2daa:	e7e0      	b.n	2d6e <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
    2dac:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2db0:	9306      	str	r3, [sp, #24]
    2db2:	2300      	movs	r3, #0
    2db4:	9307      	str	r3, [sp, #28]
    2db6:	e69b      	b.n	2af0 <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
    2db8:	2908      	cmp	r1, #8
    2dba:	d00b      	beq.n	2dd4 <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
    2dbc:	9b03      	ldr	r3, [sp, #12]
    2dbe:	3307      	adds	r3, #7
    2dc0:	f023 0307 	bic.w	r3, r3, #7
    2dc4:	f103 0208 	add.w	r2, r3, #8
    2dc8:	9203      	str	r2, [sp, #12]
    2dca:	e9d3 2300 	ldrd	r2, r3, [r3]
    2dce:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2dd2:	e68d      	b.n	2af0 <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
    2dd4:	9b03      	ldr	r3, [sp, #12]
    2dd6:	3307      	adds	r3, #7
    2dd8:	f023 0307 	bic.w	r3, r3, #7
    2ddc:	f103 0208 	add.w	r2, r3, #8
    2de0:	9203      	str	r2, [sp, #12]
    2de2:	e9d3 2300 	ldrd	r2, r3, [r3]
    2de6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2dea:	e681      	b.n	2af0 <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
    2dec:	9b03      	ldr	r3, [sp, #12]
    2dee:	1d1a      	adds	r2, r3, #4
    2df0:	9203      	str	r2, [sp, #12]
    2df2:	681b      	ldr	r3, [r3, #0]
    2df4:	9306      	str	r3, [sp, #24]
    2df6:	e67b      	b.n	2af0 <cbvprintf+0x410>
			OUTS(sp, fp);
    2df8:	4643      	mov	r3, r8
    2dfa:	4652      	mov	r2, sl
    2dfc:	4629      	mov	r1, r5
    2dfe:	4630      	mov	r0, r6
    2e00:	f006 fcac 	bl	975c <outs>
    2e04:	2800      	cmp	r0, #0
    2e06:	f2c0 814f 	blt.w	30a8 <cbvprintf+0x9c8>
    2e0a:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    2e0c:	46c2      	mov	sl, r8
			continue;
    2e0e:	e46f      	b.n	26f0 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    2e10:	4629      	mov	r1, r5
    2e12:	2025      	movs	r0, #37	; 0x25
    2e14:	47b0      	blx	r6
    2e16:	2800      	cmp	r0, #0
    2e18:	f2c0 8146 	blt.w	30a8 <cbvprintf+0x9c8>
    2e1c:	3401      	adds	r4, #1
		char sign = 0;
    2e1e:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    2e22:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    2e26:	f04f 0a00 	mov.w	sl, #0
			break;
    2e2a:	e0a7      	b.n	2f7c <cbvprintf+0x89c>
		case 's': {
			bps = (const char *)value->ptr;
    2e2c:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
    2e30:	f1bb 0f00 	cmp.w	fp, #0
    2e34:	db08      	blt.n	2e48 <cbvprintf+0x768>
				len = strnlen(bps, precision);
    2e36:	4659      	mov	r1, fp
    2e38:	4650      	mov	r0, sl
    2e3a:	f007 ff9e 	bl	ad7a <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    2e3e:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
    2e42:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
    2e46:	e099      	b.n	2f7c <cbvprintf+0x89c>
				len = strlen(bps);
    2e48:	4650      	mov	r0, sl
    2e4a:	f7fe fa83 	bl	1354 <strlen>
    2e4e:	e7f6      	b.n	2e3e <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    2e50:	9b06      	ldr	r3, [sp, #24]
    2e52:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
    2e56:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
    2e5a:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
    2e5e:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
    2e62:	e08b      	b.n	2f7c <cbvprintf+0x89c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    2e64:	f019 0f08 	tst.w	r9, #8
    2e68:	d105      	bne.n	2e76 <cbvprintf+0x796>
				sign = '+';
			} else if (conv->flag_space) {
    2e6a:	f019 0910 	ands.w	r9, r9, #16
    2e6e:	d004      	beq.n	2e7a <cbvprintf+0x79a>
				sign = ' ';
    2e70:	f04f 0920 	mov.w	r9, #32
    2e74:	e001      	b.n	2e7a <cbvprintf+0x79a>
				sign = '+';
    2e76:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    2e7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
    2e7e:	2a00      	cmp	r2, #0
    2e80:	f173 0100 	sbcs.w	r1, r3, #0
    2e84:	db02      	blt.n	2e8c <cbvprintf+0x7ac>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    2e86:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2e8a:	e009      	b.n	2ea0 <cbvprintf+0x7c0>
				value->uint = (uint_value_type)-sint;
    2e8c:	4252      	negs	r2, r2
    2e8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2e92:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
    2e96:	f04f 092d 	mov.w	r9, #45	; 0x2d
    2e9a:	e001      	b.n	2ea0 <cbvprintf+0x7c0>
		switch (conv->specifier) {
    2e9c:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    2ea0:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    2ea4:	9300      	str	r3, [sp, #0]
    2ea6:	ab0c      	add	r3, sp, #48	; 0x30
    2ea8:	aa08      	add	r2, sp, #32
    2eaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    2eae:	f7ff fba7 	bl	2600 <encode_uint>
    2eb2:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    2eb4:	f1bb 0f00 	cmp.w	fp, #0
    2eb8:	f2c0 8090 	blt.w	2fdc <cbvprintf+0x8fc>
				size_t len = bpe - bps;
    2ebc:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    2ec0:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    2ec4:	f89d 2020 	ldrb.w	r2, [sp, #32]
    2ec8:	f36f 1286 	bfc	r2, #6, #1
    2ecc:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    2ed0:	459b      	cmp	fp, r3
    2ed2:	f240 8086 	bls.w	2fe2 <cbvprintf+0x902>
					conv->pad0_value = precision - (int)len;
    2ed6:	ebab 0303 	sub.w	r3, fp, r3
    2eda:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
    2edc:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    2ee0:	e04c      	b.n	2f7c <cbvprintf+0x89c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    2ee2:	9806      	ldr	r0, [sp, #24]
    2ee4:	b930      	cbnz	r0, 2ef4 <cbvprintf+0x814>
		char sign = 0;
    2ee6:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    2eea:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 30b0 <cbvprintf+0x9d0>
			bps = "(nil)";
    2eee:	f1ab 0a05 	sub.w	sl, fp, #5
    2ef2:	e043      	b.n	2f7c <cbvprintf+0x89c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2ef4:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    2ef8:	9300      	str	r3, [sp, #0]
    2efa:	ab0c      	add	r3, sp, #48	; 0x30
    2efc:	aa08      	add	r2, sp, #32
    2efe:	2100      	movs	r1, #0
    2f00:	f7ff fb7e 	bl	2600 <encode_uint>
    2f04:	4682      	mov	sl, r0
				conv->altform_0c = true;
    2f06:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    2f0a:	f043 0310 	orr.w	r3, r3, #16
    2f0e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
    2f12:	2378      	movs	r3, #120	; 0x78
    2f14:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
    2f18:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
    2f1c:	e7ca      	b.n	2eb4 <cbvprintf+0x7d4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    2f1e:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
    2f20:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2f24:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    2f28:	2b07      	cmp	r3, #7
    2f2a:	d806      	bhi.n	2f3a <cbvprintf+0x85a>
    2f2c:	e8df f003 	tbb	[pc, r3]
    2f30:	100e0c04 	.word	0x100e0c04
    2f34:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
    2f38:	6014      	str	r4, [r2, #0]
		char sign = 0;
    2f3a:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    2f3e:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    2f42:	f04f 0a00 	mov.w	sl, #0
}
    2f46:	e019      	b.n	2f7c <cbvprintf+0x89c>
		*(signed char *)dp = (signed char)count;
    2f48:	7014      	strb	r4, [r2, #0]
		break;
    2f4a:	e7f6      	b.n	2f3a <cbvprintf+0x85a>
		*(short *)dp = (short)count;
    2f4c:	8014      	strh	r4, [r2, #0]
		break;
    2f4e:	e7f4      	b.n	2f3a <cbvprintf+0x85a>
		*(long *)dp = (long)count;
    2f50:	6014      	str	r4, [r2, #0]
		break;
    2f52:	e7f2      	b.n	2f3a <cbvprintf+0x85a>
		*(long long *)dp = (long long)count;
    2f54:	4620      	mov	r0, r4
    2f56:	17e1      	asrs	r1, r4, #31
    2f58:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    2f5c:	e7ed      	b.n	2f3a <cbvprintf+0x85a>
		*(intmax_t *)dp = (intmax_t)count;
    2f5e:	4620      	mov	r0, r4
    2f60:	17e1      	asrs	r1, r4, #31
    2f62:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    2f66:	e7e8      	b.n	2f3a <cbvprintf+0x85a>
		*(size_t *)dp = (size_t)count;
    2f68:	6014      	str	r4, [r2, #0]
		break;
    2f6a:	e7e6      	b.n	2f3a <cbvprintf+0x85a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    2f6c:	6014      	str	r4, [r2, #0]
		break;
    2f6e:	e7e4      	b.n	2f3a <cbvprintf+0x85a>
		switch (conv->specifier) {
    2f70:	f8dd 9008 	ldr.w	r9, [sp, #8]
    2f74:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    2f78:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    2f7c:	f1ba 0f00 	cmp.w	sl, #0
    2f80:	f000 808e 	beq.w	30a0 <cbvprintf+0x9c0>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    2f84:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
    2f88:	f1b9 0f00 	cmp.w	r9, #0
    2f8c:	d000      	beq.n	2f90 <cbvprintf+0x8b0>
			nj_len += 1U;
    2f8e:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    2f90:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    2f94:	f011 0f10 	tst.w	r1, #16
    2f98:	d026      	beq.n	2fe8 <cbvprintf+0x908>
			nj_len += 2U;
    2f9a:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    2f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2f9e:	4413      	add	r3, r2
		if (conv->pad_fp) {
    2fa0:	f011 0f40 	tst.w	r1, #64	; 0x40
    2fa4:	d001      	beq.n	2faa <cbvprintf+0x8ca>
			nj_len += conv->pad0_pre_exp;
    2fa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2fa8:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    2faa:	2f00      	cmp	r7, #0
    2fac:	dd32      	ble.n	3014 <cbvprintf+0x934>
			width -= (int)nj_len;
    2fae:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    2fb0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2fb4:	f013 0f04 	tst.w	r3, #4
    2fb8:	d12c      	bne.n	3014 <cbvprintf+0x934>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    2fba:	f013 0f40 	tst.w	r3, #64	; 0x40
    2fbe:	d018      	beq.n	2ff2 <cbvprintf+0x912>
					if (sign != 0) {
    2fc0:	f1b9 0f00 	cmp.w	r9, #0
    2fc4:	d018      	beq.n	2ff8 <cbvprintf+0x918>
						OUTC(sign);
    2fc6:	4629      	mov	r1, r5
    2fc8:	4648      	mov	r0, r9
    2fca:	47b0      	blx	r6
    2fcc:	2800      	cmp	r0, #0
    2fce:	db6b      	blt.n	30a8 <cbvprintf+0x9c8>
    2fd0:	3401      	adds	r4, #1
						sign = 0;
    2fd2:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    2fd6:	2330      	movs	r3, #48	; 0x30
    2fd8:	9302      	str	r3, [sp, #8]
    2fda:	e00f      	b.n	2ffc <cbvprintf+0x91c>
		const char *bpe = buf + sizeof(buf);
    2fdc:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    2fe0:	e7cc      	b.n	2f7c <cbvprintf+0x89c>
    2fe2:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    2fe6:	e7c9      	b.n	2f7c <cbvprintf+0x89c>
		} else if (conv->altform_0) {
    2fe8:	f011 0f08 	tst.w	r1, #8
    2fec:	d0d6      	beq.n	2f9c <cbvprintf+0x8bc>
			nj_len += 1U;
    2fee:	3201      	adds	r2, #1
    2ff0:	e7d4      	b.n	2f9c <cbvprintf+0x8bc>
				char pad = ' ';
    2ff2:	2320      	movs	r3, #32
    2ff4:	9302      	str	r3, [sp, #8]
    2ff6:	e001      	b.n	2ffc <cbvprintf+0x91c>
					pad = '0';
    2ff8:	2330      	movs	r3, #48	; 0x30
    2ffa:	9302      	str	r3, [sp, #8]
    2ffc:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    2ffe:	1e5f      	subs	r7, r3, #1
    3000:	2b00      	cmp	r3, #0
    3002:	dd07      	ble.n	3014 <cbvprintf+0x934>
					OUTC(pad);
    3004:	4629      	mov	r1, r5
    3006:	9802      	ldr	r0, [sp, #8]
    3008:	47b0      	blx	r6
    300a:	2800      	cmp	r0, #0
    300c:	db4c      	blt.n	30a8 <cbvprintf+0x9c8>
    300e:	3401      	adds	r4, #1
				while (width-- > 0) {
    3010:	463b      	mov	r3, r7
    3012:	e7f4      	b.n	2ffe <cbvprintf+0x91e>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    3014:	f1b9 0f00 	cmp.w	r9, #0
    3018:	d005      	beq.n	3026 <cbvprintf+0x946>
			OUTC(sign);
    301a:	4629      	mov	r1, r5
    301c:	4648      	mov	r0, r9
    301e:	47b0      	blx	r6
    3020:	2800      	cmp	r0, #0
    3022:	db41      	blt.n	30a8 <cbvprintf+0x9c8>
    3024:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    3026:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    302a:	f3c3 1200 	ubfx	r2, r3, #4, #1
    302e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    3032:	4313      	orrs	r3, r2
    3034:	d005      	beq.n	3042 <cbvprintf+0x962>
				OUTC('0');
    3036:	4629      	mov	r1, r5
    3038:	2030      	movs	r0, #48	; 0x30
    303a:	47b0      	blx	r6
    303c:	2800      	cmp	r0, #0
    303e:	db33      	blt.n	30a8 <cbvprintf+0x9c8>
    3040:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    3042:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3046:	f013 0f10 	tst.w	r3, #16
    304a:	d006      	beq.n	305a <cbvprintf+0x97a>
				OUTC(conv->specifier);
    304c:	4629      	mov	r1, r5
    304e:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    3052:	47b0      	blx	r6
    3054:	2800      	cmp	r0, #0
    3056:	db27      	blt.n	30a8 <cbvprintf+0x9c8>
    3058:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    305a:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    305c:	f103 39ff 	add.w	r9, r3, #4294967295
    3060:	2b00      	cmp	r3, #0
    3062:	dd07      	ble.n	3074 <cbvprintf+0x994>
				OUTC('0');
    3064:	4629      	mov	r1, r5
    3066:	2030      	movs	r0, #48	; 0x30
    3068:	47b0      	blx	r6
    306a:	2800      	cmp	r0, #0
    306c:	db1c      	blt.n	30a8 <cbvprintf+0x9c8>
    306e:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    3070:	464b      	mov	r3, r9
    3072:	e7f3      	b.n	305c <cbvprintf+0x97c>
			}

			OUTS(bps, bpe);
    3074:	465b      	mov	r3, fp
    3076:	4652      	mov	r2, sl
    3078:	4629      	mov	r1, r5
    307a:	4630      	mov	r0, r6
    307c:	f006 fb6e 	bl	975c <outs>
    3080:	2800      	cmp	r0, #0
    3082:	db11      	blt.n	30a8 <cbvprintf+0x9c8>
    3084:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    3086:	2f00      	cmp	r7, #0
    3088:	dd07      	ble.n	309a <cbvprintf+0x9ba>
			OUTC(' ');
    308a:	4629      	mov	r1, r5
    308c:	2020      	movs	r0, #32
    308e:	47b0      	blx	r6
    3090:	2800      	cmp	r0, #0
    3092:	db09      	blt.n	30a8 <cbvprintf+0x9c8>
    3094:	3401      	adds	r4, #1
			--width;
    3096:	3f01      	subs	r7, #1
    3098:	e7f5      	b.n	3086 <cbvprintf+0x9a6>
		fp = extract_conversion(conv, sp);
    309a:	46c2      	mov	sl, r8
    309c:	f7ff bb28 	b.w	26f0 <cbvprintf+0x10>
    30a0:	46c2      	mov	sl, r8
    30a2:	f7ff bb25 	b.w	26f0 <cbvprintf+0x10>
		}
	}

	return count;
    30a6:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    30a8:	b013      	add	sp, #76	; 0x4c
    30aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    30ae:	bf00      	nop
    30b0:	0000b181 	.word	0x0000b181

000030b4 <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    30b4:	4b05      	ldr	r3, [pc, #20]	; (30cc <is_rodata+0x18>)
    30b6:	4298      	cmp	r0, r3
    30b8:	d304      	bcc.n	30c4 <is_rodata+0x10>
    30ba:	4b05      	ldr	r3, [pc, #20]	; (30d0 <is_rodata+0x1c>)
    30bc:	4298      	cmp	r0, r3
    30be:	d303      	bcc.n	30c8 <is_rodata+0x14>
    30c0:	2000      	movs	r0, #0
    30c2:	4770      	bx	lr
    30c4:	2000      	movs	r0, #0
    30c6:	4770      	bx	lr
    30c8:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
    30ca:	4770      	bx	lr
    30cc:	0000ada0 	.word	0x0000ada0
    30d0:	0000bc4c 	.word	0x0000bc4c

000030d4 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
    30d4:	b508      	push	{r3, lr}
	proc_tid = process_tid;
    30d6:	4b06      	ldr	r3, [pc, #24]	; (30f0 <thread_set+0x1c>)
    30d8:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    30da:	b118      	cbz	r0, 30e4 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    30dc:	4b05      	ldr	r3, [pc, #20]	; (30f4 <thread_set+0x20>)
    30de:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    30e0:	2b09      	cmp	r3, #9
    30e2:	dc00      	bgt.n	30e6 <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
    30e4:	bd08      	pop	{r3, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    30e6:	4804      	ldr	r0, [pc, #16]	; (30f8 <thread_set+0x24>)
    30e8:	f004 fe50 	bl	7d8c <z_impl_k_sem_give>
}
    30ec:	e7fa      	b.n	30e4 <thread_set+0x10>
    30ee:	bf00      	nop
    30f0:	20000410 	.word	0x20000410
    30f4:	200003e0 	.word	0x200003e0
    30f8:	20000118 	.word	0x20000118

000030fc <log_process_thread_timer_expiry_fn>:

	return 0;
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    30fc:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    30fe:	4802      	ldr	r0, [pc, #8]	; (3108 <log_process_thread_timer_expiry_fn+0xc>)
    3100:	f004 fe44 	bl	7d8c <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
    3104:	bd08      	pop	{r3, pc}
    3106:	bf00      	nop
    3108:	20000118 	.word	0x20000118

0000310c <next_pending>:
{
    310c:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
    310e:	4803      	ldr	r0, [pc, #12]	; (311c <next_pending+0x10>)
    3110:	f006 fb4d 	bl	97ae <log_list_head_peek>
}
    3114:	3800      	subs	r0, #0
    3116:	bf18      	it	ne
    3118:	2001      	movne	r0, #1
    311a:	bd08      	pop	{r3, pc}
    311c:	200003ec 	.word	0x200003ec

00003120 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    3120:	b530      	push	{r4, r5, lr}
    3122:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    3124:	2200      	movs	r2, #0
    3126:	490f      	ldr	r1, [pc, #60]	; (3164 <enable_logger+0x44>)
    3128:	480f      	ldr	r0, [pc, #60]	; (3168 <enable_logger+0x48>)
    312a:	f007 fdd5 	bl	acd8 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    312e:	4d0f      	ldr	r5, [pc, #60]	; (316c <enable_logger+0x4c>)
    3130:	2200      	movs	r2, #0
    3132:	2300      	movs	r3, #0
    3134:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3138:	2400      	movs	r4, #0
    313a:	9404      	str	r4, [sp, #16]
    313c:	230e      	movs	r3, #14
    313e:	9303      	str	r3, [sp, #12]
    3140:	9402      	str	r4, [sp, #8]
    3142:	9401      	str	r4, [sp, #4]
    3144:	9400      	str	r4, [sp, #0]
    3146:	4b0a      	ldr	r3, [pc, #40]	; (3170 <enable_logger+0x50>)
    3148:	f44f 7240 	mov.w	r2, #768	; 0x300
    314c:	4909      	ldr	r1, [pc, #36]	; (3174 <enable_logger+0x54>)
    314e:	4628      	mov	r0, r5
    3150:	f007 fbc2 	bl	a8d8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    3154:	4908      	ldr	r1, [pc, #32]	; (3178 <enable_logger+0x58>)
    3156:	4628      	mov	r0, r5
    3158:	f004 fc5c 	bl	7a14 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    315c:	4620      	mov	r0, r4
    315e:	b009      	add	sp, #36	; 0x24
    3160:	bd30      	pop	{r4, r5, pc}
    3162:	bf00      	nop
    3164:	000030fd 	.word	0x000030fd
    3168:	20000128 	.word	0x20000128
    316c:	20000160 	.word	0x20000160
    3170:	00003881 	.word	0x00003881
    3174:	20000a40 	.word	0x20000a40
    3178:	0000b184 	.word	0x0000b184

0000317c <z_log_get_s_mask>:
{
    317c:	b470      	push	{r4, r5, r6}
    317e:	4603      	mov	r3, r0
	uint32_t mask = 0U;
    3180:	2000      	movs	r0, #0
	uint32_t arg = 0U;
    3182:	4605      	mov	r5, r0
	bool arm = false;
    3184:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
    3186:	e001      	b.n	318c <z_log_get_s_mask+0x10>
			arm = !arm;
    3188:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
    318c:	f813 2b01 	ldrb.w	r2, [r3], #1
    3190:	b19a      	cbz	r2, 31ba <z_log_get_s_mask+0x3e>
    3192:	428d      	cmp	r5, r1
    3194:	d211      	bcs.n	31ba <z_log_get_s_mask+0x3e>
		if (curr == '%') {
    3196:	2a25      	cmp	r2, #37	; 0x25
    3198:	d0f6      	beq.n	3188 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
    319a:	2c00      	cmp	r4, #0
    319c:	d0f6      	beq.n	318c <z_log_get_s_mask+0x10>
    319e:	4e08      	ldr	r6, [pc, #32]	; (31c0 <z_log_get_s_mask+0x44>)
    31a0:	5d96      	ldrb	r6, [r2, r6]
    31a2:	f016 0f03 	tst.w	r6, #3
    31a6:	d0f1      	beq.n	318c <z_log_get_s_mask+0x10>
			if (curr == 's') {
    31a8:	2a73      	cmp	r2, #115	; 0x73
    31aa:	d002      	beq.n	31b2 <z_log_get_s_mask+0x36>
			arg++;
    31ac:	3501      	adds	r5, #1
			arm = false;
    31ae:	2400      	movs	r4, #0
    31b0:	e7ec      	b.n	318c <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
    31b2:	2201      	movs	r2, #1
    31b4:	40aa      	lsls	r2, r5
    31b6:	4310      	orrs	r0, r2
    31b8:	e7f8      	b.n	31ac <z_log_get_s_mask+0x30>
}
    31ba:	bc70      	pop	{r4, r5, r6}
    31bc:	4770      	bx	lr
    31be:	bf00      	nop
    31c0:	0000bb4a 	.word	0x0000bb4a

000031c4 <log_init>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    31c4:	4b18      	ldr	r3, [pc, #96]	; (3228 <log_init+0x64>)
    31c6:	f3bf 8f5b 	dmb	ish
    31ca:	e853 2f00 	ldrex	r2, [r3]
    31ce:	1c51      	adds	r1, r2, #1
    31d0:	e843 1000 	strex	r0, r1, [r3]
    31d4:	2800      	cmp	r0, #0
    31d6:	d1f8      	bne.n	31ca <log_init+0x6>
    31d8:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    31dc:	bb1a      	cbnz	r2, 3226 <log_init+0x62>
{
    31de:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
    31e0:	2400      	movs	r4, #0
    31e2:	e009      	b.n	31f8 <log_init+0x34>
					   backend->cb->ctx,
    31e4:	4b11      	ldr	r3, [pc, #68]	; (322c <log_init+0x68>)
    31e6:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    31ea:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    31ec:	2204      	movs	r2, #4
    31ee:	6819      	ldr	r1, [r3, #0]
    31f0:	4628      	mov	r0, r5
    31f2:	f000 fb89 	bl	3908 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    31f6:	3401      	adds	r4, #1
    31f8:	4b0d      	ldr	r3, [pc, #52]	; (3230 <log_init+0x6c>)
    31fa:	4a0c      	ldr	r2, [pc, #48]	; (322c <log_init+0x68>)
    31fc:	1a9b      	subs	r3, r3, r2
    31fe:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    3202:	da0f      	bge.n	3224 <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
    3204:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
    3206:	4d09      	ldr	r5, [pc, #36]	; (322c <log_init+0x68>)
    3208:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    320c:	7b2b      	ldrb	r3, [r5, #12]
    320e:	2b00      	cmp	r3, #0
    3210:	d0f1      	beq.n	31f6 <log_init+0x32>
			if (backend->api->init != NULL) {
    3212:	0123      	lsls	r3, r4, #4
    3214:	4a05      	ldr	r2, [pc, #20]	; (322c <log_init+0x68>)
    3216:	58d3      	ldr	r3, [r2, r3]
    3218:	699b      	ldr	r3, [r3, #24]
    321a:	2b00      	cmp	r3, #0
    321c:	d0e2      	beq.n	31e4 <log_init+0x20>
				backend->api->init(backend);
    321e:	4628      	mov	r0, r5
    3220:	4798      	blx	r3
    3222:	e7df      	b.n	31e4 <log_init+0x20>
}
    3224:	bd70      	pop	{r4, r5, r6, pc}
    3226:	4770      	bx	lr
    3228:	200003e8 	.word	0x200003e8
    322c:	0000afb8 	.word	0x0000afb8
    3230:	0000afc8 	.word	0x0000afc8

00003234 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    3234:	b138      	cbz	r0, 3246 <log_set_timestamp_func+0x12>
{
    3236:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    3238:	4a04      	ldr	r2, [pc, #16]	; (324c <log_set_timestamp_func+0x18>)
    323a:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
    323c:	4608      	mov	r0, r1
    323e:	f000 fddf 	bl	3e00 <log_output_timestamp_freq_set>
	return 0;
    3242:	2000      	movs	r0, #0
}
    3244:	bd08      	pop	{r3, pc}
		return -EINVAL;
    3246:	f06f 0015 	mvn.w	r0, #21
}
    324a:	4770      	bx	lr
    324c:	20000024 	.word	0x20000024

00003250 <log_core_init>:
{
    3250:	b508      	push	{r3, lr}
	panic_mode = false;
    3252:	2300      	movs	r3, #0
    3254:	4a0a      	ldr	r2, [pc, #40]	; (3280 <log_core_init+0x30>)
    3256:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    3258:	4a0a      	ldr	r2, [pc, #40]	; (3284 <log_core_init+0x34>)
    325a:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    325c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    3260:	4809      	ldr	r0, [pc, #36]	; (3288 <log_core_init+0x38>)
    3262:	f7ff ffe7 	bl	3234 <log_set_timestamp_func>
		log_msg_pool_init();
    3266:	f000 fb71 	bl	394c <log_msg_pool_init>
		log_list_init(&list);
    326a:	4808      	ldr	r0, [pc, #32]	; (328c <log_core_init+0x3c>)
    326c:	f006 fa91 	bl	9792 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    3270:	2304      	movs	r3, #4
    3272:	2228      	movs	r2, #40	; 0x28
    3274:	4906      	ldr	r1, [pc, #24]	; (3290 <log_core_init+0x40>)
    3276:	4807      	ldr	r0, [pc, #28]	; (3294 <log_core_init+0x44>)
    3278:	f007 facb 	bl	a812 <k_mem_slab_init>
}
    327c:	bd08      	pop	{r3, pc}
    327e:	bf00      	nop
    3280:	20000a29 	.word	0x20000a29
    3284:	200003e4 	.word	0x200003e4
    3288:	000097c7 	.word	0x000097c7
    328c:	200003ec 	.word	0x200003ec
    3290:	20002700 	.word	0x20002700
    3294:	200003f4 	.word	0x200003f4

00003298 <get_msg>:
{
    3298:	b510      	push	{r4, lr}
    329a:	f04f 0320 	mov.w	r3, #32
    329e:	f3ef 8411 	mrs	r4, BASEPRI
    32a2:	f383 8812 	msr	BASEPRI_MAX, r3
    32a6:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
    32aa:	4804      	ldr	r0, [pc, #16]	; (32bc <get_msg+0x24>)
    32ac:	f006 fa81 	bl	97b2 <log_list_head_get>
	__asm__ volatile(
    32b0:	f384 8811 	msr	BASEPRI, r4
    32b4:	f3bf 8f6f 	isb	sy
}
    32b8:	bd10      	pop	{r4, pc}
    32ba:	bf00      	nop
    32bc:	200003ec 	.word	0x200003ec

000032c0 <z_log_notify_backend_enabled>:
{
    32c0:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    32c2:	4b05      	ldr	r3, [pc, #20]	; (32d8 <z_log_notify_backend_enabled+0x18>)
    32c4:	781b      	ldrb	r3, [r3, #0]
    32c6:	b11b      	cbz	r3, 32d0 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
    32c8:	4b03      	ldr	r3, [pc, #12]	; (32d8 <z_log_notify_backend_enabled+0x18>)
    32ca:	2201      	movs	r2, #1
    32cc:	701a      	strb	r2, [r3, #0]
}
    32ce:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    32d0:	4802      	ldr	r0, [pc, #8]	; (32dc <z_log_notify_backend_enabled+0x1c>)
    32d2:	f004 fd5b 	bl	7d8c <z_impl_k_sem_give>
}
    32d6:	e7f7      	b.n	32c8 <z_log_notify_backend_enabled+0x8>
    32d8:	20000a28 	.word	0x20000a28
    32dc:	20000118 	.word	0x20000118

000032e0 <z_log_dropped>:
    32e0:	4b0c      	ldr	r3, [pc, #48]	; (3314 <z_log_dropped+0x34>)
    32e2:	f3bf 8f5b 	dmb	ish
    32e6:	e853 2f00 	ldrex	r2, [r3]
    32ea:	3201      	adds	r2, #1
    32ec:	e843 2100 	strex	r1, r2, [r3]
    32f0:	2900      	cmp	r1, #0
    32f2:	d1f8      	bne.n	32e6 <z_log_dropped+0x6>
    32f4:	f3bf 8f5b 	dmb	ish
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    32f8:	4b07      	ldr	r3, [pc, #28]	; (3318 <z_log_dropped+0x38>)
    32fa:	f3bf 8f5b 	dmb	ish
    32fe:	e853 2f00 	ldrex	r2, [r3]
    3302:	3a01      	subs	r2, #1
    3304:	e843 2100 	strex	r1, r2, [r3]
    3308:	2900      	cmp	r1, #0
    330a:	d1f8      	bne.n	32fe <z_log_dropped+0x1e>
    330c:	f3bf 8f5b 	dmb	ish
}
    3310:	4770      	bx	lr
    3312:	bf00      	nop
    3314:	200003e4 	.word	0x200003e4
    3318:	200003e0 	.word	0x200003e0

0000331c <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    331c:	4b06      	ldr	r3, [pc, #24]	; (3338 <z_log_dropped_read_and_clear+0x1c>)
}
    331e:	2000      	movs	r0, #0
    3320:	4602      	mov	r2, r0
    3322:	f3bf 8f5b 	dmb	ish
    3326:	e853 0f00 	ldrex	r0, [r3]
    332a:	e843 2100 	strex	r1, r2, [r3]
    332e:	2900      	cmp	r1, #0
    3330:	d1f9      	bne.n	3326 <z_log_dropped_read_and_clear+0xa>
    3332:	f3bf 8f5b 	dmb	ish
    3336:	4770      	bx	lr
    3338:	200003e4 	.word	0x200003e4

0000333c <dropped_notify>:
{
    333c:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    333e:	f7ff ffed 	bl	331c <z_log_dropped_read_and_clear>
    3342:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
    3344:	2400      	movs	r4, #0
    3346:	e000      	b.n	334a <dropped_notify+0xe>
    3348:	3401      	adds	r4, #1
    334a:	4b0b      	ldr	r3, [pc, #44]	; (3378 <dropped_notify+0x3c>)
    334c:	4a0b      	ldr	r2, [pc, #44]	; (337c <dropped_notify+0x40>)
    334e:	1a9b      	subs	r3, r3, r2
    3350:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    3354:	da0f      	bge.n	3376 <dropped_notify+0x3a>
    3356:	4809      	ldr	r0, [pc, #36]	; (337c <dropped_notify+0x40>)
    3358:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    335c:	6843      	ldr	r3, [r0, #4]
    335e:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    3360:	2b00      	cmp	r3, #0
    3362:	d0f1      	beq.n	3348 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
    3364:	0123      	lsls	r3, r4, #4
    3366:	4a05      	ldr	r2, [pc, #20]	; (337c <dropped_notify+0x40>)
    3368:	58d3      	ldr	r3, [r2, r3]
    336a:	691b      	ldr	r3, [r3, #16]
    336c:	2b00      	cmp	r3, #0
    336e:	d0eb      	beq.n	3348 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
    3370:	4629      	mov	r1, r5
    3372:	4798      	blx	r3
    3374:	e7e8      	b.n	3348 <dropped_notify+0xc>
}
    3376:	bd38      	pop	{r3, r4, r5, pc}
    3378:	0000afc8 	.word	0x0000afc8
    337c:	0000afb8 	.word	0x0000afb8

00003380 <z_log_dropped_pending>:
	return dropped_cnt > 0;
    3380:	4b03      	ldr	r3, [pc, #12]	; (3390 <z_log_dropped_pending+0x10>)
    3382:	6818      	ldr	r0, [r3, #0]
}
    3384:	2800      	cmp	r0, #0
    3386:	bfd4      	ite	le
    3388:	2000      	movle	r0, #0
    338a:	2001      	movgt	r0, #1
    338c:	4770      	bx	lr
    338e:	bf00      	nop
    3390:	200003e4 	.word	0x200003e4

00003394 <z_log_strdup>:
{
    3394:	b570      	push	{r4, r5, r6, lr}
    3396:	b082      	sub	sp, #8
    3398:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
    339a:	f7ff fe8b 	bl	30b4 <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    339e:	bb10      	cbnz	r0, 33e6 <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    33a0:	2200      	movs	r2, #0
    33a2:	2300      	movs	r3, #0
    33a4:	a901      	add	r1, sp, #4
    33a6:	4811      	ldr	r0, [pc, #68]	; (33ec <z_log_strdup+0x58>)
    33a8:	f004 fade 	bl	7968 <k_mem_slab_alloc>
	if (err != 0) {
    33ac:	b108      	cbz	r0, 33b2 <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
    33ae:	4c10      	ldr	r4, [pc, #64]	; (33f0 <z_log_strdup+0x5c>)
    33b0:	e019      	b.n	33e6 <z_log_strdup+0x52>
	(void)atomic_set(&dup->refcount, 1);
    33b2:	9b01      	ldr	r3, [sp, #4]
    33b4:	2201      	movs	r2, #1
    33b6:	f3bf 8f5b 	dmb	ish
    33ba:	e853 1f00 	ldrex	r1, [r3]
    33be:	e843 2000 	strex	r0, r2, [r3]
    33c2:	2800      	cmp	r0, #0
    33c4:	d1f9      	bne.n	33ba <z_log_strdup+0x26>
    33c6:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    33ca:	9d01      	ldr	r5, [sp, #4]
    33cc:	1d2e      	adds	r6, r5, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    33ce:	221f      	movs	r2, #31
    33d0:	4621      	mov	r1, r4
    33d2:	4630      	mov	r0, r6
    33d4:	f007 fcbe 	bl	ad54 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    33d8:	237e      	movs	r3, #126	; 0x7e
    33da:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    33de:	2300      	movs	r3, #0
    33e0:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
	return dup->buf;
    33e4:	4634      	mov	r4, r6
}
    33e6:	4620      	mov	r0, r4
    33e8:	b002      	add	sp, #8
    33ea:	bd70      	pop	{r4, r5, r6, pc}
    33ec:	200003f4 	.word	0x200003f4
    33f0:	0000b18c 	.word	0x0000b18c

000033f4 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    33f4:	b138      	cbz	r0, 3406 <log_is_strdup+0x12>
    33f6:	4a07      	ldr	r2, [pc, #28]	; (3414 <log_is_strdup+0x20>)
    33f8:	4290      	cmp	r0, r2
    33fa:	d306      	bcc.n	340a <log_is_strdup+0x16>
    33fc:	32a0      	adds	r2, #160	; 0xa0
    33fe:	4290      	cmp	r0, r2
    3400:	d305      	bcc.n	340e <log_is_strdup+0x1a>
    3402:	2000      	movs	r0, #0
    3404:	4770      	bx	lr
    3406:	2000      	movs	r0, #0
    3408:	4770      	bx	lr
    340a:	2000      	movs	r0, #0
    340c:	4770      	bx	lr
    340e:	2001      	movs	r0, #1
}
    3410:	4770      	bx	lr
    3412:	bf00      	nop
    3414:	20002700 	.word	0x20002700

00003418 <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    3418:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
    341a:	f013 0f01 	tst.w	r3, #1
    341e:	d000      	beq.n	3422 <detect_missed_strdup+0xa>
    3420:	4770      	bx	lr
{
    3422:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3426:	b083      	sub	sp, #12
    3428:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
    342a:	f006 fa67 	bl	98fc <log_msg_str_get>
    342e:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    3430:	4630      	mov	r0, r6
    3432:	f006 fa4e 	bl	98d2 <log_msg_nargs_get>
    3436:	4601      	mov	r1, r0
    3438:	4638      	mov	r0, r7
    343a:	f7ff fe9f 	bl	317c <z_log_get_s_mask>
    343e:	4605      	mov	r5, r0
	while (mask) {
    3440:	e004      	b.n	344c <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
    3442:	2301      	movs	r3, #1
    3444:	fa03 f404 	lsl.w	r4, r3, r4
    3448:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
    344c:	b36d      	cbz	r5, 34aa <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
    344e:	fab5 f485 	clz	r4, r5
    3452:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    3456:	4621      	mov	r1, r4
    3458:	4630      	mov	r0, r6
    345a:	f006 fa3d 	bl	98d8 <log_msg_arg_get>
    345e:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
    3460:	f7ff fe28 	bl	30b4 <is_rodata>
    3464:	2800      	cmp	r0, #0
    3466:	d1ec      	bne.n	3442 <detect_missed_strdup+0x2a>
    3468:	4648      	mov	r0, r9
    346a:	f7ff ffc3 	bl	33f4 <log_is_strdup>
    346e:	2800      	cmp	r0, #0
    3470:	d1e7      	bne.n	3442 <detect_missed_strdup+0x2a>
    3472:	4b0f      	ldr	r3, [pc, #60]	; (34b0 <detect_missed_strdup+0x98>)
    3474:	4599      	cmp	r9, r3
    3476:	d0e4      	beq.n	3442 <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
    3478:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
    347a:	f3c1 1189 	ubfx	r1, r1, #6, #10
    347e:	f000 fa33 	bl	38e8 <log_source_name_get>
    3482:	4602      	mov	r2, r0
    3484:	4b0b      	ldr	r3, [pc, #44]	; (34b4 <detect_missed_strdup+0x9c>)
    3486:	490c      	ldr	r1, [pc, #48]	; (34b8 <detect_missed_strdup+0xa0>)
    3488:	1a5b      	subs	r3, r3, r1
    348a:	08db      	lsrs	r3, r3, #3
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    348c:	2101      	movs	r1, #1
    348e:	f361 0802 	bfi	r8, r1, #0, #3
    3492:	f36f 08c5 	bfc	r8, #3, #3
    3496:	f363 188f 	bfi	r8, r3, #6, #10
    349a:	f8ad 8000 	strh.w	r8, [sp]
    349e:	463b      	mov	r3, r7
    34a0:	4621      	mov	r1, r4
    34a2:	4806      	ldr	r0, [pc, #24]	; (34bc <detect_missed_strdup+0xa4>)
    34a4:	f000 f8b0 	bl	3608 <log_3>
    34a8:	e7cb      	b.n	3442 <detect_missed_strdup+0x2a>
}
    34aa:	b003      	add	sp, #12
    34ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    34b0:	0000b18c 	.word	0x0000b18c
    34b4:	0000af88 	.word	0x0000af88
    34b8:	0000af70 	.word	0x0000af70
    34bc:	0000b1a8 	.word	0x0000b1a8

000034c0 <msg_process>:
{
    34c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34c2:	4606      	mov	r6, r0
	if (!bypass) {
    34c4:	bb19      	cbnz	r1, 350e <msg_process+0x4e>
		    !panic_mode) {
    34c6:	4b14      	ldr	r3, [pc, #80]	; (3518 <msg_process+0x58>)
    34c8:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
    34ca:	b10b      	cbz	r3, 34d0 <msg_process+0x10>
{
    34cc:	2400      	movs	r4, #0
    34ce:	e003      	b.n	34d8 <msg_process+0x18>
			detect_missed_strdup(msg.msg);
    34d0:	f7ff ffa2 	bl	3418 <detect_missed_strdup>
    34d4:	e7fa      	b.n	34cc <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
    34d6:	3401      	adds	r4, #1
    34d8:	4b10      	ldr	r3, [pc, #64]	; (351c <msg_process+0x5c>)
    34da:	4a11      	ldr	r2, [pc, #68]	; (3520 <msg_process+0x60>)
    34dc:	1a9b      	subs	r3, r3, r2
    34de:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    34e2:	da14      	bge.n	350e <msg_process+0x4e>
	return &__log_backends_start[idx];
    34e4:	4d0e      	ldr	r5, [pc, #56]	; (3520 <msg_process+0x60>)
    34e6:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
    34ea:	686b      	ldr	r3, [r5, #4]
    34ec:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
    34ee:	2b00      	cmp	r3, #0
    34f0:	d0f1      	beq.n	34d6 <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
    34f2:	4631      	mov	r1, r6
    34f4:	4628      	mov	r0, r5
    34f6:	f006 f964 	bl	97c2 <msg_filter_check>
			if (log_backend_is_active(backend) &&
    34fa:	2800      	cmp	r0, #0
    34fc:	d0eb      	beq.n	34d6 <msg_process+0x16>
	backend->api->put(backend, msg);
    34fe:	0127      	lsls	r7, r4, #4
    3500:	4b07      	ldr	r3, [pc, #28]	; (3520 <msg_process+0x60>)
    3502:	59db      	ldr	r3, [r3, r7]
    3504:	685b      	ldr	r3, [r3, #4]
    3506:	4631      	mov	r1, r6
    3508:	4628      	mov	r0, r5
    350a:	4798      	blx	r3
}
    350c:	e7e3      	b.n	34d6 <msg_process+0x16>
			log_msg_put(msg.msg);
    350e:	4630      	mov	r0, r6
    3510:	f006 f9f6 	bl	9900 <log_msg_put>
}
    3514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3516:	bf00      	nop
    3518:	20000a29 	.word	0x20000a29
    351c:	0000afc8 	.word	0x0000afc8
    3520:	0000afb8 	.word	0x0000afb8

00003524 <z_impl_log_process>:
{
    3524:	b510      	push	{r4, lr}
    3526:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    3528:	4b11      	ldr	r3, [pc, #68]	; (3570 <z_impl_log_process+0x4c>)
    352a:	781b      	ldrb	r3, [r3, #0]
    352c:	b903      	cbnz	r3, 3530 <z_impl_log_process+0xc>
    352e:	b1d0      	cbz	r0, 3566 <z_impl_log_process+0x42>
	msg = get_msg();
    3530:	f7ff feb2 	bl	3298 <get_msg>
	if (msg.msg) {
    3534:	4603      	mov	r3, r0
    3536:	b180      	cbz	r0, 355a <z_impl_log_process+0x36>
		if (!bypass) {
    3538:	b95c      	cbnz	r4, 3552 <z_impl_log_process+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    353a:	4a0e      	ldr	r2, [pc, #56]	; (3574 <z_impl_log_process+0x50>)
    353c:	f3bf 8f5b 	dmb	ish
    3540:	e852 1f00 	ldrex	r1, [r2]
    3544:	3901      	subs	r1, #1
    3546:	e842 1000 	strex	r0, r1, [r2]
    354a:	2800      	cmp	r0, #0
    354c:	d1f8      	bne.n	3540 <z_impl_log_process+0x1c>
    354e:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
    3552:	4621      	mov	r1, r4
    3554:	4618      	mov	r0, r3
    3556:	f7ff ffb3 	bl	34c0 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
    355a:	b914      	cbnz	r4, 3562 <z_impl_log_process+0x3e>
    355c:	f7ff ff10 	bl	3380 <z_log_dropped_pending>
    3560:	b910      	cbnz	r0, 3568 <z_impl_log_process+0x44>
	return next_pending();
    3562:	f7ff fdd3 	bl	310c <next_pending>
}
    3566:	bd10      	pop	{r4, pc}
		dropped_notify();
    3568:	f7ff fee8 	bl	333c <dropped_notify>
    356c:	e7f9      	b.n	3562 <z_impl_log_process+0x3e>
    356e:	bf00      	nop
    3570:	20000a28 	.word	0x20000a28
    3574:	200003e0 	.word	0x200003e0

00003578 <z_log_msg_post_finalize>:
{
    3578:	b510      	push	{r4, lr}
    357a:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    357c:	4b1d      	ldr	r3, [pc, #116]	; (35f4 <z_log_msg_post_finalize+0x7c>)
    357e:	f3bf 8f5b 	dmb	ish
    3582:	e853 2f00 	ldrex	r2, [r3]
    3586:	1c51      	adds	r1, r2, #1
    3588:	e843 1000 	strex	r0, r1, [r3]
    358c:	2800      	cmp	r0, #0
    358e:	d1f8      	bne.n	3582 <z_log_msg_post_finalize+0xa>
    3590:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    3594:	4b18      	ldr	r3, [pc, #96]	; (35f8 <z_log_msg_post_finalize+0x80>)
    3596:	781b      	ldrb	r3, [r3, #0]
    3598:	b93b      	cbnz	r3, 35aa <z_log_msg_post_finalize+0x32>
	} else if (proc_tid != NULL && cnt == 0) {
    359a:	4b18      	ldr	r3, [pc, #96]	; (35fc <z_log_msg_post_finalize+0x84>)
    359c:	681b      	ldr	r3, [r3, #0]
    359e:	b103      	cbz	r3, 35a2 <z_log_msg_post_finalize+0x2a>
    35a0:	b19a      	cbz	r2, 35ca <z_log_msg_post_finalize+0x52>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    35a2:	2a0a      	cmp	r2, #10
    35a4:	d01c      	beq.n	35e0 <z_log_msg_post_finalize+0x68>
}
    35a6:	b002      	add	sp, #8
    35a8:	bd10      	pop	{r4, pc}
	__asm__ volatile(
    35aa:	f04f 0320 	mov.w	r3, #32
    35ae:	f3ef 8411 	mrs	r4, BASEPRI
    35b2:	f383 8812 	msr	BASEPRI_MAX, r3
    35b6:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    35ba:	2000      	movs	r0, #0
    35bc:	f7ff ffb2 	bl	3524 <z_impl_log_process>
	__asm__ volatile(
    35c0:	f384 8811 	msr	BASEPRI, r4
    35c4:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    35c8:	e7ed      	b.n	35a6 <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_start(timer, duration, period);
    35ca:	2200      	movs	r2, #0
    35cc:	2300      	movs	r3, #0
    35ce:	e9cd 2300 	strd	r2, r3, [sp]
    35d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    35d6:	2300      	movs	r3, #0
    35d8:	4809      	ldr	r0, [pc, #36]	; (3600 <z_log_msg_post_finalize+0x88>)
    35da:	f005 f9e7 	bl	89ac <z_impl_k_timer_start>
	} else if (proc_tid != NULL && cnt == 0) {
    35de:	e7e2      	b.n	35a6 <z_log_msg_post_finalize+0x2e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    35e0:	2b00      	cmp	r3, #0
    35e2:	d0e0      	beq.n	35a6 <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_stop(timer);
    35e4:	4806      	ldr	r0, [pc, #24]	; (3600 <z_log_msg_post_finalize+0x88>)
    35e6:	f007 fb83 	bl	acf0 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    35ea:	4806      	ldr	r0, [pc, #24]	; (3604 <z_log_msg_post_finalize+0x8c>)
    35ec:	f004 fbce 	bl	7d8c <z_impl_k_sem_give>
}
    35f0:	e7d9      	b.n	35a6 <z_log_msg_post_finalize+0x2e>
    35f2:	bf00      	nop
    35f4:	200003e0 	.word	0x200003e0
    35f8:	20000a29 	.word	0x20000a29
    35fc:	20000410 	.word	0x20000410
    3600:	20000128 	.word	0x20000128
    3604:	20000118 	.word	0x20000118

00003608 <log_3>:
{
    3608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    360c:	4680      	mov	r8, r0
    360e:	460f      	mov	r7, r1
    3610:	4616      	mov	r6, r2
    3612:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    3614:	f000 f9be 	bl	3994 <log_msg_chunk_alloc>

	if (msg != NULL) {
    3618:	4604      	mov	r4, r0
    361a:	b140      	cbz	r0, 362e <log_3+0x26>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    361c:	2301      	movs	r3, #1
    361e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    3620:	2200      	movs	r2, #0
    3622:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    3624:	f04f 0300 	mov.w	r3, #0
    3628:	f362 0300 	bfi	r3, r2, #0, #1
    362c:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
    362e:	b14c      	cbz	r4, 3644 <log_3+0x3c>
		msg->str = str;
    3630:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
    3634:	7a63      	ldrb	r3, [r4, #9]
    3636:	2203      	movs	r2, #3
    3638:	f362 1307 	bfi	r3, r2, #4, #4
    363c:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    363e:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
    3640:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
    3642:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
    3644:	b1c4      	cbz	r4, 3678 <log_3+0x70>
	msg->hdr.ids = src_level;
    3646:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    364a:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    364c:	4b0b      	ldr	r3, [pc, #44]	; (367c <log_3+0x74>)
    364e:	681b      	ldr	r3, [r3, #0]
    3650:	4798      	blx	r3
    3652:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    3654:	f04f 0320 	mov.w	r3, #32
    3658:	f3ef 8511 	mrs	r5, BASEPRI
    365c:	f383 8812 	msr	BASEPRI_MAX, r3
    3660:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    3664:	4621      	mov	r1, r4
    3666:	4806      	ldr	r0, [pc, #24]	; (3680 <log_3+0x78>)
    3668:	f006 f897 	bl	979a <log_list_add_tail>
	__asm__ volatile(
    366c:	f385 8811 	msr	BASEPRI, r5
    3670:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    3674:	f7ff ff80 	bl	3578 <z_log_msg_post_finalize>
}
    3678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    367c:	20000024 	.word	0x20000024
    3680:	200003ec 	.word	0x200003ec

00003684 <log_1>:
{
    3684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3686:	4606      	mov	r6, r0
    3688:	460d      	mov	r5, r1
    368a:	4617      	mov	r7, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    368c:	f000 f982 	bl	3994 <log_msg_chunk_alloc>
	if (msg != NULL) {
    3690:	4604      	mov	r4, r0
    3692:	b140      	cbz	r0, 36a6 <log_1+0x22>
		msg->hdr.ref_cnt = 1;
    3694:	2301      	movs	r3, #1
    3696:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    3698:	2100      	movs	r1, #0
    369a:	8101      	strh	r1, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    369c:	f04f 0300 	mov.w	r3, #0
    36a0:	f361 0300 	bfi	r3, r1, #0, #1
    36a4:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    36a6:	b134      	cbz	r4, 36b6 <log_1+0x32>
		msg->str = str;
    36a8:	6126      	str	r6, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
    36aa:	7a63      	ldrb	r3, [r4, #9]
    36ac:	2201      	movs	r2, #1
    36ae:	f362 1307 	bfi	r3, r2, #4, #4
    36b2:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    36b4:	6165      	str	r5, [r4, #20]
		if (msg == NULL) {
    36b6:	b1b4      	cbz	r4, 36e6 <log_1+0x62>
	msg->hdr.ids = src_level;
    36b8:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    36ba:	4b0b      	ldr	r3, [pc, #44]	; (36e8 <log_1+0x64>)
    36bc:	681b      	ldr	r3, [r3, #0]
    36be:	4798      	blx	r3
    36c0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    36c2:	f04f 0320 	mov.w	r3, #32
    36c6:	f3ef 8511 	mrs	r5, BASEPRI
    36ca:	f383 8812 	msr	BASEPRI_MAX, r3
    36ce:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    36d2:	4621      	mov	r1, r4
    36d4:	4805      	ldr	r0, [pc, #20]	; (36ec <log_1+0x68>)
    36d6:	f006 f860 	bl	979a <log_list_add_tail>
	__asm__ volatile(
    36da:	f385 8811 	msr	BASEPRI, r5
    36de:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    36e2:	f7ff ff49 	bl	3578 <z_log_msg_post_finalize>
}
    36e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36e8:	20000024 	.word	0x20000024
    36ec:	200003ec 	.word	0x200003ec

000036f0 <log_2>:
{
    36f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    36f4:	4607      	mov	r7, r0
    36f6:	460e      	mov	r6, r1
    36f8:	4615      	mov	r5, r2
    36fa:	4698      	mov	r8, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    36fc:	f000 f94a 	bl	3994 <log_msg_chunk_alloc>
	if (msg != NULL) {
    3700:	4604      	mov	r4, r0
    3702:	b140      	cbz	r0, 3716 <log_2+0x26>
		msg->hdr.ref_cnt = 1;
    3704:	2301      	movs	r3, #1
    3706:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    3708:	2200      	movs	r2, #0
    370a:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    370c:	f04f 0300 	mov.w	r3, #0
    3710:	f362 0300 	bfi	r3, r2, #0, #1
    3714:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    3716:	b13c      	cbz	r4, 3728 <log_2+0x38>
		msg->str = str;
    3718:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
    371a:	7a63      	ldrb	r3, [r4, #9]
    371c:	2202      	movs	r2, #2
    371e:	f362 1307 	bfi	r3, r2, #4, #4
    3722:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    3724:	6166      	str	r6, [r4, #20]
		msg->payload.single.args[1] = arg2;
    3726:	61a5      	str	r5, [r4, #24]
		if (msg == NULL) {
    3728:	b1bc      	cbz	r4, 375a <log_2+0x6a>
	msg->hdr.ids = src_level;
    372a:	f8a4 800a 	strh.w	r8, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    372e:	4b0c      	ldr	r3, [pc, #48]	; (3760 <log_2+0x70>)
    3730:	681b      	ldr	r3, [r3, #0]
    3732:	4798      	blx	r3
    3734:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    3736:	f04f 0320 	mov.w	r3, #32
    373a:	f3ef 8511 	mrs	r5, BASEPRI
    373e:	f383 8812 	msr	BASEPRI_MAX, r3
    3742:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    3746:	4621      	mov	r1, r4
    3748:	4806      	ldr	r0, [pc, #24]	; (3764 <log_2+0x74>)
    374a:	f006 f826 	bl	979a <log_list_add_tail>
	__asm__ volatile(
    374e:	f385 8811 	msr	BASEPRI, r5
    3752:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    3756:	f7ff ff0f 	bl	3578 <z_log_msg_post_finalize>
}
    375a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    375e:	bf00      	nop
    3760:	20000024 	.word	0x20000024
    3764:	200003ec 	.word	0x200003ec

00003768 <log_0>:
{
    3768:	b570      	push	{r4, r5, r6, lr}
    376a:	4605      	mov	r5, r0
    376c:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    376e:	f000 f911 	bl	3994 <log_msg_chunk_alloc>
	if (msg != NULL) {
    3772:	4604      	mov	r4, r0
    3774:	b140      	cbz	r0, 3788 <log_0+0x20>
		msg->hdr.ref_cnt = 1;
    3776:	2301      	movs	r3, #1
    3778:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    377a:	2200      	movs	r2, #0
    377c:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    377e:	f04f 0300 	mov.w	r3, #0
    3782:	f362 0300 	bfi	r3, r2, #0, #1
    3786:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    3788:	b104      	cbz	r4, 378c <log_0+0x24>
		msg->str = str;
    378a:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
    378c:	b1b4      	cbz	r4, 37bc <log_0+0x54>
	msg->hdr.ids = src_level;
    378e:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    3790:	4b0b      	ldr	r3, [pc, #44]	; (37c0 <log_0+0x58>)
    3792:	681b      	ldr	r3, [r3, #0]
    3794:	4798      	blx	r3
    3796:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    3798:	f04f 0320 	mov.w	r3, #32
    379c:	f3ef 8511 	mrs	r5, BASEPRI
    37a0:	f383 8812 	msr	BASEPRI_MAX, r3
    37a4:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    37a8:	4621      	mov	r1, r4
    37aa:	4806      	ldr	r0, [pc, #24]	; (37c4 <log_0+0x5c>)
    37ac:	f005 fff5 	bl	979a <log_list_add_tail>
	__asm__ volatile(
    37b0:	f385 8811 	msr	BASEPRI, r5
    37b4:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    37b8:	f7ff fede 	bl	3578 <z_log_msg_post_finalize>
}
    37bc:	bd70      	pop	{r4, r5, r6, pc}
    37be:	bf00      	nop
    37c0:	20000024 	.word	0x20000024
    37c4:	200003ec 	.word	0x200003ec

000037c8 <z_log_printk>:
{
    37c8:	b530      	push	{r4, r5, lr}
    37ca:	b0a3      	sub	sp, #140	; 0x8c
    37cc:	4602      	mov	r2, r0
    37ce:	460b      	mov	r3, r1
		} src_level_union = {
    37d0:	2500      	movs	r5, #0
			length = vsnprintk(str, sizeof(str), fmt, ap);
    37d2:	2181      	movs	r1, #129	; 0x81
    37d4:	a801      	add	r0, sp, #4
    37d6:	f7fe fe3b 	bl	2450 <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
    37da:	4602      	mov	r2, r0
    37dc:	2881      	cmp	r0, #129	; 0x81
    37de:	bf28      	it	cs
    37e0:	2281      	movcs	r2, #129	; 0x81
    37e2:	a901      	add	r1, sp, #4
    37e4:	4628      	mov	r0, r5
    37e6:	f006 f89e 	bl	9926 <log_msg_hexdump_create>
			if (msg == NULL) {
    37ea:	b1b8      	cbz	r0, 381c <z_log_printk+0x54>
    37ec:	4604      	mov	r4, r0
	msg->hdr.ids = src_level;
    37ee:	8145      	strh	r5, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
    37f0:	4b0b      	ldr	r3, [pc, #44]	; (3820 <z_log_printk+0x58>)
    37f2:	681b      	ldr	r3, [r3, #0]
    37f4:	4798      	blx	r3
    37f6:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    37f8:	f04f 0320 	mov.w	r3, #32
    37fc:	f3ef 8511 	mrs	r5, BASEPRI
    3800:	f383 8812 	msr	BASEPRI_MAX, r3
    3804:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    3808:	4621      	mov	r1, r4
    380a:	4806      	ldr	r0, [pc, #24]	; (3824 <z_log_printk+0x5c>)
    380c:	f005 ffc5 	bl	979a <log_list_add_tail>
	__asm__ volatile(
    3810:	f385 8811 	msr	BASEPRI, r5
    3814:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    3818:	f7ff feae 	bl	3578 <z_log_msg_post_finalize>
}
    381c:	b023      	add	sp, #140	; 0x8c
    381e:	bd30      	pop	{r4, r5, pc}
    3820:	20000024 	.word	0x20000024
    3824:	200003ec 	.word	0x200003ec

00003828 <z_impl_log_panic>:
	if (panic_mode) {
    3828:	4b12      	ldr	r3, [pc, #72]	; (3874 <z_impl_log_panic+0x4c>)
    382a:	781b      	ldrb	r3, [r3, #0]
    382c:	b103      	cbz	r3, 3830 <z_impl_log_panic+0x8>
    382e:	4770      	bx	lr
{
    3830:	b510      	push	{r4, lr}
	log_init();
    3832:	f7ff fcc7 	bl	31c4 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    3836:	2400      	movs	r4, #0
    3838:	e000      	b.n	383c <z_impl_log_panic+0x14>
    383a:	3401      	adds	r4, #1
    383c:	4b0e      	ldr	r3, [pc, #56]	; (3878 <z_impl_log_panic+0x50>)
    383e:	4a0f      	ldr	r2, [pc, #60]	; (387c <z_impl_log_panic+0x54>)
    3840:	1a9b      	subs	r3, r3, r2
    3842:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    3846:	da0c      	bge.n	3862 <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
    3848:	480c      	ldr	r0, [pc, #48]	; (387c <z_impl_log_panic+0x54>)
    384a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
    384e:	6843      	ldr	r3, [r0, #4]
    3850:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    3852:	2b00      	cmp	r3, #0
    3854:	d0f1      	beq.n	383a <z_impl_log_panic+0x12>
	backend->api->panic(backend);
    3856:	0123      	lsls	r3, r4, #4
    3858:	4a08      	ldr	r2, [pc, #32]	; (387c <z_impl_log_panic+0x54>)
    385a:	58d3      	ldr	r3, [r2, r3]
    385c:	695b      	ldr	r3, [r3, #20]
    385e:	4798      	blx	r3
}
    3860:	e7eb      	b.n	383a <z_impl_log_panic+0x12>
    3862:	2000      	movs	r0, #0
    3864:	f7ff fe5e 	bl	3524 <z_impl_log_process>
		while (log_process(false) == true) {
    3868:	2800      	cmp	r0, #0
    386a:	d1fa      	bne.n	3862 <z_impl_log_panic+0x3a>
	panic_mode = true;
    386c:	4b01      	ldr	r3, [pc, #4]	; (3874 <z_impl_log_panic+0x4c>)
    386e:	2201      	movs	r2, #1
    3870:	701a      	strb	r2, [r3, #0]
}
    3872:	bd10      	pop	{r4, pc}
    3874:	20000a29 	.word	0x20000a29
    3878:	0000afc8 	.word	0x0000afc8
    387c:	0000afb8 	.word	0x0000afb8

00003880 <log_process_thread_func>:
{
    3880:	b508      	push	{r3, lr}
	log_init();
    3882:	f7ff fc9f 	bl	31c4 <log_init>
	return z_impl_z_current_get();
    3886:	f004 fe8b 	bl	85a0 <z_impl_z_current_get>
	thread_set(k_current_get());
    388a:	f7ff fc23 	bl	30d4 <thread_set>
    388e:	e006      	b.n	389e <log_process_thread_func+0x1e>
	return z_impl_k_sem_take(sem, timeout);
    3890:	f04f 32ff 	mov.w	r2, #4294967295
    3894:	f04f 33ff 	mov.w	r3, #4294967295
    3898:	4804      	ldr	r0, [pc, #16]	; (38ac <log_process_thread_func+0x2c>)
    389a:	f004 fa9b 	bl	7dd4 <z_impl_k_sem_take>
    389e:	2000      	movs	r0, #0
    38a0:	f7ff fe40 	bl	3524 <z_impl_log_process>
		if (log_process(false) == false) {
    38a4:	2800      	cmp	r0, #0
    38a6:	d1fa      	bne.n	389e <log_process_thread_func+0x1e>
    38a8:	e7f2      	b.n	3890 <log_process_thread_func+0x10>
    38aa:	bf00      	nop
    38ac:	20000118 	.word	0x20000118

000038b0 <z_log_free>:
{
    38b0:	b500      	push	{lr}
    38b2:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    38b4:	3804      	subs	r0, #4
    38b6:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    38b8:	f3bf 8f5b 	dmb	ish
    38bc:	e850 3f00 	ldrex	r3, [r0]
    38c0:	1e5a      	subs	r2, r3, #1
    38c2:	e840 2100 	strex	r1, r2, [r0]
    38c6:	2900      	cmp	r1, #0
    38c8:	d1f8      	bne.n	38bc <z_log_free+0xc>
    38ca:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    38ce:	2b01      	cmp	r3, #1
    38d0:	d002      	beq.n	38d8 <z_log_free+0x28>
}
    38d2:	b003      	add	sp, #12
    38d4:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    38d8:	a901      	add	r1, sp, #4
    38da:	4802      	ldr	r0, [pc, #8]	; (38e4 <z_log_free+0x34>)
    38dc:	f006 ffa7 	bl	a82e <k_mem_slab_free>
}
    38e0:	e7f7      	b.n	38d2 <z_log_free+0x22>
    38e2:	bf00      	nop
    38e4:	200003f4 	.word	0x200003f4

000038e8 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    38e8:	4b05      	ldr	r3, [pc, #20]	; (3900 <log_source_name_get+0x18>)
    38ea:	4a06      	ldr	r2, [pc, #24]	; (3904 <log_source_name_get+0x1c>)
    38ec:	1a9b      	subs	r3, r3, r2
    38ee:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    38f2:	d202      	bcs.n	38fa <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    38f4:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    38f8:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    38fa:	2000      	movs	r0, #0
}
    38fc:	4770      	bx	lr
    38fe:	bf00      	nop
    3900:	0000afb8 	.word	0x0000afb8
    3904:	0000af70 	.word	0x0000af70

00003908 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    3908:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    390a:	4b07      	ldr	r3, [pc, #28]	; (3928 <log_backend_enable+0x20>)
    390c:	1ac3      	subs	r3, r0, r3
    390e:	111b      	asrs	r3, r3, #4
    3910:	3301      	adds	r3, #1
	backend->cb->id = id;
    3912:	6842      	ldr	r2, [r0, #4]
    3914:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
    3916:	6843      	ldr	r3, [r0, #4]
    3918:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    391a:	6843      	ldr	r3, [r0, #4]
    391c:	2201      	movs	r2, #1
    391e:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    3920:	f7ff fcce 	bl	32c0 <z_log_notify_backend_enabled>
}
    3924:	bd08      	pop	{r3, pc}
    3926:	bf00      	nop
    3928:	0000afb8 	.word	0x0000afb8

0000392c <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
    392c:	b510      	push	{r4, lr}
    392e:	b082      	sub	sp, #8
    3930:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
    3932:	9b01      	ldr	r3, [sp, #4]
    3934:	b133      	cbz	r3, 3944 <cont_free+0x18>
		next = cont->next;
    3936:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    3938:	a901      	add	r1, sp, #4
    393a:	4803      	ldr	r0, [pc, #12]	; (3948 <cont_free+0x1c>)
    393c:	f006 ff77 	bl	a82e <k_mem_slab_free>
		cont = next;
    3940:	9401      	str	r4, [sp, #4]
    3942:	e7f6      	b.n	3932 <cont_free+0x6>
	}
}
    3944:	b002      	add	sp, #8
    3946:	bd10      	pop	{r4, pc}
    3948:	20000414 	.word	0x20000414

0000394c <log_msg_pool_init>:
{
    394c:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    394e:	2320      	movs	r3, #32
    3950:	461a      	mov	r2, r3
    3952:	4902      	ldr	r1, [pc, #8]	; (395c <log_msg_pool_init+0x10>)
    3954:	4802      	ldr	r0, [pc, #8]	; (3960 <log_msg_pool_init+0x14>)
    3956:	f006 ff5c 	bl	a812 <k_mem_slab_init>
}
    395a:	bd08      	pop	{r3, pc}
    395c:	200027a0 	.word	0x200027a0
    3960:	20000414 	.word	0x20000414

00003964 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    3964:	b510      	push	{r4, lr}
    3966:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
    3968:	2300      	movs	r3, #0
    396a:	9301      	str	r3, [sp, #4]
    396c:	2001      	movs	r0, #1
    396e:	f7ff fdd9 	bl	3524 <z_impl_log_process>
    3972:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
    3974:	f7ff fcb4 	bl	32e0 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    3978:	2200      	movs	r2, #0
    397a:	2300      	movs	r3, #0
    397c:	a901      	add	r1, sp, #4
    397e:	4804      	ldr	r0, [pc, #16]	; (3990 <log_msg_no_space_handle+0x2c>)
    3980:	f003 fff2 	bl	7968 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    3984:	b108      	cbz	r0, 398a <log_msg_no_space_handle+0x26>
    3986:	2c00      	cmp	r4, #0
    3988:	d1f0      	bne.n	396c <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
    398a:	9801      	ldr	r0, [sp, #4]
    398c:	b002      	add	sp, #8
    398e:	bd10      	pop	{r4, pc}
    3990:	20000414 	.word	0x20000414

00003994 <log_msg_chunk_alloc>:
{
    3994:	b500      	push	{lr}
    3996:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
    3998:	2300      	movs	r3, #0
    399a:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
    399c:	f005 ff19 	bl	97d2 <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    39a0:	b150      	cbz	r0, 39b8 <log_msg_chunk_alloc+0x24>
    39a2:	2200      	movs	r2, #0
    39a4:	2300      	movs	r3, #0
    39a6:	a901      	add	r1, sp, #4
    39a8:	4807      	ldr	r0, [pc, #28]	; (39c8 <log_msg_chunk_alloc+0x34>)
    39aa:	f003 ffdd 	bl	7968 <k_mem_slab_alloc>
	if (err != 0) {
    39ae:	b930      	cbnz	r0, 39be <log_msg_chunk_alloc+0x2a>
}
    39b0:	9801      	ldr	r0, [sp, #4]
    39b2:	b003      	add	sp, #12
    39b4:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    39b8:	2200      	movs	r2, #0
    39ba:	2300      	movs	r3, #0
    39bc:	e7f3      	b.n	39a6 <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
    39be:	f7ff ffd1 	bl	3964 <log_msg_no_space_handle>
    39c2:	9001      	str	r0, [sp, #4]
    39c4:	e7f4      	b.n	39b0 <log_msg_chunk_alloc+0x1c>
    39c6:	bf00      	nop
    39c8:	20000414 	.word	0x20000414

000039cc <msg_free>:
{
    39cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    39ce:	b083      	sub	sp, #12
    39d0:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
    39d2:	4604      	mov	r4, r0
    39d4:	f005 ff7d 	bl	98d2 <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    39d8:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
    39da:	f013 0f01 	tst.w	r3, #1
    39de:	d101      	bne.n	39e4 <msg_free+0x18>
    39e0:	4606      	mov	r6, r0
    39e2:	bb50      	cbnz	r0, 3a3a <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
    39e4:	9b01      	ldr	r3, [sp, #4]
    39e6:	7a1a      	ldrb	r2, [r3, #8]
    39e8:	f012 0f02 	tst.w	r2, #2
    39ec:	d128      	bne.n	3a40 <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    39ee:	a901      	add	r1, sp, #4
    39f0:	4815      	ldr	r0, [pc, #84]	; (3a48 <msg_free+0x7c>)
    39f2:	f006 ff1c 	bl	a82e <k_mem_slab_free>
}
    39f6:	b003      	add	sp, #12
    39f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
    39fa:	9801      	ldr	r0, [sp, #4]
    39fc:	f005 ff7e 	bl	98fc <log_msg_str_get>
    3a00:	4631      	mov	r1, r6
    3a02:	f7ff fbbb 	bl	317c <z_log_get_s_mask>
					if (smask == 0U) {
    3a06:	4607      	mov	r7, r0
    3a08:	b988      	cbnz	r0, 3a2e <msg_free+0x62>
    3a0a:	e7eb      	b.n	39e4 <msg_free+0x18>
					z_log_free(buf);
    3a0c:	4628      	mov	r0, r5
    3a0e:	f7ff ff4f 	bl	38b0 <z_log_free>
		for (i = 0U; i < nargs; i++) {
    3a12:	3401      	adds	r4, #1
    3a14:	42b4      	cmp	r4, r6
    3a16:	d2e5      	bcs.n	39e4 <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
    3a18:	4621      	mov	r1, r4
    3a1a:	9801      	ldr	r0, [sp, #4]
    3a1c:	f005 ff5c 	bl	98d8 <log_msg_arg_get>
    3a20:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
    3a22:	f7ff fce7 	bl	33f4 <log_is_strdup>
    3a26:	2800      	cmp	r0, #0
    3a28:	d0f3      	beq.n	3a12 <msg_free+0x46>
				if (smask == 0U) {
    3a2a:	2f00      	cmp	r7, #0
    3a2c:	d0e5      	beq.n	39fa <msg_free+0x2e>
				if (smask & BIT(i)) {
    3a2e:	fa27 f304 	lsr.w	r3, r7, r4
    3a32:	f013 0f01 	tst.w	r3, #1
    3a36:	d0ec      	beq.n	3a12 <msg_free+0x46>
    3a38:	e7e8      	b.n	3a0c <msg_free+0x40>
		uint32_t smask = 0U;
    3a3a:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
    3a3c:	463c      	mov	r4, r7
    3a3e:	e7e9      	b.n	3a14 <msg_free+0x48>
		cont_free(msg->payload.ext.next);
    3a40:	6958      	ldr	r0, [r3, #20]
    3a42:	f7ff ff73 	bl	392c <cont_free>
    3a46:	e7d2      	b.n	39ee <msg_free+0x22>
    3a48:	20000414 	.word	0x20000414

00003a4c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    3a4c:	b40e      	push	{r1, r2, r3}
    3a4e:	b500      	push	{lr}
    3a50:	b082      	sub	sp, #8
    3a52:	4601      	mov	r1, r0
    3a54:	ab03      	add	r3, sp, #12
    3a56:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    3a5a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    3a5c:	4803      	ldr	r0, [pc, #12]	; (3a6c <print_formatted+0x20>)
    3a5e:	f7fe fe3f 	bl	26e0 <cbvprintf>
	va_end(args);

	return length;
}
    3a62:	b002      	add	sp, #8
    3a64:	f85d eb04 	ldr.w	lr, [sp], #4
    3a68:	b003      	add	sp, #12
    3a6a:	4770      	bx	lr
    3a6c:	00009cf9 	.word	0x00009cf9

00003a70 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
    3a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a72:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
    3a74:	f011 0f44 	tst.w	r1, #68	; 0x44
    3a78:	d005      	beq.n	3a86 <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
    3a7a:	4b1a      	ldr	r3, [pc, #104]	; (3ae4 <timestamp_print+0x74>)
    3a7c:	681c      	ldr	r4, [r3, #0]
    3a7e:	b934      	cbnz	r4, 3a8e <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
    3a80:	2000      	movs	r0, #0
	}

	return length;
}
    3a82:	b005      	add	sp, #20
    3a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    3a86:	4918      	ldr	r1, [pc, #96]	; (3ae8 <timestamp_print+0x78>)
    3a88:	f7ff ffe0 	bl	3a4c <print_formatted>
    3a8c:	e7f9      	b.n	3a82 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    3a8e:	4b17      	ldr	r3, [pc, #92]	; (3aec <timestamp_print+0x7c>)
    3a90:	6819      	ldr	r1, [r3, #0]
    3a92:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    3a96:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
    3a9a:	4a15      	ldr	r2, [pc, #84]	; (3af0 <timestamp_print+0x80>)
    3a9c:	fba2 3205 	umull	r3, r2, r2, r5
    3aa0:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    3aa2:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    3aa6:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
    3aaa:	4b12      	ldr	r3, [pc, #72]	; (3af4 <timestamp_print+0x84>)
    3aac:	fba3 7306 	umull	r7, r3, r3, r6
    3ab0:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    3ab2:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
    3ab6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    3aba:	fb05 f101 	mul.w	r1, r5, r1
    3abe:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3ac2:	fb07 1114 	mls	r1, r7, r4, r1
    3ac6:	fb05 f101 	mul.w	r1, r5, r1
    3aca:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(output,
    3ace:	9402      	str	r4, [sp, #8]
    3ad0:	9701      	str	r7, [sp, #4]
    3ad2:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    3ad6:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
    3ada:	9100      	str	r1, [sp, #0]
    3adc:	4906      	ldr	r1, [pc, #24]	; (3af8 <timestamp_print+0x88>)
    3ade:	f7ff ffb5 	bl	3a4c <print_formatted>
    3ae2:	e7ce      	b.n	3a82 <timestamp_print+0x12>
    3ae4:	20000430 	.word	0x20000430
    3ae8:	0000b1ec 	.word	0x0000b1ec
    3aec:	20000434 	.word	0x20000434
    3af0:	91a2b3c5 	.word	0x91a2b3c5
    3af4:	88888889 	.word	0x88888889
    3af8:	0000b1f8 	.word	0x0000b1f8

00003afc <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    3afc:	b161      	cbz	r1, 3b18 <color_print+0x1c>
{
    3afe:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    3b00:	b12a      	cbz	r2, 3b0e <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    3b02:	4a06      	ldr	r2, [pc, #24]	; (3b1c <color_print+0x20>)
    3b04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3b08:	b912      	cbnz	r2, 3b10 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    3b0a:	4a05      	ldr	r2, [pc, #20]	; (3b20 <color_print+0x24>)
    3b0c:	e000      	b.n	3b10 <color_print+0x14>
    3b0e:	4a04      	ldr	r2, [pc, #16]	; (3b20 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    3b10:	4904      	ldr	r1, [pc, #16]	; (3b24 <color_print+0x28>)
    3b12:	f7ff ff9b 	bl	3a4c <print_formatted>
	}
}
    3b16:	bd08      	pop	{r3, pc}
    3b18:	4770      	bx	lr
    3b1a:	bf00      	nop
    3b1c:	0000b278 	.word	0x0000b278
    3b20:	0000b214 	.word	0x0000b214
    3b24:	0000b21c 	.word	0x0000b21c

00003b28 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    3b28:	f011 0f10 	tst.w	r1, #16
    3b2c:	d10b      	bne.n	3b46 <newline_print+0x1e>
{
    3b2e:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    3b30:	f011 0f20 	tst.w	r1, #32
    3b34:	d003      	beq.n	3b3e <newline_print+0x16>
		print_formatted(ctx, "\n");
    3b36:	4904      	ldr	r1, [pc, #16]	; (3b48 <newline_print+0x20>)
    3b38:	f7ff ff88 	bl	3a4c <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    3b3c:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    3b3e:	4903      	ldr	r1, [pc, #12]	; (3b4c <newline_print+0x24>)
    3b40:	f7ff ff84 	bl	3a4c <print_formatted>
    3b44:	e7fa      	b.n	3b3c <newline_print+0x14>
    3b46:	4770      	bx	lr
    3b48:	0000b748 	.word	0x0000b748
    3b4c:	0000b220 	.word	0x0000b220

00003b50 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    3b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b54:	4605      	mov	r5, r0
    3b56:	460f      	mov	r7, r1
    3b58:	4616      	mov	r6, r2
    3b5a:	4698      	mov	r8, r3
	newline_print(output, flags);
    3b5c:	9906      	ldr	r1, [sp, #24]
    3b5e:	f7ff ffe3 	bl	3b28 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    3b62:	2400      	movs	r4, #0
    3b64:	4544      	cmp	r4, r8
    3b66:	da05      	bge.n	3b74 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    3b68:	4924      	ldr	r1, [pc, #144]	; (3bfc <hexdump_line_print+0xac>)
    3b6a:	4628      	mov	r0, r5
    3b6c:	f7ff ff6e 	bl	3a4c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    3b70:	3401      	adds	r4, #1
    3b72:	e7f7      	b.n	3b64 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3b74:	2400      	movs	r4, #0
    3b76:	e009      	b.n	3b8c <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    3b78:	4920      	ldr	r1, [pc, #128]	; (3bfc <hexdump_line_print+0xac>)
    3b7a:	4628      	mov	r0, r5
    3b7c:	f7ff ff66 	bl	3a4c <print_formatted>
    3b80:	e00b      	b.n	3b9a <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    3b82:	491f      	ldr	r1, [pc, #124]	; (3c00 <hexdump_line_print+0xb0>)
    3b84:	4628      	mov	r0, r5
    3b86:	f7ff ff61 	bl	3a4c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3b8a:	3401      	adds	r4, #1
    3b8c:	2c0f      	cmp	r4, #15
    3b8e:	dc0c      	bgt.n	3baa <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    3b90:	2c00      	cmp	r4, #0
    3b92:	dd02      	ble.n	3b9a <hexdump_line_print+0x4a>
    3b94:	f014 0f07 	tst.w	r4, #7
    3b98:	d0ee      	beq.n	3b78 <hexdump_line_print+0x28>
		if (i < length) {
    3b9a:	42b4      	cmp	r4, r6
    3b9c:	d2f1      	bcs.n	3b82 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    3b9e:	5d3a      	ldrb	r2, [r7, r4]
    3ba0:	4918      	ldr	r1, [pc, #96]	; (3c04 <hexdump_line_print+0xb4>)
    3ba2:	4628      	mov	r0, r5
    3ba4:	f7ff ff52 	bl	3a4c <print_formatted>
    3ba8:	e7ef      	b.n	3b8a <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    3baa:	4917      	ldr	r1, [pc, #92]	; (3c08 <hexdump_line_print+0xb8>)
    3bac:	4628      	mov	r0, r5
    3bae:	f7ff ff4d 	bl	3a4c <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3bb2:	2400      	movs	r4, #0
    3bb4:	e009      	b.n	3bca <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    3bb6:	4911      	ldr	r1, [pc, #68]	; (3bfc <hexdump_line_print+0xac>)
    3bb8:	4628      	mov	r0, r5
    3bba:	f7ff ff47 	bl	3a4c <print_formatted>
    3bbe:	e00b      	b.n	3bd8 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    3bc0:	4912      	ldr	r1, [pc, #72]	; (3c0c <hexdump_line_print+0xbc>)
    3bc2:	4628      	mov	r0, r5
    3bc4:	f7ff ff42 	bl	3a4c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3bc8:	3401      	adds	r4, #1
    3bca:	2c0f      	cmp	r4, #15
    3bcc:	dc13      	bgt.n	3bf6 <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
    3bce:	2c00      	cmp	r4, #0
    3bd0:	dd02      	ble.n	3bd8 <hexdump_line_print+0x88>
    3bd2:	f014 0f07 	tst.w	r4, #7
    3bd6:	d0ee      	beq.n	3bb6 <hexdump_line_print+0x66>
		if (i < length) {
    3bd8:	42b4      	cmp	r4, r6
    3bda:	d207      	bcs.n	3bec <hexdump_line_print+0x9c>
			char c = (char)data[i];
    3bdc:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
    3bde:	4b0c      	ldr	r3, [pc, #48]	; (3c10 <hexdump_line_print+0xc0>)
    3be0:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
    3be2:	f013 0f97 	tst.w	r3, #151	; 0x97
    3be6:	d1eb      	bne.n	3bc0 <hexdump_line_print+0x70>
    3be8:	222e      	movs	r2, #46	; 0x2e
    3bea:	e7e9      	b.n	3bc0 <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
    3bec:	4903      	ldr	r1, [pc, #12]	; (3bfc <hexdump_line_print+0xac>)
    3bee:	4628      	mov	r0, r5
    3bf0:	f7ff ff2c 	bl	3a4c <print_formatted>
    3bf4:	e7e8      	b.n	3bc8 <hexdump_line_print+0x78>
		}
	}
}
    3bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3bfa:	bf00      	nop
    3bfc:	0000b248 	.word	0x0000b248
    3c00:	0000b22c 	.word	0x0000b22c
    3c04:	0000b224 	.word	0x0000b224
    3c08:	0000b230 	.word	0x0000b230
    3c0c:	0000b234 	.word	0x0000b234
    3c10:	0000bb4a 	.word	0x0000bb4a

00003c14 <ids_print>:
{
    3c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c18:	4680      	mov	r8, r0
    3c1a:	4616      	mov	r6, r2
    3c1c:	461d      	mov	r5, r3
    3c1e:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    3c22:	b959      	cbnz	r1, 3c3c <ids_print+0x28>
	int total = 0;
    3c24:	2400      	movs	r4, #0
	if (source_id >= 0) {
    3c26:	2f00      	cmp	r7, #0
    3c28:	db1c      	blt.n	3c64 <ids_print+0x50>
		total += print_formatted(output,
    3c2a:	b186      	cbz	r6, 3c4e <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    3c2c:	2301      	movs	r3, #1
    3c2e:	9a07      	ldr	r2, [sp, #28]
    3c30:	4093      	lsls	r3, r2
				(func_on &&
    3c32:	f013 0f10 	tst.w	r3, #16
    3c36:	d118      	bne.n	3c6a <ids_print+0x56>
		total += print_formatted(output,
    3c38:	4e0d      	ldr	r6, [pc, #52]	; (3c70 <ids_print+0x5c>)
    3c3a:	e009      	b.n	3c50 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    3c3c:	4b0d      	ldr	r3, [pc, #52]	; (3c74 <ids_print+0x60>)
    3c3e:	9a07      	ldr	r2, [sp, #28]
    3c40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3c44:	490c      	ldr	r1, [pc, #48]	; (3c78 <ids_print+0x64>)
    3c46:	f7ff ff01 	bl	3a4c <print_formatted>
    3c4a:	4604      	mov	r4, r0
    3c4c:	e7eb      	b.n	3c26 <ids_print+0x12>
		total += print_formatted(output,
    3c4e:	4e08      	ldr	r6, [pc, #32]	; (3c70 <ids_print+0x5c>)
    3c50:	4639      	mov	r1, r7
    3c52:	4628      	mov	r0, r5
    3c54:	f7ff fe48 	bl	38e8 <log_source_name_get>
    3c58:	4602      	mov	r2, r0
    3c5a:	4631      	mov	r1, r6
    3c5c:	4640      	mov	r0, r8
    3c5e:	f7ff fef5 	bl	3a4c <print_formatted>
    3c62:	4404      	add	r4, r0
}
    3c64:	4620      	mov	r0, r4
    3c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    3c6a:	4e04      	ldr	r6, [pc, #16]	; (3c7c <ids_print+0x68>)
    3c6c:	e7f0      	b.n	3c50 <ids_print+0x3c>
    3c6e:	bf00      	nop
    3c70:	0000b238 	.word	0x0000b238
    3c74:	0000b2b4 	.word	0x0000b2b4
    3c78:	0000b244 	.word	0x0000b244
    3c7c:	0000b240 	.word	0x0000b240

00003c80 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    3c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c84:	b085      	sub	sp, #20
    3c86:	4605      	mov	r5, r0
    3c88:	460c      	mov	r4, r1
    3c8a:	4616      	mov	r6, r2
    3c8c:	9303      	str	r3, [sp, #12]
    3c8e:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    3c92:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    3c96:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    3c9a:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    3c9e:	f005 fd96 	bl	97ce <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    3ca2:	b1e8      	cbz	r0, 3ce0 <prefix_print+0x60>
    3ca4:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    3ca6:	4913      	ldr	r1, [pc, #76]	; (3cf4 <prefix_print+0x74>)
    3ca8:	4628      	mov	r0, r5
    3caa:	f7ff fecf 	bl	3a4c <print_formatted>
    3cae:	4607      	mov	r7, r0
	}

	if (stamp) {
    3cb0:	f1bb 0f00 	cmp.w	fp, #0
    3cb4:	d116      	bne.n	3ce4 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    3cb6:	4642      	mov	r2, r8
    3cb8:	4651      	mov	r1, sl
    3cba:	4628      	mov	r0, r5
    3cbc:	f005 fe9c 	bl	99f8 <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
    3cc0:	f8cd 8004 	str.w	r8, [sp, #4]
    3cc4:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    3cc8:	9300      	str	r3, [sp, #0]
    3cca:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    3cce:	4632      	mov	r2, r6
    3cd0:	4649      	mov	r1, r9
    3cd2:	4628      	mov	r0, r5
    3cd4:	f7ff ff9e 	bl	3c14 <ids_print>
			domain_id, source_id, level);


	return length;
}
    3cd8:	4438      	add	r0, r7
    3cda:	b005      	add	sp, #20
    3cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    3ce0:	2700      	movs	r7, #0
    3ce2:	e7e5      	b.n	3cb0 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    3ce4:	9a03      	ldr	r2, [sp, #12]
    3ce6:	4621      	mov	r1, r4
    3ce8:	4628      	mov	r0, r5
    3cea:	f7ff fec1 	bl	3a70 <timestamp_print>
    3cee:	4407      	add	r7, r0
    3cf0:	e7e1      	b.n	3cb6 <prefix_print+0x36>
    3cf2:	bf00      	nop
    3cf4:	0000b24c 	.word	0x0000b24c

00003cf8 <hexdump_print>:
{
    3cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3cfc:	b089      	sub	sp, #36	; 0x24
    3cfe:	4607      	mov	r7, r0
    3d00:	460e      	mov	r6, r1
    3d02:	4691      	mov	r9, r2
    3d04:	4698      	mov	r8, r3
	print_formatted(output, "%s", log_msg_str_get(msg));
    3d06:	f005 fdf9 	bl	98fc <log_msg_str_get>
    3d0a:	4602      	mov	r2, r0
    3d0c:	490e      	ldr	r1, [pc, #56]	; (3d48 <hexdump_print+0x50>)
    3d0e:	4630      	mov	r0, r6
    3d10:	f7ff fe9c 	bl	3a4c <print_formatted>
	uint32_t offset = 0U;
    3d14:	2400      	movs	r4, #0
		length = sizeof(buf);
    3d16:	2510      	movs	r5, #16
    3d18:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    3d1a:	4623      	mov	r3, r4
    3d1c:	aa03      	add	r2, sp, #12
    3d1e:	eb0d 0105 	add.w	r1, sp, r5
    3d22:	4638      	mov	r0, r7
    3d24:	f005 fe53 	bl	99ce <log_msg_hexdump_data_get>
		if (length) {
    3d28:	9a03      	ldr	r2, [sp, #12]
    3d2a:	b152      	cbz	r2, 3d42 <hexdump_print+0x4a>
			hexdump_line_print(output, buf, length,
    3d2c:	f8cd 8000 	str.w	r8, [sp]
    3d30:	464b      	mov	r3, r9
    3d32:	eb0d 0105 	add.w	r1, sp, r5
    3d36:	4630      	mov	r0, r6
    3d38:	f7ff ff0a 	bl	3b50 <hexdump_line_print>
			offset += length;
    3d3c:	9d03      	ldr	r5, [sp, #12]
    3d3e:	442c      	add	r4, r5
		length = sizeof(buf);
    3d40:	e7e9      	b.n	3d16 <hexdump_print+0x1e>
}
    3d42:	b009      	add	sp, #36	; 0x24
    3d44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3d48:	0000b21c 	.word	0x0000b21c

00003d4c <raw_string_print>:
{
    3d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d4e:	b083      	sub	sp, #12
    3d50:	4606      	mov	r6, r0
    3d52:	460c      	mov	r4, r1
	bool eol = false;
    3d54:	2700      	movs	r7, #0
	size_t offset = 0;
    3d56:	463d      	mov	r5, r7
    3d58:	e00d      	b.n	3d76 <raw_string_print+0x2a>
			eol = (output->buf[length - 1] == '\n');
    3d5a:	68a2      	ldr	r2, [r4, #8]
    3d5c:	4413      	add	r3, r2
    3d5e:	f813 7c01 	ldrb.w	r7, [r3, #-1]
    3d62:	2f0a      	cmp	r7, #10
    3d64:	bf14      	ite	ne
    3d66:	2700      	movne	r7, #0
    3d68:	2701      	moveq	r7, #1
		log_output_flush(output);
    3d6a:	4620      	mov	r0, r4
    3d6c:	f005 ffb7 	bl	9cde <log_output_flush>
		offset += length;
    3d70:	9b01      	ldr	r3, [sp, #4]
    3d72:	441d      	add	r5, r3
	} while (length > 0);
    3d74:	b173      	cbz	r3, 3d94 <raw_string_print+0x48>
		length = output->size;
    3d76:	68e3      	ldr	r3, [r4, #12]
    3d78:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    3d7a:	462b      	mov	r3, r5
    3d7c:	aa01      	add	r2, sp, #4
    3d7e:	68a1      	ldr	r1, [r4, #8]
    3d80:	4630      	mov	r0, r6
    3d82:	f005 fe24 	bl	99ce <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    3d86:	6863      	ldr	r3, [r4, #4]
    3d88:	9a01      	ldr	r2, [sp, #4]
    3d8a:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    3d8c:	9b01      	ldr	r3, [sp, #4]
    3d8e:	2b00      	cmp	r3, #0
    3d90:	d0eb      	beq.n	3d6a <raw_string_print+0x1e>
    3d92:	e7e2      	b.n	3d5a <raw_string_print+0xe>
	if (eol) {
    3d94:	b90f      	cbnz	r7, 3d9a <raw_string_print+0x4e>
}
    3d96:	b003      	add	sp, #12
    3d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
    3d9a:	4902      	ldr	r1, [pc, #8]	; (3da4 <raw_string_print+0x58>)
    3d9c:	4620      	mov	r0, r4
    3d9e:	f7ff fe55 	bl	3a4c <print_formatted>
}
    3da2:	e7f8      	b.n	3d96 <raw_string_print+0x4a>
    3da4:	0000b250 	.word	0x0000b250

00003da8 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    3da8:	b570      	push	{r4, r5, r6, lr}
    3daa:	b082      	sub	sp, #8
    3dac:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
    3dae:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3db0:	f242 730f 	movw	r3, #9999	; 0x270f
    3db4:	428b      	cmp	r3, r1
    3db6:	bf28      	it	cs
    3db8:	460b      	movcs	r3, r1
    3dba:	4a0e      	ldr	r2, [pc, #56]	; (3df4 <log_output_dropped_process+0x4c>)
    3dbc:	2105      	movs	r1, #5
    3dbe:	4668      	mov	r0, sp
    3dc0:	f005 fb61 	bl	9486 <snprintk>
    3dc4:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
    3dc6:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    3dc8:	685b      	ldr	r3, [r3, #4]
    3dca:	220b      	movs	r2, #11
    3dcc:	490a      	ldr	r1, [pc, #40]	; (3df8 <log_output_dropped_process+0x50>)
    3dce:	4628      	mov	r0, r5
    3dd0:	f005 fe05 	bl	99de <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
    3dd4:	6863      	ldr	r3, [r4, #4]
    3dd6:	685b      	ldr	r3, [r3, #4]
    3dd8:	4632      	mov	r2, r6
    3dda:	4669      	mov	r1, sp
    3ddc:	4628      	mov	r0, r5
    3dde:	f005 fdfe 	bl	99de <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
    3de2:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    3de4:	685b      	ldr	r3, [r3, #4]
    3de6:	221b      	movs	r2, #27
    3de8:	4904      	ldr	r1, [pc, #16]	; (3dfc <log_output_dropped_process+0x54>)
    3dea:	4628      	mov	r0, r5
    3dec:	f005 fdf7 	bl	99de <buffer_write>
}
    3df0:	b002      	add	sp, #8
    3df2:	bd70      	pop	{r4, r5, r6, pc}
    3df4:	0000b254 	.word	0x0000b254
    3df8:	0000b2a8 	.word	0x0000b2a8
    3dfc:	0000b28c 	.word	0x0000b28c

00003e00 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    3e00:	4b07      	ldr	r3, [pc, #28]	; (3e20 <log_output_timestamp_freq_set+0x20>)
    3e02:	2201      	movs	r2, #1
    3e04:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    3e06:	4b07      	ldr	r3, [pc, #28]	; (3e24 <log_output_timestamp_freq_set+0x24>)
    3e08:	4298      	cmp	r0, r3
    3e0a:	d905      	bls.n	3e18 <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
    3e0c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    3e0e:	4a04      	ldr	r2, [pc, #16]	; (3e20 <log_output_timestamp_freq_set+0x20>)
    3e10:	6813      	ldr	r3, [r2, #0]
    3e12:	005b      	lsls	r3, r3, #1
    3e14:	6013      	str	r3, [r2, #0]
    3e16:	e7f6      	b.n	3e06 <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
    3e18:	4b03      	ldr	r3, [pc, #12]	; (3e28 <log_output_timestamp_freq_set+0x28>)
    3e1a:	6018      	str	r0, [r3, #0]
}
    3e1c:	4770      	bx	lr
    3e1e:	bf00      	nop
    3e20:	20000434 	.word	0x20000434
    3e24:	000f4240 	.word	0x000f4240
    3e28:	20000430 	.word	0x20000430

00003e2c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    3e2c:	4b01      	ldr	r3, [pc, #4]	; (3e34 <log_backend_rtt_init+0x8>)
    3e2e:	2201      	movs	r2, #1
    3e30:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    3e32:	4770      	bx	lr
    3e34:	20000a2a 	.word	0x20000a2a

00003e38 <on_failed_write>:
{
    3e38:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    3e3a:	b918      	cbnz	r0, 3e44 <on_failed_write+0xc>
		host_present = false;
    3e3c:	4b08      	ldr	r3, [pc, #32]	; (3e60 <on_failed_write+0x28>)
    3e3e:	2200      	movs	r2, #0
    3e40:	701a      	strb	r2, [r3, #0]
}
    3e42:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    3e44:	4b07      	ldr	r3, [pc, #28]	; (3e64 <on_failed_write+0x2c>)
    3e46:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
    3e48:	b123      	cbz	r3, 3e54 <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
    3e4a:	f241 3088 	movw	r0, #5000	; 0x1388
    3e4e:	f006 ff3d 	bl	accc <z_impl_k_busy_wait>
}
    3e52:	e7f6      	b.n	3e42 <on_failed_write+0xa>
	return z_impl_k_sleep(timeout);
    3e54:	20a4      	movs	r0, #164	; 0xa4
    3e56:	2100      	movs	r1, #0
    3e58:	f004 fb76 	bl	8548 <z_impl_k_sleep>
}
    3e5c:	e7f1      	b.n	3e42 <on_failed_write+0xa>
    3e5e:	bf00      	nop
    3e60:	20000a2a 	.word	0x20000a2a
    3e64:	20000a2b 	.word	0x20000a2b

00003e68 <on_write>:
{
    3e68:	b538      	push	{r3, r4, r5, lr}
    3e6a:	4604      	mov	r4, r0
	host_present = true;
    3e6c:	4b0a      	ldr	r3, [pc, #40]	; (3e98 <on_write+0x30>)
    3e6e:	2201      	movs	r2, #1
    3e70:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    3e72:	4b0a      	ldr	r3, [pc, #40]	; (3e9c <on_write+0x34>)
    3e74:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    3e76:	b903      	cbnz	r3, 3e7a <on_write+0x12>
}
    3e78:	bd38      	pop	{r3, r4, r5, pc}
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    3e7a:	2000      	movs	r0, #0
    3e7c:	f003 fb52 	bl	7524 <SEGGER_RTT_HasDataUp>
    3e80:	2800      	cmp	r0, #0
    3e82:	d0f9      	beq.n	3e78 <on_write+0x10>
    3e84:	4b04      	ldr	r3, [pc, #16]	; (3e98 <on_write+0x30>)
    3e86:	781b      	ldrb	r3, [r3, #0]
    3e88:	2b00      	cmp	r3, #0
    3e8a:	d0f5      	beq.n	3e78 <on_write+0x10>
			on_failed_write(retry_cnt--);
    3e8c:	1e65      	subs	r5, r4, #1
    3e8e:	4620      	mov	r0, r4
    3e90:	f7ff ffd2 	bl	3e38 <on_failed_write>
    3e94:	462c      	mov	r4, r5
    3e96:	e7f0      	b.n	3e7a <on_write+0x12>
    3e98:	20000a2a 	.word	0x20000a2a
    3e9c:	20000a2b 	.word	0x20000a2b

00003ea0 <data_out_block_mode>:
{
    3ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ea4:	4606      	mov	r6, r0
    3ea6:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    3ea8:	2704      	movs	r7, #4
    3eaa:	e00d      	b.n	3ec8 <data_out_block_mode+0x28>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    3eac:	462a      	mov	r2, r5
    3eae:	4631      	mov	r1, r6
    3eb0:	2000      	movs	r0, #0
    3eb2:	f003 fa9d 	bl	73f0 <SEGGER_RTT_WriteSkipNoLock>
    3eb6:	4604      	mov	r4, r0
    3eb8:	e01c      	b.n	3ef4 <data_out_block_mode+0x54>
			on_write(retry_cnt);
    3eba:	4638      	mov	r0, r7
    3ebc:	f7ff ffd4 	bl	3e68 <on_write>
	} while ((ret == 0) && host_present);
    3ec0:	bb1c      	cbnz	r4, 3f0a <data_out_block_mode+0x6a>
    3ec2:	4b16      	ldr	r3, [pc, #88]	; (3f1c <data_out_block_mode+0x7c>)
    3ec4:	781b      	ldrb	r3, [r3, #0]
    3ec6:	b303      	cbz	r3, 3f0a <data_out_block_mode+0x6a>
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    3ec8:	4b15      	ldr	r3, [pc, #84]	; (3f20 <data_out_block_mode+0x80>)
    3eca:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
    3ecc:	2b00      	cmp	r3, #0
    3ece:	d1ed      	bne.n	3eac <data_out_block_mode+0xc>
	return z_impl_k_mutex_lock(mutex, timeout);
    3ed0:	f8df 8050 	ldr.w	r8, [pc, #80]	; 3f24 <data_out_block_mode+0x84>
    3ed4:	f04f 32ff 	mov.w	r2, #4294967295
    3ed8:	f04f 33ff 	mov.w	r3, #4294967295
    3edc:	4640      	mov	r0, r8
    3ede:	f003 fe87 	bl	7bf0 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    3ee2:	462a      	mov	r2, r5
    3ee4:	4631      	mov	r1, r6
    3ee6:	2000      	movs	r0, #0
    3ee8:	f003 fa82 	bl	73f0 <SEGGER_RTT_WriteSkipNoLock>
    3eec:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    3eee:	4640      	mov	r0, r8
    3ef0:	f003 ff08 	bl	7d04 <z_impl_k_mutex_unlock>
		if (ret) {
    3ef4:	2c00      	cmp	r4, #0
    3ef6:	d1e0      	bne.n	3eba <data_out_block_mode+0x1a>
		} else if (host_present) {
    3ef8:	4b08      	ldr	r3, [pc, #32]	; (3f1c <data_out_block_mode+0x7c>)
    3efa:	781b      	ldrb	r3, [r3, #0]
    3efc:	2b00      	cmp	r3, #0
    3efe:	d0df      	beq.n	3ec0 <data_out_block_mode+0x20>
			retry_cnt--;
    3f00:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    3f02:	4638      	mov	r0, r7
    3f04:	f7ff ff98 	bl	3e38 <on_failed_write>
    3f08:	e7da      	b.n	3ec0 <data_out_block_mode+0x20>
	return ((ret == 0) && host_present) ? 0 : length;
    3f0a:	b914      	cbnz	r4, 3f12 <data_out_block_mode+0x72>
    3f0c:	4b03      	ldr	r3, [pc, #12]	; (3f1c <data_out_block_mode+0x7c>)
    3f0e:	781b      	ldrb	r3, [r3, #0]
    3f10:	b903      	cbnz	r3, 3f14 <data_out_block_mode+0x74>
    3f12:	462c      	mov	r4, r5
}
    3f14:	4620      	mov	r0, r4
    3f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3f1a:	bf00      	nop
    3f1c:	20000a2a 	.word	0x20000a2a
    3f20:	20000a2b 	.word	0x20000a2b
    3f24:	20000104 	.word	0x20000104

00003f28 <panic>:

static void panic(struct log_backend const *const backend)
{
    3f28:	b508      	push	{r3, lr}
	panic_mode = true;
    3f2a:	4b03      	ldr	r3, [pc, #12]	; (3f38 <panic+0x10>)
    3f2c:	2201      	movs	r2, #1
    3f2e:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    3f30:	4802      	ldr	r0, [pc, #8]	; (3f3c <panic+0x14>)
    3f32:	f005 fed4 	bl	9cde <log_output_flush>
	log_backend_std_panic(&log_output_rtt);
}
    3f36:	bd08      	pop	{r3, pc}
    3f38:	20000a2b 	.word	0x20000a2b
    3f3c:	0000b2f4 	.word	0x0000b2f4

00003f40 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    3f40:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    3f42:	4802      	ldr	r0, [pc, #8]	; (3f4c <dropped+0xc>)
    3f44:	f7ff ff30 	bl	3da8 <log_output_dropped_process>
	ARG_UNUSED(backend);

	log_backend_std_dropped(&log_output_rtt, cnt);
}
    3f48:	bd08      	pop	{r3, pc}
    3f4a:	bf00      	nop
    3f4c:	0000b2f4 	.word	0x0000b2f4

00003f50 <put>:
{
    3f50:	b510      	push	{r4, lr}
    3f52:	460c      	mov	r4, r1
	log_msg_get(msg);
    3f54:	4608      	mov	r0, r1
    3f56:	f005 fcaf 	bl	98b8 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    3f5a:	220f      	movs	r2, #15
    3f5c:	4621      	mov	r1, r4
    3f5e:	4803      	ldr	r0, [pc, #12]	; (3f6c <put+0x1c>)
    3f60:	f005 fee6 	bl	9d30 <log_output_msg_process>
	log_msg_put(msg);
    3f64:	4620      	mov	r0, r4
    3f66:	f005 fccb 	bl	9900 <log_msg_put>
}
    3f6a:	bd10      	pop	{r4, pc}
    3f6c:	0000b2f4 	.word	0x0000b2f4

00003f70 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    3f70:	b570      	push	{r4, r5, r6, lr}
    3f72:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
    3f74:	4b2c      	ldr	r3, [pc, #176]	; (4028 <pm_system_resume+0xb8>)
    3f76:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    3f78:	f004 031f 	and.w	r3, r4, #31
    3f7c:	2201      	movs	r2, #1
    3f7e:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3f80:	0961      	lsrs	r1, r4, #5
    3f82:	4b2a      	ldr	r3, [pc, #168]	; (402c <pm_system_resume+0xbc>)
    3f84:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3f88:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3f8a:	f3bf 8f5b 	dmb	ish
    3f8e:	e853 1f00 	ldrex	r1, [r3]
    3f92:	ea01 0500 	and.w	r5, r1, r0
    3f96:	e843 5600 	strex	r6, r5, [r3]
    3f9a:	2e00      	cmp	r6, #0
    3f9c:	d1f7      	bne.n	3f8e <pm_system_resume+0x1e>
    3f9e:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    3fa2:	420a      	tst	r2, r1
    3fa4:	d03d      	beq.n	4022 <pm_system_resume+0xb2>
		exit_pos_ops(z_power_states[id]);
    3fa6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    3faa:	009a      	lsls	r2, r3, #2
    3fac:	4b20      	ldr	r3, [pc, #128]	; (4030 <pm_system_resume+0xc0>)
    3fae:	4413      	add	r3, r2
    3fb0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3fb4:	ab04      	add	r3, sp, #16
    3fb6:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    3fba:	4b1e      	ldr	r3, [pc, #120]	; (4034 <pm_system_resume+0xc4>)
    3fbc:	b163      	cbz	r3, 3fd8 <pm_system_resume+0x68>
		pm_power_state_exit_post_ops(info);
    3fbe:	f005 ff94 	bl	9eea <pm_power_state_exit_post_ops>
	__asm__ volatile(
    3fc2:	f04f 0320 	mov.w	r3, #32
    3fc6:	f3ef 8611 	mrs	r6, BASEPRI
    3fca:	f383 8812 	msr	BASEPRI_MAX, r3
    3fce:	f3bf 8f6f 	isb	sy
    3fd2:	4b19      	ldr	r3, [pc, #100]	; (4038 <pm_system_resume+0xc8>)
    3fd4:	681d      	ldr	r5, [r3, #0]
    3fd6:	e00a      	b.n	3fee <pm_system_resume+0x7e>
	__asm__ volatile(
    3fd8:	2300      	movs	r3, #0
    3fda:	f383 8811 	msr	BASEPRI, r3
    3fde:	f3bf 8f6f 	isb	sy
}
    3fe2:	e7ee      	b.n	3fc2 <pm_system_resume+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3fe4:	462b      	mov	r3, r5
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    3fe6:	b10d      	cbz	r5, 3fec <pm_system_resume+0x7c>
	return node->next;
    3fe8:	682b      	ldr	r3, [r5, #0]
    3fea:	b16b      	cbz	r3, 4008 <pm_system_resume+0x98>
{
    3fec:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3fee:	b15d      	cbz	r5, 4008 <pm_system_resume+0x98>
			callback = notifier->state_exit;
    3ff0:	68aa      	ldr	r2, [r5, #8]
		if (callback) {
    3ff2:	2a00      	cmp	r2, #0
    3ff4:	d0f6      	beq.n	3fe4 <pm_system_resume+0x74>
			callback(z_power_states[_current_cpu->id].state);
    3ff6:	4b0c      	ldr	r3, [pc, #48]	; (4028 <pm_system_resume+0xb8>)
    3ff8:	7d1b      	ldrb	r3, [r3, #20]
    3ffa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3ffe:	0099      	lsls	r1, r3, #2
    4000:	4b0b      	ldr	r3, [pc, #44]	; (4030 <pm_system_resume+0xc0>)
    4002:	5c58      	ldrb	r0, [r3, r1]
    4004:	4790      	blx	r2
    4006:	e7ed      	b.n	3fe4 <pm_system_resume+0x74>
	__asm__ volatile(
    4008:	f386 8811 	msr	BASEPRI, r6
    400c:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    4010:	4807      	ldr	r0, [pc, #28]	; (4030 <pm_system_resume+0xc0>)
    4012:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    4016:	00a2      	lsls	r2, r4, #2
    4018:	1881      	adds	r1, r0, r2
    401a:	2300      	movs	r3, #0
    401c:	5083      	str	r3, [r0, r2]
    401e:	604b      	str	r3, [r1, #4]
    4020:	608b      	str	r3, [r1, #8]
			0, 0};
	}
}
    4022:	b004      	add	sp, #16
    4024:	bd70      	pop	{r4, r5, r6, pc}
    4026:	bf00      	nop
    4028:	200009ec 	.word	0x200009ec
    402c:	20000464 	.word	0x20000464
    4030:	20000468 	.word	0x20000468
    4034:	00009eeb 	.word	0x00009eeb
    4038:	2000045c 	.word	0x2000045c

0000403c <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    403c:	b5f0      	push	{r4, r5, r6, r7, lr}
    403e:	b089      	sub	sp, #36	; 0x24
    4040:	4605      	mov	r5, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    4042:	4b55      	ldr	r3, [pc, #340]	; (4198 <pm_system_suspend+0x15c>)
    4044:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    4046:	f004 031f 	and.w	r3, r4, #31
    404a:	2201      	movs	r2, #1
    404c:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    404e:	0961      	lsrs	r1, r4, #5
    4050:	4b52      	ldr	r3, [pc, #328]	; (419c <pm_system_suspend+0x160>)
    4052:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4056:	f3bf 8f5b 	dmb	ish
    405a:	e853 1f00 	ldrex	r1, [r3]
    405e:	ea41 0002 	orr.w	r0, r1, r2
    4062:	e843 0600 	strex	r6, r0, [r3]
    4066:	2e00      	cmp	r6, #0
    4068:	d1f7      	bne.n	405a <pm_system_suspend+0x1e>
    406a:	f3bf 8f5b 	dmb	ish

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    406e:	420a      	tst	r2, r1
    4070:	d017      	beq.n	40a2 <pm_system_suspend+0x66>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    4072:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    4076:	4a4a      	ldr	r2, [pc, #296]	; (41a0 <pm_system_suspend+0x164>)
    4078:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    407c:	2b00      	cmp	r3, #0
    407e:	f000 8088 	beq.w	4192 <pm_system_suspend+0x156>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    4082:	f1b5 3fff 	cmp.w	r5, #4294967295
    4086:	d11c      	bne.n	40c2 <pm_system_suspend+0x86>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    4088:	f003 ff4c 	bl	7f24 <k_sched_lock>
	__asm__ volatile(
    408c:	f04f 0320 	mov.w	r3, #32
    4090:	f3ef 8611 	mrs	r6, BASEPRI
    4094:	f383 8812 	msr	BASEPRI_MAX, r3
    4098:	f3bf 8f6f 	isb	sy
	return list->head;
    409c:	4b41      	ldr	r3, [pc, #260]	; (41a4 <pm_system_suspend+0x168>)
    409e:	681d      	ldr	r5, [r3, #0]
    40a0:	e02a      	b.n	40f8 <pm_system_suspend+0xbc>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    40a2:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    40a6:	4b3e      	ldr	r3, [pc, #248]	; (41a0 <pm_system_suspend+0x164>)
    40a8:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    40ac:	466f      	mov	r7, sp
    40ae:	462a      	mov	r2, r5
    40b0:	4621      	mov	r1, r4
    40b2:	4638      	mov	r0, r7
    40b4:	f005 fe7b 	bl	9dae <pm_policy_next_state>
    40b8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    40bc:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    40c0:	e7d7      	b.n	4072 <pm_system_suspend+0x36>
		     k_us_to_ticks_ceil32(
    40c2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    40c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    40ca:	689b      	ldr	r3, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    40cc:	0c59      	lsrs	r1, r3, #17
    40ce:	03d8      	lsls	r0, r3, #15
    40d0:	4e35      	ldr	r6, [pc, #212]	; (41a8 <pm_system_suspend+0x16c>)
    40d2:	4a36      	ldr	r2, [pc, #216]	; (41ac <pm_system_suspend+0x170>)
    40d4:	2300      	movs	r3, #0
    40d6:	1980      	adds	r0, r0, r6
    40d8:	f04f 0600 	mov.w	r6, #0
    40dc:	eb46 0101 	adc.w	r1, r6, r1
    40e0:	f7fc ff9e 	bl	1020 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    40e4:	2101      	movs	r1, #1
    40e6:	1a28      	subs	r0, r5, r0
    40e8:	f006 fdc1 	bl	ac6e <z_set_timeout_expiry>
    40ec:	e7cc      	b.n	4088 <pm_system_suspend+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    40ee:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    40f0:	b10d      	cbz	r5, 40f6 <pm_system_suspend+0xba>
	return node->next;
    40f2:	682b      	ldr	r3, [r5, #0]
    40f4:	b16b      	cbz	r3, 4112 <pm_system_suspend+0xd6>
{
    40f6:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    40f8:	b15d      	cbz	r5, 4112 <pm_system_suspend+0xd6>
			callback = notifier->state_entry;
    40fa:	686a      	ldr	r2, [r5, #4]
		if (callback) {
    40fc:	2a00      	cmp	r2, #0
    40fe:	d0f6      	beq.n	40ee <pm_system_suspend+0xb2>
			callback(z_power_states[_current_cpu->id].state);
    4100:	4b25      	ldr	r3, [pc, #148]	; (4198 <pm_system_suspend+0x15c>)
    4102:	7d1b      	ldrb	r3, [r3, #20]
    4104:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4108:	4925      	ldr	r1, [pc, #148]	; (41a0 <pm_system_suspend+0x164>)
    410a:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    410e:	4790      	blx	r2
    4110:	e7ed      	b.n	40ee <pm_system_suspend+0xb2>
	__asm__ volatile(
    4112:	f386 8811 	msr	BASEPRI, r6
    4116:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    411a:	f004 031f 	and.w	r3, r4, #31
    411e:	2101      	movs	r1, #1
    4120:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    4122:	0963      	lsrs	r3, r4, #5
    4124:	4a22      	ldr	r2, [pc, #136]	; (41b0 <pm_system_suspend+0x174>)
    4126:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    412a:	f3bf 8f5b 	dmb	ish
    412e:	e853 2f00 	ldrex	r2, [r3]
    4132:	430a      	orrs	r2, r1
    4134:	e843 2000 	strex	r0, r2, [r3]
    4138:	2800      	cmp	r0, #0
    413a:	d1f8      	bne.n	412e <pm_system_suspend+0xf2>
    413c:	f3bf 8f5b 	dmb	ish
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    4140:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    4144:	4a16      	ldr	r2, [pc, #88]	; (41a0 <pm_system_suspend+0x164>)
    4146:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    414a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    414e:	ab08      	add	r3, sp, #32
    4150:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    4154:	4b17      	ldr	r3, [pc, #92]	; (41b4 <pm_system_suspend+0x178>)
    4156:	b10b      	cbz	r3, 415c <pm_system_suspend+0x120>
		pm_power_state_set(info);
    4158:	f005 feb4 	bl	9ec4 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    415c:	f7ff ff08 	bl	3f70 <pm_system_resume>
	k_sched_unlock();
    4160:	f004 f8de 	bl	8320 <k_sched_unlock>
	bool ret = true;
    4164:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
    4166:	f004 021f 	and.w	r2, r4, #31
    416a:	2301      	movs	r3, #1
    416c:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    416e:	0964      	lsrs	r4, r4, #5
    4170:	4a0a      	ldr	r2, [pc, #40]	; (419c <pm_system_suspend+0x160>)
    4172:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    4176:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4178:	f3bf 8f5b 	dmb	ish
    417c:	e854 2f00 	ldrex	r2, [r4]
    4180:	401a      	ands	r2, r3
    4182:	e844 2100 	strex	r1, r2, [r4]
    4186:	2900      	cmp	r1, #0
    4188:	d1f8      	bne.n	417c <pm_system_suspend+0x140>
    418a:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    418e:	b009      	add	sp, #36	; 0x24
    4190:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = false;
    4192:	2000      	movs	r0, #0
    4194:	e7e7      	b.n	4166 <pm_system_suspend+0x12a>
    4196:	bf00      	nop
    4198:	200009ec 	.word	0x200009ec
    419c:	20000474 	.word	0x20000474
    41a0:	20000468 	.word	0x20000468
    41a4:	2000045c 	.word	0x2000045c
    41a8:	000f423f 	.word	0x000f423f
    41ac:	000f4240 	.word	0x000f4240
    41b0:	20000464 	.word	0x20000464
    41b4:	00009ec5 	.word	0x00009ec5

000041b8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    41b8:	4901      	ldr	r1, [pc, #4]	; (41c0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    41ba:	2210      	movs	r2, #16
	str	r2, [r1]
    41bc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    41be:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    41c0:	e000ed10 	.word	0xe000ed10

000041c4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    41c4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    41c6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    41c8:	f380 8811 	msr	BASEPRI, r0
	isb
    41cc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    41d0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    41d4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    41d6:	b662      	cpsie	i
	isb
    41d8:	f3bf 8f6f 	isb	sy

	bx	lr
    41dc:	4770      	bx	lr
    41de:	bf00      	nop

000041e0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    41e0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    41e2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    41e4:	f381 8811 	msr	BASEPRI, r1

	wfe
    41e8:	bf20      	wfe

	msr	BASEPRI, r0
    41ea:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    41ee:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    41f0:	4770      	bx	lr
    41f2:	bf00      	nop

000041f4 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    41f4:	b570      	push	{r4, r5, r6, lr}
    41f6:	b082      	sub	sp, #8
    41f8:	4604      	mov	r4, r0
    41fa:	4d1f      	ldr	r5, [pc, #124]	; (4278 <esf_dump+0x84>)
    41fc:	4b1f      	ldr	r3, [pc, #124]	; (427c <esf_dump+0x88>)
    41fe:	1aed      	subs	r5, r5, r3
    4200:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    4202:	2601      	movs	r6, #1
    4204:	f04f 0300 	mov.w	r3, #0
    4208:	f366 0302 	bfi	r3, r6, #0, #3
    420c:	f36f 03c5 	bfc	r3, #3, #3
    4210:	f365 138f 	bfi	r3, r5, #6, #10
    4214:	f8ad 3000 	strh.w	r3, [sp]
    4218:	6883      	ldr	r3, [r0, #8]
    421a:	6842      	ldr	r2, [r0, #4]
    421c:	6801      	ldr	r1, [r0, #0]
    421e:	4818      	ldr	r0, [pc, #96]	; (4280 <esf_dump+0x8c>)
    4220:	f7ff f9f2 	bl	3608 <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    4224:	f04f 0300 	mov.w	r3, #0
    4228:	f366 0302 	bfi	r3, r6, #0, #3
    422c:	f36f 03c5 	bfc	r3, #3, #3
    4230:	f365 138f 	bfi	r3, r5, #6, #10
    4234:	f8ad 3000 	strh.w	r3, [sp]
    4238:	6963      	ldr	r3, [r4, #20]
    423a:	6922      	ldr	r2, [r4, #16]
    423c:	68e1      	ldr	r1, [r4, #12]
    423e:	4811      	ldr	r0, [pc, #68]	; (4284 <esf_dump+0x90>)
    4240:	f7ff f9e2 	bl	3608 <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    4244:	f04f 0200 	mov.w	r2, #0
    4248:	f366 0202 	bfi	r2, r6, #0, #3
    424c:	f36f 02c5 	bfc	r2, #3, #3
    4250:	f365 128f 	bfi	r2, r5, #6, #10
    4254:	69e1      	ldr	r1, [r4, #28]
    4256:	480c      	ldr	r0, [pc, #48]	; (4288 <esf_dump+0x94>)
    4258:	f7ff fa14 	bl	3684 <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    425c:	f04f 0200 	mov.w	r2, #0
    4260:	f366 0202 	bfi	r2, r6, #0, #3
    4264:	f36f 02c5 	bfc	r2, #3, #3
    4268:	f365 128f 	bfi	r2, r5, #6, #10
    426c:	69a1      	ldr	r1, [r4, #24]
    426e:	4807      	ldr	r0, [pc, #28]	; (428c <esf_dump+0x98>)
    4270:	f7ff fa08 	bl	3684 <log_1>
		esf->basic.pc);
}
    4274:	b002      	add	sp, #8
    4276:	bd70      	pop	{r4, r5, r6, pc}
    4278:	0000af98 	.word	0x0000af98
    427c:	0000af70 	.word	0x0000af70
    4280:	0000b308 	.word	0x0000b308
    4284:	0000b338 	.word	0x0000b338
    4288:	0000b368 	.word	0x0000b368
    428c:	0000b378 	.word	0x0000b378

00004290 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    4290:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    4292:	2b00      	cmp	r3, #0
    4294:	db08      	blt.n	42a8 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4296:	f000 001f 	and.w	r0, r0, #31
    429a:	095b      	lsrs	r3, r3, #5
    429c:	2201      	movs	r2, #1
    429e:	fa02 f000 	lsl.w	r0, r2, r0
    42a2:	4a02      	ldr	r2, [pc, #8]	; (42ac <arch_irq_enable+0x1c>)
    42a4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    42a8:	4770      	bx	lr
    42aa:	bf00      	nop
    42ac:	e000e100 	.word	0xe000e100

000042b0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    42b0:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    42b2:	2b00      	cmp	r3, #0
    42b4:	db0d      	blt.n	42d2 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    42b6:	f000 001f 	and.w	r0, r0, #31
    42ba:	095b      	lsrs	r3, r3, #5
    42bc:	2201      	movs	r2, #1
    42be:	fa02 f000 	lsl.w	r0, r2, r0
    42c2:	3320      	adds	r3, #32
    42c4:	4a03      	ldr	r2, [pc, #12]	; (42d4 <arch_irq_disable+0x24>)
    42c6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    42ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    42ce:	f3bf 8f6f 	isb	sy
}
    42d2:	4770      	bx	lr
    42d4:	e000e100 	.word	0xe000e100

000042d8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    42d8:	0942      	lsrs	r2, r0, #5
    42da:	4b05      	ldr	r3, [pc, #20]	; (42f0 <arch_irq_is_enabled+0x18>)
    42dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    42e0:	f000 001f 	and.w	r0, r0, #31
    42e4:	2301      	movs	r3, #1
    42e6:	fa03 f000 	lsl.w	r0, r3, r0
}
    42ea:	4010      	ands	r0, r2
    42ec:	4770      	bx	lr
    42ee:	bf00      	nop
    42f0:	e000e100 	.word	0xe000e100

000042f4 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    42f4:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    42f6:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    42f8:	2b00      	cmp	r3, #0
    42fa:	db08      	blt.n	430e <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    42fc:	0149      	lsls	r1, r1, #5
    42fe:	b2c9      	uxtb	r1, r1
    4300:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4304:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4308:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    430c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    430e:	f000 000f 	and.w	r0, r0, #15
    4312:	0149      	lsls	r1, r1, #5
    4314:	b2c9      	uxtb	r1, r1
    4316:	4b01      	ldr	r3, [pc, #4]	; (431c <z_arm_irq_priority_set+0x28>)
    4318:	5419      	strb	r1, [r3, r0]
}
    431a:	4770      	bx	lr
    431c:	e000ed14 	.word	0xe000ed14

00004320 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    4320:	bf30      	wfi
    b z_SysNmiOnReset
    4322:	f7ff bffd 	b.w	4320 <z_SysNmiOnReset>
    4326:	bf00      	nop

00004328 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    4328:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    432a:	4b0b      	ldr	r3, [pc, #44]	; (4358 <z_arm_prep_c+0x30>)
    432c:	4a0b      	ldr	r2, [pc, #44]	; (435c <z_arm_prep_c+0x34>)
    432e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4332:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    4334:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4338:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    433c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4340:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    4348:	f003 faac 	bl	78a4 <z_bss_zero>
	z_data_copy();
    434c:	f004 f956 	bl	85fc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    4350:	f000 fcbc 	bl	4ccc <z_arm_interrupt_init>
	z_cstart();
    4354:	f003 fab2 	bl	78bc <z_cstart>
    4358:	e000ed00 	.word	0xe000ed00
    435c:	00000000 	.word	0x00000000

00004360 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    4360:	4a0a      	ldr	r2, [pc, #40]	; (438c <arch_swap+0x2c>)
    4362:	6893      	ldr	r3, [r2, #8]
    4364:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    4368:	4909      	ldr	r1, [pc, #36]	; (4390 <arch_swap+0x30>)
    436a:	6809      	ldr	r1, [r1, #0]
    436c:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4370:	4908      	ldr	r1, [pc, #32]	; (4394 <arch_swap+0x34>)
    4372:	684b      	ldr	r3, [r1, #4]
    4374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4378:	604b      	str	r3, [r1, #4]
    437a:	2300      	movs	r3, #0
    437c:	f383 8811 	msr	BASEPRI, r3
    4380:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    4384:	6893      	ldr	r3, [r2, #8]
}
    4386:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    438a:	4770      	bx	lr
    438c:	200009ec 	.word	0x200009ec
    4390:	0000ba1c 	.word	0x0000ba1c
    4394:	e000ed00 	.word	0xe000ed00

00004398 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4398:	4913      	ldr	r1, [pc, #76]	; (43e8 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    439a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    439c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    43a0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    43a2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    43a6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    43aa:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    43ac:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    43b0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    43b4:	4f0d      	ldr	r7, [pc, #52]	; (43ec <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    43b6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    43ba:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    43bc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    43be:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    43c0:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    43c4:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    43c6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    43ca:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    43ce:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    43d0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    43d2:	f000 fd1d 	bl	4e10 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    43d6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    43da:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    43de:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    43e2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    43e6:	4770      	bx	lr
    ldr r1, =_kernel
    43e8:	200009ec 	.word	0x200009ec
    ldr v4, =_SCS_ICSR
    43ec:	e000ed04 	.word	0xe000ed04

000043f0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    43f0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    43f4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    43f6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    43fa:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    43fe:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    4400:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    4404:	2902      	cmp	r1, #2
    beq _oops
    4406:	d0ff      	beq.n	4408 <_oops>

00004408 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    4408:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    440a:	f005 fce1 	bl	9dd0 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    440e:	bd01      	pop	{r0, pc}

00004410 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    4410:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    4412:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    4416:	490d      	ldr	r1, [pc, #52]	; (444c <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    4418:	f021 0101 	bic.w	r1, r1, #1
    441c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    4420:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    4424:	9b01      	ldr	r3, [sp, #4]
    4426:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    442a:	9b02      	ldr	r3, [sp, #8]
    442c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    4430:	9b03      	ldr	r3, [sp, #12]
    4432:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    4436:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    443a:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    443e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    4440:	2300      	movs	r3, #0
    4442:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    4446:	bc10      	pop	{r4}
    4448:	4770      	bx	lr
    444a:	bf00      	nop
    444c:	00009749 	.word	0x00009749

00004450 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    4450:	4b16      	ldr	r3, [pc, #88]	; (44ac <z_check_thread_stack_fail+0x5c>)
    4452:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    4454:	b1da      	cbz	r2, 448e <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    4456:	f110 0f16 	cmn.w	r0, #22
    445a:	d01a      	beq.n	4492 <z_check_thread_stack_fail+0x42>
{
    445c:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    445e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    4462:	f1a3 0420 	sub.w	r4, r3, #32
    4466:	4284      	cmp	r4, r0
    4468:	d805      	bhi.n	4476 <z_check_thread_stack_fail+0x26>
    446a:	4283      	cmp	r3, r0
    446c:	d908      	bls.n	4480 <z_check_thread_stack_fail+0x30>
    446e:	428b      	cmp	r3, r1
    4470:	d808      	bhi.n	4484 <z_check_thread_stack_fail+0x34>
    4472:	2100      	movs	r1, #0
    4474:	e000      	b.n	4478 <z_check_thread_stack_fail+0x28>
    4476:	2100      	movs	r1, #0
    4478:	b931      	cbnz	r1, 4488 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    447a:	2000      	movs	r0, #0
}
    447c:	bc10      	pop	{r4}
    447e:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    4480:	2100      	movs	r1, #0
    4482:	e7f9      	b.n	4478 <z_check_thread_stack_fail+0x28>
    4484:	2101      	movs	r1, #1
    4486:	e7f7      	b.n	4478 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
    4488:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    448c:	e7f6      	b.n	447c <z_check_thread_stack_fail+0x2c>
		return 0;
    448e:	2000      	movs	r0, #0
    4490:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    4492:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    4496:	428b      	cmp	r3, r1
    4498:	bf94      	ite	ls
    449a:	2100      	movls	r1, #0
    449c:	2101      	movhi	r1, #1
    449e:	b909      	cbnz	r1, 44a4 <z_check_thread_stack_fail+0x54>
	return 0;
    44a0:	2000      	movs	r0, #0
}
    44a2:	4770      	bx	lr
		return thread->stack_info.start;
    44a4:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    44a8:	4770      	bx	lr
    44aa:	bf00      	nop
    44ac:	200009ec 	.word	0x200009ec

000044b0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    44b0:	b508      	push	{r3, lr}
    44b2:	460d      	mov	r5, r1
    44b4:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    44b6:	4b08      	ldr	r3, [pc, #32]	; (44d8 <arch_switch_to_main_thread+0x28>)
    44b8:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    44ba:	f000 fca9 	bl	4e10 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    44be:	4620      	mov	r0, r4
    44c0:	f385 8809 	msr	PSP, r5
    44c4:	2100      	movs	r1, #0
    44c6:	b663      	cpsie	if
    44c8:	f381 8811 	msr	BASEPRI, r1
    44cc:	f3bf 8f6f 	isb	sy
    44d0:	2200      	movs	r2, #0
    44d2:	2300      	movs	r3, #0
    44d4:	f005 f938 	bl	9748 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    44d8:	200009ec 	.word	0x200009ec

000044dc <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    44dc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    44de:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    44e0:	4a0b      	ldr	r2, [pc, #44]	; (4510 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    44e2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    44e4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    44e6:	bf1e      	ittt	ne
	movne	r1, #0
    44e8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    44ea:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    44ec:	f006 fa16 	blne	a91c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    44f0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    44f2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    44f6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    44fa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    44fe:	4905      	ldr	r1, [pc, #20]	; (4514 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4500:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    4502:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    4504:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    4506:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    450a:	4903      	ldr	r1, [pc, #12]	; (4518 <_isr_wrapper+0x3c>)
	bx r1
    450c:	4708      	bx	r1
    450e:	0000      	.short	0x0000
	ldr r2, =_kernel
    4510:	200009ec 	.word	0x200009ec
	ldr r1, =_sw_isr_table
    4514:	0000ae38 	.word	0x0000ae38
	ldr r1, =z_arm_int_exit
    4518:	0000451d 	.word	0x0000451d

0000451c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    451c:	4b04      	ldr	r3, [pc, #16]	; (4530 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    451e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4520:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    4522:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4524:	d003      	beq.n	452e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4526:	4903      	ldr	r1, [pc, #12]	; (4534 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    452c:	600a      	str	r2, [r1, #0]

0000452e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    452e:	4770      	bx	lr
	ldr r3, =_kernel
    4530:	200009ec 	.word	0x200009ec
	ldr r1, =_SCS_ICSR
    4534:	e000ed04 	.word	0xe000ed04

00004538 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    4538:	b508      	push	{r3, lr}
    453a:	4b4e      	ldr	r3, [pc, #312]	; (4674 <usage_fault+0x13c>)
    453c:	4a4e      	ldr	r2, [pc, #312]	; (4678 <usage_fault+0x140>)
    453e:	1a9b      	subs	r3, r3, r2
    4540:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    4542:	f04f 0100 	mov.w	r1, #0
    4546:	2201      	movs	r2, #1
    4548:	f362 0102 	bfi	r1, r2, #0, #3
    454c:	f36f 01c5 	bfc	r1, #3, #3
    4550:	f363 118f 	bfi	r1, r3, #6, #10
    4554:	4849      	ldr	r0, [pc, #292]	; (467c <usage_fault+0x144>)
    4556:	f7ff f907 	bl	3768 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    455a:	4b49      	ldr	r3, [pc, #292]	; (4680 <usage_fault+0x148>)
    455c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    455e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    4562:	d121      	bne.n	45a8 <usage_fault+0x70>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4564:	4b46      	ldr	r3, [pc, #280]	; (4680 <usage_fault+0x148>)
    4566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4568:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    456c:	d12d      	bne.n	45ca <usage_fault+0x92>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    456e:	4b44      	ldr	r3, [pc, #272]	; (4680 <usage_fault+0x148>)
    4570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4572:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    4576:	d139      	bne.n	45ec <usage_fault+0xb4>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4578:	4b41      	ldr	r3, [pc, #260]	; (4680 <usage_fault+0x148>)
    457a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    457c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    4580:	d145      	bne.n	460e <usage_fault+0xd6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4582:	4b3f      	ldr	r3, [pc, #252]	; (4680 <usage_fault+0x148>)
    4584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4586:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    458a:	d151      	bne.n	4630 <usage_fault+0xf8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    458c:	4b3c      	ldr	r3, [pc, #240]	; (4680 <usage_fault+0x148>)
    458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4590:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4594:	d15d      	bne.n	4652 <usage_fault+0x11a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4596:	4a3a      	ldr	r2, [pc, #232]	; (4680 <usage_fault+0x148>)
    4598:	6a93      	ldr	r3, [r2, #40]	; 0x28
    459a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    459e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    45a2:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    45a4:	2000      	movs	r0, #0
    45a6:	bd08      	pop	{r3, pc}
    45a8:	4b32      	ldr	r3, [pc, #200]	; (4674 <usage_fault+0x13c>)
    45aa:	4a33      	ldr	r2, [pc, #204]	; (4678 <usage_fault+0x140>)
    45ac:	1a9b      	subs	r3, r3, r2
    45ae:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
    45b0:	f04f 0100 	mov.w	r1, #0
    45b4:	2201      	movs	r2, #1
    45b6:	f362 0102 	bfi	r1, r2, #0, #3
    45ba:	f36f 01c5 	bfc	r1, #3, #3
    45be:	f363 118f 	bfi	r1, r3, #6, #10
    45c2:	4830      	ldr	r0, [pc, #192]	; (4684 <usage_fault+0x14c>)
    45c4:	f7ff f8d0 	bl	3768 <log_0>
    45c8:	e7cc      	b.n	4564 <usage_fault+0x2c>
    45ca:	4b2a      	ldr	r3, [pc, #168]	; (4674 <usage_fault+0x13c>)
    45cc:	4a2a      	ldr	r2, [pc, #168]	; (4678 <usage_fault+0x140>)
    45ce:	1a9b      	subs	r3, r3, r2
    45d0:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
    45d2:	f04f 0100 	mov.w	r1, #0
    45d6:	2201      	movs	r2, #1
    45d8:	f362 0102 	bfi	r1, r2, #0, #3
    45dc:	f36f 01c5 	bfc	r1, #3, #3
    45e0:	f363 118f 	bfi	r1, r3, #6, #10
    45e4:	4828      	ldr	r0, [pc, #160]	; (4688 <usage_fault+0x150>)
    45e6:	f7ff f8bf 	bl	3768 <log_0>
    45ea:	e7c0      	b.n	456e <usage_fault+0x36>
    45ec:	4b21      	ldr	r3, [pc, #132]	; (4674 <usage_fault+0x13c>)
    45ee:	4a22      	ldr	r2, [pc, #136]	; (4678 <usage_fault+0x140>)
    45f0:	1a9b      	subs	r3, r3, r2
    45f2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
    45f4:	f04f 0100 	mov.w	r1, #0
    45f8:	2201      	movs	r2, #1
    45fa:	f362 0102 	bfi	r1, r2, #0, #3
    45fe:	f36f 01c5 	bfc	r1, #3, #3
    4602:	f363 118f 	bfi	r1, r3, #6, #10
    4606:	4821      	ldr	r0, [pc, #132]	; (468c <usage_fault+0x154>)
    4608:	f7ff f8ae 	bl	3768 <log_0>
    460c:	e7b4      	b.n	4578 <usage_fault+0x40>
    460e:	4b19      	ldr	r3, [pc, #100]	; (4674 <usage_fault+0x13c>)
    4610:	4a19      	ldr	r2, [pc, #100]	; (4678 <usage_fault+0x140>)
    4612:	1a9b      	subs	r3, r3, r2
    4614:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    4616:	f04f 0100 	mov.w	r1, #0
    461a:	2201      	movs	r2, #1
    461c:	f362 0102 	bfi	r1, r2, #0, #3
    4620:	f36f 01c5 	bfc	r1, #3, #3
    4624:	f363 118f 	bfi	r1, r3, #6, #10
    4628:	4819      	ldr	r0, [pc, #100]	; (4690 <usage_fault+0x158>)
    462a:	f7ff f89d 	bl	3768 <log_0>
    462e:	e7a8      	b.n	4582 <usage_fault+0x4a>
    4630:	4b10      	ldr	r3, [pc, #64]	; (4674 <usage_fault+0x13c>)
    4632:	4a11      	ldr	r2, [pc, #68]	; (4678 <usage_fault+0x140>)
    4634:	1a9b      	subs	r3, r3, r2
    4636:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
    4638:	f04f 0100 	mov.w	r1, #0
    463c:	2201      	movs	r2, #1
    463e:	f362 0102 	bfi	r1, r2, #0, #3
    4642:	f36f 01c5 	bfc	r1, #3, #3
    4646:	f363 118f 	bfi	r1, r3, #6, #10
    464a:	4812      	ldr	r0, [pc, #72]	; (4694 <usage_fault+0x15c>)
    464c:	f7ff f88c 	bl	3768 <log_0>
    4650:	e79c      	b.n	458c <usage_fault+0x54>
    4652:	4b08      	ldr	r3, [pc, #32]	; (4674 <usage_fault+0x13c>)
    4654:	4a08      	ldr	r2, [pc, #32]	; (4678 <usage_fault+0x140>)
    4656:	1a9b      	subs	r3, r3, r2
    4658:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    465a:	f04f 0100 	mov.w	r1, #0
    465e:	2201      	movs	r2, #1
    4660:	f362 0102 	bfi	r1, r2, #0, #3
    4664:	f36f 01c5 	bfc	r1, #3, #3
    4668:	f363 118f 	bfi	r1, r3, #6, #10
    466c:	480a      	ldr	r0, [pc, #40]	; (4698 <usage_fault+0x160>)
    466e:	f7ff f87b 	bl	3768 <log_0>
    4672:	e790      	b.n	4596 <usage_fault+0x5e>
    4674:	0000af98 	.word	0x0000af98
    4678:	0000af70 	.word	0x0000af70
    467c:	0000b3a8 	.word	0x0000b3a8
    4680:	e000ed00 	.word	0xe000ed00
    4684:	0000b3c0 	.word	0x0000b3c0
    4688:	0000b3d4 	.word	0x0000b3d4
    468c:	0000b3f0 	.word	0x0000b3f0
    4690:	0000b410 	.word	0x0000b410
    4694:	0000b438 	.word	0x0000b438
    4698:	0000b454 	.word	0x0000b454

0000469c <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    469c:	b508      	push	{r3, lr}
	*recoverable = false;
    469e:	2200      	movs	r2, #0
    46a0:	700a      	strb	r2, [r1, #0]
    46a2:	4b08      	ldr	r3, [pc, #32]	; (46c4 <debug_monitor+0x28>)
    46a4:	4908      	ldr	r1, [pc, #32]	; (46c8 <debug_monitor+0x2c>)
    46a6:	1a5b      	subs	r3, r3, r1
    46a8:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
    46aa:	f04f 0100 	mov.w	r1, #0
    46ae:	2001      	movs	r0, #1
    46b0:	f360 0102 	bfi	r1, r0, #0, #3
    46b4:	f362 01c5 	bfi	r1, r2, #3, #3
    46b8:	f363 118f 	bfi	r1, r3, #6, #10
    46bc:	4803      	ldr	r0, [pc, #12]	; (46cc <debug_monitor+0x30>)
    46be:	f7ff f853 	bl	3768 <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    46c2:	bd08      	pop	{r3, pc}
    46c4:	0000af98 	.word	0x0000af98
    46c8:	0000af70 	.word	0x0000af70
    46cc:	0000b480 	.word	0x0000b480

000046d0 <bus_fault>:
{
    46d0:	b570      	push	{r4, r5, r6, lr}
    46d2:	4605      	mov	r5, r0
    46d4:	460e      	mov	r6, r1
    46d6:	4614      	mov	r4, r2
    46d8:	4b5e      	ldr	r3, [pc, #376]	; (4854 <bus_fault+0x184>)
    46da:	4a5f      	ldr	r2, [pc, #380]	; (4858 <bus_fault+0x188>)
    46dc:	1a9b      	subs	r3, r3, r2
    46de:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    46e0:	f04f 0100 	mov.w	r1, #0
    46e4:	2201      	movs	r2, #1
    46e6:	f362 0102 	bfi	r1, r2, #0, #3
    46ea:	f36f 01c5 	bfc	r1, #3, #3
    46ee:	f363 118f 	bfi	r1, r3, #6, #10
    46f2:	485a      	ldr	r0, [pc, #360]	; (485c <bus_fault+0x18c>)
    46f4:	f7ff f838 	bl	3768 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    46f8:	4b59      	ldr	r3, [pc, #356]	; (4860 <bus_fault+0x190>)
    46fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    46fc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    4700:	d124      	bne.n	474c <bus_fault+0x7c>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4702:	4b57      	ldr	r3, [pc, #348]	; (4860 <bus_fault+0x190>)
    4704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4706:	f413 6f00 	tst.w	r3, #2048	; 0x800
    470a:	d130      	bne.n	476e <bus_fault+0x9e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    470c:	4b54      	ldr	r3, [pc, #336]	; (4860 <bus_fault+0x190>)
    470e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4710:	f413 7f00 	tst.w	r3, #512	; 0x200
    4714:	d13c      	bne.n	4790 <bus_fault+0xc0>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4716:	4b52      	ldr	r3, [pc, #328]	; (4860 <bus_fault+0x190>)
    4718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    471a:	f413 6f80 	tst.w	r3, #1024	; 0x400
    471e:	d165      	bne.n	47ec <bus_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    4720:	4b4f      	ldr	r3, [pc, #316]	; (4860 <bus_fault+0x190>)
    4722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4724:	f413 7f80 	tst.w	r3, #256	; 0x100
    4728:	d171      	bne.n	480e <bus_fault+0x13e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    472a:	4b4d      	ldr	r3, [pc, #308]	; (4860 <bus_fault+0x190>)
    472c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    472e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    4732:	d17d      	bne.n	4830 <bus_fault+0x160>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4734:	4a4a      	ldr	r2, [pc, #296]	; (4860 <bus_fault+0x190>)
    4736:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4738:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    473c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    473e:	2101      	movs	r1, #1
    4740:	4628      	mov	r0, r5
    4742:	f005 fb57 	bl	9df4 <memory_fault_recoverable>
    4746:	7020      	strb	r0, [r4, #0]
}
    4748:	2000      	movs	r0, #0
    474a:	bd70      	pop	{r4, r5, r6, pc}
    474c:	4b41      	ldr	r3, [pc, #260]	; (4854 <bus_fault+0x184>)
    474e:	4a42      	ldr	r2, [pc, #264]	; (4858 <bus_fault+0x188>)
    4750:	1a9b      	subs	r3, r3, r2
    4752:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
    4754:	f04f 0100 	mov.w	r1, #0
    4758:	2201      	movs	r2, #1
    475a:	f362 0102 	bfi	r1, r2, #0, #3
    475e:	f36f 01c5 	bfc	r1, #3, #3
    4762:	f363 118f 	bfi	r1, r3, #6, #10
    4766:	483f      	ldr	r0, [pc, #252]	; (4864 <bus_fault+0x194>)
    4768:	f7fe fffe 	bl	3768 <log_0>
    476c:	e7c9      	b.n	4702 <bus_fault+0x32>
    476e:	4b39      	ldr	r3, [pc, #228]	; (4854 <bus_fault+0x184>)
    4770:	4a39      	ldr	r2, [pc, #228]	; (4858 <bus_fault+0x188>)
    4772:	1a9b      	subs	r3, r3, r2
    4774:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
    4776:	f04f 0100 	mov.w	r1, #0
    477a:	2201      	movs	r2, #1
    477c:	f362 0102 	bfi	r1, r2, #0, #3
    4780:	f36f 01c5 	bfc	r1, #3, #3
    4784:	f363 118f 	bfi	r1, r3, #6, #10
    4788:	4837      	ldr	r0, [pc, #220]	; (4868 <bus_fault+0x198>)
    478a:	f7fe ffed 	bl	3768 <log_0>
    478e:	e7bd      	b.n	470c <bus_fault+0x3c>
    4790:	4b30      	ldr	r3, [pc, #192]	; (4854 <bus_fault+0x184>)
    4792:	4a31      	ldr	r2, [pc, #196]	; (4858 <bus_fault+0x188>)
    4794:	1a9b      	subs	r3, r3, r2
    4796:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
    4798:	f04f 0100 	mov.w	r1, #0
    479c:	2201      	movs	r2, #1
    479e:	f362 0102 	bfi	r1, r2, #0, #3
    47a2:	f36f 01c5 	bfc	r1, #3, #3
    47a6:	f363 118f 	bfi	r1, r3, #6, #10
    47aa:	4830      	ldr	r0, [pc, #192]	; (486c <bus_fault+0x19c>)
    47ac:	f7fe ffdc 	bl	3768 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    47b0:	4b2b      	ldr	r3, [pc, #172]	; (4860 <bus_fault+0x190>)
    47b2:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    47b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    47b6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    47ba:	d0ac      	beq.n	4716 <bus_fault+0x46>
    47bc:	4b25      	ldr	r3, [pc, #148]	; (4854 <bus_fault+0x184>)
    47be:	4a26      	ldr	r2, [pc, #152]	; (4858 <bus_fault+0x188>)
    47c0:	1a9b      	subs	r3, r3, r2
    47c2:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
    47c4:	f04f 0200 	mov.w	r2, #0
    47c8:	2001      	movs	r0, #1
    47ca:	f360 0202 	bfi	r2, r0, #0, #3
    47ce:	f36f 02c5 	bfc	r2, #3, #3
    47d2:	f363 128f 	bfi	r2, r3, #6, #10
    47d6:	4826      	ldr	r0, [pc, #152]	; (4870 <bus_fault+0x1a0>)
    47d8:	f7fe ff54 	bl	3684 <log_1>
			if (from_hard_fault != 0) {
    47dc:	2e00      	cmp	r6, #0
    47de:	d09a      	beq.n	4716 <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    47e0:	4a1f      	ldr	r2, [pc, #124]	; (4860 <bus_fault+0x190>)
    47e2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    47e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    47e8:	6293      	str	r3, [r2, #40]	; 0x28
    47ea:	e794      	b.n	4716 <bus_fault+0x46>
    47ec:	4b19      	ldr	r3, [pc, #100]	; (4854 <bus_fault+0x184>)
    47ee:	4a1a      	ldr	r2, [pc, #104]	; (4858 <bus_fault+0x188>)
    47f0:	1a9b      	subs	r3, r3, r2
    47f2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
    47f4:	f04f 0100 	mov.w	r1, #0
    47f8:	2201      	movs	r2, #1
    47fa:	f362 0102 	bfi	r1, r2, #0, #3
    47fe:	f36f 01c5 	bfc	r1, #3, #3
    4802:	f363 118f 	bfi	r1, r3, #6, #10
    4806:	481b      	ldr	r0, [pc, #108]	; (4874 <bus_fault+0x1a4>)
    4808:	f7fe ffae 	bl	3768 <log_0>
    480c:	e788      	b.n	4720 <bus_fault+0x50>
    480e:	4b11      	ldr	r3, [pc, #68]	; (4854 <bus_fault+0x184>)
    4810:	4a11      	ldr	r2, [pc, #68]	; (4858 <bus_fault+0x188>)
    4812:	1a9b      	subs	r3, r3, r2
    4814:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
    4816:	f04f 0100 	mov.w	r1, #0
    481a:	2201      	movs	r2, #1
    481c:	f362 0102 	bfi	r1, r2, #0, #3
    4820:	f36f 01c5 	bfc	r1, #3, #3
    4824:	f363 118f 	bfi	r1, r3, #6, #10
    4828:	4813      	ldr	r0, [pc, #76]	; (4878 <bus_fault+0x1a8>)
    482a:	f7fe ff9d 	bl	3768 <log_0>
    482e:	e781      	b.n	4734 <bus_fault+0x64>
    4830:	4b08      	ldr	r3, [pc, #32]	; (4854 <bus_fault+0x184>)
    4832:	4a09      	ldr	r2, [pc, #36]	; (4858 <bus_fault+0x188>)
    4834:	1a9b      	subs	r3, r3, r2
    4836:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4838:	f04f 0100 	mov.w	r1, #0
    483c:	2201      	movs	r2, #1
    483e:	f362 0102 	bfi	r1, r2, #0, #3
    4842:	f36f 01c5 	bfc	r1, #3, #3
    4846:	f363 118f 	bfi	r1, r3, #6, #10
    484a:	480c      	ldr	r0, [pc, #48]	; (487c <bus_fault+0x1ac>)
    484c:	f7fe ff8c 	bl	3768 <log_0>
    4850:	e770      	b.n	4734 <bus_fault+0x64>
    4852:	bf00      	nop
    4854:	0000af98 	.word	0x0000af98
    4858:	0000af70 	.word	0x0000af70
    485c:	0000b4a4 	.word	0x0000b4a4
    4860:	e000ed00 	.word	0xe000ed00
    4864:	0000b4bc 	.word	0x0000b4bc
    4868:	0000b4d0 	.word	0x0000b4d0
    486c:	0000b4e4 	.word	0x0000b4e4
    4870:	0000b500 	.word	0x0000b500
    4874:	0000b518 	.word	0x0000b518
    4878:	0000b534 	.word	0x0000b534
    487c:	0000b54c 	.word	0x0000b54c

00004880 <mem_manage_fault>:
{
    4880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4882:	4605      	mov	r5, r0
    4884:	460c      	mov	r4, r1
    4886:	4616      	mov	r6, r2
    4888:	4b64      	ldr	r3, [pc, #400]	; (4a1c <mem_manage_fault+0x19c>)
    488a:	4a65      	ldr	r2, [pc, #404]	; (4a20 <mem_manage_fault+0x1a0>)
    488c:	1a9b      	subs	r3, r3, r2
    488e:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    4890:	f04f 0100 	mov.w	r1, #0
    4894:	2201      	movs	r2, #1
    4896:	f362 0102 	bfi	r1, r2, #0, #3
    489a:	f36f 01c5 	bfc	r1, #3, #3
    489e:	f363 118f 	bfi	r1, r3, #6, #10
    48a2:	4860      	ldr	r0, [pc, #384]	; (4a24 <mem_manage_fault+0x1a4>)
    48a4:	f7fe ff60 	bl	3768 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    48a8:	4b5f      	ldr	r3, [pc, #380]	; (4a28 <mem_manage_fault+0x1a8>)
    48aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    48ac:	f013 0f10 	tst.w	r3, #16
    48b0:	d132      	bne.n	4918 <mem_manage_fault+0x98>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    48b2:	4b5d      	ldr	r3, [pc, #372]	; (4a28 <mem_manage_fault+0x1a8>)
    48b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    48b6:	f013 0f08 	tst.w	r3, #8
    48ba:	d13e      	bne.n	493a <mem_manage_fault+0xba>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    48bc:	4b5a      	ldr	r3, [pc, #360]	; (4a28 <mem_manage_fault+0x1a8>)
    48be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    48c0:	f013 0f02 	tst.w	r3, #2
    48c4:	d14a      	bne.n	495c <mem_manage_fault+0xdc>
	uint32_t mmfar = -EINVAL;
    48c6:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    48ca:	4b57      	ldr	r3, [pc, #348]	; (4a28 <mem_manage_fault+0x1a8>)
    48cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    48ce:	f013 0f01 	tst.w	r3, #1
    48d2:	d175      	bne.n	49c0 <mem_manage_fault+0x140>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    48d4:	4b54      	ldr	r3, [pc, #336]	; (4a28 <mem_manage_fault+0x1a8>)
    48d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    48d8:	f013 0f20 	tst.w	r3, #32
    48dc:	f040 8081 	bne.w	49e2 <mem_manage_fault+0x162>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    48e0:	4b51      	ldr	r3, [pc, #324]	; (4a28 <mem_manage_fault+0x1a8>)
    48e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    48e4:	f013 0f10 	tst.w	r3, #16
    48e8:	d104      	bne.n	48f4 <mem_manage_fault+0x74>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    48ea:	4b4f      	ldr	r3, [pc, #316]	; (4a28 <mem_manage_fault+0x1a8>)
    48ec:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    48ee:	f014 0402 	ands.w	r4, r4, #2
    48f2:	d005      	beq.n	4900 <mem_manage_fault+0x80>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    48f4:	4b4c      	ldr	r3, [pc, #304]	; (4a28 <mem_manage_fault+0x1a8>)
    48f6:	685c      	ldr	r4, [r3, #4]
    48f8:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    48fc:	f040 8082 	bne.w	4a04 <mem_manage_fault+0x184>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4900:	4a49      	ldr	r2, [pc, #292]	; (4a28 <mem_manage_fault+0x1a8>)
    4902:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4904:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    4908:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    490a:	2101      	movs	r1, #1
    490c:	4628      	mov	r0, r5
    490e:	f005 fa71 	bl	9df4 <memory_fault_recoverable>
    4912:	7030      	strb	r0, [r6, #0]
}
    4914:	4620      	mov	r0, r4
    4916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4918:	4b40      	ldr	r3, [pc, #256]	; (4a1c <mem_manage_fault+0x19c>)
    491a:	4a41      	ldr	r2, [pc, #260]	; (4a20 <mem_manage_fault+0x1a0>)
    491c:	1a9b      	subs	r3, r3, r2
    491e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
    4920:	f04f 0100 	mov.w	r1, #0
    4924:	2201      	movs	r2, #1
    4926:	f362 0102 	bfi	r1, r2, #0, #3
    492a:	f36f 01c5 	bfc	r1, #3, #3
    492e:	f363 118f 	bfi	r1, r3, #6, #10
    4932:	483e      	ldr	r0, [pc, #248]	; (4a2c <mem_manage_fault+0x1ac>)
    4934:	f7fe ff18 	bl	3768 <log_0>
    4938:	e7bb      	b.n	48b2 <mem_manage_fault+0x32>
    493a:	4b38      	ldr	r3, [pc, #224]	; (4a1c <mem_manage_fault+0x19c>)
    493c:	4a38      	ldr	r2, [pc, #224]	; (4a20 <mem_manage_fault+0x1a0>)
    493e:	1a9b      	subs	r3, r3, r2
    4940:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
    4942:	f04f 0100 	mov.w	r1, #0
    4946:	2201      	movs	r2, #1
    4948:	f362 0102 	bfi	r1, r2, #0, #3
    494c:	f36f 01c5 	bfc	r1, #3, #3
    4950:	f363 118f 	bfi	r1, r3, #6, #10
    4954:	4836      	ldr	r0, [pc, #216]	; (4a30 <mem_manage_fault+0x1b0>)
    4956:	f7fe ff07 	bl	3768 <log_0>
    495a:	e7af      	b.n	48bc <mem_manage_fault+0x3c>
    495c:	4b2f      	ldr	r3, [pc, #188]	; (4a1c <mem_manage_fault+0x19c>)
    495e:	4a30      	ldr	r2, [pc, #192]	; (4a20 <mem_manage_fault+0x1a0>)
    4960:	1a9b      	subs	r3, r3, r2
    4962:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
    4964:	f04f 0100 	mov.w	r1, #0
    4968:	2201      	movs	r2, #1
    496a:	f362 0102 	bfi	r1, r2, #0, #3
    496e:	f36f 01c5 	bfc	r1, #3, #3
    4972:	f363 118f 	bfi	r1, r3, #6, #10
    4976:	482f      	ldr	r0, [pc, #188]	; (4a34 <mem_manage_fault+0x1b4>)
    4978:	f7fe fef6 	bl	3768 <log_0>
		uint32_t temp = SCB->MMFAR;
    497c:	4b2a      	ldr	r3, [pc, #168]	; (4a28 <mem_manage_fault+0x1a8>)
    497e:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4982:	f013 0f80 	tst.w	r3, #128	; 0x80
    4986:	d102      	bne.n	498e <mem_manage_fault+0x10e>
	uint32_t mmfar = -EINVAL;
    4988:	f06f 0715 	mvn.w	r7, #21
    498c:	e79d      	b.n	48ca <mem_manage_fault+0x4a>
    498e:	4b23      	ldr	r3, [pc, #140]	; (4a1c <mem_manage_fault+0x19c>)
    4990:	4a23      	ldr	r2, [pc, #140]	; (4a20 <mem_manage_fault+0x1a0>)
    4992:	1a9b      	subs	r3, r3, r2
    4994:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    4996:	f04f 0200 	mov.w	r2, #0
    499a:	2101      	movs	r1, #1
    499c:	f361 0202 	bfi	r2, r1, #0, #3
    49a0:	f36f 02c5 	bfc	r2, #3, #3
    49a4:	f363 128f 	bfi	r2, r3, #6, #10
    49a8:	4639      	mov	r1, r7
    49aa:	4823      	ldr	r0, [pc, #140]	; (4a38 <mem_manage_fault+0x1b8>)
    49ac:	f7fe fe6a 	bl	3684 <log_1>
			if (from_hard_fault != 0) {
    49b0:	2c00      	cmp	r4, #0
    49b2:	d08a      	beq.n	48ca <mem_manage_fault+0x4a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    49b4:	4a1c      	ldr	r2, [pc, #112]	; (4a28 <mem_manage_fault+0x1a8>)
    49b6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    49b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    49bc:	6293      	str	r3, [r2, #40]	; 0x28
    49be:	e784      	b.n	48ca <mem_manage_fault+0x4a>
    49c0:	4b16      	ldr	r3, [pc, #88]	; (4a1c <mem_manage_fault+0x19c>)
    49c2:	4a17      	ldr	r2, [pc, #92]	; (4a20 <mem_manage_fault+0x1a0>)
    49c4:	1a9b      	subs	r3, r3, r2
    49c6:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
    49c8:	f04f 0100 	mov.w	r1, #0
    49cc:	2201      	movs	r2, #1
    49ce:	f362 0102 	bfi	r1, r2, #0, #3
    49d2:	f36f 01c5 	bfc	r1, #3, #3
    49d6:	f363 118f 	bfi	r1, r3, #6, #10
    49da:	4818      	ldr	r0, [pc, #96]	; (4a3c <mem_manage_fault+0x1bc>)
    49dc:	f7fe fec4 	bl	3768 <log_0>
    49e0:	e778      	b.n	48d4 <mem_manage_fault+0x54>
    49e2:	4b0e      	ldr	r3, [pc, #56]	; (4a1c <mem_manage_fault+0x19c>)
    49e4:	4a0e      	ldr	r2, [pc, #56]	; (4a20 <mem_manage_fault+0x1a0>)
    49e6:	1a9b      	subs	r3, r3, r2
    49e8:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
    49ea:	f04f 0100 	mov.w	r1, #0
    49ee:	2201      	movs	r2, #1
    49f0:	f362 0102 	bfi	r1, r2, #0, #3
    49f4:	f36f 01c5 	bfc	r1, #3, #3
    49f8:	f363 118f 	bfi	r1, r3, #6, #10
    49fc:	4810      	ldr	r0, [pc, #64]	; (4a40 <mem_manage_fault+0x1c0>)
    49fe:	f7fe feb3 	bl	3768 <log_0>
    4a02:	e76d      	b.n	48e0 <mem_manage_fault+0x60>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    4a04:	4629      	mov	r1, r5
    4a06:	4638      	mov	r0, r7
    4a08:	f7ff fd22 	bl	4450 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    4a0c:	4604      	mov	r4, r0
    4a0e:	2800      	cmp	r0, #0
    4a10:	f43f af76 	beq.w	4900 <mem_manage_fault+0x80>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    4a14:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    4a18:	2402      	movs	r4, #2
    4a1a:	e771      	b.n	4900 <mem_manage_fault+0x80>
    4a1c:	0000af98 	.word	0x0000af98
    4a20:	0000af70 	.word	0x0000af70
    4a24:	0000b57c 	.word	0x0000b57c
    4a28:	e000ed00 	.word	0xe000ed00
    4a2c:	0000b594 	.word	0x0000b594
    4a30:	0000b4d0 	.word	0x0000b4d0
    4a34:	0000b5c8 	.word	0x0000b5c8
    4a38:	0000b5e0 	.word	0x0000b5e0
    4a3c:	0000b5f8 	.word	0x0000b5f8
    4a40:	0000b54c 	.word	0x0000b54c

00004a44 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    4a44:	b570      	push	{r4, r5, r6, lr}
    4a46:	4605      	mov	r5, r0
    4a48:	460c      	mov	r4, r1
    4a4a:	4b47      	ldr	r3, [pc, #284]	; (4b68 <hard_fault+0x124>)
    4a4c:	4a47      	ldr	r2, [pc, #284]	; (4b6c <hard_fault+0x128>)
    4a4e:	1a9b      	subs	r3, r3, r2
    4a50:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
    4a52:	f04f 0100 	mov.w	r1, #0
    4a56:	2201      	movs	r2, #1
    4a58:	f362 0102 	bfi	r1, r2, #0, #3
    4a5c:	f36f 01c5 	bfc	r1, #3, #3
    4a60:	f363 118f 	bfi	r1, r3, #6, #10
    4a64:	4842      	ldr	r0, [pc, #264]	; (4b70 <hard_fault+0x12c>)
    4a66:	f7fe fe7f 	bl	3768 <log_0>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    4a6a:	2300      	movs	r3, #0
    4a6c:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4a6e:	4b41      	ldr	r3, [pc, #260]	; (4b74 <hard_fault+0x130>)
    4a70:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    4a72:	f016 0602 	ands.w	r6, r6, #2
    4a76:	d109      	bne.n	4a8c <hard_fault+0x48>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4a78:	4b3e      	ldr	r3, [pc, #248]	; (4b74 <hard_fault+0x130>)
    4a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4a7c:	2b00      	cmp	r3, #0
    4a7e:	db17      	blt.n	4ab0 <hard_fault+0x6c>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4a80:	4b3c      	ldr	r3, [pc, #240]	; (4b74 <hard_fault+0x130>)
    4a82:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    4a84:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    4a88:	d124      	bne.n	4ad4 <hard_fault+0x90>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    4a8a:	bd70      	pop	{r4, r5, r6, pc}
    4a8c:	4b36      	ldr	r3, [pc, #216]	; (4b68 <hard_fault+0x124>)
    4a8e:	4a37      	ldr	r2, [pc, #220]	; (4b6c <hard_fault+0x128>)
    4a90:	1a9b      	subs	r3, r3, r2
    4a92:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
    4a94:	f04f 0100 	mov.w	r1, #0
    4a98:	2201      	movs	r2, #1
    4a9a:	f362 0102 	bfi	r1, r2, #0, #3
    4a9e:	f36f 01c5 	bfc	r1, #3, #3
    4aa2:	f363 118f 	bfi	r1, r3, #6, #10
    4aa6:	4834      	ldr	r0, [pc, #208]	; (4b78 <hard_fault+0x134>)
    4aa8:	f7fe fe5e 	bl	3768 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4aac:	2000      	movs	r0, #0
    4aae:	e7ec      	b.n	4a8a <hard_fault+0x46>
    4ab0:	4b2d      	ldr	r3, [pc, #180]	; (4b68 <hard_fault+0x124>)
    4ab2:	4a2e      	ldr	r2, [pc, #184]	; (4b6c <hard_fault+0x128>)
    4ab4:	1a9b      	subs	r3, r3, r2
    4ab6:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
    4ab8:	f04f 0100 	mov.w	r1, #0
    4abc:	2201      	movs	r2, #1
    4abe:	f362 0102 	bfi	r1, r2, #0, #3
    4ac2:	f36f 01c5 	bfc	r1, #3, #3
    4ac6:	f363 118f 	bfi	r1, r3, #6, #10
    4aca:	482c      	ldr	r0, [pc, #176]	; (4b7c <hard_fault+0x138>)
    4acc:	f7fe fe4c 	bl	3768 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4ad0:	4630      	mov	r0, r6
    4ad2:	e7da      	b.n	4a8a <hard_fault+0x46>
    4ad4:	4b24      	ldr	r3, [pc, #144]	; (4b68 <hard_fault+0x124>)
    4ad6:	4a25      	ldr	r2, [pc, #148]	; (4b6c <hard_fault+0x128>)
    4ad8:	1a9b      	subs	r3, r3, r2
    4ada:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
    4adc:	f04f 0100 	mov.w	r1, #0
    4ae0:	2201      	movs	r2, #1
    4ae2:	f362 0102 	bfi	r1, r2, #0, #3
    4ae6:	f36f 01c5 	bfc	r1, #3, #3
    4aea:	f363 118f 	bfi	r1, r3, #6, #10
    4aee:	4824      	ldr	r0, [pc, #144]	; (4b80 <hard_fault+0x13c>)
    4af0:	f7fe fe3a 	bl	3768 <log_0>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    4af4:	69ab      	ldr	r3, [r5, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    4af6:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    4afa:	f64d 7302 	movw	r3, #57090	; 0xdf02
    4afe:	429a      	cmp	r2, r3
    4b00:	d00e      	beq.n	4b20 <hard_fault+0xdc>
		} else if (SCB_MMFSR != 0) {
    4b02:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4b06:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    4b0a:	781b      	ldrb	r3, [r3, #0]
    4b0c:	b9db      	cbnz	r3, 4b46 <hard_fault+0x102>
		} else if (SCB_BFSR != 0) {
    4b0e:	4b1d      	ldr	r3, [pc, #116]	; (4b84 <hard_fault+0x140>)
    4b10:	781b      	ldrb	r3, [r3, #0]
    4b12:	b9f3      	cbnz	r3, 4b52 <hard_fault+0x10e>
		} else if (SCB_UFSR != 0) {
    4b14:	4b1c      	ldr	r3, [pc, #112]	; (4b88 <hard_fault+0x144>)
    4b16:	881b      	ldrh	r3, [r3, #0]
    4b18:	b29b      	uxth	r3, r3
    4b1a:	bb03      	cbnz	r3, 4b5e <hard_fault+0x11a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4b1c:	4630      	mov	r0, r6
	return reason;
    4b1e:	e7b4      	b.n	4a8a <hard_fault+0x46>
    4b20:	4b11      	ldr	r3, [pc, #68]	; (4b68 <hard_fault+0x124>)
    4b22:	4a12      	ldr	r2, [pc, #72]	; (4b6c <hard_fault+0x128>)
    4b24:	1a9b      	subs	r3, r3, r2
    4b26:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    4b28:	f04f 0200 	mov.w	r2, #0
    4b2c:	2101      	movs	r1, #1
    4b2e:	f361 0202 	bfi	r2, r1, #0, #3
    4b32:	f36f 02c5 	bfc	r2, #3, #3
    4b36:	f363 128f 	bfi	r2, r3, #6, #10
    4b3a:	6829      	ldr	r1, [r5, #0]
    4b3c:	4813      	ldr	r0, [pc, #76]	; (4b8c <hard_fault+0x148>)
    4b3e:	f7fe fda1 	bl	3684 <log_1>
			reason = esf->basic.r0;
    4b42:	6828      	ldr	r0, [r5, #0]
    4b44:	e7a1      	b.n	4a8a <hard_fault+0x46>
			reason = mem_manage_fault(esf, 1, recoverable);
    4b46:	4622      	mov	r2, r4
    4b48:	2101      	movs	r1, #1
    4b4a:	4628      	mov	r0, r5
    4b4c:	f7ff fe98 	bl	4880 <mem_manage_fault>
    4b50:	e79b      	b.n	4a8a <hard_fault+0x46>
			reason = bus_fault(esf, 1, recoverable);
    4b52:	4622      	mov	r2, r4
    4b54:	2101      	movs	r1, #1
    4b56:	4628      	mov	r0, r5
    4b58:	f7ff fdba 	bl	46d0 <bus_fault>
    4b5c:	e795      	b.n	4a8a <hard_fault+0x46>
			reason = usage_fault(esf);
    4b5e:	4628      	mov	r0, r5
    4b60:	f7ff fcea 	bl	4538 <usage_fault>
    4b64:	e791      	b.n	4a8a <hard_fault+0x46>
    4b66:	bf00      	nop
    4b68:	0000af98 	.word	0x0000af98
    4b6c:	0000af70 	.word	0x0000af70
    4b70:	0000b618 	.word	0x0000b618
    4b74:	e000ed00 	.word	0xe000ed00
    4b78:	0000b630 	.word	0x0000b630
    4b7c:	0000b654 	.word	0x0000b654
    4b80:	0000b664 	.word	0x0000b664
    4b84:	e000ed29 	.word	0xe000ed29
    4b88:	e000ed2a 	.word	0xe000ed2a
    4b8c:	0000b684 	.word	0x0000b684

00004b90 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    4b90:	b508      	push	{r3, lr}
    4b92:	460a      	mov	r2, r1
    4b94:	480b      	ldr	r0, [pc, #44]	; (4bc4 <reserved_exception+0x34>)
    4b96:	4b0c      	ldr	r3, [pc, #48]	; (4bc8 <reserved_exception+0x38>)
    4b98:	1ac0      	subs	r0, r0, r3
    4b9a:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    4b9c:	f04f 0300 	mov.w	r3, #0
    4ba0:	2101      	movs	r1, #1
    4ba2:	f361 0302 	bfi	r3, r1, #0, #3
    4ba6:	f36f 03c5 	bfc	r3, #3, #3
    4baa:	f360 138f 	bfi	r3, r0, #6, #10
    4bae:	2a0f      	cmp	r2, #15
    4bb0:	dc05      	bgt.n	4bbe <reserved_exception+0x2e>
    4bb2:	4906      	ldr	r1, [pc, #24]	; (4bcc <reserved_exception+0x3c>)
    4bb4:	3a10      	subs	r2, #16
    4bb6:	4806      	ldr	r0, [pc, #24]	; (4bd0 <reserved_exception+0x40>)
    4bb8:	f7fe fd9a 	bl	36f0 <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    4bbc:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
    4bbe:	4905      	ldr	r1, [pc, #20]	; (4bd4 <reserved_exception+0x44>)
    4bc0:	e7f8      	b.n	4bb4 <reserved_exception+0x24>
    4bc2:	bf00      	nop
    4bc4:	0000af98 	.word	0x0000af98
    4bc8:	0000af70 	.word	0x0000af70
    4bcc:	0000b6a0 	.word	0x0000b6a0
    4bd0:	0000b6d4 	.word	0x0000b6d4
    4bd4:	0000b6b8 	.word	0x0000b6b8

00004bd8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bda:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4bdc:	4b2e      	ldr	r3, [pc, #184]	; (4c98 <z_arm_fault+0xc0>)
    4bde:	685d      	ldr	r5, [r3, #4]
    4be0:	f3c5 0508 	ubfx	r5, r5, #0, #9
    4be4:	2300      	movs	r3, #0
    4be6:	f383 8811 	msr	BASEPRI, r3
    4bea:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4bee:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4bf2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    4bf6:	d12a      	bne.n	4c4e <z_arm_fault+0x76>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4bf8:	f002 030c 	and.w	r3, r2, #12
    4bfc:	2b08      	cmp	r3, #8
    4bfe:	d010      	beq.n	4c22 <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4c00:	f012 0f08 	tst.w	r2, #8
    4c04:	d020      	beq.n	4c48 <z_arm_fault+0x70>
			ptr_esf =  (z_arch_esf_t *)psp;
    4c06:	460c      	mov	r4, r1
	*nested_exc = false;
    4c08:	2700      	movs	r7, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    4c0a:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    4c0e:	4629      	mov	r1, r5
    4c10:	4620      	mov	r0, r4
    4c12:	f005 f8f1 	bl	9df8 <fault_handle>
    4c16:	4606      	mov	r6, r0
	if (recoverable) {
    4c18:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4c1c:	b1d3      	cbz	r3, 4c54 <z_arm_fault+0x7c>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    4c1e:	b00b      	add	sp, #44	; 0x2c
    4c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c22:	4b1e      	ldr	r3, [pc, #120]	; (4c9c <z_arm_fault+0xc4>)
    4c24:	4a1e      	ldr	r2, [pc, #120]	; (4ca0 <z_arm_fault+0xc8>)
    4c26:	1a9b      	subs	r3, r3, r2
    4c28:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4c2a:	f04f 0100 	mov.w	r1, #0
    4c2e:	2201      	movs	r2, #1
    4c30:	f362 0102 	bfi	r1, r2, #0, #3
    4c34:	f36f 01c5 	bfc	r1, #3, #3
    4c38:	f363 118f 	bfi	r1, r3, #6, #10
    4c3c:	4819      	ldr	r0, [pc, #100]	; (4ca4 <z_arm_fault+0xcc>)
    4c3e:	f7fe fd93 	bl	3768 <log_0>
	*nested_exc = false;
    4c42:	2700      	movs	r7, #0
		return NULL;
    4c44:	463c      	mov	r4, r7
    4c46:	e7e0      	b.n	4c0a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    4c48:	4604      	mov	r4, r0
			*nested_exc = true;
    4c4a:	2701      	movs	r7, #1
    4c4c:	e7dd      	b.n	4c0a <z_arm_fault+0x32>
	*nested_exc = false;
    4c4e:	2700      	movs	r7, #0
		return NULL;
    4c50:	463c      	mov	r4, r7
    4c52:	e7da      	b.n	4c0a <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4c54:	ad01      	add	r5, sp, #4
    4c56:	6820      	ldr	r0, [r4, #0]
    4c58:	6861      	ldr	r1, [r4, #4]
    4c5a:	68a2      	ldr	r2, [r4, #8]
    4c5c:	68e3      	ldr	r3, [r4, #12]
    4c5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    4c60:	6920      	ldr	r0, [r4, #16]
    4c62:	6961      	ldr	r1, [r4, #20]
    4c64:	69a2      	ldr	r2, [r4, #24]
    4c66:	69e3      	ldr	r3, [r4, #28]
    4c68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	if (nested_exc) {
    4c6a:	b14f      	cbz	r7, 4c80 <z_arm_fault+0xa8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4c6c:	9b08      	ldr	r3, [sp, #32]
    4c6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4c72:	b95a      	cbnz	r2, 4c8c <z_arm_fault+0xb4>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4c74:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4c78:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    4c7c:	9308      	str	r3, [sp, #32]
    4c7e:	e005      	b.n	4c8c <z_arm_fault+0xb4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4c80:	9b08      	ldr	r3, [sp, #32]
    4c82:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4c86:	f023 0301 	bic.w	r3, r3, #1
    4c8a:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    4c8c:	a901      	add	r1, sp, #4
    4c8e:	4630      	mov	r0, r6
    4c90:	f005 f892 	bl	9db8 <z_arm_fatal_error>
    4c94:	e7c3      	b.n	4c1e <z_arm_fault+0x46>
    4c96:	bf00      	nop
    4c98:	e000ed00 	.word	0xe000ed00
    4c9c:	0000af98 	.word	0x0000af98
    4ca0:	0000af70 	.word	0x0000af70
    4ca4:	0000b6e8 	.word	0x0000b6e8

00004ca8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4ca8:	4a02      	ldr	r2, [pc, #8]	; (4cb4 <z_arm_fault_init+0xc>)
    4caa:	6953      	ldr	r3, [r2, #20]
    4cac:	f043 0310 	orr.w	r3, r3, #16
    4cb0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    4cb2:	4770      	bx	lr
    4cb4:	e000ed00 	.word	0xe000ed00

00004cb8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4cb8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4cbc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4cc0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    4cc2:	4672      	mov	r2, lr
	bl z_arm_fault
    4cc4:	f7ff ff88 	bl	4bd8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4cc8:	bd01      	pop	{r0, pc}
    4cca:	bf00      	nop

00004ccc <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4ccc:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4cce:	e006      	b.n	4cde <z_arm_interrupt_init+0x12>
    4cd0:	f002 010f 	and.w	r1, r2, #15
    4cd4:	4b09      	ldr	r3, [pc, #36]	; (4cfc <z_arm_interrupt_init+0x30>)
    4cd6:	440b      	add	r3, r1
    4cd8:	2120      	movs	r1, #32
    4cda:	7619      	strb	r1, [r3, #24]
    4cdc:	3201      	adds	r2, #1
    4cde:	2a26      	cmp	r2, #38	; 0x26
    4ce0:	dc0a      	bgt.n	4cf8 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    4ce2:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    4ce4:	2b00      	cmp	r3, #0
    4ce6:	dbf3      	blt.n	4cd0 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4ce8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4cec:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4cf0:	2120      	movs	r1, #32
    4cf2:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    4cf6:	e7f1      	b.n	4cdc <z_arm_interrupt_init+0x10>
	}
}
    4cf8:	4770      	bx	lr
    4cfa:	bf00      	nop
    4cfc:	e000ecfc 	.word	0xe000ecfc

00004d00 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    4d00:	2000      	movs	r0, #0
    msr CONTROL, r0
    4d02:	f380 8814 	msr	CONTROL, r0
    isb
    4d06:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    4d0a:	f006 f843 	bl	ad94 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    4d0e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    4d10:	490d      	ldr	r1, [pc, #52]	; (4d48 <__start+0x48>)
    str r0, [r1]
    4d12:	6008      	str	r0, [r1, #0]
    dsb
    4d14:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4d18:	480c      	ldr	r0, [pc, #48]	; (4d4c <__start+0x4c>)
    msr msp, r0
    4d1a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    4d1e:	f000 f829 	bl	4d74 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4d22:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4d24:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4d28:	4809      	ldr	r0, [pc, #36]	; (4d50 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    4d2a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    4d2e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4d30:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4d34:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4d38:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    4d3a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4d3c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    4d40:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4d44:	f7ff faf0 	bl	4328 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    4d48:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4d4c:	20001d60 	.word	0x20001d60
    ldr r0, =z_interrupt_stacks
    4d50:	20001ee0 	.word	0x20001ee0

00004d54 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    4d54:	4b06      	ldr	r3, [pc, #24]	; (4d70 <z_arm_clear_arm_mpu_config+0x1c>)
    4d56:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    4d58:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    4d5c:	2300      	movs	r3, #0
    4d5e:	4283      	cmp	r3, r0
    4d60:	da05      	bge.n	4d6e <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    4d62:	4a03      	ldr	r2, [pc, #12]	; (4d70 <z_arm_clear_arm_mpu_config+0x1c>)
    4d64:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    4d66:	2100      	movs	r1, #0
    4d68:	6111      	str	r1, [r2, #16]
    4d6a:	3301      	adds	r3, #1
    4d6c:	e7f7      	b.n	4d5e <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    4d6e:	4770      	bx	lr
    4d70:	e000ed90 	.word	0xe000ed90

00004d74 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    4d74:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    4d76:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    4d78:	2400      	movs	r4, #0
    4d7a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    4d7e:	f7ff ffe9 	bl	4d54 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4d82:	4623      	mov	r3, r4
    4d84:	e008      	b.n	4d98 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    4d86:	f103 0120 	add.w	r1, r3, #32
    4d8a:	4a0e      	ldr	r2, [pc, #56]	; (4dc4 <z_arm_init_arch_hw_at_boot+0x50>)
    4d8c:	f04f 30ff 	mov.w	r0, #4294967295
    4d90:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4d94:	3301      	adds	r3, #1
    4d96:	b2db      	uxtb	r3, r3
    4d98:	2b07      	cmp	r3, #7
    4d9a:	d9f4      	bls.n	4d86 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4d9c:	2300      	movs	r3, #0
    4d9e:	e008      	b.n	4db2 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    4da0:	f103 0160 	add.w	r1, r3, #96	; 0x60
    4da4:	4a07      	ldr	r2, [pc, #28]	; (4dc4 <z_arm_init_arch_hw_at_boot+0x50>)
    4da6:	f04f 30ff 	mov.w	r0, #4294967295
    4daa:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4dae:	3301      	adds	r3, #1
    4db0:	b2db      	uxtb	r3, r3
    4db2:	2b07      	cmp	r3, #7
    4db4:	d9f4      	bls.n	4da0 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    4db6:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    4db8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4dbc:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    4dc0:	bd10      	pop	{r4, pc}
    4dc2:	bf00      	nop
    4dc4:	e000e100 	.word	0xe000e100

00004dc8 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    4dc8:	b508      	push	{r3, lr}
	if (_current == thread) {
    4dca:	4b08      	ldr	r3, [pc, #32]	; (4dec <z_impl_k_thread_abort+0x24>)
    4dcc:	689b      	ldr	r3, [r3, #8]
    4dce:	4283      	cmp	r3, r0
    4dd0:	d002      	beq.n	4dd8 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    4dd2:	f003 fbeb 	bl	85ac <z_thread_abort>
}
    4dd6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4dd8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4ddc:	2b00      	cmp	r3, #0
    4dde:	d0f8      	beq.n	4dd2 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4de0:	4a03      	ldr	r2, [pc, #12]	; (4df0 <z_impl_k_thread_abort+0x28>)
    4de2:	6853      	ldr	r3, [r2, #4]
    4de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4de8:	6053      	str	r3, [r2, #4]
    4dea:	e7f2      	b.n	4dd2 <z_impl_k_thread_abort+0xa>
    4dec:	200009ec 	.word	0x200009ec
    4df0:	e000ed00 	.word	0xe000ed00

00004df4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    4df4:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4df6:	4b03      	ldr	r3, [pc, #12]	; (4e04 <z_arm_configure_static_mpu_regions+0x10>)
    4df8:	4a03      	ldr	r2, [pc, #12]	; (4e08 <z_arm_configure_static_mpu_regions+0x14>)
    4dfa:	2101      	movs	r1, #1
    4dfc:	4803      	ldr	r0, [pc, #12]	; (4e0c <z_arm_configure_static_mpu_regions+0x18>)
    4dfe:	f005 f850 	bl	9ea2 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    4e02:	bd08      	pop	{r3, pc}
    4e04:	20010000 	.word	0x20010000
    4e08:	20000000 	.word	0x20000000
    4e0c:	0000b718 	.word	0x0000b718

00004e10 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    4e10:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    4e12:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    4e16:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    4e18:	4804      	ldr	r0, [pc, #16]	; (4e2c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    4e1a:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    4e1c:	2320      	movs	r3, #32
    4e1e:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    4e20:	4b03      	ldr	r3, [pc, #12]	; (4e30 <z_arm_configure_dynamic_mpu_regions+0x20>)
    4e22:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    4e24:	2101      	movs	r1, #1
    4e26:	f005 f840 	bl	9eaa <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    4e2a:	bd08      	pop	{r3, pc}
    4e2c:	20000478 	.word	0x20000478
    4e30:	150b0000 	.word	0x150b0000

00004e34 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    4e34:	4a06      	ldr	r2, [pc, #24]	; (4e50 <region_init+0x1c>)
    4e36:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4e38:	680b      	ldr	r3, [r1, #0]
    4e3a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4e3e:	4303      	orrs	r3, r0
    4e40:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4e44:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4e46:	688b      	ldr	r3, [r1, #8]
    4e48:	f043 0301 	orr.w	r3, r3, #1
    4e4c:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    4e4e:	4770      	bx	lr
    4e50:	e000ed90 	.word	0xe000ed90

00004e54 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    4e54:	b510      	push	{r4, lr}
    4e56:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    4e58:	2807      	cmp	r0, #7
    4e5a:	d803      	bhi.n	4e64 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    4e5c:	f7ff ffea 	bl	4e34 <region_init>

	return index;
    4e60:	4620      	mov	r0, r4
}
    4e62:	bd10      	pop	{r4, pc}
    4e64:	4b09      	ldr	r3, [pc, #36]	; (4e8c <region_allocate_and_init+0x38>)
    4e66:	4a0a      	ldr	r2, [pc, #40]	; (4e90 <region_allocate_and_init+0x3c>)
    4e68:	1a9b      	subs	r3, r3, r2
    4e6a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4e6c:	f04f 0200 	mov.w	r2, #0
    4e70:	2101      	movs	r1, #1
    4e72:	f361 0202 	bfi	r2, r1, #0, #3
    4e76:	f36f 02c5 	bfc	r2, #3, #3
    4e7a:	f363 128f 	bfi	r2, r3, #6, #10
    4e7e:	4601      	mov	r1, r0
    4e80:	4804      	ldr	r0, [pc, #16]	; (4e94 <region_allocate_and_init+0x40>)
    4e82:	f7fe fbff 	bl	3684 <log_1>
		return -EINVAL;
    4e86:	f06f 0015 	mvn.w	r0, #21
    4e8a:	e7ea      	b.n	4e62 <region_allocate_and_init+0xe>
    4e8c:	0000af90 	.word	0x0000af90
    4e90:	0000af70 	.word	0x0000af70
    4e94:	0000b724 	.word	0x0000b724

00004e98 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4e9c:	4680      	mov	r8, r0
    4e9e:	460f      	mov	r7, r1
    4ea0:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
    4ea2:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    4ea4:	2400      	movs	r4, #0
    4ea6:	e009      	b.n	4ebc <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    4ea8:	4629      	mov	r1, r5
    4eaa:	b2f0      	uxtb	r0, r6
    4eac:	f004 ffda 	bl	9e64 <mpu_configure_region>
    4eb0:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    4eb2:	f110 0f16 	cmn.w	r0, #22
    4eb6:	d025      	beq.n	4f04 <mpu_configure_regions+0x6c>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    4eb8:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    4eba:	3401      	adds	r4, #1
    4ebc:	42bc      	cmp	r4, r7
    4ebe:	da21      	bge.n	4f04 <mpu_configure_regions+0x6c>
		if (regions[i].size == 0U) {
    4ec0:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    4ec4:	eb08 0585 	add.w	r5, r8, r5, lsl #2
    4ec8:	686a      	ldr	r2, [r5, #4]
    4eca:	2a00      	cmp	r2, #0
    4ecc:	d0f5      	beq.n	4eba <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    4ece:	f1ba 0f00 	cmp.w	sl, #0
    4ed2:	d0e9      	beq.n	4ea8 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    4ed4:	4628      	mov	r0, r5
    4ed6:	f004 ffb4 	bl	9e42 <mpu_partition_is_valid>
		if (do_sanity_check &&
    4eda:	2800      	cmp	r0, #0
    4edc:	d1e4      	bne.n	4ea8 <mpu_configure_regions+0x10>
    4ede:	4b0b      	ldr	r3, [pc, #44]	; (4f0c <mpu_configure_regions+0x74>)
    4ee0:	4a0b      	ldr	r2, [pc, #44]	; (4f10 <mpu_configure_regions+0x78>)
    4ee2:	1a9b      	subs	r3, r3, r2
    4ee4:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Partition %u: sanity check failed.", i);
    4ee6:	f04f 0200 	mov.w	r2, #0
    4eea:	2101      	movs	r1, #1
    4eec:	f361 0202 	bfi	r2, r1, #0, #3
    4ef0:	f36f 02c5 	bfc	r2, #3, #3
    4ef4:	f363 128f 	bfi	r2, r3, #6, #10
    4ef8:	4621      	mov	r1, r4
    4efa:	4806      	ldr	r0, [pc, #24]	; (4f14 <mpu_configure_regions+0x7c>)
    4efc:	f7fe fbc2 	bl	3684 <log_1>
			return -EINVAL;
    4f00:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    4f04:	4630      	mov	r0, r6
    4f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4f0a:	bf00      	nop
    4f0c:	0000af90 	.word	0x0000af90
    4f10:	0000af70 	.word	0x0000af70
    4f14:	0000b74c 	.word	0x0000b74c

00004f18 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    4f18:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    4f1a:	4c03      	ldr	r4, [pc, #12]	; (4f28 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4f1c:	2301      	movs	r3, #1
    4f1e:	7822      	ldrb	r2, [r4, #0]
    4f20:	f7ff ffba 	bl	4e98 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4f24:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    4f26:	bd10      	pop	{r4, pc}
    4f28:	20000a2c 	.word	0x20000a2c

00004f2c <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    4f2c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    4f2e:	2300      	movs	r3, #0
    4f30:	4a08      	ldr	r2, [pc, #32]	; (4f54 <mpu_configure_dynamic_mpu_regions+0x28>)
    4f32:	7812      	ldrb	r2, [r2, #0]
    4f34:	f7ff ffb0 	bl	4e98 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    4f38:	f110 0f16 	cmn.w	r0, #22
    4f3c:	d008      	beq.n	4f50 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    4f3e:	4603      	mov	r3, r0
    4f40:	2b07      	cmp	r3, #7
    4f42:	dc05      	bgt.n	4f50 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    4f44:	4a04      	ldr	r2, [pc, #16]	; (4f58 <mpu_configure_dynamic_mpu_regions+0x2c>)
    4f46:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    4f48:	2100      	movs	r1, #0
    4f4a:	6111      	str	r1, [r2, #16]
    4f4c:	3301      	adds	r3, #1
    4f4e:	e7f7      	b.n	4f40 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    4f50:	bd08      	pop	{r3, pc}
    4f52:	bf00      	nop
    4f54:	20000a2c 	.word	0x20000a2c
    4f58:	e000ed90 	.word	0xe000ed90

00004f5c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4f5c:	4b03      	ldr	r3, [pc, #12]	; (4f6c <arm_core_mpu_enable+0x10>)
    4f5e:	2205      	movs	r2, #5
    4f60:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    4f62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4f66:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4f6a:	4770      	bx	lr
    4f6c:	e000ed90 	.word	0xe000ed90

00004f70 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    4f70:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4f74:	4b01      	ldr	r3, [pc, #4]	; (4f7c <arm_core_mpu_disable+0xc>)
    4f76:	2200      	movs	r2, #0
    4f78:	605a      	str	r2, [r3, #4]
}
    4f7a:	4770      	bx	lr
    4f7c:	e000ed90 	.word	0xe000ed90

00004f80 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    4f80:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4f82:	4b0e      	ldr	r3, [pc, #56]	; (4fbc <z_arm_mpu_init+0x3c>)
    4f84:	681d      	ldr	r5, [r3, #0]
    4f86:	2d08      	cmp	r5, #8
    4f88:	d815      	bhi.n	4fb6 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4f8a:	f7ff fff1 	bl	4f70 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4f8e:	2400      	movs	r4, #0
    4f90:	42a5      	cmp	r5, r4
    4f92:	d90a      	bls.n	4faa <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    4f94:	4b09      	ldr	r3, [pc, #36]	; (4fbc <z_arm_mpu_init+0x3c>)
    4f96:	6859      	ldr	r1, [r3, #4]
    4f98:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    4f9c:	0093      	lsls	r3, r2, #2
    4f9e:	4419      	add	r1, r3
    4fa0:	4620      	mov	r0, r4
    4fa2:	f7ff ff47 	bl	4e34 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4fa6:	3401      	adds	r4, #1
    4fa8:	e7f2      	b.n	4f90 <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4faa:	4b05      	ldr	r3, [pc, #20]	; (4fc0 <z_arm_mpu_init+0x40>)
    4fac:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    4fae:	f7ff ffd5 	bl	4f5c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    4fb2:	2000      	movs	r0, #0
}
    4fb4:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    4fb6:	f04f 30ff 	mov.w	r0, #4294967295
    4fba:	e7fb      	b.n	4fb4 <z_arm_mpu_init+0x34>
    4fbc:	0000b780 	.word	0x0000b780
    4fc0:	20000a2c 	.word	0x20000a2c

00004fc4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4fc4:	4b01      	ldr	r3, [pc, #4]	; (4fcc <__stdout_hook_install+0x8>)
    4fc6:	6018      	str	r0, [r3, #0]
}
    4fc8:	4770      	bx	lr
    4fca:	bf00      	nop
    4fcc:	20000028 	.word	0x20000028

00004fd0 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    4fd0:	f04f 0220 	mov.w	r2, #32
    4fd4:	f3ef 8311 	mrs	r3, BASEPRI
    4fd8:	f382 8812 	msr	BASEPRI_MAX, r2
    4fdc:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    4fe0:	4a04      	ldr	r2, [pc, #16]	; (4ff4 <nordicsemi_nrf52_init+0x24>)
    4fe2:	2101      	movs	r1, #1
    4fe4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    4fe8:	f383 8811 	msr	BASEPRI, r3
    4fec:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    4ff0:	2000      	movs	r0, #0
    4ff2:	4770      	bx	lr
    4ff4:	4001e000 	.word	0x4001e000

00004ff8 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    4ff8:	b2c0      	uxtb	r0, r0
    4ffa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4ffe:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    5002:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5006:	4905      	ldr	r1, [pc, #20]	; (501c <sys_arch_reboot+0x24>)
    5008:	68ca      	ldr	r2, [r1, #12]
    500a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    500e:	4b04      	ldr	r3, [pc, #16]	; (5020 <sys_arch_reboot+0x28>)
    5010:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5012:	60cb      	str	r3, [r1, #12]
    5014:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    5018:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    501a:	e7fd      	b.n	5018 <sys_arch_reboot+0x20>
    501c:	e000ed00 	.word	0xe000ed00
    5020:	05fa0004 	.word	0x05fa0004

00005024 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    5024:	b130      	cbz	r0, 5034 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    5026:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    5028:	0180      	lsls	r0, r0, #6
    502a:	4b03      	ldr	r3, [pc, #12]	; (5038 <arch_busy_wait+0x14>)
    502c:	f043 0301 	orr.w	r3, r3, #1
    5030:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    5032:	bd08      	pop	{r3, pc}
    5034:	4770      	bx	lr
    5036:	bf00      	nop
    5038:	0000b020 	.word	0x0000b020

0000503c <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    503c:	4800      	ldr	r0, [pc, #0]	; (5040 <get_hf_flags+0x4>)
    503e:	4770      	bx	lr
    5040:	200004d4 	.word	0x200004d4

00005044 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    5044:	4b03      	ldr	r3, [pc, #12]	; (5054 <get_subsys+0x10>)
    5046:	1ac0      	subs	r0, r0, r3
    5048:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    504a:	4b03      	ldr	r3, [pc, #12]	; (5058 <get_subsys+0x14>)
    504c:	fb03 f000 	mul.w	r0, r3, r0
    5050:	4770      	bx	lr
    5052:	bf00      	nop
    5054:	20000494 	.word	0x20000494
    5058:	b6db6db7 	.word	0xb6db6db7

0000505c <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    505c:	b538      	push	{r3, r4, r5, lr}
    505e:	4605      	mov	r5, r0
    5060:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    5062:	f7ff ffef 	bl	5044 <get_subsys>
    5066:	4601      	mov	r1, r0
    5068:	2240      	movs	r2, #64	; 0x40
    506a:	4803      	ldr	r0, [pc, #12]	; (5078 <onoff_stop+0x1c>)
    506c:	f004 ffc1 	bl	9ff2 <stop>
    5070:	4601      	mov	r1, r0
	notify(mgr, res);
    5072:	4628      	mov	r0, r5
    5074:	47a0      	blx	r4
}
    5076:	bd38      	pop	{r3, r4, r5, pc}
    5078:	0000adf0 	.word	0x0000adf0

0000507c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    507c:	b530      	push	{r4, r5, lr}
    507e:	b083      	sub	sp, #12
    5080:	4605      	mov	r5, r0
    5082:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5084:	f7ff ffde 	bl	5044 <get_subsys>
    5088:	4601      	mov	r1, r0
    508a:	2340      	movs	r3, #64	; 0x40
    508c:	9300      	str	r3, [sp, #0]
    508e:	4623      	mov	r3, r4
    5090:	4a05      	ldr	r2, [pc, #20]	; (50a8 <onoff_start+0x2c>)
    5092:	4806      	ldr	r0, [pc, #24]	; (50ac <onoff_start+0x30>)
    5094:	f004 ffc7 	bl	a026 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    5098:	1e01      	subs	r1, r0, #0
    509a:	db01      	blt.n	50a0 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    509c:	b003      	add	sp, #12
    509e:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    50a0:	4628      	mov	r0, r5
    50a2:	47a0      	blx	r4
}
    50a4:	e7fa      	b.n	509c <onoff_start+0x20>
    50a6:	bf00      	nop
    50a8:	0000a06f 	.word	0x0000a06f
    50ac:	0000adf0 	.word	0x0000adf0

000050b0 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    50b0:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    50b2:	b110      	cbz	r0, 50ba <clock_event_handler+0xa>
    50b4:	2801      	cmp	r0, #1
    50b6:	d00d      	beq.n	50d4 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    50b8:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    50ba:	2100      	movs	r1, #0
    50bc:	4808      	ldr	r0, [pc, #32]	; (50e0 <clock_event_handler+0x30>)
    50be:	f004 ff1f 	bl	9f00 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    50c2:	6883      	ldr	r3, [r0, #8]
    50c4:	f013 0f07 	tst.w	r3, #7
    50c8:	d1f6      	bne.n	50b8 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    50ca:	2100      	movs	r1, #0
    50cc:	4804      	ldr	r0, [pc, #16]	; (50e0 <clock_event_handler+0x30>)
    50ce:	f004 ff7e 	bl	9fce <clkstarted_handle>
    50d2:	e7f1      	b.n	50b8 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    50d4:	2101      	movs	r1, #1
    50d6:	4802      	ldr	r0, [pc, #8]	; (50e0 <clock_event_handler+0x30>)
    50d8:	f004 ff79 	bl	9fce <clkstarted_handle>
}
    50dc:	e7ec      	b.n	50b8 <clock_event_handler+0x8>
    50de:	bf00      	nop
    50e0:	0000adf0 	.word	0x0000adf0

000050e4 <generic_hfclk_start>:
{
    50e4:	b510      	push	{r4, lr}
	__asm__ volatile(
    50e6:	f04f 0320 	mov.w	r3, #32
    50ea:	f3ef 8411 	mrs	r4, BASEPRI
    50ee:	f383 8812 	msr	BASEPRI_MAX, r3
    50f2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    50f6:	4a13      	ldr	r2, [pc, #76]	; (5144 <generic_hfclk_start+0x60>)
    50f8:	6813      	ldr	r3, [r2, #0]
    50fa:	f043 0302 	orr.w	r3, r3, #2
    50fe:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    5100:	f013 0f01 	tst.w	r3, #1
    5104:	d108      	bne.n	5118 <generic_hfclk_start+0x34>
	bool already_started = false;
    5106:	2300      	movs	r3, #0
	__asm__ volatile(
    5108:	f384 8811 	msr	BASEPRI, r4
    510c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    5110:	b99b      	cbnz	r3, 513a <generic_hfclk_start+0x56>
	hfclk_start();
    5112:	f004 ffb4 	bl	a07e <hfclk_start>
}
    5116:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5118:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    511c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5120:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    5124:	f012 0f01 	tst.w	r2, #1
    5128:	d101      	bne.n	512e <generic_hfclk_start+0x4a>
	bool already_started = false;
    512a:	2300      	movs	r3, #0
    512c:	e7ec      	b.n	5108 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    512e:	f7ff ff85 	bl	503c <get_hf_flags>
    5132:	f004 ff39 	bl	9fa8 <set_on_state>
			already_started = true;
    5136:	2301      	movs	r3, #1
    5138:	e7e6      	b.n	5108 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    513a:	2100      	movs	r1, #0
    513c:	4802      	ldr	r0, [pc, #8]	; (5148 <generic_hfclk_start+0x64>)
    513e:	f004 ff46 	bl	9fce <clkstarted_handle>
		return;
    5142:	e7e8      	b.n	5116 <generic_hfclk_start+0x32>
    5144:	200004e4 	.word	0x200004e4
    5148:	0000adf0 	.word	0x0000adf0

0000514c <generic_hfclk_stop>:
{
    514c:	b508      	push	{r3, lr}
    514e:	4b0a      	ldr	r3, [pc, #40]	; (5178 <generic_hfclk_stop+0x2c>)
    5150:	f3bf 8f5b 	dmb	ish
    5154:	e853 2f00 	ldrex	r2, [r3]
    5158:	f022 0102 	bic.w	r1, r2, #2
    515c:	e843 1000 	strex	r0, r1, [r3]
    5160:	2800      	cmp	r0, #0
    5162:	d1f7      	bne.n	5154 <generic_hfclk_stop+0x8>
    5164:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    5168:	f012 0f01 	tst.w	r2, #1
    516c:	d000      	beq.n	5170 <generic_hfclk_stop+0x24>
}
    516e:	bd08      	pop	{r3, pc}
	hfclk_stop();
    5170:	f004 ff8a 	bl	a088 <hfclk_stop>
    5174:	e7fb      	b.n	516e <generic_hfclk_stop+0x22>
    5176:	bf00      	nop
    5178:	200004e4 	.word	0x200004e4

0000517c <api_blocking_start>:
{
    517c:	b500      	push	{lr}
    517e:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5180:	f8cd d000 	str.w	sp, [sp]
    5184:	f8cd d004 	str.w	sp, [sp, #4]
    5188:	2300      	movs	r3, #0
    518a:	9302      	str	r3, [sp, #8]
    518c:	2301      	movs	r3, #1
    518e:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5190:	466b      	mov	r3, sp
    5192:	4a07      	ldr	r2, [pc, #28]	; (51b0 <api_blocking_start+0x34>)
    5194:	f004 ff63 	bl	a05e <api_start>
	if (err < 0) {
    5198:	2800      	cmp	r0, #0
    519a:	db05      	blt.n	51a8 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    519c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    51a0:	2300      	movs	r3, #0
    51a2:	4668      	mov	r0, sp
    51a4:	f002 fe16 	bl	7dd4 <z_impl_k_sem_take>
}
    51a8:	b005      	add	sp, #20
    51aa:	f85d fb04 	ldr.w	pc, [sp], #4
    51ae:	bf00      	nop
    51b0:	0000a09d 	.word	0x0000a09d

000051b4 <lfclk_start>:
{
    51b4:	b508      	push	{r3, lr}
	if (!once) {
    51b6:	4b07      	ldr	r3, [pc, #28]	; (51d4 <lfclk_start+0x20>)
    51b8:	781b      	ldrb	r3, [r3, #0]
    51ba:	b11b      	cbz	r3, 51c4 <lfclk_start+0x10>
}
#endif // defined(CLOCK_FEATURE_HFCLK_DIVIDE_PRESENT) || NRF_CLOCK_HAS_HFCLK_192M

NRFX_STATIC_INLINE void nrfx_clock_lfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    51bc:	2000      	movs	r0, #0
    51be:	f001 facb 	bl	6758 <nrfx_clock_start>
}
    51c2:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
    51c4:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    51c8:	f005 fd80 	bl	accc <z_impl_k_busy_wait>
		once = true;
    51cc:	4b01      	ldr	r3, [pc, #4]	; (51d4 <lfclk_start+0x20>)
    51ce:	2201      	movs	r2, #1
    51d0:	701a      	strb	r2, [r3, #0]
    51d2:	e7f3      	b.n	51bc <lfclk_start+0x8>
    51d4:	20000a2d 	.word	0x20000a2d

000051d8 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    51d8:	b570      	push	{r4, r5, r6, lr}
    51da:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    51dc:	2200      	movs	r2, #0
    51de:	2101      	movs	r1, #1
    51e0:	4610      	mov	r0, r2
    51e2:	f7ff f887 	bl	42f4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    51e6:	2000      	movs	r0, #0
    51e8:	f7ff f852 	bl	4290 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    51ec:	4811      	ldr	r0, [pc, #68]	; (5234 <clk_init+0x5c>)
    51ee:	f001 fa9f 	bl	6730 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    51f2:	4b11      	ldr	r3, [pc, #68]	; (5238 <clk_init+0x60>)
    51f4:	4298      	cmp	r0, r3
    51f6:	d11a      	bne.n	522e <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    51f8:	f005 f8c5 	bl	a386 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    51fc:	2400      	movs	r4, #0
    51fe:	e003      	b.n	5208 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5200:	2301      	movs	r3, #1
    5202:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    5204:	441c      	add	r4, r3
    5206:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
    5208:	2c01      	cmp	r4, #1
    520a:	d80e      	bhi.n	522a <clk_init+0x52>
						get_sub_data(dev, i);
    520c:	4621      	mov	r1, r4
    520e:	4630      	mov	r0, r6
    5210:	f004 fe76 	bl	9f00 <get_sub_data>
    5214:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
    5216:	4621      	mov	r1, r4
    5218:	4630      	mov	r0, r6
    521a:	f004 fe7e 	bl	9f1a <get_onoff_manager>
    521e:	4907      	ldr	r1, [pc, #28]	; (523c <clk_init+0x64>)
    5220:	f004 fa1a 	bl	9658 <onoff_manager_init>
		if (err < 0) {
    5224:	2800      	cmp	r0, #0
    5226:	daeb      	bge.n	5200 <clk_init+0x28>
    5228:	e000      	b.n	522c <clk_init+0x54>
	}

	return 0;
    522a:	2000      	movs	r0, #0
}
    522c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    522e:	f06f 0004 	mvn.w	r0, #4
    5232:	e7fb      	b.n	522c <clk_init+0x54>
    5234:	000050b1 	.word	0x000050b1
    5238:	0bad0000 	.word	0x0bad0000
    523c:	0000b7fc 	.word	0x0000b7fc

00005240 <lfclk_spinwait>:
{
    5240:	b570      	push	{r4, r5, r6, lr}
    5242:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    5244:	2801      	cmp	r0, #1
    5246:	d107      	bne.n	5258 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    524c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    5250:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    5254:	2b01      	cmp	r3, #1
    5256:	d058      	beq.n	530a <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5258:	f005 fb27 	bl	a8aa <k_is_in_isr>
    525c:	b928      	cbnz	r0, 526a <lfclk_spinwait+0x2a>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    525e:	4b2e      	ldr	r3, [pc, #184]	; (5318 <lfclk_spinwait+0xd8>)
    5260:	781b      	ldrb	r3, [r3, #0]
    5262:	2b00      	cmp	r3, #0
    5264:	d041      	beq.n	52ea <lfclk_spinwait+0xaa>
    5266:	2300      	movs	r3, #0
    5268:	e000      	b.n	526c <lfclk_spinwait+0x2c>
    526a:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    526c:	461c      	mov	r4, r3
    526e:	2b00      	cmp	r3, #0
    5270:	d03d      	beq.n	52ee <lfclk_spinwait+0xae>
	__asm__ volatile(
    5272:	f04f 0320 	mov.w	r3, #32
    5276:	f3ef 8611 	mrs	r6, BASEPRI
    527a:	f383 8812 	msr	BASEPRI_MAX, r3
    527e:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    5282:	b924      	cbnz	r4, 528e <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    5284:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5288:	2202      	movs	r2, #2
    528a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    528e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5292:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5296:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    529a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    529e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    52a2:	d12b      	bne.n	52fc <lfclk_spinwait+0xbc>
    return false;
    52a4:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    52a6:	b11a      	cbz	r2, 52b0 <lfclk_spinwait+0x70>
    52a8:	2b01      	cmp	r3, #1
    52aa:	d029      	beq.n	5300 <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    52ac:	2d01      	cmp	r5, #1
    52ae:	d027      	beq.n	5300 <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    52b0:	b1fc      	cbz	r4, 52f2 <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    52b2:	4630      	mov	r0, r6
    52b4:	f7fe ff94 	bl	41e0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    52b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    52bc:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    52c0:	2b00      	cmp	r3, #0
    52c2:	d1e4      	bne.n	528e <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    52c4:	4b15      	ldr	r3, [pc, #84]	; (531c <lfclk_spinwait+0xdc>)
    52c6:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    52c8:	2b00      	cmp	r3, #0
    52ca:	d0e0      	beq.n	528e <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    52cc:	4b13      	ldr	r3, [pc, #76]	; (531c <lfclk_spinwait+0xdc>)
    52ce:	2200      	movs	r2, #0
    52d0:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    52d2:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    52d4:	2301      	movs	r3, #1
    52d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    52da:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    52de:	4a10      	ldr	r2, [pc, #64]	; (5320 <lfclk_spinwait+0xe0>)
    52e0:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    52e4:	4a0f      	ldr	r2, [pc, #60]	; (5324 <lfclk_spinwait+0xe4>)
    52e6:	6013      	str	r3, [r2, #0]
}
    52e8:	e7d1      	b.n	528e <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    52ea:	2301      	movs	r3, #1
    52ec:	e7be      	b.n	526c <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    52ee:	2600      	movs	r6, #0
    52f0:	e7c7      	b.n	5282 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    52f2:	2021      	movs	r0, #33	; 0x21
    52f4:	2100      	movs	r1, #0
    52f6:	f003 f927 	bl	8548 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    52fa:	e7dd      	b.n	52b8 <lfclk_spinwait+0x78>
                return true;
    52fc:	2201      	movs	r2, #1
    52fe:	e7d2      	b.n	52a6 <lfclk_spinwait+0x66>
	if (isr_mode) {
    5300:	b124      	cbz	r4, 530c <lfclk_spinwait+0xcc>
	__asm__ volatile(
    5302:	f386 8811 	msr	BASEPRI, r6
    5306:	f3bf 8f6f 	isb	sy
}
    530a:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    530c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5310:	2202      	movs	r2, #2
    5312:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5316:	e7f8      	b.n	530a <lfclk_spinwait+0xca>
    5318:	20000a2f 	.word	0x20000a2f
    531c:	40000104 	.word	0x40000104
    5320:	e000e100 	.word	0xe000e100
    5324:	40000008 	.word	0x40000008

00005328 <z_nrf_clock_control_lf_on>:
{
    5328:	b510      	push	{r4, lr}
    532a:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    532c:	4b10      	ldr	r3, [pc, #64]	; (5370 <z_nrf_clock_control_lf_on+0x48>)
    532e:	2101      	movs	r1, #1
    5330:	f3bf 8f5b 	dmb	ish
    5334:	e853 2f00 	ldrex	r2, [r3]
    5338:	e843 1000 	strex	r0, r1, [r3]
    533c:	2800      	cmp	r0, #0
    533e:	d1f9      	bne.n	5334 <z_nrf_clock_control_lf_on+0xc>
    5340:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    5344:	b11a      	cbz	r2, 534e <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    5346:	1e63      	subs	r3, r4, #1
    5348:	2b01      	cmp	r3, #1
    534a:	d90c      	bls.n	5366 <z_nrf_clock_control_lf_on+0x3e>
}
    534c:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    534e:	4809      	ldr	r0, [pc, #36]	; (5374 <z_nrf_clock_control_lf_on+0x4c>)
    5350:	f004 fde3 	bl	9f1a <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    5354:	4908      	ldr	r1, [pc, #32]	; (5378 <z_nrf_clock_control_lf_on+0x50>)
    5356:	2300      	movs	r3, #0
    5358:	604b      	str	r3, [r1, #4]
    535a:	60cb      	str	r3, [r1, #12]
    535c:	2301      	movs	r3, #1
    535e:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    5360:	f004 f996 	bl	9690 <onoff_request>
    5364:	e7ef      	b.n	5346 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    5366:	4620      	mov	r0, r4
    5368:	f7ff ff6a 	bl	5240 <lfclk_spinwait>
		break;
    536c:	e7ee      	b.n	534c <z_nrf_clock_control_lf_on+0x24>
    536e:	bf00      	nop
    5370:	200004e8 	.word	0x200004e8
    5374:	0000adf0 	.word	0x0000adf0
    5378:	20000484 	.word	0x20000484

0000537c <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    537c:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    537e:	4c04      	ldr	r4, [pc, #16]	; (5390 <rtt_console_init+0x14>)
    5380:	4620      	mov	r0, r4
    5382:	f7fd f85f 	bl	2444 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    5386:	4620      	mov	r0, r4
    5388:	f7ff fe1c 	bl	4fc4 <__stdout_hook_install>

	return 0;
}
    538c:	2000      	movs	r0, #0
    538e:	bd10      	pop	{r4, pc}
    5390:	00005395 	.word	0x00005395

00005394 <rtt_console_out>:
{
    5394:	b5f0      	push	{r4, r5, r6, r7, lr}
    5396:	b083      	sub	sp, #12
    5398:	4607      	mov	r7, r0
	char c = (char)character;
    539a:	f88d 0007 	strb.w	r0, [sp, #7]
	int max_cnt = CONFIG_RTT_TX_RETRY_CNT;
    539e:	2602      	movs	r6, #2
    53a0:	e006      	b.n	53b0 <rtt_console_out+0x1c>
			host_present = true;
    53a2:	4b13      	ldr	r3, [pc, #76]	; (53f0 <rtt_console_out+0x5c>)
    53a4:	2201      	movs	r2, #1
    53a6:	701a      	strb	r2, [r3, #0]
    53a8:	e01e      	b.n	53e8 <rtt_console_out+0x54>
				wait();
    53aa:	f004 fe7c 	bl	a0a6 <wait>
				max_cnt--;
    53ae:	3e01      	subs	r6, #1
	return z_impl_k_mutex_lock(mutex, timeout);
    53b0:	4d10      	ldr	r5, [pc, #64]	; (53f4 <rtt_console_out+0x60>)
    53b2:	f04f 32ff 	mov.w	r2, #4294967295
    53b6:	f04f 33ff 	mov.w	r3, #4294967295
    53ba:	4628      	mov	r0, r5
    53bc:	f002 fc18 	bl	7bf0 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    53c0:	2201      	movs	r2, #1
    53c2:	f10d 0107 	add.w	r1, sp, #7
    53c6:	2000      	movs	r0, #0
    53c8:	f002 f876 	bl	74b8 <SEGGER_RTT_WriteNoLock>
    53cc:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    53ce:	4628      	mov	r0, r5
    53d0:	f002 fc98 	bl	7d04 <z_impl_k_mutex_unlock>
		if (cnt) {
    53d4:	2c00      	cmp	r4, #0
    53d6:	d1e4      	bne.n	53a2 <rtt_console_out+0xe>
		} else if (host_present) {
    53d8:	4b05      	ldr	r3, [pc, #20]	; (53f0 <rtt_console_out+0x5c>)
    53da:	781b      	ldrb	r3, [r3, #0]
    53dc:	b123      	cbz	r3, 53e8 <rtt_console_out+0x54>
			if (max_cnt) {
    53de:	2e00      	cmp	r6, #0
    53e0:	d1e3      	bne.n	53aa <rtt_console_out+0x16>
				host_present = false;
    53e2:	4b03      	ldr	r3, [pc, #12]	; (53f0 <rtt_console_out+0x5c>)
    53e4:	2200      	movs	r2, #0
    53e6:	701a      	strb	r2, [r3, #0]
}
    53e8:	4638      	mov	r0, r7
    53ea:	b003      	add	sp, #12
    53ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53ee:	bf00      	nop
    53f0:	20000a2e 	.word	0x20000a2e
    53f4:	20000104 	.word	0x20000104

000053f8 <get_drive>:

static int get_drive(gpio_flags_t flags, nrf_gpio_pin_drive_t *drive)
{
	int err = 0;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    53f8:	4b1f      	ldr	r3, [pc, #124]	; (5478 <get_drive+0x80>)
    53fa:	4003      	ands	r3, r0
    53fc:	4a1f      	ldr	r2, [pc, #124]	; (547c <get_drive+0x84>)
    53fe:	4293      	cmp	r3, r2
    5400:	d032      	beq.n	5468 <get_drive+0x70>
    5402:	d816      	bhi.n	5432 <get_drive+0x3a>
    5404:	2b06      	cmp	r3, #6
    5406:	d02b      	beq.n	5460 <get_drive+0x68>
    5408:	d906      	bls.n	5418 <get_drive+0x20>
    540a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    540e:	d10d      	bne.n	542c <get_drive+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		*drive = NRF_GPIO_PIN_H0S1;
    5410:	2301      	movs	r3, #1
    5412:	700b      	strb	r3, [r1, #0]
	int err = 0;
    5414:	2000      	movs	r0, #0
		break;
    5416:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    5418:	b1fb      	cbz	r3, 545a <get_drive+0x62>
    541a:	2b02      	cmp	r3, #2
    541c:	d103      	bne.n	5426 <get_drive+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0S1;
    541e:	2304      	movs	r3, #4
    5420:	700b      	strb	r3, [r1, #0]
	int err = 0;
    5422:	2000      	movs	r0, #0
		break;
    5424:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    5426:	f06f 0015 	mvn.w	r0, #21
    542a:	4770      	bx	lr
    542c:	f06f 0015 	mvn.w	r0, #21
    5430:	4770      	bx	lr
    5432:	4a13      	ldr	r2, [pc, #76]	; (5480 <get_drive+0x88>)
    5434:	4293      	cmp	r3, r2
    5436:	d01b      	beq.n	5470 <get_drive+0x78>
    5438:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    543c:	d103      	bne.n	5446 <get_drive+0x4e>
		*drive = NRF_GPIO_PIN_H0H1;
    543e:	2303      	movs	r3, #3
    5440:	700b      	strb	r3, [r1, #0]
	int err = 0;
    5442:	2000      	movs	r0, #0
		break;
    5444:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    5446:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    544a:	d103      	bne.n	5454 <get_drive+0x5c>
		*drive = NRF_GPIO_PIN_S0H1;
    544c:	2302      	movs	r3, #2
    544e:	700b      	strb	r3, [r1, #0]
	int err = 0;
    5450:	2000      	movs	r0, #0
		break;
    5452:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    5454:	f06f 0015 	mvn.w	r0, #21
    5458:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    545a:	2000      	movs	r0, #0
    545c:	7008      	strb	r0, [r1, #0]
		break;
    545e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    5460:	2306      	movs	r3, #6
    5462:	700b      	strb	r3, [r1, #0]
	int err = 0;
    5464:	2000      	movs	r0, #0
		break;
    5466:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    5468:	2307      	movs	r3, #7
    546a:	700b      	strb	r3, [r1, #0]
	int err = 0;
    546c:	2000      	movs	r0, #0
		break;
    546e:	4770      	bx	lr
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0H1;
    5470:	2305      	movs	r3, #5
    5472:	700b      	strb	r3, [r1, #0]
	int err = 0;
    5474:	2000      	movs	r0, #0
		err = -EINVAL;
		break;
	}

	return err;
}
    5476:	4770      	bx	lr
    5478:	00f00006 	.word	0x00f00006
    547c:	00100006 	.word	0x00100006
    5480:	00400002 	.word	0x00400002

00005484 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5484:	b908      	cbnz	r0, 548a <get_dev+0x6>
    5486:	4802      	ldr	r0, [pc, #8]	; (5490 <get_dev+0xc>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    5488:	4770      	bx	lr
	const struct device *dev = NULL;
    548a:	2000      	movs	r0, #0
    548c:	4770      	bx	lr
    548e:	bf00      	nop
    5490:	0000ae08 	.word	0x0000ae08

00005494 <gpio_nrfx_pin_interrupt_configure>:
{
    5494:	b5f0      	push	{r4, r5, r6, r7, lr}
    5496:	b085      	sub	sp, #20
    5498:	460e      	mov	r6, r1
    549a:	4619      	mov	r1, r3
	return port->config;
    549c:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    549e:	7b1b      	ldrb	r3, [r3, #12]
    54a0:	f006 051f 	and.w	r5, r6, #31
    54a4:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    54a8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    54ac:	d022      	beq.n	54f4 <gpio_nrfx_pin_interrupt_configure+0x60>
    54ae:	4607      	mov	r7, r0
    54b0:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    54b2:	2300      	movs	r3, #0
    54b4:	9302      	str	r3, [sp, #8]
    54b6:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    54b8:	4610      	mov	r0, r2
    54ba:	f004 fe31 	bl	a120 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    54be:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    54c2:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    54c4:	6899      	ldr	r1, [r3, #8]
    54c6:	40f1      	lsrs	r1, r6
    54c8:	f011 0f01 	tst.w	r1, #1
    54cc:	d102      	bne.n	54d4 <gpio_nrfx_pin_interrupt_configure+0x40>
    54ce:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
    54d2:	d014      	beq.n	54fe <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    54d4:	2300      	movs	r3, #0
    54d6:	aa02      	add	r2, sp, #8
    54d8:	4619      	mov	r1, r3
    54da:	4628      	mov	r0, r5
    54dc:	f001 fbb2 	bl	6c44 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    54e0:	4b19      	ldr	r3, [pc, #100]	; (5548 <gpio_nrfx_pin_interrupt_configure+0xb4>)
    54e2:	4298      	cmp	r0, r3
    54e4:	d12c      	bne.n	5540 <gpio_nrfx_pin_interrupt_configure+0xac>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    54e6:	2101      	movs	r1, #1
    54e8:	4628      	mov	r0, r5
    54ea:	f001 fd75 	bl	6fd8 <nrfx_gpiote_trigger_enable>
	return 0;
    54ee:	2000      	movs	r0, #0
}
    54f0:	b005      	add	sp, #20
    54f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    54f4:	4628      	mov	r0, r5
    54f6:	f001 fdc7 	bl	7088 <nrfx_gpiote_trigger_disable>
		return 0;
    54fa:	2000      	movs	r0, #0
    54fc:	e7f8      	b.n	54f0 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    54fe:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    5502:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5506:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    550a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    550e:	f013 0f01 	tst.w	r3, #1
    5512:	d1df      	bne.n	54d4 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5514:	f10d 0107 	add.w	r1, sp, #7
    5518:	4628      	mov	r0, r5
    551a:	f001 fd01 	bl	6f20 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    551e:	4b0b      	ldr	r3, [pc, #44]	; (554c <gpio_nrfx_pin_interrupt_configure+0xb8>)
    5520:	4298      	cmp	r0, r3
    5522:	d003      	beq.n	552c <gpio_nrfx_pin_interrupt_configure+0x98>
		trigger_config.p_in_channel = &ch;
    5524:	f10d 0307 	add.w	r3, sp, #7
    5528:	9303      	str	r3, [sp, #12]
    552a:	e7d3      	b.n	54d4 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    552c:	f10d 0007 	add.w	r0, sp, #7
    5530:	f001 fd4a 	bl	6fc8 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    5534:	4b04      	ldr	r3, [pc, #16]	; (5548 <gpio_nrfx_pin_interrupt_configure+0xb4>)
    5536:	4298      	cmp	r0, r3
    5538:	d0f4      	beq.n	5524 <gpio_nrfx_pin_interrupt_configure+0x90>
				return -ENOMEM;
    553a:	f06f 000b 	mvn.w	r0, #11
    553e:	e7d7      	b.n	54f0 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    5540:	f06f 0004 	mvn.w	r0, #4
    5544:	e7d4      	b.n	54f0 <gpio_nrfx_pin_interrupt_configure+0x5c>
    5546:	bf00      	nop
    5548:	0bad0000 	.word	0x0bad0000
    554c:	0bad0004 	.word	0x0bad0004

00005550 <pin_uninit>:
{
    5550:	b530      	push	{r4, r5, lr}
    5552:	b083      	sub	sp, #12
    5554:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    5556:	f10d 0107 	add.w	r1, sp, #7
    555a:	f001 fce1 	bl	6f20 <nrfx_gpiote_channel_get>
    555e:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    5560:	4620      	mov	r0, r4
    5562:	f001 fdbb 	bl	70dc <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    5566:	4b0b      	ldr	r3, [pc, #44]	; (5594 <pin_uninit+0x44>)
    5568:	4298      	cmp	r0, r3
    556a:	d10f      	bne.n	558c <pin_uninit+0x3c>
	if (free_ch) {
    556c:	429d      	cmp	r5, r3
    556e:	d005      	beq.n	557c <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    5570:	4b08      	ldr	r3, [pc, #32]	; (5594 <pin_uninit+0x44>)
    5572:	4298      	cmp	r0, r3
    5574:	d107      	bne.n	5586 <pin_uninit+0x36>
    5576:	2000      	movs	r0, #0
}
    5578:	b003      	add	sp, #12
    557a:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    557c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    5580:	f001 fd1a 	bl	6fb8 <nrfx_gpiote_channel_free>
    5584:	e7f4      	b.n	5570 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    5586:	f06f 0004 	mvn.w	r0, #4
    558a:	e7f5      	b.n	5578 <pin_uninit+0x28>
		return -EIO;
    558c:	f06f 0004 	mvn.w	r0, #4
    5590:	e7f2      	b.n	5578 <pin_uninit+0x28>
    5592:	bf00      	nop
    5594:	0bad0000 	.word	0x0bad0000

00005598 <gpio_nrfx_pin_configure>:
{
    5598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    559c:	b087      	sub	sp, #28
	return port->config;
    559e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    55a2:	f898 300c 	ldrb.w	r3, [r8, #12]
    55a6:	f001 051f 	and.w	r5, r1, #31
    55aa:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    55ae:	2a00      	cmp	r2, #0
    55b0:	d044      	beq.n	563c <gpio_nrfx_pin_configure+0xa4>
    55b2:	460c      	mov	r4, r1
    55b4:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    55b6:	2600      	movs	r6, #0
    55b8:	9603      	str	r6, [sp, #12]
    55ba:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    55bc:	f10d 0117 	add.w	r1, sp, #23
    55c0:	4620      	mov	r0, r4
    55c2:	f001 fcad 	bl	6f20 <nrfx_gpiote_channel_get>
    55c6:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    55c8:	4633      	mov	r3, r6
    55ca:	aa03      	add	r2, sp, #12
    55cc:	4631      	mov	r1, r6
    55ce:	4628      	mov	r0, r5
    55d0:	f001 fb38 	bl	6c44 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    55d4:	4b30      	ldr	r3, [pc, #192]	; (5698 <gpio_nrfx_pin_configure+0x100>)
    55d6:	4298      	cmp	r0, r3
    55d8:	d15b      	bne.n	5692 <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    55da:	4599      	cmp	r9, r3
    55dc:	d036      	beq.n	564c <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    55de:	f417 7f00 	tst.w	r7, #512	; 0x200
    55e2:	d043      	beq.n	566c <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    55e4:	f10d 0103 	add.w	r1, sp, #3
    55e8:	4638      	mov	r0, r7
    55ea:	f7ff ff05 	bl	53f8 <get_drive>
		if (rv != 0) {
    55ee:	4606      	mov	r6, r0
    55f0:	bb40      	cbnz	r0, 5644 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    55f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    55f6:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    55fa:	f417 7f80 	tst.w	r7, #256	; 0x100
    55fe:	bf0c      	ite	eq
    5600:	2301      	moveq	r3, #1
    5602:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    5604:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    5608:	4638      	mov	r0, r7
    560a:	f004 fd56 	bl	a0ba <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    560e:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    5612:	f417 6f00 	tst.w	r7, #2048	; 0x800
    5616:	d01e      	beq.n	5656 <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    5618:	f8d8 3004 	ldr.w	r3, [r8, #4]
    561c:	2101      	movs	r1, #1
    561e:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    5622:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    5626:	2200      	movs	r2, #0
    5628:	a901      	add	r1, sp, #4
    562a:	4628      	mov	r0, r5
    562c:	f001 fbba 	bl	6da4 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    5630:	4b19      	ldr	r3, [pc, #100]	; (5698 <gpio_nrfx_pin_configure+0x100>)
    5632:	4298      	cmp	r0, r3
    5634:	d006      	beq.n	5644 <gpio_nrfx_pin_configure+0xac>
    5636:	f06f 0615 	mvn.w	r6, #21
    563a:	e003      	b.n	5644 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    563c:	4628      	mov	r0, r5
    563e:	f7ff ff87 	bl	5550 <pin_uninit>
    5642:	4606      	mov	r6, r0
}
    5644:	4630      	mov	r0, r6
    5646:	b007      	add	sp, #28
    5648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    564c:	f89d 0017 	ldrb.w	r0, [sp, #23]
    5650:	f001 fcb2 	bl	6fb8 <nrfx_gpiote_channel_free>
    5654:	e7c3      	b.n	55de <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    5656:	f417 6f80 	tst.w	r7, #1024	; 0x400
    565a:	d0e4      	beq.n	5626 <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    565c:	f8d8 2004 	ldr.w	r2, [r8, #4]
    5660:	2301      	movs	r3, #1
    5662:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    5666:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    566a:	e7dc      	b.n	5626 <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    566c:	4638      	mov	r0, r7
    566e:	f004 fd24 	bl	a0ba <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    5672:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5676:	2300      	movs	r3, #0
    5678:	461a      	mov	r2, r3
    567a:	a902      	add	r1, sp, #8
    567c:	4628      	mov	r0, r5
    567e:	f001 fae1 	bl	6c44 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    5682:	4b05      	ldr	r3, [pc, #20]	; (5698 <gpio_nrfx_pin_configure+0x100>)
    5684:	4298      	cmp	r0, r3
    5686:	d101      	bne.n	568c <gpio_nrfx_pin_configure+0xf4>
    5688:	2600      	movs	r6, #0
    568a:	e7db      	b.n	5644 <gpio_nrfx_pin_configure+0xac>
    568c:	f06f 0615 	mvn.w	r6, #21
    5690:	e7d8      	b.n	5644 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    5692:	f06f 0615 	mvn.w	r6, #21
    5696:	e7d5      	b.n	5644 <gpio_nrfx_pin_configure+0xac>
    5698:	0bad0000 	.word	0x0bad0000

0000569c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    569c:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    569e:	f001 fc81 	bl	6fa4 <nrfx_gpiote_is_init>
    56a2:	b108      	cbz	r0, 56a8 <gpio_nrfx_init+0xc>
		return 0;
    56a4:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    56a6:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    56a8:	f001 fc52 	bl	6f50 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    56ac:	4b08      	ldr	r3, [pc, #32]	; (56d0 <gpio_nrfx_init+0x34>)
    56ae:	4298      	cmp	r0, r3
    56b0:	d10a      	bne.n	56c8 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    56b2:	2100      	movs	r1, #0
    56b4:	4807      	ldr	r0, [pc, #28]	; (56d4 <gpio_nrfx_init+0x38>)
    56b6:	f001 fc2d 	bl	6f14 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    56ba:	2200      	movs	r2, #0
    56bc:	2105      	movs	r1, #5
    56be:	2006      	movs	r0, #6
    56c0:	f7fe fe18 	bl	42f4 <z_arm_irq_priority_set>
	return 0;
    56c4:	2000      	movs	r0, #0
    56c6:	e7ee      	b.n	56a6 <gpio_nrfx_init+0xa>
		return -EIO;
    56c8:	f06f 0004 	mvn.w	r0, #4
    56cc:	e7eb      	b.n	56a6 <gpio_nrfx_init+0xa>
    56ce:	bf00      	nop
    56d0:	0bad0000 	.word	0x0bad0000
    56d4:	0000a1b1 	.word	0x0000a1b1

000056d8 <configure>:
	}
}

static int configure(const struct device *dev,
		     const struct spi_config *spi_cfg)
{
    56d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    56dc:	b086      	sub	sp, #24
    56de:	460c      	mov	r4, r1
	return dev->data;
    56e0:	6907      	ldr	r7, [r0, #16]
	return dev->config;
    56e2:	f8d0 8004 	ldr.w	r8, [r0, #4]
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
	struct spi_context *ctx = &dev_data->ctx;
	nrfx_spi_config_t config;
	nrfx_err_t result;

	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    56e6:	f897 c05d 	ldrb.w	ip, [r7, #93]	; 0x5d
    56ea:	f1bc 0f00 	cmp.w	ip, #0
    56ee:	d003      	beq.n	56f8 <configure+0x20>
	._ctx_name.num_cs_gpios = DT_PROP_LEN_OR(_node_id, cs_gpios, 0),

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
    56f0:	683b      	ldr	r3, [r7, #0]
    56f2:	428b      	cmp	r3, r1
    56f4:	f000 80f9 	beq.w	58ea <configure+0x212>
		/* Already configured. No need to do it again. */
		return 0;
	}

	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    56f8:	88a3      	ldrh	r3, [r4, #4]
    56fa:	f413 6f00 	tst.w	r3, #2048	; 0x800
    56fe:	d15c      	bne.n	57ba <configure+0xe2>
		LOG_ERR("Half-duplex not supported");
		return -ENOTSUP;
	}

	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    5700:	f013 0f01 	tst.w	r3, #1
    5704:	d16c      	bne.n	57e0 <configure+0x108>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
		return -EINVAL;
	}

	if (spi_cfg->operation & SPI_MODE_LOOP) {
    5706:	f013 0f08 	tst.w	r3, #8
    570a:	d17d      	bne.n	5808 <configure+0x130>
	    (spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
		LOG_ERR("Only single line mode is supported");
		return -EINVAL;
	}

	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    570c:	f3c3 1345 	ubfx	r3, r3, #5, #6
    5710:	2b08      	cmp	r3, #8
    5712:	f040 808c 	bne.w	582e <configure+0x156>
		LOG_ERR("Word sizes other than 8 bits are not supported");
		return -EINVAL;
	}

	if (spi_cfg->frequency < 125000) {
    5716:	6822      	ldr	r2, [r4, #0]
    5718:	4b75      	ldr	r3, [pc, #468]	; (58f0 <configure+0x218>)
    571a:	429a      	cmp	r2, r3
    571c:	f240 809a 	bls.w	5854 <configure+0x17c>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
		return -EINVAL;
	}

	config = dev_config->def_config;
    5720:	ad01      	add	r5, sp, #4
    5722:	f108 0608 	add.w	r6, r8, #8
    5726:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    5728:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    572a:	6833      	ldr	r3, [r6, #0]
    572c:	602b      	str	r3, [r5, #0]

	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
    572e:	6823      	ldr	r3, [r4, #0]
	if (frequency < 250000) {
    5730:	4a70      	ldr	r2, [pc, #448]	; (58f4 <configure+0x21c>)
    5732:	4293      	cmp	r3, r2
    5734:	f240 80a1 	bls.w	587a <configure+0x1a2>
	} else if (frequency < 500000) {
    5738:	4a6f      	ldr	r2, [pc, #444]	; (58f8 <configure+0x220>)
    573a:	4293      	cmp	r3, r2
    573c:	f240 80a0 	bls.w	5880 <configure+0x1a8>
	} else if (frequency < 1000000) {
    5740:	4a6e      	ldr	r2, [pc, #440]	; (58fc <configure+0x224>)
    5742:	4293      	cmp	r3, r2
    5744:	f240 809f 	bls.w	5886 <configure+0x1ae>
	} else if (frequency < 2000000) {
    5748:	4a6d      	ldr	r2, [pc, #436]	; (5900 <configure+0x228>)
    574a:	4293      	cmp	r3, r2
    574c:	f240 809e 	bls.w	588c <configure+0x1b4>
	} else if (frequency < 4000000) {
    5750:	4a6c      	ldr	r2, [pc, #432]	; (5904 <configure+0x22c>)
    5752:	4293      	cmp	r3, r2
    5754:	f240 809d 	bls.w	5892 <configure+0x1ba>
	} else if (frequency < 8000000) {
    5758:	4a6b      	ldr	r2, [pc, #428]	; (5908 <configure+0x230>)
    575a:	4293      	cmp	r3, r2
    575c:	f080 809c 	bcs.w	5898 <configure+0x1c0>
		return NRF_SPI_FREQ_4M;
    5760:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
    5764:	9303      	str	r3, [sp, #12]
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
    5766:	88a3      	ldrh	r3, [r4, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    5768:	f013 0f02 	tst.w	r3, #2
    576c:	f000 8097 	beq.w	589e <configure+0x1c6>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    5770:	f013 0f04 	tst.w	r3, #4
    5774:	f000 8098 	beq.w	58a8 <configure+0x1d0>
			return NRF_SPI_MODE_3;
    5778:	2303      	movs	r3, #3
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
    577a:	f88d 3010 	strb.w	r3, [sp, #16]
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
    577e:	88a3      	ldrh	r3, [r4, #4]
	if (operation & SPI_TRANSFER_LSB) {
    5780:	f013 0f10 	tst.w	r3, #16
    5784:	f000 8094 	beq.w	58b0 <configure+0x1d8>
		return NRF_SPI_BIT_ORDER_LSB_FIRST;
    5788:	2301      	movs	r3, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
    578a:	f88d 3011 	strb.w	r3, [sp, #17]

	if (dev_data->initialized) {
    578e:	f1bc 0f00 	cmp.w	ip, #0
    5792:	f040 808f 	bne.w	58b4 <configure+0x1dc>
		nrfx_spi_uninit(&dev_config->spi);
		dev_data->initialized = false;
	}

	result = nrfx_spi_init(&dev_config->spi, &config,
    5796:	463b      	mov	r3, r7
    5798:	4a5c      	ldr	r2, [pc, #368]	; (590c <configure+0x234>)
    579a:	a901      	add	r1, sp, #4
    579c:	4640      	mov	r0, r8
    579e:	f001 fce9 	bl	7174 <nrfx_spi_init>
			       event_handler, dev_data);
	if (result != NRFX_SUCCESS) {
    57a2:	4b5b      	ldr	r3, [pc, #364]	; (5910 <configure+0x238>)
    57a4:	4298      	cmp	r0, r3
    57a6:	f040 808c 	bne.w	58c2 <configure+0x1ea>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
		return -EIO;
	}

	dev_data->initialized = true;
    57aa:	2301      	movs	r3, #1
    57ac:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	ctx->config = spi_cfg;
    57b0:	603c      	str	r4, [r7, #0]

	return 0;
    57b2:	2000      	movs	r0, #0
}
    57b4:	b006      	add	sp, #24
    57b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    57ba:	4b56      	ldr	r3, [pc, #344]	; (5914 <configure+0x23c>)
    57bc:	4a56      	ldr	r2, [pc, #344]	; (5918 <configure+0x240>)
    57be:	1a9b      	subs	r3, r3, r2
    57c0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Half-duplex not supported");
    57c2:	f04f 0100 	mov.w	r1, #0
    57c6:	2201      	movs	r2, #1
    57c8:	f362 0102 	bfi	r1, r2, #0, #3
    57cc:	f36f 01c5 	bfc	r1, #3, #3
    57d0:	f363 118f 	bfi	r1, r3, #6, #10
    57d4:	4851      	ldr	r0, [pc, #324]	; (591c <configure+0x244>)
    57d6:	f7fd ffc7 	bl	3768 <log_0>
		return -ENOTSUP;
    57da:	f06f 0085 	mvn.w	r0, #133	; 0x85
    57de:	e7e9      	b.n	57b4 <configure+0xdc>
    57e0:	4b4c      	ldr	r3, [pc, #304]	; (5914 <configure+0x23c>)
    57e2:	4a4d      	ldr	r2, [pc, #308]	; (5918 <configure+0x240>)
    57e4:	1a9b      	subs	r3, r3, r2
    57e6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    57e8:	f04f 0200 	mov.w	r2, #0
    57ec:	2101      	movs	r1, #1
    57ee:	f361 0202 	bfi	r2, r1, #0, #3
    57f2:	f36f 02c5 	bfc	r2, #3, #3
    57f6:	f363 128f 	bfi	r2, r3, #6, #10
    57fa:	6801      	ldr	r1, [r0, #0]
    57fc:	4848      	ldr	r0, [pc, #288]	; (5920 <configure+0x248>)
    57fe:	f7fd ff41 	bl	3684 <log_1>
		return -EINVAL;
    5802:	f06f 0015 	mvn.w	r0, #21
    5806:	e7d5      	b.n	57b4 <configure+0xdc>
    5808:	4b42      	ldr	r3, [pc, #264]	; (5914 <configure+0x23c>)
    580a:	4a43      	ldr	r2, [pc, #268]	; (5918 <configure+0x240>)
    580c:	1a9b      	subs	r3, r3, r2
    580e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Loopback mode is not supported");
    5810:	f04f 0100 	mov.w	r1, #0
    5814:	2201      	movs	r2, #1
    5816:	f362 0102 	bfi	r1, r2, #0, #3
    581a:	f36f 01c5 	bfc	r1, #3, #3
    581e:	f363 118f 	bfi	r1, r3, #6, #10
    5822:	4840      	ldr	r0, [pc, #256]	; (5924 <configure+0x24c>)
    5824:	f7fd ffa0 	bl	3768 <log_0>
		return -EINVAL;
    5828:	f06f 0015 	mvn.w	r0, #21
    582c:	e7c2      	b.n	57b4 <configure+0xdc>
    582e:	4b39      	ldr	r3, [pc, #228]	; (5914 <configure+0x23c>)
    5830:	4a39      	ldr	r2, [pc, #228]	; (5918 <configure+0x240>)
    5832:	1a9b      	subs	r3, r3, r2
    5834:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Word sizes other than 8 bits are not supported");
    5836:	f04f 0100 	mov.w	r1, #0
    583a:	2201      	movs	r2, #1
    583c:	f362 0102 	bfi	r1, r2, #0, #3
    5840:	f36f 01c5 	bfc	r1, #3, #3
    5844:	f363 118f 	bfi	r1, r3, #6, #10
    5848:	4837      	ldr	r0, [pc, #220]	; (5928 <configure+0x250>)
    584a:	f7fd ff8d 	bl	3768 <log_0>
		return -EINVAL;
    584e:	f06f 0015 	mvn.w	r0, #21
    5852:	e7af      	b.n	57b4 <configure+0xdc>
    5854:	4b2f      	ldr	r3, [pc, #188]	; (5914 <configure+0x23c>)
    5856:	4a30      	ldr	r2, [pc, #192]	; (5918 <configure+0x240>)
    5858:	1a9b      	subs	r3, r3, r2
    585a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    585c:	f04f 0100 	mov.w	r1, #0
    5860:	2201      	movs	r2, #1
    5862:	f362 0102 	bfi	r1, r2, #0, #3
    5866:	f36f 01c5 	bfc	r1, #3, #3
    586a:	f363 118f 	bfi	r1, r3, #6, #10
    586e:	482f      	ldr	r0, [pc, #188]	; (592c <configure+0x254>)
    5870:	f7fd ff7a 	bl	3768 <log_0>
		return -EINVAL;
    5874:	f06f 0015 	mvn.w	r0, #21
    5878:	e79c      	b.n	57b4 <configure+0xdc>
		return NRF_SPI_FREQ_125K;
    587a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    587e:	e771      	b.n	5764 <configure+0x8c>
		return NRF_SPI_FREQ_250K;
    5880:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5884:	e76e      	b.n	5764 <configure+0x8c>
		return NRF_SPI_FREQ_500K;
    5886:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    588a:	e76b      	b.n	5764 <configure+0x8c>
		return NRF_SPI_FREQ_1M;
    588c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5890:	e768      	b.n	5764 <configure+0x8c>
		return NRF_SPI_FREQ_2M;
    5892:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    5896:	e765      	b.n	5764 <configure+0x8c>
		return NRF_SPI_FREQ_8M;
    5898:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    589c:	e762      	b.n	5764 <configure+0x8c>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    589e:	f013 0f04 	tst.w	r3, #4
    58a2:	d003      	beq.n	58ac <configure+0x1d4>
			return NRF_SPI_MODE_1;
    58a4:	2301      	movs	r3, #1
    58a6:	e768      	b.n	577a <configure+0xa2>
			return NRF_SPI_MODE_2;
    58a8:	2302      	movs	r3, #2
    58aa:	e766      	b.n	577a <configure+0xa2>
			return NRF_SPI_MODE_0;
    58ac:	2300      	movs	r3, #0
    58ae:	e764      	b.n	577a <configure+0xa2>
		return NRF_SPI_BIT_ORDER_MSB_FIRST;
    58b0:	2300      	movs	r3, #0
    58b2:	e76a      	b.n	578a <configure+0xb2>
		nrfx_spi_uninit(&dev_config->spi);
    58b4:	4640      	mov	r0, r8
    58b6:	f001 fcb7 	bl	7228 <nrfx_spi_uninit>
		dev_data->initialized = false;
    58ba:	2300      	movs	r3, #0
    58bc:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    58c0:	e769      	b.n	5796 <configure+0xbe>
    58c2:	4b14      	ldr	r3, [pc, #80]	; (5914 <configure+0x23c>)
    58c4:	4a14      	ldr	r2, [pc, #80]	; (5918 <configure+0x240>)
    58c6:	1a9b      	subs	r3, r3, r2
    58c8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    58ca:	f04f 0200 	mov.w	r2, #0
    58ce:	2101      	movs	r1, #1
    58d0:	f361 0202 	bfi	r2, r1, #0, #3
    58d4:	f36f 02c5 	bfc	r2, #3, #3
    58d8:	f363 128f 	bfi	r2, r3, #6, #10
    58dc:	4601      	mov	r1, r0
    58de:	4814      	ldr	r0, [pc, #80]	; (5930 <configure+0x258>)
    58e0:	f7fd fed0 	bl	3684 <log_1>
		return -EIO;
    58e4:	f06f 0004 	mvn.w	r0, #4
    58e8:	e764      	b.n	57b4 <configure+0xdc>
		return 0;
    58ea:	2000      	movs	r0, #0
    58ec:	e762      	b.n	57b4 <configure+0xdc>
    58ee:	bf00      	nop
    58f0:	0001e847 	.word	0x0001e847
    58f4:	0003d08f 	.word	0x0003d08f
    58f8:	0007a11f 	.word	0x0007a11f
    58fc:	000f423f 	.word	0x000f423f
    5900:	001e847f 	.word	0x001e847f
    5904:	003d08ff 	.word	0x003d08ff
    5908:	007a1200 	.word	0x007a1200
    590c:	00005cdd 	.word	0x00005cdd
    5910:	0bad0000 	.word	0x0bad0000
    5914:	0000afb0 	.word	0x0000afb0
    5918:	0000af70 	.word	0x0000af70
    591c:	0000b83c 	.word	0x0000b83c
    5920:	0000b858 	.word	0x0000b858
    5924:	0000b87c 	.word	0x0000b87c
    5928:	0000b89c 	.word	0x0000b89c
    592c:	0000b8cc 	.word	0x0000b8cc
    5930:	0000b900 	.word	0x0000b900

00005934 <spi_0_init>:
		      &spi_##idx##z_config,				       \
		      POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		       \
		      &spi_nrfx_driver_api)

#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEVICE(0);
    5934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5936:	4606      	mov	r6, r0
    5938:	2200      	movs	r2, #0
    593a:	2101      	movs	r1, #1
    593c:	2003      	movs	r0, #3
    593e:	f7fe fcd9 	bl	42f4 <z_arm_irq_priority_set>
	return dev->data;
    5942:	6937      	ldr	r7, [r6, #16]
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    5944:	68bc      	ldr	r4, [r7, #8]
    5946:	e011      	b.n	596c <spi_0_init+0x38>
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    5948:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    594c:	f013 0f01 	tst.w	r3, #1
    5950:	d027      	beq.n	59a2 <spi_0_init+0x6e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5952:	2301      	movs	r3, #1
    5954:	fa03 fc01 	lsl.w	ip, r3, r1
    5958:	682b      	ldr	r3, [r5, #0]
    595a:	ea43 030c 	orr.w	r3, r3, ip
    595e:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
    5960:	f8de 3000 	ldr.w	r3, [lr]
    5964:	4798      	blx	r3
				cs_gpio->port->name, cs_gpio->pin);
			return -ENODEV;
		}

		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
		if (ret < 0) {
    5966:	2800      	cmp	r0, #0
    5968:	db3a      	blt.n	59e0 <spi_0_init+0xac>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    596a:	3408      	adds	r4, #8
    596c:	68bb      	ldr	r3, [r7, #8]
    596e:	68fa      	ldr	r2, [r7, #12]
    5970:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    5974:	429c      	cmp	r4, r3
    5976:	d232      	bcs.n	59de <spi_0_init+0xaa>
		if (!device_is_ready(cs_gpio->port)) {
    5978:	6820      	ldr	r0, [r4, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    597a:	f004 ff26 	bl	a7ca <z_device_ready>
    597e:	b1c0      	cbz	r0, 59b2 <spi_0_init+0x7e>
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
    5980:	6820      	ldr	r0, [r4, #0]
    5982:	7921      	ldrb	r1, [r4, #4]
				  spec->pin,
				  spec->dt_flags | extra_flags);
    5984:	7963      	ldrb	r3, [r4, #5]
	return gpio_pin_configure(spec->port,
    5986:	f443 53b0 	orr.w	r3, r3, #5632	; 0x1600
	const struct gpio_driver_api *api =
    598a:	f8d0 e008 	ldr.w	lr, [r0, #8]
	struct gpio_driver_data *data =
    598e:	6905      	ldr	r5, [r0, #16]
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    5990:	f413 6f40 	tst.w	r3, #3072	; 0xc00
    5994:	d0d8      	beq.n	5948 <spi_0_init+0x14>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    5996:	f013 0f01 	tst.w	r3, #1
    599a:	d0d5      	beq.n	5948 <spi_0_init+0x14>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    599c:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
    59a0:	e7d2      	b.n	5948 <spi_0_init+0x14>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    59a2:	2301      	movs	r3, #1
    59a4:	fa03 fc01 	lsl.w	ip, r3, r1
    59a8:	682b      	ldr	r3, [r5, #0]
    59aa:	ea23 030c 	bic.w	r3, r3, ip
    59ae:	602b      	str	r3, [r5, #0]
    59b0:	e7d6      	b.n	5960 <spi_0_init+0x2c>
    59b2:	4a24      	ldr	r2, [pc, #144]	; (5a44 <spi_0_init+0x110>)
    59b4:	4b24      	ldr	r3, [pc, #144]	; (5a48 <spi_0_init+0x114>)
    59b6:	1ad2      	subs	r2, r2, r3
    59b8:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    59ba:	f04f 0300 	mov.w	r3, #0
    59be:	2101      	movs	r1, #1
    59c0:	f361 0302 	bfi	r3, r1, #0, #3
    59c4:	f36f 03c5 	bfc	r3, #3, #3
    59c8:	f362 138f 	bfi	r3, r2, #6, #10
    59cc:	6821      	ldr	r1, [r4, #0]
    59ce:	7922      	ldrb	r2, [r4, #4]
    59d0:	6809      	ldr	r1, [r1, #0]
    59d2:	481e      	ldr	r0, [pc, #120]	; (5a4c <spi_0_init+0x118>)
    59d4:	f7fd fe8c 	bl	36f0 <log_2>
			return -ENODEV;
    59d8:	f06f 0012 	mvn.w	r0, #18
    59dc:	e000      	b.n	59e0 <spi_0_init+0xac>
			return ret;
		}
	}

	return 0;
    59de:	2000      	movs	r0, #0
SPI_NRFX_SPI_DEVICE(0);
    59e0:	2800      	cmp	r0, #0
    59e2:	db1e      	blt.n	5a22 <spi_0_init+0xee>
	return dev->data;
    59e4:	6934      	ldr	r4, [r6, #16]
}

static inline void _spi_context_cs_control(struct spi_context *ctx,
					   bool on, bool force_off)
{
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    59e6:	6823      	ldr	r3, [r4, #0]
    59e8:	b1c3      	cbz	r3, 5a1c <spi_0_init+0xe8>
    59ea:	689b      	ldr	r3, [r3, #8]
    59ec:	b1b3      	cbz	r3, 5a1c <spi_0_init+0xe8>
    59ee:	681a      	ldr	r2, [r3, #0]
    59f0:	b1a2      	cbz	r2, 5a1c <spi_0_init+0xe8>
			if (!force_off &&
			    ctx->config->operation & SPI_HOLD_ON_CS) {
				return;
			}

			k_busy_wait(ctx->config->cs->delay);
    59f2:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
    59f4:	f005 f96a 	bl	accc <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    59f8:	6823      	ldr	r3, [r4, #0]
    59fa:	689b      	ldr	r3, [r3, #8]
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
    59fc:	6818      	ldr	r0, [r3, #0]
    59fe:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
    5a00:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    5a02:	681a      	ldr	r2, [r3, #0]
    5a04:	2301      	movs	r3, #1
    5a06:	408b      	lsls	r3, r1
    5a08:	421a      	tst	r2, r3
    5a0a:	d10b      	bne.n	5a24 <spi_0_init+0xf0>
    5a0c:	2300      	movs	r3, #0
	if (value != 0)	{
    5a0e:	b15b      	cbz	r3, 5a28 <spi_0_init+0xf4>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    5a10:	2301      	movs	r3, #1
    5a12:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    5a16:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    5a18:	68db      	ldr	r3, [r3, #12]
    5a1a:	4798      	blx	r3
	return sem->count;
    5a1c:	69a3      	ldr	r3, [r4, #24]
static inline void spi_context_unlock_unconditionally(struct spi_context *ctx)
{
	/* Forcing CS to go to inactive status */
	_spi_context_cs_control(ctx, false, true);

	if (!k_sem_count_get(&ctx->lock)) {
    5a1e:	b153      	cbz	r3, 5a36 <spi_0_init+0x102>
SPI_NRFX_SPI_DEVICE(0);
    5a20:	2000      	movs	r0, #0
    5a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		value = (value != 0) ? 0 : 1;
    5a24:	2301      	movs	r3, #1
    5a26:	e7f2      	b.n	5a0e <spi_0_init+0xda>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    5a28:	2301      	movs	r3, #1
    5a2a:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    5a2e:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    5a30:	691b      	ldr	r3, [r3, #16]
    5a32:	4798      	blx	r3
	return gpio_pin_set(spec->port, spec->pin, value);
    5a34:	e7f2      	b.n	5a1c <spi_0_init+0xe8>
		ctx->owner = NULL;
    5a36:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
    5a38:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
    5a3c:	f002 f9a6 	bl	7d8c <z_impl_k_sem_give>
}
    5a40:	e7ee      	b.n	5a20 <spi_0_init+0xec>
    5a42:	bf00      	nop
    5a44:	0000afb0 	.word	0x0000afb0
    5a48:	0000af70 	.word	0x0000af70
    5a4c:	0000b928 	.word	0x0000b928

00005a50 <transfer_next_chunk>:
{
    5a50:	b530      	push	{r4, r5, lr}
    5a52:	b085      	sub	sp, #20
	return dev->data;
    5a54:	6904      	ldr	r4, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    5a56:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    5a58:	2a00      	cmp	r2, #0
    5a5a:	d04f      	beq.n	5afc <transfer_next_chunk+0xac>
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
    5a5c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    5a5e:	2b00      	cmp	r3, #0
    5a60:	d04e      	beq.n	5b00 <transfer_next_chunk+0xb0>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    5a62:	4293      	cmp	r3, r2
    5a64:	bf28      	it	cs
    5a66:	4613      	movcs	r3, r2
	if (chunk_len > 0) {
    5a68:	2b00      	cmp	r3, #0
    5a6a:	d055      	beq.n	5b18 <transfer_next_chunk+0xc8>
		dev_data->chunk_len = chunk_len;
    5a6c:	65a3      	str	r3, [r4, #88]	; 0x58
		xfer.p_tx_buffer = ctx->tx_buf;
    5a6e:	6c61      	ldr	r1, [r4, #68]	; 0x44
    5a70:	9100      	str	r1, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
    5a72:	2900      	cmp	r1, #0
    5a74:	d046      	beq.n	5b04 <transfer_next_chunk+0xb4>
    5a76:	2a00      	cmp	r2, #0
    5a78:	d146      	bne.n	5b08 <transfer_next_chunk+0xb8>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    5a7a:	2a00      	cmp	r2, #0
    5a7c:	d046      	beq.n	5b0c <transfer_next_chunk+0xbc>
    5a7e:	461a      	mov	r2, r3
    5a80:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    5a82:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    5a84:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    5a86:	2a00      	cmp	r2, #0
    5a88:	d042      	beq.n	5b10 <transfer_next_chunk+0xc0>
    5a8a:	6d22      	ldr	r2, [r4, #80]	; 0x50
    5a8c:	2a00      	cmp	r2, #0
    5a8e:	d141      	bne.n	5b14 <transfer_next_chunk+0xc4>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    5a90:	b902      	cbnz	r2, 5a94 <transfer_next_chunk+0x44>
    5a92:	2300      	movs	r3, #0
    5a94:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
    5a96:	2200      	movs	r2, #0
    5a98:	4669      	mov	r1, sp
    5a9a:	6840      	ldr	r0, [r0, #4]
    5a9c:	f001 fc1e 	bl	72dc <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
    5aa0:	4b23      	ldr	r3, [pc, #140]	; (5b30 <transfer_next_chunk+0xe0>)
    5aa2:	4298      	cmp	r0, r3
    5aa4:	d028      	beq.n	5af8 <transfer_next_chunk+0xa8>
		error = -EIO;
    5aa6:	f06f 0504 	mvn.w	r5, #4
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    5aaa:	6823      	ldr	r3, [r4, #0]
    5aac:	b1e3      	cbz	r3, 5ae8 <transfer_next_chunk+0x98>
    5aae:	689a      	ldr	r2, [r3, #8]
    5ab0:	b1d2      	cbz	r2, 5ae8 <transfer_next_chunk+0x98>
    5ab2:	6811      	ldr	r1, [r2, #0]
    5ab4:	b1c1      	cbz	r1, 5ae8 <transfer_next_chunk+0x98>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
    5ab6:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
    5ab8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    5abc:	d114      	bne.n	5ae8 <transfer_next_chunk+0x98>
			k_busy_wait(ctx->config->cs->delay);
    5abe:	6890      	ldr	r0, [r2, #8]
	z_impl_k_busy_wait(usec_to_wait);
    5ac0:	f005 f904 	bl	accc <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    5ac4:	6823      	ldr	r3, [r4, #0]
    5ac6:	689b      	ldr	r3, [r3, #8]
    5ac8:	6818      	ldr	r0, [r3, #0]
    5aca:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
    5acc:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    5ace:	681a      	ldr	r2, [r3, #0]
    5ad0:	2301      	movs	r3, #1
    5ad2:	408b      	lsls	r3, r1
    5ad4:	421a      	tst	r2, r3
    5ad6:	d121      	bne.n	5b1c <transfer_next_chunk+0xcc>
    5ad8:	2300      	movs	r3, #0
	if (value != 0)	{
    5ada:	b30b      	cbz	r3, 5b20 <transfer_next_chunk+0xd0>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    5adc:	2301      	movs	r3, #1
    5ade:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    5ae2:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    5ae4:	68db      	ldr	r3, [r3, #12]
    5ae6:	4798      	blx	r3
	ctx->sync_status = status;
    5ae8:	6325      	str	r5, [r4, #48]	; 0x30
	k_sem_give(&ctx->sync);
    5aea:	f104 0020 	add.w	r0, r4, #32
	z_impl_k_sem_give(sem);
    5aee:	f002 f94d 	bl	7d8c <z_impl_k_sem_give>
	dev_data->busy = false;
    5af2:	2300      	movs	r3, #0
    5af4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
    5af8:	b005      	add	sp, #20
    5afa:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
    5afc:	6d23      	ldr	r3, [r4, #80]	; 0x50
    5afe:	e7b3      	b.n	5a68 <transfer_next_chunk+0x18>
		return ctx->tx_len;
    5b00:	4613      	mov	r3, r2
    5b02:	e7b1      	b.n	5a68 <transfer_next_chunk+0x18>
	return !!(ctx->tx_buf && ctx->tx_len);
    5b04:	2200      	movs	r2, #0
    5b06:	e7b8      	b.n	5a7a <transfer_next_chunk+0x2a>
    5b08:	2201      	movs	r2, #1
    5b0a:	e7b6      	b.n	5a7a <transfer_next_chunk+0x2a>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    5b0c:	2200      	movs	r2, #0
    5b0e:	e7b7      	b.n	5a80 <transfer_next_chunk+0x30>
	return !!(ctx->rx_buf && ctx->rx_len);
    5b10:	2200      	movs	r2, #0
    5b12:	e7bd      	b.n	5a90 <transfer_next_chunk+0x40>
    5b14:	2201      	movs	r2, #1
    5b16:	e7bb      	b.n	5a90 <transfer_next_chunk+0x40>
	int error = 0;
    5b18:	2500      	movs	r5, #0
    5b1a:	e7c6      	b.n	5aaa <transfer_next_chunk+0x5a>
		value = (value != 0) ? 0 : 1;
    5b1c:	2301      	movs	r3, #1
    5b1e:	e7dc      	b.n	5ada <transfer_next_chunk+0x8a>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    5b20:	2301      	movs	r3, #1
    5b22:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    5b26:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    5b28:	691b      	ldr	r3, [r3, #16]
    5b2a:	4798      	blx	r3
	return gpio_pin_set(spec->port, spec->pin, value);
    5b2c:	e7dc      	b.n	5ae8 <transfer_next_chunk+0x98>
    5b2e:	bf00      	nop
    5b30:	0bad0000 	.word	0x0bad0000

00005b34 <transceive>:
{
    5b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5b38:	4607      	mov	r7, r0
    5b3a:	460e      	mov	r6, r1
    5b3c:	4691      	mov	r9, r2
    5b3e:	4698      	mov	r8, r3
	return dev->data;
    5b40:	6904      	ldr	r4, [r0, #16]
	spi_context_lock(&dev_data->ctx, asynchronous, signal, spi_cfg);
    5b42:	4625      	mov	r5, r4
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    5b44:	888b      	ldrh	r3, [r1, #4]
    5b46:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    5b4a:	d004      	beq.n	5b56 <transceive+0x22>
    5b4c:	69a3      	ldr	r3, [r4, #24]
    5b4e:	b913      	cbnz	r3, 5b56 <transceive+0x22>
		(ctx->owner == spi_cfg)) {
    5b50:	6863      	ldr	r3, [r4, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
    5b52:	4299      	cmp	r1, r3
    5b54:	d008      	beq.n	5b68 <transceive+0x34>
	k_sem_take(&ctx->lock, K_FOREVER);
    5b56:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_sem_take(sem, timeout);
    5b5a:	f04f 32ff 	mov.w	r2, #4294967295
    5b5e:	f04f 33ff 	mov.w	r3, #4294967295
    5b62:	f002 f937 	bl	7dd4 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    5b66:	6066      	str	r6, [r4, #4]
	error = configure(dev, spi_cfg);
    5b68:	4631      	mov	r1, r6
    5b6a:	4638      	mov	r0, r7
    5b6c:	f7ff fdb4 	bl	56d8 <configure>
	if (error == 0) {
    5b70:	4606      	mov	r6, r0
    5b72:	b140      	cbz	r0, 5b86 <transceive+0x52>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    5b74:	6823      	ldr	r3, [r4, #0]
    5b76:	889b      	ldrh	r3, [r3, #4]
    5b78:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    5b7c:	f000 80a1 	beq.w	5cc2 <transceive+0x18e>
}
    5b80:	4630      	mov	r0, r6
    5b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		dev_data->busy = true;
    5b86:	2301      	movs	r3, #1
    5b88:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    5b8c:	f1b9 0f00 	cmp.w	r9, #0
    5b90:	d010      	beq.n	5bb4 <transceive+0x80>
    5b92:	f8d9 3000 	ldr.w	r3, [r9]
    5b96:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    5b98:	b173      	cbz	r3, 5bb8 <transceive+0x84>
    5b9a:	f8d9 3004 	ldr.w	r3, [r9, #4]
    5b9e:	63a3      	str	r3, [r4, #56]	; 0x38
	while (*count) {
    5ba0:	6bab      	ldr	r3, [r5, #56]	; 0x38
    5ba2:	b173      	cbz	r3, 5bc2 <transceive+0x8e>
		if (((*current)->len / dfs) != 0) {
    5ba4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    5ba6:	6851      	ldr	r1, [r2, #4]
    5ba8:	b941      	cbnz	r1, 5bbc <transceive+0x88>
		++(*current);
    5baa:	3208      	adds	r2, #8
    5bac:	636a      	str	r2, [r5, #52]	; 0x34
		--(*count);
    5bae:	3b01      	subs	r3, #1
    5bb0:	63ab      	str	r3, [r5, #56]	; 0x38
    5bb2:	e7f5      	b.n	5ba0 <transceive+0x6c>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    5bb4:	464b      	mov	r3, r9
    5bb6:	e7ee      	b.n	5b96 <transceive+0x62>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    5bb8:	2300      	movs	r3, #0
    5bba:	e7f0      	b.n	5b9e <transceive+0x6a>
			*buf_len = (*current)->len / dfs;
    5bbc:	64a1      	str	r1, [r4, #72]	; 0x48
			return (*current)->buf;
    5bbe:	6813      	ldr	r3, [r2, #0]
    5bc0:	e000      	b.n	5bc4 <transceive+0x90>
	*buf_len = 0;
    5bc2:	64a3      	str	r3, [r4, #72]	; 0x48
	ctx->tx_buf = (const uint8_t *)
    5bc4:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    5bc6:	f1b8 0f00 	cmp.w	r8, #0
    5bca:	d010      	beq.n	5bee <transceive+0xba>
    5bcc:	f8d8 3000 	ldr.w	r3, [r8]
    5bd0:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    5bd2:	b173      	cbz	r3, 5bf2 <transceive+0xbe>
    5bd4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    5bd8:	6423      	str	r3, [r4, #64]	; 0x40
	while (*count) {
    5bda:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    5bdc:	b172      	cbz	r2, 5bfc <transceive+0xc8>
		if (((*current)->len / dfs) != 0) {
    5bde:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    5be0:	6859      	ldr	r1, [r3, #4]
    5be2:	b941      	cbnz	r1, 5bf6 <transceive+0xc2>
		++(*current);
    5be4:	3308      	adds	r3, #8
    5be6:	63eb      	str	r3, [r5, #60]	; 0x3c
		--(*count);
    5be8:	3a01      	subs	r2, #1
    5bea:	642a      	str	r2, [r5, #64]	; 0x40
    5bec:	e7f5      	b.n	5bda <transceive+0xa6>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    5bee:	4643      	mov	r3, r8
    5bf0:	e7ee      	b.n	5bd0 <transceive+0x9c>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    5bf2:	2300      	movs	r3, #0
    5bf4:	e7f0      	b.n	5bd8 <transceive+0xa4>
			*buf_len = (*current)->len / dfs;
    5bf6:	6521      	str	r1, [r4, #80]	; 0x50
			return (*current)->buf;
    5bf8:	681b      	ldr	r3, [r3, #0]
    5bfa:	e001      	b.n	5c00 <transceive+0xcc>
	*buf_len = 0;
    5bfc:	2300      	movs	r3, #0
    5bfe:	6523      	str	r3, [r4, #80]	; 0x50
	ctx->rx_buf = (uint8_t *)
    5c00:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->sync_status = 0;
    5c02:	2300      	movs	r3, #0
    5c04:	6323      	str	r3, [r4, #48]	; 0x30
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    5c06:	6823      	ldr	r3, [r4, #0]
    5c08:	b1c3      	cbz	r3, 5c3c <transceive+0x108>
    5c0a:	689b      	ldr	r3, [r3, #8]
    5c0c:	b1b3      	cbz	r3, 5c3c <transceive+0x108>
    5c0e:	681a      	ldr	r2, [r3, #0]
    5c10:	b1a2      	cbz	r2, 5c3c <transceive+0x108>
    5c12:	4610      	mov	r0, r2
    5c14:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
    5c16:	6913      	ldr	r3, [r2, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    5c18:	681a      	ldr	r2, [r3, #0]
    5c1a:	2301      	movs	r3, #1
    5c1c:	408b      	lsls	r3, r1
    5c1e:	421a      	tst	r2, r3
    5c20:	d100      	bne.n	5c24 <transceive+0xf0>
    5c22:	2601      	movs	r6, #1
	if (value != 0)	{
    5c24:	b39e      	cbz	r6, 5c8e <transceive+0x15a>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    5c26:	2301      	movs	r3, #1
    5c28:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    5c2c:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    5c2e:	68db      	ldr	r3, [r3, #12]
    5c30:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
    5c32:	6823      	ldr	r3, [r4, #0]
    5c34:	689b      	ldr	r3, [r3, #8]
    5c36:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
    5c38:	f005 f848 	bl	accc <z_impl_k_busy_wait>
		transfer_next_chunk(dev);
    5c3c:	4638      	mov	r0, r7
    5c3e:	f7ff ff07 	bl	5a50 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    5c42:	6d23      	ldr	r3, [r4, #80]	; 0x50
    5c44:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    5c46:	429a      	cmp	r2, r3
    5c48:	bf38      	it	cc
    5c4a:	461a      	movcc	r2, r3
    5c4c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
    5c50:	fb03 f302 	mul.w	r3, r3, r2
			     ctx->config->frequency;
    5c54:	4625      	mov	r5, r4
    5c56:	f855 2b20 	ldr.w	r2, [r5], #32
    5c5a:	6812      	ldr	r2, [r2, #0]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    5c5c:	fbb3 f3f2 	udiv	r3, r3, r2
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    5c60:	33c8      	adds	r3, #200	; 0xc8
		} else {
			return (t * to_hz + off) / from_hz;
    5c62:	0c59      	lsrs	r1, r3, #17
    5c64:	03d8      	lsls	r0, r3, #15
    5c66:	f240 36e7 	movw	r6, #999	; 0x3e7
    5c6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5c6e:	2300      	movs	r3, #0
    5c70:	1980      	adds	r0, r0, r6
    5c72:	f04f 0600 	mov.w	r6, #0
    5c76:	eb46 0101 	adc.w	r1, r6, r1
    5c7a:	f7fb f9d1 	bl	1020 <__aeabi_uldivmod>
    5c7e:	4602      	mov	r2, r0
    5c80:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    5c82:	4628      	mov	r0, r5
    5c84:	f002 f8a6 	bl	7dd4 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
    5c88:	b940      	cbnz	r0, 5c9c <transceive+0x168>
	status = ctx->sync_status;
    5c8a:	6b26      	ldr	r6, [r4, #48]	; 0x30
	return status;
    5c8c:	e772      	b.n	5b74 <transceive+0x40>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    5c8e:	2301      	movs	r3, #1
    5c90:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    5c94:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    5c96:	691b      	ldr	r3, [r3, #16]
    5c98:	4798      	blx	r3
    5c9a:	e7ca      	b.n	5c32 <transceive+0xfe>
    5c9c:	4b0c      	ldr	r3, [pc, #48]	; (5cd0 <transceive+0x19c>)
    5c9e:	4a0d      	ldr	r2, [pc, #52]	; (5cd4 <transceive+0x1a0>)
    5ca0:	1a9b      	subs	r3, r3, r2
    5ca2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Timeout waiting for transfer complete");
    5ca4:	f04f 0100 	mov.w	r1, #0
    5ca8:	2201      	movs	r2, #1
    5caa:	f362 0102 	bfi	r1, r2, #0, #3
    5cae:	f36f 01c5 	bfc	r1, #3, #3
    5cb2:	f363 118f 	bfi	r1, r3, #6, #10
    5cb6:	4808      	ldr	r0, [pc, #32]	; (5cd8 <transceive+0x1a4>)
    5cb8:	f7fd fd56 	bl	3768 <log_0>
		return -ETIMEDOUT;
    5cbc:	f06f 0673 	mvn.w	r6, #115	; 0x73
    5cc0:	e758      	b.n	5b74 <transceive+0x40>
		ctx->owner = NULL;
    5cc2:	2300      	movs	r3, #0
    5cc4:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
    5cc6:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
    5cca:	f002 f85f 	bl	7d8c <z_impl_k_sem_give>
	return error;
    5cce:	e757      	b.n	5b80 <transceive+0x4c>
    5cd0:	0000afb0 	.word	0x0000afb0
    5cd4:	0000af70 	.word	0x0000af70
    5cd8:	0000b94c 	.word	0x0000b94c

00005cdc <event_handler>:
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    5cdc:	7803      	ldrb	r3, [r0, #0]
    5cde:	2b00      	cmp	r3, #0
    5ce0:	d16d      	bne.n	5dbe <event_handler+0xe2>
{
    5ce2:	b510      	push	{r4, lr}
    5ce4:	460c      	mov	r4, r1
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    5ce6:	6d8a      	ldr	r2, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
    5ce8:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    5cea:	b1cb      	cbz	r3, 5d20 <event_handler+0x44>
	if (len > ctx->tx_len) {
    5cec:	429a      	cmp	r2, r3
    5cee:	d807      	bhi.n	5d00 <event_handler+0x24>
	ctx->tx_len -= len;
    5cf0:	1a9b      	subs	r3, r3, r2
    5cf2:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->tx_len) {
    5cf4:	b31b      	cbz	r3, 5d3e <event_handler+0x62>
	} else if (ctx->tx_buf) {
    5cf6:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    5cf8:	b193      	cbz	r3, 5d20 <event_handler+0x44>
		ctx->tx_buf += dfs * len;
    5cfa:	441a      	add	r2, r3
    5cfc:	644a      	str	r2, [r1, #68]	; 0x44
    5cfe:	e00f      	b.n	5d20 <event_handler+0x44>
    5d00:	4b2f      	ldr	r3, [pc, #188]	; (5dc0 <event_handler+0xe4>)
    5d02:	4a30      	ldr	r2, [pc, #192]	; (5dc4 <event_handler+0xe8>)
    5d04:	1a9b      	subs	r3, r3, r2
    5d06:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Update exceeds current buffer");
    5d08:	f04f 0100 	mov.w	r1, #0
    5d0c:	2201      	movs	r2, #1
    5d0e:	f362 0102 	bfi	r1, r2, #0, #3
    5d12:	f36f 01c5 	bfc	r1, #3, #3
    5d16:	f363 118f 	bfi	r1, r3, #6, #10
    5d1a:	482b      	ldr	r0, [pc, #172]	; (5dc8 <event_handler+0xec>)
    5d1c:	f7fd fd24 	bl	3768 <log_0>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    5d20:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
    5d22:	6d23      	ldr	r3, [r4, #80]	; 0x50
    5d24:	2b00      	cmp	r3, #0
    5d26:	d030      	beq.n	5d8a <event_handler+0xae>
	if (len > ctx->rx_len) {
    5d28:	429a      	cmp	r2, r3
    5d2a:	d81e      	bhi.n	5d6a <event_handler+0x8e>
	ctx->rx_len -= len;
    5d2c:	1a9b      	subs	r3, r3, r2
    5d2e:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
    5d30:	2b00      	cmp	r3, #0
    5d32:	d02e      	beq.n	5d92 <event_handler+0xb6>
	} else if (ctx->rx_buf) {
    5d34:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    5d36:	b343      	cbz	r3, 5d8a <event_handler+0xae>
		ctx->rx_buf += dfs * len;
    5d38:	441a      	add	r2, r3
    5d3a:	64e2      	str	r2, [r4, #76]	; 0x4c
    5d3c:	e025      	b.n	5d8a <event_handler+0xae>
		++ctx->current_tx;
    5d3e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    5d40:	3308      	adds	r3, #8
    5d42:	634b      	str	r3, [r1, #52]	; 0x34
		--ctx->tx_count;
    5d44:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    5d46:	3b01      	subs	r3, #1
    5d48:	638b      	str	r3, [r1, #56]	; 0x38
	while (*count) {
    5d4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5d4c:	b153      	cbz	r3, 5d64 <event_handler+0x88>
		if (((*current)->len / dfs) != 0) {
    5d4e:	6b62      	ldr	r2, [r4, #52]	; 0x34
    5d50:	6851      	ldr	r1, [r2, #4]
    5d52:	b921      	cbnz	r1, 5d5e <event_handler+0x82>
		++(*current);
    5d54:	3208      	adds	r2, #8
    5d56:	6362      	str	r2, [r4, #52]	; 0x34
		--(*count);
    5d58:	3b01      	subs	r3, #1
    5d5a:	63a3      	str	r3, [r4, #56]	; 0x38
    5d5c:	e7f5      	b.n	5d4a <event_handler+0x6e>
			*buf_len = (*current)->len / dfs;
    5d5e:	64a1      	str	r1, [r4, #72]	; 0x48
			return (*current)->buf;
    5d60:	6813      	ldr	r3, [r2, #0]
    5d62:	e000      	b.n	5d66 <event_handler+0x8a>
	*buf_len = 0;
    5d64:	64a3      	str	r3, [r4, #72]	; 0x48
		ctx->tx_buf = (const uint8_t *)
    5d66:	6463      	str	r3, [r4, #68]	; 0x44
    5d68:	e7da      	b.n	5d20 <event_handler+0x44>
    5d6a:	4b15      	ldr	r3, [pc, #84]	; (5dc0 <event_handler+0xe4>)
    5d6c:	4a15      	ldr	r2, [pc, #84]	; (5dc4 <event_handler+0xe8>)
    5d6e:	1a9b      	subs	r3, r3, r2
    5d70:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Update exceeds current buffer");
    5d72:	f04f 0100 	mov.w	r1, #0
    5d76:	2201      	movs	r2, #1
    5d78:	f362 0102 	bfi	r1, r2, #0, #3
    5d7c:	f36f 01c5 	bfc	r1, #3, #3
    5d80:	f363 118f 	bfi	r1, r3, #6, #10
    5d84:	4810      	ldr	r0, [pc, #64]	; (5dc8 <event_handler+0xec>)
    5d86:	f7fd fcef 	bl	3768 <log_0>
		transfer_next_chunk(dev_data->dev);
    5d8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    5d8c:	f7ff fe60 	bl	5a50 <transfer_next_chunk>
}
    5d90:	bd10      	pop	{r4, pc}
		++ctx->current_rx;
    5d92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5d94:	3308      	adds	r3, #8
    5d96:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
    5d98:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5d9a:	3b01      	subs	r3, #1
    5d9c:	6423      	str	r3, [r4, #64]	; 0x40
	while (*count) {
    5d9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5da0:	b153      	cbz	r3, 5db8 <event_handler+0xdc>
		if (((*current)->len / dfs) != 0) {
    5da2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    5da4:	6851      	ldr	r1, [r2, #4]
    5da6:	b921      	cbnz	r1, 5db2 <event_handler+0xd6>
		++(*current);
    5da8:	3208      	adds	r2, #8
    5daa:	63e2      	str	r2, [r4, #60]	; 0x3c
		--(*count);
    5dac:	3b01      	subs	r3, #1
    5dae:	6423      	str	r3, [r4, #64]	; 0x40
    5db0:	e7f5      	b.n	5d9e <event_handler+0xc2>
			*buf_len = (*current)->len / dfs;
    5db2:	6521      	str	r1, [r4, #80]	; 0x50
			return (*current)->buf;
    5db4:	6813      	ldr	r3, [r2, #0]
    5db6:	e000      	b.n	5dba <event_handler+0xde>
	*buf_len = 0;
    5db8:	6523      	str	r3, [r4, #80]	; 0x50
		ctx->rx_buf = (uint8_t *)
    5dba:	64e3      	str	r3, [r4, #76]	; 0x4c
    5dbc:	e7e5      	b.n	5d8a <event_handler+0xae>
    5dbe:	4770      	bx	lr
    5dc0:	0000afb0 	.word	0x0000afb0
    5dc4:	0000af70 	.word	0x0000af70
    5dc8:	0000b974 	.word	0x0000b974

00005dcc <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5dcc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    5dd0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    5dd4:	4b01      	ldr	r3, [pc, #4]	; (5ddc <set_comparator+0x10>)
    5dd6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    5dda:	4770      	bx	lr
    5ddc:	40011000 	.word	0x40011000

00005de0 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    5de0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    5de4:	4b01      	ldr	r3, [pc, #4]	; (5dec <get_comparator+0xc>)
    5de6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    5dea:	4770      	bx	lr
    5dec:	40011000 	.word	0x40011000

00005df0 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5df0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5df4:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    5df6:	4a02      	ldr	r2, [pc, #8]	; (5e00 <event_enable+0x10>)
    5df8:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    5dfc:	4770      	bx	lr
    5dfe:	bf00      	nop
    5e00:	40011000 	.word	0x40011000

00005e04 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5e04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5e08:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    5e0a:	4a02      	ldr	r2, [pc, #8]	; (5e14 <event_disable+0x10>)
    5e0c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    5e10:	4770      	bx	lr
    5e12:	bf00      	nop
    5e14:	40011000 	.word	0x40011000

00005e18 <counter>:
     return p_reg->COUNTER;
    5e18:	4b01      	ldr	r3, [pc, #4]	; (5e20 <counter+0x8>)
    5e1a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    5e1e:	4770      	bx	lr
    5e20:	40011000 	.word	0x40011000

00005e24 <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    5e24:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    5e26:	2301      	movs	r3, #1
    5e28:	4083      	lsls	r3, r0
    5e2a:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5e2c:	4a10      	ldr	r2, [pc, #64]	; (5e70 <compare_int_lock+0x4c>)
    5e2e:	f3bf 8f5b 	dmb	ish
    5e32:	e852 1f00 	ldrex	r1, [r2]
    5e36:	ea01 0c04 	and.w	ip, r1, r4
    5e3a:	e842 ce00 	strex	lr, ip, [r2]
    5e3e:	f1be 0f00 	cmp.w	lr, #0
    5e42:	d1f6      	bne.n	5e32 <compare_int_lock+0xe>
    5e44:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5e48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5e4c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    5e50:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5e54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    5e58:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    5e5c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5e60:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    5e64:	420b      	tst	r3, r1
}
    5e66:	bf14      	ite	ne
    5e68:	2001      	movne	r0, #1
    5e6a:	2000      	moveq	r0, #0
    5e6c:	bd10      	pop	{r4, pc}
    5e6e:	bf00      	nop
    5e70:	200004fc 	.word	0x200004fc

00005e74 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    5e74:	b570      	push	{r4, r5, r6, lr}
    5e76:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    5e78:	f004 fa18 	bl	a2ac <full_int_lock>
    5e7c:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    5e7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5e82:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    5e84:	4a17      	ldr	r2, [pc, #92]	; (5ee4 <channel_processing_check_and_clear+0x70>)
    5e86:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    5e8a:	4213      	tst	r3, r2
    5e8c:	d105      	bne.n	5e9a <channel_processing_check_and_clear+0x26>
	bool result = false;
    5e8e:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    5e90:	4628      	mov	r0, r5
    5e92:	f004 fa14 	bl	a2be <full_int_unlock>

	return result;
}
    5e96:	4630      	mov	r0, r6
    5e98:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    5e9a:	2301      	movs	r3, #1
    5e9c:	40a3      	lsls	r3, r4
    5e9e:	43db      	mvns	r3, r3
    5ea0:	4a11      	ldr	r2, [pc, #68]	; (5ee8 <channel_processing_check_and_clear+0x74>)
    5ea2:	f3bf 8f5b 	dmb	ish
    5ea6:	e852 1f00 	ldrex	r1, [r2]
    5eaa:	ea01 0003 	and.w	r0, r1, r3
    5eae:	e842 0600 	strex	r6, r0, [r2]
    5eb2:	2e00      	cmp	r6, #0
    5eb4:	d1f7      	bne.n	5ea6 <channel_processing_check_and_clear+0x32>
    5eb6:	f3bf 8f5b 	dmb	ish
    5eba:	b959      	cbnz	r1, 5ed4 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5ebc:	f104 0350 	add.w	r3, r4, #80	; 0x50
    5ec0:	009b      	lsls	r3, r3, #2
    5ec2:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5ec4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5ec8:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    5ecc:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    5ece:	b113      	cbz	r3, 5ed6 <channel_processing_check_and_clear+0x62>
    5ed0:	2301      	movs	r3, #1
    5ed2:	e000      	b.n	5ed6 <channel_processing_check_and_clear+0x62>
    5ed4:	2301      	movs	r3, #1
		if (result) {
    5ed6:	461e      	mov	r6, r3
    5ed8:	2b00      	cmp	r3, #0
    5eda:	d0d9      	beq.n	5e90 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    5edc:	4620      	mov	r0, r4
    5ede:	f004 f9d6 	bl	a28e <event_clear>
    5ee2:	e7d5      	b.n	5e90 <channel_processing_check_and_clear+0x1c>
    5ee4:	40011000 	.word	0x40011000
    5ee8:	200004f8 	.word	0x200004f8

00005eec <compare_int_unlock>:
	if (key) {
    5eec:	b901      	cbnz	r1, 5ef0 <compare_int_unlock+0x4>
}
    5eee:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    5ef0:	2301      	movs	r3, #1
    5ef2:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5ef4:	4a11      	ldr	r2, [pc, #68]	; (5f3c <compare_int_unlock+0x50>)
    5ef6:	f3bf 8f5b 	dmb	ish
    5efa:	e852 1f00 	ldrex	r1, [r2]
    5efe:	4319      	orrs	r1, r3
    5f00:	e842 1c00 	strex	ip, r1, [r2]
    5f04:	f1bc 0f00 	cmp.w	ip, #0
    5f08:	d1f7      	bne.n	5efa <compare_int_unlock+0xe>
    5f0a:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5f0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5f12:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    5f14:	4a0a      	ldr	r2, [pc, #40]	; (5f40 <compare_int_unlock+0x54>)
    5f16:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5f1a:	f3bf 8f5b 	dmb	ish
    5f1e:	4b09      	ldr	r3, [pc, #36]	; (5f44 <compare_int_unlock+0x58>)
    5f20:	681b      	ldr	r3, [r3, #0]
    5f22:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    5f26:	fa23 f000 	lsr.w	r0, r3, r0
    5f2a:	f010 0f01 	tst.w	r0, #1
    5f2e:	d0de      	beq.n	5eee <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5f30:	4b05      	ldr	r3, [pc, #20]	; (5f48 <compare_int_unlock+0x5c>)
    5f32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5f36:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    5f3a:	e7d8      	b.n	5eee <compare_int_unlock+0x2>
    5f3c:	200004fc 	.word	0x200004fc
    5f40:	40011000 	.word	0x40011000
    5f44:	200004f8 	.word	0x200004f8
    5f48:	e000e100 	.word	0xe000e100

00005f4c <sys_clock_timeout_handler>:
{
    5f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f4e:	4607      	mov	r7, r0
    5f50:	4614      	mov	r4, r2
    5f52:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    5f54:	4610      	mov	r0, r2
    5f56:	4619      	mov	r1, r3
    5f58:	f004 f9a5 	bl	a2a6 <absolute_time_to_cc>
    5f5c:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5f5e:	4b15      	ldr	r3, [pc, #84]	; (5fb4 <sys_clock_timeout_handler+0x68>)
    5f60:	681a      	ldr	r2, [r3, #0]
    5f62:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    5f64:	601c      	str	r4, [r3, #0]
    5f66:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    5f68:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    5f6c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    5f70:	d308      	bcc.n	5f84 <sys_clock_timeout_handler+0x38>
	return false;
    5f72:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    5f74:	f002 fc4e 	bl	8814 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    5f78:	4638      	mov	r0, r7
    5f7a:	f7ff ff31 	bl	5de0 <get_comparator>
    5f7e:	42a8      	cmp	r0, r5
    5f80:	d00c      	beq.n	5f9c <sys_clock_timeout_handler+0x50>
}
    5f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    5f84:	4b0c      	ldr	r3, [pc, #48]	; (5fb8 <sys_clock_timeout_handler+0x6c>)
    5f86:	6819      	ldr	r1, [r3, #0]
    5f88:	0a0b      	lsrs	r3, r1, #8
    5f8a:	060a      	lsls	r2, r1, #24
    5f8c:	1952      	adds	r2, r2, r5
    5f8e:	f143 0300 	adc.w	r3, r3, #0
    5f92:	490a      	ldr	r1, [pc, #40]	; (5fbc <sys_clock_timeout_handler+0x70>)
    5f94:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    5f98:	2401      	movs	r4, #1
    5f9a:	e7eb      	b.n	5f74 <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    5f9c:	b11c      	cbz	r4, 5fa6 <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    5f9e:	4638      	mov	r0, r7
    5fa0:	f7ff ff26 	bl	5df0 <event_enable>
}
    5fa4:	e7ed      	b.n	5f82 <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    5fa6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    5faa:	4638      	mov	r0, r7
    5fac:	f7ff ff0e 	bl	5dcc <set_comparator>
    5fb0:	e7f5      	b.n	5f9e <sys_clock_timeout_handler+0x52>
    5fb2:	bf00      	nop
    5fb4:	20000228 	.word	0x20000228
    5fb8:	20000500 	.word	0x20000500
    5fbc:	20000210 	.word	0x20000210

00005fc0 <z_nrf_rtc_timer_read>:
{
    5fc0:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    5fc2:	4b0d      	ldr	r3, [pc, #52]	; (5ff8 <z_nrf_rtc_timer_read+0x38>)
    5fc4:	681b      	ldr	r3, [r3, #0]
    5fc6:	0a1d      	lsrs	r5, r3, #8
    5fc8:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    5fca:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    5fce:	f7ff ff23 	bl	5e18 <counter>
    5fd2:	4603      	mov	r3, r0
	val += cntr;
    5fd4:	1820      	adds	r0, r4, r0
    5fd6:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    5fda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    5fde:	d20a      	bcs.n	5ff6 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    5fe0:	4b06      	ldr	r3, [pc, #24]	; (5ffc <z_nrf_rtc_timer_read+0x3c>)
    5fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
    5fe6:	4299      	cmp	r1, r3
    5fe8:	bf08      	it	eq
    5fea:	4290      	cmpeq	r0, r2
    5fec:	d203      	bcs.n	5ff6 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    5fee:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    5ff2:	f141 0100 	adc.w	r1, r1, #0
}
    5ff6:	bd38      	pop	{r3, r4, r5, pc}
    5ff8:	20000500 	.word	0x20000500
    5ffc:	20000210 	.word	0x20000210

00006000 <compare_set_nolocks>:
{
    6000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6004:	4606      	mov	r6, r0
    6006:	4614      	mov	r4, r2
    6008:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    600a:	4610      	mov	r0, r2
    600c:	4619      	mov	r1, r3
    600e:	f004 f94a 	bl	a2a6 <absolute_time_to_cc>
    6012:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    6014:	f7ff ffd4 	bl	5fc0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    6018:	42a9      	cmp	r1, r5
    601a:	bf08      	it	eq
    601c:	42a0      	cmpeq	r0, r4
    601e:	d21e      	bcs.n	605e <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    6020:	ebb4 0800 	subs.w	r8, r4, r0
    6024:	eb65 0901 	sbc.w	r9, r5, r1
    6028:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    602c:	2300      	movs	r3, #0
    602e:	454b      	cmp	r3, r9
    6030:	bf08      	it	eq
    6032:	4542      	cmpeq	r2, r8
    6034:	d32e      	bcc.n	6094 <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
    6036:	4b19      	ldr	r3, [pc, #100]	; (609c <compare_set_nolocks+0x9c>)
    6038:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    603c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    6040:	42ab      	cmp	r3, r5
    6042:	bf08      	it	eq
    6044:	42a2      	cmpeq	r2, r4
    6046:	d018      	beq.n	607a <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    6048:	4639      	mov	r1, r7
    604a:	4630      	mov	r0, r6
    604c:	f004 f93c 	bl	a2c8 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    6050:	4639      	mov	r1, r7
    6052:	f004 f918 	bl	a286 <counter_sub>
    6056:	1824      	adds	r4, r4, r0
    6058:	f145 0500 	adc.w	r5, r5, #0
    605c:	e00d      	b.n	607a <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
    605e:	2301      	movs	r3, #1
    6060:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6062:	4a0f      	ldr	r2, [pc, #60]	; (60a0 <compare_set_nolocks+0xa0>)
    6064:	f3bf 8f5b 	dmb	ish
    6068:	e852 1f00 	ldrex	r1, [r2]
    606c:	4319      	orrs	r1, r3
    606e:	e842 1000 	strex	r0, r1, [r2]
    6072:	2800      	cmp	r0, #0
    6074:	d1f8      	bne.n	6068 <compare_set_nolocks+0x68>
    6076:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    607a:	4b08      	ldr	r3, [pc, #32]	; (609c <compare_set_nolocks+0x9c>)
    607c:	0132      	lsls	r2, r6, #4
    607e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    6082:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    6086:	9908      	ldr	r1, [sp, #32]
    6088:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    608a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    608c:	6073      	str	r3, [r6, #4]
	return ret;
    608e:	2000      	movs	r0, #0
}
    6090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    6094:	f06f 0015 	mvn.w	r0, #21
    6098:	e7fa      	b.n	6090 <compare_set_nolocks+0x90>
    609a:	bf00      	nop
    609c:	20000218 	.word	0x20000218
    60a0:	200004f8 	.word	0x200004f8

000060a4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    60a4:	b530      	push	{r4, r5, lr}
    60a6:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    60a8:	2300      	movs	r3, #0
    60aa:	4a1e      	ldr	r2, [pc, #120]	; (6124 <sys_clock_driver_init+0x80>)
    60ac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    60b0:	2b00      	cmp	r3, #0
    60b2:	dd25      	ble.n	6100 <sys_clock_driver_init+0x5c>
    p_reg->INTENSET = mask;
    60b4:	4c1b      	ldr	r4, [pc, #108]	; (6124 <sys_clock_driver_init+0x80>)
    60b6:	2502      	movs	r5, #2
    60b8:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    60bc:	4b1a      	ldr	r3, [pc, #104]	; (6128 <sys_clock_driver_init+0x84>)
    60be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    60c2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    60c6:	2200      	movs	r2, #0
    60c8:	2101      	movs	r1, #1
    60ca:	2011      	movs	r0, #17
    60cc:	f7fe f912 	bl	42f4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    60d0:	2011      	movs	r0, #17
    60d2:	f7fe f8dd 	bl	4290 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    60d6:	2301      	movs	r3, #1
    60d8:	4a14      	ldr	r2, [pc, #80]	; (612c <sys_clock_driver_init+0x88>)
    60da:	6013      	str	r3, [r2, #0]
    60dc:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    60de:	4a14      	ldr	r2, [pc, #80]	; (6130 <sys_clock_driver_init+0x8c>)
    60e0:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    60e2:	2400      	movs	r4, #0
    60e4:	9401      	str	r4, [sp, #4]
    60e6:	4b13      	ldr	r3, [pc, #76]	; (6134 <sys_clock_driver_init+0x90>)
    60e8:	9300      	str	r3, [sp, #0]
    60ea:	4a13      	ldr	r2, [pc, #76]	; (6138 <sys_clock_driver_init+0x94>)
    60ec:	2300      	movs	r3, #0
    60ee:	4620      	mov	r0, r4
    60f0:	f004 f925 	bl	a33e <compare_set>

	z_nrf_clock_control_lf_on(mode);
    60f4:	4628      	mov	r0, r5
    60f6:	f7ff f917 	bl	5328 <z_nrf_clock_control_lf_on>

	return 0;
}
    60fa:	4620      	mov	r0, r4
    60fc:	b003      	add	sp, #12
    60fe:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    6100:	4a0e      	ldr	r2, [pc, #56]	; (613c <sys_clock_driver_init+0x98>)
    6102:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    6106:	f04f 30ff 	mov.w	r0, #4294967295
    610a:	f04f 31ff 	mov.w	r1, #4294967295
    610e:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6112:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6116:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    6118:	4902      	ldr	r1, [pc, #8]	; (6124 <sys_clock_driver_init+0x80>)
    611a:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    611e:	3301      	adds	r3, #1
    6120:	e7c6      	b.n	60b0 <sys_clock_driver_init+0xc>
    6122:	bf00      	nop
    6124:	40011000 	.word	0x40011000
    6128:	e000e100 	.word	0xe000e100
    612c:	40011008 	.word	0x40011008
    6130:	200004fc 	.word	0x200004fc
    6134:	00005f4d 	.word	0x00005f4d
    6138:	007fffff 	.word	0x007fffff
    613c:	20000218 	.word	0x20000218

00006140 <process_channel>:
{
    6140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6144:	b082      	sub	sp, #8
    6146:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    6148:	f7ff fe94 	bl	5e74 <channel_processing_check_and_clear>
    614c:	b910      	cbnz	r0, 6154 <process_channel+0x14>
}
    614e:	b002      	add	sp, #8
    6150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    6154:	f7ff ff34 	bl	5fc0 <z_nrf_rtc_timer_read>
    6158:	4606      	mov	r6, r0
    615a:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    615c:	f004 f8a6 	bl	a2ac <full_int_lock>
    6160:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    6162:	4b13      	ldr	r3, [pc, #76]	; (61b0 <process_channel+0x70>)
    6164:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    6168:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    616c:	454f      	cmp	r7, r9
    616e:	bf08      	it	eq
    6170:	4546      	cmpeq	r6, r8
    6172:	d20b      	bcs.n	618c <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    6174:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    6176:	4650      	mov	r0, sl
    6178:	f004 f8a1 	bl	a2be <full_int_unlock>
		if (handler) {
    617c:	2e00      	cmp	r6, #0
    617e:	d0e6      	beq.n	614e <process_channel+0xe>
			handler(chan, expire_time, user_context);
    6180:	9500      	str	r5, [sp, #0]
    6182:	4642      	mov	r2, r8
    6184:	464b      	mov	r3, r9
    6186:	4620      	mov	r0, r4
    6188:	47b0      	blx	r6
}
    618a:	e7e0      	b.n	614e <process_channel+0xe>
			handler = cc_data[chan].callback;
    618c:	4a08      	ldr	r2, [pc, #32]	; (61b0 <process_channel+0x70>)
    618e:	0123      	lsls	r3, r4, #4
    6190:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    6194:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    6196:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    6198:	2000      	movs	r0, #0
    619a:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    619c:	f04f 32ff 	mov.w	r2, #4294967295
    61a0:	f04f 33ff 	mov.w	r3, #4294967295
    61a4:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    61a8:	4620      	mov	r0, r4
    61aa:	f7ff fe2b 	bl	5e04 <event_disable>
    61ae:	e7e2      	b.n	6176 <process_channel+0x36>
    61b0:	20000218 	.word	0x20000218

000061b4 <rtc_nrf_isr>:
{
    61b4:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    61b6:	4b0d      	ldr	r3, [pc, #52]	; (61ec <rtc_nrf_isr+0x38>)
    61b8:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    61bc:	f013 0f02 	tst.w	r3, #2
    61c0:	d00a      	beq.n	61d8 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    61c2:	4b0b      	ldr	r3, [pc, #44]	; (61f0 <rtc_nrf_isr+0x3c>)
    61c4:	681b      	ldr	r3, [r3, #0]
    61c6:	b13b      	cbz	r3, 61d8 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    61c8:	4b09      	ldr	r3, [pc, #36]	; (61f0 <rtc_nrf_isr+0x3c>)
    61ca:	2200      	movs	r2, #0
    61cc:	601a      	str	r2, [r3, #0]
    61ce:	681b      	ldr	r3, [r3, #0]
		overflow_cnt++;
    61d0:	4a08      	ldr	r2, [pc, #32]	; (61f4 <rtc_nrf_isr+0x40>)
    61d2:	6813      	ldr	r3, [r2, #0]
    61d4:	3301      	adds	r3, #1
    61d6:	6013      	str	r3, [r2, #0]
{
    61d8:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    61da:	2c00      	cmp	r4, #0
    61dc:	dd00      	ble.n	61e0 <rtc_nrf_isr+0x2c>
}
    61de:	bd10      	pop	{r4, pc}
		process_channel(chan);
    61e0:	4620      	mov	r0, r4
    61e2:	f7ff ffad 	bl	6140 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    61e6:	3401      	adds	r4, #1
    61e8:	e7f7      	b.n	61da <rtc_nrf_isr+0x26>
    61ea:	bf00      	nop
    61ec:	40011000 	.word	0x40011000
    61f0:	40011104 	.word	0x40011104
    61f4:	20000500 	.word	0x20000500

000061f8 <sys_clock_set_timeout>:
{
    61f8:	b510      	push	{r4, lr}
    61fa:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    61fc:	f1b0 3fff 	cmp.w	r0, #4294967295
    6200:	d007      	beq.n	6212 <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    6202:	1e44      	subs	r4, r0, #1
    6204:	2c00      	cmp	r4, #0
    6206:	dd07      	ble.n	6218 <sys_clock_set_timeout+0x20>
    6208:	4b11      	ldr	r3, [pc, #68]	; (6250 <sys_clock_set_timeout+0x58>)
    620a:	429c      	cmp	r4, r3
    620c:	dd05      	ble.n	621a <sys_clock_set_timeout+0x22>
    620e:	4c11      	ldr	r4, [pc, #68]	; (6254 <sys_clock_set_timeout+0x5c>)
    6210:	e003      	b.n	621a <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    6212:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    6216:	e7f4      	b.n	6202 <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    6218:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    621a:	f7ff fed1 	bl	5fc0 <z_nrf_rtc_timer_read>
    621e:	4b0e      	ldr	r3, [pc, #56]	; (6258 <sys_clock_set_timeout+0x60>)
    6220:	e9d3 2300 	ldrd	r2, r3, [r3]
    6224:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    6226:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    622a:	d300      	bcc.n	622e <sys_clock_set_timeout+0x36>
		ticks = 0;
    622c:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    622e:	4404      	add	r4, r0
    6230:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
    6232:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    6236:	d300      	bcc.n	623a <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    6238:	4c06      	ldr	r4, [pc, #24]	; (6254 <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    623a:	2000      	movs	r0, #0
    623c:	9001      	str	r0, [sp, #4]
    623e:	4907      	ldr	r1, [pc, #28]	; (625c <sys_clock_set_timeout+0x64>)
    6240:	9100      	str	r1, [sp, #0]
    6242:	1912      	adds	r2, r2, r4
    6244:	f143 0300 	adc.w	r3, r3, #0
    6248:	f004 f879 	bl	a33e <compare_set>
}
    624c:	b002      	add	sp, #8
    624e:	bd10      	pop	{r4, pc}
    6250:	007ffffe 	.word	0x007ffffe
    6254:	007fffff 	.word	0x007fffff
    6258:	20000228 	.word	0x20000228
    625c:	00005f4d 	.word	0x00005f4d

00006260 <sys_clock_elapsed>:
{
    6260:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    6262:	f7ff fead 	bl	5fc0 <z_nrf_rtc_timer_read>
    6266:	4b02      	ldr	r3, [pc, #8]	; (6270 <sys_clock_elapsed+0x10>)
    6268:	681b      	ldr	r3, [r3, #0]
}
    626a:	1ac0      	subs	r0, r0, r3
    626c:	bd08      	pop	{r3, pc}
    626e:	bf00      	nop
    6270:	20000228 	.word	0x20000228

00006274 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    6274:	b508      	push	{r3, lr}
	z_impl_log_panic();
    6276:	f7fd fad7 	bl	3828 <z_impl_log_panic>
    627a:	4b09      	ldr	r3, [pc, #36]	; (62a0 <k_sys_fatal_error_handler+0x2c>)
    627c:	4a09      	ldr	r2, [pc, #36]	; (62a4 <k_sys_fatal_error_handler+0x30>)
    627e:	1a9b      	subs	r3, r3, r2
    6280:	08db      	lsrs	r3, r3, #3
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    6282:	f04f 0100 	mov.w	r1, #0
    6286:	2201      	movs	r2, #1
    6288:	f362 0102 	bfi	r1, r2, #0, #3
    628c:	f36f 01c5 	bfc	r1, #3, #3
    6290:	f363 118f 	bfi	r1, r3, #6, #10
    6294:	4804      	ldr	r0, [pc, #16]	; (62a8 <k_sys_fatal_error_handler+0x34>)
    6296:	f7fd fa67 	bl	3768 <log_0>
		sys_arch_reboot(0);
    629a:	2000      	movs	r0, #0
    629c:	f7fe feac 	bl	4ff8 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    62a0:	0000af80 	.word	0x0000af80
    62a4:	0000af70 	.word	0x0000af70
    62a8:	0000b9d0 	.word	0x0000b9d0

000062ac <nrf52_errata_12>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    62ac:	4b06      	ldr	r3, [pc, #24]	; (62c8 <nrf52_errata_12+0x1c>)
    62ae:	681b      	ldr	r3, [r3, #0]
    62b0:	f1b3 3fff 	cmp.w	r3, #4294967295
    62b4:	d003      	beq.n	62be <nrf52_errata_12+0x12>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    62b6:	2b06      	cmp	r3, #6
    62b8:	d004      	beq.n	62c4 <nrf52_errata_12+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    62ba:	2000      	movs	r0, #0
    62bc:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    62be:	4b03      	ldr	r3, [pc, #12]	; (62cc <nrf52_errata_12+0x20>)
    62c0:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    62c2:	e7f8      	b.n	62b6 <nrf52_errata_12+0xa>
                        return true;
    62c4:	2001      	movs	r0, #1
    #endif
}
    62c6:	4770      	bx	lr
    62c8:	10000130 	.word	0x10000130
    62cc:	f0000fe0 	.word	0xf0000fe0

000062d0 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    62d0:	4b09      	ldr	r3, [pc, #36]	; (62f8 <nrf52_errata_16+0x28>)
    62d2:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    62d4:	3308      	adds	r3, #8
    62d6:	681b      	ldr	r3, [r3, #0]
    62d8:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    62dc:	2a06      	cmp	r2, #6
    62de:	d001      	beq.n	62e4 <nrf52_errata_16+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    62e0:	2000      	movs	r0, #0
    62e2:	4770      	bx	lr
                switch(var2)
    62e4:	3b03      	subs	r3, #3
    62e6:	2b00      	cmp	r3, #0
    62e8:	d804      	bhi.n	62f4 <nrf52_errata_16+0x24>
    62ea:	e8df f003 	tbb	[pc, r3]
    62ee:	01          	.byte	0x01
    62ef:	00          	.byte	0x00
            if (var1 == 0x06)
    62f0:	2001      	movs	r0, #1
    62f2:	4770      	bx	lr
                        return false;
    62f4:	2000      	movs	r0, #0
    #endif
}
    62f6:	4770      	bx	lr
    62f8:	f0000fe0 	.word	0xf0000fe0

000062fc <nrf52_errata_31>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    62fc:	4b06      	ldr	r3, [pc, #24]	; (6318 <nrf52_errata_31+0x1c>)
    62fe:	681b      	ldr	r3, [r3, #0]
    6300:	f1b3 3fff 	cmp.w	r3, #4294967295
    6304:	d003      	beq.n	630e <nrf52_errata_31+0x12>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    6306:	2b06      	cmp	r3, #6
    6308:	d004      	beq.n	6314 <nrf52_errata_31+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    630a:	2000      	movs	r0, #0
    630c:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    630e:	4b03      	ldr	r3, [pc, #12]	; (631c <nrf52_errata_31+0x20>)
    6310:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    6312:	e7f8      	b.n	6306 <nrf52_errata_31+0xa>
                        return true;
    6314:	2001      	movs	r0, #1
    #endif
}
    6316:	4770      	bx	lr
    6318:	10000130 	.word	0x10000130
    631c:	f0000fe0 	.word	0xf0000fe0

00006320 <nrf52_errata_32>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    6320:	4b09      	ldr	r3, [pc, #36]	; (6348 <nrf52_errata_32+0x28>)
    6322:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    6324:	3308      	adds	r3, #8
    6326:	681b      	ldr	r3, [r3, #0]
    6328:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    632c:	2a06      	cmp	r2, #6
    632e:	d001      	beq.n	6334 <nrf52_errata_32+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    6330:	2000      	movs	r0, #0
    6332:	4770      	bx	lr
                switch(var2)
    6334:	3b03      	subs	r3, #3
    6336:	2b00      	cmp	r3, #0
    6338:	d804      	bhi.n	6344 <nrf52_errata_32+0x24>
    633a:	e8df f003 	tbb	[pc, r3]
    633e:	01          	.byte	0x01
    633f:	00          	.byte	0x00
            if (var1 == 0x06)
    6340:	2001      	movs	r0, #1
    6342:	4770      	bx	lr
                        return false;
    6344:	2000      	movs	r0, #0
    #endif
}
    6346:	4770      	bx	lr
    6348:	f0000fe0 	.word	0xf0000fe0

0000634c <nrf52_errata_36>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    634c:	4b06      	ldr	r3, [pc, #24]	; (6368 <nrf52_errata_36+0x1c>)
    634e:	681b      	ldr	r3, [r3, #0]
    6350:	f1b3 3fff 	cmp.w	r3, #4294967295
    6354:	d003      	beq.n	635e <nrf52_errata_36+0x12>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    6356:	2b06      	cmp	r3, #6
    6358:	d004      	beq.n	6364 <nrf52_errata_36+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    635a:	2000      	movs	r0, #0
    635c:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    635e:	4b03      	ldr	r3, [pc, #12]	; (636c <nrf52_errata_36+0x20>)
    6360:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    6362:	e7f8      	b.n	6356 <nrf52_errata_36+0xa>
                        return true;
    6364:	2001      	movs	r0, #1
    #endif
}
    6366:	4770      	bx	lr
    6368:	10000130 	.word	0x10000130
    636c:	f0000fe0 	.word	0xf0000fe0

00006370 <nrf52_errata_37>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    6370:	4b09      	ldr	r3, [pc, #36]	; (6398 <nrf52_errata_37+0x28>)
    6372:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    6374:	3308      	adds	r3, #8
    6376:	681b      	ldr	r3, [r3, #0]
    6378:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    637c:	2a06      	cmp	r2, #6
    637e:	d001      	beq.n	6384 <nrf52_errata_37+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    6380:	2000      	movs	r0, #0
    6382:	4770      	bx	lr
                switch(var2)
    6384:	3b03      	subs	r3, #3
    6386:	2b00      	cmp	r3, #0
    6388:	d804      	bhi.n	6394 <nrf52_errata_37+0x24>
    638a:	e8df f003 	tbb	[pc, r3]
    638e:	01          	.byte	0x01
    638f:	00          	.byte	0x00
            if (var1 == 0x06)
    6390:	2001      	movs	r0, #1
    6392:	4770      	bx	lr
                        return false;
    6394:	2000      	movs	r0, #0
    #endif
}
    6396:	4770      	bx	lr
    6398:	f0000fe0 	.word	0xf0000fe0

0000639c <nrf52_errata_57>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    639c:	4b09      	ldr	r3, [pc, #36]	; (63c4 <nrf52_errata_57+0x28>)
    639e:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    63a0:	3308      	adds	r3, #8
    63a2:	681b      	ldr	r3, [r3, #0]
    63a4:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    63a8:	2a06      	cmp	r2, #6
    63aa:	d001      	beq.n	63b0 <nrf52_errata_57+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    63ac:	2000      	movs	r0, #0
    63ae:	4770      	bx	lr
                switch(var2)
    63b0:	3b03      	subs	r3, #3
    63b2:	2b00      	cmp	r3, #0
    63b4:	d804      	bhi.n	63c0 <nrf52_errata_57+0x24>
    63b6:	e8df f003 	tbb	[pc, r3]
    63ba:	01          	.byte	0x01
    63bb:	00          	.byte	0x00
            if (var1 == 0x06)
    63bc:	2001      	movs	r0, #1
    63be:	4770      	bx	lr
                        return false;
    63c0:	2000      	movs	r0, #0
    #endif
}
    63c2:	4770      	bx	lr
    63c4:	f0000fe0 	.word	0xf0000fe0

000063c8 <nrf52_errata_66>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    63c8:	4b0d      	ldr	r3, [pc, #52]	; (6400 <nrf52_errata_66+0x38>)
    63ca:	681a      	ldr	r2, [r3, #0]
    63cc:	f1b2 3fff 	cmp.w	r2, #4294967295
    63d0:	d005      	beq.n	63de <nrf52_errata_66+0x16>
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    63d2:	4b0c      	ldr	r3, [pc, #48]	; (6404 <nrf52_errata_66+0x3c>)
    63d4:	681b      	ldr	r3, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    63d6:	2a06      	cmp	r2, #6
    63d8:	d008      	beq.n	63ec <nrf52_errata_66+0x24>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    63da:	2000      	movs	r0, #0
    63dc:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    63de:	4b0a      	ldr	r3, [pc, #40]	; (6408 <nrf52_errata_66+0x40>)
    63e0:	781a      	ldrb	r2, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    63e2:	3308      	adds	r3, #8
    63e4:	681b      	ldr	r3, [r3, #0]
    63e6:	f3c3 1303 	ubfx	r3, r3, #4, #4
    63ea:	e7f4      	b.n	63d6 <nrf52_errata_66+0xe>
                switch(var2)
    63ec:	3b03      	subs	r3, #3
    63ee:	2b01      	cmp	r3, #1
    63f0:	d804      	bhi.n	63fc <nrf52_errata_66+0x34>
    63f2:	e8df f003 	tbb	[pc, r3]
    63f6:	0101      	.short	0x0101
            if (var1 == 0x06)
    63f8:	2000      	movs	r0, #0
    63fa:	4770      	bx	lr
                        return true;
    63fc:	2001      	movs	r0, #1
    #endif
}
    63fe:	4770      	bx	lr
    6400:	10000130 	.word	0x10000130
    6404:	10000134 	.word	0x10000134
    6408:	f0000fe0 	.word	0xf0000fe0

0000640c <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    640c:	4b06      	ldr	r3, [pc, #24]	; (6428 <nrf52_errata_108+0x1c>)
    640e:	681b      	ldr	r3, [r3, #0]
    6410:	f1b3 3fff 	cmp.w	r3, #4294967295
    6414:	d003      	beq.n	641e <nrf52_errata_108+0x12>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    6416:	2b06      	cmp	r3, #6
    6418:	d004      	beq.n	6424 <nrf52_errata_108+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    641a:	2000      	movs	r0, #0
    641c:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    641e:	4b03      	ldr	r3, [pc, #12]	; (642c <nrf52_errata_108+0x20>)
    6420:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    6422:	e7f8      	b.n	6416 <nrf52_errata_108+0xa>
                        return true;
    6424:	2001      	movs	r0, #1
    #endif
}
    6426:	4770      	bx	lr
    6428:	10000130 	.word	0x10000130
    642c:	f0000fe0 	.word	0xf0000fe0

00006430 <nrf52_errata_136>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    6430:	4b06      	ldr	r3, [pc, #24]	; (644c <nrf52_errata_136+0x1c>)
    6432:	681b      	ldr	r3, [r3, #0]
    6434:	f1b3 3fff 	cmp.w	r3, #4294967295
    6438:	d003      	beq.n	6442 <nrf52_errata_136+0x12>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    643a:	2b06      	cmp	r3, #6
    643c:	d004      	beq.n	6448 <nrf52_errata_136+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    643e:	2000      	movs	r0, #0
    6440:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    6442:	4b03      	ldr	r3, [pc, #12]	; (6450 <nrf52_errata_136+0x20>)
    6444:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    6446:	e7f8      	b.n	643a <nrf52_errata_136+0xa>
                        return true;
    6448:	2001      	movs	r0, #1
    #endif
}
    644a:	4770      	bx	lr
    644c:	10000130 	.word	0x10000130
    6450:	f0000fe0 	.word	0xf0000fe0

00006454 <nrf52_errata_182>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6454:	4b08      	ldr	r3, [pc, #32]	; (6478 <nrf52_errata_182+0x24>)
    6456:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6458:	4a08      	ldr	r2, [pc, #32]	; (647c <nrf52_errata_182+0x28>)
    645a:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    645c:	2b06      	cmp	r3, #6
    645e:	d001      	beq.n	6464 <nrf52_errata_182+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    6460:	2000      	movs	r0, #0
    6462:	4770      	bx	lr
                switch(var2)
    6464:	2a05      	cmp	r2, #5
    6466:	d803      	bhi.n	6470 <nrf52_errata_182+0x1c>
    6468:	2a03      	cmp	r2, #3
    646a:	d303      	bcc.n	6474 <nrf52_errata_182+0x20>
    646c:	2000      	movs	r0, #0
    646e:	4770      	bx	lr
                        return true;
    6470:	2001      	movs	r0, #1
    6472:	4770      	bx	lr
                        return true;
    6474:	2001      	movs	r0, #1
    #endif
}
    6476:	4770      	bx	lr
    6478:	10000130 	.word	0x10000130
    647c:	10000134 	.word	0x10000134

00006480 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6480:	4b08      	ldr	r3, [pc, #32]	; (64a4 <nrf52_configuration_249+0x24>)
    6482:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6484:	4a08      	ldr	r2, [pc, #32]	; (64a8 <nrf52_configuration_249+0x28>)
    6486:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    6488:	2b06      	cmp	r3, #6
    648a:	d001      	beq.n	6490 <nrf52_configuration_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    648c:	2000      	movs	r0, #0
    648e:	4770      	bx	lr
                switch(var2)
    6490:	2a06      	cmp	r2, #6
    6492:	d803      	bhi.n	649c <nrf52_configuration_249+0x1c>
    6494:	2a03      	cmp	r2, #3
    6496:	d303      	bcc.n	64a0 <nrf52_configuration_249+0x20>
    6498:	2000      	movs	r0, #0
    649a:	4770      	bx	lr
                        return true;
    649c:	2001      	movs	r0, #1
    649e:	4770      	bx	lr
                        return true;
    64a0:	2001      	movs	r0, #1
    #endif
}
    64a2:	4770      	bx	lr
    64a4:	10000130 	.word	0x10000130
    64a8:	10000134 	.word	0x10000134

000064ac <SystemCoreClockUpdate>:
    nvmc_wait();
}

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    64ac:	4b01      	ldr	r3, [pc, #4]	; (64b4 <SystemCoreClockUpdate+0x8>)
    64ae:	4a02      	ldr	r2, [pc, #8]	; (64b8 <SystemCoreClockUpdate+0xc>)
    64b0:	601a      	str	r2, [r3, #0]
}
    64b2:	4770      	bx	lr
    64b4:	2000008c 	.word	0x2000008c
    64b8:	03d09000 	.word	0x03d09000

000064bc <SystemInit>:

void SystemInit(void)
{
    64bc:	b508      	push	{r3, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    64be:	f7ff fef5 	bl	62ac <nrf52_errata_12>
    64c2:	b128      	cbz	r0, 64d0 <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    64c4:	4b5b      	ldr	r3, [pc, #364]	; (6634 <SystemInit+0x178>)
    64c6:	681b      	ldr	r3, [r3, #0]
    64c8:	f3c3 2304 	ubfx	r3, r3, #8, #5
    64cc:	4a5a      	ldr	r2, [pc, #360]	; (6638 <SystemInit+0x17c>)
    64ce:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    64d0:	f7ff fefe 	bl	62d0 <nrf52_errata_16>
    64d4:	b110      	cbz	r0, 64dc <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    64d6:	4b59      	ldr	r3, [pc, #356]	; (663c <SystemInit+0x180>)
    64d8:	4a59      	ldr	r2, [pc, #356]	; (6640 <SystemInit+0x184>)
    64da:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    64dc:	f7ff ff0e 	bl	62fc <nrf52_errata_31>
    64e0:	b128      	cbz	r0, 64ee <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    64e2:	4b58      	ldr	r3, [pc, #352]	; (6644 <SystemInit+0x188>)
    64e4:	681b      	ldr	r3, [r3, #0]
    64e6:	f3c3 3342 	ubfx	r3, r3, #13, #3
    64ea:	4a57      	ldr	r2, [pc, #348]	; (6648 <SystemInit+0x18c>)
    64ec:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    64ee:	f7ff ff17 	bl	6320 <nrf52_errata_32>
    64f2:	b120      	cbz	r0, 64fe <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    64f4:	4a55      	ldr	r2, [pc, #340]	; (664c <SystemInit+0x190>)
    64f6:	68d3      	ldr	r3, [r2, #12]
    64f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    64fc:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    64fe:	f7ff ff25 	bl	634c <nrf52_errata_36>
    6502:	b140      	cbz	r0, 6516 <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
    6504:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6508:	2200      	movs	r2, #0
    650a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    650e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    6512:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    6516:	f7ff ff2b 	bl	6370 <nrf52_errata_37>
    651a:	b110      	cbz	r0, 6522 <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    651c:	4b4c      	ldr	r3, [pc, #304]	; (6650 <SystemInit+0x194>)
    651e:	2203      	movs	r2, #3
    6520:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    6522:	f7ff ff3b 	bl	639c <nrf52_errata_57>
    6526:	b158      	cbz	r0, 6540 <SystemInit+0x84>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    6528:	4b4a      	ldr	r3, [pc, #296]	; (6654 <SystemInit+0x198>)
    652a:	2205      	movs	r2, #5
    652c:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    652e:	3378      	adds	r3, #120	; 0x78
    6530:	2201      	movs	r2, #1
    6532:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    6534:	3b70      	subs	r3, #112	; 0x70
    6536:	2200      	movs	r2, #0
    6538:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    653a:	3b04      	subs	r3, #4
    653c:	223f      	movs	r2, #63	; 0x3f
    653e:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    6540:	f7ff ff42 	bl	63c8 <nrf52_errata_66>
    6544:	2800      	cmp	r0, #0
    6546:	d046      	beq.n	65d6 <SystemInit+0x11a>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    6548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    654c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    6550:	4b41      	ldr	r3, [pc, #260]	; (6658 <SystemInit+0x19c>)
    6552:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    6556:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    655a:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    655e:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    6562:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    6566:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    656a:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    656e:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    6572:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    6576:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    657a:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    657e:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    6582:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    6586:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    658a:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    658e:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    6592:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    6596:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    659a:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    659e:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    65a2:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    65a6:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    65aa:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    65ae:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    65b2:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    65b6:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    65ba:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    65be:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    65c2:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    65c6:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    65ca:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    65ce:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    65d2:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    65d6:	f7ff ff19 	bl	640c <nrf52_errata_108>
    65da:	b128      	cbz	r0, 65e8 <SystemInit+0x12c>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    65dc:	4b1f      	ldr	r3, [pc, #124]	; (665c <SystemInit+0x1a0>)
    65de:	681b      	ldr	r3, [r3, #0]
    65e0:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    65e4:	4a1e      	ldr	r2, [pc, #120]	; (6660 <SystemInit+0x1a4>)
    65e6:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    65e8:	f7ff ff22 	bl	6430 <nrf52_errata_136>
    65ec:	b160      	cbz	r0, 6608 <SystemInit+0x14c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    65ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    65f2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    65f6:	f013 0f01 	tst.w	r3, #1
    65fa:	d005      	beq.n	6608 <SystemInit+0x14c>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    65fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6600:	f06f 0201 	mvn.w	r2, #1
    6604:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    6608:	f7ff ff24 	bl	6454 <nrf52_errata_182>
    660c:	b120      	cbz	r0, 6618 <SystemInit+0x15c>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    660e:	4a15      	ldr	r2, [pc, #84]	; (6664 <SystemInit+0x1a8>)
    6610:	6813      	ldr	r3, [r2, #0]
    6612:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6616:	6013      	str	r3, [r2, #0]
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    6618:	f7ff ff32 	bl	6480 <nrf52_configuration_249>
    661c:	b138      	cbz	r0, 662e <SystemInit+0x172>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    661e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    6622:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    6626:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    662a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    662e:	f7ff ff3d 	bl	64ac <SystemCoreClockUpdate>
}
    6632:	bd08      	pop	{r3, pc}
    6634:	10000324 	.word	0x10000324
    6638:	40013540 	.word	0x40013540
    663c:	4007c074 	.word	0x4007c074
    6640:	baadf00d 	.word	0xbaadf00d
    6644:	10000244 	.word	0x10000244
    6648:	4000053c 	.word	0x4000053c
    664c:	e000edf0 	.word	0xe000edf0
    6650:	400005a0 	.word	0x400005a0
    6654:	40005610 	.word	0x40005610
    6658:	4000c000 	.word	0x4000c000
    665c:	10000258 	.word	0x10000258
    6660:	40000ee4 	.word	0x40000ee4
    6664:	4000173c 	.word	0x4000173c

00006668 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    6668:	b430      	push	{r4, r5}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    666a:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    666c:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
    6670:	f1d3 031f 	rsbs	r3, r3, #31
    6674:	d415      	bmi.n	66a2 <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    6676:	2201      	movs	r2, #1
    6678:	409a      	lsls	r2, r3
    667a:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    667e:	f3bf 8f5b 	dmb	ish
    6682:	e850 5f00 	ldrex	r5, [r0]
    6686:	42a5      	cmp	r5, r4
    6688:	d104      	bne.n	6694 <nrfx_flag32_alloc+0x2c>
    668a:	e840 2c00 	strex	ip, r2, [r0]
    668e:	f1bc 0f00 	cmp.w	ip, #0
    6692:	d1f6      	bne.n	6682 <nrfx_flag32_alloc+0x1a>
    6694:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    6698:	d1e7      	bne.n	666a <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    669a:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
    669c:	4802      	ldr	r0, [pc, #8]	; (66a8 <nrfx_flag32_alloc+0x40>)
}
    669e:	bc30      	pop	{r4, r5}
    66a0:	4770      	bx	lr
            return NRFX_ERROR_NO_MEM;
    66a2:	4802      	ldr	r0, [pc, #8]	; (66ac <nrfx_flag32_alloc+0x44>)
    66a4:	e7fb      	b.n	669e <nrfx_flag32_alloc+0x36>
    66a6:	bf00      	nop
    66a8:	0bad0000 	.word	0x0bad0000
    66ac:	0bad0002 	.word	0x0bad0002

000066b0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    66b0:	b410      	push	{r4}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    66b2:	6803      	ldr	r3, [r0, #0]
    66b4:	460c      	mov	r4, r1
    66b6:	fa23 f101 	lsr.w	r1, r3, r1
    66ba:	f011 0f01 	tst.w	r1, #1
    66be:	d114      	bne.n	66ea <nrfx_flag32_free+0x3a>
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    66c0:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    66c2:	2301      	movs	r3, #1
    66c4:	40a3      	lsls	r3, r4
    66c6:	4313      	orrs	r3, r2
    66c8:	f3bf 8f5b 	dmb	ish
    66cc:	e850 1f00 	ldrex	r1, [r0]
    66d0:	4291      	cmp	r1, r2
    66d2:	d104      	bne.n	66de <nrfx_flag32_free+0x2e>
    66d4:	e840 3c00 	strex	ip, r3, [r0]
    66d8:	f1bc 0f00 	cmp.w	ip, #0
    66dc:	d1f6      	bne.n	66cc <nrfx_flag32_free+0x1c>
    66de:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    66e2:	d1ed      	bne.n	66c0 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    66e4:	4802      	ldr	r0, [pc, #8]	; (66f0 <nrfx_flag32_free+0x40>)
}
    66e6:	bc10      	pop	{r4}
    66e8:	4770      	bx	lr
        return NRFX_ERROR_INVALID_PARAM;
    66ea:	4802      	ldr	r0, [pc, #8]	; (66f4 <nrfx_flag32_free+0x44>)
    66ec:	e7fb      	b.n	66e6 <nrfx_flag32_free+0x36>
    66ee:	bf00      	nop
    66f0:	0bad0000 	.word	0x0bad0000
    66f4:	0bad0004 	.word	0x0bad0004

000066f8 <nrfx_clock_anomaly_132>:
    uint32_t core_debug;
    uint32_t dwt_ctrl;

    // Preserve DEMCR register to do not influence into its configuration. Enable the trace and
    // debug blocks. It is required to read and write data to DWT block.
    core_debug = CoreDebug->DEMCR;
    66f8:	4b0b      	ldr	r3, [pc, #44]	; (6728 <nrfx_clock_anomaly_132+0x30>)
    66fa:	68d9      	ldr	r1, [r3, #12]
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    66fc:	f041 7280 	orr.w	r2, r1, #16777216	; 0x1000000
    6700:	60da      	str	r2, [r3, #12]

    // Preserve CTRL register in DWT block to do not influence into its configuration. Make sure
    // that cycle counter is enabled.
    dwt_ctrl = DWT->CTRL;
    6702:	4b0a      	ldr	r3, [pc, #40]	; (672c <nrfx_clock_anomaly_132+0x34>)
    6704:	6818      	ldr	r0, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    6706:	f040 0201 	orr.w	r2, r0, #1
    670a:	601a      	str	r2, [r3, #0]

    // Store start value of cycle counter.
    cyccnt_inital = DWT->CYCCNT;
    670c:	685a      	ldr	r2, [r3, #4]

    // Delay required time.
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    670e:	4b07      	ldr	r3, [pc, #28]	; (672c <nrfx_clock_anomaly_132+0x34>)
    6710:	685b      	ldr	r3, [r3, #4]
    6712:	1a9b      	subs	r3, r3, r2
    6714:	f5b3 5f0a 	cmp.w	r3, #8832	; 0x2280
    6718:	d3f9      	bcc.n	670e <nrfx_clock_anomaly_132+0x16>
    {}

    // Restore preserved registers.
    DWT->CTRL = dwt_ctrl;
    671a:	4b04      	ldr	r3, [pc, #16]	; (672c <nrfx_clock_anomaly_132+0x34>)
    671c:	6018      	str	r0, [r3, #0]
    CoreDebug->DEMCR = core_debug;
    671e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
    6722:	33f0      	adds	r3, #240	; 0xf0
    6724:	60d9      	str	r1, [r3, #12]
}
    6726:	4770      	bx	lr
    6728:	e000edf0 	.word	0xe000edf0
    672c:	e0001000 	.word	0xe0001000

00006730 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    6730:	4b06      	ldr	r3, [pc, #24]	; (674c <nrfx_clock_init+0x1c>)
    6732:	791b      	ldrb	r3, [r3, #4]
    6734:	b93b      	cbnz	r3, 6746 <nrfx_clock_init+0x16>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    6736:	4b05      	ldr	r3, [pc, #20]	; (674c <nrfx_clock_init+0x1c>)
    6738:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    673a:	2201      	movs	r2, #1
    673c:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    673e:	2200      	movs	r2, #0
    6740:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    6742:	4803      	ldr	r0, [pc, #12]	; (6750 <nrfx_clock_init+0x20>)
    6744:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    6746:	4803      	ldr	r0, [pc, #12]	; (6754 <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    6748:	4770      	bx	lr
    674a:	bf00      	nop
    674c:	20000504 	.word	0x20000504
    6750:	0bad0000 	.word	0x0bad0000
    6754:	0bad000c 	.word	0x0bad000c

00006758 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    6758:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    675a:	b110      	cbz	r0, 6762 <nrfx_clock_start+0xa>
    675c:	2801      	cmp	r0, #1
    675e:	d027      	beq.n	67b0 <nrfx_clock_start+0x58>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    6760:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6766:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    676a:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    676e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    6772:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    6776:	d113      	bne.n	67a0 <nrfx_clock_start+0x48>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6778:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    677c:	2200      	movs	r2, #0
    677e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6782:	4b11      	ldr	r3, [pc, #68]	; (67c8 <nrfx_clock_start+0x70>)
    6784:	2200      	movs	r2, #0
    6786:	601a      	str	r2, [r3, #0]
    6788:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    678a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    678e:	2202      	movs	r2, #2
    6790:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            nrfx_clock_anomaly_132();
    6794:	f7ff ffb0 	bl	66f8 <nrfx_clock_anomaly_132>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6798:	4b0c      	ldr	r3, [pc, #48]	; (67cc <nrfx_clock_start+0x74>)
    679a:	2201      	movs	r2, #1
    679c:	601a      	str	r2, [r3, #0]
}
    679e:	e7df      	b.n	6760 <nrfx_clock_start+0x8>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    67a0:	2b01      	cmp	r3, #1
    67a2:	d1e9      	bne.n	6778 <nrfx_clock_start+0x20>
    p_reg->LFCLKSRC = (uint32_t)(source);
    67a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    67a8:	2201      	movs	r2, #1
    67aa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    67ae:	e7e8      	b.n	6782 <nrfx_clock_start+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    67b0:	4b07      	ldr	r3, [pc, #28]	; (67d0 <nrfx_clock_start+0x78>)
    67b2:	2200      	movs	r2, #0
    67b4:	601a      	str	r2, [r3, #0]
    67b6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    67b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    67bc:	2201      	movs	r2, #1
    67be:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    67c2:	601a      	str	r2, [r3, #0]
}
    67c4:	e7cc      	b.n	6760 <nrfx_clock_start+0x8>
    67c6:	bf00      	nop
    67c8:	40000104 	.word	0x40000104
    67cc:	40000008 	.word	0x40000008
    67d0:	40000100 	.word	0x40000100

000067d4 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    67d4:	b530      	push	{r4, r5, lr}
    67d6:	b083      	sub	sp, #12
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    67d8:	4604      	mov	r4, r0
    67da:	b118      	cbz	r0, 67e4 <nrfx_clock_stop+0x10>
    67dc:	2801      	cmp	r0, #1
    67de:	d013      	beq.n	6808 <nrfx_clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    67e0:	b003      	add	sp, #12
    67e2:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    67e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    67e8:	2202      	movs	r2, #2
    67ea:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    67ee:	f503 7382 	add.w	r3, r3, #260	; 0x104
    67f2:	2200      	movs	r2, #0
    67f4:	601a      	str	r2, [r3, #0]
    67f6:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    67f8:	4b39      	ldr	r3, [pc, #228]	; (68e0 <nrfx_clock_stop+0x10c>)
    67fa:	2201      	movs	r2, #1
    67fc:	601a      	str	r2, [r3, #0]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    67fe:	2c01      	cmp	r4, #1
    6800:	d00f      	beq.n	6822 <nrfx_clock_stop+0x4e>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    6802:	f242 7510 	movw	r5, #10000	; 0x2710
    6806:	e052      	b.n	68ae <nrfx_clock_stop+0xda>
    p_reg->INTENCLR = mask;
    6808:	2301      	movs	r3, #1
    680a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    680e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6812:	f502 7280 	add.w	r2, r2, #256	; 0x100
    6816:	2100      	movs	r1, #0
    6818:	6011      	str	r1, [r2, #0]
    681a:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    681c:	4a31      	ldr	r2, [pc, #196]	; (68e4 <nrfx_clock_stop+0x110>)
    681e:	6013      	str	r3, [r2, #0]
}
    6820:	e7ed      	b.n	67fe <nrfx_clock_stop+0x2a>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    6822:	2301      	movs	r3, #1
    6824:	f88d 3007 	strb.w	r3, [sp, #7]
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    6828:	f242 7510 	movw	r5, #10000	; 0x2710
    682c:	e018      	b.n	6860 <nrfx_clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    682e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6832:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    6836:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    683a:	f8cd 3007 	str.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    683e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    6842:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6846:	d120      	bne.n	688a <nrfx_clock_stop+0xb6>
    return false;
    6848:	2300      	movs	r3, #0
    684a:	2b00      	cmp	r3, #0
    684c:	d042      	beq.n	68d4 <nrfx_clock_stop+0x100>
    684e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6852:	2b01      	cmp	r3, #1
    6854:	d13e      	bne.n	68d4 <nrfx_clock_stop+0x100>
    6856:	2001      	movs	r0, #1
    6858:	f003 fd91 	bl	a37e <nrfx_busy_wait>
    685c:	3d01      	subs	r5, #1
    685e:	d039      	beq.n	68d4 <nrfx_clock_stop+0x100>
    switch (domain)
    6860:	2c00      	cmp	r4, #0
    6862:	d0e4      	beq.n	682e <nrfx_clock_stop+0x5a>
    6864:	2c01      	cmp	r4, #1
    6866:	d001      	beq.n	686c <nrfx_clock_stop+0x98>
    6868:	2300      	movs	r3, #0
    686a:	e7ee      	b.n	684a <nrfx_clock_stop+0x76>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    686c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6870:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    6874:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    6878:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    687c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    6880:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6884:	d103      	bne.n	688e <nrfx_clock_stop+0xba>
    return false;
    6886:	2300      	movs	r3, #0
    6888:	e7df      	b.n	684a <nrfx_clock_stop+0x76>
                return true;
    688a:	2301      	movs	r3, #1
    688c:	e7dd      	b.n	684a <nrfx_clock_stop+0x76>
                return true;
    688e:	2301      	movs	r3, #1
    6890:	e7db      	b.n	684a <nrfx_clock_stop+0x76>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6892:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6896:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    689a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    689e:	d115      	bne.n	68cc <nrfx_clock_stop+0xf8>
    return false;
    68a0:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    68a2:	b1bb      	cbz	r3, 68d4 <nrfx_clock_stop+0x100>
    68a4:	2001      	movs	r0, #1
    68a6:	f003 fd6a 	bl	a37e <nrfx_busy_wait>
    68aa:	3d01      	subs	r5, #1
    68ac:	d012      	beq.n	68d4 <nrfx_clock_stop+0x100>
    switch (domain)
    68ae:	2c00      	cmp	r4, #0
    68b0:	d0ef      	beq.n	6892 <nrfx_clock_stop+0xbe>
    68b2:	2c01      	cmp	r4, #1
    68b4:	d001      	beq.n	68ba <nrfx_clock_stop+0xe6>
    68b6:	2300      	movs	r3, #0
    68b8:	e7f3      	b.n	68a2 <nrfx_clock_stop+0xce>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    68ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    68be:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    68c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    68c6:	d103      	bne.n	68d0 <nrfx_clock_stop+0xfc>
    return false;
    68c8:	2300      	movs	r3, #0
    68ca:	e7ea      	b.n	68a2 <nrfx_clock_stop+0xce>
                return true;
    68cc:	2301      	movs	r3, #1
    68ce:	e7e8      	b.n	68a2 <nrfx_clock_stop+0xce>
                return true;
    68d0:	2301      	movs	r3, #1
    68d2:	e7e6      	b.n	68a2 <nrfx_clock_stop+0xce>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    68d4:	2c01      	cmp	r4, #1
    68d6:	d183      	bne.n	67e0 <nrfx_clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    68d8:	4b03      	ldr	r3, [pc, #12]	; (68e8 <nrfx_clock_stop+0x114>)
    68da:	2200      	movs	r2, #0
    68dc:	715a      	strb	r2, [r3, #5]
    68de:	e77f      	b.n	67e0 <nrfx_clock_stop+0xc>
    68e0:	4000000c 	.word	0x4000000c
    68e4:	40000004 	.word	0x40000004
    68e8:	20000504 	.word	0x20000504

000068ec <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    68ec:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    68ee:	4b1b      	ldr	r3, [pc, #108]	; (695c <nrfx_power_clock_irq_handler+0x70>)
    68f0:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    68f2:	b183      	cbz	r3, 6916 <nrfx_power_clock_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    68f4:	4b19      	ldr	r3, [pc, #100]	; (695c <nrfx_power_clock_irq_handler+0x70>)
    68f6:	2200      	movs	r2, #0
    68f8:	601a      	str	r2, [r3, #0]
    68fa:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    68fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6900:	2201      	movs	r2, #1
    6902:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    6906:	4b16      	ldr	r3, [pc, #88]	; (6960 <nrfx_power_clock_irq_handler+0x74>)
    6908:	795b      	ldrb	r3, [r3, #5]
    690a:	b923      	cbnz	r3, 6916 <nrfx_power_clock_irq_handler+0x2a>
        {
            m_clock_cb.hfclk_started = true;
    690c:	4b14      	ldr	r3, [pc, #80]	; (6960 <nrfx_power_clock_irq_handler+0x74>)
    690e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    6910:	681b      	ldr	r3, [r3, #0]
    6912:	2000      	movs	r0, #0
    6914:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6916:	4b13      	ldr	r3, [pc, #76]	; (6964 <nrfx_power_clock_irq_handler+0x78>)
    6918:	681b      	ldr	r3, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    691a:	b19b      	cbz	r3, 6944 <nrfx_power_clock_irq_handler+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    691c:	4b11      	ldr	r3, [pc, #68]	; (6964 <nrfx_power_clock_irq_handler+0x78>)
    691e:	2200      	movs	r2, #0
    6920:	601a      	str	r2, [r3, #0]
    6922:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6924:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6928:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    692c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    6930:	f012 0f03 	tst.w	r2, #3
    6934:	d107      	bne.n	6946 <nrfx_power_clock_irq_handler+0x5a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6936:	2301      	movs	r3, #1
    6938:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    693c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6940:	3208      	adds	r2, #8
    6942:	6013      	str	r3, [r2, #0]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    6944:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    6946:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    694a:	2202      	movs	r2, #2
    694c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    6950:	4b03      	ldr	r3, [pc, #12]	; (6960 <nrfx_power_clock_irq_handler+0x74>)
    6952:	681b      	ldr	r3, [r3, #0]
    6954:	2001      	movs	r0, #1
    6956:	4798      	blx	r3
}
    6958:	e7f4      	b.n	6944 <nrfx_power_clock_irq_handler+0x58>
    695a:	bf00      	nop
    695c:	40000100 	.word	0x40000100
    6960:	20000504 	.word	0x20000504
    6964:	40000104 	.word	0x40000104

00006968 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    6968:	3008      	adds	r0, #8
    696a:	4b03      	ldr	r3, [pc, #12]	; (6978 <pin_in_use+0x10>)
    696c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6970:	f000 0001 	and.w	r0, r0, #1
    6974:	4770      	bx	lr
    6976:	bf00      	nop
    6978:	20000090 	.word	0x20000090

0000697c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    697c:	3008      	adds	r0, #8
    697e:	4b03      	ldr	r3, [pc, #12]	; (698c <pin_in_use_by_te+0x10>)
    6980:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6984:	f3c0 1040 	ubfx	r0, r0, #5, #1
    6988:	4770      	bx	lr
    698a:	bf00      	nop
    698c:	20000090 	.word	0x20000090

00006990 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    6990:	3008      	adds	r0, #8
    6992:	4b04      	ldr	r3, [pc, #16]	; (69a4 <pin_has_trigger+0x14>)
    6994:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6998:	f010 001c 	ands.w	r0, r0, #28
    699c:	bf18      	it	ne
    699e:	2001      	movne	r0, #1
    69a0:	4770      	bx	lr
    69a2:	bf00      	nop
    69a4:	20000090 	.word	0x20000090

000069a8 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    69a8:	3008      	adds	r0, #8
    69aa:	4b03      	ldr	r3, [pc, #12]	; (69b8 <pin_is_output+0x10>)
    69ac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    69b0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    69b4:	4770      	bx	lr
    69b6:	bf00      	nop
    69b8:	20000090 	.word	0x20000090

000069bc <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    69bc:	3008      	adds	r0, #8
    69be:	4b02      	ldr	r3, [pc, #8]	; (69c8 <pin_te_get+0xc>)
    69c0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    69c4:	0b40      	lsrs	r0, r0, #13
    69c6:	4770      	bx	lr
    69c8:	20000090 	.word	0x20000090

000069cc <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    69cc:	2200      	movs	r2, #0
    69ce:	e004      	b.n	69da <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    69d0:	f04f 33ff 	mov.w	r3, #4294967295
    69d4:	4283      	cmp	r3, r0
    69d6:	d00f      	beq.n	69f8 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    69d8:	3201      	adds	r2, #1
    69da:	2a1f      	cmp	r2, #31
    69dc:	d80a      	bhi.n	69f4 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    69de:	f102 0308 	add.w	r3, r2, #8
    69e2:	4906      	ldr	r1, [pc, #24]	; (69fc <handler_in_use+0x30>)
    69e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    69e8:	f413 7f80 	tst.w	r3, #256	; 0x100
    69ec:	d0f0      	beq.n	69d0 <handler_in_use+0x4>
    69ee:	f3c3 2343 	ubfx	r3, r3, #9, #4
    69f2:	e7ef      	b.n	69d4 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    69f4:	2000      	movs	r0, #0
    69f6:	4770      	bx	lr
            return true;
    69f8:	2001      	movs	r0, #1
}
    69fa:	4770      	bx	lr
    69fc:	20000090 	.word	0x20000090

00006a00 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    6a00:	2300      	movs	r3, #0
    6a02:	b113      	cbz	r3, 6a0a <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    6a04:	f04f 30ff 	mov.w	r0, #4294967295
}
    6a08:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6a0a:	4a07      	ldr	r2, [pc, #28]	; (6a28 <find_handler+0x28>)
    6a0c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    6a10:	4282      	cmp	r2, r0
    6a12:	d001      	beq.n	6a18 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    6a14:	3301      	adds	r3, #1
    6a16:	e7f4      	b.n	6a02 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6a18:	4a03      	ldr	r2, [pc, #12]	; (6a28 <find_handler+0x28>)
    6a1a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    6a1e:	6852      	ldr	r2, [r2, #4]
    6a20:	428a      	cmp	r2, r1
    6a22:	d1f7      	bne.n	6a14 <find_handler+0x14>
            return i;
    6a24:	4618      	mov	r0, r3
    6a26:	4770      	bx	lr
    6a28:	20000090 	.word	0x20000090

00006a2c <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6a2c:	3008      	adds	r0, #8
    6a2e:	4b06      	ldr	r3, [pc, #24]	; (6a48 <channel_handler_get+0x1c>)
    6a30:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    6a34:	f410 7f80 	tst.w	r0, #256	; 0x100
    6a38:	d004      	beq.n	6a44 <channel_handler_get+0x18>
    6a3a:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    6a3e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6a42:	4770      	bx	lr
        return NULL;
    6a44:	2000      	movs	r0, #0
}
    6a46:	4770      	bx	lr
    6a48:	20000090 	.word	0x20000090

00006a4c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    6a4c:	b570      	push	{r4, r5, r6, lr}
    6a4e:	4604      	mov	r4, r0
    6a50:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    6a52:	f7ff ffeb 	bl	6a2c <channel_handler_get>

    if (handler)
    6a56:	b120      	cbz	r0, 6a62 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    6a58:	6806      	ldr	r6, [r0, #0]
    6a5a:	6842      	ldr	r2, [r0, #4]
    6a5c:	4629      	mov	r1, r5
    6a5e:	4620      	mov	r0, r4
    6a60:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    6a62:	4b04      	ldr	r3, [pc, #16]	; (6a74 <call_handler+0x28>)
    6a64:	689b      	ldr	r3, [r3, #8]
    6a66:	b123      	cbz	r3, 6a72 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    6a68:	4a02      	ldr	r2, [pc, #8]	; (6a74 <call_handler+0x28>)
    6a6a:	68d2      	ldr	r2, [r2, #12]
    6a6c:	4629      	mov	r1, r5
    6a6e:	4620      	mov	r0, r4
    6a70:	4798      	blx	r3
    }
}
    6a72:	bd70      	pop	{r4, r5, r6, pc}
    6a74:	20000090 	.word	0x20000090

00006a78 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6a78:	f100 0208 	add.w	r2, r0, #8
    6a7c:	4b0e      	ldr	r3, [pc, #56]	; (6ab8 <release_handler+0x40>)
    6a7e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    6a82:	f413 7f80 	tst.w	r3, #256	; 0x100
    6a86:	d016      	beq.n	6ab6 <release_handler+0x3e>
{
    6a88:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6a8a:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    6a8e:	4610      	mov	r0, r2
    6a90:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    6a94:	4a08      	ldr	r2, [pc, #32]	; (6ab8 <release_handler+0x40>)
    6a96:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    6a9a:	4620      	mov	r0, r4
    6a9c:	f7ff ff96 	bl	69cc <handler_in_use>
    6aa0:	b100      	cbz	r0, 6aa4 <release_handler+0x2c>
}
    6aa2:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    6aa4:	4804      	ldr	r0, [pc, #16]	; (6ab8 <release_handler+0x40>)
    6aa6:	2300      	movs	r3, #0
    6aa8:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    6aac:	4621      	mov	r1, r4
    6aae:	3054      	adds	r0, #84	; 0x54
    6ab0:	f7ff fdfe 	bl	66b0 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    6ab4:	e7f5      	b.n	6aa2 <release_handler+0x2a>
    6ab6:	4770      	bx	lr
    6ab8:	20000090 	.word	0x20000090

00006abc <pin_handler_trigger_uninit>:
{
    6abc:	b510      	push	{r4, lr}
    6abe:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    6ac0:	f7ff ff5c 	bl	697c <pin_in_use_by_te>
    6ac4:	b140      	cbz	r0, 6ad8 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    6ac6:	4620      	mov	r0, r4
    6ac8:	f7ff ff78 	bl	69bc <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    6acc:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    6ad0:	4b06      	ldr	r3, [pc, #24]	; (6aec <pin_handler_trigger_uninit+0x30>)
    6ad2:	2200      	movs	r2, #0
    6ad4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    6ad8:	4620      	mov	r0, r4
    6ada:	f7ff ffcd 	bl	6a78 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    6ade:	3408      	adds	r4, #8
    6ae0:	4b03      	ldr	r3, [pc, #12]	; (6af0 <pin_handler_trigger_uninit+0x34>)
    6ae2:	2200      	movs	r2, #0
    6ae4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    6ae8:	bd10      	pop	{r4, pc}
    6aea:	bf00      	nop
    6aec:	40006000 	.word	0x40006000
    6af0:	20000090 	.word	0x20000090

00006af4 <pin_handler_set>:
{
    6af4:	b570      	push	{r4, r5, r6, lr}
    6af6:	b082      	sub	sp, #8
    6af8:	4606      	mov	r6, r0
    6afa:	460c      	mov	r4, r1
    6afc:	4615      	mov	r5, r2
    release_handler(pin);
    6afe:	f7ff ffbb 	bl	6a78 <release_handler>
    if (!handler)
    6b02:	b324      	cbz	r4, 6b4e <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    6b04:	4629      	mov	r1, r5
    6b06:	4620      	mov	r0, r4
    6b08:	f7ff ff7a 	bl	6a00 <find_handler>
    if (handler_id < 0)
    6b0c:	1e03      	subs	r3, r0, #0
    6b0e:	db13      	blt.n	6b38 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    6b10:	4a10      	ldr	r2, [pc, #64]	; (6b54 <pin_handler_set+0x60>)
    6b12:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    6b16:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    6b1a:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6b1c:	025b      	lsls	r3, r3, #9
    6b1e:	b29b      	uxth	r3, r3
    6b20:	f106 0008 	add.w	r0, r6, #8
    6b24:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    6b28:	430b      	orrs	r3, r1
    6b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6b2e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    6b32:	4809      	ldr	r0, [pc, #36]	; (6b58 <pin_handler_set+0x64>)
}
    6b34:	b002      	add	sp, #8
    6b36:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    6b38:	f10d 0107 	add.w	r1, sp, #7
    6b3c:	4807      	ldr	r0, [pc, #28]	; (6b5c <pin_handler_set+0x68>)
    6b3e:	f7ff fd93 	bl	6668 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    6b42:	4b05      	ldr	r3, [pc, #20]	; (6b58 <pin_handler_set+0x64>)
    6b44:	4298      	cmp	r0, r3
    6b46:	d1f5      	bne.n	6b34 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    6b48:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b4c:	e7e0      	b.n	6b10 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    6b4e:	4802      	ldr	r0, [pc, #8]	; (6b58 <pin_handler_set+0x64>)
    6b50:	e7f0      	b.n	6b34 <pin_handler_set+0x40>
    6b52:	bf00      	nop
    6b54:	20000090 	.word	0x20000090
    6b58:	0bad0000 	.word	0x0bad0000
    6b5c:	200000e4 	.word	0x200000e4

00006b60 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
    6b60:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b62:	b083      	sub	sp, #12
    for (i = start_port; i < (start_port + length); i++)
    6b64:	2300      	movs	r3, #0
    6b66:	a801      	add	r0, sp, #4
    6b68:	e008      	b.n	6b7c <port_event_handle+0x1c>
        *p_masks = gpio_regs[i]->LATCH;
    6b6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6b6e:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    6b72:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    6b76:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    6b7a:	3301      	adds	r3, #1
    6b7c:	2b00      	cmp	r3, #0
    6b7e:	d0f4      	beq.n	6b6a <port_event_handle+0xa>
    6b80:	e038      	b.n	6bf4 <port_event_handle+0x94>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    do {
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
        {
            while (latch[i])
    6b82:	ab02      	add	r3, sp, #8
    6b84:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    6b88:	f853 0c04 	ldr.w	r0, [r3, #-4]
    6b8c:	b338      	cbz	r0, 6bde <port_event_handle+0x7e>
            {
                uint32_t pin = NRF_CTZ(latch[i]);
    6b8e:	fa90 f0a0 	rbit	r0, r0
    6b92:	fab0 f080 	clz	r0, r0

                /* Convert to absolute value. */
                pin += 32 * i;
    6b96:	eb00 1045 	add.w	r0, r0, r5, lsl #5
                nrf_gpio_pin_sense_t sense;
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6b9a:	f100 0208 	add.w	r2, r0, #8
    6b9e:	4b17      	ldr	r3, [pc, #92]	; (6bfc <port_event_handle+0x9c>)
    6ba0:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    6ba4:	08c6      	lsrs	r6, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    6ba6:	f000 0307 	and.w	r3, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    6baa:	af01      	add	r7, sp, #4
    6bac:	2401      	movs	r4, #1
    6bae:	fa04 f203 	lsl.w	r2, r4, r3
    6bb2:	5dbb      	ldrb	r3, [r7, r6]
    6bb4:	ea23 0302 	bic.w	r3, r3, r2
    6bb8:	55bb      	strb	r3, [r7, r6]
    *p_pin = pin_number & 0x1F;
    6bba:	f000 071f 	and.w	r7, r0, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6bbe:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    6bc2:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    6bc6:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
    6bca:	f3c2 4201 	ubfx	r2, r2, #16, #2
    6bce:	f3c1 0182 	ubfx	r1, r1, #2, #3
    6bd2:	f003 fbfe 	bl	a3d2 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    6bd6:	40bc      	lsls	r4, r7
    6bd8:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    6bdc:	e7d1      	b.n	6b82 <port_event_handle+0x22>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6bde:	3501      	adds	r5, #1
    6be0:	2d00      	cmp	r5, #0
    6be2:	d0ce      	beq.n	6b82 <port_event_handle+0x22>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6be4:	4b06      	ldr	r3, [pc, #24]	; (6c00 <port_event_handle+0xa0>)
    6be6:	2200      	movs	r2, #0
    6be8:	601a      	str	r2, [r3, #0]
    6bea:	681b      	ldr	r3, [r3, #0]
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    6bec:	a801      	add	r0, sp, #4
    6bee:	f003 fc3e 	bl	a46e <latch_pending_read_and_check>
    6bf2:	b108      	cbz	r0, 6bf8 <port_event_handle+0x98>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6bf4:	2500      	movs	r5, #0
    6bf6:	e7f3      	b.n	6be0 <port_event_handle+0x80>
}
    6bf8:	b003      	add	sp, #12
    6bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6bfc:	20000090 	.word	0x20000090
    6c00:	4000617c 	.word	0x4000617c

00006c04 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    6c04:	b538      	push	{r3, r4, r5, lr}
    6c06:	4604      	mov	r4, r0
    while (mask)
    6c08:	b1cc      	cbz	r4, 6c3e <gpiote_evt_handle+0x3a>
    {
        uint32_t ch = NRF_CTZ(mask);
    6c0a:	fa94 f3a4 	rbit	r3, r4
    6c0e:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    6c12:	2201      	movs	r2, #1
    6c14:	409a      	lsls	r2, r3
    6c16:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    6c1a:	4a09      	ldr	r2, [pc, #36]	; (6c40 <gpiote_evt_handle+0x3c>)
    6c1c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    6c20:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    6c24:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    6c28:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    6c2c:	f3c0 4001 	ubfx	r0, r0, #16, #2
    6c30:	f003 fbc8 	bl	a3c4 <gpiote_polarity_to_trigger>
    6c34:	4601      	mov	r1, r0
    6c36:	4628      	mov	r0, r5
    6c38:	f7ff ff08 	bl	6a4c <call_handler>
    6c3c:	e7e4      	b.n	6c08 <gpiote_evt_handle+0x4>
    }
}
    6c3e:	bd38      	pop	{r3, r4, r5, pc}
    6c40:	40006000 	.word	0x40006000

00006c44 <nrfx_gpiote_input_configure>:
{
    6c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6c48:	4604      	mov	r4, r0
    6c4a:	4615      	mov	r5, r2
    6c4c:	461e      	mov	r6, r3
    if (p_input_config)
    6c4e:	b359      	cbz	r1, 6ca8 <nrfx_gpiote_input_configure+0x64>
    6c50:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    6c52:	f003 fba1 	bl	a398 <pin_is_task_output>
    6c56:	2800      	cmp	r0, #0
    6c58:	f040 8094 	bne.w	6d84 <nrfx_gpiote_input_configure+0x140>
    *p_pin = pin_number & 0x1F;
    6c5c:	f004 021f 	and.w	r2, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6c60:	f502 71e0 	add.w	r1, r2, #448	; 0x1c0
    6c64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6c68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6c6c:	2f00      	cmp	r7, #0
    6c6e:	d03c      	beq.n	6cea <nrfx_gpiote_input_configure+0xa6>
    6c70:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6c72:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
    6c76:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6c7a:	2f00      	cmp	r7, #0
    6c7c:	d037      	beq.n	6cee <nrfx_gpiote_input_configure+0xaa>
    6c7e:	7839      	ldrb	r1, [r7, #0]
    6c80:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6c82:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    6c84:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    6c88:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6c8c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    6c90:	4a40      	ldr	r2, [pc, #256]	; (6d94 <nrfx_gpiote_input_configure+0x150>)
    6c92:	f104 0108 	add.w	r1, r4, #8
    6c96:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6c9a:	f023 0302 	bic.w	r3, r3, #2
    6c9e:	b29b      	uxth	r3, r3
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    6ca0:	f043 0301 	orr.w	r3, r3, #1
    6ca4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    6ca8:	b1b5      	cbz	r5, 6cd8 <nrfx_gpiote_input_configure+0x94>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    6caa:	f895 8000 	ldrb.w	r8, [r5]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    6cae:	f8d5 9004 	ldr.w	r9, [r5, #4]
        if (pin_is_output(pin))
    6cb2:	4620      	mov	r0, r4
    6cb4:	f7ff fe78 	bl	69a8 <pin_is_output>
    6cb8:	b1d8      	cbz	r0, 6cf2 <nrfx_gpiote_input_configure+0xae>
            if (use_evt)
    6cba:	f1b9 0f00 	cmp.w	r9, #0
    6cbe:	d163      	bne.n	6d88 <nrfx_gpiote_input_configure+0x144>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    6cc0:	4b34      	ldr	r3, [pc, #208]	; (6d94 <nrfx_gpiote_input_configure+0x150>)
    6cc2:	f104 0208 	add.w	r2, r4, #8
    6cc6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
    6cca:	f020 001c 	bic.w	r0, r0, #28
    6cce:	b280      	uxth	r0, r0
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    6cd0:	ea40 0088 	orr.w	r0, r0, r8, lsl #2
    6cd4:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
    if (p_handler_config)
    6cd8:	2e00      	cmp	r6, #0
    6cda:	d059      	beq.n	6d90 <nrfx_gpiote_input_configure+0x14c>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    6cdc:	6872      	ldr	r2, [r6, #4]
    6cde:	6831      	ldr	r1, [r6, #0]
    6ce0:	4620      	mov	r0, r4
    6ce2:	f7ff ff07 	bl	6af4 <pin_handler_set>
}
    6ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6cea:	2100      	movs	r1, #0
    6cec:	e7c1      	b.n	6c72 <nrfx_gpiote_input_configure+0x2e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6cee:	2100      	movs	r1, #0
    6cf0:	e7c7      	b.n	6c82 <nrfx_gpiote_input_configure+0x3e>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    6cf2:	4b28      	ldr	r3, [pc, #160]	; (6d94 <nrfx_gpiote_input_configure+0x150>)
    6cf4:	f104 0208 	add.w	r2, r4, #8
    6cf8:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
    6cfc:	f027 0720 	bic.w	r7, r7, #32
    6d00:	04ff      	lsls	r7, r7, #19
    6d02:	0cff      	lsrs	r7, r7, #19
    6d04:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
            if (use_evt)
    6d08:	f1b9 0f00 	cmp.w	r9, #0
    6d0c:	d0d8      	beq.n	6cc0 <nrfx_gpiote_input_configure+0x7c>
                if (!edge)
    6d0e:	f1b8 0f03 	cmp.w	r8, #3
    6d12:	d83b      	bhi.n	6d8c <nrfx_gpiote_input_configure+0x148>
                uint8_t ch = *p_trigger_config->p_in_channel;
    6d14:	686b      	ldr	r3, [r5, #4]
    6d16:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    6d18:	f1b8 0f00 	cmp.w	r8, #0
    6d1c:	d106      	bne.n	6d2c <nrfx_gpiote_input_configure+0xe8>
    p_reg->CONFIG[idx] = 0;
    6d1e:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    6d22:	4b1d      	ldr	r3, [pc, #116]	; (6d98 <nrfx_gpiote_input_configure+0x154>)
    6d24:	2200      	movs	r2, #0
    6d26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    6d2a:	e7c9      	b.n	6cc0 <nrfx_gpiote_input_configure+0x7c>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    6d2c:	4640      	mov	r0, r8
    6d2e:	f003 fb4a 	bl	a3c6 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6d32:	4b19      	ldr	r3, [pc, #100]	; (6d98 <nrfx_gpiote_input_configure+0x154>)
    6d34:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    6d38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    6d3c:	f021 0103 	bic.w	r1, r1, #3
    6d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    6d44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    6d48:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
    6d4c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    6d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6d54:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    6d58:	0221      	lsls	r1, r4, #8
    6d5a:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    6d5e:	0400      	lsls	r0, r0, #16
    6d60:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6d64:	4301      	orrs	r1, r0
    6d66:	ea4c 0101 	orr.w	r1, ip, r1
    6d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6d6e:	036d      	lsls	r5, r5, #13
    6d70:	b2ad      	uxth	r5, r5
    6d72:	f104 0308 	add.w	r3, r4, #8
    6d76:	432f      	orrs	r7, r5
    6d78:	f047 0720 	orr.w	r7, r7, #32
    6d7c:	4a05      	ldr	r2, [pc, #20]	; (6d94 <nrfx_gpiote_input_configure+0x150>)
    6d7e:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
    6d82:	e79d      	b.n	6cc0 <nrfx_gpiote_input_configure+0x7c>
            return NRFX_ERROR_INVALID_PARAM;
    6d84:	4805      	ldr	r0, [pc, #20]	; (6d9c <nrfx_gpiote_input_configure+0x158>)
    6d86:	e7ae      	b.n	6ce6 <nrfx_gpiote_input_configure+0xa2>
                return NRFX_ERROR_INVALID_PARAM;
    6d88:	4804      	ldr	r0, [pc, #16]	; (6d9c <nrfx_gpiote_input_configure+0x158>)
    6d8a:	e7ac      	b.n	6ce6 <nrfx_gpiote_input_configure+0xa2>
                    return NRFX_ERROR_INVALID_PARAM;
    6d8c:	4803      	ldr	r0, [pc, #12]	; (6d9c <nrfx_gpiote_input_configure+0x158>)
    6d8e:	e7aa      	b.n	6ce6 <nrfx_gpiote_input_configure+0xa2>
        err = NRFX_SUCCESS;
    6d90:	4803      	ldr	r0, [pc, #12]	; (6da0 <nrfx_gpiote_input_configure+0x15c>)
    6d92:	e7a8      	b.n	6ce6 <nrfx_gpiote_input_configure+0xa2>
    6d94:	20000090 	.word	0x20000090
    6d98:	40006000 	.word	0x40006000
    6d9c:	0bad0004 	.word	0x0bad0004
    6da0:	0bad0000 	.word	0x0bad0000

00006da4 <nrfx_gpiote_output_configure>:
{
    6da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6da6:	4604      	mov	r4, r0
    6da8:	4616      	mov	r6, r2
    if (p_config)
    6daa:	2900      	cmp	r1, #0
    6dac:	d04d      	beq.n	6e4a <nrfx_gpiote_output_configure+0xa6>
    6dae:	460d      	mov	r5, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    6db0:	f003 fb01 	bl	a3b6 <pin_is_input>
    6db4:	b128      	cbz	r0, 6dc2 <nrfx_gpiote_output_configure+0x1e>
    6db6:	4620      	mov	r0, r4
    6db8:	f7ff fde0 	bl	697c <pin_in_use_by_te>
    6dbc:	2800      	cmp	r0, #0
    6dbe:	f040 8096 	bne.w	6eee <nrfx_gpiote_output_configure+0x14a>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    6dc2:	4620      	mov	r0, r4
    6dc4:	f7ff fde4 	bl	6990 <pin_has_trigger>
    6dc8:	b118      	cbz	r0, 6dd2 <nrfx_gpiote_output_configure+0x2e>
    6dca:	786b      	ldrb	r3, [r5, #1]
    6dcc:	2b01      	cmp	r3, #1
    6dce:	f000 8090 	beq.w	6ef2 <nrfx_gpiote_output_configure+0x14e>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    6dd2:	1ca8      	adds	r0, r5, #2
    *p_pin = pin_number & 0x1F;
    6dd4:	f004 021f 	and.w	r2, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6dd8:	f502 71e0 	add.w	r1, r2, #448	; 0x1c0
    6ddc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6de0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6de4:	1c6f      	adds	r7, r5, #1
    6de6:	d074      	beq.n	6ed2 <nrfx_gpiote_output_configure+0x12e>
    6de8:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    6dea:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6dee:	2800      	cmp	r0, #0
    6df0:	d071      	beq.n	6ed6 <nrfx_gpiote_output_configure+0x132>
    6df2:	f04f 0c0c 	mov.w	ip, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6df6:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    6dfa:	2d00      	cmp	r5, #0
    6dfc:	d06e      	beq.n	6edc <nrfx_gpiote_output_configure+0x138>
    6dfe:	f44f 6ce0 	mov.w	ip, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6e02:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    6e06:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    6e0a:	2f00      	cmp	r7, #0
    6e0c:	d069      	beq.n	6ee2 <nrfx_gpiote_output_configure+0x13e>
    6e0e:	786b      	ldrb	r3, [r5, #1]
    6e10:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6e12:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6e16:	2800      	cmp	r0, #0
    6e18:	d065      	beq.n	6ee6 <nrfx_gpiote_output_configure+0x142>
    6e1a:	78a8      	ldrb	r0, [r5, #2]
    6e1c:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    6e1e:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    6e20:	2d00      	cmp	r5, #0
    6e22:	d062      	beq.n	6eea <nrfx_gpiote_output_configure+0x146>
    6e24:	7828      	ldrb	r0, [r5, #0]
    6e26:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6e28:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6e2a:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    6e2c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    6e30:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6e34:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    6e38:	4a32      	ldr	r2, [pc, #200]	; (6f04 <nrfx_gpiote_output_configure+0x160>)
    6e3a:	f104 0108 	add.w	r1, r4, #8
    6e3e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6e42:	f043 0303 	orr.w	r3, r3, #3
    6e46:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    6e4a:	2e00      	cmp	r6, #0
    6e4c:	d053      	beq.n	6ef6 <nrfx_gpiote_output_configure+0x152>
        if (pin_is_input(pin))
    6e4e:	4620      	mov	r0, r4
    6e50:	f003 fab1 	bl	a3b6 <pin_is_input>
    6e54:	2800      	cmp	r0, #0
    6e56:	d150      	bne.n	6efa <nrfx_gpiote_output_configure+0x156>
        uint32_t ch = p_task_config->task_ch;
    6e58:	7832      	ldrb	r2, [r6, #0]
    p_reg->CONFIG[idx] = 0;
    6e5a:	f502 71a2 	add.w	r1, r2, #324	; 0x144
    6e5e:	4b2a      	ldr	r3, [pc, #168]	; (6f08 <nrfx_gpiote_output_configure+0x164>)
    6e60:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    6e64:	4927      	ldr	r1, [pc, #156]	; (6f04 <nrfx_gpiote_output_configure+0x160>)
    6e66:	f104 0008 	add.w	r0, r4, #8
    6e6a:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
    6e6e:	f023 0320 	bic.w	r3, r3, #32
    6e72:	04db      	lsls	r3, r3, #19
    6e74:	0cdb      	lsrs	r3, r3, #19
    6e76:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    6e7a:	7871      	ldrb	r1, [r6, #1]
    6e7c:	2900      	cmp	r1, #0
    6e7e:	d03e      	beq.n	6efe <nrfx_gpiote_output_configure+0x15a>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    6e80:	f896 c002 	ldrb.w	ip, [r6, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    6e84:	4d20      	ldr	r5, [pc, #128]	; (6f08 <nrfx_gpiote_output_configure+0x164>)
    6e86:	f502 76a2 	add.w	r6, r2, #324	; 0x144
    6e8a:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
    6e8e:	f420 1098 	bic.w	r0, r0, #1245184	; 0x130000
    6e92:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
    6e96:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6e9a:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
    6e9e:	0220      	lsls	r0, r4, #8
    6ea0:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6ea4:	0409      	lsls	r1, r1, #16
    6ea6:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6eaa:	4301      	orrs	r1, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    6eac:	ea4f 500c 	mov.w	r0, ip, lsl #20
    6eb0:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6eb4:	4301      	orrs	r1, r0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6eb6:	4339      	orrs	r1, r7
    6eb8:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6ebc:	0352      	lsls	r2, r2, #13
    6ebe:	b292      	uxth	r2, r2
    6ec0:	3408      	adds	r4, #8
    6ec2:	431a      	orrs	r2, r3
    6ec4:	f042 0220 	orr.w	r2, r2, #32
    6ec8:	4b0e      	ldr	r3, [pc, #56]	; (6f04 <nrfx_gpiote_output_configure+0x160>)
    6eca:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    return NRFX_SUCCESS;
    6ece:	480f      	ldr	r0, [pc, #60]	; (6f0c <nrfx_gpiote_output_configure+0x168>)
    6ed0:	e012      	b.n	6ef8 <nrfx_gpiote_output_configure+0x154>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6ed2:	2300      	movs	r3, #0
    6ed4:	e789      	b.n	6dea <nrfx_gpiote_output_configure+0x46>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6ed6:	f04f 0c00 	mov.w	ip, #0
    6eda:	e78c      	b.n	6df6 <nrfx_gpiote_output_configure+0x52>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    6edc:	f04f 0c00 	mov.w	ip, #0
    6ee0:	e78f      	b.n	6e02 <nrfx_gpiote_output_configure+0x5e>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    6ee2:	2300      	movs	r3, #0
    6ee4:	e795      	b.n	6e12 <nrfx_gpiote_output_configure+0x6e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6ee6:	2000      	movs	r0, #0
    6ee8:	e799      	b.n	6e1e <nrfx_gpiote_output_configure+0x7a>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    6eea:	2000      	movs	r0, #0
    6eec:	e79c      	b.n	6e28 <nrfx_gpiote_output_configure+0x84>
    6eee:	4808      	ldr	r0, [pc, #32]	; (6f10 <nrfx_gpiote_output_configure+0x16c>)
    6ef0:	e002      	b.n	6ef8 <nrfx_gpiote_output_configure+0x154>
    6ef2:	4807      	ldr	r0, [pc, #28]	; (6f10 <nrfx_gpiote_output_configure+0x16c>)
    6ef4:	e000      	b.n	6ef8 <nrfx_gpiote_output_configure+0x154>
    6ef6:	4805      	ldr	r0, [pc, #20]	; (6f0c <nrfx_gpiote_output_configure+0x168>)
}
    6ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NRFX_ERROR_INVALID_PARAM;
    6efa:	4805      	ldr	r0, [pc, #20]	; (6f10 <nrfx_gpiote_output_configure+0x16c>)
    6efc:	e7fc      	b.n	6ef8 <nrfx_gpiote_output_configure+0x154>
    return NRFX_SUCCESS;
    6efe:	4803      	ldr	r0, [pc, #12]	; (6f0c <nrfx_gpiote_output_configure+0x168>)
    6f00:	e7fa      	b.n	6ef8 <nrfx_gpiote_output_configure+0x154>
    6f02:	bf00      	nop
    6f04:	20000090 	.word	0x20000090
    6f08:	40006000 	.word	0x40006000
    6f0c:	0bad0000 	.word	0x0bad0000
    6f10:	0bad0004 	.word	0x0bad0004

00006f14 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    6f14:	4b01      	ldr	r3, [pc, #4]	; (6f1c <nrfx_gpiote_global_callback_set+0x8>)
    6f16:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    6f18:	60d9      	str	r1, [r3, #12]
}
    6f1a:	4770      	bx	lr
    6f1c:	20000090 	.word	0x20000090

00006f20 <nrfx_gpiote_channel_get>:
{
    6f20:	b538      	push	{r3, r4, r5, lr}
    6f22:	4604      	mov	r4, r0
    6f24:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    6f26:	f7ff fd29 	bl	697c <pin_in_use_by_te>
    6f2a:	b140      	cbz	r0, 6f3e <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6f2c:	f104 0008 	add.w	r0, r4, #8
    6f30:	4b04      	ldr	r3, [pc, #16]	; (6f44 <nrfx_gpiote_channel_get+0x24>)
    6f32:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    6f36:	0b5b      	lsrs	r3, r3, #13
    6f38:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    6f3a:	4803      	ldr	r0, [pc, #12]	; (6f48 <nrfx_gpiote_channel_get+0x28>)
}
    6f3c:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6f3e:	4803      	ldr	r0, [pc, #12]	; (6f4c <nrfx_gpiote_channel_get+0x2c>)
    6f40:	e7fc      	b.n	6f3c <nrfx_gpiote_channel_get+0x1c>
    6f42:	bf00      	nop
    6f44:	20000090 	.word	0x20000090
    6f48:	0bad0000 	.word	0x0bad0000
    6f4c:	0bad0004 	.word	0x0bad0004

00006f50 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    6f50:	4b0f      	ldr	r3, [pc, #60]	; (6f90 <nrfx_gpiote_init+0x40>)
    6f52:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    6f56:	b10b      	cbz	r3, 6f5c <nrfx_gpiote_init+0xc>
        return err_code;
    6f58:	480e      	ldr	r0, [pc, #56]	; (6f94 <nrfx_gpiote_init+0x44>)
}
    6f5a:	4770      	bx	lr
{
    6f5c:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    6f5e:	4c0c      	ldr	r4, [pc, #48]	; (6f90 <nrfx_gpiote_init+0x40>)
    6f60:	2240      	movs	r2, #64	; 0x40
    6f62:	2100      	movs	r1, #0
    6f64:	f104 0010 	add.w	r0, r4, #16
    6f68:	f003 feec 	bl	ad44 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    6f6c:	2006      	movs	r0, #6
    6f6e:	f7fd f98f 	bl	4290 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6f72:	4b09      	ldr	r3, [pc, #36]	; (6f98 <nrfx_gpiote_init+0x48>)
    6f74:	2200      	movs	r2, #0
    6f76:	601a      	str	r2, [r3, #0]
    6f78:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    6f7a:	4b08      	ldr	r3, [pc, #32]	; (6f9c <nrfx_gpiote_init+0x4c>)
    6f7c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6f80:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    6f84:	2301      	movs	r3, #1
    6f86:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    6f8a:	6563      	str	r3, [r4, #84]	; 0x54
    return err_code;
    6f8c:	4804      	ldr	r0, [pc, #16]	; (6fa0 <nrfx_gpiote_init+0x50>)
}
    6f8e:	bd10      	pop	{r4, pc}
    6f90:	20000090 	.word	0x20000090
    6f94:	0bad0005 	.word	0x0bad0005
    6f98:	4000617c 	.word	0x4000617c
    6f9c:	40006000 	.word	0x40006000
    6fa0:	0bad0000 	.word	0x0bad0000

00006fa4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    6fa4:	4b03      	ldr	r3, [pc, #12]	; (6fb4 <nrfx_gpiote_is_init+0x10>)
    6fa6:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    6faa:	3800      	subs	r0, #0
    6fac:	bf18      	it	ne
    6fae:	2001      	movne	r0, #1
    6fb0:	4770      	bx	lr
    6fb2:	bf00      	nop
    6fb4:	20000090 	.word	0x20000090

00006fb8 <nrfx_gpiote_channel_free>:
{
    6fb8:	b508      	push	{r3, lr}
    6fba:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    6fbc:	4801      	ldr	r0, [pc, #4]	; (6fc4 <nrfx_gpiote_channel_free+0xc>)
    6fbe:	f7ff fb77 	bl	66b0 <nrfx_flag32_free>
}
    6fc2:	bd08      	pop	{r3, pc}
    6fc4:	200000e0 	.word	0x200000e0

00006fc8 <nrfx_gpiote_channel_alloc>:
{
    6fc8:	b508      	push	{r3, lr}
    6fca:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    6fcc:	4801      	ldr	r0, [pc, #4]	; (6fd4 <nrfx_gpiote_channel_alloc+0xc>)
    6fce:	f7ff fb4b 	bl	6668 <nrfx_flag32_alloc>
}
    6fd2:	bd08      	pop	{r3, pc}
    6fd4:	200000e0 	.word	0x200000e0

00006fd8 <nrfx_gpiote_trigger_enable>:
{
    6fd8:	b538      	push	{r3, r4, r5, lr}
    6fda:	4604      	mov	r4, r0
    6fdc:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6fde:	f7ff fccd 	bl	697c <pin_in_use_by_te>
    6fe2:	b308      	cbz	r0, 7028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    6fe4:	4620      	mov	r0, r4
    6fe6:	f003 f9e6 	bl	a3b6 <pin_is_input>
    6fea:	b1e8      	cbz	r0, 7028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
        uint8_t ch = pin_te_get(pin);
    6fec:	4620      	mov	r0, r4
    6fee:	f7ff fce5 	bl	69bc <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    6ff2:	0083      	lsls	r3, r0, #2
    6ff4:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    6ff8:	b29b      	uxth	r3, r3
    6ffa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6ffe:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7002:	2200      	movs	r2, #0
    7004:	601a      	str	r2, [r3, #0]
    7006:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    7008:	4a1d      	ldr	r2, [pc, #116]	; (7080 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80>)
    700a:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    700e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    7012:	f043 0301 	orr.w	r3, r3, #1
    7016:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    701a:	b365      	cbz	r5, 7076 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x76>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    701c:	2301      	movs	r3, #1
    701e:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
    7022:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
    7026:	e026      	b.n	7076 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x76>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7028:	f104 0308 	add.w	r3, r4, #8
    702c:	4a15      	ldr	r2, [pc, #84]	; (7084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x84>)
    702e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    7032:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    7036:	2b04      	cmp	r3, #4
    7038:	d00e      	beq.n	7058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    703a:	2b05      	cmp	r3, #5
    703c:	d01c      	beq.n	7078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>
    *p_pin = pin_number & 0x1F;
    703e:	f004 031f 	and.w	r3, r4, #31
    return p_reg->IN;
    7042:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7046:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    704a:	fa22 f303 	lsr.w	r3, r2, r3
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    704e:	f013 0f01 	tst.w	r3, #1
    7052:	d013      	beq.n	707c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7c>
    7054:	2103      	movs	r1, #3
    7056:	e000      	b.n	705a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    7058:	2103      	movs	r1, #3
    *p_pin = pin_number & 0x1F;
    705a:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    705e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7062:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    7066:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
    706a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    706e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    7072:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
    7076:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    7078:	2102      	movs	r1, #2
    707a:	e7ee      	b.n	705a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    707c:	2102      	movs	r1, #2
    707e:	e7ec      	b.n	705a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a>
    7080:	40006000 	.word	0x40006000
    7084:	20000090 	.word	0x20000090

00007088 <nrfx_gpiote_trigger_disable>:
{
    7088:	b510      	push	{r4, lr}
    708a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    708c:	f7ff fc76 	bl	697c <pin_in_use_by_te>
    7090:	b1a0      	cbz	r0, 70bc <nrfx_gpiote_trigger_disable+0x34>
    7092:	4620      	mov	r0, r4
    7094:	f003 f98f 	bl	a3b6 <pin_is_input>
    7098:	b180      	cbz	r0, 70bc <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    709a:	4620      	mov	r0, r4
    709c:	f7ff fc8e 	bl	69bc <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    70a0:	2201      	movs	r2, #1
    70a2:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    70a4:	4b0c      	ldr	r3, [pc, #48]	; (70d8 <nrfx_gpiote_trigger_disable+0x50>)
    70a6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    70aa:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    70ae:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    70b2:	f022 0203 	bic.w	r2, r2, #3
    70b6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    70ba:	e00b      	b.n	70d4 <nrfx_gpiote_trigger_disable+0x4c>
    *p_pin = pin_number & 0x1F;
    70bc:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    70c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    70c4:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    70c8:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
    70cc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    70d0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
    70d4:	bd10      	pop	{r4, pc}
    70d6:	bf00      	nop
    70d8:	40006000 	.word	0x40006000

000070dc <nrfx_gpiote_pin_uninit>:
{
    70dc:	b510      	push	{r4, lr}
    70de:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    70e0:	f7ff fc42 	bl	6968 <pin_in_use>
    70e4:	b908      	cbnz	r0, 70ea <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    70e6:	4809      	ldr	r0, [pc, #36]	; (710c <nrfx_gpiote_pin_uninit+0x30>)
}
    70e8:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    70ea:	4620      	mov	r0, r4
    70ec:	f7ff ffcc 	bl	7088 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    70f0:	4620      	mov	r0, r4
    70f2:	f7ff fce3 	bl	6abc <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
    70f6:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    70fa:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    70fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7102:	2202      	movs	r2, #2
    7104:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    return NRFX_SUCCESS;
    7108:	4801      	ldr	r0, [pc, #4]	; (7110 <nrfx_gpiote_pin_uninit+0x34>)
    710a:	e7ed      	b.n	70e8 <nrfx_gpiote_pin_uninit+0xc>
    710c:	0bad0004 	.word	0x0bad0004
    7110:	0bad0000 	.word	0x0bad0000

00007114 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    7114:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    7116:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    7118:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    711c:	2100      	movs	r1, #0
    uint32_t status = 0;
    711e:	460d      	mov	r5, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7120:	e003      	b.n	712a <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    7122:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    7124:	3304      	adds	r3, #4
    7126:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7128:	3101      	adds	r1, #1
    712a:	2907      	cmp	r1, #7
    712c:	d814      	bhi.n	7158 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    712e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    7132:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    7136:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    7138:	2a00      	cmp	r2, #0
    713a:	d0f2      	beq.n	7122 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    713c:	4a0b      	ldr	r2, [pc, #44]	; (716c <nrfx_gpiote_irq_handler+0x58>)
    713e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    7142:	4210      	tst	r0, r2
    7144:	d0ed      	beq.n	7122 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    7146:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    714a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    714e:	2400      	movs	r4, #0
    7150:	6014      	str	r4, [r2, #0]
    7152:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    7154:	4305      	orrs	r5, r0
    7156:	e7e4      	b.n	7122 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7158:	4b05      	ldr	r3, [pc, #20]	; (7170 <nrfx_gpiote_irq_handler+0x5c>)
    715a:	681b      	ldr	r3, [r3, #0]
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    715c:	b91b      	cbnz	r3, 7166 <nrfx_gpiote_irq_handler+0x52>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    715e:	4628      	mov	r0, r5
    7160:	f7ff fd50 	bl	6c04 <gpiote_evt_handle>
}
    7164:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    7166:	f7ff fcfb 	bl	6b60 <port_event_handle>
    716a:	e7f8      	b.n	715e <nrfx_gpiote_irq_handler+0x4a>
    716c:	40006000 	.word	0x40006000
    7170:	4000617c 	.word	0x4000617c

00007174 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
    7174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7176:	4606      	mov	r6, r0
    7178:	460d      	mov	r5, r1
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    717a:	7904      	ldrb	r4, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    717c:	6807      	ldr	r7, [r0, #0]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    717e:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    7182:	4926      	ldr	r1, [pc, #152]	; (721c <nrfx_spi_init+0xa8>)
    7184:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    7188:	7f09      	ldrb	r1, [r1, #28]
    718a:	b109      	cbz	r1, 7190 <nrfx_spi_init+0x1c>
    {
        err_code = NRFX_ERROR_INVALID_STATE;
        NRFX_LOG_WARNING("Function: %s, error code: %s.",
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    718c:	4824      	ldr	r0, [pc, #144]	; (7220 <nrfx_spi_init+0xac>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    718e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    p_cb->handler = handler;
    7190:	4822      	ldr	r0, [pc, #136]	; (721c <nrfx_spi_init+0xa8>)
    7192:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    7196:	eb00 01cc 	add.w	r1, r0, ip, lsl #3
    719a:	f840 203c 	str.w	r2, [r0, ip, lsl #3]
    p_cb->p_context = p_context;
    719e:	604b      	str	r3, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    71a0:	7beb      	ldrb	r3, [r5, #15]
    71a2:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
    71a6:	78eb      	ldrb	r3, [r5, #3]
    71a8:	778b      	strb	r3, [r1, #30]
    p_cb->orc = p_config->orc;
    71aa:	796b      	ldrb	r3, [r5, #5]
    71ac:	77cb      	strb	r3, [r1, #31]
    configure_pins(p_spi, p_config);
    71ae:	4629      	mov	r1, r5
    71b0:	4638      	mov	r0, r7
    71b2:	f003 f976 	bl	a4a2 <configure_pins>
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    71b6:	68ab      	ldr	r3, [r5, #8]
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    71b8:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
    71bc:	7b2a      	ldrb	r2, [r5, #12]
    71be:	7b6b      	ldrb	r3, [r5, #13]
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    71c0:	3b00      	subs	r3, #0
    71c2:	bf18      	it	ne
    71c4:	2301      	movne	r3, #1
    switch (spi_mode)
    71c6:	2a02      	cmp	r2, #2
    71c8:	d021      	beq.n	720e <nrfx_spi_init+0x9a>
    71ca:	2a03      	cmp	r2, #3
    71cc:	d022      	beq.n	7214 <nrfx_spi_init+0xa0>
    71ce:	2a01      	cmp	r2, #1
    71d0:	d01a      	beq.n	7208 <nrfx_spi_init+0x94>
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    71d2:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    71d6:	2301      	movs	r3, #1
    71d8:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
    if (p_cb->handler)
    71dc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    71e0:	4a0e      	ldr	r2, [pc, #56]	; (721c <nrfx_spi_init+0xa8>)
    71e2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    71e6:	b123      	cbz	r3, 71f2 <nrfx_spi_init+0x7e>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    71e8:	6830      	ldr	r0, [r6, #0]
    71ea:	f340 3007 	sbfx	r0, r0, #12, #8
    71ee:	f7fd f84f 	bl	4290 <arch_irq_enable>
    p_cb->transfer_in_progress = false;
    71f2:	4b0a      	ldr	r3, [pc, #40]	; (721c <nrfx_spi_init+0xa8>)
    71f4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    71f8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    71fc:	2100      	movs	r1, #0
    71fe:	7751      	strb	r1, [r2, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    7200:	2301      	movs	r3, #1
    7202:	7713      	strb	r3, [r2, #28]
    return err_code;
    7204:	4807      	ldr	r0, [pc, #28]	; (7224 <nrfx_spi_init+0xb0>)
    7206:	e7c2      	b.n	718e <nrfx_spi_init+0x1a>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    7208:	f043 0302 	orr.w	r3, r3, #2
        break;
    720c:	e7e1      	b.n	71d2 <nrfx_spi_init+0x5e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    720e:	f043 0304 	orr.w	r3, r3, #4
        break;
    7212:	e7de      	b.n	71d2 <nrfx_spi_init+0x5e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    7214:	f043 0306 	orr.w	r3, r3, #6
        break;
    7218:	e7db      	b.n	71d2 <nrfx_spi_init+0x5e>
    721a:	bf00      	nop
    721c:	2000050c 	.word	0x2000050c
    7220:	0bad0005 	.word	0x0bad0005
    7224:	0bad0000 	.word	0x0bad0000

00007228 <nrfx_spi_uninit>:

void nrfx_spi_uninit(nrfx_spi_t const * p_instance)
{
    7228:	b538      	push	{r3, r4, r5, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    722a:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    722c:	6805      	ldr	r5, [r0, #0]

    if (p_cb->handler)
    722e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    7232:	4b29      	ldr	r3, [pc, #164]	; (72d8 <nrfx_spi_uninit+0xb0>)
    7234:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    7238:	b133      	cbz	r3, 7248 <nrfx_spi_uninit+0x20>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    723a:	f345 3007 	sbfx	r0, r5, #12, #8
    723e:	f7fd f837 	bl	42b0 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    7242:	2304      	movs	r3, #4
    7244:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
    7248:	2300      	movs	r3, #0
    724a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        nrf_spi_int_disable(p_spi, NRF_SPI_ALL_INTS_MASK);
    }

    nrf_spi_disable(p_spi);

    if (!p_cb->skip_gpio_cfg)
    724e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    7252:	4a21      	ldr	r2, [pc, #132]	; (72d8 <nrfx_spi_uninit+0xb0>)
    7254:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7258:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    725c:	bba3      	cbnz	r3, 72c8 <nrfx_spi_uninit+0xa0>
    return p_reg->PSELSCK;
    725e:	f8d5 3508 	ldr.w	r3, [r5, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    7262:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    7266:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    726a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    726e:	2102      	movs	r1, #2
    7270:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return p_reg->PSELMISO;
    7274:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
    {
        nrf_gpio_cfg_default(nrf_spi_sck_pin_get(p_spi));

        uint32_t miso_pin = nrf_spi_miso_pin_get(p_spi);
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
    7278:	f1b3 3fff 	cmp.w	r3, #4294967295
    727c:	d005      	beq.n	728a <nrfx_spi_uninit+0x62>
    *p_pin = pin_number & 0x1F;
    727e:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    7282:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7286:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return p_reg->PSELMOSI;
    728a:	f8d5 350c 	ldr.w	r3, [r5, #1292]	; 0x50c
        {
            nrf_gpio_cfg_default(miso_pin);
        }

        uint32_t mosi_pin = nrf_spi_mosi_pin_get(p_spi);
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
    728e:	f1b3 3fff 	cmp.w	r3, #4294967295
    7292:	d008      	beq.n	72a6 <nrfx_spi_uninit+0x7e>
    *p_pin = pin_number & 0x1F;
    7294:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    7298:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    729c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    72a0:	2102      	movs	r1, #2
    72a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        {
            nrf_gpio_cfg_default(mosi_pin);
        }

        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    72a6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    72aa:	4a0b      	ldr	r2, [pc, #44]	; (72d8 <nrfx_spi_uninit+0xb0>)
    72ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    72b0:	7f9b      	ldrb	r3, [r3, #30]
    72b2:	2bff      	cmp	r3, #255	; 0xff
    72b4:	d008      	beq.n	72c8 <nrfx_spi_uninit+0xa0>
    *p_pin = pin_number & 0x1F;
    72b6:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    72ba:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    72be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    72c2:	2102      	movs	r1, #2
    72c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    72c8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    72cc:	4b02      	ldr	r3, [pc, #8]	; (72d8 <nrfx_spi_uninit+0xb0>)
    72ce:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    72d2:	2300      	movs	r3, #0
    72d4:	7723      	strb	r3, [r4, #28]
}
    72d6:	bd38      	pop	{r3, r4, r5, pc}
    72d8:	2000050c 	.word	0x2000050c

000072dc <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    72dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    72e0:	7904      	ldrb	r4, [r0, #4]
    72e2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    72e6:	4f21      	ldr	r7, [pc, #132]	; (736c <nrfx_spi_xfer+0x90>)
    72e8:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    72ec:	7f7b      	ldrb	r3, [r7, #29]
    72ee:	2b00      	cmp	r3, #0
    72f0:	d139      	bne.n	7366 <nrfx_spi_xfer+0x8a>
    72f2:	4606      	mov	r6, r0
    72f4:	460d      	mov	r5, r1
    72f6:	4696      	mov	lr, r2
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
    72f8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    72fc:	4a1b      	ldr	r2, [pc, #108]	; (736c <nrfx_spi_xfer+0x90>)
    72fe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    7302:	b10b      	cbz	r3, 7308 <nrfx_spi_xfer+0x2c>
        {
            p_cb->transfer_in_progress = true;
    7304:	2201      	movs	r2, #1
    7306:	777a      	strb	r2, [r7, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    7308:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    730c:	4b17      	ldr	r3, [pc, #92]	; (736c <nrfx_spi_xfer+0x90>)
    730e:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
    7312:	f10c 080c 	add.w	r8, ip, #12
    7316:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    731a:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
    p_cb->abort = false;
    731e:	2300      	movs	r3, #0
    7320:	f88c 3024 	strb.w	r3, [ip, #36]	; 0x24

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    7324:	f89c 301e 	ldrb.w	r3, [ip, #30]
    7328:	2bff      	cmp	r3, #255	; 0xff
    732a:	d008      	beq.n	733e <nrfx_spi_xfer+0x62>
    *p_pin = pin_number & 0x1F;
    732c:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7330:	2201      	movs	r2, #1
    7332:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTCLR = clr_mask;
    7336:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    733a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    {
        nrf_gpio_pin_write(p_cb->ss_pin, 0);
    }
    if (flags)
    733e:	f1be 0f00 	cmp.w	lr, #0
    7342:	d009      	beq.n	7358 <nrfx_spi_xfer+0x7c>
    {
        p_cb->transfer_in_progress = false;
    7344:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    7348:	4b08      	ldr	r3, [pc, #32]	; (736c <nrfx_spi_xfer+0x90>)
    734a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    734e:	2300      	movs	r3, #0
    7350:	7763      	strb	r3, [r4, #29]
        err_code = NRFX_ERROR_NOT_SUPPORTED;
    7352:	4807      	ldr	r0, [pc, #28]	; (7370 <nrfx_spi_xfer+0x94>)
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    7354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
    7358:	462a      	mov	r2, r5
    735a:	4639      	mov	r1, r7
    735c:	6830      	ldr	r0, [r6, #0]
    735e:	f003 f97b 	bl	a658 <spi_xfer>
    nrfx_err_t err_code = NRFX_SUCCESS;
    7362:	4804      	ldr	r0, [pc, #16]	; (7374 <nrfx_spi_xfer+0x98>)
    7364:	e7f6      	b.n	7354 <nrfx_spi_xfer+0x78>
        return err_code;
    7366:	4804      	ldr	r0, [pc, #16]	; (7378 <nrfx_spi_xfer+0x9c>)
    7368:	e7f4      	b.n	7354 <nrfx_spi_xfer+0x78>
    736a:	bf00      	nop
    736c:	2000050c 	.word	0x2000050c
    7370:	0bad0003 	.word	0x0bad0003
    7374:	0bad0000 	.word	0x0bad0000
    7378:	0bad000b 	.word	0x0bad000b

0000737c <nrfx_spi_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_SPI0_ENABLED)
void nrfx_spi_0_irq_handler(void)
{
    737c:	b508      	push	{r3, lr}
    irq_handler(NRF_SPI0, &m_cb[NRFX_SPI0_INST_IDX]);
    737e:	4902      	ldr	r1, [pc, #8]	; (7388 <nrfx_spi_0_irq_handler+0xc>)
    7380:	4802      	ldr	r0, [pc, #8]	; (738c <nrfx_spi_0_irq_handler+0x10>)
    7382:	f003 f9ad 	bl	a6e0 <irq_handler>
}
    7386:	bd08      	pop	{r3, pc}
    7388:	2000050c 	.word	0x2000050c
    738c:	40003000 	.word	0x40003000

00007390 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    7390:	4b11      	ldr	r3, [pc, #68]	; (73d8 <_DoInit+0x48>)
    7392:	2203      	movs	r2, #3
    7394:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    7396:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    7398:	4910      	ldr	r1, [pc, #64]	; (73dc <_DoInit+0x4c>)
    739a:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    739c:	4a10      	ldr	r2, [pc, #64]	; (73e0 <_DoInit+0x50>)
    739e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    73a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    73a4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    73a6:	2200      	movs	r2, #0
    73a8:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    73aa:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    73ac:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    73ae:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    73b0:	490c      	ldr	r1, [pc, #48]	; (73e4 <_DoInit+0x54>)
    73b2:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    73b4:	2110      	movs	r1, #16
    73b6:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    73b8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    73ba:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    73bc:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    73be:	4a0a      	ldr	r2, [pc, #40]	; (73e8 <_DoInit+0x58>)
    73c0:	6810      	ldr	r0, [r2, #0]
    73c2:	f8c3 0007 	str.w	r0, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    73c6:	4a09      	ldr	r2, [pc, #36]	; (73ec <_DoInit+0x5c>)
    73c8:	e892 0003 	ldmia.w	r2, {r0, r1}
    73cc:	6018      	str	r0, [r3, #0]
    73ce:	8099      	strh	r1, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    73d0:	2220      	movs	r2, #32
    73d2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    73d4:	4770      	bx	lr
    73d6:	bf00      	nop
    73d8:	20000534 	.word	0x20000534
    73dc:	0000b9f0 	.word	0x0000b9f0
    73e0:	200005ec 	.word	0x200005ec
    73e4:	200005dc 	.word	0x200005dc
    73e8:	0000b9fc 	.word	0x0000b9fc
    73ec:	0000ba00 	.word	0x0000ba00

000073f0 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    73f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    73f4:	4604      	mov	r4, r0
    73f6:	460e      	mov	r6, r1
    73f8:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    73fa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    73fe:	4a2d      	ldr	r2, [pc, #180]	; (74b4 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    7400:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    7404:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    7406:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    7408:	42bb      	cmp	r3, r7
    740a:	d84b      	bhi.n	74a4 <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    740c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    7410:	4928      	ldr	r1, [pc, #160]	; (74b4 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    7412:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    7416:	f8d2 8020 	ldr.w	r8, [r2, #32]
    741a:	eba8 0907 	sub.w	r9, r8, r7
    741e:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    7422:	4295      	cmp	r5, r2
    7424:	d904      	bls.n	7430 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    7426:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    7428:	429d      	cmp	r5, r3
    742a:	d917      	bls.n	745c <SEGGER_RTT_WriteSkipNoLock+0x6c>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    742c:	2000      	movs	r0, #0
    742e:	e03e      	b.n	74ae <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7430:	f8df 8080 	ldr.w	r8, [pc, #128]	; 74b4 <SEGGER_RTT_WriteSkipNoLock+0xc4>
    7434:	1c63      	adds	r3, r4, #1
    7436:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    743a:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    743e:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    7440:	462a      	mov	r2, r5
    7442:	4631      	mov	r1, r6
    7444:	4438      	add	r0, r7
    7446:	f003 fc6f 	bl	ad28 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    744a:	443d      	add	r5, r7
    744c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7450:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
    7454:	f8c8 5024 	str.w	r5, [r8, #36]	; 0x24
      return 1;
    7458:	2001      	movs	r0, #1
    745a:	e028      	b.n	74ae <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    745c:	1c43      	adds	r3, r0, #1
    745e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7462:	4a14      	ldr	r2, [pc, #80]	; (74b4 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    7464:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7468:	6858      	ldr	r0, [r3, #4]
    746a:	464a      	mov	r2, r9
    746c:	4631      	mov	r1, r6
    746e:	4438      	add	r0, r7
    7470:	f003 fc5a 	bl	ad28 <memcpy>
      NumBytes -= Rem;
    7474:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    7478:	197f      	adds	r7, r7, r5
    747a:	d00b      	beq.n	7494 <SEGGER_RTT_WriteSkipNoLock+0xa4>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    747c:	1c63      	adds	r3, r4, #1
    747e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7482:	4a0c      	ldr	r2, [pc, #48]	; (74b4 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    7484:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7488:	463a      	mov	r2, r7
    748a:	eb06 0109 	add.w	r1, r6, r9
    748e:	6858      	ldr	r0, [r3, #4]
    7490:	f003 fc4a 	bl	ad28 <memcpy>
      pRing->WrOff = NumBytes;
    7494:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7498:	4b06      	ldr	r3, [pc, #24]	; (74b4 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    749a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    749e:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    74a0:	2001      	movs	r0, #1
    74a2:	e004      	b.n	74ae <SEGGER_RTT_WriteSkipNoLock+0xbe>
    Avail = RdOff - WrOff - 1u;
    74a4:	1bdb      	subs	r3, r3, r7
    74a6:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    74a8:	42ab      	cmp	r3, r5
    74aa:	d2c1      	bcs.n	7430 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    74ac:	2000      	movs	r0, #0
}
    74ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    74b2:	bf00      	nop
    74b4:	20000534 	.word	0x20000534

000074b8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    74b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74ba:	460f      	mov	r7, r1
    74bc:	4616      	mov	r6, r2
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    74be:	4b18      	ldr	r3, [pc, #96]	; (7520 <SEGGER_RTT_WriteNoLock+0x68>)
    74c0:	1c45      	adds	r5, r0, #1
    74c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    74c6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    74ca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    74ce:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    74d2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    74d4:	2c01      	cmp	r4, #1
    74d6:	d011      	beq.n	74fc <SEGGER_RTT_WriteNoLock+0x44>
    74d8:	2c02      	cmp	r4, #2
    74da:	d01c      	beq.n	7516 <SEGGER_RTT_WriteNoLock+0x5e>
    74dc:	b114      	cbz	r4, 74e4 <SEGGER_RTT_WriteNoLock+0x2c>
    74de:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
    74e0:	4620      	mov	r0, r4
    74e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    74e4:	4628      	mov	r0, r5
    74e6:	f003 f90a 	bl	a6fe <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    74ea:	4286      	cmp	r6, r0
    74ec:	d8f8      	bhi.n	74e0 <SEGGER_RTT_WriteNoLock+0x28>
      _WriteNoCheck(pRing, pData, NumBytes);
    74ee:	4632      	mov	r2, r6
    74f0:	4639      	mov	r1, r7
    74f2:	4628      	mov	r0, r5
    74f4:	f003 f90f 	bl	a716 <_WriteNoCheck>
      Status = NumBytes;
    74f8:	4634      	mov	r4, r6
    74fa:	e7f1      	b.n	74e0 <SEGGER_RTT_WriteNoLock+0x28>
    Avail = _GetAvailWriteSpace(pRing);
    74fc:	4628      	mov	r0, r5
    74fe:	f003 f8fe 	bl	a6fe <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    7502:	4634      	mov	r4, r6
    7504:	4286      	cmp	r6, r0
    7506:	bf28      	it	cs
    7508:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    750a:	4622      	mov	r2, r4
    750c:	4639      	mov	r1, r7
    750e:	4628      	mov	r0, r5
    7510:	f003 f901 	bl	a716 <_WriteNoCheck>
    break;
    7514:	e7e4      	b.n	74e0 <SEGGER_RTT_WriteNoLock+0x28>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    7516:	4628      	mov	r0, r5
    7518:	f003 f91f 	bl	a75a <_WriteBlocking>
    751c:	4604      	mov	r4, r0
    break;
    751e:	e7df      	b.n	74e0 <SEGGER_RTT_WriteNoLock+0x28>
    7520:	20000534 	.word	0x20000534

00007524 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    7524:	4b06      	ldr	r3, [pc, #24]	; (7540 <SEGGER_RTT_HasDataUp+0x1c>)
    7526:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    752a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    752e:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    7530:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    7534:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    7538:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    753a:	1a80      	subs	r0, r0, r2
    753c:	4770      	bx	lr
    753e:	bf00      	nop
    7540:	20000534 	.word	0x20000534

00007544 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    7544:	4b03      	ldr	r3, [pc, #12]	; (7554 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    7546:	4a04      	ldr	r2, [pc, #16]	; (7558 <z_device_state_init+0x14>)
    7548:	4293      	cmp	r3, r2
    754a:	d201      	bcs.n	7550 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
    754c:	3318      	adds	r3, #24
    754e:	e7fa      	b.n	7546 <z_device_state_init+0x2>
	}
}
    7550:	4770      	bx	lr
    7552:	bf00      	nop
    7554:	0000adf0 	.word	0x0000adf0
    7558:	0000ae38 	.word	0x0000ae38

0000755c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    755c:	b570      	push	{r4, r5, r6, lr}
    755e:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7560:	4b11      	ldr	r3, [pc, #68]	; (75a8 <z_sys_init_run_level+0x4c>)
    7562:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    7566:	e009      	b.n	757c <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    7568:	4240      	negs	r0, r0
    756a:	e017      	b.n	759c <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    756c:	68eb      	ldr	r3, [r5, #12]
    756e:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    7570:	68ea      	ldr	r2, [r5, #12]
    7572:	7853      	ldrb	r3, [r2, #1]
    7574:	f043 0301 	orr.w	r3, r3, #1
    7578:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    757a:	3408      	adds	r4, #8
    757c:	1c73      	adds	r3, r6, #1
    757e:	4a0a      	ldr	r2, [pc, #40]	; (75a8 <z_sys_init_run_level+0x4c>)
    7580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7584:	42a3      	cmp	r3, r4
    7586:	d90d      	bls.n	75a4 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    7588:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    758a:	6823      	ldr	r3, [r4, #0]
    758c:	4628      	mov	r0, r5
    758e:	4798      	blx	r3
		if (dev != NULL) {
    7590:	2d00      	cmp	r5, #0
    7592:	d0f2      	beq.n	757a <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    7594:	2800      	cmp	r0, #0
    7596:	d0eb      	beq.n	7570 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    7598:	2800      	cmp	r0, #0
    759a:	dbe5      	blt.n	7568 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    759c:	28ff      	cmp	r0, #255	; 0xff
    759e:	dde5      	ble.n	756c <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    75a0:	20ff      	movs	r0, #255	; 0xff
    75a2:	e7e3      	b.n	756c <z_sys_init_run_level+0x10>
		}
	}
}
    75a4:	bd70      	pop	{r4, r5, r6, pc}
    75a6:	bf00      	nop
    75a8:	0000ba08 	.word	0x0000ba08

000075ac <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    75ac:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    75ae:	4605      	mov	r5, r0
    75b0:	b328      	cbz	r0, 75fe <z_impl_device_get_binding+0x52>
    75b2:	7803      	ldrb	r3, [r0, #0]
    75b4:	b32b      	cbz	r3, 7602 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    75b6:	4c14      	ldr	r4, [pc, #80]	; (7608 <z_impl_device_get_binding+0x5c>)
    75b8:	e000      	b.n	75bc <z_impl_device_get_binding+0x10>
    75ba:	3418      	adds	r4, #24
    75bc:	4b13      	ldr	r3, [pc, #76]	; (760c <z_impl_device_get_binding+0x60>)
    75be:	429c      	cmp	r4, r3
    75c0:	d008      	beq.n	75d4 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
    75c2:	4620      	mov	r0, r4
    75c4:	f003 f901 	bl	a7ca <z_device_ready>
    75c8:	2800      	cmp	r0, #0
    75ca:	d0f6      	beq.n	75ba <z_impl_device_get_binding+0xe>
    75cc:	6823      	ldr	r3, [r4, #0]
    75ce:	42ab      	cmp	r3, r5
    75d0:	d1f3      	bne.n	75ba <z_impl_device_get_binding+0xe>
    75d2:	e012      	b.n	75fa <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    75d4:	4c0c      	ldr	r4, [pc, #48]	; (7608 <z_impl_device_get_binding+0x5c>)
    75d6:	e000      	b.n	75da <z_impl_device_get_binding+0x2e>
    75d8:	3418      	adds	r4, #24
    75da:	4b0c      	ldr	r3, [pc, #48]	; (760c <z_impl_device_get_binding+0x60>)
    75dc:	429c      	cmp	r4, r3
    75de:	d00b      	beq.n	75f8 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    75e0:	4620      	mov	r0, r4
    75e2:	f003 f8f2 	bl	a7ca <z_device_ready>
    75e6:	2800      	cmp	r0, #0
    75e8:	d0f6      	beq.n	75d8 <z_impl_device_get_binding+0x2c>
    75ea:	6821      	ldr	r1, [r4, #0]
    75ec:	4628      	mov	r0, r5
    75ee:	f7f9 fea7 	bl	1340 <strcmp>
    75f2:	2800      	cmp	r0, #0
    75f4:	d1f0      	bne.n	75d8 <z_impl_device_get_binding+0x2c>
    75f6:	e000      	b.n	75fa <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
    75f8:	2400      	movs	r4, #0
}
    75fa:	4620      	mov	r0, r4
    75fc:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    75fe:	4604      	mov	r4, r0
    7600:	e7fb      	b.n	75fa <z_impl_device_get_binding+0x4e>
    7602:	2400      	movs	r4, #0
    7604:	e7f9      	b.n	75fa <z_impl_device_get_binding+0x4e>
    7606:	bf00      	nop
    7608:	0000adf0 	.word	0x0000adf0
    760c:	0000ae38 	.word	0x0000ae38

00007610 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    7610:	4b01      	ldr	r3, [pc, #4]	; (7618 <z_impl_z_errno+0x8>)
    7612:	6898      	ldr	r0, [r3, #8]
}
    7614:	3094      	adds	r0, #148	; 0x94
    7616:	4770      	bx	lr
    7618:	200009ec 	.word	0x200009ec

0000761c <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    761c:	2804      	cmp	r0, #4
    761e:	d80c      	bhi.n	763a <reason_to_str+0x1e>
    7620:	e8df f000 	tbb	[pc, r0]
    7624:	07050d03 	.word	0x07050d03
    7628:	09          	.byte	0x09
    7629:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    762a:	4806      	ldr	r0, [pc, #24]	; (7644 <reason_to_str+0x28>)
    762c:	4770      	bx	lr
		return "Stack overflow";
    762e:	4806      	ldr	r0, [pc, #24]	; (7648 <reason_to_str+0x2c>)
    7630:	4770      	bx	lr
		return "Kernel oops";
    7632:	4806      	ldr	r0, [pc, #24]	; (764c <reason_to_str+0x30>)
    7634:	4770      	bx	lr
		return "Kernel panic";
    7636:	4806      	ldr	r0, [pc, #24]	; (7650 <reason_to_str+0x34>)
    7638:	4770      	bx	lr
	default:
		return "Unknown error";
    763a:	4806      	ldr	r0, [pc, #24]	; (7654 <reason_to_str+0x38>)
    763c:	4770      	bx	lr
		return "Unhandled interrupt";
    763e:	4806      	ldr	r0, [pc, #24]	; (7658 <reason_to_str+0x3c>)
	}
}
    7640:	4770      	bx	lr
    7642:	bf00      	nop
    7644:	0000ba70 	.word	0x0000ba70
    7648:	0000ba44 	.word	0x0000ba44
    764c:	0000ba54 	.word	0x0000ba54
    7650:	0000ba60 	.word	0x0000ba60
    7654:	0000ba20 	.word	0x0000ba20
    7658:	0000ba30 	.word	0x0000ba30

0000765c <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    765c:	b130      	cbz	r0, 766c <thread_name_get+0x10>
{
    765e:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    7660:	f003 f929 	bl	a8b6 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    7664:	b120      	cbz	r0, 7670 <thread_name_get+0x14>
    7666:	7803      	ldrb	r3, [r0, #0]
    7668:	b123      	cbz	r3, 7674 <thread_name_get+0x18>
}
    766a:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    766c:	4802      	ldr	r0, [pc, #8]	; (7678 <thread_name_get+0x1c>)
}
    766e:	4770      	bx	lr
		thread_name = "unknown";
    7670:	4801      	ldr	r0, [pc, #4]	; (7678 <thread_name_get+0x1c>)
    7672:	e7fa      	b.n	766a <thread_name_get+0xe>
    7674:	4800      	ldr	r0, [pc, #0]	; (7678 <thread_name_get+0x1c>)
	return thread_name;
    7676:	e7f8      	b.n	766a <thread_name_get+0xe>
    7678:	0000ba80 	.word	0x0000ba80

0000767c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    767c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7680:	b082      	sub	sp, #8
    7682:	4605      	mov	r5, r0
    7684:	460e      	mov	r6, r1
	__asm__ volatile(
    7686:	f04f 0320 	mov.w	r3, #32
    768a:	f3ef 8711 	mrs	r7, BASEPRI
    768e:	f383 8812 	msr	BASEPRI_MAX, r3
    7692:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    7696:	f000 ff83 	bl	85a0 <z_impl_z_current_get>
    769a:	4604      	mov	r4, r0
    769c:	4b29      	ldr	r3, [pc, #164]	; (7744 <z_fatal_error+0xc8>)
    769e:	4a2a      	ldr	r2, [pc, #168]	; (7748 <z_fatal_error+0xcc>)
    76a0:	1a9b      	subs	r3, r3, r2
    76a2:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    76a4:	f04f 0800 	mov.w	r8, #0
    76a8:	2201      	movs	r2, #1
    76aa:	f362 0802 	bfi	r8, r2, #0, #3
    76ae:	f36f 08c5 	bfc	r8, #3, #3
    76b2:	f363 188f 	bfi	r8, r3, #6, #10
    76b6:	4628      	mov	r0, r5
    76b8:	f7ff ffb0 	bl	761c <reason_to_str>
    76bc:	4602      	mov	r2, r0
    76be:	f8ad 8000 	strh.w	r8, [sp]
    76c2:	2300      	movs	r3, #0
    76c4:	4629      	mov	r1, r5
    76c6:	4821      	ldr	r0, [pc, #132]	; (774c <z_fatal_error+0xd0>)
    76c8:	f7fb ff9e 	bl	3608 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    76cc:	b11e      	cbz	r6, 76d6 <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    76ce:	69f3      	ldr	r3, [r6, #28]
    76d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
    76d4:	bb2b      	cbnz	r3, 7722 <z_fatal_error+0xa6>
    76d6:	4b1b      	ldr	r3, [pc, #108]	; (7744 <z_fatal_error+0xc8>)
    76d8:	4a1b      	ldr	r2, [pc, #108]	; (7748 <z_fatal_error+0xcc>)
    76da:	1a9b      	subs	r3, r3, r2
    76dc:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    76de:	f04f 0800 	mov.w	r8, #0
    76e2:	2201      	movs	r2, #1
    76e4:	f362 0802 	bfi	r8, r2, #0, #3
    76e8:	f36f 08c5 	bfc	r8, #3, #3
    76ec:	f363 188f 	bfi	r8, r3, #6, #10
    76f0:	4620      	mov	r0, r4
    76f2:	f7ff ffb3 	bl	765c <thread_name_get>
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
    76f6:	f7fb fe4d 	bl	3394 <z_log_strdup>
    76fa:	4602      	mov	r2, r0
    76fc:	4643      	mov	r3, r8
    76fe:	4621      	mov	r1, r4
    7700:	4813      	ldr	r0, [pc, #76]	; (7750 <z_fatal_error+0xd4>)
    7702:	f7fb fff5 	bl	36f0 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    7706:	4631      	mov	r1, r6
    7708:	4628      	mov	r0, r5
    770a:	f7fe fdb3 	bl	6274 <k_sys_fatal_error_handler>
	__asm__ volatile(
    770e:	f387 8811 	msr	BASEPRI, r7
    7712:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    7716:	4620      	mov	r0, r4
    7718:	f7fd fb56 	bl	4dc8 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    771c:	b002      	add	sp, #8
    771e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7722:	4b08      	ldr	r3, [pc, #32]	; (7744 <z_fatal_error+0xc8>)
    7724:	4a08      	ldr	r2, [pc, #32]	; (7748 <z_fatal_error+0xcc>)
    7726:	1a9b      	subs	r3, r3, r2
    7728:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
    772a:	f04f 0100 	mov.w	r1, #0
    772e:	2201      	movs	r2, #1
    7730:	f362 0102 	bfi	r1, r2, #0, #3
    7734:	f36f 01c5 	bfc	r1, #3, #3
    7738:	f363 118f 	bfi	r1, r3, #6, #10
    773c:	4805      	ldr	r0, [pc, #20]	; (7754 <z_fatal_error+0xd8>)
    773e:	f7fc f813 	bl	3768 <log_0>
    7742:	e7c8      	b.n	76d6 <z_fatal_error+0x5a>
    7744:	0000af98 	.word	0x0000af98
    7748:	0000af70 	.word	0x0000af70
    774c:	0000ba88 	.word	0x0000ba88
    7750:	0000bad4 	.word	0x0000bad4
    7754:	0000bab0 	.word	0x0000bab0

00007758 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    7758:	b5f0      	push	{r4, r5, r6, r7, lr}
    775a:	b089      	sub	sp, #36	; 0x24
    775c:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    775e:	4b15      	ldr	r3, [pc, #84]	; (77b4 <init_idle_thread+0x5c>)
    7760:	25b0      	movs	r5, #176	; 0xb0
    7762:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    7766:	4b14      	ldr	r3, [pc, #80]	; (77b8 <init_idle_thread+0x60>)
    7768:	f44f 76b0 	mov.w	r6, #352	; 0x160
    776c:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    7770:	af06      	add	r7, sp, #24
    7772:	4603      	mov	r3, r0
    7774:	4a11      	ldr	r2, [pc, #68]	; (77bc <init_idle_thread+0x64>)
    7776:	2108      	movs	r1, #8
    7778:	4638      	mov	r0, r7
    777a:	f001 fe84 	bl	9486 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    777e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7782:	480f      	ldr	r0, [pc, #60]	; (77c0 <init_idle_thread+0x68>)
    7784:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    7788:	9705      	str	r7, [sp, #20]
    778a:	2301      	movs	r3, #1
    778c:	9304      	str	r3, [sp, #16]
    778e:	230f      	movs	r3, #15
    7790:	9303      	str	r3, [sp, #12]
    7792:	2300      	movs	r3, #0
    7794:	9302      	str	r3, [sp, #8]
    7796:	9301      	str	r3, [sp, #4]
    7798:	9400      	str	r4, [sp, #0]
    779a:	4b0a      	ldr	r3, [pc, #40]	; (77c4 <init_idle_thread+0x6c>)
    779c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    77a0:	4631      	mov	r1, r6
    77a2:	4628      	mov	r0, r5
    77a4:	f000 f95a 	bl	7a5c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    77a8:	7b6b      	ldrb	r3, [r5, #13]
    77aa:	f023 0304 	bic.w	r3, r3, #4
    77ae:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    77b0:	b009      	add	sp, #36	; 0x24
    77b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77b4:	20000230 	.word	0x20000230
    77b8:	20001d80 	.word	0x20001d80
    77bc:	0000baec 	.word	0x0000baec
    77c0:	200009ec 	.word	0x200009ec
    77c4:	00007bc1 	.word	0x00007bc1

000077c8 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    77c8:	b570      	push	{r4, r5, r6, lr}
    77ca:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    77cc:	f000 fe1c 	bl	8408 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    77d0:	4d1b      	ldr	r5, [pc, #108]	; (7840 <prepare_multithreading+0x78>)
    77d2:	4b1c      	ldr	r3, [pc, #112]	; (7844 <prepare_multithreading+0x7c>)
    77d4:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    77d6:	4b1c      	ldr	r3, [pc, #112]	; (7848 <prepare_multithreading+0x80>)
    77d8:	9305      	str	r3, [sp, #20]
    77da:	2301      	movs	r3, #1
    77dc:	9304      	str	r3, [sp, #16]
    77de:	2400      	movs	r4, #0
    77e0:	9403      	str	r4, [sp, #12]
    77e2:	9402      	str	r4, [sp, #8]
    77e4:	9401      	str	r4, [sp, #4]
    77e6:	9400      	str	r4, [sp, #0]
    77e8:	4b18      	ldr	r3, [pc, #96]	; (784c <prepare_multithreading+0x84>)
    77ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    77ee:	4918      	ldr	r1, [pc, #96]	; (7850 <prepare_multithreading+0x88>)
    77f0:	4628      	mov	r0, r5
    77f2:	f000 f933 	bl	7a5c <z_setup_new_thread>
    77f6:	4606      	mov	r6, r0
    77f8:	7b6b      	ldrb	r3, [r5, #13]
    77fa:	f023 0304 	bic.w	r3, r3, #4
    77fe:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    7800:	4628      	mov	r0, r5
    7802:	f003 f8f8 	bl	a9f6 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    7806:	2c00      	cmp	r4, #0
    7808:	dd02      	ble.n	7810 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    780a:	4630      	mov	r0, r6
    780c:	b006      	add	sp, #24
    780e:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    7810:	4620      	mov	r0, r4
    7812:	f7ff ffa1 	bl	7758 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    7816:	4b0f      	ldr	r3, [pc, #60]	; (7854 <prepare_multithreading+0x8c>)
    7818:	22b0      	movs	r2, #176	; 0xb0
    781a:	fb02 3204 	mla	r2, r2, r4, r3
    781e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    7822:	4b08      	ldr	r3, [pc, #32]	; (7844 <prepare_multithreading+0x7c>)
    7824:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    7828:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    782a:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    782c:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    7830:	4a09      	ldr	r2, [pc, #36]	; (7858 <prepare_multithreading+0x90>)
    7832:	eb02 1241 	add.w	r2, r2, r1, lsl #5
    7836:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
    783a:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    783c:	3401      	adds	r4, #1
    783e:	e7e2      	b.n	7806 <prepare_multithreading+0x3e>
    7840:	200002e0 	.word	0x200002e0
    7844:	200009ec 	.word	0x200009ec
    7848:	0000baf8 	.word	0x0000baf8
    784c:	0000785d 	.word	0x0000785d
    7850:	20000d60 	.word	0x20000d60
    7854:	20000230 	.word	0x20000230
    7858:	20001ee0 	.word	0x20001ee0

0000785c <bg_thread_main>:
{
    785c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    785e:	4b0a      	ldr	r3, [pc, #40]	; (7888 <bg_thread_main+0x2c>)
    7860:	2201      	movs	r2, #1
    7862:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    7864:	2002      	movs	r0, #2
    7866:	f7ff fe79 	bl	755c <z_sys_init_run_level>
	boot_banner();
    786a:	f001 f90f 	bl	8a8c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    786e:	2003      	movs	r0, #3
    7870:	f7ff fe74 	bl	755c <z_sys_init_run_level>
	z_init_static_threads();
    7874:	f000 f956 	bl	7b24 <z_init_static_threads>
	main();
    7878:	f7fa fb7c 	bl	1f74 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    787c:	4a03      	ldr	r2, [pc, #12]	; (788c <bg_thread_main+0x30>)
    787e:	7b13      	ldrb	r3, [r2, #12]
    7880:	f023 0301 	bic.w	r3, r3, #1
    7884:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    7886:	bd08      	pop	{r3, pc}
    7888:	20000a2f 	.word	0x20000a2f
    788c:	200002e0 	.word	0x200002e0

00007890 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    7890:	b508      	push	{r3, lr}
    7892:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    7894:	4a01      	ldr	r2, [pc, #4]	; (789c <switch_to_main_thread+0xc>)
    7896:	4802      	ldr	r0, [pc, #8]	; (78a0 <switch_to_main_thread+0x10>)
    7898:	f7fc fe0a 	bl	44b0 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    789c:	0000785d 	.word	0x0000785d
    78a0:	200002e0 	.word	0x200002e0

000078a4 <z_bss_zero>:
{
    78a4:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    78a6:	4803      	ldr	r0, [pc, #12]	; (78b4 <z_bss_zero+0x10>)
__ssp_bos_icheck3(memset, void *, int)
    78a8:	4a03      	ldr	r2, [pc, #12]	; (78b8 <z_bss_zero+0x14>)
    78aa:	1a12      	subs	r2, r2, r0
    78ac:	2100      	movs	r1, #0
    78ae:	f003 fa49 	bl	ad44 <memset>
}
    78b2:	bd08      	pop	{r3, pc}
    78b4:	20000128 	.word	0x20000128
    78b8:	20000a30 	.word	0x20000a30

000078bc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    78bc:	b500      	push	{lr}
    78be:	b0ad      	sub	sp, #180	; 0xb4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    78c0:	f7fb fcc6 	bl	3250 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    78c4:	4b1c      	ldr	r3, [pc, #112]	; (7938 <z_cstart+0x7c>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    78c6:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    78ca:	4c1c      	ldr	r4, [pc, #112]	; (793c <z_cstart+0x80>)
    78cc:	6963      	ldr	r3, [r4, #20]
    78ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    78d2:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    78d4:	23e0      	movs	r3, #224	; 0xe0
    78d6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    78da:	2500      	movs	r5, #0
    78dc:	77e5      	strb	r5, [r4, #31]
    78de:	7625      	strb	r5, [r4, #24]
    78e0:	7665      	strb	r5, [r4, #25]
    78e2:	76a5      	strb	r5, [r4, #26]
    78e4:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    78e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    78ea:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    78ee:	6263      	str	r3, [r4, #36]	; 0x24
    78f0:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    78f4:	f7fd f9d8 	bl	4ca8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    78f8:	f7fc fc5e 	bl	41b8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    78fc:	f04f 33ff 	mov.w	r3, #4294967295
    7900:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    7902:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    7904:	f7fd fb3c 	bl	4f80 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    7908:	f7fd fa74 	bl	4df4 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    790c:	2401      	movs	r4, #1
    790e:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    7912:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    7916:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    7918:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    791a:	4b09      	ldr	r3, [pc, #36]	; (7940 <z_cstart+0x84>)
    791c:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    7920:	f7ff fe10 	bl	7544 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    7924:	4628      	mov	r0, r5
    7926:	f7ff fe19 	bl	755c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    792a:	4620      	mov	r0, r4
    792c:	f7ff fe16 	bl	755c <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    7930:	f7ff ff4a 	bl	77c8 <prepare_multithreading>
    7934:	f7ff ffac 	bl	7890 <switch_to_main_thread>
    7938:	20002700 	.word	0x20002700
    793c:	e000ed00 	.word	0xe000ed00
    7940:	200009ec 	.word	0x200009ec

00007944 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    7944:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7946:	4c06      	ldr	r4, [pc, #24]	; (7960 <init_mem_slab_module+0x1c>)
	int rc = 0;
    7948:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    794a:	4b06      	ldr	r3, [pc, #24]	; (7964 <init_mem_slab_module+0x20>)
    794c:	429c      	cmp	r4, r3
    794e:	d206      	bcs.n	795e <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    7950:	4620      	mov	r0, r4
    7952:	f002 ff47 	bl	a7e4 <create_free_list>
		if (rc < 0) {
    7956:	2800      	cmp	r0, #0
    7958:	db01      	blt.n	795e <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    795a:	341c      	adds	r4, #28
    795c:	e7f5      	b.n	794a <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
    795e:	bd10      	pop	{r4, pc}
    7960:	20000104 	.word	0x20000104
    7964:	20000104 	.word	0x20000104

00007968 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    7968:	b5f0      	push	{r4, r5, r6, r7, lr}
    796a:	b083      	sub	sp, #12
    796c:	460c      	mov	r4, r1
    796e:	461f      	mov	r7, r3
	__asm__ volatile(
    7970:	f04f 0320 	mov.w	r3, #32
    7974:	f3ef 8111 	mrs	r1, BASEPRI
    7978:	f383 8812 	msr	BASEPRI_MAX, r3
    797c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    7980:	6943      	ldr	r3, [r0, #20]
    7982:	b16b      	cbz	r3, 79a0 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
    7984:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    7986:	6943      	ldr	r3, [r0, #20]
    7988:	681b      	ldr	r3, [r3, #0]
    798a:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    798c:	6983      	ldr	r3, [r0, #24]
    798e:	3301      	adds	r3, #1
    7990:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    7992:	2000      	movs	r0, #0
	__asm__ volatile(
    7994:	f381 8811 	msr	BASEPRI, r1
    7998:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    799c:	b003      	add	sp, #12
    799e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    79a0:	4616      	mov	r6, r2
    79a2:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    79a6:	ea56 0307 	orrs.w	r3, r6, r7
    79aa:	d104      	bne.n	79b6 <k_mem_slab_alloc+0x4e>
		*mem = NULL;
    79ac:	2300      	movs	r3, #0
    79ae:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    79b0:	f06f 000b 	mvn.w	r0, #11
    79b4:	e7ee      	b.n	7994 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    79b6:	e9cd 6700 	strd	r6, r7, [sp]
    79ba:	4602      	mov	r2, r0
    79bc:	4628      	mov	r0, r5
    79be:	f000 fbf9 	bl	81b4 <z_pend_curr>
		if (result == 0) {
    79c2:	2800      	cmp	r0, #0
    79c4:	d1ea      	bne.n	799c <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
    79c6:	4b02      	ldr	r3, [pc, #8]	; (79d0 <k_mem_slab_alloc+0x68>)
    79c8:	689b      	ldr	r3, [r3, #8]
    79ca:	695b      	ldr	r3, [r3, #20]
    79cc:	6023      	str	r3, [r4, #0]
		return result;
    79ce:	e7e5      	b.n	799c <k_mem_slab_alloc+0x34>
    79d0:	200009ec 	.word	0x200009ec

000079d4 <z_thread_monitor_exit>:
	__asm__ volatile(
    79d4:	f04f 0320 	mov.w	r3, #32
    79d8:	f3ef 8111 	mrs	r1, BASEPRI
    79dc:	f383 8812 	msr	BASEPRI_MAX, r3
    79e0:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    79e4:	4b0a      	ldr	r3, [pc, #40]	; (7a10 <z_thread_monitor_exit+0x3c>)
    79e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    79e8:	4283      	cmp	r3, r0
    79ea:	d104      	bne.n	79f6 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    79ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    79ee:	4b08      	ldr	r3, [pc, #32]	; (7a10 <z_thread_monitor_exit+0x3c>)
    79f0:	629a      	str	r2, [r3, #40]	; 0x28
    79f2:	e007      	b.n	7a04 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    79f4:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    79f6:	b113      	cbz	r3, 79fe <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    79f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    79fa:	4282      	cmp	r2, r0
    79fc:	d1fa      	bne.n	79f4 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    79fe:	b10b      	cbz	r3, 7a04 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    7a00:	6f02      	ldr	r2, [r0, #112]	; 0x70
    7a02:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    7a04:	f381 8811 	msr	BASEPRI, r1
    7a08:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    7a0c:	4770      	bx	lr
    7a0e:	bf00      	nop
    7a10:	200009ec 	.word	0x200009ec

00007a14 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    7a14:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    7a16:	4604      	mov	r4, r0
    7a18:	b140      	cbz	r0, 7a2c <z_impl_k_thread_name_set+0x18>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    7a1a:	2220      	movs	r2, #32
    7a1c:	f104 0074 	add.w	r0, r4, #116	; 0x74
    7a20:	f003 f998 	bl	ad54 <strncpy>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    7a24:	2000      	movs	r0, #0
    7a26:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    7a2a:	bd10      	pop	{r4, pc}
		thread = _current;
    7a2c:	4b01      	ldr	r3, [pc, #4]	; (7a34 <z_impl_k_thread_name_set+0x20>)
    7a2e:	689c      	ldr	r4, [r3, #8]
    7a30:	e7f3      	b.n	7a1a <z_impl_k_thread_name_set+0x6>
    7a32:	bf00      	nop
    7a34:	200009ec 	.word	0x200009ec

00007a38 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    7a38:	b538      	push	{r3, r4, r5, lr}
    7a3a:	4614      	mov	r4, r2
    7a3c:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7a3e:	ea54 0305 	orrs.w	r3, r4, r5
    7a42:	d102      	bne.n	7a4a <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    7a44:	f002 ff39 	bl	a8ba <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    7a48:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7a4a:	462b      	mov	r3, r5
    7a4c:	4902      	ldr	r1, [pc, #8]	; (7a58 <schedule_new_thread+0x20>)
    7a4e:	3018      	adds	r0, #24
    7a50:	f000 fe36 	bl	86c0 <z_add_timeout>
    7a54:	e7f8      	b.n	7a48 <schedule_new_thread+0x10>
    7a56:	bf00      	nop
    7a58:	0000aa2f 	.word	0x0000aa2f

00007a5c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    7a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7a60:	b085      	sub	sp, #20
    7a62:	4604      	mov	r4, r0
    7a64:	460f      	mov	r7, r1
    7a66:	4615      	mov	r5, r2
    7a68:	461e      	mov	r6, r3
    7a6a:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    7a6e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    7a72:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    7a76:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    7a7a:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    7a7e:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    7a80:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    7a82:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7a84:	2204      	movs	r2, #4
    7a86:	9911      	ldr	r1, [sp, #68]	; 0x44
    7a88:	f002 ff1b 	bl	a8c2 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    7a8c:	462a      	mov	r2, r5
    7a8e:	4639      	mov	r1, r7
    7a90:	4620      	mov	r0, r4
    7a92:	f002 fef8 	bl	a886 <setup_thread_stack>
    7a96:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7a98:	f8cd 8008 	str.w	r8, [sp, #8]
    7a9c:	f8cd 9004 	str.w	r9, [sp, #4]
    7aa0:	f8cd a000 	str.w	sl, [sp]
    7aa4:	4633      	mov	r3, r6
    7aa6:	4602      	mov	r2, r0
    7aa8:	4639      	mov	r1, r7
    7aaa:	4620      	mov	r0, r4
    7aac:	f7fc fcb0 	bl	4410 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    7ab0:	2300      	movs	r3, #0
    7ab2:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    7ab4:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    7ab6:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    7aba:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    7abe:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    7ac2:	f04f 0320 	mov.w	r3, #32
    7ac6:	f3ef 8211 	mrs	r2, BASEPRI
    7aca:	f383 8812 	msr	BASEPRI_MAX, r3
    7ace:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    7ad2:	4b13      	ldr	r3, [pc, #76]	; (7b20 <z_setup_new_thread+0xc4>)
    7ad4:	6a99      	ldr	r1, [r3, #40]	; 0x28
    7ad6:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    7ad8:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    7ada:	f382 8811 	msr	BASEPRI, r2
    7ade:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    7ae2:	f1bb 0f00 	cmp.w	fp, #0
    7ae6:	d013      	beq.n	7b10 <z_setup_new_thread+0xb4>
    7ae8:	221f      	movs	r2, #31
    7aea:	4659      	mov	r1, fp
    7aec:	f104 0074 	add.w	r0, r4, #116	; 0x74
    7af0:	f003 f930 	bl	ad54 <strncpy>
		strncpy(new_thread->name, name,
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    7af4:	2300      	movs	r3, #0
    7af6:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    7afa:	4b09      	ldr	r3, [pc, #36]	; (7b20 <z_setup_new_thread+0xc4>)
    7afc:	689b      	ldr	r3, [r3, #8]
    7afe:	b15b      	cbz	r3, 7b18 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    7b00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    7b04:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    7b08:	4628      	mov	r0, r5
    7b0a:	b005      	add	sp, #20
    7b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    7b10:	2300      	movs	r3, #0
    7b12:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    7b16:	e7f0      	b.n	7afa <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    7b18:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    7b1c:	e7f4      	b.n	7b08 <z_setup_new_thread+0xac>
    7b1e:	bf00      	nop
    7b20:	200009ec 	.word	0x200009ec

00007b24 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    7b24:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    7b28:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    7b2a:	4c23      	ldr	r4, [pc, #140]	; (7bb8 <z_init_static_threads+0x94>)
    7b2c:	4b23      	ldr	r3, [pc, #140]	; (7bbc <z_init_static_threads+0x98>)
    7b2e:	429c      	cmp	r4, r3
    7b30:	d215      	bcs.n	7b5e <z_init_static_threads+0x3a>
		z_setup_new_thread(
    7b32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7b34:	9305      	str	r3, [sp, #20]
    7b36:	6a23      	ldr	r3, [r4, #32]
    7b38:	9304      	str	r3, [sp, #16]
    7b3a:	69e3      	ldr	r3, [r4, #28]
    7b3c:	9303      	str	r3, [sp, #12]
    7b3e:	69a3      	ldr	r3, [r4, #24]
    7b40:	9302      	str	r3, [sp, #8]
    7b42:	6963      	ldr	r3, [r4, #20]
    7b44:	9301      	str	r3, [sp, #4]
    7b46:	6923      	ldr	r3, [r4, #16]
    7b48:	9300      	str	r3, [sp, #0]
    7b4a:	68e3      	ldr	r3, [r4, #12]
    7b4c:	68a2      	ldr	r2, [r4, #8]
    7b4e:	6861      	ldr	r1, [r4, #4]
    7b50:	6820      	ldr	r0, [r4, #0]
    7b52:	f7ff ff83 	bl	7a5c <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    7b56:	6823      	ldr	r3, [r4, #0]
    7b58:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    7b5a:	3430      	adds	r4, #48	; 0x30
    7b5c:	e7e6      	b.n	7b2c <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    7b5e:	f000 f9e1 	bl	7f24 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    7b62:	4c15      	ldr	r4, [pc, #84]	; (7bb8 <z_init_static_threads+0x94>)
    7b64:	e01b      	b.n	7b9e <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
    7b66:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    7b68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    7b6c:	ea4f 79e3 	mov.w	r9, r3, asr #31
    7b70:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    7b74:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    7b78:	03d8      	lsls	r0, r3, #15
    7b7a:	f240 35e7 	movw	r5, #999	; 0x3e7
    7b7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7b82:	2300      	movs	r3, #0
    7b84:	1940      	adds	r0, r0, r5
    7b86:	f04f 0500 	mov.w	r5, #0
    7b8a:	eb45 0101 	adc.w	r1, r5, r1
    7b8e:	f7f9 fa47 	bl	1020 <__aeabi_uldivmod>
    7b92:	4602      	mov	r2, r0
    7b94:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    7b96:	4630      	mov	r0, r6
    7b98:	f7ff ff4e 	bl	7a38 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    7b9c:	3430      	adds	r4, #48	; 0x30
    7b9e:	4b07      	ldr	r3, [pc, #28]	; (7bbc <z_init_static_threads+0x98>)
    7ba0:	429c      	cmp	r4, r3
    7ba2:	d204      	bcs.n	7bae <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    7ba4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
    7baa:	d0f7      	beq.n	7b9c <z_init_static_threads+0x78>
    7bac:	e7db      	b.n	7b66 <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
    7bae:	f000 fbb7 	bl	8320 <k_sched_unlock>
}
    7bb2:	b006      	add	sp, #24
    7bb4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    7bb8:	20000104 	.word	0x20000104
    7bbc:	20000104 	.word	0x20000104

00007bc0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    7bc0:	b508      	push	{r3, lr}
    7bc2:	e001      	b.n	7bc8 <idle+0x8>
	arch_cpu_idle();
    7bc4:	f7fc fafe 	bl	41c4 <arch_cpu_idle>
	__asm__ volatile(
    7bc8:	f04f 0220 	mov.w	r2, #32
    7bcc:	f3ef 8311 	mrs	r3, BASEPRI
    7bd0:	f382 8812 	msr	BASEPRI_MAX, r2
    7bd4:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    7bd8:	f003 f833 	bl	ac42 <z_get_next_timeout_expiry>
    7bdc:	4b03      	ldr	r3, [pc, #12]	; (7bec <idle+0x2c>)
    7bde:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    7be0:	f7fc fa2c 	bl	403c <pm_system_suspend>
    7be4:	2800      	cmp	r0, #0
    7be6:	d1ef      	bne.n	7bc8 <idle+0x8>
    7be8:	e7ec      	b.n	7bc4 <idle+0x4>
    7bea:	bf00      	nop
    7bec:	200009ec 	.word	0x200009ec

00007bf0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    7bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7bf4:	b083      	sub	sp, #12
    7bf6:	4604      	mov	r4, r0
    7bf8:	461d      	mov	r5, r3
    7bfa:	f04f 0320 	mov.w	r3, #32
    7bfe:	f3ef 8711 	mrs	r7, BASEPRI
    7c02:	f383 8812 	msr	BASEPRI_MAX, r3
    7c06:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7c0a:	68c1      	ldr	r1, [r0, #12]
    7c0c:	b999      	cbnz	r1, 7c36 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    7c0e:	2900      	cmp	r1, #0
    7c10:	d14f      	bne.n	7cb2 <z_impl_k_mutex_lock+0xc2>
    7c12:	4b3a      	ldr	r3, [pc, #232]	; (7cfc <z_impl_k_mutex_lock+0x10c>)
    7c14:	689b      	ldr	r3, [r3, #8]
    7c16:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    7c1a:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    7c1c:	3101      	adds	r1, #1
    7c1e:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    7c20:	4b36      	ldr	r3, [pc, #216]	; (7cfc <z_impl_k_mutex_lock+0x10c>)
    7c22:	689b      	ldr	r3, [r3, #8]
    7c24:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    7c26:	f387 8811 	msr	BASEPRI, r7
    7c2a:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    7c2e:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    7c30:	b003      	add	sp, #12
    7c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7c36:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7c38:	6882      	ldr	r2, [r0, #8]
    7c3a:	4b30      	ldr	r3, [pc, #192]	; (7cfc <z_impl_k_mutex_lock+0x10c>)
    7c3c:	689b      	ldr	r3, [r3, #8]
    7c3e:	429a      	cmp	r2, r3
    7c40:	d0e5      	beq.n	7c0e <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    7c42:	ea55 0106 	orrs.w	r1, r5, r6
    7c46:	bf0c      	ite	eq
    7c48:	f04f 0801 	moveq.w	r8, #1
    7c4c:	f04f 0800 	movne.w	r8, #0
    7c50:	d031      	beq.n	7cb6 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    7c52:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    7c56:	4649      	mov	r1, r9
    7c58:	f993 000e 	ldrsb.w	r0, [r3, #14]
    7c5c:	f002 fe64 	bl	a928 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    7c60:	4581      	cmp	r9, r0
    7c62:	dc2f      	bgt.n	7cc4 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    7c64:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    7c68:	9600      	str	r6, [sp, #0]
    7c6a:	9501      	str	r5, [sp, #4]
    7c6c:	4622      	mov	r2, r4
    7c6e:	4639      	mov	r1, r7
    7c70:	4823      	ldr	r0, [pc, #140]	; (7d00 <z_impl_k_mutex_lock+0x110>)
    7c72:	f000 fa9f 	bl	81b4 <z_pend_curr>
	if (got_mutex == 0) {
    7c76:	2800      	cmp	r0, #0
    7c78:	d0da      	beq.n	7c30 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    7c7a:	f04f 0320 	mov.w	r3, #32
    7c7e:	f3ef 8511 	mrs	r5, BASEPRI
    7c82:	f383 8812 	msr	BASEPRI_MAX, r3
    7c86:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    7c8a:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7c8c:	42a3      	cmp	r3, r4
    7c8e:	d01f      	beq.n	7cd0 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7c90:	b1f3      	cbz	r3, 7cd0 <z_impl_k_mutex_lock+0xe0>
    7c92:	6921      	ldr	r1, [r4, #16]
    7c94:	f993 000e 	ldrsb.w	r0, [r3, #14]
    7c98:	f002 fe46 	bl	a928 <new_prio_for_inheritance>
    7c9c:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    7c9e:	4620      	mov	r0, r4
    7ca0:	f002 fe4d 	bl	a93e <adjust_owner_prio>
    7ca4:	b9b0      	cbnz	r0, 7cd4 <z_impl_k_mutex_lock+0xe4>
    7ca6:	f1b9 0f00 	cmp.w	r9, #0
    7caa:	d015      	beq.n	7cd8 <z_impl_k_mutex_lock+0xe8>
    7cac:	f04f 0801 	mov.w	r8, #1
    7cb0:	e012      	b.n	7cd8 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    7cb2:	6923      	ldr	r3, [r4, #16]
    7cb4:	e7b1      	b.n	7c1a <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    7cb6:	f387 8811 	msr	BASEPRI, r7
    7cba:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    7cbe:	f06f 000f 	mvn.w	r0, #15
    7cc2:	e7b5      	b.n	7c30 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    7cc4:	4601      	mov	r1, r0
    7cc6:	4620      	mov	r0, r4
    7cc8:	f002 fe39 	bl	a93e <adjust_owner_prio>
    7ccc:	4681      	mov	r9, r0
    7cce:	e7cb      	b.n	7c68 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7cd0:	6921      	ldr	r1, [r4, #16]
    7cd2:	e7e4      	b.n	7c9e <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    7cd4:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    7cd8:	f1b8 0f00 	cmp.w	r8, #0
    7cdc:	d106      	bne.n	7cec <z_impl_k_mutex_lock+0xfc>
    7cde:	f385 8811 	msr	BASEPRI, r5
    7ce2:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    7ce6:	f06f 000a 	mvn.w	r0, #10
    7cea:	e7a1      	b.n	7c30 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    7cec:	4629      	mov	r1, r5
    7cee:	4804      	ldr	r0, [pc, #16]	; (7d00 <z_impl_k_mutex_lock+0x110>)
    7cf0:	f000 f8fc 	bl	7eec <z_reschedule>
	return -EAGAIN;
    7cf4:	f06f 000a 	mvn.w	r0, #10
    7cf8:	e79a      	b.n	7c30 <z_impl_k_mutex_lock+0x40>
    7cfa:	bf00      	nop
    7cfc:	200009ec 	.word	0x200009ec
    7d00:	20000a18 	.word	0x20000a18

00007d04 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    7d04:	6882      	ldr	r2, [r0, #8]
    7d06:	2a00      	cmp	r2, #0
    7d08:	d035      	beq.n	7d76 <z_impl_k_mutex_unlock+0x72>
{
    7d0a:	b538      	push	{r3, r4, r5, lr}
    7d0c:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    7d0e:	4b1d      	ldr	r3, [pc, #116]	; (7d84 <z_impl_k_mutex_unlock+0x80>)
    7d10:	689b      	ldr	r3, [r3, #8]
    7d12:	429a      	cmp	r2, r3
    7d14:	d132      	bne.n	7d7c <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    7d16:	7bda      	ldrb	r2, [r3, #15]
    7d18:	3a01      	subs	r2, #1
    7d1a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    7d1c:	68c3      	ldr	r3, [r0, #12]
    7d1e:	2b01      	cmp	r3, #1
    7d20:	d905      	bls.n	7d2e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    7d22:	3b01      	subs	r3, #1
    7d24:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    7d26:	f000 fafb 	bl	8320 <k_sched_unlock>

	return 0;
    7d2a:	2000      	movs	r0, #0
}
    7d2c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    7d2e:	f04f 0320 	mov.w	r3, #32
    7d32:	f3ef 8511 	mrs	r5, BASEPRI
    7d36:	f383 8812 	msr	BASEPRI_MAX, r3
    7d3a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    7d3e:	6901      	ldr	r1, [r0, #16]
    7d40:	f002 fdfd 	bl	a93e <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    7d44:	4620      	mov	r0, r4
    7d46:	f002 ff18 	bl	ab7a <z_unpend_first_thread>
	mutex->owner = new_owner;
    7d4a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    7d4c:	b160      	cbz	r0, 7d68 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    7d4e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    7d52:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    7d54:	2300      	movs	r3, #0
    7d56:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    7d5a:	f002 fe4c 	bl	a9f6 <z_ready_thread>
		z_reschedule(&lock, key);
    7d5e:	4629      	mov	r1, r5
    7d60:	4809      	ldr	r0, [pc, #36]	; (7d88 <z_impl_k_mutex_unlock+0x84>)
    7d62:	f000 f8c3 	bl	7eec <z_reschedule>
    7d66:	e7de      	b.n	7d26 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    7d68:	2300      	movs	r3, #0
    7d6a:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    7d6c:	f385 8811 	msr	BASEPRI, r5
    7d70:	f3bf 8f6f 	isb	sy
    7d74:	e7d7      	b.n	7d26 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    7d76:	f06f 0015 	mvn.w	r0, #21
}
    7d7a:	4770      	bx	lr
		return -EPERM;
    7d7c:	f04f 30ff 	mov.w	r0, #4294967295
    7d80:	e7d4      	b.n	7d2c <z_impl_k_mutex_unlock+0x28>
    7d82:	bf00      	nop
    7d84:	200009ec 	.word	0x200009ec
    7d88:	20000a18 	.word	0x20000a18

00007d8c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    7d8c:	b538      	push	{r3, r4, r5, lr}
    7d8e:	4604      	mov	r4, r0
	__asm__ volatile(
    7d90:	f04f 0320 	mov.w	r3, #32
    7d94:	f3ef 8511 	mrs	r5, BASEPRI
    7d98:	f383 8812 	msr	BASEPRI_MAX, r3
    7d9c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    7da0:	f002 feeb 	bl	ab7a <z_unpend_first_thread>

	if (thread != NULL) {
    7da4:	b148      	cbz	r0, 7dba <z_impl_k_sem_give+0x2e>
    7da6:	2200      	movs	r2, #0
    7da8:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    7dac:	f002 fe23 	bl	a9f6 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    7db0:	4629      	mov	r1, r5
    7db2:	4807      	ldr	r0, [pc, #28]	; (7dd0 <z_impl_k_sem_give+0x44>)
    7db4:	f000 f89a 	bl	7eec <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    7db8:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7dba:	68a3      	ldr	r3, [r4, #8]
    7dbc:	68e2      	ldr	r2, [r4, #12]
    7dbe:	4293      	cmp	r3, r2
    7dc0:	d003      	beq.n	7dca <z_impl_k_sem_give+0x3e>
    7dc2:	2201      	movs	r2, #1
    7dc4:	4413      	add	r3, r2
    7dc6:	60a3      	str	r3, [r4, #8]
}
    7dc8:	e7f2      	b.n	7db0 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7dca:	2200      	movs	r2, #0
    7dcc:	e7fa      	b.n	7dc4 <z_impl_k_sem_give+0x38>
    7dce:	bf00      	nop
    7dd0:	20000a18 	.word	0x20000a18

00007dd4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    7dd4:	b530      	push	{r4, r5, lr}
    7dd6:	b083      	sub	sp, #12
    7dd8:	461d      	mov	r5, r3
    7dda:	f04f 0320 	mov.w	r3, #32
    7dde:	f3ef 8111 	mrs	r1, BASEPRI
    7de2:	f383 8812 	msr	BASEPRI_MAX, r3
    7de6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    7dea:	6883      	ldr	r3, [r0, #8]
    7dec:	b143      	cbz	r3, 7e00 <z_impl_k_sem_take+0x2c>
		sem->count--;
    7dee:	3b01      	subs	r3, #1
    7df0:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    7df2:	f381 8811 	msr	BASEPRI, r1
    7df6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    7dfa:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    7dfc:	b003      	add	sp, #12
    7dfe:	bd30      	pop	{r4, r5, pc}
    7e00:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7e02:	ea54 0305 	orrs.w	r3, r4, r5
    7e06:	d006      	beq.n	7e16 <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    7e08:	e9cd 4500 	strd	r4, r5, [sp]
    7e0c:	4602      	mov	r2, r0
    7e0e:	4805      	ldr	r0, [pc, #20]	; (7e24 <z_impl_k_sem_take+0x50>)
    7e10:	f000 f9d0 	bl	81b4 <z_pend_curr>
	return ret;
    7e14:	e7f2      	b.n	7dfc <z_impl_k_sem_take+0x28>
    7e16:	f381 8811 	msr	BASEPRI, r1
    7e1a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    7e1e:	f06f 000f 	mvn.w	r0, #15
    7e22:	e7eb      	b.n	7dfc <z_impl_k_sem_take+0x28>
    7e24:	20000a18 	.word	0x20000a18

00007e28 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    7e28:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
    7e2e:	bf08      	it	eq
    7e30:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    7e34:	d100      	bne.n	7e38 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
    7e36:	bd38      	pop	{r3, r4, r5, pc}
    7e38:	4902      	ldr	r1, [pc, #8]	; (7e44 <add_thread_timeout+0x1c>)
    7e3a:	3018      	adds	r0, #24
    7e3c:	f000 fc40 	bl	86c0 <z_add_timeout>
    7e40:	e7f9      	b.n	7e36 <add_thread_timeout+0xe>
    7e42:	bf00      	nop
    7e44:	0000aa2f 	.word	0x0000aa2f

00007e48 <z_reset_time_slice>:
{
    7e48:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    7e4a:	4b08      	ldr	r3, [pc, #32]	; (7e6c <z_reset_time_slice+0x24>)
    7e4c:	681b      	ldr	r3, [r3, #0]
    7e4e:	b903      	cbnz	r3, 7e52 <z_reset_time_slice+0xa>
}
    7e50:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    7e52:	f7fe fa05 	bl	6260 <sys_clock_elapsed>
    7e56:	4603      	mov	r3, r0
    7e58:	4a04      	ldr	r2, [pc, #16]	; (7e6c <z_reset_time_slice+0x24>)
    7e5a:	6810      	ldr	r0, [r2, #0]
    7e5c:	4403      	add	r3, r0
    7e5e:	4a04      	ldr	r2, [pc, #16]	; (7e70 <z_reset_time_slice+0x28>)
    7e60:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    7e62:	2100      	movs	r1, #0
    7e64:	f002 ff03 	bl	ac6e <z_set_timeout_expiry>
}
    7e68:	e7f2      	b.n	7e50 <z_reset_time_slice+0x8>
    7e6a:	bf00      	nop
    7e6c:	20000a20 	.word	0x20000a20
    7e70:	200009ec 	.word	0x200009ec

00007e74 <k_sched_time_slice_set>:
{
    7e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e78:	4606      	mov	r6, r0
    7e7a:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    7e7c:	2300      	movs	r3, #0
	__asm__ volatile(
    7e7e:	f04f 0220 	mov.w	r2, #32
    7e82:	f3ef 8711 	mrs	r7, BASEPRI
    7e86:	f382 8812 	msr	BASEPRI_MAX, r2
    7e8a:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    7e8e:	e009      	b.n	7ea4 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
    7e90:	4b13      	ldr	r3, [pc, #76]	; (7ee0 <k_sched_time_slice_set+0x6c>)
    7e92:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
    7e96:	f7ff ffd7 	bl	7e48 <z_reset_time_slice>
	__asm__ volatile(
    7e9a:	f387 8811 	msr	BASEPRI, r7
    7e9e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7ea2:	2301      	movs	r3, #1
    7ea4:	b9cb      	cbnz	r3, 7eda <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
    7ea6:	2300      	movs	r3, #0
    7ea8:	4a0e      	ldr	r2, [pc, #56]	; (7ee4 <k_sched_time_slice_set+0x70>)
    7eaa:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    7eac:	0c75      	lsrs	r5, r6, #17
    7eae:	03f4      	lsls	r4, r6, #15
    7eb0:	f240 30e7 	movw	r0, #999	; 0x3e7
    7eb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7eb8:	2300      	movs	r3, #0
    7eba:	1820      	adds	r0, r4, r0
    7ebc:	f04f 0100 	mov.w	r1, #0
    7ec0:	eb45 0101 	adc.w	r1, r5, r1
    7ec4:	f7f9 f8ac 	bl	1020 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    7ec8:	4b07      	ldr	r3, [pc, #28]	; (7ee8 <k_sched_time_slice_set+0x74>)
    7eca:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    7ecc:	2e00      	cmp	r6, #0
    7ece:	dddf      	ble.n	7e90 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
    7ed0:	2802      	cmp	r0, #2
    7ed2:	bfb8      	it	lt
    7ed4:	2002      	movlt	r0, #2
    7ed6:	6018      	str	r0, [r3, #0]
    7ed8:	e7da      	b.n	7e90 <k_sched_time_slice_set+0x1c>
}
    7eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ede:	bf00      	nop
    7ee0:	20000a1c 	.word	0x20000a1c
    7ee4:	200009ec 	.word	0x200009ec
    7ee8:	20000a20 	.word	0x20000a20

00007eec <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    7eec:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    7eee:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7ef0:	b921      	cbnz	r1, 7efc <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7ef2:	f3ef 8305 	mrs	r3, IPSR
    7ef6:	b913      	cbnz	r3, 7efe <z_reschedule+0x12>
    7ef8:	2101      	movs	r1, #1
    7efa:	e000      	b.n	7efe <z_reschedule+0x12>
    7efc:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    7efe:	f011 0f01 	tst.w	r1, #1
    7f02:	d007      	beq.n	7f14 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    7f04:	4b06      	ldr	r3, [pc, #24]	; (7f20 <z_reschedule+0x34>)
    7f06:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    7f08:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    7f0a:	429a      	cmp	r2, r3
    7f0c:	d002      	beq.n	7f14 <z_reschedule+0x28>
	ret = arch_swap(key);
    7f0e:	f7fc fa27 	bl	4360 <arch_swap>
		z_swap(lock, key);
    7f12:	e003      	b.n	7f1c <z_reschedule+0x30>
    7f14:	f380 8811 	msr	BASEPRI, r0
    7f18:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    7f1c:	bd08      	pop	{r3, pc}
    7f1e:	bf00      	nop
    7f20:	200009ec 	.word	0x200009ec

00007f24 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    7f24:	2300      	movs	r3, #0
	__asm__ volatile(
    7f26:	f04f 0220 	mov.w	r2, #32
    7f2a:	f3ef 8111 	mrs	r1, BASEPRI
    7f2e:	f382 8812 	msr	BASEPRI_MAX, r2
    7f32:	f3bf 8f6f 	isb	sy
    7f36:	b953      	cbnz	r3, 7f4e <k_sched_lock+0x2a>
    7f38:	4b05      	ldr	r3, [pc, #20]	; (7f50 <k_sched_lock+0x2c>)
    7f3a:	689a      	ldr	r2, [r3, #8]
    7f3c:	7bd3      	ldrb	r3, [r2, #15]
    7f3e:	3b01      	subs	r3, #1
    7f40:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    7f42:	f381 8811 	msr	BASEPRI, r1
    7f46:	f3bf 8f6f 	isb	sy
    7f4a:	2301      	movs	r3, #1
    7f4c:	e7f3      	b.n	7f36 <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    7f4e:	4770      	bx	lr
    7f50:	200009ec 	.word	0x200009ec

00007f54 <update_cache>:
{
    7f54:	b538      	push	{r3, r4, r5, lr}
    7f56:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    7f58:	480f      	ldr	r0, [pc, #60]	; (7f98 <update_cache+0x44>)
    7f5a:	f002 fd45 	bl	a9e8 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    7f5e:	4605      	mov	r5, r0
    7f60:	b170      	cbz	r0, 7f80 <update_cache+0x2c>
	if (preempt_ok != 0) {
    7f62:	b984      	cbnz	r4, 7f86 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    7f64:	4b0d      	ldr	r3, [pc, #52]	; (7f9c <update_cache+0x48>)
    7f66:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    7f68:	7b5a      	ldrb	r2, [r3, #13]
    7f6a:	f012 0f1f 	tst.w	r2, #31
    7f6e:	d10a      	bne.n	7f86 <update_cache+0x32>
	return node->next != NULL;
    7f70:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    7f72:	b942      	cbnz	r2, 7f86 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    7f74:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    7f76:	2a7f      	cmp	r2, #127	; 0x7f
    7f78:	d905      	bls.n	7f86 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    7f7a:	4a08      	ldr	r2, [pc, #32]	; (7f9c <update_cache+0x48>)
    7f7c:	61d3      	str	r3, [r2, #28]
    7f7e:	e00a      	b.n	7f96 <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    7f80:	4b06      	ldr	r3, [pc, #24]	; (7f9c <update_cache+0x48>)
    7f82:	68dd      	ldr	r5, [r3, #12]
    7f84:	e7ed      	b.n	7f62 <update_cache+0xe>
		if (thread != _current) {
    7f86:	4b05      	ldr	r3, [pc, #20]	; (7f9c <update_cache+0x48>)
    7f88:	689b      	ldr	r3, [r3, #8]
    7f8a:	42ab      	cmp	r3, r5
    7f8c:	d001      	beq.n	7f92 <update_cache+0x3e>
			z_reset_time_slice();
    7f8e:	f7ff ff5b 	bl	7e48 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    7f92:	4b02      	ldr	r3, [pc, #8]	; (7f9c <update_cache+0x48>)
    7f94:	61dd      	str	r5, [r3, #28]
}
    7f96:	bd38      	pop	{r3, r4, r5, pc}
    7f98:	20000a0c 	.word	0x20000a0c
    7f9c:	200009ec 	.word	0x200009ec

00007fa0 <move_thread_to_end_of_prio_q>:
{
    7fa0:	b538      	push	{r3, r4, r5, lr}
    7fa2:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    7fa4:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    7fa6:	f990 300d 	ldrsb.w	r3, [r0, #13]
    7faa:	2b00      	cmp	r3, #0
    7fac:	db28      	blt.n	8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
	thread->base.thread_state |= _THREAD_QUEUED;
    7fae:	7b6b      	ldrb	r3, [r5, #13]
    7fb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7fb4:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    7fb6:	4b1a      	ldr	r3, [pc, #104]	; (8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>)
    7fb8:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7fbc:	429c      	cmp	r4, r3
    7fbe:	d02d      	beq.n	801c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7fc0:	b16c      	cbz	r4, 7fde <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7fc2:	4621      	mov	r1, r4
    7fc4:	4628      	mov	r0, r5
    7fc6:	f002 fcc9 	bl	a95c <z_sched_prio_cmp>
    7fca:	2800      	cmp	r0, #0
    7fcc:	dc20      	bgt.n	8010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7fce:	b134      	cbz	r4, 7fde <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    7fd0:	4b13      	ldr	r3, [pc, #76]	; (8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>)
    7fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7fd4:	429c      	cmp	r4, r3
    7fd6:	d002      	beq.n	7fde <move_thread_to_end_of_prio_q+0x3e>
    7fd8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7fda:	2c00      	cmp	r4, #0
    7fdc:	d1f0      	bne.n	7fc0 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    7fde:	4b10      	ldr	r3, [pc, #64]	; (8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>)
    7fe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
    7fe2:	f103 0120 	add.w	r1, r3, #32
    7fe6:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    7fe8:	606a      	str	r2, [r5, #4]

	tail->next = node;
    7fea:	6015      	str	r5, [r2, #0]
	list->tail = node;
    7fec:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    7fee:	4b0c      	ldr	r3, [pc, #48]	; (8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>)
    7ff0:	6898      	ldr	r0, [r3, #8]
    7ff2:	42a8      	cmp	r0, r5
    7ff4:	bf14      	ite	ne
    7ff6:	2000      	movne	r0, #0
    7ff8:	2001      	moveq	r0, #1
    7ffa:	f7ff ffab 	bl	7f54 <update_cache>
}
    7ffe:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8000:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8004:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8006:	4601      	mov	r1, r0
    8008:	4806      	ldr	r0, [pc, #24]	; (8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>)
    800a:	f002 fce5 	bl	a9d8 <z_priq_dumb_remove>
}
    800e:	e7ce      	b.n	7fae <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    8010:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    8012:	606b      	str	r3, [r5, #4]
	node->next = successor;
    8014:	602c      	str	r4, [r5, #0]
	prev->next = node;
    8016:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    8018:	6065      	str	r5, [r4, #4]
}
    801a:	e7e8      	b.n	7fee <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    801c:	2400      	movs	r4, #0
    801e:	e7cf      	b.n	7fc0 <move_thread_to_end_of_prio_q+0x20>
    8020:	200009ec 	.word	0x200009ec
    8024:	20000a0c 	.word	0x20000a0c

00008028 <z_time_slice>:
{
    8028:	b510      	push	{r4, lr}
	__asm__ volatile(
    802a:	f04f 0320 	mov.w	r3, #32
    802e:	f3ef 8411 	mrs	r4, BASEPRI
    8032:	f383 8812 	msr	BASEPRI_MAX, r3
    8036:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    803a:	4b1c      	ldr	r3, [pc, #112]	; (80ac <z_time_slice+0x84>)
    803c:	689b      	ldr	r3, [r3, #8]
    803e:	4a1c      	ldr	r2, [pc, #112]	; (80b0 <z_time_slice+0x88>)
    8040:	6812      	ldr	r2, [r2, #0]
    8042:	4293      	cmp	r3, r2
    8044:	d01d      	beq.n	8082 <z_time_slice+0x5a>
	pending_current = NULL;
    8046:	4a1a      	ldr	r2, [pc, #104]	; (80b0 <z_time_slice+0x88>)
    8048:	2100      	movs	r1, #0
    804a:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    804c:	4a19      	ldr	r2, [pc, #100]	; (80b4 <z_time_slice+0x8c>)
    804e:	6812      	ldr	r2, [r2, #0]
    8050:	b322      	cbz	r2, 809c <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    8052:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    8054:	2a7f      	cmp	r2, #127	; 0x7f
    8056:	d821      	bhi.n	809c <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
    8058:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    805a:	f012 0f1f 	tst.w	r2, #31
    805e:	d11d      	bne.n	809c <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    8060:	f993 100e 	ldrsb.w	r1, [r3, #14]
    8064:	4a14      	ldr	r2, [pc, #80]	; (80b8 <z_time_slice+0x90>)
    8066:	6812      	ldr	r2, [r2, #0]
    8068:	4291      	cmp	r1, r2
    806a:	db17      	blt.n	809c <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
    806c:	4a13      	ldr	r2, [pc, #76]	; (80bc <z_time_slice+0x94>)
    806e:	4293      	cmp	r3, r2
    8070:	d014      	beq.n	809c <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
    8072:	4a0e      	ldr	r2, [pc, #56]	; (80ac <z_time_slice+0x84>)
    8074:	6912      	ldr	r2, [r2, #16]
    8076:	4282      	cmp	r2, r0
    8078:	dd0a      	ble.n	8090 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
    807a:	1a10      	subs	r0, r2, r0
    807c:	4b0b      	ldr	r3, [pc, #44]	; (80ac <z_time_slice+0x84>)
    807e:	6118      	str	r0, [r3, #16]
    8080:	e00f      	b.n	80a2 <z_time_slice+0x7a>
		z_reset_time_slice();
    8082:	f7ff fee1 	bl	7e48 <z_reset_time_slice>
	__asm__ volatile(
    8086:	f384 8811 	msr	BASEPRI, r4
    808a:	f3bf 8f6f 	isb	sy
		return;
    808e:	e00c      	b.n	80aa <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
    8090:	4618      	mov	r0, r3
    8092:	f7ff ff85 	bl	7fa0 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    8096:	f7ff fed7 	bl	7e48 <z_reset_time_slice>
    809a:	e002      	b.n	80a2 <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
    809c:	4b03      	ldr	r3, [pc, #12]	; (80ac <z_time_slice+0x84>)
    809e:	2200      	movs	r2, #0
    80a0:	611a      	str	r2, [r3, #16]
    80a2:	f384 8811 	msr	BASEPRI, r4
    80a6:	f3bf 8f6f 	isb	sy
}
    80aa:	bd10      	pop	{r4, pc}
    80ac:	200009ec 	.word	0x200009ec
    80b0:	20000a18 	.word	0x20000a18
    80b4:	20000a20 	.word	0x20000a20
    80b8:	20000a1c 	.word	0x20000a1c
    80bc:	20000230 	.word	0x20000230

000080c0 <ready_thread>:
{
    80c0:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    80c2:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    80c4:	f990 200d 	ldrsb.w	r2, [r0, #13]
    80c8:	2a00      	cmp	r2, #0
    80ca:	db2d      	blt.n	8128 <ready_thread+0x68>
    80cc:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    80ce:	f013 0f1f 	tst.w	r3, #31
    80d2:	d105      	bne.n	80e0 <ready_thread+0x20>
	return node->next != NULL;
    80d4:	6982      	ldr	r2, [r0, #24]
    80d6:	b10a      	cbz	r2, 80dc <ready_thread+0x1c>
    80d8:	2200      	movs	r2, #0
    80da:	e002      	b.n	80e2 <ready_thread+0x22>
    80dc:	2201      	movs	r2, #1
    80de:	e000      	b.n	80e2 <ready_thread+0x22>
    80e0:	2200      	movs	r2, #0
    80e2:	b30a      	cbz	r2, 8128 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    80e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    80e8:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    80ea:	4b14      	ldr	r3, [pc, #80]	; (813c <ready_thread+0x7c>)
    80ec:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    80f0:	429d      	cmp	r5, r3
    80f2:	d020      	beq.n	8136 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    80f4:	b16d      	cbz	r5, 8112 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    80f6:	4629      	mov	r1, r5
    80f8:	4620      	mov	r0, r4
    80fa:	f002 fc2f 	bl	a95c <z_sched_prio_cmp>
    80fe:	2800      	cmp	r0, #0
    8100:	dc13      	bgt.n	812a <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8102:	b135      	cbz	r5, 8112 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    8104:	4b0d      	ldr	r3, [pc, #52]	; (813c <ready_thread+0x7c>)
    8106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8108:	429d      	cmp	r5, r3
    810a:	d002      	beq.n	8112 <ready_thread+0x52>
    810c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    810e:	2d00      	cmp	r5, #0
    8110:	d1f0      	bne.n	80f4 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    8112:	4b0a      	ldr	r3, [pc, #40]	; (813c <ready_thread+0x7c>)
    8114:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    8116:	f103 0120 	add.w	r1, r3, #32
    811a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    811c:	6062      	str	r2, [r4, #4]
	tail->next = node;
    811e:	6014      	str	r4, [r2, #0]
	list->tail = node;
    8120:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    8122:	2000      	movs	r0, #0
    8124:	f7ff ff16 	bl	7f54 <update_cache>
}
    8128:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    812a:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    812c:	6063      	str	r3, [r4, #4]
	node->next = successor;
    812e:	6025      	str	r5, [r4, #0]
	prev->next = node;
    8130:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    8132:	606c      	str	r4, [r5, #4]
}
    8134:	e7f5      	b.n	8122 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8136:	2500      	movs	r5, #0
    8138:	e7dc      	b.n	80f4 <ready_thread+0x34>
    813a:	bf00      	nop
    813c:	200009ec 	.word	0x200009ec

00008140 <z_sched_start>:
{
    8140:	b510      	push	{r4, lr}
	__asm__ volatile(
    8142:	f04f 0320 	mov.w	r3, #32
    8146:	f3ef 8411 	mrs	r4, BASEPRI
    814a:	f383 8812 	msr	BASEPRI_MAX, r3
    814e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    8152:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    8154:	f013 0f04 	tst.w	r3, #4
    8158:	d104      	bne.n	8164 <z_sched_start+0x24>
	__asm__ volatile(
    815a:	f384 8811 	msr	BASEPRI, r4
    815e:	f3bf 8f6f 	isb	sy
}
    8162:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8164:	f023 0304 	bic.w	r3, r3, #4
    8168:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    816a:	f7ff ffa9 	bl	80c0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    816e:	4621      	mov	r1, r4
    8170:	4801      	ldr	r0, [pc, #4]	; (8178 <z_sched_start+0x38>)
    8172:	f7ff febb 	bl	7eec <z_reschedule>
    8176:	e7f4      	b.n	8162 <z_sched_start+0x22>
    8178:	20000a1c 	.word	0x20000a1c

0000817c <unready_thread>:
{
    817c:	b510      	push	{r4, lr}
    817e:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    8180:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    8182:	f990 300d 	ldrsb.w	r3, [r0, #13]
    8186:	2b00      	cmp	r3, #0
    8188:	db08      	blt.n	819c <unready_thread+0x20>
	update_cache(thread == _current);
    818a:	4b08      	ldr	r3, [pc, #32]	; (81ac <unready_thread+0x30>)
    818c:	6898      	ldr	r0, [r3, #8]
    818e:	42a0      	cmp	r0, r4
    8190:	bf14      	ite	ne
    8192:	2000      	movne	r0, #0
    8194:	2001      	moveq	r0, #1
    8196:	f7ff fedd 	bl	7f54 <update_cache>
}
    819a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    819c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    81a0:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    81a2:	4601      	mov	r1, r0
    81a4:	4802      	ldr	r0, [pc, #8]	; (81b0 <unready_thread+0x34>)
    81a6:	f002 fc17 	bl	a9d8 <z_priq_dumb_remove>
}
    81aa:	e7ee      	b.n	818a <unready_thread+0xe>
    81ac:	200009ec 	.word	0x200009ec
    81b0:	20000a0c 	.word	0x20000a0c

000081b4 <z_pend_curr>:
{
    81b4:	b510      	push	{r4, lr}
    81b6:	460c      	mov	r4, r1
    81b8:	4611      	mov	r1, r2
	pending_current = _current;
    81ba:	4b06      	ldr	r3, [pc, #24]	; (81d4 <z_pend_curr+0x20>)
    81bc:	6898      	ldr	r0, [r3, #8]
    81be:	4b06      	ldr	r3, [pc, #24]	; (81d8 <z_pend_curr+0x24>)
    81c0:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    81c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    81c6:	f002 fc90 	bl	aaea <pend>
    81ca:	4620      	mov	r0, r4
    81cc:	f7fc f8c8 	bl	4360 <arch_swap>
}
    81d0:	bd10      	pop	{r4, pc}
    81d2:	bf00      	nop
    81d4:	200009ec 	.word	0x200009ec
    81d8:	20000a18 	.word	0x20000a18

000081dc <z_set_prio>:
{
    81dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    81e0:	4604      	mov	r4, r0
    81e2:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    81e4:	2300      	movs	r3, #0
	__asm__ volatile(
    81e6:	f04f 0220 	mov.w	r2, #32
    81ea:	f3ef 8611 	mrs	r6, BASEPRI
    81ee:	f382 8812 	msr	BASEPRI_MAX, r2
    81f2:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    81f6:	4698      	mov	r8, r3
    81f8:	e008      	b.n	820c <z_set_prio+0x30>
		if (need_sched) {
    81fa:	f012 0801 	ands.w	r8, r2, #1
    81fe:	d111      	bne.n	8224 <z_set_prio+0x48>
			thread->base.prio = prio;
    8200:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
    8202:	f386 8811 	msr	BASEPRI, r6
    8206:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    820a:	2301      	movs	r3, #1
    820c:	461a      	mov	r2, r3
    820e:	2b00      	cmp	r3, #0
    8210:	d13d      	bne.n	828e <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
    8212:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8214:	f013 0f1f 	tst.w	r3, #31
    8218:	d1ef      	bne.n	81fa <z_set_prio+0x1e>
	return node->next != NULL;
    821a:	69a1      	ldr	r1, [r4, #24]
    821c:	2900      	cmp	r1, #0
    821e:	d1ec      	bne.n	81fa <z_set_prio+0x1e>
    8220:	2201      	movs	r2, #1
    8222:	e7ea      	b.n	81fa <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8228:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    822a:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8298 <z_set_prio+0xbc>
    822e:	4621      	mov	r1, r4
    8230:	4648      	mov	r0, r9
    8232:	f002 fbd1 	bl	a9d8 <z_priq_dumb_remove>
				thread->base.prio = prio;
    8236:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    8238:	7b63      	ldrb	r3, [r4, #13]
    823a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    823e:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    8240:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8244:	454d      	cmp	r5, r9
    8246:	d020      	beq.n	828a <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8248:	b16d      	cbz	r5, 8266 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    824a:	4629      	mov	r1, r5
    824c:	4620      	mov	r0, r4
    824e:	f002 fb85 	bl	a95c <z_sched_prio_cmp>
    8252:	2800      	cmp	r0, #0
    8254:	dc13      	bgt.n	827e <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8256:	b135      	cbz	r5, 8266 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
    8258:	4b0e      	ldr	r3, [pc, #56]	; (8294 <z_set_prio+0xb8>)
    825a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    825c:	429d      	cmp	r5, r3
    825e:	d002      	beq.n	8266 <z_set_prio+0x8a>
    8260:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8262:	2d00      	cmp	r5, #0
    8264:	d1f0      	bne.n	8248 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
    8266:	4b0b      	ldr	r3, [pc, #44]	; (8294 <z_set_prio+0xb8>)
    8268:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    826a:	f103 0120 	add.w	r1, r3, #32
    826e:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    8270:	6062      	str	r2, [r4, #4]
	tail->next = node;
    8272:	6014      	str	r4, [r2, #0]
	list->tail = node;
    8274:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    8276:	2001      	movs	r0, #1
    8278:	f7ff fe6c 	bl	7f54 <update_cache>
    827c:	e7c1      	b.n	8202 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
    827e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    8280:	6063      	str	r3, [r4, #4]
	node->next = successor;
    8282:	6025      	str	r5, [r4, #0]
	prev->next = node;
    8284:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    8286:	606c      	str	r4, [r5, #4]
}
    8288:	e7f5      	b.n	8276 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    828a:	2500      	movs	r5, #0
    828c:	e7dc      	b.n	8248 <z_set_prio+0x6c>
}
    828e:	4640      	mov	r0, r8
    8290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8294:	200009ec 	.word	0x200009ec
    8298:	20000a0c 	.word	0x20000a0c

0000829c <z_impl_k_thread_suspend>:
{
    829c:	b538      	push	{r3, r4, r5, lr}
    829e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    82a0:	3018      	adds	r0, #24
    82a2:	f002 fcb0 	bl	ac06 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    82a6:	2300      	movs	r3, #0
	__asm__ volatile(
    82a8:	f04f 0220 	mov.w	r2, #32
    82ac:	f3ef 8511 	mrs	r5, BASEPRI
    82b0:	f382 8812 	msr	BASEPRI_MAX, r2
    82b4:	f3bf 8f6f 	isb	sy
    82b8:	e010      	b.n	82dc <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    82ba:	7b63      	ldrb	r3, [r4, #13]
    82bc:	f043 0310 	orr.w	r3, r3, #16
    82c0:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    82c2:	4b15      	ldr	r3, [pc, #84]	; (8318 <z_impl_k_thread_suspend+0x7c>)
    82c4:	6898      	ldr	r0, [r3, #8]
    82c6:	42a0      	cmp	r0, r4
    82c8:	bf14      	ite	ne
    82ca:	2000      	movne	r0, #0
    82cc:	2001      	moveq	r0, #1
    82ce:	f7ff fe41 	bl	7f54 <update_cache>
	__asm__ volatile(
    82d2:	f385 8811 	msr	BASEPRI, r5
    82d6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    82da:	2301      	movs	r3, #1
    82dc:	b963      	cbnz	r3, 82f8 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    82de:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    82e0:	f994 300d 	ldrsb.w	r3, [r4, #13]
    82e4:	2b00      	cmp	r3, #0
    82e6:	dae8      	bge.n	82ba <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    82e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    82ec:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    82ee:	4621      	mov	r1, r4
    82f0:	480a      	ldr	r0, [pc, #40]	; (831c <z_impl_k_thread_suspend+0x80>)
    82f2:	f002 fb71 	bl	a9d8 <z_priq_dumb_remove>
}
    82f6:	e7e0      	b.n	82ba <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    82f8:	4b07      	ldr	r3, [pc, #28]	; (8318 <z_impl_k_thread_suspend+0x7c>)
    82fa:	689b      	ldr	r3, [r3, #8]
    82fc:	42a3      	cmp	r3, r4
    82fe:	d000      	beq.n	8302 <z_impl_k_thread_suspend+0x66>
}
    8300:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    8302:	f04f 0320 	mov.w	r3, #32
    8306:	f3ef 8011 	mrs	r0, BASEPRI
    830a:	f383 8812 	msr	BASEPRI_MAX, r3
    830e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8312:	f002 fb4c 	bl	a9ae <z_reschedule_irqlock>
    8316:	e7f3      	b.n	8300 <z_impl_k_thread_suspend+0x64>
    8318:	200009ec 	.word	0x200009ec
    831c:	20000a0c 	.word	0x20000a0c

00008320 <k_sched_unlock>:

void k_sched_unlock(void)
{
    8320:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    8322:	2300      	movs	r3, #0
    8324:	f04f 0220 	mov.w	r2, #32
    8328:	f3ef 8411 	mrs	r4, BASEPRI
    832c:	f382 8812 	msr	BASEPRI_MAX, r2
    8330:	f3bf 8f6f 	isb	sy
    8334:	b96b      	cbnz	r3, 8352 <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    8336:	4b0c      	ldr	r3, [pc, #48]	; (8368 <k_sched_unlock+0x48>)
    8338:	689a      	ldr	r2, [r3, #8]
    833a:	7bd3      	ldrb	r3, [r2, #15]
    833c:	3301      	adds	r3, #1
    833e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    8340:	2000      	movs	r0, #0
    8342:	f7ff fe07 	bl	7f54 <update_cache>
	__asm__ volatile(
    8346:	f384 8811 	msr	BASEPRI, r4
    834a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    834e:	2301      	movs	r3, #1
    8350:	e7f0      	b.n	8334 <k_sched_unlock+0x14>
	__asm__ volatile(
    8352:	f04f 0320 	mov.w	r3, #32
    8356:	f3ef 8011 	mrs	r0, BASEPRI
    835a:	f383 8812 	msr	BASEPRI_MAX, r3
    835e:	f3bf 8f6f 	isb	sy
    8362:	f002 fb24 	bl	a9ae <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    8366:	bd10      	pop	{r4, pc}
    8368:	200009ec 	.word	0x200009ec

0000836c <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    836e:	7b43      	ldrb	r3, [r0, #13]
    8370:	f013 0f08 	tst.w	r3, #8
    8374:	d145      	bne.n	8402 <end_thread+0x96>
    8376:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    8378:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
    837c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    8380:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    8382:	f013 0f80 	tst.w	r3, #128	; 0x80
    8386:	d114      	bne.n	83b2 <end_thread+0x46>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    8388:	68ab      	ldr	r3, [r5, #8]
    838a:	b15b      	cbz	r3, 83a4 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    838c:	4628      	mov	r0, r5
    838e:	f002 fae3 	bl	a958 <pended_on_thread>
    8392:	4629      	mov	r1, r5
    8394:	f002 fb20 	bl	a9d8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8398:	7b6b      	ldrb	r3, [r5, #13]
    839a:	f023 0302 	bic.w	r3, r3, #2
    839e:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    83a0:	2300      	movs	r3, #0
    83a2:	60ab      	str	r3, [r5, #8]
    83a4:	f105 0018 	add.w	r0, r5, #24
    83a8:	f002 fc2d 	bl	ac06 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    83ac:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    83b0:	e01c      	b.n	83ec <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    83b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    83b6:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    83b8:	4601      	mov	r1, r0
    83ba:	4812      	ldr	r0, [pc, #72]	; (8404 <end_thread+0x98>)
    83bc:	f002 fb0c 	bl	a9d8 <z_priq_dumb_remove>
}
    83c0:	e7e2      	b.n	8388 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    83c2:	4620      	mov	r0, r4
    83c4:	f002 fac8 	bl	a958 <pended_on_thread>
    83c8:	4621      	mov	r1, r4
    83ca:	f002 fb05 	bl	a9d8 <z_priq_dumb_remove>
    83ce:	7b63      	ldrb	r3, [r4, #13]
    83d0:	f023 0302 	bic.w	r3, r3, #2
    83d4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    83d6:	2600      	movs	r6, #0
    83d8:	60a6      	str	r6, [r4, #8]
    83da:	f104 0018 	add.w	r0, r4, #24
    83de:	f002 fc12 	bl	ac06 <z_abort_timeout>
    83e2:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    83e6:	4620      	mov	r0, r4
    83e8:	f7ff fe6a 	bl	80c0 <ready_thread>
	return list->head == list;
    83ec:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    83ee:	42bc      	cmp	r4, r7
    83f0:	d001      	beq.n	83f6 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    83f2:	2c00      	cmp	r4, #0
    83f4:	d1e5      	bne.n	83c2 <end_thread+0x56>
		update_cache(1);
    83f6:	2001      	movs	r0, #1
    83f8:	f7ff fdac 	bl	7f54 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    83fc:	4628      	mov	r0, r5
    83fe:	f7ff fae9 	bl	79d4 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    8402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8404:	20000a0c 	.word	0x20000a0c

00008408 <z_sched_init>:
{
    8408:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    840a:	4804      	ldr	r0, [pc, #16]	; (841c <z_sched_init+0x14>)
    840c:	f002 fbe0 	bl	abd0 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    8410:	2100      	movs	r1, #0
    8412:	4608      	mov	r0, r1
    8414:	f7ff fd2e 	bl	7e74 <k_sched_time_slice_set>
}
    8418:	bd08      	pop	{r3, pc}
    841a:	bf00      	nop
    841c:	20000a08 	.word	0x20000a08

00008420 <z_impl_k_yield>:
{
    8420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8422:	f04f 0320 	mov.w	r3, #32
    8426:	f3ef 8611 	mrs	r6, BASEPRI
    842a:	f383 8812 	msr	BASEPRI_MAX, r3
    842e:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    8432:	4c1c      	ldr	r4, [pc, #112]	; (84a4 <z_impl_k_yield+0x84>)
    8434:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8436:	7b4b      	ldrb	r3, [r1, #13]
    8438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    843c:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    843e:	f104 0720 	add.w	r7, r4, #32
    8442:	4638      	mov	r0, r7
    8444:	f002 fac8 	bl	a9d8 <z_priq_dumb_remove>
	queue_thread(_current);
    8448:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    844a:	7b6b      	ldrb	r3, [r5, #13]
    844c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8450:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    8452:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8454:	42bc      	cmp	r4, r7
    8456:	d023      	beq.n	84a0 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8458:	b16c      	cbz	r4, 8476 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    845a:	4621      	mov	r1, r4
    845c:	4628      	mov	r0, r5
    845e:	f002 fa7d 	bl	a95c <z_sched_prio_cmp>
    8462:	2800      	cmp	r0, #0
    8464:	dc16      	bgt.n	8494 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8466:	b134      	cbz	r4, 8476 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    8468:	4b0e      	ldr	r3, [pc, #56]	; (84a4 <z_impl_k_yield+0x84>)
    846a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    846c:	429c      	cmp	r4, r3
    846e:	d002      	beq.n	8476 <z_impl_k_yield+0x56>
    8470:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8472:	2c00      	cmp	r4, #0
    8474:	d1f0      	bne.n	8458 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    8476:	4b0b      	ldr	r3, [pc, #44]	; (84a4 <z_impl_k_yield+0x84>)
    8478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    847a:	f103 0120 	add.w	r1, r3, #32
    847e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    8480:	606a      	str	r2, [r5, #4]
	tail->next = node;
    8482:	6015      	str	r5, [r2, #0]
	list->tail = node;
    8484:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    8486:	2001      	movs	r0, #1
    8488:	f7ff fd64 	bl	7f54 <update_cache>
    848c:	4630      	mov	r0, r6
    848e:	f7fb ff67 	bl	4360 <arch_swap>
}
    8492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    8494:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    8496:	606b      	str	r3, [r5, #4]
	node->next = successor;
    8498:	602c      	str	r4, [r5, #0]
	prev->next = node;
    849a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    849c:	6065      	str	r5, [r4, #4]
}
    849e:	e7f2      	b.n	8486 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    84a0:	2400      	movs	r4, #0
    84a2:	e7d9      	b.n	8458 <z_impl_k_yield+0x38>
    84a4:	200009ec 	.word	0x200009ec

000084a8 <z_tick_sleep>:
{
    84a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    84ac:	4604      	mov	r4, r0
    84ae:	460d      	mov	r5, r1
	if (ticks == 0) {
    84b0:	ea54 0105 	orrs.w	r1, r4, r5
    84b4:	d037      	beq.n	8526 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    84b6:	f06f 0101 	mvn.w	r1, #1
    84ba:	1a0a      	subs	r2, r1, r0
    84bc:	f04f 31ff 	mov.w	r1, #4294967295
    84c0:	eb61 0305 	sbc.w	r3, r1, r5
    84c4:	2a01      	cmp	r2, #1
    84c6:	f173 0300 	sbcs.w	r3, r3, #0
    84ca:	db30      	blt.n	852e <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    84cc:	f06f 0601 	mvn.w	r6, #1
    84d0:	1a36      	subs	r6, r6, r0
    84d2:	f04f 0320 	mov.w	r3, #32
    84d6:	f3ef 8811 	mrs	r8, BASEPRI
    84da:	f383 8812 	msr	BASEPRI_MAX, r3
    84de:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    84e2:	4f16      	ldr	r7, [pc, #88]	; (853c <z_tick_sleep+0x94>)
    84e4:	68b8      	ldr	r0, [r7, #8]
    84e6:	4b16      	ldr	r3, [pc, #88]	; (8540 <z_tick_sleep+0x98>)
    84e8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    84ea:	f7ff fe47 	bl	817c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    84ee:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    84f0:	4622      	mov	r2, r4
    84f2:	462b      	mov	r3, r5
    84f4:	4913      	ldr	r1, [pc, #76]	; (8544 <z_tick_sleep+0x9c>)
    84f6:	3018      	adds	r0, #24
    84f8:	f000 f8e2 	bl	86c0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    84fc:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    84fe:	7b53      	ldrb	r3, [r2, #13]
    8500:	f043 0310 	orr.w	r3, r3, #16
    8504:	7353      	strb	r3, [r2, #13]
    8506:	4640      	mov	r0, r8
    8508:	f7fb ff2a 	bl	4360 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    850c:	2500      	movs	r5, #0
    850e:	f002 fbd9 	bl	acc4 <sys_clock_tick_get_32>
    8512:	1a34      	subs	r4, r6, r0
    8514:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
    8518:	2c01      	cmp	r4, #1
    851a:	f175 0300 	sbcs.w	r3, r5, #0
    851e:	da0a      	bge.n	8536 <z_tick_sleep+0x8e>
	return 0;
    8520:	2000      	movs	r0, #0
}
    8522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    8526:	f7ff ff7b 	bl	8420 <z_impl_k_yield>
		return 0;
    852a:	2000      	movs	r0, #0
    852c:	e7f9      	b.n	8522 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    852e:	f002 fbc9 	bl	acc4 <sys_clock_tick_get_32>
    8532:	1906      	adds	r6, r0, r4
    8534:	e7cd      	b.n	84d2 <z_tick_sleep+0x2a>
		return ticks;
    8536:	4620      	mov	r0, r4
    8538:	e7f3      	b.n	8522 <z_tick_sleep+0x7a>
    853a:	bf00      	nop
    853c:	200009ec 	.word	0x200009ec
    8540:	20000a18 	.word	0x20000a18
    8544:	0000aa2f 	.word	0x0000aa2f

00008548 <z_impl_k_sleep>:
{
    8548:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    854a:	f1b1 3fff 	cmp.w	r1, #4294967295
    854e:	bf08      	it	eq
    8550:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    8554:	d01a      	beq.n	858c <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    8556:	f7ff ffa7 	bl	84a8 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    855a:	4604      	mov	r4, r0
    855c:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
    855e:	0169      	lsls	r1, r5, #5
    8560:	0143      	lsls	r3, r0, #5
    8562:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    8566:	1a18      	subs	r0, r3, r0
    8568:	eb62 0305 	sbc.w	r3, r2, r5
    856c:	009a      	lsls	r2, r3, #2
    856e:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    8572:	0081      	lsls	r1, r0, #2
    8574:	4613      	mov	r3, r2
    8576:	1908      	adds	r0, r1, r4
    8578:	eb45 0303 	adc.w	r3, r5, r3
    857c:	00da      	lsls	r2, r3, #3
    857e:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    8582:	00c1      	lsls	r1, r0, #3
    8584:	0bc8      	lsrs	r0, r1, #15
    8586:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    858a:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
    858c:	4b03      	ldr	r3, [pc, #12]	; (859c <z_impl_k_sleep+0x54>)
    858e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    8590:	f7ff fe84 	bl	829c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    8594:	f04f 30ff 	mov.w	r0, #4294967295
    8598:	e7f7      	b.n	858a <z_impl_k_sleep+0x42>
    859a:	bf00      	nop
    859c:	200009ec 	.word	0x200009ec

000085a0 <z_impl_z_current_get>:
}
    85a0:	4b01      	ldr	r3, [pc, #4]	; (85a8 <z_impl_z_current_get+0x8>)
    85a2:	6898      	ldr	r0, [r3, #8]
    85a4:	4770      	bx	lr
    85a6:	bf00      	nop
    85a8:	200009ec 	.word	0x200009ec

000085ac <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    85ac:	b538      	push	{r3, r4, r5, lr}
    85ae:	f04f 0320 	mov.w	r3, #32
    85b2:	f3ef 8511 	mrs	r5, BASEPRI
    85b6:	f383 8812 	msr	BASEPRI_MAX, r3
    85ba:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    85be:	7b43      	ldrb	r3, [r0, #13]
    85c0:	f013 0f08 	tst.w	r3, #8
    85c4:	d004      	beq.n	85d0 <z_thread_abort+0x24>
	__asm__ volatile(
    85c6:	f385 8811 	msr	BASEPRI, r5
    85ca:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    85ce:	bd38      	pop	{r3, r4, r5, pc}
    85d0:	4604      	mov	r4, r0
	end_thread(thread);
    85d2:	f7ff fecb 	bl	836c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    85d6:	4b08      	ldr	r3, [pc, #32]	; (85f8 <z_thread_abort+0x4c>)
    85d8:	689b      	ldr	r3, [r3, #8]
    85da:	42a3      	cmp	r3, r4
    85dc:	d004      	beq.n	85e8 <z_thread_abort+0x3c>
    85de:	f385 8811 	msr	BASEPRI, r5
    85e2:	f3bf 8f6f 	isb	sy
    85e6:	e7f2      	b.n	85ce <z_thread_abort+0x22>
    85e8:	f3ef 8305 	mrs	r3, IPSR
    85ec:	2b00      	cmp	r3, #0
    85ee:	d1f6      	bne.n	85de <z_thread_abort+0x32>
    85f0:	4628      	mov	r0, r5
    85f2:	f7fb feb5 	bl	4360 <arch_swap>
	return ret;
    85f6:	e7f2      	b.n	85de <z_thread_abort+0x32>
    85f8:	200009ec 	.word	0x200009ec

000085fc <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    85fc:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    85fe:	4806      	ldr	r0, [pc, #24]	; (8618 <z_data_copy+0x1c>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    8600:	4a06      	ldr	r2, [pc, #24]	; (861c <z_data_copy+0x20>)
    8602:	1a12      	subs	r2, r2, r0
    8604:	4906      	ldr	r1, [pc, #24]	; (8620 <z_data_copy+0x24>)
    8606:	f002 fb8f 	bl	ad28 <memcpy>
    860a:	4a06      	ldr	r2, [pc, #24]	; (8624 <z_data_copy+0x28>)
    860c:	4906      	ldr	r1, [pc, #24]	; (8628 <z_data_copy+0x2c>)
    860e:	4807      	ldr	r0, [pc, #28]	; (862c <z_data_copy+0x30>)
    8610:	f002 fb8a 	bl	ad28 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    8614:	bd08      	pop	{r3, pc}
    8616:	bf00      	nop
    8618:	20000000 	.word	0x20000000
    861c:	20000128 	.word	0x20000128
    8620:	0000bc4c 	.word	0x0000bc4c
    8624:	00000000 	.word	0x00000000
    8628:	0000bc4c 	.word	0x0000bc4c
    862c:	20000000 	.word	0x20000000

00008630 <first>:
	return list->head == list;
    8630:	4b03      	ldr	r3, [pc, #12]	; (8640 <first+0x10>)
    8632:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8634:	4298      	cmp	r0, r3
    8636:	d000      	beq.n	863a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    8638:	4770      	bx	lr
    863a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    863c:	e7fc      	b.n	8638 <first+0x8>
    863e:	bf00      	nop
    8640:	200000ec 	.word	0x200000ec

00008644 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8644:	b130      	cbz	r0, 8654 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    8646:	4a04      	ldr	r2, [pc, #16]	; (8658 <next+0x14>)
    8648:	6852      	ldr	r2, [r2, #4]
    864a:	4290      	cmp	r0, r2
    864c:	d001      	beq.n	8652 <next+0xe>
    864e:	6800      	ldr	r0, [r0, #0]
    8650:	4770      	bx	lr
    8652:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    8654:	4770      	bx	lr
    8656:	bf00      	nop
    8658:	200000ec 	.word	0x200000ec

0000865c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    865c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    865e:	4b04      	ldr	r3, [pc, #16]	; (8670 <elapsed+0x14>)
    8660:	681b      	ldr	r3, [r3, #0]
    8662:	b10b      	cbz	r3, 8668 <elapsed+0xc>
    8664:	2000      	movs	r0, #0
}
    8666:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    8668:	f7fd fdfa 	bl	6260 <sys_clock_elapsed>
    866c:	e7fb      	b.n	8666 <elapsed+0xa>
    866e:	bf00      	nop
    8670:	20000a24 	.word	0x20000a24

00008674 <next_timeout>:

static int32_t next_timeout(void)
{
    8674:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    8676:	f7ff ffdb 	bl	8630 <first>
    867a:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    867c:	f7ff ffee 	bl	865c <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    8680:	b18c      	cbz	r4, 86a6 <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    8682:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    8686:	1a12      	subs	r2, r2, r0
    8688:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    868c:	2a01      	cmp	r2, #1
    868e:	f173 0100 	sbcs.w	r1, r3, #0
    8692:	db11      	blt.n	86b8 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    8694:	4610      	mov	r0, r2
    8696:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    869a:	f173 0300 	sbcs.w	r3, r3, #0
    869e:	db04      	blt.n	86aa <next_timeout+0x36>
    86a0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    86a4:	e001      	b.n	86aa <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
    86a6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    86aa:	4b04      	ldr	r3, [pc, #16]	; (86bc <next_timeout+0x48>)
    86ac:	691b      	ldr	r3, [r3, #16]
    86ae:	b113      	cbz	r3, 86b6 <next_timeout+0x42>
    86b0:	4283      	cmp	r3, r0
    86b2:	da00      	bge.n	86b6 <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
    86b4:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    86b6:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    86b8:	2000      	movs	r0, #0
    86ba:	e7f6      	b.n	86aa <next_timeout+0x36>
    86bc:	200009ec 	.word	0x200009ec

000086c0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    86c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    86c4:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    86c6:	f1b3 3fff 	cmp.w	r3, #4294967295
    86ca:	bf08      	it	eq
    86cc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    86d0:	f000 8096 	beq.w	8800 <z_add_timeout+0x140>
    86d4:	4682      	mov	sl, r0
    86d6:	4614      	mov	r4, r2
    86d8:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    86da:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    86dc:	2300      	movs	r3, #0
	__asm__ volatile(
    86de:	f04f 0220 	mov.w	r2, #32
    86e2:	f3ef 8b11 	mrs	fp, BASEPRI
    86e6:	f382 8812 	msr	BASEPRI_MAX, r2
    86ea:	f3bf 8f6f 	isb	sy
    86ee:	e02e      	b.n	874e <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
    86f0:	2201      	movs	r2, #1
    86f2:	2300      	movs	r3, #0
    86f4:	e04b      	b.n	878e <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    86f6:	f7ff ffb1 	bl	865c <elapsed>
    86fa:	1822      	adds	r2, r4, r0
    86fc:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
    8700:	3201      	adds	r2, #1
    8702:	f143 0300 	adc.w	r3, r3, #0
    8706:	f8ca 2010 	str.w	r2, [sl, #16]
    870a:	f8ca 3014 	str.w	r3, [sl, #20]
    870e:	e042      	b.n	8796 <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    8710:	9b00      	ldr	r3, [sp, #0]
    8712:	1ac2      	subs	r2, r0, r3
    8714:	9b01      	ldr	r3, [sp, #4]
    8716:	eb61 0303 	sbc.w	r3, r1, r3
    871a:	f8cc 2010 	str.w	r2, [ip, #16]
    871e:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
    8722:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
    8726:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
    872a:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
    872e:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
    8732:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    8736:	f1bc 0f00 	cmp.w	ip, #0
    873a:	d049      	beq.n	87d0 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    873c:	f7ff ff78 	bl	8630 <first>
    8740:	4582      	cmp	sl, r0
    8742:	d050      	beq.n	87e6 <z_add_timeout+0x126>
	__asm__ volatile(
    8744:	f38b 8811 	msr	BASEPRI, fp
    8748:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    874c:	2301      	movs	r3, #1
    874e:	2b00      	cmp	r3, #0
    8750:	d156      	bne.n	8800 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    8752:	f06f 0301 	mvn.w	r3, #1
    8756:	ebb3 0804 	subs.w	r8, r3, r4
    875a:	f04f 30ff 	mov.w	r0, #4294967295
    875e:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    8762:	f1b8 0f00 	cmp.w	r8, #0
    8766:	f179 0300 	sbcs.w	r3, r9, #0
    876a:	dbc4      	blt.n	86f6 <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    876c:	4a26      	ldr	r2, [pc, #152]	; (8808 <z_add_timeout+0x148>)
    876e:	6813      	ldr	r3, [r2, #0]
    8770:	6852      	ldr	r2, [r2, #4]
    8772:	18e3      	adds	r3, r4, r3
    8774:	eb45 0202 	adc.w	r2, r5, r2
    8778:	f06f 0101 	mvn.w	r1, #1
    877c:	1ace      	subs	r6, r1, r3
    877e:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
    8782:	4632      	mov	r2, r6
    8784:	463b      	mov	r3, r7
    8786:	2e01      	cmp	r6, #1
    8788:	f177 0100 	sbcs.w	r1, r7, #0
    878c:	dbb0      	blt.n	86f0 <z_add_timeout+0x30>
    878e:	f8ca 2010 	str.w	r2, [sl, #16]
    8792:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    8796:	f7ff ff4b 	bl	8630 <first>
    879a:	4684      	mov	ip, r0
    879c:	f1bc 0f00 	cmp.w	ip, #0
    87a0:	d0c9      	beq.n	8736 <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
    87a2:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
    87a6:	e9da 2304 	ldrd	r2, r3, [sl, #16]
    87aa:	e9cd 2300 	strd	r2, r3, [sp]
    87ae:	4282      	cmp	r2, r0
    87b0:	418b      	sbcs	r3, r1
    87b2:	dbad      	blt.n	8710 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
    87b4:	9b00      	ldr	r3, [sp, #0]
    87b6:	1a1a      	subs	r2, r3, r0
    87b8:	9b01      	ldr	r3, [sp, #4]
    87ba:	eb63 0301 	sbc.w	r3, r3, r1
    87be:	f8ca 2010 	str.w	r2, [sl, #16]
    87c2:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    87c6:	4660      	mov	r0, ip
    87c8:	f7ff ff3c 	bl	8644 <next>
    87cc:	4684      	mov	ip, r0
    87ce:	e7e5      	b.n	879c <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
    87d0:	4b0e      	ldr	r3, [pc, #56]	; (880c <z_add_timeout+0x14c>)
    87d2:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    87d4:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
    87d8:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
    87dc:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    87e0:	f8c3 a004 	str.w	sl, [r3, #4]
}
    87e4:	e7aa      	b.n	873c <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    87e6:	f7ff ff45 	bl	8674 <next_timeout>

			if (next_time == 0 ||
    87ea:	4603      	mov	r3, r0
    87ec:	b118      	cbz	r0, 87f6 <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
    87ee:	4a08      	ldr	r2, [pc, #32]	; (8810 <z_add_timeout+0x150>)
    87f0:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    87f2:	4282      	cmp	r2, r0
    87f4:	d0a6      	beq.n	8744 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
    87f6:	2100      	movs	r1, #0
    87f8:	4618      	mov	r0, r3
    87fa:	f7fd fcfd 	bl	61f8 <sys_clock_set_timeout>
    87fe:	e7a1      	b.n	8744 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    8800:	b003      	add	sp, #12
    8802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8806:	bf00      	nop
    8808:	20000390 	.word	0x20000390
    880c:	200000ec 	.word	0x200000ec
    8810:	200009ec 	.word	0x200009ec

00008814 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    8814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8816:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    8818:	f7ff fc06 	bl	8028 <z_time_slice>
	__asm__ volatile(
    881c:	f04f 0320 	mov.w	r3, #32
    8820:	f3ef 8511 	mrs	r5, BASEPRI
    8824:	f383 8812 	msr	BASEPRI_MAX, r3
    8828:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    882c:	4b28      	ldr	r3, [pc, #160]	; (88d0 <sys_clock_announce+0xbc>)
    882e:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    8830:	f7ff fefe 	bl	8630 <first>
    8834:	4604      	mov	r4, r0
    8836:	b350      	cbz	r0, 888e <sys_clock_announce+0x7a>
    8838:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    883c:	4b24      	ldr	r3, [pc, #144]	; (88d0 <sys_clock_announce+0xbc>)
    883e:	681b      	ldr	r3, [r3, #0]
    8840:	17d9      	asrs	r1, r3, #31
    8842:	42b3      	cmp	r3, r6
    8844:	eb71 0207 	sbcs.w	r2, r1, r7
    8848:	db21      	blt.n	888e <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    884a:	4a22      	ldr	r2, [pc, #136]	; (88d4 <sys_clock_announce+0xc0>)
    884c:	e9d2 0100 	ldrd	r0, r1, [r2]
    8850:	1980      	adds	r0, r0, r6
    8852:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
    8856:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
    885a:	1b9b      	subs	r3, r3, r6
    885c:	4a1c      	ldr	r2, [pc, #112]	; (88d0 <sys_clock_announce+0xbc>)
    885e:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    8860:	2200      	movs	r2, #0
    8862:	2300      	movs	r3, #0
    8864:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    8868:	4620      	mov	r0, r4
    886a:	f002 f9b5 	bl	abd8 <remove_timeout>
	__asm__ volatile(
    886e:	f385 8811 	msr	BASEPRI, r5
    8872:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    8876:	68a3      	ldr	r3, [r4, #8]
    8878:	4620      	mov	r0, r4
    887a:	4798      	blx	r3
	__asm__ volatile(
    887c:	f04f 0320 	mov.w	r3, #32
    8880:	f3ef 8511 	mrs	r5, BASEPRI
    8884:	f383 8812 	msr	BASEPRI_MAX, r3
    8888:	f3bf 8f6f 	isb	sy
    888c:	e7d0      	b.n	8830 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    888e:	b144      	cbz	r4, 88a2 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    8890:	4b0f      	ldr	r3, [pc, #60]	; (88d0 <sys_clock_announce+0xbc>)
    8892:	6819      	ldr	r1, [r3, #0]
    8894:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    8898:	1a52      	subs	r2, r2, r1
    889a:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
    889e:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
    88a2:	480c      	ldr	r0, [pc, #48]	; (88d4 <sys_clock_announce+0xc0>)
    88a4:	490a      	ldr	r1, [pc, #40]	; (88d0 <sys_clock_announce+0xbc>)
    88a6:	680c      	ldr	r4, [r1, #0]
    88a8:	e9d0 2300 	ldrd	r2, r3, [r0]
    88ac:	1912      	adds	r2, r2, r4
    88ae:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
    88b2:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
    88b6:	2400      	movs	r4, #0
    88b8:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
    88ba:	f7ff fedb 	bl	8674 <next_timeout>
    88be:	4621      	mov	r1, r4
    88c0:	f7fd fc9a 	bl	61f8 <sys_clock_set_timeout>
	__asm__ volatile(
    88c4:	f385 8811 	msr	BASEPRI, r5
    88c8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    88cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    88ce:	bf00      	nop
    88d0:	20000a24 	.word	0x20000a24
    88d4:	20000390 	.word	0x20000390

000088d8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    88d8:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    88da:	2100      	movs	r1, #0
	__asm__ volatile(
    88dc:	f04f 0320 	mov.w	r3, #32
    88e0:	f3ef 8411 	mrs	r4, BASEPRI
    88e4:	f383 8812 	msr	BASEPRI_MAX, r3
    88e8:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    88ec:	2200      	movs	r2, #0
    88ee:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
    88f0:	b969      	cbnz	r1, 890e <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
    88f2:	f7fd fcb5 	bl	6260 <sys_clock_elapsed>
    88f6:	4b07      	ldr	r3, [pc, #28]	; (8914 <sys_clock_tick_get+0x3c>)
    88f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    88fc:	1812      	adds	r2, r2, r0
    88fe:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    8902:	f384 8811 	msr	BASEPRI, r4
    8906:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    890a:	2101      	movs	r1, #1
    890c:	e7f0      	b.n	88f0 <sys_clock_tick_get+0x18>
	}
	return t;
}
    890e:	4610      	mov	r0, r2
    8910:	4619      	mov	r1, r3
    8912:	bd10      	pop	{r4, pc}
    8914:	20000390 	.word	0x20000390

00008918 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    8918:	b570      	push	{r4, r5, r6, lr}
    891a:	4604      	mov	r4, r0
	__asm__ volatile(
    891c:	f04f 0320 	mov.w	r3, #32
    8920:	f3ef 8611 	mrs	r6, BASEPRI
    8924:	f383 8812 	msr	BASEPRI_MAX, r3
    8928:	f3bf 8f6f 	isb	sy
    892c:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    892e:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    8932:	ea52 0103 	orrs.w	r1, r2, r3
    8936:	d005      	beq.n	8944 <z_timer_expiration_handler+0x2c>
    8938:	f1b3 3fff 	cmp.w	r3, #4294967295
    893c:	bf08      	it	eq
    893e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    8942:	d127      	bne.n	8994 <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    8944:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8946:	3301      	adds	r3, #1
    8948:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    894a:	6a23      	ldr	r3, [r4, #32]
    894c:	b173      	cbz	r3, 896c <z_timer_expiration_handler+0x54>
	__asm__ volatile(
    894e:	f386 8811 	msr	BASEPRI, r6
    8952:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    8956:	6a23      	ldr	r3, [r4, #32]
    8958:	4620      	mov	r0, r4
    895a:	4798      	blx	r3
	__asm__ volatile(
    895c:	f04f 0320 	mov.w	r3, #32
    8960:	f3ef 8511 	mrs	r5, BASEPRI
    8964:	f383 8812 	msr	BASEPRI_MAX, r3
    8968:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    896c:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    8970:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8972:	42a3      	cmp	r3, r4
    8974:	d012      	beq.n	899c <z_timer_expiration_handler+0x84>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    8976:	b18c      	cbz	r4, 899c <z_timer_expiration_handler+0x84>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    8978:	4620      	mov	r0, r4
    897a:	f001 fff9 	bl	a970 <z_unpend_thread_no_timeout>
    897e:	2300      	movs	r3, #0
    8980:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__asm__ volatile(
    8984:	f385 8811 	msr	BASEPRI, r5
    8988:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    898c:	4620      	mov	r0, r4
    898e:	f002 f832 	bl	a9f6 <z_ready_thread>
}
    8992:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    8994:	4904      	ldr	r1, [pc, #16]	; (89a8 <z_timer_expiration_handler+0x90>)
    8996:	f7ff fe93 	bl	86c0 <z_add_timeout>
    899a:	e7d3      	b.n	8944 <z_timer_expiration_handler+0x2c>
    899c:	f385 8811 	msr	BASEPRI, r5
    89a0:	f3bf 8f6f 	isb	sy
		return;
    89a4:	e7f5      	b.n	8992 <z_timer_expiration_handler+0x7a>
    89a6:	bf00      	nop
    89a8:	00008919 	.word	0x00008919

000089ac <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    89ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    89b0:	b087      	sub	sp, #28
    89b2:	4614      	mov	r4, r2
    89b4:	461d      	mov	r5, r3
    89b6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    89ba:	f1b3 3fff 	cmp.w	r3, #4294967295
    89be:	bf08      	it	eq
    89c0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    89c4:	d035      	beq.n	8a32 <z_impl_k_timer_start+0x86>
    89c6:	4606      	mov	r6, r0
    89c8:	4613      	mov	r3, r2
    89ca:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    89cc:	f1b9 3fff 	cmp.w	r9, #4294967295
    89d0:	bf08      	it	eq
    89d2:	f1b8 3fff 	cmpeq.w	r8, #4294967295
    89d6:	d012      	beq.n	89fe <z_impl_k_timer_start+0x52>
    89d8:	ea58 0109 	orrs.w	r1, r8, r9
    89dc:	d00f      	beq.n	89fe <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
    89de:	f06f 0701 	mvn.w	r7, #1
    89e2:	ebb7 0708 	subs.w	r7, r7, r8
    89e6:	9702      	str	r7, [sp, #8]
    89e8:	f04f 31ff 	mov.w	r1, #4294967295
    89ec:	eb61 0709 	sbc.w	r7, r1, r9
    89f0:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    89f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    89f6:	2800      	cmp	r0, #0
    89f8:	f171 0100 	sbcs.w	r1, r1, #0
    89fc:	db1c      	blt.n	8a38 <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    89fe:	f06f 0101 	mvn.w	r1, #1
    8a02:	ebb1 0a03 	subs.w	sl, r1, r3
    8a06:	f04f 31ff 	mov.w	r1, #4294967295
    8a0a:	eb61 0b02 	sbc.w	fp, r1, r2
    8a0e:	f1ba 0f00 	cmp.w	sl, #0
    8a12:	f17b 0100 	sbcs.w	r1, fp, #0
    8a16:	db23      	blt.n	8a60 <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    8a18:	4630      	mov	r0, r6
    8a1a:	f002 f8f4 	bl	ac06 <z_abort_timeout>
	timer->period = period;
    8a1e:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
    8a22:	2300      	movs	r3, #0
    8a24:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    8a26:	4622      	mov	r2, r4
    8a28:	462b      	mov	r3, r5
    8a2a:	4917      	ldr	r1, [pc, #92]	; (8a88 <z_impl_k_timer_start+0xdc>)
    8a2c:	4630      	mov	r0, r6
    8a2e:	f7ff fe47 	bl	86c0 <z_add_timeout>
		     duration);
}
    8a32:	b007      	add	sp, #28
    8a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    8a38:	f118 31ff 	adds.w	r1, r8, #4294967295
    8a3c:	9104      	str	r1, [sp, #16]
    8a3e:	f149 31ff 	adc.w	r1, r9, #4294967295
    8a42:	9105      	str	r1, [sp, #20]
    8a44:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
    8a48:	4638      	mov	r0, r7
    8a4a:	4641      	mov	r1, r8
    8a4c:	2f01      	cmp	r7, #1
    8a4e:	f178 0700 	sbcs.w	r7, r8, #0
    8a52:	db02      	blt.n	8a5a <z_impl_k_timer_start+0xae>
    8a54:	4680      	mov	r8, r0
    8a56:	4689      	mov	r9, r1
    8a58:	e7d1      	b.n	89fe <z_impl_k_timer_start+0x52>
    8a5a:	2001      	movs	r0, #1
    8a5c:	2100      	movs	r1, #0
    8a5e:	e7f9      	b.n	8a54 <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
    8a60:	f113 33ff 	adds.w	r3, r3, #4294967295
    8a64:	9300      	str	r3, [sp, #0]
    8a66:	f142 33ff 	adc.w	r3, r2, #4294967295
    8a6a:	9301      	str	r3, [sp, #4]
    8a6c:	e9dd 0100 	ldrd	r0, r1, [sp]
    8a70:	4602      	mov	r2, r0
    8a72:	460b      	mov	r3, r1
    8a74:	2800      	cmp	r0, #0
    8a76:	f171 0100 	sbcs.w	r1, r1, #0
    8a7a:	db02      	blt.n	8a82 <z_impl_k_timer_start+0xd6>
    8a7c:	4614      	mov	r4, r2
    8a7e:	461d      	mov	r5, r3
    8a80:	e7ca      	b.n	8a18 <z_impl_k_timer_start+0x6c>
    8a82:	2200      	movs	r2, #0
    8a84:	4613      	mov	r3, r2
    8a86:	e7f9      	b.n	8a7c <z_impl_k_timer_start+0xd0>
    8a88:	00008919 	.word	0x00008919

00008a8c <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    8a8c:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    8a8e:	4a03      	ldr	r2, [pc, #12]	; (8a9c <boot_banner+0x10>)
    8a90:	4903      	ldr	r1, [pc, #12]	; (8aa0 <boot_banner+0x14>)
    8a92:	4804      	ldr	r0, [pc, #16]	; (8aa4 <boot_banner+0x18>)
    8a94:	f000 fce9 	bl	946a <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    8a98:	bd08      	pop	{r3, pc}
    8a9a:	bf00      	nop
    8a9c:	0000b15c 	.word	0x0000b15c
    8aa0:	0000bb04 	.word	0x0000bb04
    8aa4:	0000bb14 	.word	0x0000bb14

00008aa8 <asin>:
    8aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8aac:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8b54 <asin+0xac>
    8ab0:	b08b      	sub	sp, #44	; 0x2c
    8ab2:	4604      	mov	r4, r0
    8ab4:	460d      	mov	r5, r1
    8ab6:	f7f8 fda3 	bl	1600 <__ieee754_asin>
    8aba:	f999 3000 	ldrsb.w	r3, [r9]
    8abe:	3301      	adds	r3, #1
    8ac0:	4606      	mov	r6, r0
    8ac2:	460f      	mov	r7, r1
    8ac4:	d010      	beq.n	8ae8 <asin+0x40>
    8ac6:	4622      	mov	r2, r4
    8ac8:	462b      	mov	r3, r5
    8aca:	4620      	mov	r0, r4
    8acc:	4629      	mov	r1, r5
    8ace:	f7f8 fc21 	bl	1314 <__aeabi_dcmpun>
    8ad2:	4680      	mov	r8, r0
    8ad4:	b940      	cbnz	r0, 8ae8 <asin+0x40>
    8ad6:	4620      	mov	r0, r4
    8ad8:	4629      	mov	r1, r5
    8ada:	f000 f963 	bl	8da4 <fabs>
    8ade:	4b1a      	ldr	r3, [pc, #104]	; (8b48 <asin+0xa0>)
    8ae0:	2200      	movs	r2, #0
    8ae2:	f7f7 ff49 	bl	978 <__aeabi_dcmpgt>
    8ae6:	b920      	cbnz	r0, 8af2 <asin+0x4a>
    8ae8:	4630      	mov	r0, r6
    8aea:	4639      	mov	r1, r7
    8aec:	b00b      	add	sp, #44	; 0x2c
    8aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8af2:	4b16      	ldr	r3, [pc, #88]	; (8b4c <asin+0xa4>)
    8af4:	4816      	ldr	r0, [pc, #88]	; (8b50 <asin+0xa8>)
    8af6:	9301      	str	r3, [sp, #4]
    8af8:	2201      	movs	r2, #1
    8afa:	e9cd 4504 	strd	r4, r5, [sp, #16]
    8afe:	e9cd 4502 	strd	r4, r5, [sp, #8]
    8b02:	f8cd 8020 	str.w	r8, [sp, #32]
    8b06:	9200      	str	r2, [sp, #0]
    8b08:	f000 f952 	bl	8db0 <nan>
    8b0c:	f999 3000 	ldrsb.w	r3, [r9]
    8b10:	2b02      	cmp	r3, #2
    8b12:	e9cd 0106 	strd	r0, r1, [sp, #24]
    8b16:	d00c      	beq.n	8b32 <asin+0x8a>
    8b18:	4668      	mov	r0, sp
    8b1a:	f000 f947 	bl	8dac <matherr>
    8b1e:	b140      	cbz	r0, 8b32 <asin+0x8a>
    8b20:	9b08      	ldr	r3, [sp, #32]
    8b22:	b95b      	cbnz	r3, 8b3c <asin+0x94>
    8b24:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    8b28:	4630      	mov	r0, r6
    8b2a:	4639      	mov	r1, r7
    8b2c:	b00b      	add	sp, #44	; 0x2c
    8b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8b32:	f001 f9c3 	bl	9ebc <__errno>
    8b36:	2321      	movs	r3, #33	; 0x21
    8b38:	6003      	str	r3, [r0, #0]
    8b3a:	e7f1      	b.n	8b20 <asin+0x78>
    8b3c:	f001 f9be 	bl	9ebc <__errno>
    8b40:	9b08      	ldr	r3, [sp, #32]
    8b42:	6003      	str	r3, [r0, #0]
    8b44:	e7ee      	b.n	8b24 <asin+0x7c>
    8b46:	bf00      	nop
    8b48:	3ff00000 	.word	0x3ff00000
    8b4c:	0000bb3c 	.word	0x0000bb3c
    8b50:	0000b15c 	.word	0x0000b15c
    8b54:	200000f4 	.word	0x200000f4

00008b58 <atan2>:
    8b58:	f7f8 bf96 	b.w	1a88 <__ieee754_atan2>

00008b5c <sqrt>:
    8b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b60:	b08b      	sub	sp, #44	; 0x2c
    8b62:	4604      	mov	r4, r0
    8b64:	460d      	mov	r5, r1
    8b66:	f000 f859 	bl	8c1c <__ieee754_sqrt>
    8b6a:	4b2a      	ldr	r3, [pc, #168]	; (8c14 <sqrt+0xb8>)
    8b6c:	f993 b000 	ldrsb.w	fp, [r3]
    8b70:	f1bb 3fff 	cmp.w	fp, #4294967295
    8b74:	4606      	mov	r6, r0
    8b76:	460f      	mov	r7, r1
    8b78:	d012      	beq.n	8ba0 <sqrt+0x44>
    8b7a:	4622      	mov	r2, r4
    8b7c:	462b      	mov	r3, r5
    8b7e:	4620      	mov	r0, r4
    8b80:	4629      	mov	r1, r5
    8b82:	f7f8 fbc7 	bl	1314 <__aeabi_dcmpun>
    8b86:	4682      	mov	sl, r0
    8b88:	b950      	cbnz	r0, 8ba0 <sqrt+0x44>
    8b8a:	f04f 0800 	mov.w	r8, #0
    8b8e:	f04f 0900 	mov.w	r9, #0
    8b92:	4642      	mov	r2, r8
    8b94:	464b      	mov	r3, r9
    8b96:	4620      	mov	r0, r4
    8b98:	4629      	mov	r1, r5
    8b9a:	f7f7 fecf 	bl	93c <__aeabi_dcmplt>
    8b9e:	b920      	cbnz	r0, 8baa <sqrt+0x4e>
    8ba0:	4630      	mov	r0, r6
    8ba2:	4639      	mov	r1, r7
    8ba4:	b00b      	add	sp, #44	; 0x2c
    8ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8baa:	4b1b      	ldr	r3, [pc, #108]	; (8c18 <sqrt+0xbc>)
    8bac:	f8cd a020 	str.w	sl, [sp, #32]
    8bb0:	2201      	movs	r2, #1
    8bb2:	e9cd 4504 	strd	r4, r5, [sp, #16]
    8bb6:	e9cd 4502 	strd	r4, r5, [sp, #8]
    8bba:	9200      	str	r2, [sp, #0]
    8bbc:	9301      	str	r3, [sp, #4]
    8bbe:	f1bb 0f00 	cmp.w	fp, #0
    8bc2:	d017      	beq.n	8bf4 <sqrt+0x98>
    8bc4:	4642      	mov	r2, r8
    8bc6:	464b      	mov	r3, r9
    8bc8:	4640      	mov	r0, r8
    8bca:	4649      	mov	r1, r9
    8bcc:	f7f7 fd6e 	bl	6ac <__aeabi_ddiv>
    8bd0:	f1bb 0f02 	cmp.w	fp, #2
    8bd4:	e9cd 0106 	strd	r0, r1, [sp, #24]
    8bd8:	d10e      	bne.n	8bf8 <sqrt+0x9c>
    8bda:	f001 f96f 	bl	9ebc <__errno>
    8bde:	2321      	movs	r3, #33	; 0x21
    8be0:	6003      	str	r3, [r0, #0]
    8be2:	9b08      	ldr	r3, [sp, #32]
    8be4:	b983      	cbnz	r3, 8c08 <sqrt+0xac>
    8be6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    8bea:	4630      	mov	r0, r6
    8bec:	4639      	mov	r1, r7
    8bee:	b00b      	add	sp, #44	; 0x2c
    8bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8bf4:	e9cd 8906 	strd	r8, r9, [sp, #24]
    8bf8:	4668      	mov	r0, sp
    8bfa:	f000 f8d7 	bl	8dac <matherr>
    8bfe:	2800      	cmp	r0, #0
    8c00:	d0eb      	beq.n	8bda <sqrt+0x7e>
    8c02:	9b08      	ldr	r3, [sp, #32]
    8c04:	2b00      	cmp	r3, #0
    8c06:	d0ee      	beq.n	8be6 <sqrt+0x8a>
    8c08:	f001 f958 	bl	9ebc <__errno>
    8c0c:	9b08      	ldr	r3, [sp, #32]
    8c0e:	6003      	str	r3, [r0, #0]
    8c10:	e7e9      	b.n	8be6 <sqrt+0x8a>
    8c12:	bf00      	nop
    8c14:	200000f4 	.word	0x200000f4
    8c18:	0000bb44 	.word	0x0000bb44

00008c1c <__ieee754_sqrt>:
    8c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c20:	4f5f      	ldr	r7, [pc, #380]	; (8da0 <__ieee754_sqrt+0x184>)
    8c22:	ea37 0201 	bics.w	r2, r7, r1
    8c26:	460e      	mov	r6, r1
    8c28:	4605      	mov	r5, r0
    8c2a:	f000 8097 	beq.w	8d5c <__ieee754_sqrt+0x140>
    8c2e:	2900      	cmp	r1, #0
    8c30:	460b      	mov	r3, r1
    8c32:	4604      	mov	r4, r0
    8c34:	dd4e      	ble.n	8cd4 <__ieee754_sqrt+0xb8>
    8c36:	1509      	asrs	r1, r1, #20
    8c38:	d05a      	beq.n	8cf0 <__ieee754_sqrt+0xd4>
    8c3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8c3e:	07ca      	lsls	r2, r1, #31
    8c40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8c44:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
    8c48:	d403      	bmi.n	8c52 <__ieee754_sqrt+0x36>
    8c4a:	005b      	lsls	r3, r3, #1
    8c4c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
    8c50:	0064      	lsls	r4, r4, #1
    8c52:	0fe2      	lsrs	r2, r4, #31
    8c54:	f04f 0c00 	mov.w	ip, #0
    8c58:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    8c5c:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    8c60:	0064      	lsls	r4, r4, #1
    8c62:	4666      	mov	r6, ip
    8c64:	2516      	movs	r5, #22
    8c66:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    8c6a:	18b1      	adds	r1, r6, r2
    8c6c:	4299      	cmp	r1, r3
    8c6e:	dc02      	bgt.n	8c76 <__ieee754_sqrt+0x5a>
    8c70:	1a5b      	subs	r3, r3, r1
    8c72:	188e      	adds	r6, r1, r2
    8c74:	4494      	add	ip, r2
    8c76:	005b      	lsls	r3, r3, #1
    8c78:	3d01      	subs	r5, #1
    8c7a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
    8c7e:	ea4f 0252 	mov.w	r2, r2, lsr #1
    8c82:	ea4f 0444 	mov.w	r4, r4, lsl #1
    8c86:	d1f0      	bne.n	8c6a <__ieee754_sqrt+0x4e>
    8c88:	462f      	mov	r7, r5
    8c8a:	2020      	movs	r0, #32
    8c8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8c90:	e009      	b.n	8ca6 <__ieee754_sqrt+0x8a>
    8c92:	d03d      	beq.n	8d10 <__ieee754_sqrt+0xf4>
    8c94:	0fe1      	lsrs	r1, r4, #31
    8c96:	3801      	subs	r0, #1
    8c98:	ea4f 0252 	mov.w	r2, r2, lsr #1
    8c9c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    8ca0:	ea4f 0444 	mov.w	r4, r4, lsl #1
    8ca4:	d03d      	beq.n	8d22 <__ieee754_sqrt+0x106>
    8ca6:	42b3      	cmp	r3, r6
    8ca8:	eb02 0105 	add.w	r1, r2, r5
    8cac:	ddf1      	ble.n	8c92 <__ieee754_sqrt+0x76>
    8cae:	2900      	cmp	r1, #0
    8cb0:	eb01 0502 	add.w	r5, r1, r2
    8cb4:	db09      	blt.n	8cca <__ieee754_sqrt+0xae>
    8cb6:	46b0      	mov	r8, r6
    8cb8:	1b9b      	subs	r3, r3, r6
    8cba:	42a1      	cmp	r1, r4
    8cbc:	bf88      	it	hi
    8cbe:	f103 33ff 	addhi.w	r3, r3, #4294967295
    8cc2:	1a64      	subs	r4, r4, r1
    8cc4:	4417      	add	r7, r2
    8cc6:	4646      	mov	r6, r8
    8cc8:	e7e4      	b.n	8c94 <__ieee754_sqrt+0x78>
    8cca:	2d00      	cmp	r5, #0
    8ccc:	dbf3      	blt.n	8cb6 <__ieee754_sqrt+0x9a>
    8cce:	f106 0801 	add.w	r8, r6, #1
    8cd2:	e7f1      	b.n	8cb8 <__ieee754_sqrt+0x9c>
    8cd4:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
    8cd8:	4302      	orrs	r2, r0
    8cda:	d057      	beq.n	8d8c <__ieee754_sqrt+0x170>
    8cdc:	2900      	cmp	r1, #0
    8cde:	d14b      	bne.n	8d78 <__ieee754_sqrt+0x15c>
    8ce0:	0ae2      	lsrs	r2, r4, #11
    8ce2:	3915      	subs	r1, #21
    8ce4:	0564      	lsls	r4, r4, #21
    8ce6:	4613      	mov	r3, r2
    8ce8:	2a00      	cmp	r2, #0
    8cea:	d0f9      	beq.n	8ce0 <__ieee754_sqrt+0xc4>
    8cec:	02d7      	lsls	r7, r2, #11
    8cee:	d452      	bmi.n	8d96 <__ieee754_sqrt+0x17a>
    8cf0:	2000      	movs	r0, #0
    8cf2:	005b      	lsls	r3, r3, #1
    8cf4:	02de      	lsls	r6, r3, #11
    8cf6:	4605      	mov	r5, r0
    8cf8:	f100 0001 	add.w	r0, r0, #1
    8cfc:	d5f9      	bpl.n	8cf2 <__ieee754_sqrt+0xd6>
    8cfe:	461a      	mov	r2, r3
    8d00:	4623      	mov	r3, r4
    8d02:	4084      	lsls	r4, r0
    8d04:	f1c0 0020 	rsb	r0, r0, #32
    8d08:	40c3      	lsrs	r3, r0
    8d0a:	4313      	orrs	r3, r2
    8d0c:	1b49      	subs	r1, r1, r5
    8d0e:	e794      	b.n	8c3a <__ieee754_sqrt+0x1e>
    8d10:	42a1      	cmp	r1, r4
    8d12:	d8bf      	bhi.n	8c94 <__ieee754_sqrt+0x78>
    8d14:	2900      	cmp	r1, #0
    8d16:	eb01 0502 	add.w	r5, r1, r2
    8d1a:	dbd6      	blt.n	8cca <__ieee754_sqrt+0xae>
    8d1c:	4698      	mov	r8, r3
    8d1e:	2300      	movs	r3, #0
    8d20:	e7cf      	b.n	8cc2 <__ieee754_sqrt+0xa6>
    8d22:	4323      	orrs	r3, r4
    8d24:	d113      	bne.n	8d4e <__ieee754_sqrt+0x132>
    8d26:	0878      	lsrs	r0, r7, #1
    8d28:	ea4f 036c 	mov.w	r3, ip, asr #1
    8d2c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
    8d30:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    8d34:	f01c 0f01 	tst.w	ip, #1
    8d38:	bf18      	it	ne
    8d3a:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
    8d3e:	eb03 550e 	add.w	r5, r3, lr, lsl #20
    8d42:	4602      	mov	r2, r0
    8d44:	462b      	mov	r3, r5
    8d46:	4610      	mov	r0, r2
    8d48:	4619      	mov	r1, r3
    8d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d4e:	1c7b      	adds	r3, r7, #1
    8d50:	bf16      	itet	ne
    8d52:	1c78      	addne	r0, r7, #1
    8d54:	f10c 0c01 	addeq.w	ip, ip, #1
    8d58:	0840      	lsrne	r0, r0, #1
    8d5a:	e7e5      	b.n	8d28 <__ieee754_sqrt+0x10c>
    8d5c:	4602      	mov	r2, r0
    8d5e:	460b      	mov	r3, r1
    8d60:	f7f7 fb7a 	bl	458 <__aeabi_dmul>
    8d64:	462a      	mov	r2, r5
    8d66:	4633      	mov	r3, r6
    8d68:	f7f7 f9c0 	bl	ec <__adddf3>
    8d6c:	4602      	mov	r2, r0
    8d6e:	460b      	mov	r3, r1
    8d70:	4610      	mov	r0, r2
    8d72:	4619      	mov	r1, r3
    8d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d78:	4602      	mov	r2, r0
    8d7a:	f7f7 f9b5 	bl	e8 <__aeabi_dsub>
    8d7e:	4602      	mov	r2, r0
    8d80:	460b      	mov	r3, r1
    8d82:	f7f7 fc93 	bl	6ac <__aeabi_ddiv>
    8d86:	4602      	mov	r2, r0
    8d88:	460b      	mov	r3, r1
    8d8a:	e7dc      	b.n	8d46 <__ieee754_sqrt+0x12a>
    8d8c:	4602      	mov	r2, r0
    8d8e:	4610      	mov	r0, r2
    8d90:	4619      	mov	r1, r3
    8d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d96:	4623      	mov	r3, r4
    8d98:	2020      	movs	r0, #32
    8d9a:	f04f 35ff 	mov.w	r5, #4294967295
    8d9e:	e7b3      	b.n	8d08 <__ieee754_sqrt+0xec>
    8da0:	7ff00000 	.word	0x7ff00000

00008da4 <fabs>:
    8da4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8da8:	4770      	bx	lr
    8daa:	bf00      	nop

00008dac <matherr>:
    8dac:	2000      	movs	r0, #0
    8dae:	4770      	bx	lr

00008db0 <nan>:
    8db0:	4901      	ldr	r1, [pc, #4]	; (8db8 <nan+0x8>)
    8db2:	2000      	movs	r0, #0
    8db4:	4770      	bx	lr
    8db6:	bf00      	nop
    8db8:	7ff80000 	.word	0x7ff80000

00008dbc <writeReg_bmx160>:

int writeReg_bmx160(bmx160_spi * bmxIMU_spi_p, uint8_t reg, uint8_t data)
{
    8dbc:	b530      	push	{r4, r5, lr}
    8dbe:	b089      	sub	sp, #36	; 0x24
    8dc0:	4604      	mov	r4, r0
    8dc2:	f88d 1007 	strb.w	r1, [sp, #7]
    8dc6:	f88d 2006 	strb.w	r2, [sp, #6]
    int result;
	const struct spi_buf buf[2] = {
    8dca:	f10d 0307 	add.w	r3, sp, #7
    8dce:	9304      	str	r3, [sp, #16]
    8dd0:	2301      	movs	r3, #1
    8dd2:	9305      	str	r3, [sp, #20]
    8dd4:	f10d 0206 	add.w	r2, sp, #6
    8dd8:	9206      	str	r2, [sp, #24]
    8dda:	9307      	str	r3, [sp, #28]
		{
			.buf = &data,
			.len = 1,
		}
	};
	const struct spi_buf_set tx = {
    8ddc:	aa04      	add	r2, sp, #16
    8dde:	9202      	str	r2, [sp, #8]
    8de0:	2202      	movs	r2, #2
    8de2:	9203      	str	r2, [sp, #12]
		.buffers = buf,
		.count = 2,
	};
	gpio_pin_set(bmxIMU_spi_p->gpio0_dev, bmxIMU_spi_p->spi_cs_pin, 1);
    8de4:	6940      	ldr	r0, [r0, #20]
    8de6:	7c21      	ldrb	r1, [r4, #16]
	const struct gpio_driver_data *const data =
    8de8:	6902      	ldr	r2, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    8dea:	6812      	ldr	r2, [r2, #0]
    8dec:	408b      	lsls	r3, r1
    8dee:	421a      	tst	r2, r3
    8df0:	d123      	bne.n	8e3a <writeReg_bmx160+0x7e>
    8df2:	2301      	movs	r3, #1
	if (value != 0)	{
    8df4:	b31b      	cbz	r3, 8e3e <writeReg_bmx160+0x82>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    8df6:	2301      	movs	r3, #1
    8df8:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    8dfc:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    8dfe:	68db      	ldr	r3, [r3, #12]
    8e00:	4798      	blx	r3

	//result = spi_write_dt(bus, &tx);
	result = spi_write(bmxIMU_spi_p->spi_dev, &bmxIMU_spi_p->spi_cfg, &tx);
    8e02:	68e0      	ldr	r0, [r4, #12]
static inline int z_impl_spi_transceive(const struct device *dev,
					const struct spi_config *config,
					const struct spi_buf_set *tx_bufs,
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
    8e04:	6883      	ldr	r3, [r0, #8]
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
    8e06:	681d      	ldr	r5, [r3, #0]
    8e08:	2300      	movs	r3, #0
    8e0a:	aa02      	add	r2, sp, #8
    8e0c:	4621      	mov	r1, r4
    8e0e:	47a8      	blx	r5
	if (result) 
    8e10:	4605      	mov	r5, r0
    8e12:	b978      	cbnz	r0, 8e34 <writeReg_bmx160+0x78>
    {
        return result;
		//printk("SPI error: %d\n", result);
	}
    gpio_pin_set(bmxIMU_spi_p->gpio0_dev, bmxIMU_spi_p->spi_cs_pin, 0);
    8e14:	6960      	ldr	r0, [r4, #20]
    8e16:	7c21      	ldrb	r1, [r4, #16]
	const struct gpio_driver_data *const data =
    8e18:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    8e1a:	681a      	ldr	r2, [r3, #0]
    8e1c:	2301      	movs	r3, #1
    8e1e:	408b      	lsls	r3, r1
    8e20:	421a      	tst	r2, r3
    8e22:	d113      	bne.n	8e4c <writeReg_bmx160+0x90>
    8e24:	462b      	mov	r3, r5
	if (value != 0)	{
    8e26:	b19b      	cbz	r3, 8e50 <writeReg_bmx160+0x94>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    8e28:	2301      	movs	r3, #1
    8e2a:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    8e2e:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    8e30:	68db      	ldr	r3, [r3, #12]
    8e32:	4798      	blx	r3
    return 0;
}
    8e34:	4628      	mov	r0, r5
    8e36:	b009      	add	sp, #36	; 0x24
    8e38:	bd30      	pop	{r4, r5, pc}
		value = (value != 0) ? 0 : 1;
    8e3a:	2300      	movs	r3, #0
    8e3c:	e7da      	b.n	8df4 <writeReg_bmx160+0x38>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    8e3e:	2301      	movs	r3, #1
    8e40:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    8e44:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    8e46:	691b      	ldr	r3, [r3, #16]
    8e48:	4798      	blx	r3
    8e4a:	e7da      	b.n	8e02 <writeReg_bmx160+0x46>
		value = (value != 0) ? 0 : 1;
    8e4c:	2301      	movs	r3, #1
    8e4e:	e7ea      	b.n	8e26 <writeReg_bmx160+0x6a>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    8e50:	2301      	movs	r3, #1
    8e52:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    8e56:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    8e58:	691b      	ldr	r3, [r3, #16]
    8e5a:	4798      	blx	r3
	return ret;
    8e5c:	e7ea      	b.n	8e34 <writeReg_bmx160+0x78>

00008e5e <setAccel_ODR_BWP_bmx160>:
{
    8e5e:	b508      	push	{r3, lr}
    writeReg_bmx160(bmxIMU_spi_p, BMX160_ACC_CONF_REG, sentVal);
    8e60:	430a      	orrs	r2, r1
    8e62:	2140      	movs	r1, #64	; 0x40
    8e64:	f7ff ffaa 	bl	8dbc <writeReg_bmx160>
}
    8e68:	bd08      	pop	{r3, pc}

00008e6a <setGyro_ODR_BWP_bmx160>:
{
    8e6a:	b508      	push	{r3, lr}
    writeReg_bmx160(bmxIMU_spi_p, BMX160_GYR_CONF_REG, sentVal);
    8e6c:	430a      	orrs	r2, r1
    8e6e:	2142      	movs	r1, #66	; 0x42
    8e70:	f7ff ffa4 	bl	8dbc <writeReg_bmx160>
}
    8e74:	bd08      	pop	{r3, pc}

00008e76 <setSensorMode_bmx160>:
{
    8e76:	b510      	push	{r4, lr}
    8e78:	4614      	mov	r4, r2
    writeReg_bmx160(bmxIMU_spi_p, BMX160_CMD_REG, data);
    8e7a:	460a      	mov	r2, r1
    8e7c:	217e      	movs	r1, #126	; 0x7e
    8e7e:	f7ff ff9d 	bl	8dbc <writeReg_bmx160>
    8e82:	03e1      	lsls	r1, r4, #15
    8e84:	f240 30e7 	movw	r0, #999	; 0x3e7
    8e88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8e8c:	2300      	movs	r3, #0
    8e8e:	1808      	adds	r0, r1, r0
    8e90:	f04f 0400 	mov.w	r4, #0
    8e94:	4621      	mov	r1, r4
    8e96:	eb44 0101 	adc.w	r1, r4, r1
    8e9a:	f7f8 f8c1 	bl	1020 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    8e9e:	f7ff fb53 	bl	8548 <z_impl_k_sleep>
}
    8ea2:	bd10      	pop	{r4, pc}

00008ea4 <readReg_bmx160>:

int readReg_bmx160(bmx160_spi * bmxIMU_spi_p, uint8_t reg, uint8_t *data, size_t len)
{
    8ea4:	b530      	push	{r4, r5, lr}
    8ea6:	b08d      	sub	sp, #52	; 0x34
    8ea8:	4604      	mov	r4, r0
    int result;
	unsigned char tx_buffer[2] = { 0, };
    8eaa:	2000      	movs	r0, #0
    8eac:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c

	tx_buffer[0] = 0x80 | reg;
    8eb0:	f061 017f 	orn	r1, r1, #127	; 0x7f
    8eb4:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c

	const struct spi_buf tx_buf = {
    8eb8:	a90b      	add	r1, sp, #44	; 0x2c
    8eba:	9109      	str	r1, [sp, #36]	; 0x24
    8ebc:	2501      	movs	r5, #1
    8ebe:	950a      	str	r5, [sp, #40]	; 0x28
		.buf = tx_buffer,
		.len = 1,
	};
	const struct spi_buf_set tx = {
    8ec0:	a809      	add	r0, sp, #36	; 0x24
    8ec2:	9007      	str	r0, [sp, #28]
    8ec4:	9508      	str	r5, [sp, #32]
		.buffers = &tx_buf,
		.count = 1,
	};

	struct spi_buf rx_buf[2] = {
    8ec6:	9103      	str	r1, [sp, #12]
    8ec8:	9504      	str	r5, [sp, #16]
    8eca:	9205      	str	r2, [sp, #20]
    8ecc:	9306      	str	r3, [sp, #24]
			.buf = data,
			.len = len,
		}
	};

	const struct spi_buf_set rx = {
    8ece:	ab03      	add	r3, sp, #12
    8ed0:	9301      	str	r3, [sp, #4]
    8ed2:	2302      	movs	r3, #2
    8ed4:	9302      	str	r3, [sp, #8]
		.buffers = rx_buf,
		.count = 2,
	};
	gpio_pin_set(bmxIMU_spi_p->gpio0_dev, bmxIMU_spi_p->spi_cs_pin, 1);
    8ed6:	6960      	ldr	r0, [r4, #20]
    8ed8:	7c21      	ldrb	r1, [r4, #16]
	const struct gpio_driver_data *const data =
    8eda:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    8edc:	681b      	ldr	r3, [r3, #0]
    8ede:	408d      	lsls	r5, r1
    8ee0:	422b      	tst	r3, r5
    8ee2:	d122      	bne.n	8f2a <readReg_bmx160+0x86>
    8ee4:	2301      	movs	r3, #1
	if (value != 0)	{
    8ee6:	b313      	cbz	r3, 8f2e <readReg_bmx160+0x8a>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    8ee8:	2301      	movs	r3, #1
    8eea:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    8eee:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    8ef0:	68db      	ldr	r3, [r3, #12]
    8ef2:	4798      	blx	r3
	result = spi_transceive(bmxIMU_spi_p->spi_dev, &bmxIMU_spi_p->spi_cfg, &tx, &rx);
    8ef4:	68e0      	ldr	r0, [r4, #12]
	const struct spi_driver_api *api =
    8ef6:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    8ef8:	681d      	ldr	r5, [r3, #0]
    8efa:	ab01      	add	r3, sp, #4
    8efc:	aa07      	add	r2, sp, #28
    8efe:	4621      	mov	r1, r4
    8f00:	47a8      	blx	r5
    8f02:	4605      	mov	r5, r0
    gpio_pin_set(bmxIMU_spi_p->gpio0_dev, bmxIMU_spi_p->spi_cs_pin, 0);
    8f04:	6960      	ldr	r0, [r4, #20]
    8f06:	7c21      	ldrb	r1, [r4, #16]
	const struct gpio_driver_data *const data =
    8f08:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    8f0a:	681a      	ldr	r2, [r3, #0]
    8f0c:	2301      	movs	r3, #1
    8f0e:	408b      	lsls	r3, r1
    8f10:	421a      	tst	r2, r3
    8f12:	d113      	bne.n	8f3c <readReg_bmx160+0x98>
    8f14:	2300      	movs	r3, #0
	if (value != 0)	{
    8f16:	b19b      	cbz	r3, 8f40 <readReg_bmx160+0x9c>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    8f18:	2301      	movs	r3, #1
    8f1a:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    8f1e:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    8f20:	68db      	ldr	r3, [r3, #12]
    8f22:	4798      	blx	r3
	if (result) {
		return result;
	}

	return 0;
}
    8f24:	4628      	mov	r0, r5
    8f26:	b00d      	add	sp, #52	; 0x34
    8f28:	bd30      	pop	{r4, r5, pc}
		value = (value != 0) ? 0 : 1;
    8f2a:	2300      	movs	r3, #0
    8f2c:	e7db      	b.n	8ee6 <readReg_bmx160+0x42>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    8f2e:	2301      	movs	r3, #1
    8f30:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    8f34:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    8f36:	691b      	ldr	r3, [r3, #16]
    8f38:	4798      	blx	r3
    8f3a:	e7db      	b.n	8ef4 <readReg_bmx160+0x50>
		value = (value != 0) ? 0 : 1;
    8f3c:	2301      	movs	r3, #1
    8f3e:	e7ea      	b.n	8f16 <readReg_bmx160+0x72>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    8f40:	2301      	movs	r3, #1
    8f42:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    8f46:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    8f48:	691b      	ldr	r3, [r3, #16]
    8f4a:	4798      	blx	r3
	if (result) {
    8f4c:	e7ea      	b.n	8f24 <readReg_bmx160+0x80>

00008f4e <getChipID_bmx160>:
{
    8f4e:	b508      	push	{r3, lr}
    8f50:	460a      	mov	r2, r1
    result = readReg_bmx160(bmxIMU_spi_p, BMX160_CHIP_ID_REG, chipID, 1);
    8f52:	2301      	movs	r3, #1
    8f54:	2100      	movs	r1, #0
    8f56:	f7ff ffa5 	bl	8ea4 <readReg_bmx160>
}
    8f5a:	bd08      	pop	{r3, pc}

00008f5c <begin_bmx160>:
{
    8f5c:	b510      	push	{r4, lr}
    8f5e:	b082      	sub	sp, #8
    8f60:	4604      	mov	r4, r0
    uint8_t chipID = 0;
    8f62:	2200      	movs	r2, #0
    8f64:	f88d 2007 	strb.w	r2, [sp, #7]
    readReg_bmx160(bmxIMU_spi_p, BMX160_STARTUP_WRITE_REG, NULL, 1);
    8f68:	2301      	movs	r3, #1
    8f6a:	217f      	movs	r1, #127	; 0x7f
    8f6c:	f7ff ff9a 	bl	8ea4 <readReg_bmx160>
    getChipID_bmx160(bmxIMU_spi_p, &chipID);
    8f70:	f10d 0107 	add.w	r1, sp, #7
    8f74:	4620      	mov	r0, r4
    8f76:	f7ff ffea 	bl	8f4e <getChipID_bmx160>
    if(chipID != BMI160_CHIP_ID)
    8f7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8f7e:	2bd1      	cmp	r3, #209	; 0xd1
    8f80:	d11e      	bne.n	8fc0 <begin_bmx160+0x64>
    setSensorMode_bmx160(bmxIMU_spi_p, bmx160_accel_normal_mode, BMX160_ACCEL_DELAY_MS);    
    8f82:	2204      	movs	r2, #4
    8f84:	2111      	movs	r1, #17
    8f86:	4620      	mov	r0, r4
    8f88:	f7ff ff75 	bl	8e76 <setSensorMode_bmx160>
    setSensorMode_bmx160(bmxIMU_spi_p, bmx160_gyro_normal_mode, BMX160_GRYO_DELAY_MS);  
    8f8c:	2250      	movs	r2, #80	; 0x50
    8f8e:	2115      	movs	r1, #21
    8f90:	4620      	mov	r0, r4
    8f92:	f7ff ff70 	bl	8e76 <setSensorMode_bmx160>
    setAccel_ODR_BWP_bmx160(bmxIMU_spi_p, bmx160_accel_odr_1600, bmx160_accel_bwp_osr_1);
    8f96:	2220      	movs	r2, #32
    8f98:	210c      	movs	r1, #12
    8f9a:	4620      	mov	r0, r4
    8f9c:	f7ff ff5f 	bl	8e5e <setAccel_ODR_BWP_bmx160>
    setGyro_ODR_BWP_bmx160(bmxIMU_spi_p, bmx160_gyr_odr_1600, bmx160_gyr_bwp_osr_1);
    8fa0:	2220      	movs	r2, #32
    8fa2:	210c      	movs	r1, #12
    8fa4:	4620      	mov	r0, r4
    8fa6:	f7ff ff60 	bl	8e6a <setGyro_ODR_BWP_bmx160>
    setAccelRange_bmx160(bmxIMU_spi_p, bmx160_accelRange_4g);
    8faa:	2105      	movs	r1, #5
    8fac:	4620      	mov	r0, r4
    8fae:	f7f9 f905 	bl	21bc <setAccelRange_bmx160>
    setGyroRange_bmx160(bmxIMU_spi_p, bmx160_gyroRange_1000dps);
    8fb2:	2101      	movs	r1, #1
    8fb4:	4620      	mov	r0, r4
    8fb6:	f7f9 f92f 	bl	2218 <setGyroRange_bmx160>
    return BMX160_OK;
    8fba:	2000      	movs	r0, #0
}
    8fbc:	b002      	add	sp, #8
    8fbe:	bd10      	pop	{r4, pc}
        return BMX160_WRONG_CHIP_ID;
    8fc0:	f06f 0062 	mvn.w	r0, #98	; 0x62
    8fc4:	e7fa      	b.n	8fbc <begin_bmx160+0x60>

00008fc6 <quaternion_initialize>:
{
    8fc6:	b410      	push	{r4}
    q.a = a;
    8fc8:	6001      	str	r1, [r0, #0]
    q.b = b;
    8fca:	6042      	str	r2, [r0, #4]
    q.c = c;
    8fcc:	6083      	str	r3, [r0, #8]
    q.d = d;
    8fce:	9b01      	ldr	r3, [sp, #4]
    8fd0:	60c3      	str	r3, [r0, #12]
}
    8fd2:	bc10      	pop	{r4}
    8fd4:	4770      	bx	lr

00008fd6 <quaternion_product>:
{
    8fd6:	b084      	sub	sp, #16
    8fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8fdc:	b083      	sub	sp, #12
    8fde:	4604      	mov	r4, r0
    8fe0:	a80d      	add	r0, sp, #52	; 0x34
    8fe2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    q.a = (q1.a*q2.a) - (q1.b*q2.b) - (q1.c*q2.c) - (q1.d*q2.d);
    8fe6:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    8fea:	9d11      	ldr	r5, [sp, #68]	; 0x44
    8fec:	4629      	mov	r1, r5
    8fee:	4650      	mov	r0, sl
    8ff0:	f7f7 fe2a 	bl	c48 <__aeabi_fmul>
    8ff4:	4606      	mov	r6, r0
    8ff6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    8ffa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ffc:	9300      	str	r3, [sp, #0]
    8ffe:	4619      	mov	r1, r3
    9000:	4640      	mov	r0, r8
    9002:	f7f7 fe21 	bl	c48 <__aeabi_fmul>
    9006:	4601      	mov	r1, r0
    9008:	4630      	mov	r0, r6
    900a:	f7f7 fd13 	bl	a34 <__aeabi_fsub>
    900e:	4606      	mov	r6, r0
    9010:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    9012:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
    9016:	4649      	mov	r1, r9
    9018:	4638      	mov	r0, r7
    901a:	f7f7 fe15 	bl	c48 <__aeabi_fmul>
    901e:	4601      	mov	r1, r0
    9020:	4630      	mov	r0, r6
    9022:	f7f7 fd07 	bl	a34 <__aeabi_fsub>
    9026:	9001      	str	r0, [sp, #4]
    9028:	9e10      	ldr	r6, [sp, #64]	; 0x40
    902a:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
    902e:	4659      	mov	r1, fp
    9030:	4630      	mov	r0, r6
    9032:	f7f7 fe09 	bl	c48 <__aeabi_fmul>
    9036:	4601      	mov	r1, r0
    9038:	9801      	ldr	r0, [sp, #4]
    903a:	f7f7 fcfb 	bl	a34 <__aeabi_fsub>
    903e:	6020      	str	r0, [r4, #0]
    q.b = (q1.a*q2.b) + (q1.b*q2.a) + (q1.c*q2.d) - (q1.d*q2.c);
    9040:	9900      	ldr	r1, [sp, #0]
    9042:	4650      	mov	r0, sl
    9044:	f7f7 fe00 	bl	c48 <__aeabi_fmul>
    9048:	9001      	str	r0, [sp, #4]
    904a:	4641      	mov	r1, r8
    904c:	4628      	mov	r0, r5
    904e:	f7f7 fdfb 	bl	c48 <__aeabi_fmul>
    9052:	4601      	mov	r1, r0
    9054:	9801      	ldr	r0, [sp, #4]
    9056:	f7f7 fcef 	bl	a38 <__addsf3>
    905a:	9001      	str	r0, [sp, #4]
    905c:	4659      	mov	r1, fp
    905e:	4638      	mov	r0, r7
    9060:	f7f7 fdf2 	bl	c48 <__aeabi_fmul>
    9064:	4601      	mov	r1, r0
    9066:	9801      	ldr	r0, [sp, #4]
    9068:	f7f7 fce6 	bl	a38 <__addsf3>
    906c:	9001      	str	r0, [sp, #4]
    906e:	4631      	mov	r1, r6
    9070:	4648      	mov	r0, r9
    9072:	f7f7 fde9 	bl	c48 <__aeabi_fmul>
    9076:	4601      	mov	r1, r0
    9078:	9801      	ldr	r0, [sp, #4]
    907a:	f7f7 fcdb 	bl	a34 <__aeabi_fsub>
    907e:	6060      	str	r0, [r4, #4]
    q.c = (q1.a*q2.c) - (q1.b*q2.d) + (q1.c*q2.a) + (q1.d*q2.b);
    9080:	4649      	mov	r1, r9
    9082:	4650      	mov	r0, sl
    9084:	f7f7 fde0 	bl	c48 <__aeabi_fmul>
    9088:	9001      	str	r0, [sp, #4]
    908a:	4659      	mov	r1, fp
    908c:	4640      	mov	r0, r8
    908e:	f7f7 fddb 	bl	c48 <__aeabi_fmul>
    9092:	4601      	mov	r1, r0
    9094:	9801      	ldr	r0, [sp, #4]
    9096:	f7f7 fccd 	bl	a34 <__aeabi_fsub>
    909a:	9001      	str	r0, [sp, #4]
    909c:	4639      	mov	r1, r7
    909e:	4628      	mov	r0, r5
    90a0:	f7f7 fdd2 	bl	c48 <__aeabi_fmul>
    90a4:	4601      	mov	r1, r0
    90a6:	9801      	ldr	r0, [sp, #4]
    90a8:	f7f7 fcc6 	bl	a38 <__addsf3>
    90ac:	9001      	str	r0, [sp, #4]
    90ae:	4631      	mov	r1, r6
    90b0:	9800      	ldr	r0, [sp, #0]
    90b2:	f7f7 fdc9 	bl	c48 <__aeabi_fmul>
    90b6:	4601      	mov	r1, r0
    90b8:	9801      	ldr	r0, [sp, #4]
    90ba:	f7f7 fcbd 	bl	a38 <__addsf3>
    90be:	60a0      	str	r0, [r4, #8]
    q.d = (q1.a*q2.d) + (q1.b*q2.c) - (q1.c*q2.b) + (q1.d*q2.a);
    90c0:	4659      	mov	r1, fp
    90c2:	4650      	mov	r0, sl
    90c4:	f7f7 fdc0 	bl	c48 <__aeabi_fmul>
    90c8:	4682      	mov	sl, r0
    90ca:	4649      	mov	r1, r9
    90cc:	4640      	mov	r0, r8
    90ce:	f7f7 fdbb 	bl	c48 <__aeabi_fmul>
    90d2:	4601      	mov	r1, r0
    90d4:	4650      	mov	r0, sl
    90d6:	f7f7 fcaf 	bl	a38 <__addsf3>
    90da:	4680      	mov	r8, r0
    90dc:	4639      	mov	r1, r7
    90de:	9800      	ldr	r0, [sp, #0]
    90e0:	f7f7 fdb2 	bl	c48 <__aeabi_fmul>
    90e4:	4601      	mov	r1, r0
    90e6:	4640      	mov	r0, r8
    90e8:	f7f7 fca4 	bl	a34 <__aeabi_fsub>
    90ec:	4607      	mov	r7, r0
    90ee:	4631      	mov	r1, r6
    90f0:	4628      	mov	r0, r5
    90f2:	f7f7 fda9 	bl	c48 <__aeabi_fmul>
    90f6:	4601      	mov	r1, r0
    90f8:	4638      	mov	r0, r7
    90fa:	f7f7 fc9d 	bl	a38 <__addsf3>
    90fe:	60e0      	str	r0, [r4, #12]
}
    9100:	4620      	mov	r0, r4
    9102:	b003      	add	sp, #12
    9104:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9108:	b004      	add	sp, #16
    910a:	4770      	bx	lr

0000910c <quaternion_conjugate>:
{
    910c:	b084      	sub	sp, #16
    910e:	b430      	push	{r4, r5}
    9110:	ad03      	add	r5, sp, #12
    9112:	e885 000e 	stmia.w	r5, {r1, r2, r3}
    q2.a = q1.a;
    9116:	9b03      	ldr	r3, [sp, #12]
    9118:	6003      	str	r3, [r0, #0]
    q2.b = -q1.b;
    911a:	9b04      	ldr	r3, [sp, #16]
    911c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    9120:	6043      	str	r3, [r0, #4]
    q2.c = -q1.c;
    9122:	9b05      	ldr	r3, [sp, #20]
    9124:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    9128:	6083      	str	r3, [r0, #8]
    q2.d = -q1.d;
    912a:	9b06      	ldr	r3, [sp, #24]
    912c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    9130:	60c3      	str	r3, [r0, #12]
}
    9132:	bc30      	pop	{r4, r5}
    9134:	b004      	add	sp, #16
    9136:	4770      	bx	lr

00009138 <quaternion_rotate_vector>:
{
    9138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    913c:	b09a      	sub	sp, #104	; 0x68
    913e:	4607      	mov	r7, r0
    9140:	a807      	add	r0, sp, #28
    9142:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    Quaternion quaternion_vector = quaternion_initialize(0.0, v.a, v.b, v.c);
    9146:	ae12      	add	r6, sp, #72	; 0x48
    9148:	9b09      	ldr	r3, [sp, #36]	; 0x24
    914a:	9300      	str	r3, [sp, #0]
    914c:	9b08      	ldr	r3, [sp, #32]
    914e:	9a07      	ldr	r2, [sp, #28]
    9150:	2100      	movs	r1, #0
    9152:	4630      	mov	r0, r6
    9154:	f7ff ff37 	bl	8fc6 <quaternion_initialize>
    Quaternion q_inverse = quaternion_conjugate(q);
    9158:	ad0e      	add	r5, sp, #56	; 0x38
    915a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    915c:	9300      	str	r3, [sp, #0]
    915e:	ab20      	add	r3, sp, #128	; 0x80
    9160:	cb0e      	ldmia	r3, {r1, r2, r3}
    9162:	4628      	mov	r0, r5
    9164:	f7ff ffd2 	bl	910c <quaternion_conjugate>
    Quaternion quaternion_rotated_vector = quaternion_product(quaternion_product(q, quaternion_vector),q_inverse);
    9168:	f10d 0858 	add.w	r8, sp, #88	; 0x58
    916c:	ac01      	add	r4, sp, #4
    916e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    9172:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    9176:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9178:	9300      	str	r3, [sp, #0]
    917a:	ab20      	add	r3, sp, #128	; 0x80
    917c:	cb0e      	ldmia	r3, {r1, r2, r3}
    917e:	4640      	mov	r0, r8
    9180:	f7ff ff29 	bl	8fd6 <quaternion_product>
    9184:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    9188:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    918c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    918e:	9300      	str	r3, [sp, #0]
    9190:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
    9194:	a80a      	add	r0, sp, #40	; 0x28
    9196:	f7ff ff1e 	bl	8fd6 <quaternion_product>
    vector_ijk rotated = vector_3d_initialize(quaternion_rotated_vector.b,quaternion_rotated_vector.c,quaternion_rotated_vector.d);
    919a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    919c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    919e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    91a0:	4638      	mov	r0, r7
    91a2:	f000 f894 	bl	92ce <vector_3d_initialize>
}
    91a6:	4638      	mov	r0, r7
    91a8:	b01a      	add	sp, #104	; 0x68
    91aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000091ae <sensor_gravity_normalized>:

vector_ijk sensor_gravity_normalized(int16_t ax, int16_t ay, int16_t az)
{
    91ae:	b570      	push	{r4, r5, r6, lr}
    91b0:	4604      	mov	r4, r0
    91b2:	4616      	mov	r6, r2
    91b4:	461d      	mov	r5, r3
    vector_ijk result;
    result.a = ax;
    91b6:	4608      	mov	r0, r1
    91b8:	f7f7 fcf2 	bl	ba0 <__aeabi_i2f>
    91bc:	6020      	str	r0, [r4, #0]
    result.b = ay;
    91be:	4630      	mov	r0, r6
    91c0:	f7f7 fcee 	bl	ba0 <__aeabi_i2f>
    91c4:	6060      	str	r0, [r4, #4]
    result.c = az;
    91c6:	4628      	mov	r0, r5
    91c8:	f7f7 fcea 	bl	ba0 <__aeabi_i2f>
    91cc:	60a0      	str	r0, [r4, #8]
    result = vector_3d_normalize(result);
    91ce:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
    91d2:	4620      	mov	r0, r4
    91d4:	f000 f8d4 	bl	9380 <vector_3d_normalize>
    return result;
}
    91d8:	4620      	mov	r0, r4
    91da:	bd70      	pop	{r4, r5, r6, pc}

000091dc <fuse_vector>:

vector_ijk fuse_vector(vector_ijk virtual_gravity, vector_ijk sensor_gravity)
{
    91dc:	b530      	push	{r4, r5, lr}
    91de:	b08d      	sub	sp, #52	; 0x34
    91e0:	4605      	mov	r5, r0
    91e2:	ac09      	add	r4, sp, #36	; 0x24
    91e4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    float fusion = fusion_coeffecient(virtual_gravity, sensor_gravity);
    91e8:	9912      	ldr	r1, [sp, #72]	; 0x48
    91ea:	9811      	ldr	r0, [sp, #68]	; 0x44
    91ec:	e88d 0003 	stmia.w	sp, {r0, r1}
    91f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    91f2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    91f6:	f7f8 f9d7 	bl	15a8 <fusion_coeffecient>
    virtual_gravity = vector_3d_scale(virtual_gravity,fusion);
    91fa:	9000      	str	r0, [sp, #0]
    91fc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
    9200:	4620      	mov	r0, r4
    9202:	f000 f8a4 	bl	934e <vector_3d_scale>
    vector_ijk result = vector_3d_sum(virtual_gravity,sensor_gravity);
    9206:	ab10      	add	r3, sp, #64	; 0x40
    9208:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    920c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    9210:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
    9214:	4628      	mov	r0, r5
    9216:	f000 f860 	bl	92da <vector_3d_sum>
    result = vector_3d_normalize(result);
    921a:	ac04      	add	r4, sp, #16
    921c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
    9220:	4620      	mov	r0, r4
    9222:	f000 f8ad 	bl	9380 <vector_3d_normalize>
    9226:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    922a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    return result;
}
    922e:	4628      	mov	r0, r5
    9230:	b00d      	add	sp, #52	; 0x34
    9232:	bd30      	pop	{r4, r5, pc}

00009234 <update_gravity_vector>:

vector_ijk update_gravity_vector(vector_ijk gravity_vector,float wx,float wy,float wz,float delta)
{
    9234:	b570      	push	{r4, r5, r6, lr}
    9236:	b08c      	sub	sp, #48	; 0x30
    9238:	4605      	mov	r5, r0
    923a:	ac05      	add	r4, sp, #20
    923c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    Quaternion q_gyro = quaternion_from_gyro(wx,wy,wz,delta);
    9240:	ae08      	add	r6, sp, #32
    9242:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9244:	9300      	str	r3, [sp, #0]
    9246:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9248:	9a11      	ldr	r2, [sp, #68]	; 0x44
    924a:	9910      	ldr	r1, [sp, #64]	; 0x40
    924c:	4630      	mov	r0, r6
    924e:	f7f9 f88b 	bl	2368 <quaternion_from_gyro>
    gravity_vector = quaternion_rotate_vector(gravity_vector,q_gyro);
    9252:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    9256:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    925a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
    925e:	4620      	mov	r0, r4
    9260:	f7ff ff6a 	bl	9138 <quaternion_rotate_vector>
    return gravity_vector;
    9264:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    9268:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
    926c:	4628      	mov	r0, r5
    926e:	b00c      	add	sp, #48	; 0x30
    9270:	bd70      	pop	{r4, r5, r6, pc}

00009272 <update_fused_vector>:

vector_ijk update_fused_vector(vector_ijk fused_vector, int16_t ax, int16_t ay, int16_t az,float wx,float wy,float wz,float delta)
{
    9272:	b5f0      	push	{r4, r5, r6, r7, lr}
    9274:	b08f      	sub	sp, #60	; 0x3c
    9276:	4605      	mov	r5, r0
    9278:	ac05      	add	r4, sp, #20
    927a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    vector_ijk virtual_gravity = update_gravity_vector(fused_vector,wx,wy,wz,delta);
    927e:	ae0b      	add	r6, sp, #44	; 0x2c
    9280:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9282:	9303      	str	r3, [sp, #12]
    9284:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9286:	9302      	str	r3, [sp, #8]
    9288:	9b18      	ldr	r3, [sp, #96]	; 0x60
    928a:	9301      	str	r3, [sp, #4]
    928c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    928e:	9300      	str	r3, [sp, #0]
    9290:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
    9294:	4630      	mov	r0, r6
    9296:	f7ff ffcd 	bl	9234 <update_gravity_vector>
    vector_ijk sensor_gravity = sensor_gravity_normalized(ax,ay,az);
    929a:	af08      	add	r7, sp, #32
    929c:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
    92a0:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
    92a4:	f9bd 1050 	ldrsh.w	r1, [sp, #80]	; 0x50
    92a8:	4638      	mov	r0, r7
    92aa:	f7ff ff80 	bl	91ae <sensor_gravity_normalized>
    fused_vector = fuse_vector(virtual_gravity,sensor_gravity);
    92ae:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    92b2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    92b6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
    92ba:	4620      	mov	r0, r4
    92bc:	f7ff ff8e 	bl	91dc <fuse_vector>
    return fused_vector;
    92c0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    92c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
    92c8:	4628      	mov	r0, r5
    92ca:	b00f      	add	sp, #60	; 0x3c
    92cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000092ce <vector_3d_initialize>:
{
    92ce:	b410      	push	{r4}
    v.a = a;
    92d0:	6001      	str	r1, [r0, #0]
    v.b = b;
    92d2:	6042      	str	r2, [r0, #4]
    v.c = c;
    92d4:	6083      	str	r3, [r0, #8]
}
    92d6:	bc10      	pop	{r4}
    92d8:	4770      	bx	lr

000092da <vector_3d_sum>:
{
    92da:	b510      	push	{r4, lr}
    92dc:	b084      	sub	sp, #16
    92de:	4604      	mov	r4, r0
    92e0:	a804      	add	r0, sp, #16
    92e2:	e900 000e 	stmdb	r0, {r1, r2, r3}
    v.a = v1.a + v2.a;
    92e6:	9906      	ldr	r1, [sp, #24]
    92e8:	9801      	ldr	r0, [sp, #4]
    92ea:	f7f7 fba5 	bl	a38 <__addsf3>
    92ee:	6020      	str	r0, [r4, #0]
    v.b = v1.b + v2.b;
    92f0:	9907      	ldr	r1, [sp, #28]
    92f2:	9802      	ldr	r0, [sp, #8]
    92f4:	f7f7 fba0 	bl	a38 <__addsf3>
    92f8:	6060      	str	r0, [r4, #4]
    v.c = v1.c + v2.c;
    92fa:	9908      	ldr	r1, [sp, #32]
    92fc:	9803      	ldr	r0, [sp, #12]
    92fe:	f7f7 fb9b 	bl	a38 <__addsf3>
    9302:	60a0      	str	r0, [r4, #8]
}
    9304:	4620      	mov	r0, r4
    9306:	b004      	add	sp, #16
    9308:	bd10      	pop	{r4, pc}

0000930a <vector_3d_dot_product>:
{
    930a:	b082      	sub	sp, #8
    930c:	b510      	push	{r4, lr}
    930e:	b084      	sub	sp, #16
    9310:	ac04      	add	r4, sp, #16
    9312:	e904 0007 	stmdb	r4, {r0, r1, r2}
    9316:	9307      	str	r3, [sp, #28]
    return (v1.a*v2.a + v1.b*v2.b + v1.c*v2.c);
    9318:	9907      	ldr	r1, [sp, #28]
    931a:	9801      	ldr	r0, [sp, #4]
    931c:	f7f7 fc94 	bl	c48 <__aeabi_fmul>
    9320:	4604      	mov	r4, r0
    9322:	9908      	ldr	r1, [sp, #32]
    9324:	9802      	ldr	r0, [sp, #8]
    9326:	f7f7 fc8f 	bl	c48 <__aeabi_fmul>
    932a:	4601      	mov	r1, r0
    932c:	4620      	mov	r0, r4
    932e:	f7f7 fb83 	bl	a38 <__addsf3>
    9332:	4604      	mov	r4, r0
    9334:	9909      	ldr	r1, [sp, #36]	; 0x24
    9336:	9803      	ldr	r0, [sp, #12]
    9338:	f7f7 fc86 	bl	c48 <__aeabi_fmul>
    933c:	4601      	mov	r1, r0
    933e:	4620      	mov	r0, r4
    9340:	f7f7 fb7a 	bl	a38 <__addsf3>
}
    9344:	b004      	add	sp, #16
    9346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    934a:	b002      	add	sp, #8
    934c:	4770      	bx	lr

0000934e <vector_3d_scale>:
{
    934e:	b530      	push	{r4, r5, lr}
    9350:	b085      	sub	sp, #20
    9352:	4604      	mov	r4, r0
    9354:	a804      	add	r0, sp, #16
    9356:	e900 000e 	stmdb	r0, {r1, r2, r3}
    935a:	9d08      	ldr	r5, [sp, #32]
    v2.a = v1.a*scale;
    935c:	4629      	mov	r1, r5
    935e:	9801      	ldr	r0, [sp, #4]
    9360:	f7f7 fc72 	bl	c48 <__aeabi_fmul>
    9364:	6020      	str	r0, [r4, #0]
    v2.b = v1.b*scale;
    9366:	4629      	mov	r1, r5
    9368:	9802      	ldr	r0, [sp, #8]
    936a:	f7f7 fc6d 	bl	c48 <__aeabi_fmul>
    936e:	6060      	str	r0, [r4, #4]
    v2.c = v1.c*scale;
    9370:	4629      	mov	r1, r5
    9372:	9803      	ldr	r0, [sp, #12]
    9374:	f7f7 fc68 	bl	c48 <__aeabi_fmul>
    9378:	60a0      	str	r0, [r4, #8]
}
    937a:	4620      	mov	r0, r4
    937c:	b005      	add	sp, #20
    937e:	bd30      	pop	{r4, r5, pc}

00009380 <vector_3d_normalize>:
{
    9380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9384:	b084      	sub	sp, #16
    9386:	4604      	mov	r4, r0
    9388:	a804      	add	r0, sp, #16
    938a:	e900 000e 	stmdb	r0, {r1, r2, r3}
    one_by_sqrt = InvSqrt(v1.a*v1.a + v1.b*v1.b + v1.c*v1.c);
    938e:	f8dd 8004 	ldr.w	r8, [sp, #4]
    9392:	4641      	mov	r1, r8
    9394:	4640      	mov	r0, r8
    9396:	f7f7 fc57 	bl	c48 <__aeabi_fmul>
    939a:	4605      	mov	r5, r0
    939c:	9f02      	ldr	r7, [sp, #8]
    939e:	4639      	mov	r1, r7
    93a0:	4638      	mov	r0, r7
    93a2:	f7f7 fc51 	bl	c48 <__aeabi_fmul>
    93a6:	4601      	mov	r1, r0
    93a8:	4628      	mov	r0, r5
    93aa:	f7f7 fb45 	bl	a38 <__addsf3>
    93ae:	4605      	mov	r5, r0
    93b0:	9e03      	ldr	r6, [sp, #12]
    93b2:	4631      	mov	r1, r6
    93b4:	4630      	mov	r0, r6
    93b6:	f7f7 fc47 	bl	c48 <__aeabi_fmul>
    93ba:	4601      	mov	r1, r0
    93bc:	4628      	mov	r0, r5
    93be:	f7f7 fb3b 	bl	a38 <__addsf3>
    93c2:	f7f9 f823 	bl	240c <InvSqrt>
    93c6:	4605      	mov	r5, r0
    v2.a = v1.a*one_by_sqrt;
    93c8:	4601      	mov	r1, r0
    93ca:	4640      	mov	r0, r8
    93cc:	f7f7 fc3c 	bl	c48 <__aeabi_fmul>
    93d0:	6020      	str	r0, [r4, #0]
    v2.b = v1.b*one_by_sqrt;
    93d2:	4629      	mov	r1, r5
    93d4:	4638      	mov	r0, r7
    93d6:	f7f7 fc37 	bl	c48 <__aeabi_fmul>
    93da:	6060      	str	r0, [r4, #4]
    v2.c = v1.c*one_by_sqrt;
    93dc:	4629      	mov	r1, r5
    93de:	4630      	mov	r0, r6
    93e0:	f7f7 fc32 	bl	c48 <__aeabi_fmul>
    93e4:	60a0      	str	r0, [r4, #8]
}
    93e6:	4620      	mov	r0, r4
    93e8:	b004      	add	sp, #16
    93ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000093ee <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    93ee:	4602      	mov	r2, r0
    93f0:	b158      	cbz	r0, 940a <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    93f2:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    93f4:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    93f8:	2b01      	cmp	r3, #1
    93fa:	d003      	beq.n	9404 <sys_notify_validate+0x16>
    93fc:	2b03      	cmp	r3, #3
    93fe:	d107      	bne.n	9410 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    9400:	6803      	ldr	r3, [r0, #0]
    9402:	b143      	cbz	r3, 9416 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    9404:	2000      	movs	r0, #0
    9406:	6090      	str	r0, [r2, #8]
    9408:	4770      	bx	lr
		return -EINVAL;
    940a:	f06f 0015 	mvn.w	r0, #21
    940e:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    9410:	f06f 0015 	mvn.w	r0, #21
    9414:	4770      	bx	lr
			rv = -EINVAL;
    9416:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    941a:	4770      	bx	lr

0000941c <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    941c:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    941e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    9420:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    9424:	6081      	str	r1, [r0, #8]
	switch (method) {
    9426:	2a03      	cmp	r2, #3
    9428:	d103      	bne.n	9432 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    942a:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    942c:	2200      	movs	r2, #0
    942e:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    9430:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    9432:	2000      	movs	r0, #0
    9434:	e7fa      	b.n	942c <sys_notify_finalize+0x10>

00009436 <arch_printk_char_out>:
}
    9436:	2000      	movs	r0, #0
    9438:	4770      	bx	lr

0000943a <str_out>:
{
    943a:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    943c:	680c      	ldr	r4, [r1, #0]
    943e:	b154      	cbz	r4, 9456 <str_out+0x1c>
    9440:	688a      	ldr	r2, [r1, #8]
    9442:	684b      	ldr	r3, [r1, #4]
    9444:	429a      	cmp	r2, r3
    9446:	da06      	bge.n	9456 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    9448:	3b01      	subs	r3, #1
    944a:	429a      	cmp	r2, r3
    944c:	d008      	beq.n	9460 <str_out+0x26>
		ctx->str[ctx->count++] = c;
    944e:	1c53      	adds	r3, r2, #1
    9450:	608b      	str	r3, [r1, #8]
    9452:	54a0      	strb	r0, [r4, r2]
    9454:	e002      	b.n	945c <str_out+0x22>
		ctx->count++;
    9456:	688b      	ldr	r3, [r1, #8]
    9458:	3301      	adds	r3, #1
    945a:	608b      	str	r3, [r1, #8]
}
    945c:	bc10      	pop	{r4}
    945e:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    9460:	1c53      	adds	r3, r2, #1
    9462:	608b      	str	r3, [r1, #8]
    9464:	2300      	movs	r3, #0
    9466:	54a3      	strb	r3, [r4, r2]
    9468:	e7f8      	b.n	945c <str_out+0x22>

0000946a <printk>:
{
    946a:	b40f      	push	{r0, r1, r2, r3}
    946c:	b500      	push	{lr}
    946e:	b083      	sub	sp, #12
    9470:	a904      	add	r1, sp, #16
    9472:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    9476:	9101      	str	r1, [sp, #4]
	z_log_printk(fmt, ap);
    9478:	f7fa f9a6 	bl	37c8 <z_log_printk>
}
    947c:	b003      	add	sp, #12
    947e:	f85d eb04 	ldr.w	lr, [sp], #4
    9482:	b004      	add	sp, #16
    9484:	4770      	bx	lr

00009486 <snprintk>:
{
    9486:	b40c      	push	{r2, r3}
    9488:	b500      	push	{lr}
    948a:	b083      	sub	sp, #12
    948c:	ab04      	add	r3, sp, #16
    948e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    9492:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    9494:	f7f8 ffdc 	bl	2450 <vsnprintk>
}
    9498:	b003      	add	sp, #12
    949a:	f85d eb04 	ldr.w	lr, [sp], #4
    949e:	b002      	add	sp, #8
    94a0:	4770      	bx	lr

000094a2 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    94a2:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    94a6:	8b01      	ldrh	r1, [r0, #24]
    94a8:	f021 0107 	bic.w	r1, r1, #7
    94ac:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    94ae:	8301      	strh	r1, [r0, #24]
}
    94b0:	4770      	bx	lr

000094b2 <notify_monitors>:
{
    94b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    94b6:	4606      	mov	r6, r0
    94b8:	460f      	mov	r7, r1
    94ba:	4690      	mov	r8, r2
	return list->head;
    94bc:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    94be:	b119      	cbz	r1, 94c8 <notify_monitors+0x16>
    94c0:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    94c2:	b131      	cbz	r1, 94d2 <notify_monitors+0x20>
	return node->next;
    94c4:	680c      	ldr	r4, [r1, #0]
    94c6:	e004      	b.n	94d2 <notify_monitors+0x20>
    94c8:	460c      	mov	r4, r1
    94ca:	e002      	b.n	94d2 <notify_monitors+0x20>
    94cc:	4623      	mov	r3, r4
    94ce:	4621      	mov	r1, r4
    94d0:	461c      	mov	r4, r3
    94d2:	b159      	cbz	r1, 94ec <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    94d4:	684d      	ldr	r5, [r1, #4]
    94d6:	4643      	mov	r3, r8
    94d8:	463a      	mov	r2, r7
    94da:	4630      	mov	r0, r6
    94dc:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    94de:	2c00      	cmp	r4, #0
    94e0:	d0f4      	beq.n	94cc <notify_monitors+0x1a>
    94e2:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    94e4:	2c00      	cmp	r4, #0
    94e6:	d0f2      	beq.n	94ce <notify_monitors+0x1c>
	return node->next;
    94e8:	6823      	ldr	r3, [r4, #0]
    94ea:	e7f0      	b.n	94ce <notify_monitors+0x1c>
}
    94ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000094f0 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    94f0:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    94f2:	f013 0307 	ands.w	r3, r3, #7
    94f6:	d103      	bne.n	9500 <process_recheck+0x10>
	return list->head;
    94f8:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    94fa:	b10a      	cbz	r2, 9500 <process_recheck+0x10>
		evt = EVT_START;
    94fc:	2003      	movs	r0, #3
    94fe:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    9500:	2b02      	cmp	r3, #2
    9502:	d003      	beq.n	950c <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    9504:	2b01      	cmp	r3, #1
    9506:	d006      	beq.n	9516 <process_recheck+0x26>
	int evt = EVT_NOP;
    9508:	2000      	movs	r0, #0
    950a:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    950c:	8b42      	ldrh	r2, [r0, #26]
    950e:	2a00      	cmp	r2, #0
    9510:	d1f8      	bne.n	9504 <process_recheck+0x14>
		evt = EVT_STOP;
    9512:	2004      	movs	r0, #4
    9514:	4770      	bx	lr
    9516:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    9518:	b10b      	cbz	r3, 951e <process_recheck+0x2e>
		evt = EVT_RESET;
    951a:	2005      	movs	r0, #5
}
    951c:	4770      	bx	lr
	int evt = EVT_NOP;
    951e:	2000      	movs	r0, #0
    9520:	4770      	bx	lr

00009522 <process_complete>:
{
    9522:	b538      	push	{r3, r4, r5, lr}
    9524:	4604      	mov	r4, r0
    9526:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9528:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    952a:	2a00      	cmp	r2, #0
    952c:	db07      	blt.n	953e <process_complete+0x1c>
    952e:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    9532:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    9534:	2a01      	cmp	r2, #1
    9536:	d90e      	bls.n	9556 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    9538:	2b04      	cmp	r3, #4
    953a:	d032      	beq.n	95a2 <process_complete+0x80>
}
    953c:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    953e:	e9d0 0100 	ldrd	r0, r1, [r0]
    9542:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    9546:	2300      	movs	r3, #0
    9548:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    954a:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    954c:	2101      	movs	r1, #1
    954e:	4620      	mov	r0, r4
    9550:	f7ff ffa7 	bl	94a2 <set_state>
    9554:	e7f2      	b.n	953c <process_complete+0x1a>
		*clients = mgr->clients;
    9556:	e9d0 0100 	ldrd	r0, r1, [r0]
    955a:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    955e:	2200      	movs	r2, #0
    9560:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    9562:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    9564:	2b06      	cmp	r3, #6
    9566:	d117      	bne.n	9598 <process_complete+0x76>
	return list->head;
    9568:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    956a:	b13b      	cbz	r3, 957c <process_complete+0x5a>
				mgr->refs += 1U;
    956c:	8b62      	ldrh	r2, [r4, #26]
    956e:	3201      	adds	r2, #1
    9570:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
    9572:	2b00      	cmp	r3, #0
    9574:	d0f9      	beq.n	956a <process_complete+0x48>
	return node->next;
    9576:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    9578:	2b00      	cmp	r3, #0
    957a:	d1f6      	bne.n	956a <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
    957c:	2102      	movs	r1, #2
    957e:	4620      	mov	r0, r4
    9580:	f7ff ff8f 	bl	94a2 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    9584:	4620      	mov	r0, r4
    9586:	f7ff ffb3 	bl	94f0 <process_recheck>
    958a:	2800      	cmp	r0, #0
    958c:	d0d6      	beq.n	953c <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    958e:	8b23      	ldrh	r3, [r4, #24]
    9590:	f043 0320 	orr.w	r3, r3, #32
    9594:	8323      	strh	r3, [r4, #24]
    9596:	e7d1      	b.n	953c <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    9598:	2100      	movs	r1, #0
    959a:	4620      	mov	r0, r4
    959c:	f7ff ff81 	bl	94a2 <set_state>
    95a0:	e7f0      	b.n	9584 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
    95a2:	2100      	movs	r1, #0
    95a4:	f7ff ff7d 	bl	94a2 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    95a8:	4620      	mov	r0, r4
    95aa:	f7ff ffa1 	bl	94f0 <process_recheck>
    95ae:	2800      	cmp	r0, #0
    95b0:	d0c4      	beq.n	953c <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    95b2:	8b23      	ldrh	r3, [r4, #24]
    95b4:	f043 0320 	orr.w	r3, r3, #32
    95b8:	8323      	strh	r3, [r4, #24]
}
    95ba:	e7bf      	b.n	953c <process_complete+0x1a>

000095bc <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    95bc:	b158      	cbz	r0, 95d6 <validate_args+0x1a>
{
    95be:	b510      	push	{r4, lr}
    95c0:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    95c2:	b159      	cbz	r1, 95dc <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    95c4:	1d08      	adds	r0, r1, #4
    95c6:	f7ff ff12 	bl	93ee <sys_notify_validate>
	if ((rv == 0)
    95ca:	b918      	cbnz	r0, 95d4 <validate_args+0x18>
	    && ((cli->notify.flags
    95cc:	68a3      	ldr	r3, [r4, #8]
    95ce:	f033 0303 	bics.w	r3, r3, #3
    95d2:	d106      	bne.n	95e2 <validate_args+0x26>
}
    95d4:	bd10      	pop	{r4, pc}
		return -EINVAL;
    95d6:	f06f 0015 	mvn.w	r0, #21
}
    95da:	4770      	bx	lr
		return -EINVAL;
    95dc:	f06f 0015 	mvn.w	r0, #21
    95e0:	e7f8      	b.n	95d4 <validate_args+0x18>
		rv = -EINVAL;
    95e2:	f06f 0015 	mvn.w	r0, #21
    95e6:	e7f5      	b.n	95d4 <validate_args+0x18>

000095e8 <notify_one>:
{
    95e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    95ec:	4607      	mov	r7, r0
    95ee:	460c      	mov	r4, r1
    95f0:	4616      	mov	r6, r2
    95f2:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    95f4:	4619      	mov	r1, r3
    95f6:	1d20      	adds	r0, r4, #4
    95f8:	f7ff ff10 	bl	941c <sys_notify_finalize>
	if (cb) {
    95fc:	b128      	cbz	r0, 960a <notify_one+0x22>
    95fe:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    9600:	462b      	mov	r3, r5
    9602:	4632      	mov	r2, r6
    9604:	4621      	mov	r1, r4
    9606:	4638      	mov	r0, r7
    9608:	47c0      	blx	r8
}
    960a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000960e <notify_all>:
{
    960e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9612:	4681      	mov	r9, r0
    9614:	460c      	mov	r4, r1
    9616:	4690      	mov	r8, r2
    9618:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
    961a:	e005      	b.n	9628 <notify_all+0x1a>
	list->tail = node;
    961c:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
    961e:	463b      	mov	r3, r7
    9620:	4642      	mov	r2, r8
    9622:	4648      	mov	r0, r9
    9624:	f7ff ffe0 	bl	95e8 <notify_one>
	return list->head;
    9628:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    962a:	b129      	cbz	r1, 9638 <notify_all+0x2a>
	return node->next;
    962c:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    962e:	6025      	str	r5, [r4, #0]
	return list->tail;
    9630:	6866      	ldr	r6, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9632:	428e      	cmp	r6, r1
    9634:	d1f3      	bne.n	961e <notify_all+0x10>
    9636:	e7f1      	b.n	961c <notify_all+0xe>
}
    9638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000963c <transition_complete>:
{
    963c:	b510      	push	{r4, lr}
	__asm__ volatile(
    963e:	f04f 0420 	mov.w	r4, #32
    9642:	f3ef 8211 	mrs	r2, BASEPRI
    9646:	f384 8812 	msr	BASEPRI_MAX, r4
    964a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    964e:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    9650:	2101      	movs	r1, #1
    9652:	f7f8 ff13 	bl	247c <process_event>
}
    9656:	bd10      	pop	{r4, pc}

00009658 <onoff_manager_init>:
	if ((mgr == NULL)
    9658:	4603      	mov	r3, r0
    965a:	b168      	cbz	r0, 9678 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    965c:	b179      	cbz	r1, 967e <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    965e:	680a      	ldr	r2, [r1, #0]
    9660:	b182      	cbz	r2, 9684 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    9662:	684a      	ldr	r2, [r1, #4]
    9664:	b18a      	cbz	r2, 968a <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    9666:	2000      	movs	r0, #0
    9668:	6018      	str	r0, [r3, #0]
    966a:	6058      	str	r0, [r3, #4]
    966c:	6098      	str	r0, [r3, #8]
    966e:	60d8      	str	r0, [r3, #12]
    9670:	6158      	str	r0, [r3, #20]
    9672:	6198      	str	r0, [r3, #24]
    9674:	6119      	str	r1, [r3, #16]
	return 0;
    9676:	4770      	bx	lr
		return -EINVAL;
    9678:	f06f 0015 	mvn.w	r0, #21
    967c:	4770      	bx	lr
    967e:	f06f 0015 	mvn.w	r0, #21
    9682:	4770      	bx	lr
    9684:	f06f 0015 	mvn.w	r0, #21
    9688:	4770      	bx	lr
    968a:	f06f 0015 	mvn.w	r0, #21
}
    968e:	4770      	bx	lr

00009690 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    9690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9692:	4604      	mov	r4, r0
    9694:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    9696:	f7ff ff91 	bl	95bc <validate_args>

	if (rv < 0) {
    969a:	1e06      	subs	r6, r0, #0
    969c:	db37      	blt.n	970e <onoff_request+0x7e>
    969e:	f04f 0320 	mov.w	r3, #32
    96a2:	f3ef 8211 	mrs	r2, BASEPRI
    96a6:	f383 8812 	msr	BASEPRI_MAX, r3
    96aa:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    96ae:	8b25      	ldrh	r5, [r4, #24]
    96b0:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    96b4:	8b63      	ldrh	r3, [r4, #26]
    96b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    96ba:	428b      	cmp	r3, r1
    96bc:	d02f      	beq.n	971e <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    96be:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    96c0:	2d02      	cmp	r5, #2
    96c2:	d00c      	beq.n	96de <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    96c4:	b18d      	cbz	r5, 96ea <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    96c6:	2d04      	cmp	r5, #4
    96c8:	d00f      	beq.n	96ea <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    96ca:	2d06      	cmp	r5, #6
    96cc:	d00d      	beq.n	96ea <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    96ce:	2d05      	cmp	r5, #5
    96d0:	d01f      	beq.n	9712 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    96d2:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    96d6:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    96d8:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    96da:	4608      	mov	r0, r1
    96dc:	e00a      	b.n	96f4 <onoff_request+0x64>
		mgr->refs += 1U;
    96de:	3301      	adds	r3, #1
    96e0:	8363      	strh	r3, [r4, #26]
		notify = true;
    96e2:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    96e4:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    96e6:	4618      	mov	r0, r3
    96e8:	e004      	b.n	96f4 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    96ea:	fab5 f385 	clz	r3, r5
    96ee:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    96f0:	2100      	movs	r1, #0
		add_client = true;
    96f2:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    96f4:	b128      	cbz	r0, 9702 <onoff_request+0x72>
	parent->next = child;
    96f6:	2000      	movs	r0, #0
    96f8:	6038      	str	r0, [r7, #0]
	return list->tail;
    96fa:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    96fc:	b1a8      	cbz	r0, 972a <onoff_request+0x9a>
	parent->next = child;
    96fe:	6007      	str	r7, [r0, #0]
	list->tail = node;
    9700:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    9702:	b9ab      	cbnz	r3, 9730 <onoff_request+0xa0>
	__asm__ volatile(
    9704:	f382 8811 	msr	BASEPRI, r2
    9708:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    970c:	b9a9      	cbnz	r1, 973a <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    970e:	4630      	mov	r0, r6
    9710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    9712:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    9716:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    9718:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    971a:	4608      	mov	r0, r1
    971c:	e7ea      	b.n	96f4 <onoff_request+0x64>
		rv = -EAGAIN;
    971e:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    9722:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    9724:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    9726:	4608      	mov	r0, r1
    9728:	e7e4      	b.n	96f4 <onoff_request+0x64>
    972a:	6067      	str	r7, [r4, #4]
	list->head = node;
    972c:	6027      	str	r7, [r4, #0]
}
    972e:	e7e8      	b.n	9702 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    9730:	2102      	movs	r1, #2
    9732:	4620      	mov	r0, r4
    9734:	f7f8 fea2 	bl	247c <process_event>
    9738:	e7e9      	b.n	970e <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    973a:	2300      	movs	r3, #0
    973c:	462a      	mov	r2, r5
    973e:	4639      	mov	r1, r7
    9740:	4620      	mov	r0, r4
    9742:	f7ff ff51 	bl	95e8 <notify_one>
    9746:	e7e2      	b.n	970e <onoff_request+0x7e>

00009748 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    9748:	b508      	push	{r3, lr}
    974a:	4604      	mov	r4, r0
    974c:	4608      	mov	r0, r1
    974e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    9750:	461a      	mov	r2, r3
    9752:	47a0      	blx	r4
	return z_impl_z_current_get();
    9754:	f7fe ff24 	bl	85a0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    9758:	f7fb fb36 	bl	4dc8 <z_impl_k_thread_abort>

0000975c <outs>:
{
    975c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9760:	4607      	mov	r7, r0
    9762:	460e      	mov	r6, r1
    9764:	4614      	mov	r4, r2
    9766:	4698      	mov	r8, r3
	size_t count = 0;
    9768:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    976a:	e006      	b.n	977a <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    976c:	4631      	mov	r1, r6
    976e:	f814 0b01 	ldrb.w	r0, [r4], #1
    9772:	47b8      	blx	r7
		if (rc < 0) {
    9774:	2800      	cmp	r0, #0
    9776:	db09      	blt.n	978c <outs+0x30>
		++count;
    9778:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    977a:	4544      	cmp	r4, r8
    977c:	d3f6      	bcc.n	976c <outs+0x10>
    977e:	f1b8 0f00 	cmp.w	r8, #0
    9782:	d102      	bne.n	978a <outs+0x2e>
    9784:	7823      	ldrb	r3, [r4, #0]
    9786:	2b00      	cmp	r3, #0
    9788:	d1f0      	bne.n	976c <outs+0x10>
	return (int)count;
    978a:	4628      	mov	r0, r5
}
    978c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009790 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    9790:	4770      	bx	lr

00009792 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
    9792:	2300      	movs	r3, #0
    9794:	6043      	str	r3, [r0, #4]
	list->head = NULL;
    9796:	6003      	str	r3, [r0, #0]
}
    9798:	4770      	bx	lr

0000979a <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
    979a:	6803      	ldr	r3, [r0, #0]
    979c:	b12b      	cbz	r3, 97aa <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
    979e:	6843      	ldr	r3, [r0, #4]
    97a0:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
    97a2:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    97a4:	2300      	movs	r3, #0
    97a6:	600b      	str	r3, [r1, #0]
}
    97a8:	4770      	bx	lr
		list->head = msg;
    97aa:	6001      	str	r1, [r0, #0]
    97ac:	e7f9      	b.n	97a2 <log_list_add_tail+0x8>

000097ae <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
    97ae:	6800      	ldr	r0, [r0, #0]
    97b0:	4770      	bx	lr

000097b2 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
    97b2:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
    97b4:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
    97b6:	b108      	cbz	r0, 97bc <log_list_head_get+0xa>
		list->head = list->head->next;
    97b8:	6802      	ldr	r2, [r0, #0]
    97ba:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
    97bc:	4770      	bx	lr

000097be <dummy_timestamp>:
}
    97be:	2000      	movs	r0, #0
    97c0:	4770      	bx	lr

000097c2 <msg_filter_check>:
}
    97c2:	2001      	movs	r0, #1
    97c4:	4770      	bx	lr

000097c6 <default_get_timestamp>:
{
    97c6:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    97c8:	f000 fdd2 	bl	a370 <sys_clock_cycle_get_32>
}
    97cc:	bd08      	pop	{r3, pc}

000097ce <z_log_get_tag>:
}
    97ce:	2000      	movs	r0, #0
    97d0:	4770      	bx	lr

000097d2 <block_on_alloc>:
}
    97d2:	2000      	movs	r0, #0
    97d4:	4770      	bx	lr

000097d6 <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    97d6:	2901      	cmp	r1, #1
    97d8:	d906      	bls.n	97e8 <cont_arg_get+0x12>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
    97da:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    97dc:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
    97de:	2906      	cmp	r1, #6
    97e0:	d907      	bls.n	97f2 <cont_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
    97e2:	3907      	subs	r1, #7
		cont = cont->next;
    97e4:	681b      	ldr	r3, [r3, #0]
    97e6:	e7fa      	b.n	97de <cont_arg_get+0x8>
		return msg->payload.ext.data.args[arg_idx];
    97e8:	3104      	adds	r1, #4
    97ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    97ee:	6888      	ldr	r0, [r1, #8]
    97f0:	4770      	bx	lr
	}

	return cont->payload.args[arg_idx];
    97f2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    97f6:	6848      	ldr	r0, [r1, #4]
}
    97f8:	4770      	bx	lr

000097fa <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    97fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    97fe:	461c      	mov	r4, r3
    9800:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
    9804:	8903      	ldrh	r3, [r0, #8]
    9806:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
    980a:	42a3      	cmp	r3, r4
    980c:	d91f      	bls.n	984e <log_msg_hexdump_data_op+0x54>
    980e:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
    9810:	6811      	ldr	r1, [r2, #0]
    9812:	4421      	add	r1, r4
    9814:	4299      	cmp	r1, r3
    9816:	d901      	bls.n	981c <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
    9818:	1b19      	subs	r1, r3, r4
    981a:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
    981c:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    981e:	2b0c      	cmp	r3, #12
    9820:	d919      	bls.n	9856 <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
    9822:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
    9826:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    9828:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
    982a:	42a3      	cmp	r3, r4
    982c:	d91e      	bls.n	986c <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    982e:	42bb      	cmp	r3, r7
    9830:	bf28      	it	cs
    9832:	463b      	movcs	r3, r7
    9834:	461d      	mov	r5, r3

		if (put_op) {
    9836:	f1b9 0f00 	cmp.w	r9, #0
    983a:	d010      	beq.n	985e <log_msg_hexdump_data_op+0x64>
    983c:	461a      	mov	r2, r3
    983e:	4641      	mov	r1, r8
    9840:	eb0c 0004 	add.w	r0, ip, r4
    9844:	f001 fa70 	bl	ad28 <memcpy>
			(void)memcpy(&head_data[offset], data, cpy_len);
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
    9848:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
    984a:	44a8      	add	r8, r5
    984c:	e021      	b.n	9892 <log_msg_hexdump_data_op+0x98>
		*length = 0;
    984e:	2300      	movs	r3, #0
    9850:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    9852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
    9856:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
    985a:	2600      	movs	r6, #0
    985c:	e7e5      	b.n	982a <log_msg_hexdump_data_op+0x30>
    985e:	461a      	mov	r2, r3
    9860:	eb0c 0104 	add.w	r1, ip, r4
    9864:	4640      	mov	r0, r8
    9866:	f001 fa5f 	bl	ad28 <memcpy>
    986a:	e7ed      	b.n	9848 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
    986c:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
    986e:	b91e      	cbnz	r6, 9878 <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
    9870:	6946      	ldr	r6, [r0, #20]
    9872:	e001      	b.n	9878 <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
    9874:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
    9876:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
    9878:	2c1b      	cmp	r4, #27
    987a:	d8fb      	bhi.n	9874 <log_msg_hexdump_data_op+0x7a>
    987c:	e009      	b.n	9892 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
    987e:	1931      	adds	r1, r6, r4
    9880:	462a      	mov	r2, r5
    9882:	3104      	adds	r1, #4
    9884:	4640      	mov	r0, r8
    9886:	f001 fa4f 	bl	ad28 <memcpy>
		cont = cont->next;
    988a:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
    988c:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
    988e:	44a8      	add	r8, r5
		offset = 0;
    9890:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
    9892:	2f00      	cmp	r7, #0
    9894:	d0dd      	beq.n	9852 <log_msg_hexdump_data_op+0x58>
    9896:	2e00      	cmp	r6, #0
    9898:	d0db      	beq.n	9852 <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    989a:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    989e:	42bd      	cmp	r5, r7
    98a0:	bf28      	it	cs
    98a2:	463d      	movcs	r5, r7
		if (put_op) {
    98a4:	f1b9 0f00 	cmp.w	r9, #0
    98a8:	d0e9      	beq.n	987e <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
    98aa:	1930      	adds	r0, r6, r4
    98ac:	462a      	mov	r2, r5
    98ae:	4641      	mov	r1, r8
    98b0:	3004      	adds	r0, #4
    98b2:	f001 fa39 	bl	ad28 <memcpy>
    98b6:	e7e8      	b.n	988a <log_msg_hexdump_data_op+0x90>

000098b8 <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
    98b8:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    98ba:	f3bf 8f5b 	dmb	ish
    98be:	e850 3f00 	ldrex	r3, [r0]
    98c2:	3301      	adds	r3, #1
    98c4:	e840 3200 	strex	r2, r3, [r0]
    98c8:	2a00      	cmp	r2, #0
    98ca:	d1f8      	bne.n	98be <log_msg_get+0x6>
    98cc:	f3bf 8f5b 	dmb	ish
}
    98d0:	4770      	bx	lr

000098d2 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    98d2:	7a40      	ldrb	r0, [r0, #9]
}
    98d4:	0900      	lsrs	r0, r0, #4
    98d6:	4770      	bx	lr

000098d8 <log_msg_arg_get>:
{
    98d8:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
    98da:	7a43      	ldrb	r3, [r0, #9]
    98dc:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
    98e0:	d20a      	bcs.n	98f8 <log_msg_arg_get+0x20>
    98e2:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    98e4:	2a03      	cmp	r2, #3
    98e6:	d804      	bhi.n	98f2 <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
    98e8:	3104      	adds	r1, #4
    98ea:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    98ee:	6840      	ldr	r0, [r0, #4]
    98f0:	e003      	b.n	98fa <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
    98f2:	f7ff ff70 	bl	97d6 <cont_arg_get>
    98f6:	e000      	b.n	98fa <log_msg_arg_get+0x22>
		return 0;
    98f8:	2000      	movs	r0, #0
}
    98fa:	bd08      	pop	{r3, pc}

000098fc <log_msg_str_get>:
}
    98fc:	6900      	ldr	r0, [r0, #16]
    98fe:	4770      	bx	lr

00009900 <log_msg_put>:
{
    9900:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
    9902:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    9904:	f3bf 8f5b 	dmb	ish
    9908:	e853 2f00 	ldrex	r2, [r3]
    990c:	3a01      	subs	r2, #1
    990e:	e843 2100 	strex	r1, r2, [r3]
    9912:	2900      	cmp	r1, #0
    9914:	d1f8      	bne.n	9908 <log_msg_put+0x8>
    9916:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
    991a:	6843      	ldr	r3, [r0, #4]
    991c:	b103      	cbz	r3, 9920 <log_msg_put+0x20>
}
    991e:	bd08      	pop	{r3, pc}
		msg_free(msg);
    9920:	f7fa f854 	bl	39cc <msg_free>
}
    9924:	e7fb      	b.n	991e <log_msg_put+0x1e>

00009926 <log_msg_hexdump_create>:
{
    9926:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    992a:	4606      	mov	r6, r0
    992c:	460f      	mov	r7, r1
    992e:	4614      	mov	r4, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
    9930:	f643 75ff 	movw	r5, #16383	; 0x3fff
    9934:	4295      	cmp	r5, r2
    9936:	bf28      	it	cs
    9938:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
    993a:	f7fa f82b 	bl	3994 <log_msg_chunk_alloc>
	if (msg == NULL) {
    993e:	4681      	mov	r9, r0
    9940:	2800      	cmp	r0, #0
    9942:	d041      	beq.n	99c8 <log_msg_hexdump_create+0xa2>
	msg->hdr.ref_cnt = 1;
    9944:	2301      	movs	r3, #1
    9946:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
    9948:	7a03      	ldrb	r3, [r0, #8]
    994a:	f043 0301 	orr.w	r3, r3, #1
    994e:	7203      	strb	r3, [r0, #8]
	msg->hdr.params.hexdump.length = length;
    9950:	8903      	ldrh	r3, [r0, #8]
    9952:	f365 038f 	bfi	r3, r5, #2, #14
    9956:	8103      	strh	r3, [r0, #8]
	msg->str = str;
    9958:	6106      	str	r6, [r0, #16]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    995a:	2c0c      	cmp	r4, #12
    995c:	d923      	bls.n	99a6 <log_msg_hexdump_create+0x80>
    995e:	683a      	ldr	r2, [r7, #0]
    9960:	687b      	ldr	r3, [r7, #4]
    9962:	6182      	str	r2, [r0, #24]
    9964:	61c3      	str	r3, [r0, #28]
		msg->payload.ext.next = NULL;
    9966:	2300      	movs	r3, #0
    9968:	6143      	str	r3, [r0, #20]
		msg->hdr.params.generic.ext = 1;
    996a:	7a03      	ldrb	r3, [r0, #8]
    996c:	f043 0302 	orr.w	r3, r3, #2
    9970:	7203      	strb	r3, [r0, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    9972:	3708      	adds	r7, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    9974:	3d08      	subs	r5, #8
	prev_cont = &msg->payload.ext.next;
    9976:	f109 0814 	add.w	r8, r9, #20
	while (length > 0) {
    997a:	b32d      	cbz	r5, 99c8 <log_msg_hexdump_create+0xa2>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
    997c:	f7fa f80a 	bl	3994 <log_msg_chunk_alloc>
		if (cont == NULL) {
    9980:	4604      	mov	r4, r0
    9982:	b1e8      	cbz	r0, 99c0 <log_msg_hexdump_create+0x9a>
		*prev_cont = cont;
    9984:	f8c8 0000 	str.w	r0, [r8]
		cont->next = NULL;
    9988:	2300      	movs	r3, #0
    998a:	6003      	str	r3, [r0, #0]
		prev_cont = &cont->next;
    998c:	4680      	mov	r8, r0
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
    998e:	462e      	mov	r6, r5
    9990:	2d1c      	cmp	r5, #28
    9992:	bf28      	it	cs
    9994:	261c      	movcs	r6, #28
    9996:	4632      	mov	r2, r6
    9998:	4639      	mov	r1, r7
    999a:	3004      	adds	r0, #4
    999c:	f001 f9c4 	bl	ad28 <memcpy>
		data += chunk_length;
    99a0:	4437      	add	r7, r6
		length -= chunk_length;
    99a2:	1bad      	subs	r5, r5, r6
    99a4:	e7e9      	b.n	997a <log_msg_hexdump_create+0x54>
    99a6:	462a      	mov	r2, r5
    99a8:	4639      	mov	r1, r7
    99aa:	3014      	adds	r0, #20
    99ac:	f001 f9bc 	bl	ad28 <memcpy>
		msg->hdr.params.generic.ext = 0;
    99b0:	f899 3008 	ldrb.w	r3, [r9, #8]
    99b4:	f36f 0341 	bfc	r3, #1, #1
    99b8:	f889 3008 	strb.w	r3, [r9, #8]
		length = 0U;
    99bc:	2500      	movs	r5, #0
    99be:	e7da      	b.n	9976 <log_msg_hexdump_create+0x50>
			msg_free(msg);
    99c0:	4648      	mov	r0, r9
    99c2:	f7fa f803 	bl	39cc <msg_free>
			return NULL;
    99c6:	46a1      	mov	r9, r4
}
    99c8:	4648      	mov	r0, r9
    99ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000099ce <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
    99ce:	b510      	push	{r4, lr}
    99d0:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    99d2:	2400      	movs	r4, #0
    99d4:	9400      	str	r4, [sp, #0]
    99d6:	f7ff ff10 	bl	97fa <log_msg_hexdump_data_op>
}
    99da:	b002      	add	sp, #8
    99dc:	bd10      	pop	{r4, pc}

000099de <buffer_write>:
{
    99de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    99e0:	4607      	mov	r7, r0
    99e2:	460d      	mov	r5, r1
    99e4:	4614      	mov	r4, r2
    99e6:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    99e8:	4632      	mov	r2, r6
    99ea:	4621      	mov	r1, r4
    99ec:	4628      	mov	r0, r5
    99ee:	47b8      	blx	r7
		buf += processed;
    99f0:	4405      	add	r5, r0
	} while (len != 0);
    99f2:	1a24      	subs	r4, r4, r0
    99f4:	d1f8      	bne.n	99e8 <buffer_write+0xa>
}
    99f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000099f8 <color_prefix>:
{
    99f8:	b508      	push	{r3, lr}
    99fa:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    99fc:	2201      	movs	r2, #1
    99fe:	f7fa f87d 	bl	3afc <color_print>
}
    9a02:	bd08      	pop	{r3, pc}

00009a04 <color_postfix>:
{
    9a04:	b508      	push	{r3, lr}
    9a06:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    9a08:	2200      	movs	r2, #0
    9a0a:	f7fa f877 	bl	3afc <color_print>
}
    9a0e:	bd08      	pop	{r3, pc}

00009a10 <postfix_print>:
{
    9a10:	b538      	push	{r3, r4, r5, lr}
    9a12:	4605      	mov	r5, r0
    9a14:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    9a16:	f001 0101 	and.w	r1, r1, #1
    9a1a:	f7ff fff3 	bl	9a04 <color_postfix>
	newline_print(output, flags);
    9a1e:	4621      	mov	r1, r4
    9a20:	4628      	mov	r0, r5
    9a22:	f7fa f881 	bl	3b28 <newline_print>
}
    9a26:	bd38      	pop	{r3, r4, r5, pc}

00009a28 <std_print>:
{
    9a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9a2c:	b08e      	sub	sp, #56	; 0x38
    9a2e:	af0e      	add	r7, sp, #56	; 0x38
    9a30:	4606      	mov	r6, r0
    9a32:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
    9a34:	f7ff ff62 	bl	98fc <log_msg_str_get>
    9a38:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
    9a3a:	4630      	mov	r0, r6
    9a3c:	f7ff ff49 	bl	98d2 <log_msg_nargs_get>
    9a40:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
    9a42:	0083      	lsls	r3, r0, #2
    9a44:	3307      	adds	r3, #7
    9a46:	f023 0307 	bic.w	r3, r3, #7
    9a4a:	ebad 0d03 	sub.w	sp, sp, r3
    9a4e:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
    9a50:	2400      	movs	r4, #0
    9a52:	4544      	cmp	r4, r8
    9a54:	d207      	bcs.n	9a66 <std_print+0x3e>
		args[i] = log_msg_arg_get(msg, i);
    9a56:	4621      	mov	r1, r4
    9a58:	4630      	mov	r0, r6
    9a5a:	f7ff ff3d 	bl	98d8 <log_msg_arg_get>
    9a5e:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
    9a62:	3401      	adds	r4, #1
    9a64:	e7f5      	b.n	9a52 <std_print+0x2a>
	switch (log_msg_nargs_get(msg)) {
    9a66:	4630      	mov	r0, r6
    9a68:	f7ff ff33 	bl	98d2 <log_msg_nargs_get>
    9a6c:	280f      	cmp	r0, #15
    9a6e:	d815      	bhi.n	9a9c <std_print+0x74>
    9a70:	e8df f010 	tbh	[pc, r0, lsl #1]
    9a74:	00170010 	.word	0x00170010
    9a78:	0024001d 	.word	0x0024001d
    9a7c:	0038002d 	.word	0x0038002d
    9a80:	00540045 	.word	0x00540045
    9a84:	00780065 	.word	0x00780065
    9a88:	00a4008d 	.word	0x00a4008d
    9a8c:	00d800bd 	.word	0x00d800bd
    9a90:	011400f5 	.word	0x011400f5
		print_formatted(output, str);
    9a94:	4651      	mov	r1, sl
    9a96:	4648      	mov	r0, r9
    9a98:	f7f9 ffd8 	bl	3a4c <print_formatted>
}
    9a9c:	46bd      	mov	sp, r7
    9a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
    9aa2:	682a      	ldr	r2, [r5, #0]
    9aa4:	4651      	mov	r1, sl
    9aa6:	4648      	mov	r0, r9
    9aa8:	f7f9 ffd0 	bl	3a4c <print_formatted>
		break;
    9aac:	e7f6      	b.n	9a9c <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
    9aae:	686b      	ldr	r3, [r5, #4]
    9ab0:	682a      	ldr	r2, [r5, #0]
    9ab2:	4651      	mov	r1, sl
    9ab4:	4648      	mov	r0, r9
    9ab6:	f7f9 ffc9 	bl	3a4c <print_formatted>
		break;
    9aba:	e7ef      	b.n	9a9c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
    9abc:	686b      	ldr	r3, [r5, #4]
    9abe:	682a      	ldr	r2, [r5, #0]
    9ac0:	68a9      	ldr	r1, [r5, #8]
    9ac2:	9100      	str	r1, [sp, #0]
    9ac4:	4651      	mov	r1, sl
    9ac6:	4648      	mov	r0, r9
    9ac8:	f7f9 ffc0 	bl	3a4c <print_formatted>
		break;
    9acc:	e7e6      	b.n	9a9c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    9ace:	686b      	ldr	r3, [r5, #4]
    9ad0:	682a      	ldr	r2, [r5, #0]
    9ad2:	68e9      	ldr	r1, [r5, #12]
    9ad4:	9101      	str	r1, [sp, #4]
    9ad6:	68a9      	ldr	r1, [r5, #8]
    9ad8:	9100      	str	r1, [sp, #0]
    9ada:	4651      	mov	r1, sl
    9adc:	4648      	mov	r0, r9
    9ade:	f7f9 ffb5 	bl	3a4c <print_formatted>
		break;
    9ae2:	e7db      	b.n	9a9c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    9ae4:	686b      	ldr	r3, [r5, #4]
    9ae6:	682a      	ldr	r2, [r5, #0]
    9ae8:	6929      	ldr	r1, [r5, #16]
    9aea:	9102      	str	r1, [sp, #8]
    9aec:	68e9      	ldr	r1, [r5, #12]
    9aee:	9101      	str	r1, [sp, #4]
    9af0:	68a9      	ldr	r1, [r5, #8]
    9af2:	9100      	str	r1, [sp, #0]
    9af4:	4651      	mov	r1, sl
    9af6:	4648      	mov	r0, r9
    9af8:	f7f9 ffa8 	bl	3a4c <print_formatted>
		break;
    9afc:	e7ce      	b.n	9a9c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    9afe:	686b      	ldr	r3, [r5, #4]
    9b00:	682a      	ldr	r2, [r5, #0]
    9b02:	6969      	ldr	r1, [r5, #20]
    9b04:	9103      	str	r1, [sp, #12]
    9b06:	6929      	ldr	r1, [r5, #16]
    9b08:	9102      	str	r1, [sp, #8]
    9b0a:	68e9      	ldr	r1, [r5, #12]
    9b0c:	9101      	str	r1, [sp, #4]
    9b0e:	68a9      	ldr	r1, [r5, #8]
    9b10:	9100      	str	r1, [sp, #0]
    9b12:	4651      	mov	r1, sl
    9b14:	4648      	mov	r0, r9
    9b16:	f7f9 ff99 	bl	3a4c <print_formatted>
		break;
    9b1a:	e7bf      	b.n	9a9c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    9b1c:	686b      	ldr	r3, [r5, #4]
    9b1e:	682a      	ldr	r2, [r5, #0]
    9b20:	69a9      	ldr	r1, [r5, #24]
    9b22:	9104      	str	r1, [sp, #16]
    9b24:	6969      	ldr	r1, [r5, #20]
    9b26:	9103      	str	r1, [sp, #12]
    9b28:	6929      	ldr	r1, [r5, #16]
    9b2a:	9102      	str	r1, [sp, #8]
    9b2c:	68e9      	ldr	r1, [r5, #12]
    9b2e:	9101      	str	r1, [sp, #4]
    9b30:	68a9      	ldr	r1, [r5, #8]
    9b32:	9100      	str	r1, [sp, #0]
    9b34:	4651      	mov	r1, sl
    9b36:	4648      	mov	r0, r9
    9b38:	f7f9 ff88 	bl	3a4c <print_formatted>
		break;
    9b3c:	e7ae      	b.n	9a9c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    9b3e:	686b      	ldr	r3, [r5, #4]
    9b40:	682a      	ldr	r2, [r5, #0]
    9b42:	69e9      	ldr	r1, [r5, #28]
    9b44:	9105      	str	r1, [sp, #20]
    9b46:	69a9      	ldr	r1, [r5, #24]
    9b48:	9104      	str	r1, [sp, #16]
    9b4a:	6969      	ldr	r1, [r5, #20]
    9b4c:	9103      	str	r1, [sp, #12]
    9b4e:	6929      	ldr	r1, [r5, #16]
    9b50:	9102      	str	r1, [sp, #8]
    9b52:	68e9      	ldr	r1, [r5, #12]
    9b54:	9101      	str	r1, [sp, #4]
    9b56:	68a9      	ldr	r1, [r5, #8]
    9b58:	9100      	str	r1, [sp, #0]
    9b5a:	4651      	mov	r1, sl
    9b5c:	4648      	mov	r0, r9
    9b5e:	f7f9 ff75 	bl	3a4c <print_formatted>
		break;
    9b62:	e79b      	b.n	9a9c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    9b64:	686b      	ldr	r3, [r5, #4]
    9b66:	682a      	ldr	r2, [r5, #0]
    9b68:	6a29      	ldr	r1, [r5, #32]
    9b6a:	9106      	str	r1, [sp, #24]
    9b6c:	69e9      	ldr	r1, [r5, #28]
    9b6e:	9105      	str	r1, [sp, #20]
    9b70:	69a9      	ldr	r1, [r5, #24]
    9b72:	9104      	str	r1, [sp, #16]
    9b74:	6969      	ldr	r1, [r5, #20]
    9b76:	9103      	str	r1, [sp, #12]
    9b78:	6929      	ldr	r1, [r5, #16]
    9b7a:	9102      	str	r1, [sp, #8]
    9b7c:	68e9      	ldr	r1, [r5, #12]
    9b7e:	9101      	str	r1, [sp, #4]
    9b80:	68a9      	ldr	r1, [r5, #8]
    9b82:	9100      	str	r1, [sp, #0]
    9b84:	4651      	mov	r1, sl
    9b86:	4648      	mov	r0, r9
    9b88:	f7f9 ff60 	bl	3a4c <print_formatted>
		break;
    9b8c:	e786      	b.n	9a9c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    9b8e:	686b      	ldr	r3, [r5, #4]
    9b90:	682a      	ldr	r2, [r5, #0]
    9b92:	6a69      	ldr	r1, [r5, #36]	; 0x24
    9b94:	9107      	str	r1, [sp, #28]
    9b96:	6a29      	ldr	r1, [r5, #32]
    9b98:	9106      	str	r1, [sp, #24]
    9b9a:	69e9      	ldr	r1, [r5, #28]
    9b9c:	9105      	str	r1, [sp, #20]
    9b9e:	69a9      	ldr	r1, [r5, #24]
    9ba0:	9104      	str	r1, [sp, #16]
    9ba2:	6969      	ldr	r1, [r5, #20]
    9ba4:	9103      	str	r1, [sp, #12]
    9ba6:	6929      	ldr	r1, [r5, #16]
    9ba8:	9102      	str	r1, [sp, #8]
    9baa:	68e9      	ldr	r1, [r5, #12]
    9bac:	9101      	str	r1, [sp, #4]
    9bae:	68a9      	ldr	r1, [r5, #8]
    9bb0:	9100      	str	r1, [sp, #0]
    9bb2:	4651      	mov	r1, sl
    9bb4:	4648      	mov	r0, r9
    9bb6:	f7f9 ff49 	bl	3a4c <print_formatted>
		break;
    9bba:	e76f      	b.n	9a9c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    9bbc:	686b      	ldr	r3, [r5, #4]
    9bbe:	682a      	ldr	r2, [r5, #0]
    9bc0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    9bc2:	9108      	str	r1, [sp, #32]
    9bc4:	6a69      	ldr	r1, [r5, #36]	; 0x24
    9bc6:	9107      	str	r1, [sp, #28]
    9bc8:	6a29      	ldr	r1, [r5, #32]
    9bca:	9106      	str	r1, [sp, #24]
    9bcc:	69e9      	ldr	r1, [r5, #28]
    9bce:	9105      	str	r1, [sp, #20]
    9bd0:	69a9      	ldr	r1, [r5, #24]
    9bd2:	9104      	str	r1, [sp, #16]
    9bd4:	6969      	ldr	r1, [r5, #20]
    9bd6:	9103      	str	r1, [sp, #12]
    9bd8:	6929      	ldr	r1, [r5, #16]
    9bda:	9102      	str	r1, [sp, #8]
    9bdc:	68e9      	ldr	r1, [r5, #12]
    9bde:	9101      	str	r1, [sp, #4]
    9be0:	68a9      	ldr	r1, [r5, #8]
    9be2:	9100      	str	r1, [sp, #0]
    9be4:	4651      	mov	r1, sl
    9be6:	4648      	mov	r0, r9
    9be8:	f7f9 ff30 	bl	3a4c <print_formatted>
		break;
    9bec:	e756      	b.n	9a9c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    9bee:	686b      	ldr	r3, [r5, #4]
    9bf0:	682a      	ldr	r2, [r5, #0]
    9bf2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    9bf4:	9109      	str	r1, [sp, #36]	; 0x24
    9bf6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    9bf8:	9108      	str	r1, [sp, #32]
    9bfa:	6a69      	ldr	r1, [r5, #36]	; 0x24
    9bfc:	9107      	str	r1, [sp, #28]
    9bfe:	6a29      	ldr	r1, [r5, #32]
    9c00:	9106      	str	r1, [sp, #24]
    9c02:	69e9      	ldr	r1, [r5, #28]
    9c04:	9105      	str	r1, [sp, #20]
    9c06:	69a9      	ldr	r1, [r5, #24]
    9c08:	9104      	str	r1, [sp, #16]
    9c0a:	6969      	ldr	r1, [r5, #20]
    9c0c:	9103      	str	r1, [sp, #12]
    9c0e:	6929      	ldr	r1, [r5, #16]
    9c10:	9102      	str	r1, [sp, #8]
    9c12:	68e9      	ldr	r1, [r5, #12]
    9c14:	9101      	str	r1, [sp, #4]
    9c16:	68a9      	ldr	r1, [r5, #8]
    9c18:	9100      	str	r1, [sp, #0]
    9c1a:	4651      	mov	r1, sl
    9c1c:	4648      	mov	r0, r9
    9c1e:	f7f9 ff15 	bl	3a4c <print_formatted>
		break;
    9c22:	e73b      	b.n	9a9c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    9c24:	686b      	ldr	r3, [r5, #4]
    9c26:	682a      	ldr	r2, [r5, #0]
    9c28:	6b29      	ldr	r1, [r5, #48]	; 0x30
    9c2a:	910a      	str	r1, [sp, #40]	; 0x28
    9c2c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    9c2e:	9109      	str	r1, [sp, #36]	; 0x24
    9c30:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    9c32:	9108      	str	r1, [sp, #32]
    9c34:	6a69      	ldr	r1, [r5, #36]	; 0x24
    9c36:	9107      	str	r1, [sp, #28]
    9c38:	6a29      	ldr	r1, [r5, #32]
    9c3a:	9106      	str	r1, [sp, #24]
    9c3c:	69e9      	ldr	r1, [r5, #28]
    9c3e:	9105      	str	r1, [sp, #20]
    9c40:	69a9      	ldr	r1, [r5, #24]
    9c42:	9104      	str	r1, [sp, #16]
    9c44:	6969      	ldr	r1, [r5, #20]
    9c46:	9103      	str	r1, [sp, #12]
    9c48:	6929      	ldr	r1, [r5, #16]
    9c4a:	9102      	str	r1, [sp, #8]
    9c4c:	68e9      	ldr	r1, [r5, #12]
    9c4e:	9101      	str	r1, [sp, #4]
    9c50:	68a9      	ldr	r1, [r5, #8]
    9c52:	9100      	str	r1, [sp, #0]
    9c54:	4651      	mov	r1, sl
    9c56:	4648      	mov	r0, r9
    9c58:	f7f9 fef8 	bl	3a4c <print_formatted>
		break;
    9c5c:	e71e      	b.n	9a9c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    9c5e:	686b      	ldr	r3, [r5, #4]
    9c60:	682a      	ldr	r2, [r5, #0]
    9c62:	6b69      	ldr	r1, [r5, #52]	; 0x34
    9c64:	910b      	str	r1, [sp, #44]	; 0x2c
    9c66:	6b29      	ldr	r1, [r5, #48]	; 0x30
    9c68:	910a      	str	r1, [sp, #40]	; 0x28
    9c6a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    9c6c:	9109      	str	r1, [sp, #36]	; 0x24
    9c6e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    9c70:	9108      	str	r1, [sp, #32]
    9c72:	6a69      	ldr	r1, [r5, #36]	; 0x24
    9c74:	9107      	str	r1, [sp, #28]
    9c76:	6a29      	ldr	r1, [r5, #32]
    9c78:	9106      	str	r1, [sp, #24]
    9c7a:	69e9      	ldr	r1, [r5, #28]
    9c7c:	9105      	str	r1, [sp, #20]
    9c7e:	69a9      	ldr	r1, [r5, #24]
    9c80:	9104      	str	r1, [sp, #16]
    9c82:	6969      	ldr	r1, [r5, #20]
    9c84:	9103      	str	r1, [sp, #12]
    9c86:	6929      	ldr	r1, [r5, #16]
    9c88:	9102      	str	r1, [sp, #8]
    9c8a:	68e9      	ldr	r1, [r5, #12]
    9c8c:	9101      	str	r1, [sp, #4]
    9c8e:	68a9      	ldr	r1, [r5, #8]
    9c90:	9100      	str	r1, [sp, #0]
    9c92:	4651      	mov	r1, sl
    9c94:	4648      	mov	r0, r9
    9c96:	f7f9 fed9 	bl	3a4c <print_formatted>
		break;
    9c9a:	e6ff      	b.n	9a9c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    9c9c:	686b      	ldr	r3, [r5, #4]
    9c9e:	682a      	ldr	r2, [r5, #0]
    9ca0:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    9ca2:	910c      	str	r1, [sp, #48]	; 0x30
    9ca4:	6b69      	ldr	r1, [r5, #52]	; 0x34
    9ca6:	910b      	str	r1, [sp, #44]	; 0x2c
    9ca8:	6b29      	ldr	r1, [r5, #48]	; 0x30
    9caa:	910a      	str	r1, [sp, #40]	; 0x28
    9cac:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    9cae:	9109      	str	r1, [sp, #36]	; 0x24
    9cb0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    9cb2:	9108      	str	r1, [sp, #32]
    9cb4:	6a69      	ldr	r1, [r5, #36]	; 0x24
    9cb6:	9107      	str	r1, [sp, #28]
    9cb8:	6a29      	ldr	r1, [r5, #32]
    9cba:	9106      	str	r1, [sp, #24]
    9cbc:	69e9      	ldr	r1, [r5, #28]
    9cbe:	9105      	str	r1, [sp, #20]
    9cc0:	69a9      	ldr	r1, [r5, #24]
    9cc2:	9104      	str	r1, [sp, #16]
    9cc4:	6969      	ldr	r1, [r5, #20]
    9cc6:	9103      	str	r1, [sp, #12]
    9cc8:	6929      	ldr	r1, [r5, #16]
    9cca:	9102      	str	r1, [sp, #8]
    9ccc:	68e9      	ldr	r1, [r5, #12]
    9cce:	9101      	str	r1, [sp, #4]
    9cd0:	68a9      	ldr	r1, [r5, #8]
    9cd2:	9100      	str	r1, [sp, #0]
    9cd4:	4651      	mov	r1, sl
    9cd6:	4648      	mov	r0, r9
    9cd8:	f7f9 feb8 	bl	3a4c <print_formatted>
}
    9cdc:	e6de      	b.n	9a9c <std_print+0x74>

00009cde <log_output_flush>:
{
    9cde:	b510      	push	{r4, lr}
    9ce0:	4604      	mov	r4, r0
		     output->control_block->offset,
    9ce2:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    9ce4:	6853      	ldr	r3, [r2, #4]
    9ce6:	6812      	ldr	r2, [r2, #0]
    9ce8:	6881      	ldr	r1, [r0, #8]
    9cea:	6800      	ldr	r0, [r0, #0]
    9cec:	f7ff fe77 	bl	99de <buffer_write>
	output->control_block->offset = 0;
    9cf0:	6863      	ldr	r3, [r4, #4]
    9cf2:	2200      	movs	r2, #0
    9cf4:	601a      	str	r2, [r3, #0]
}
    9cf6:	bd10      	pop	{r4, pc}

00009cf8 <out_func>:
{
    9cf8:	b538      	push	{r3, r4, r5, lr}
    9cfa:	4605      	mov	r5, r0
    9cfc:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    9cfe:	684b      	ldr	r3, [r1, #4]
    9d00:	681a      	ldr	r2, [r3, #0]
    9d02:	68cb      	ldr	r3, [r1, #12]
    9d04:	429a      	cmp	r2, r3
    9d06:	d00f      	beq.n	9d28 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
    9d08:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    9d0a:	f3bf 8f5b 	dmb	ish
    9d0e:	e853 2f00 	ldrex	r2, [r3]
    9d12:	1c51      	adds	r1, r2, #1
    9d14:	e843 1000 	strex	r0, r1, [r3]
    9d18:	2800      	cmp	r0, #0
    9d1a:	d1f8      	bne.n	9d0e <out_func+0x16>
    9d1c:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    9d20:	68a3      	ldr	r3, [r4, #8]
    9d22:	549d      	strb	r5, [r3, r2]
}
    9d24:	2000      	movs	r0, #0
    9d26:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
    9d28:	4608      	mov	r0, r1
    9d2a:	f7ff ffd8 	bl	9cde <log_output_flush>
    9d2e:	e7eb      	b.n	9d08 <out_func+0x10>

00009d30 <log_output_msg_process>:
{
    9d30:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d32:	b085      	sub	sp, #20
    9d34:	4606      	mov	r6, r0
    9d36:	460c      	mov	r4, r1
    9d38:	4617      	mov	r7, r2
    9d3a:	7a0b      	ldrb	r3, [r1, #8]
    9d3c:	f083 0301 	eor.w	r3, r3, #1
    9d40:	f003 0201 	and.w	r2, r3, #1
	return msg->hdr.timestamp;
    9d44:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
    9d46:	7a89      	ldrb	r1, [r1, #10]
	return msg->hdr.ids.domain_id;
    9d48:	f3c1 0cc2 	ubfx	ip, r1, #3, #3
	return msg->hdr.ids.source_id;
    9d4c:	8960      	ldrh	r0, [r4, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
    9d4e:	f3c0 1089 	ubfx	r0, r0, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
    9d52:	f011 0507 	ands.w	r5, r1, #7
    9d56:	d10f      	bne.n	9d78 <log_output_msg_process+0x48>
    9d58:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    9d5a:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
    9d5c:	f013 0f01 	tst.w	r3, #1
    9d60:	d014      	beq.n	9d8c <log_output_msg_process+0x5c>
	} else if (raw_string) {
    9d62:	b9c5      	cbnz	r5, 9d96 <log_output_msg_process+0x66>
		raw_string_print(msg, output);
    9d64:	4631      	mov	r1, r6
    9d66:	4620      	mov	r0, r4
    9d68:	f7f9 fff0 	bl	3d4c <raw_string_print>
	if (!raw_string) {
    9d6c:	b9cd      	cbnz	r5, 9da2 <log_output_msg_process+0x72>
	log_output_flush(output);
    9d6e:	4630      	mov	r0, r6
    9d70:	f7ff ffb5 	bl	9cde <log_output_flush>
}
    9d74:	b005      	add	sp, #20
    9d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
    9d78:	9002      	str	r0, [sp, #8]
    9d7a:	f8cd c004 	str.w	ip, [sp, #4]
    9d7e:	9500      	str	r5, [sp, #0]
    9d80:	4639      	mov	r1, r7
    9d82:	4630      	mov	r0, r6
    9d84:	f7f9 ff7c 	bl	3c80 <prefix_print>
    9d88:	4602      	mov	r2, r0
    9d8a:	e7e6      	b.n	9d5a <log_output_msg_process+0x2a>
		std_print(msg, output);
    9d8c:	4631      	mov	r1, r6
    9d8e:	4620      	mov	r0, r4
    9d90:	f7ff fe4a 	bl	9a28 <std_print>
    9d94:	e7ea      	b.n	9d6c <log_output_msg_process+0x3c>
		hexdump_print(msg, output, prefix_offset, flags);
    9d96:	463b      	mov	r3, r7
    9d98:	4631      	mov	r1, r6
    9d9a:	4620      	mov	r0, r4
    9d9c:	f7f9 ffac 	bl	3cf8 <hexdump_print>
    9da0:	e7e4      	b.n	9d6c <log_output_msg_process+0x3c>
		postfix_print(output, flags, level);
    9da2:	462a      	mov	r2, r5
    9da4:	4639      	mov	r1, r7
    9da6:	4630      	mov	r0, r6
    9da8:	f7ff fe32 	bl	9a10 <postfix_print>
    9dac:	e7df      	b.n	9d6e <log_output_msg_process+0x3e>

00009dae <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    9dae:	2200      	movs	r2, #0
    9db0:	6002      	str	r2, [r0, #0]
    9db2:	6042      	str	r2, [r0, #4]
    9db4:	6082      	str	r2, [r0, #8]
}
    9db6:	4770      	bx	lr

00009db8 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    9db8:	b538      	push	{r3, r4, r5, lr}
    9dba:	4604      	mov	r4, r0

	if (esf != NULL) {
    9dbc:	460d      	mov	r5, r1
    9dbe:	b111      	cbz	r1, 9dc6 <z_arm_fatal_error+0xe>
		esf_dump(esf);
    9dc0:	4608      	mov	r0, r1
    9dc2:	f7fa fa17 	bl	41f4 <esf_dump>
	}
	z_fatal_error(reason, esf);
    9dc6:	4629      	mov	r1, r5
    9dc8:	4620      	mov	r0, r4
    9dca:	f7fd fc57 	bl	767c <z_fatal_error>
}
    9dce:	bd38      	pop	{r3, r4, r5, pc}

00009dd0 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    9dd0:	b508      	push	{r3, lr}
    9dd2:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    9dd4:	6800      	ldr	r0, [r0, #0]
    9dd6:	f7ff ffef 	bl	9db8 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    9dda:	bd08      	pop	{r3, pc}

00009ddc <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
    9ddc:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    9dde:	2100      	movs	r1, #0
    9de0:	2001      	movs	r0, #1
    9de2:	f7ff ffe9 	bl	9db8 <z_arm_fatal_error>
}
    9de6:	bd08      	pop	{r3, pc}

00009de8 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    9de8:	b508      	push	{r3, lr}
	handler();
    9dea:	f7fa fa99 	bl	4320 <z_SysNmiOnReset>
	z_arm_int_exit();
    9dee:	f7fa fb95 	bl	451c <z_arm_exc_exit>
}
    9df2:	bd08      	pop	{r3, pc}

00009df4 <memory_fault_recoverable>:
}
    9df4:	2000      	movs	r0, #0
    9df6:	4770      	bx	lr

00009df8 <fault_handle>:
{
    9df8:	b508      	push	{r3, lr}
	*recoverable = false;
    9dfa:	2300      	movs	r3, #0
    9dfc:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    9dfe:	1ecb      	subs	r3, r1, #3
    9e00:	2b09      	cmp	r3, #9
    9e02:	d81a      	bhi.n	9e3a <fault_handle+0x42>
    9e04:	e8df f003 	tbb	[pc, r3]
    9e08:	110d0905 	.word	0x110d0905
    9e0c:	19191919 	.word	0x19191919
    9e10:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    9e12:	4611      	mov	r1, r2
    9e14:	f7fa fe16 	bl	4a44 <hard_fault>
}
    9e18:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    9e1a:	2100      	movs	r1, #0
    9e1c:	f7fa fd30 	bl	4880 <mem_manage_fault>
		break;
    9e20:	e7fa      	b.n	9e18 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    9e22:	2100      	movs	r1, #0
    9e24:	f7fa fc54 	bl	46d0 <bus_fault>
		break;
    9e28:	e7f6      	b.n	9e18 <fault_handle+0x20>
		reason = usage_fault(esf);
    9e2a:	f7fa fb85 	bl	4538 <usage_fault>
		break;
    9e2e:	e7f3      	b.n	9e18 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    9e30:	4611      	mov	r1, r2
    9e32:	f7fa fc33 	bl	469c <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    9e36:	2000      	movs	r0, #0
		break;
    9e38:	e7ee      	b.n	9e18 <fault_handle+0x20>
		reserved_exception(esf, fault);
    9e3a:	f7fa fea9 	bl	4b90 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    9e3e:	2000      	movs	r0, #0
	return reason;
    9e40:	e7ea      	b.n	9e18 <fault_handle+0x20>

00009e42 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    9e42:	6843      	ldr	r3, [r0, #4]
    9e44:	1e5a      	subs	r2, r3, #1
		&&
    9e46:	4213      	tst	r3, r2
    9e48:	d106      	bne.n	9e58 <mpu_partition_is_valid+0x16>
		&&
    9e4a:	2b1f      	cmp	r3, #31
    9e4c:	d906      	bls.n	9e5c <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    9e4e:	6803      	ldr	r3, [r0, #0]
		&&
    9e50:	421a      	tst	r2, r3
    9e52:	d005      	beq.n	9e60 <mpu_partition_is_valid+0x1e>
    9e54:	2000      	movs	r0, #0
    9e56:	4770      	bx	lr
    9e58:	2000      	movs	r0, #0
    9e5a:	4770      	bx	lr
    9e5c:	2000      	movs	r0, #0
    9e5e:	4770      	bx	lr
    9e60:	2001      	movs	r0, #1
}
    9e62:	4770      	bx	lr

00009e64 <mpu_configure_region>:
{
    9e64:	b500      	push	{lr}
    9e66:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    9e68:	680b      	ldr	r3, [r1, #0]
    9e6a:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    9e6c:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    9e6e:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    9e70:	2b20      	cmp	r3, #32
    9e72:	d912      	bls.n	9e9a <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    9e74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    9e78:	d811      	bhi.n	9e9e <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    9e7a:	3b01      	subs	r3, #1
    9e7c:	fab3 f383 	clz	r3, r3
    9e80:	f1c3 031f 	rsb	r3, r3, #31
    9e84:	005b      	lsls	r3, r3, #1
    9e86:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    9e8a:	4313      	orrs	r3, r2
    9e8c:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    9e8e:	a901      	add	r1, sp, #4
    9e90:	f7fa ffe0 	bl	4e54 <region_allocate_and_init>
}
    9e94:	b005      	add	sp, #20
    9e96:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    9e9a:	2308      	movs	r3, #8
    9e9c:	e7f5      	b.n	9e8a <mpu_configure_region+0x26>
		return REGION_4G;
    9e9e:	233e      	movs	r3, #62	; 0x3e
    9ea0:	e7f3      	b.n	9e8a <mpu_configure_region+0x26>

00009ea2 <arm_core_mpu_configure_static_mpu_regions>:
{
    9ea2:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    9ea4:	f7fb f838 	bl	4f18 <mpu_configure_static_mpu_regions>
}
    9ea8:	bd08      	pop	{r3, pc}

00009eaa <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    9eaa:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    9eac:	f7fb f83e 	bl	4f2c <mpu_configure_dynamic_mpu_regions>
}
    9eb0:	bd08      	pop	{r3, pc}

00009eb2 <malloc_prepare>:
}
    9eb2:	2000      	movs	r0, #0
    9eb4:	4770      	bx	lr

00009eb6 <_stdout_hook_default>:
}
    9eb6:	f04f 30ff 	mov.w	r0, #4294967295
    9eba:	4770      	bx	lr

00009ebc <__errno>:
	k_mutex_unlock((struct k_mutex *)lock);
}
#endif /* CONFIG_MULTITHREADING */

__weak int *__errno(void)
{
    9ebc:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    9ebe:	f7fd fba7 	bl	7610 <z_impl_z_errno>
	return z_errno();
}
    9ec2:	bd08      	pop	{r3, pc}

00009ec4 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    9ec4:	b084      	sub	sp, #16
    9ec6:	ab04      	add	r3, sp, #16
    9ec8:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    9ecc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9ed0:	2b06      	cmp	r3, #6
    9ed2:	d001      	beq.n	9ed8 <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    9ed4:	b004      	add	sp, #16
    9ed6:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    9ed8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9edc:	2201      	movs	r2, #1
    9ede:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    9ee2:	f3bf 8f4f 	dsb	sy
        __WFE();
    9ee6:	bf20      	wfe
    while (true)
    9ee8:	e7fd      	b.n	9ee6 <pm_power_state_set+0x22>

00009eea <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    9eea:	b084      	sub	sp, #16
    9eec:	ab04      	add	r3, sp, #16
    9eee:	e903 0007 	stmdb	r3, {r0, r1, r2}
    9ef2:	2300      	movs	r3, #0
    9ef4:	f383 8811 	msr	BASEPRI, r3
    9ef8:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    9efc:	b004      	add	sp, #16
    9efe:	4770      	bx	lr

00009f00 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    9f00:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    9f02:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    9f06:	0089      	lsls	r1, r1, #2
    9f08:	3138      	adds	r1, #56	; 0x38
}
    9f0a:	4408      	add	r0, r1
    9f0c:	4770      	bx	lr

00009f0e <get_sub_config>:
	const struct nrf_clock_control_config *config =
    9f0e:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    9f10:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    9f14:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    9f18:	4770      	bx	lr

00009f1a <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    9f1a:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    9f1c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    9f20:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    9f24:	4770      	bx	lr

00009f26 <get_status>:
{
    9f26:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    9f28:	b2c9      	uxtb	r1, r1
    9f2a:	f7ff ffe9 	bl	9f00 <get_sub_data>
    9f2e:	6880      	ldr	r0, [r0, #8]
}
    9f30:	f000 0007 	and.w	r0, r0, #7
    9f34:	bd08      	pop	{r3, pc}

00009f36 <set_off_state>:
	__asm__ volatile(
    9f36:	f04f 0320 	mov.w	r3, #32
    9f3a:	f3ef 8211 	mrs	r2, BASEPRI
    9f3e:	f383 8812 	msr	BASEPRI_MAX, r3
    9f42:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    9f46:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    9f48:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    9f4c:	d001      	beq.n	9f52 <set_off_state+0x1c>
    9f4e:	428b      	cmp	r3, r1
    9f50:	d107      	bne.n	9f62 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    9f52:	2301      	movs	r3, #1
    9f54:	6003      	str	r3, [r0, #0]
	int err = 0;
    9f56:	2000      	movs	r0, #0
	__asm__ volatile(
    9f58:	f382 8811 	msr	BASEPRI, r2
    9f5c:	f3bf 8f6f 	isb	sy
}
    9f60:	4770      	bx	lr
		err = -EPERM;
    9f62:	f04f 30ff 	mov.w	r0, #4294967295
    9f66:	e7f7      	b.n	9f58 <set_off_state+0x22>

00009f68 <set_starting_state>:
{
    9f68:	b410      	push	{r4}
	__asm__ volatile(
    9f6a:	f04f 0320 	mov.w	r3, #32
    9f6e:	f3ef 8211 	mrs	r2, BASEPRI
    9f72:	f383 8812 	msr	BASEPRI_MAX, r3
    9f76:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    9f7a:	6803      	ldr	r3, [r0, #0]
    9f7c:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    9f80:	f003 0307 	and.w	r3, r3, #7
    9f84:	2b01      	cmp	r3, #1
    9f86:	d009      	beq.n	9f9c <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
    9f88:	428c      	cmp	r4, r1
    9f8a:	d00a      	beq.n	9fa2 <set_starting_state+0x3a>
		err = -EPERM;
    9f8c:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    9f90:	f382 8811 	msr	BASEPRI, r2
    9f94:	f3bf 8f6f 	isb	sy
}
    9f98:	bc10      	pop	{r4}
    9f9a:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    9f9c:	6001      	str	r1, [r0, #0]
	int err = 0;
    9f9e:	2000      	movs	r0, #0
    9fa0:	e7f6      	b.n	9f90 <set_starting_state+0x28>
		err = -EALREADY;
    9fa2:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9fa6:	e7f3      	b.n	9f90 <set_starting_state+0x28>

00009fa8 <set_on_state>:
	__asm__ volatile(
    9fa8:	f04f 0320 	mov.w	r3, #32
    9fac:	f3ef 8211 	mrs	r2, BASEPRI
    9fb0:	f383 8812 	msr	BASEPRI_MAX, r3
    9fb4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    9fb8:	6803      	ldr	r3, [r0, #0]
    9fba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9fbe:	f043 0302 	orr.w	r3, r3, #2
    9fc2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    9fc4:	f382 8811 	msr	BASEPRI, r2
    9fc8:	f3bf 8f6f 	isb	sy
}
    9fcc:	4770      	bx	lr

00009fce <clkstarted_handle>:
{
    9fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9fd0:	4606      	mov	r6, r0
    9fd2:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    9fd4:	f7ff ff94 	bl	9f00 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    9fd8:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    9fda:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    9fdc:	2300      	movs	r3, #0
    9fde:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    9fe2:	f7ff ffe1 	bl	9fa8 <set_on_state>
	if (callback) {
    9fe6:	b11d      	cbz	r5, 9ff0 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    9fe8:	463a      	mov	r2, r7
    9fea:	4621      	mov	r1, r4
    9fec:	4630      	mov	r0, r6
    9fee:	47a8      	blx	r5
}
    9ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009ff2 <stop>:
{
    9ff2:	b570      	push	{r4, r5, r6, lr}
    9ff4:	4606      	mov	r6, r0
    9ff6:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    9ff8:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    9ffa:	4621      	mov	r1, r4
    9ffc:	f7ff ff80 	bl	9f00 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    a000:	4629      	mov	r1, r5
    a002:	3008      	adds	r0, #8
    a004:	f7ff ff97 	bl	9f36 <set_off_state>
	if (err < 0) {
    a008:	2800      	cmp	r0, #0
    a00a:	db06      	blt.n	a01a <stop+0x28>
	get_sub_config(dev, type)->stop();
    a00c:	4621      	mov	r1, r4
    a00e:	4630      	mov	r0, r6
    a010:	f7ff ff7d 	bl	9f0e <get_sub_config>
    a014:	6843      	ldr	r3, [r0, #4]
    a016:	4798      	blx	r3
	return 0;
    a018:	2000      	movs	r0, #0
}
    a01a:	bd70      	pop	{r4, r5, r6, pc}

0000a01c <api_stop>:
{
    a01c:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    a01e:	2280      	movs	r2, #128	; 0x80
    a020:	f7ff ffe7 	bl	9ff2 <stop>
}
    a024:	bd08      	pop	{r3, pc}

0000a026 <async_start>:
{
    a026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a02a:	4606      	mov	r6, r0
    a02c:	4690      	mov	r8, r2
    a02e:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    a030:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    a032:	4629      	mov	r1, r5
    a034:	f7ff ff64 	bl	9f00 <get_sub_data>
    a038:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    a03a:	9906      	ldr	r1, [sp, #24]
    a03c:	3008      	adds	r0, #8
    a03e:	f7ff ff93 	bl	9f68 <set_starting_state>
	if (err < 0) {
    a042:	2800      	cmp	r0, #0
    a044:	db09      	blt.n	a05a <async_start+0x34>
	subdata->cb = cb;
    a046:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    a04a:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    a04c:	4629      	mov	r1, r5
    a04e:	4630      	mov	r0, r6
    a050:	f7ff ff5d 	bl	9f0e <get_sub_config>
    a054:	6803      	ldr	r3, [r0, #0]
    a056:	4798      	blx	r3
	return 0;
    a058:	2000      	movs	r0, #0
}
    a05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a05e <api_start>:
{
    a05e:	b510      	push	{r4, lr}
    a060:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    a062:	2480      	movs	r4, #128	; 0x80
    a064:	9400      	str	r4, [sp, #0]
    a066:	f7ff ffde 	bl	a026 <async_start>
}
    a06a:	b002      	add	sp, #8
    a06c:	bd10      	pop	{r4, pc}

0000a06e <onoff_started_callback>:
{
    a06e:	b510      	push	{r4, lr}
    a070:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    a072:	b2c9      	uxtb	r1, r1
    a074:	f7ff ff51 	bl	9f1a <get_onoff_manager>
	notify(mgr, 0);
    a078:	2100      	movs	r1, #0
    a07a:	47a0      	blx	r4
}
    a07c:	bd10      	pop	{r4, pc}

0000a07e <hfclk_start>:
{
    a07e:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    a080:	2001      	movs	r0, #1
    a082:	f7fc fb69 	bl	6758 <nrfx_clock_start>
}
    a086:	bd08      	pop	{r3, pc}

0000a088 <hfclk_stop>:
{
    a088:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    a08a:	2001      	movs	r0, #1
    a08c:	f7fc fba2 	bl	67d4 <nrfx_clock_stop>
}
    a090:	bd08      	pop	{r3, pc}

0000a092 <lfclk_stop>:
{
    a092:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    a094:	2000      	movs	r0, #0
    a096:	f7fc fb9d 	bl	67d4 <nrfx_clock_stop>
}
    a09a:	bd08      	pop	{r3, pc}

0000a09c <blocking_start_callback>:
{
    a09c:	b508      	push	{r3, lr}
    a09e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    a0a0:	f7fd fe74 	bl	7d8c <z_impl_k_sem_give>
}
    a0a4:	bd08      	pop	{r3, pc}

0000a0a6 <wait>:
{
    a0a6:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    a0a8:	f000 fbff 	bl	a8aa <k_is_in_isr>
    a0ac:	b100      	cbz	r0, a0b0 <wait+0xa>
}
    a0ae:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
    a0b0:	2042      	movs	r0, #66	; 0x42
    a0b2:	2100      	movs	r1, #0
    a0b4:	f7fe fa48 	bl	8548 <z_impl_k_sleep>
    a0b8:	e7f9      	b.n	a0ae <wait+0x8>

0000a0ba <get_pull>:
	if (flags & GPIO_PULL_UP) {
    a0ba:	f010 0f10 	tst.w	r0, #16
    a0be:	d104      	bne.n	a0ca <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    a0c0:	f010 0f20 	tst.w	r0, #32
    a0c4:	d103      	bne.n	a0ce <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    a0c6:	2000      	movs	r0, #0
    a0c8:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    a0ca:	2003      	movs	r0, #3
    a0cc:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    a0ce:	2001      	movs	r0, #1
}
    a0d0:	4770      	bx	lr

0000a0d2 <gpio_nrfx_port_get_raw>:
	return port->config;
    a0d2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a0d4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    a0d6:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    a0da:	600b      	str	r3, [r1, #0]
}
    a0dc:	2000      	movs	r0, #0
    a0de:	4770      	bx	lr

0000a0e0 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    a0e0:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a0e2:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    a0e4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    a0e8:	4042      	eors	r2, r0
    a0ea:	400a      	ands	r2, r1
    a0ec:	4042      	eors	r2, r0
    p_reg->OUT = value;
    a0ee:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    a0f2:	2000      	movs	r0, #0
    a0f4:	4770      	bx	lr

0000a0f6 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    a0f6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a0f8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    a0fa:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    a0fe:	2000      	movs	r0, #0
    a100:	4770      	bx	lr

0000a102 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    a102:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a104:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    a106:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    a10a:	2000      	movs	r0, #0
    a10c:	4770      	bx	lr

0000a10e <gpio_nrfx_port_toggle_bits>:
	return port->config;
    a10e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a110:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    a112:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    a116:	404b      	eors	r3, r1
    p_reg->OUT = value;
    a118:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    a11c:	2000      	movs	r0, #0
    a11e:	4770      	bx	lr

0000a120 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    a120:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    a124:	d007      	beq.n	a136 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    a126:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
    a12a:	d00d      	beq.n	a148 <get_trigger+0x28>
    a12c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
    a130:	d008      	beq.n	a144 <get_trigger+0x24>
    a132:	2001      	movs	r0, #1
}
    a134:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    a136:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
    a13a:	d001      	beq.n	a140 <get_trigger+0x20>
    a13c:	2005      	movs	r0, #5
    a13e:	4770      	bx	lr
    a140:	2004      	movs	r0, #4
    a142:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    a144:	2002      	movs	r0, #2
    a146:	4770      	bx	lr
    a148:	2003      	movs	r0, #3
    a14a:	4770      	bx	lr

0000a14c <gpio_nrfx_manage_callback>:
{
    a14c:	b470      	push	{r4, r5, r6}
	return port->data;
    a14e:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    a150:	1d05      	adds	r5, r0, #4
	return list->head;
    a152:	6843      	ldr	r3, [r0, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    a154:	b1db      	cbz	r3, a18e <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    a156:	460e      	mov	r6, r1
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a158:	2400      	movs	r4, #0
    a15a:	e00a      	b.n	a172 <gpio_nrfx_manage_callback+0x26>
	return node->next;
    a15c:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    a15e:	6043      	str	r3, [r0, #4]
	return list->tail;
    a160:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    a162:	42a1      	cmp	r1, r4
    a164:	d10f      	bne.n	a186 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    a166:	606b      	str	r3, [r5, #4]
}
    a168:	e00d      	b.n	a186 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    a16a:	606c      	str	r4, [r5, #4]
}
    a16c:	e00b      	b.n	a186 <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a16e:	461c      	mov	r4, r3
    a170:	681b      	ldr	r3, [r3, #0]
    a172:	b15b      	cbz	r3, a18c <gpio_nrfx_manage_callback+0x40>
    a174:	429e      	cmp	r6, r3
    a176:	d1fa      	bne.n	a16e <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
    a178:	2c00      	cmp	r4, #0
    a17a:	d0ef      	beq.n	a15c <gpio_nrfx_manage_callback+0x10>
	return node->next;
    a17c:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    a17e:	6023      	str	r3, [r4, #0]
	return list->tail;
    a180:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    a182:	4299      	cmp	r1, r3
    a184:	d0f1      	beq.n	a16a <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
    a186:	2300      	movs	r3, #0
    a188:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a18a:	e000      	b.n	a18e <gpio_nrfx_manage_callback+0x42>
			if (!set) {
    a18c:	b152      	cbz	r2, a1a4 <gpio_nrfx_manage_callback+0x58>
				return -EINVAL;
			}
		}
	}

	if (set) {
    a18e:	b162      	cbz	r2, a1aa <gpio_nrfx_manage_callback+0x5e>
	return list->head;
    a190:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
    a192:	600b      	str	r3, [r1, #0]
	list->head = node;
    a194:	6041      	str	r1, [r0, #4]
	return list->tail;
    a196:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    a198:	b10b      	cbz	r3, a19e <gpio_nrfx_manage_callback+0x52>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    a19a:	2000      	movs	r0, #0
    a19c:	e006      	b.n	a1ac <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    a19e:	6069      	str	r1, [r5, #4]
    a1a0:	2000      	movs	r0, #0
}
    a1a2:	e003      	b.n	a1ac <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
    a1a4:	f06f 0015 	mvn.w	r0, #21
    a1a8:	e000      	b.n	a1ac <gpio_nrfx_manage_callback+0x60>
	return 0;
    a1aa:	2000      	movs	r0, #0
}
    a1ac:	bc70      	pop	{r4, r5, r6}
    a1ae:	4770      	bx	lr

0000a1b0 <nrfx_gpio_handler>:
{
    a1b0:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
    a1b2:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    a1b6:	0940      	lsrs	r0, r0, #5
    a1b8:	f7fb f964 	bl	5484 <get_dev>
	if (port == NULL) {
    a1bc:	b1d8      	cbz	r0, a1f6 <nrfx_gpio_handler+0x46>
    a1be:	4606      	mov	r6, r0
	return port->data;
    a1c0:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    a1c2:	2501      	movs	r5, #1
    a1c4:	40a5      	lsls	r5, r4
	return list->head;
    a1c6:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    a1c8:	b119      	cbz	r1, a1d2 <nrfx_gpio_handler+0x22>
    a1ca:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    a1cc:	b149      	cbz	r1, a1e2 <nrfx_gpio_handler+0x32>
	return node->next;
    a1ce:	680c      	ldr	r4, [r1, #0]
    a1d0:	e007      	b.n	a1e2 <nrfx_gpio_handler+0x32>
    a1d2:	460c      	mov	r4, r1
    a1d4:	e005      	b.n	a1e2 <nrfx_gpio_handler+0x32>
    a1d6:	b164      	cbz	r4, a1f2 <nrfx_gpio_handler+0x42>
    a1d8:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    a1da:	b104      	cbz	r4, a1de <nrfx_gpio_handler+0x2e>
	return node->next;
    a1dc:	6823      	ldr	r3, [r4, #0]
    a1de:	4621      	mov	r1, r4
    a1e0:	461c      	mov	r4, r3
    a1e2:	b141      	cbz	r1, a1f6 <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
    a1e4:	688a      	ldr	r2, [r1, #8]
    a1e6:	402a      	ands	r2, r5
    a1e8:	d0f5      	beq.n	a1d6 <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    a1ea:	684b      	ldr	r3, [r1, #4]
    a1ec:	4630      	mov	r0, r6
    a1ee:	4798      	blx	r3
    a1f0:	e7f1      	b.n	a1d6 <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    a1f2:	4623      	mov	r3, r4
    a1f4:	e7f3      	b.n	a1de <nrfx_gpio_handler+0x2e>
}
    a1f6:	bd70      	pop	{r4, r5, r6, pc}

0000a1f8 <spi_nrfx_release>:
{
    a1f8:	b510      	push	{r4, lr}
	return dev->data;
    a1fa:	6904      	ldr	r4, [r0, #16]
	return !!(ctx->config == config);
    a1fc:	6823      	ldr	r3, [r4, #0]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    a1fe:	428b      	cmp	r3, r1
    a200:	d131      	bne.n	a266 <spi_nrfx_release+0x6e>
	if (dev_data->busy) {
    a202:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    a206:	2b00      	cmp	r3, #0
    a208:	d130      	bne.n	a26c <spi_nrfx_release+0x74>
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    a20a:	6823      	ldr	r3, [r4, #0]
    a20c:	b1c3      	cbz	r3, a240 <spi_nrfx_release+0x48>
    a20e:	689b      	ldr	r3, [r3, #8]
    a210:	b1b3      	cbz	r3, a240 <spi_nrfx_release+0x48>
    a212:	681a      	ldr	r2, [r3, #0]
    a214:	b1a2      	cbz	r2, a240 <spi_nrfx_release+0x48>
			k_busy_wait(ctx->config->cs->delay);
    a216:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
    a218:	f000 fd58 	bl	accc <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    a21c:	6823      	ldr	r3, [r4, #0]
    a21e:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
    a220:	6818      	ldr	r0, [r3, #0]
    a222:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
    a224:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    a226:	681a      	ldr	r2, [r3, #0]
    a228:	2301      	movs	r3, #1
    a22a:	408b      	lsls	r3, r1
    a22c:	421a      	tst	r2, r3
    a22e:	d10b      	bne.n	a248 <spi_nrfx_release+0x50>
    a230:	2300      	movs	r3, #0
	if (value != 0)	{
    a232:	b15b      	cbz	r3, a24c <spi_nrfx_release+0x54>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    a234:	2301      	movs	r3, #1
    a236:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    a23a:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    a23c:	68db      	ldr	r3, [r3, #12]
    a23e:	4798      	blx	r3
	return sem->count;
    a240:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
    a242:	b153      	cbz	r3, a25a <spi_nrfx_release+0x62>
	return 0;
    a244:	2000      	movs	r0, #0
}
    a246:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
    a248:	2301      	movs	r3, #1
    a24a:	e7f2      	b.n	a232 <spi_nrfx_release+0x3a>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    a24c:	2301      	movs	r3, #1
    a24e:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    a252:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    a254:	691b      	ldr	r3, [r3, #16]
    a256:	4798      	blx	r3
	return gpio_pin_set(spec->port, spec->pin, value);
    a258:	e7f2      	b.n	a240 <spi_nrfx_release+0x48>
		ctx->owner = NULL;
    a25a:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
    a25c:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
    a260:	f7fd fd94 	bl	7d8c <z_impl_k_sem_give>
}
    a264:	e7ee      	b.n	a244 <spi_nrfx_release+0x4c>
		return -EINVAL;
    a266:	f06f 0015 	mvn.w	r0, #21
    a26a:	e7ec      	b.n	a246 <spi_nrfx_release+0x4e>
		return -EBUSY;
    a26c:	f06f 000f 	mvn.w	r0, #15
    a270:	e7e9      	b.n	a246 <spi_nrfx_release+0x4e>

0000a272 <spi_nrfx_transceive>:
{
    a272:	b510      	push	{r4, lr}
    a274:	b082      	sub	sp, #8
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL);
    a276:	2400      	movs	r4, #0
    a278:	9401      	str	r4, [sp, #4]
    a27a:	9400      	str	r4, [sp, #0]
    a27c:	f7fb fc5a 	bl	5b34 <transceive>
}
    a280:	b002      	add	sp, #8
    a282:	bd10      	pop	{r4, pc}

0000a284 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    a284:	4770      	bx	lr

0000a286 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    a286:	1a40      	subs	r0, r0, r1
}
    a288:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a28c:	4770      	bx	lr

0000a28e <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    a28e:	f100 0350 	add.w	r3, r0, #80	; 0x50
    a292:	009b      	lsls	r3, r3, #2
    a294:	b29b      	uxth	r3, r3
    a296:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a29a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    a29e:	2200      	movs	r2, #0
    a2a0:	601a      	str	r2, [r3, #0]
    a2a2:	681b      	ldr	r3, [r3, #0]
}
    a2a4:	4770      	bx	lr

0000a2a6 <absolute_time_to_cc>:
}
    a2a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a2aa:	4770      	bx	lr

0000a2ac <full_int_lock>:
	__asm__ volatile(
    a2ac:	f04f 0320 	mov.w	r3, #32
    a2b0:	f3ef 8011 	mrs	r0, BASEPRI
    a2b4:	f383 8812 	msr	BASEPRI_MAX, r3
    a2b8:	f3bf 8f6f 	isb	sy
}
    a2bc:	4770      	bx	lr

0000a2be <full_int_unlock>:
	__asm__ volatile(
    a2be:	f380 8811 	msr	BASEPRI, r0
    a2c2:	f3bf 8f6f 	isb	sy
}
    a2c6:	4770      	bx	lr

0000a2c8 <set_absolute_alarm>:
{
    a2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a2ca:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    a2cc:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    a2d0:	f7fb fd86 	bl	5de0 <get_comparator>
    a2d4:	4607      	mov	r7, r0
    a2d6:	e019      	b.n	a30c <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    a2d8:	2013      	movs	r0, #19
    a2da:	f000 fcf7 	bl	accc <z_impl_k_busy_wait>
}
    a2de:	e022      	b.n	a326 <set_absolute_alarm+0x5e>
		event_clear(chan);
    a2e0:	4630      	mov	r0, r6
    a2e2:	f7ff ffd4 	bl	a28e <event_clear>
		event_enable(chan);
    a2e6:	4630      	mov	r0, r6
    a2e8:	f7fb fd82 	bl	5df0 <event_enable>
		set_comparator(chan, cc_val);
    a2ec:	4629      	mov	r1, r5
    a2ee:	4630      	mov	r0, r6
    a2f0:	f7fb fd6c 	bl	5dcc <set_comparator>
		now2 = counter();
    a2f4:	f7fb fd90 	bl	5e18 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    a2f8:	4284      	cmp	r4, r0
    a2fa:	d01e      	beq.n	a33a <set_absolute_alarm+0x72>
    a2fc:	1c81      	adds	r1, r0, #2
    a2fe:	4628      	mov	r0, r5
    a300:	f7ff ffc1 	bl	a286 <counter_sub>
	} while ((now2 != now) &&
    a304:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    a308:	d917      	bls.n	a33a <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    a30a:	462f      	mov	r7, r5
		now = counter();
    a30c:	f7fb fd84 	bl	5e18 <counter>
    a310:	4604      	mov	r4, r0
		set_comparator(chan, now);
    a312:	4601      	mov	r1, r0
    a314:	4630      	mov	r0, r6
    a316:	f7fb fd59 	bl	5dcc <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    a31a:	4621      	mov	r1, r4
    a31c:	4638      	mov	r0, r7
    a31e:	f7ff ffb2 	bl	a286 <counter_sub>
    a322:	2801      	cmp	r0, #1
    a324:	d0d8      	beq.n	a2d8 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    a326:	1ca7      	adds	r7, r4, #2
    a328:	4639      	mov	r1, r7
    a32a:	4628      	mov	r0, r5
    a32c:	f7ff ffab 	bl	a286 <counter_sub>
    a330:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    a334:	d9d4      	bls.n	a2e0 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    a336:	463d      	mov	r5, r7
    a338:	e7d2      	b.n	a2e0 <set_absolute_alarm+0x18>
}
    a33a:	4628      	mov	r0, r5
    a33c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a33e <compare_set>:
{
    a33e:	b5f0      	push	{r4, r5, r6, r7, lr}
    a340:	b083      	sub	sp, #12
    a342:	4604      	mov	r4, r0
    a344:	4617      	mov	r7, r2
    a346:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    a348:	f7fb fd6c 	bl	5e24 <compare_int_lock>
    a34c:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    a34e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a350:	9301      	str	r3, [sp, #4]
    a352:	9b08      	ldr	r3, [sp, #32]
    a354:	9300      	str	r3, [sp, #0]
    a356:	463a      	mov	r2, r7
    a358:	462b      	mov	r3, r5
    a35a:	4620      	mov	r0, r4
    a35c:	f7fb fe50 	bl	6000 <compare_set_nolocks>
    a360:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    a362:	4631      	mov	r1, r6
    a364:	4620      	mov	r0, r4
    a366:	f7fb fdc1 	bl	5eec <compare_int_unlock>
}
    a36a:	4628      	mov	r0, r5
    a36c:	b003      	add	sp, #12
    a36e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a370 <sys_clock_cycle_get_32>:
{
    a370:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    a372:	f7fb fe25 	bl	5fc0 <z_nrf_rtc_timer_read>
}
    a376:	bd08      	pop	{r3, pc}

0000a378 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    a378:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    a37a:	4780      	blx	r0
}
    a37c:	bd08      	pop	{r3, pc}

0000a37e <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    a37e:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    a380:	f000 fca4 	bl	accc <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    a384:	bd08      	pop	{r3, pc}

0000a386 <nrfx_clock_enable>:
{
    a386:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    a388:	2000      	movs	r0, #0
    a38a:	f7f9 ffa5 	bl	42d8 <arch_irq_is_enabled>
    a38e:	b100      	cbz	r0, a392 <nrfx_clock_enable+0xc>
}
    a390:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    a392:	f7f9 ff7d 	bl	4290 <arch_irq_enable>
    a396:	e7fb      	b.n	a390 <nrfx_clock_enable+0xa>

0000a398 <pin_is_task_output>:
{
    a398:	b510      	push	{r4, lr}
    a39a:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    a39c:	f7fc fb04 	bl	69a8 <pin_is_output>
    a3a0:	b128      	cbz	r0, a3ae <pin_is_task_output+0x16>
    a3a2:	4620      	mov	r0, r4
    a3a4:	f7fc faea 	bl	697c <pin_in_use_by_te>
    a3a8:	b118      	cbz	r0, a3b2 <pin_is_task_output+0x1a>
    a3aa:	2001      	movs	r0, #1
    a3ac:	e000      	b.n	a3b0 <pin_is_task_output+0x18>
    a3ae:	2000      	movs	r0, #0
}
    a3b0:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    a3b2:	2000      	movs	r0, #0
    a3b4:	e7fc      	b.n	a3b0 <pin_is_task_output+0x18>

0000a3b6 <pin_is_input>:
{
    a3b6:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    a3b8:	f7fc faf6 	bl	69a8 <pin_is_output>
    a3bc:	f080 0001 	eor.w	r0, r0, #1
}
    a3c0:	b2c0      	uxtb	r0, r0
    a3c2:	bd08      	pop	{r3, pc}

0000a3c4 <gpiote_polarity_to_trigger>:
}
    a3c4:	4770      	bx	lr

0000a3c6 <gpiote_trigger_to_polarity>:
}
    a3c6:	4770      	bx	lr

0000a3c8 <is_level>:
}
    a3c8:	2803      	cmp	r0, #3
    a3ca:	bf94      	ite	ls
    a3cc:	2000      	movls	r0, #0
    a3ce:	2001      	movhi	r0, #1
    a3d0:	4770      	bx	lr

0000a3d2 <next_sense_cond_call_handler>:
{
    a3d2:	b570      	push	{r4, r5, r6, lr}
    a3d4:	4604      	mov	r4, r0
    a3d6:	460d      	mov	r5, r1
    a3d8:	4616      	mov	r6, r2
    if (is_level(trigger))
    a3da:	4608      	mov	r0, r1
    a3dc:	f7ff fff4 	bl	a3c8 <is_level>
    a3e0:	b9b8      	cbnz	r0, a412 <next_sense_cond_call_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    a3e2:	2e02      	cmp	r6, #2
    a3e4:	d037      	beq.n	a456 <next_sense_cond_call_handler+0x84>
    a3e6:	2002      	movs	r0, #2
    a3e8:	f004 031f 	and.w	r3, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    a3ec:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    a3f0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    a3f4:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    a3f8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    a3fc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    a400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    a404:	2d03      	cmp	r5, #3
    a406:	d02a      	beq.n	a45e <next_sense_cond_call_handler+0x8c>
    a408:	2e02      	cmp	r6, #2
    a40a:	d026      	beq.n	a45a <next_sense_cond_call_handler+0x88>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    a40c:	2e03      	cmp	r6, #3
    a40e:	d02b      	beq.n	a468 <next_sense_cond_call_handler+0x96>
}
    a410:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    a412:	4629      	mov	r1, r5
    a414:	4620      	mov	r0, r4
    a416:	f7fc fb19 	bl	6a4c <call_handler>
    *p_pin = pin_number & 0x1F;
    a41a:	f004 041f 	and.w	r4, r4, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    a41e:	f504 72e0 	add.w	r2, r4, #448	; 0x1c0
    a422:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    a426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a42a:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    a42e:	429e      	cmp	r6, r3
    a430:	d1ee      	bne.n	a410 <next_sense_cond_call_handler+0x3e>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    a432:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    a436:	4614      	mov	r4, r2
    a438:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    cnf &= ~to_update;
    a43c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    a440:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    a444:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    cnf &= ~to_update;
    a448:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    a44c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    a450:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
}
    a454:	e7dc      	b.n	a410 <next_sense_cond_call_handler+0x3e>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    a456:	2003      	movs	r0, #3
    a458:	e7c6      	b.n	a3e8 <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    a45a:	2d01      	cmp	r5, #1
    a45c:	d1d6      	bne.n	a40c <next_sense_cond_call_handler+0x3a>
            call_handler(pin, trigger);
    a45e:	4629      	mov	r1, r5
    a460:	4620      	mov	r0, r4
    a462:	f7fc faf3 	bl	6a4c <call_handler>
}
    a466:	e7d3      	b.n	a410 <next_sense_cond_call_handler+0x3e>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    a468:	2d02      	cmp	r5, #2
    a46a:	d1d1      	bne.n	a410 <next_sense_cond_call_handler+0x3e>
    a46c:	e7f7      	b.n	a45e <next_sense_cond_call_handler+0x8c>

0000a46e <latch_pending_read_and_check>:
{
    a46e:	b410      	push	{r4}
    for (i = start_port; i < (start_port + length); i++)
    a470:	4604      	mov	r4, r0
    a472:	2300      	movs	r3, #0
    a474:	b94b      	cbnz	r3, a48a <latch_pending_read_and_check+0x1c>
        *p_masks = gpio_regs[i]->LATCH;
    a476:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    a47a:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    a47e:	f844 1b04 	str.w	r1, [r4], #4
        gpio_regs[i]->LATCH = *p_masks;
    a482:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    a486:	3301      	adds	r3, #1
    a488:	e7f4      	b.n	a474 <latch_pending_read_and_check+0x6>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    a48a:	2300      	movs	r3, #0
    a48c:	b113      	cbz	r3, a494 <latch_pending_read_and_check+0x26>
    return false;
    a48e:	2000      	movs	r0, #0
}
    a490:	bc10      	pop	{r4}
    a492:	4770      	bx	lr
        if (latch[port_idx])
    a494:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    a498:	b90a      	cbnz	r2, a49e <latch_pending_read_and_check+0x30>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    a49a:	3301      	adds	r3, #1
    a49c:	e7f6      	b.n	a48c <latch_pending_read_and_check+0x1e>
            return true;
    a49e:	2001      	movs	r0, #1
    a4a0:	e7f6      	b.n	a490 <latch_pending_read_and_check+0x22>

0000a4a2 <configure_pins>:
    if (!p_config->skip_gpio_cfg)
    a4a2:	7bcb      	ldrb	r3, [r1, #15]
    a4a4:	2b00      	cmp	r3, #0
    a4a6:	d16d      	bne.n	a584 <configure_pins+0xe2>
{
    a4a8:	b410      	push	{r4}
        nrf_gpio_pin_write(p_config->sck_pin,
    a4aa:	780b      	ldrb	r3, [r1, #0]
                           p_config->mode <= NRF_SPI_MODE_1 ? 0 : 1);
    a4ac:	7b0a      	ldrb	r2, [r1, #12]
    if (value == 0)
    a4ae:	2a01      	cmp	r2, #1
    a4b0:	d858      	bhi.n	a564 <configure_pins+0xc2>
    *p_pin = pin_number & 0x1F;
    a4b2:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    a4b6:	2201      	movs	r2, #1
    a4b8:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTCLR = clr_mask;
    a4bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    a4c0:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
        nrf_gpio_cfg(p_config->sck_pin,
    a4c4:	780b      	ldrb	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
    a4c6:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    a4ca:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    a4ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    a4d2:	2401      	movs	r4, #1
    a4d4:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    a4d8:	784b      	ldrb	r3, [r1, #1]
    a4da:	2bff      	cmp	r3, #255	; 0xff
    a4dc:	d00f      	beq.n	a4fe <configure_pins+0x5c>
    *p_pin = pin_number & 0x1F;
    a4de:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    a4e2:	fa04 f303 	lsl.w	r3, r4, r3
    p_reg->OUTCLR = clr_mask;
    a4e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    a4ea:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
            nrf_gpio_cfg_output(p_config->mosi_pin);
    a4ee:	784b      	ldrb	r3, [r1, #1]
    *p_pin = pin_number & 0x1F;
    a4f0:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    a4f4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    a4f8:	2403      	movs	r4, #3
    a4fa:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    a4fe:	788b      	ldrb	r3, [r1, #2]
    a500:	2bff      	cmp	r3, #255	; 0xff
    a502:	d009      	beq.n	a518 <configure_pins+0x76>
            nrf_gpio_cfg_input(p_config->miso_pin, p_config->miso_pull);
    a504:	7b8a      	ldrb	r2, [r1, #14]
    *p_pin = pin_number & 0x1F;
    a506:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    a50a:	0092      	lsls	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
    a50c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    a510:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    a514:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
    a518:	78cb      	ldrb	r3, [r1, #3]
    a51a:	2bff      	cmp	r3, #255	; 0xff
    a51c:	d010      	beq.n	a540 <configure_pins+0x9e>
    *p_pin = pin_number & 0x1F;
    a51e:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    a522:	2201      	movs	r2, #1
    a524:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
    a528:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    a52c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            nrf_gpio_cfg_output(p_config->ss_pin);
    a530:	78cb      	ldrb	r3, [r1, #3]
    *p_pin = pin_number & 0x1F;
    a532:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    a536:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    a53a:	2403      	movs	r4, #3
    a53c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    a540:	7c0b      	ldrb	r3, [r1, #16]
    a542:	b96b      	cbnz	r3, a560 <configure_pins+0xbe>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    a544:	784b      	ldrb	r3, [r1, #1]
                            : NRF_SPI_PIN_NOT_CONNECTED;
    a546:	2bff      	cmp	r3, #255	; 0xff
    a548:	d016      	beq.n	a578 <configure_pins+0xd6>
    a54a:	461a      	mov	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    a54c:	788b      	ldrb	r3, [r1, #2]
                            : NRF_SPI_PIN_NOT_CONNECTED;
    a54e:	2bff      	cmp	r3, #255	; 0xff
    a550:	d015      	beq.n	a57e <configure_pins+0xdc>
        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    a552:	7809      	ldrb	r1, [r1, #0]
    p_reg->PSELSCK  = sck_pin;
    a554:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
    p_reg->PSELMOSI = mosi_pin;
    a558:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    p_reg->PSELMISO = miso_pin;
    a55c:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
}
    a560:	bc10      	pop	{r4}
    a562:	4770      	bx	lr
    *p_pin = pin_number & 0x1F;
    a564:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    a568:	2201      	movs	r2, #1
    a56a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
    a56e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    a572:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    a576:	e7a5      	b.n	a4c4 <configure_pins+0x22>
                            : NRF_SPI_PIN_NOT_CONNECTED;
    a578:	f04f 32ff 	mov.w	r2, #4294967295
    a57c:	e7e6      	b.n	a54c <configure_pins+0xaa>
                            : NRF_SPI_PIN_NOT_CONNECTED;
    a57e:	f04f 33ff 	mov.w	r3, #4294967295
    a582:	e7e6      	b.n	a552 <configure_pins+0xb0>
    if (!p_config->skip_psel_cfg)
    a584:	7c0b      	ldrb	r3, [r1, #16]
    a586:	b9a3      	cbnz	r3, a5b2 <configure_pins+0x110>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    a588:	784b      	ldrb	r3, [r1, #1]
                            : NRF_SPI_PIN_NOT_CONNECTED;
    a58a:	2bff      	cmp	r3, #255	; 0xff
    a58c:	d00b      	beq.n	a5a6 <configure_pins+0x104>
    a58e:	461a      	mov	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    a590:	788b      	ldrb	r3, [r1, #2]
                            : NRF_SPI_PIN_NOT_CONNECTED;
    a592:	2bff      	cmp	r3, #255	; 0xff
    a594:	d00a      	beq.n	a5ac <configure_pins+0x10a>
        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    a596:	7809      	ldrb	r1, [r1, #0]
    p_reg->PSELSCK  = sck_pin;
    a598:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
    p_reg->PSELMOSI = mosi_pin;
    a59c:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    p_reg->PSELMISO = miso_pin;
    a5a0:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    a5a4:	4770      	bx	lr
                            : NRF_SPI_PIN_NOT_CONNECTED;
    a5a6:	f04f 32ff 	mov.w	r2, #4294967295
    a5aa:	e7f1      	b.n	a590 <configure_pins+0xee>
                            : NRF_SPI_PIN_NOT_CONNECTED;
    a5ac:	f04f 33ff 	mov.w	r3, #4294967295
    a5b0:	e7f1      	b.n	a596 <configure_pins+0xf4>
    a5b2:	4770      	bx	lr

0000a5b4 <finish_transfer>:
{
    a5b4:	b508      	push	{r3, lr}
    a5b6:	4603      	mov	r3, r0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    a5b8:	7f82      	ldrb	r2, [r0, #30]
    a5ba:	2aff      	cmp	r2, #255	; 0xff
    a5bc:	d008      	beq.n	a5d0 <finish_transfer+0x1c>
    *p_pin = pin_number & 0x1F;
    a5be:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    a5c2:	2101      	movs	r1, #1
    a5c4:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
    a5c8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    a5cc:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
    p_cb->transfer_in_progress = false;
    a5d0:	2200      	movs	r2, #0
    a5d2:	775a      	strb	r2, [r3, #29]
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
    a5d4:	721a      	strb	r2, [r3, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    a5d6:	4618      	mov	r0, r3
    a5d8:	f850 2b08 	ldr.w	r2, [r0], #8
    a5dc:	6859      	ldr	r1, [r3, #4]
    a5de:	4790      	blx	r2
}
    a5e0:	bd08      	pop	{r3, pc}

0000a5e2 <transfer_byte>:
{
    a5e2:	b430      	push	{r4, r5}
    a5e4:	b082      	sub	sp, #8
    return p_reg->RXD;
    a5e6:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    a5ea:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
    a5ec:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    a5f0:	6a0b      	ldr	r3, [r1, #32]
    a5f2:	698a      	ldr	r2, [r1, #24]
    a5f4:	4293      	cmp	r3, r2
    a5f6:	d203      	bcs.n	a600 <transfer_byte+0x1e>
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
    a5f8:	694a      	ldr	r2, [r1, #20]
    a5fa:	f89d 4007 	ldrb.w	r4, [sp, #7]
    a5fe:	54d4      	strb	r4, [r2, r3]
    ++p_cb->bytes_transferred;
    a600:	6a0b      	ldr	r3, [r1, #32]
    a602:	3301      	adds	r3, #1
    a604:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
    a606:	1c5a      	adds	r2, r3, #1
    if (p_cb->abort)
    a608:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    a60c:	b13c      	cbz	r4, a61e <transfer_byte+0x3c>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    a60e:	690c      	ldr	r4, [r1, #16]
    a610:	4294      	cmp	r4, r2
    a612:	d900      	bls.n	a616 <transfer_byte+0x34>
            p_cb->evt.xfer_desc.tx_length = bytes_used;
    a614:	610a      	str	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    a616:	698c      	ldr	r4, [r1, #24]
    a618:	4294      	cmp	r4, r2
    a61a:	d900      	bls.n	a61e <transfer_byte+0x3c>
            p_cb->evt.xfer_desc.rx_length = bytes_used;
    a61c:	618a      	str	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    a61e:	690c      	ldr	r4, [r1, #16]
    a620:	4294      	cmp	r4, r2
    a622:	d808      	bhi.n	a636 <transfer_byte+0x54>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    a624:	698d      	ldr	r5, [r1, #24]
    a626:	4295      	cmp	r5, r2
    a628:	d80d      	bhi.n	a646 <transfer_byte+0x64>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    a62a:	42a3      	cmp	r3, r4
    a62c:	d310      	bcc.n	a650 <transfer_byte+0x6e>
    a62e:	42ab      	cmp	r3, r5
    a630:	d210      	bcs.n	a654 <transfer_byte+0x72>
    a632:	2001      	movs	r0, #1
    a634:	e004      	b.n	a640 <transfer_byte+0x5e>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
    a636:	68cb      	ldr	r3, [r1, #12]
    a638:	5c9b      	ldrb	r3, [r3, r2]
    p_reg->TXD = data;
    a63a:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        return true;
    a63e:	2001      	movs	r0, #1
}
    a640:	b002      	add	sp, #8
    a642:	bc30      	pop	{r4, r5}
    a644:	4770      	bx	lr
        nrf_spi_txd_set(p_spi, p_cb->orc);
    a646:	7fcb      	ldrb	r3, [r1, #31]
    a648:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        return true;
    a64c:	2001      	movs	r0, #1
    a64e:	e7f7      	b.n	a640 <transfer_byte+0x5e>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    a650:	2001      	movs	r0, #1
    a652:	e7f5      	b.n	a640 <transfer_byte+0x5e>
    a654:	2000      	movs	r0, #0
    a656:	e7f3      	b.n	a640 <transfer_byte+0x5e>

0000a658 <spi_xfer>:
{
    a658:	b538      	push	{r3, r4, r5, lr}
    a65a:	4604      	mov	r4, r0
    a65c:	460d      	mov	r5, r1
    p_cb->bytes_transferred = 0;
    a65e:	2300      	movs	r3, #0
    a660:	620b      	str	r3, [r1, #32]
    p_reg->INTENCLR = mask;
    a662:	2104      	movs	r1, #4
    a664:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a668:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    a66c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
    a670:	6853      	ldr	r3, [r2, #4]
    nrf_spi_txd_set(p_spi,
    a672:	b183      	cbz	r3, a696 <spi_xfer+0x3e>
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
    a674:	6813      	ldr	r3, [r2, #0]
    nrf_spi_txd_set(p_spi,
    a676:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
    a678:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
    a67c:	6853      	ldr	r3, [r2, #4]
    a67e:	2b01      	cmp	r3, #1
    a680:	d90b      	bls.n	a69a <spi_xfer+0x42>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
    a682:	6813      	ldr	r3, [r2, #0]
    a684:	785b      	ldrb	r3, [r3, #1]
    a686:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_cb->handler)
    a68a:	682b      	ldr	r3, [r5, #0]
    a68c:	b163      	cbz	r3, a6a8 <spi_xfer+0x50>
    p_reg->INTENSET = mask;
    a68e:	2304      	movs	r3, #4
    a690:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    a694:	bd38      	pop	{r3, r4, r5, pc}
    nrf_spi_txd_set(p_spi,
    a696:	7feb      	ldrb	r3, [r5, #31]
    a698:	e7ee      	b.n	a678 <spi_xfer+0x20>
    else if (p_xfer_desc->rx_length > 1)
    a69a:	68d3      	ldr	r3, [r2, #12]
    a69c:	2b01      	cmp	r3, #1
    a69e:	d9f4      	bls.n	a68a <spi_xfer+0x32>
        nrf_spi_txd_set(p_spi, p_cb->orc);
    a6a0:	7feb      	ldrb	r3, [r5, #31]
    p_reg->TXD = data;
    a6a2:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
}
    a6a6:	e7f0      	b.n	a68a <spi_xfer+0x32>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a6a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
    a6ac:	2b00      	cmp	r3, #0
    a6ae:	d0fb      	beq.n	a6a8 <spi_xfer+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a6b0:	2300      	movs	r3, #0
    a6b2:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    a6b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
    a6ba:	4629      	mov	r1, r5
    a6bc:	4620      	mov	r0, r4
    a6be:	f7ff ff90 	bl	a5e2 <transfer_byte>
    a6c2:	2800      	cmp	r0, #0
    a6c4:	d1f0      	bne.n	a6a8 <spi_xfer+0x50>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    a6c6:	7fab      	ldrb	r3, [r5, #30]
    a6c8:	2bff      	cmp	r3, #255	; 0xff
    a6ca:	d0e3      	beq.n	a694 <spi_xfer+0x3c>
    *p_pin = pin_number & 0x1F;
    a6cc:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    a6d0:	2201      	movs	r2, #1
    a6d2:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
    a6d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    a6da:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    a6de:	e7d9      	b.n	a694 <spi_xfer+0x3c>

0000a6e0 <irq_handler>:
{
    a6e0:	b510      	push	{r4, lr}
    a6e2:	460c      	mov	r4, r1
    a6e4:	2200      	movs	r2, #0
    a6e6:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
    a6ea:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    if (!transfer_byte(p_spi, p_cb))
    a6ee:	f7ff ff78 	bl	a5e2 <transfer_byte>
    a6f2:	b100      	cbz	r0, a6f6 <irq_handler+0x16>
}
    a6f4:	bd10      	pop	{r4, pc}
        finish_transfer(p_cb);
    a6f6:	4620      	mov	r0, r4
    a6f8:	f7ff ff5c 	bl	a5b4 <finish_transfer>
}
    a6fc:	e7fa      	b.n	a6f4 <irq_handler+0x14>

0000a6fe <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    a6fe:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    a700:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    a702:	4293      	cmp	r3, r2
    a704:	d804      	bhi.n	a710 <_GetAvailWriteSpace+0x12>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    a706:	6880      	ldr	r0, [r0, #8]
    a708:	1a80      	subs	r0, r0, r2
    a70a:	4403      	add	r3, r0
    a70c:	1e58      	subs	r0, r3, #1
    a70e:	4770      	bx	lr
    r = RdOff - WrOff - 1u;
    a710:	1a9b      	subs	r3, r3, r2
    a712:	1e58      	subs	r0, r3, #1
}
    a714:	4770      	bx	lr

0000a716 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    a716:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a71a:	4604      	mov	r4, r0
    a71c:	4688      	mov	r8, r1
    a71e:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
    a720:	68c5      	ldr	r5, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
    a722:	6887      	ldr	r7, [r0, #8]
    a724:	eba7 0905 	sub.w	r9, r7, r5
  if (Rem > NumBytes) {
    a728:	4591      	cmp	r9, r2
    a72a:	d907      	bls.n	a73c <_WriteNoCheck+0x26>
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    a72c:	6840      	ldr	r0, [r0, #4]
    a72e:	4428      	add	r0, r5
    a730:	f000 fafa 	bl	ad28 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
    a734:	4435      	add	r5, r6
    a736:	60e5      	str	r5, [r4, #12]
}
    a738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    a73c:	6840      	ldr	r0, [r0, #4]
    a73e:	464a      	mov	r2, r9
    a740:	4428      	add	r0, r5
    a742:	f000 faf1 	bl	ad28 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
    a746:	1bed      	subs	r5, r5, r7
    a748:	4435      	add	r5, r6
    a74a:	462a      	mov	r2, r5
    a74c:	eb08 0109 	add.w	r1, r8, r9
    a750:	6860      	ldr	r0, [r4, #4]
    a752:	f000 fae9 	bl	ad28 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
    a756:	60e5      	str	r5, [r4, #12]
}
    a758:	e7ee      	b.n	a738 <_WriteNoCheck+0x22>

0000a75a <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    a75a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a75e:	4606      	mov	r6, r0
    a760:	4688      	mov	r8, r1
    a762:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
    a764:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
    a766:	f04f 0900 	mov.w	r9, #0
    a76a:	e018      	b.n	a79e <_WriteBlocking+0x44>
      NumBytesToWrite = RdOff - WrOff - 1u;
    a76c:	1b64      	subs	r4, r4, r5
    a76e:	1e62      	subs	r2, r4, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    a770:	68b3      	ldr	r3, [r6, #8]
    a772:	1b5c      	subs	r4, r3, r5
    a774:	4294      	cmp	r4, r2
    a776:	bf28      	it	cs
    a778:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    a77a:	42bc      	cmp	r4, r7
    a77c:	bf28      	it	cs
    a77e:	463c      	movcs	r4, r7
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    a780:	6870      	ldr	r0, [r6, #4]
    a782:	4622      	mov	r2, r4
    a784:	4641      	mov	r1, r8
    a786:	4428      	add	r0, r5
    a788:	f000 face 	bl	ad28 <memcpy>
    NumBytesWritten += NumBytesToWrite;
    a78c:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
    a78e:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
    a790:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
    a792:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
    a794:	68b3      	ldr	r3, [r6, #8]
    a796:	42ab      	cmp	r3, r5
    a798:	d009      	beq.n	a7ae <_WriteBlocking+0x54>
    pRing->WrOff = WrOff;
    a79a:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    a79c:	b14f      	cbz	r7, a7b2 <_WriteBlocking+0x58>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    a79e:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
    a7a0:	42a5      	cmp	r5, r4
    a7a2:	d3e3      	bcc.n	a76c <_WriteBlocking+0x12>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    a7a4:	68b2      	ldr	r2, [r6, #8]
    a7a6:	1b64      	subs	r4, r4, r5
    a7a8:	4414      	add	r4, r2
    a7aa:	1e62      	subs	r2, r4, #1
    a7ac:	e7e0      	b.n	a770 <_WriteBlocking+0x16>
      WrOff = 0u;
    a7ae:	2500      	movs	r5, #0
    a7b0:	e7f3      	b.n	a79a <_WriteBlocking+0x40>
}
    a7b2:	4648      	mov	r0, r9
    a7b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000a7b8 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    a7b8:	b508      	push	{r3, lr}
  _DoInit();
    a7ba:	f7fc fde9 	bl	7390 <_DoInit>
}
    a7be:	bd08      	pop	{r3, pc}

0000a7c0 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    a7c0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    a7c2:	f7ff fff9 	bl	a7b8 <SEGGER_RTT_Init>

	return 0;
}
    a7c6:	2000      	movs	r0, #0
    a7c8:	bd08      	pop	{r3, pc}

0000a7ca <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    a7ca:	b148      	cbz	r0, a7e0 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    a7cc:	68c3      	ldr	r3, [r0, #12]
    a7ce:	8818      	ldrh	r0, [r3, #0]
    a7d0:	f3c0 0008 	ubfx	r0, r0, #0, #9
    a7d4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    a7d8:	bf14      	ite	ne
    a7da:	2000      	movne	r0, #0
    a7dc:	2001      	moveq	r0, #1
    a7de:	4770      	bx	lr
		return false;
    a7e0:	2000      	movs	r0, #0
}
    a7e2:	4770      	bx	lr

0000a7e4 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    a7e4:	68c2      	ldr	r2, [r0, #12]
    a7e6:	6903      	ldr	r3, [r0, #16]
    a7e8:	431a      	orrs	r2, r3
    a7ea:	f012 0203 	ands.w	r2, r2, #3
    a7ee:	d10d      	bne.n	a80c <create_free_list+0x28>
	slab->free_list = NULL;
    a7f0:	2100      	movs	r1, #0
    a7f2:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    a7f4:	e005      	b.n	a802 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    a7f6:	6941      	ldr	r1, [r0, #20]
    a7f8:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    a7fa:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    a7fc:	68c1      	ldr	r1, [r0, #12]
    a7fe:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    a800:	3201      	adds	r2, #1
    a802:	6881      	ldr	r1, [r0, #8]
    a804:	4291      	cmp	r1, r2
    a806:	d8f6      	bhi.n	a7f6 <create_free_list+0x12>
	return 0;
    a808:	2000      	movs	r0, #0
    a80a:	4770      	bx	lr
		return -EINVAL;
    a80c:	f06f 0015 	mvn.w	r0, #21
}
    a810:	4770      	bx	lr

0000a812 <k_mem_slab_init>:
{
    a812:	b510      	push	{r4, lr}
    a814:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    a816:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    a818:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    a81a:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    a81c:	2300      	movs	r3, #0
    a81e:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    a820:	f7ff ffe0 	bl	a7e4 <create_free_list>
	if (rc < 0) {
    a824:	2800      	cmp	r0, #0
    a826:	db01      	blt.n	a82c <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    a828:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    a82a:	6064      	str	r4, [r4, #4]
}
    a82c:	bd10      	pop	{r4, pc}

0000a82e <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    a82e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a830:	4604      	mov	r4, r0
    a832:	460d      	mov	r5, r1
	__asm__ volatile(
    a834:	f04f 0320 	mov.w	r3, #32
    a838:	f3ef 8611 	mrs	r6, BASEPRI
    a83c:	f383 8812 	msr	BASEPRI_MAX, r3
    a840:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    a844:	6943      	ldr	r3, [r0, #20]
    a846:	b163      	cbz	r3, a862 <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    a848:	682b      	ldr	r3, [r5, #0]
    a84a:	6962      	ldr	r2, [r4, #20]
    a84c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    a84e:	682b      	ldr	r3, [r5, #0]
    a850:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    a852:	69a3      	ldr	r3, [r4, #24]
    a854:	3b01      	subs	r3, #1
    a856:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    a858:	f386 8811 	msr	BASEPRI, r6
    a85c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    a860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a862:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    a866:	f000 f988 	bl	ab7a <z_unpend_first_thread>
		if (pending_thread != NULL) {
    a86a:	2800      	cmp	r0, #0
    a86c:	d0ec      	beq.n	a848 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    a86e:	682a      	ldr	r2, [r5, #0]
    a870:	2100      	movs	r1, #0
    a872:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    a876:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    a878:	f000 f8bd 	bl	a9f6 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    a87c:	4631      	mov	r1, r6
    a87e:	4638      	mov	r0, r7
    a880:	f7fd fb34 	bl	7eec <z_reschedule>
			return;
    a884:	e7ec      	b.n	a860 <k_mem_slab_free+0x32>

0000a886 <setup_thread_stack>:
{
    a886:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    a888:	3207      	adds	r2, #7
    a88a:	f022 0207 	bic.w	r2, r2, #7
    a88e:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    a892:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    a896:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    a89a:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    a89e:	2200      	movs	r2, #0
    a8a0:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    a8a4:	18c8      	adds	r0, r1, r3
    a8a6:	bc10      	pop	{r4}
    a8a8:	4770      	bx	lr

0000a8aa <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a8aa:	f3ef 8005 	mrs	r0, IPSR
}
    a8ae:	3800      	subs	r0, #0
    a8b0:	bf18      	it	ne
    a8b2:	2001      	movne	r0, #1
    a8b4:	4770      	bx	lr

0000a8b6 <k_thread_name_get>:
}
    a8b6:	3074      	adds	r0, #116	; 0x74
    a8b8:	4770      	bx	lr

0000a8ba <z_impl_k_thread_start>:
{
    a8ba:	b508      	push	{r3, lr}
	z_sched_start(thread);
    a8bc:	f7fd fc40 	bl	8140 <z_sched_start>
}
    a8c0:	bd08      	pop	{r3, pc}

0000a8c2 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    a8c2:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    a8c4:	2400      	movs	r4, #0
    a8c6:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    a8c8:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    a8ca:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    a8cc:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    a8ce:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    a8d0:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    a8d2:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    a8d4:	bc10      	pop	{r4}
    a8d6:	4770      	bx	lr

0000a8d8 <z_impl_k_thread_create>:
{
    a8d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a8da:	b087      	sub	sp, #28
    a8dc:	4604      	mov	r4, r0
    a8de:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a8e2:	2500      	movs	r5, #0
    a8e4:	9505      	str	r5, [sp, #20]
    a8e6:	9d10      	ldr	r5, [sp, #64]	; 0x40
    a8e8:	9504      	str	r5, [sp, #16]
    a8ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    a8ec:	9503      	str	r5, [sp, #12]
    a8ee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    a8f0:	9502      	str	r5, [sp, #8]
    a8f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    a8f4:	9501      	str	r5, [sp, #4]
    a8f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    a8f8:	9500      	str	r5, [sp, #0]
    a8fa:	f7fd f8af 	bl	7a5c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    a8fe:	f1b7 3fff 	cmp.w	r7, #4294967295
    a902:	bf08      	it	eq
    a904:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    a908:	d102      	bne.n	a910 <z_impl_k_thread_create+0x38>
}
    a90a:	4620      	mov	r0, r4
    a90c:	b007      	add	sp, #28
    a90e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
    a910:	4632      	mov	r2, r6
    a912:	463b      	mov	r3, r7
    a914:	4620      	mov	r0, r4
    a916:	f7fd f88f 	bl	7a38 <schedule_new_thread>
    a91a:	e7f6      	b.n	a90a <z_impl_k_thread_create+0x32>

0000a91c <z_pm_save_idle_exit>:
{
    a91c:	b508      	push	{r3, lr}
	pm_system_resume();
    a91e:	f7f9 fb27 	bl	3f70 <pm_system_resume>
	sys_clock_idle_exit();
    a922:	f7ff fcaf 	bl	a284 <sys_clock_idle_exit>
}
    a926:	bd08      	pop	{r3, pc}

0000a928 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    a928:	4288      	cmp	r0, r1
    a92a:	da00      	bge.n	a92e <new_prio_for_inheritance+0x6>
    a92c:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    a92e:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    a932:	db01      	blt.n	a938 <new_prio_for_inheritance+0x10>
    a934:	4608      	mov	r0, r1
    a936:	4770      	bx	lr
    a938:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    a93c:	4770      	bx	lr

0000a93e <adjust_owner_prio>:
{
    a93e:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    a940:	6880      	ldr	r0, [r0, #8]
    a942:	f990 300e 	ldrsb.w	r3, [r0, #14]
    a946:	428b      	cmp	r3, r1
    a948:	d101      	bne.n	a94e <adjust_owner_prio+0x10>
	return false;
    a94a:	2000      	movs	r0, #0
}
    a94c:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    a94e:	f7fd fc45 	bl	81dc <z_set_prio>
    a952:	e7fb      	b.n	a94c <adjust_owner_prio+0xe>

0000a954 <thread_active_elsewhere>:
}
    a954:	2000      	movs	r0, #0
    a956:	4770      	bx	lr

0000a958 <pended_on_thread>:
}
    a958:	6880      	ldr	r0, [r0, #8]
    a95a:	4770      	bx	lr

0000a95c <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    a95c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    a960:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    a964:	4283      	cmp	r3, r0
    a966:	d001      	beq.n	a96c <z_sched_prio_cmp+0x10>
		return b2 - b1;
    a968:	1ac0      	subs	r0, r0, r3
    a96a:	4770      	bx	lr
	return 0;
    a96c:	2000      	movs	r0, #0
}
    a96e:	4770      	bx	lr

0000a970 <z_unpend_thread_no_timeout>:
{
    a970:	b538      	push	{r3, r4, r5, lr}
    a972:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    a974:	2300      	movs	r3, #0
	__asm__ volatile(
    a976:	f04f 0220 	mov.w	r2, #32
    a97a:	f3ef 8511 	mrs	r5, BASEPRI
    a97e:	f382 8812 	msr	BASEPRI_MAX, r2
    a982:	f3bf 8f6f 	isb	sy
    a986:	b98b      	cbnz	r3, a9ac <z_unpend_thread_no_timeout+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    a988:	4620      	mov	r0, r4
    a98a:	f7ff ffe5 	bl	a958 <pended_on_thread>
    a98e:	4621      	mov	r1, r4
    a990:	f000 f822 	bl	a9d8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    a994:	7b63      	ldrb	r3, [r4, #13]
    a996:	f023 0302 	bic.w	r3, r3, #2
    a99a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    a99c:	2300      	movs	r3, #0
    a99e:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    a9a0:	f385 8811 	msr	BASEPRI, r5
    a9a4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a9a8:	2301      	movs	r3, #1
    a9aa:	e7ec      	b.n	a986 <z_unpend_thread_no_timeout+0x16>
}
    a9ac:	bd38      	pop	{r3, r4, r5, pc}

0000a9ae <z_reschedule_irqlock>:
{
    a9ae:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    a9b0:	4603      	mov	r3, r0
    a9b2:	b920      	cbnz	r0, a9be <z_reschedule_irqlock+0x10>
    a9b4:	f3ef 8205 	mrs	r2, IPSR
    a9b8:	b942      	cbnz	r2, a9cc <z_reschedule_irqlock+0x1e>
    a9ba:	2201      	movs	r2, #1
    a9bc:	e000      	b.n	a9c0 <z_reschedule_irqlock+0x12>
    a9be:	2200      	movs	r2, #0
	if (resched(key)) {
    a9c0:	b932      	cbnz	r2, a9d0 <z_reschedule_irqlock+0x22>
    a9c2:	f383 8811 	msr	BASEPRI, r3
    a9c6:	f3bf 8f6f 	isb	sy
}
    a9ca:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    a9cc:	2200      	movs	r2, #0
    a9ce:	e7f7      	b.n	a9c0 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    a9d0:	4618      	mov	r0, r3
    a9d2:	f7f9 fcc5 	bl	4360 <arch_swap>
	return ret;
    a9d6:	e7f8      	b.n	a9ca <z_reschedule_irqlock+0x1c>

0000a9d8 <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    a9d8:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    a9da:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    a9dc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    a9de:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    a9e0:	2300      	movs	r3, #0
    a9e2:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    a9e4:	604b      	str	r3, [r1, #4]
}
    a9e6:	4770      	bx	lr

0000a9e8 <z_priq_dumb_best>:
{
    a9e8:	4603      	mov	r3, r0
	return list->head == list;
    a9ea:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a9ec:	4283      	cmp	r3, r0
    a9ee:	d000      	beq.n	a9f2 <z_priq_dumb_best+0xa>
}
    a9f0:	4770      	bx	lr
	struct k_thread *thread = NULL;
    a9f2:	2000      	movs	r0, #0
	return thread;
    a9f4:	e7fc      	b.n	a9f0 <z_priq_dumb_best+0x8>

0000a9f6 <z_ready_thread>:
{
    a9f6:	b538      	push	{r3, r4, r5, lr}
    a9f8:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    a9fa:	2300      	movs	r3, #0
	__asm__ volatile(
    a9fc:	f04f 0220 	mov.w	r2, #32
    aa00:	f3ef 8511 	mrs	r5, BASEPRI
    aa04:	f382 8812 	msr	BASEPRI_MAX, r2
    aa08:	f3bf 8f6f 	isb	sy
    aa0c:	e007      	b.n	aa1e <z_ready_thread+0x28>
			ready_thread(thread);
    aa0e:	4620      	mov	r0, r4
    aa10:	f7fd fb56 	bl	80c0 <ready_thread>
	__asm__ volatile(
    aa14:	f385 8811 	msr	BASEPRI, r5
    aa18:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    aa1c:	2301      	movs	r3, #1
    aa1e:	b92b      	cbnz	r3, aa2c <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    aa20:	4620      	mov	r0, r4
    aa22:	f7ff ff97 	bl	a954 <thread_active_elsewhere>
    aa26:	2800      	cmp	r0, #0
    aa28:	d1f4      	bne.n	aa14 <z_ready_thread+0x1e>
    aa2a:	e7f0      	b.n	aa0e <z_ready_thread+0x18>
}
    aa2c:	bd38      	pop	{r3, r4, r5, pc}

0000aa2e <z_thread_timeout>:
{
    aa2e:	b570      	push	{r4, r5, r6, lr}
    aa30:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    aa32:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
    aa36:	2300      	movs	r3, #0
	__asm__ volatile(
    aa38:	f04f 0220 	mov.w	r2, #32
    aa3c:	f3ef 8611 	mrs	r6, BASEPRI
    aa40:	f382 8812 	msr	BASEPRI_MAX, r2
    aa44:	f3bf 8f6f 	isb	sy
    aa48:	e019      	b.n	aa7e <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    aa4a:	4628      	mov	r0, r5
    aa4c:	f7ff ff84 	bl	a958 <pended_on_thread>
    aa50:	4629      	mov	r1, r5
    aa52:	f7ff ffc1 	bl	a9d8 <z_priq_dumb_remove>
    aa56:	7b6b      	ldrb	r3, [r5, #13]
    aa58:	f023 0302 	bic.w	r3, r3, #2
    aa5c:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    aa5e:	2300      	movs	r3, #0
    aa60:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    aa62:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    aa66:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
    aa6a:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    aa6e:	4628      	mov	r0, r5
    aa70:	f7fd fb26 	bl	80c0 <ready_thread>
	__asm__ volatile(
    aa74:	f386 8811 	msr	BASEPRI, r6
    aa78:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    aa7c:	2301      	movs	r3, #1
    aa7e:	b94b      	cbnz	r3, aa94 <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    aa80:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    aa84:	f013 0f28 	tst.w	r3, #40	; 0x28
    aa88:	d1f4      	bne.n	aa74 <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
    aa8a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    aa8e:	2b00      	cmp	r3, #0
    aa90:	d1db      	bne.n	aa4a <z_thread_timeout+0x1c>
    aa92:	e7e6      	b.n	aa62 <z_thread_timeout+0x34>
}
    aa94:	bd70      	pop	{r4, r5, r6, pc}

0000aa96 <add_to_waitq_locked>:
{
    aa96:	b570      	push	{r4, r5, r6, lr}
    aa98:	4605      	mov	r5, r0
    aa9a:	460e      	mov	r6, r1
	unready_thread(thread);
    aa9c:	f7fd fb6e 	bl	817c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    aaa0:	7b6b      	ldrb	r3, [r5, #13]
    aaa2:	f043 0302 	orr.w	r3, r3, #2
    aaa6:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    aaa8:	b1b6      	cbz	r6, aad8 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
    aaaa:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    aaac:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    aaae:	42a6      	cmp	r6, r4
    aab0:	d019      	beq.n	aae6 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    aab2:	b164      	cbz	r4, aace <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
    aab4:	4621      	mov	r1, r4
    aab6:	4628      	mov	r0, r5
    aab8:	f7ff ff50 	bl	a95c <z_sched_prio_cmp>
    aabc:	2800      	cmp	r0, #0
    aabe:	dc0c      	bgt.n	aada <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    aac0:	b12c      	cbz	r4, aace <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
    aac2:	6873      	ldr	r3, [r6, #4]
    aac4:	429c      	cmp	r4, r3
    aac6:	d002      	beq.n	aace <add_to_waitq_locked+0x38>
    aac8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    aaca:	2c00      	cmp	r4, #0
    aacc:	d1f1      	bne.n	aab2 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
    aace:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    aad0:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    aad2:	606b      	str	r3, [r5, #4]
	tail->next = node;
    aad4:	601d      	str	r5, [r3, #0]
	list->tail = node;
    aad6:	6075      	str	r5, [r6, #4]
}
    aad8:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
    aada:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    aadc:	606b      	str	r3, [r5, #4]
	node->next = successor;
    aade:	602c      	str	r4, [r5, #0]
	prev->next = node;
    aae0:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    aae2:	6065      	str	r5, [r4, #4]
}
    aae4:	e7f8      	b.n	aad8 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    aae6:	2400      	movs	r4, #0
    aae8:	e7e3      	b.n	aab2 <add_to_waitq_locked+0x1c>

0000aaea <pend>:
{
    aaea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    aaee:	4605      	mov	r5, r0
    aaf0:	460f      	mov	r7, r1
    aaf2:	4691      	mov	r9, r2
    aaf4:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    aaf6:	2400      	movs	r4, #0
	__asm__ volatile(
    aaf8:	f04f 0320 	mov.w	r3, #32
    aafc:	f3ef 8611 	mrs	r6, BASEPRI
    ab00:	f383 8812 	msr	BASEPRI_MAX, r3
    ab04:	f3bf 8f6f 	isb	sy
    ab08:	b94c      	cbnz	r4, ab1e <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
    ab0a:	4639      	mov	r1, r7
    ab0c:	4628      	mov	r0, r5
    ab0e:	f7ff ffc2 	bl	aa96 <add_to_waitq_locked>
	__asm__ volatile(
    ab12:	f386 8811 	msr	BASEPRI, r6
    ab16:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    ab1a:	2401      	movs	r4, #1
    ab1c:	e7f4      	b.n	ab08 <pend+0x1e>
	add_thread_timeout(thread, timeout);
    ab1e:	464a      	mov	r2, r9
    ab20:	4643      	mov	r3, r8
    ab22:	4628      	mov	r0, r5
    ab24:	f7fd f980 	bl	7e28 <add_thread_timeout>
}
    ab28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000ab2c <z_unpend1_no_timeout>:
{
    ab2c:	b570      	push	{r4, r5, r6, lr}
    ab2e:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    ab30:	2300      	movs	r3, #0
	__asm__ volatile(
    ab32:	f04f 0220 	mov.w	r2, #32
    ab36:	f3ef 8511 	mrs	r5, BASEPRI
    ab3a:	f382 8812 	msr	BASEPRI_MAX, r2
    ab3e:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    ab42:	461c      	mov	r4, r3
    ab44:	e00f      	b.n	ab66 <z_unpend1_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    ab46:	f7ff ff07 	bl	a958 <pended_on_thread>
    ab4a:	4621      	mov	r1, r4
    ab4c:	f7ff ff44 	bl	a9d8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    ab50:	7b63      	ldrb	r3, [r4, #13]
    ab52:	f023 0302 	bic.w	r3, r3, #2
    ab56:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    ab58:	2300      	movs	r3, #0
    ab5a:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    ab5c:	f385 8811 	msr	BASEPRI, r5
    ab60:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    ab64:	2301      	movs	r3, #1
    ab66:	b933      	cbnz	r3, ab76 <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
    ab68:	4630      	mov	r0, r6
    ab6a:	f7ff ff3d 	bl	a9e8 <z_priq_dumb_best>
		if (thread != NULL) {
    ab6e:	4604      	mov	r4, r0
    ab70:	2800      	cmp	r0, #0
    ab72:	d1e8      	bne.n	ab46 <z_unpend1_no_timeout+0x1a>
    ab74:	e7f2      	b.n	ab5c <z_unpend1_no_timeout+0x30>
}
    ab76:	4620      	mov	r0, r4
    ab78:	bd70      	pop	{r4, r5, r6, pc}

0000ab7a <z_unpend_first_thread>:
{
    ab7a:	b570      	push	{r4, r5, r6, lr}
    ab7c:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    ab7e:	2300      	movs	r3, #0
	__asm__ volatile(
    ab80:	f04f 0220 	mov.w	r2, #32
    ab84:	f3ef 8511 	mrs	r5, BASEPRI
    ab88:	f382 8812 	msr	BASEPRI_MAX, r2
    ab8c:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    ab90:	461c      	mov	r4, r3
    ab92:	e013      	b.n	abbc <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    ab94:	f7ff fee0 	bl	a958 <pended_on_thread>
    ab98:	4621      	mov	r1, r4
    ab9a:	f7ff ff1d 	bl	a9d8 <z_priq_dumb_remove>
    ab9e:	7b63      	ldrb	r3, [r4, #13]
    aba0:	f023 0302 	bic.w	r3, r3, #2
    aba4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    aba6:	2300      	movs	r3, #0
    aba8:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    abaa:	f104 0018 	add.w	r0, r4, #24
    abae:	f000 f82a 	bl	ac06 <z_abort_timeout>
	__asm__ volatile(
    abb2:	f385 8811 	msr	BASEPRI, r5
    abb6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    abba:	2301      	movs	r3, #1
    abbc:	b933      	cbnz	r3, abcc <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
    abbe:	4630      	mov	r0, r6
    abc0:	f7ff ff12 	bl	a9e8 <z_priq_dumb_best>
		if (thread != NULL) {
    abc4:	4604      	mov	r4, r0
    abc6:	2800      	cmp	r0, #0
    abc8:	d1e4      	bne.n	ab94 <z_unpend_first_thread+0x1a>
    abca:	e7f2      	b.n	abb2 <z_unpend_first_thread+0x38>
}
    abcc:	4620      	mov	r0, r4
    abce:	bd70      	pop	{r4, r5, r6, pc}

0000abd0 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    abd0:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    abd2:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    abd4:	6083      	str	r3, [r0, #8]
}
    abd6:	4770      	bx	lr

0000abd8 <remove_timeout>:
{
    abd8:	b538      	push	{r3, r4, r5, lr}
    abda:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    abdc:	f7fd fd32 	bl	8644 <next>
    abe0:	b148      	cbz	r0, abf6 <remove_timeout+0x1e>
    abe2:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    abe4:	6920      	ldr	r0, [r4, #16]
    abe6:	6965      	ldr	r5, [r4, #20]
    abe8:	6913      	ldr	r3, [r2, #16]
    abea:	6951      	ldr	r1, [r2, #20]
    abec:	181b      	adds	r3, r3, r0
    abee:	eb45 0101 	adc.w	r1, r5, r1
    abf2:	6113      	str	r3, [r2, #16]
    abf4:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    abf6:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    abf8:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    abfa:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    abfc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    abfe:	2300      	movs	r3, #0
    ac00:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    ac02:	6063      	str	r3, [r4, #4]
}
    ac04:	bd38      	pop	{r3, r4, r5, pc}

0000ac06 <z_abort_timeout>:
{
    ac06:	b570      	push	{r4, r5, r6, lr}
    ac08:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    ac0a:	2300      	movs	r3, #0
	__asm__ volatile(
    ac0c:	f04f 0220 	mov.w	r2, #32
    ac10:	f3ef 8611 	mrs	r6, BASEPRI
    ac14:	f382 8812 	msr	BASEPRI_MAX, r2
    ac18:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    ac1c:	f06f 0015 	mvn.w	r0, #21
    ac20:	e008      	b.n	ac34 <z_abort_timeout+0x2e>
			remove_timeout(to);
    ac22:	4620      	mov	r0, r4
    ac24:	f7ff ffd8 	bl	abd8 <remove_timeout>
			ret = 0;
    ac28:	4628      	mov	r0, r5
	__asm__ volatile(
    ac2a:	f386 8811 	msr	BASEPRI, r6
    ac2e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    ac32:	2301      	movs	r3, #1
    ac34:	461d      	mov	r5, r3
    ac36:	b91b      	cbnz	r3, ac40 <z_abort_timeout+0x3a>
	return node->next != NULL;
    ac38:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    ac3a:	2b00      	cmp	r3, #0
    ac3c:	d1f1      	bne.n	ac22 <z_abort_timeout+0x1c>
    ac3e:	e7f4      	b.n	ac2a <z_abort_timeout+0x24>
}
    ac40:	bd70      	pop	{r4, r5, r6, pc}

0000ac42 <z_get_next_timeout_expiry>:
{
    ac42:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    ac44:	2300      	movs	r3, #0
	__asm__ volatile(
    ac46:	f04f 0220 	mov.w	r2, #32
    ac4a:	f3ef 8411 	mrs	r4, BASEPRI
    ac4e:	f382 8812 	msr	BASEPRI_MAX, r2
    ac52:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    ac56:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
    ac5a:	b93b      	cbnz	r3, ac6c <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
    ac5c:	f7fd fd0a 	bl	8674 <next_timeout>
	__asm__ volatile(
    ac60:	f384 8811 	msr	BASEPRI, r4
    ac64:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    ac68:	2301      	movs	r3, #1
    ac6a:	e7f6      	b.n	ac5a <z_get_next_timeout_expiry+0x18>
}
    ac6c:	bd10      	pop	{r4, pc}

0000ac6e <z_set_timeout_expiry>:
{
    ac6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac70:	4606      	mov	r6, r0
    ac72:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    ac74:	2300      	movs	r3, #0
	__asm__ volatile(
    ac76:	f04f 0220 	mov.w	r2, #32
    ac7a:	f3ef 8511 	mrs	r5, BASEPRI
    ac7e:	f382 8812 	msr	BASEPRI_MAX, r2
    ac82:	f3bf 8f6f 	isb	sy
    ac86:	e00a      	b.n	ac9e <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    ac88:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    ac8a:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    ac8e:	2801      	cmp	r0, #1
    ac90:	dd00      	ble.n	ac94 <z_set_timeout_expiry+0x26>
    ac92:	b97c      	cbnz	r4, acb4 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    ac94:	f385 8811 	msr	BASEPRI, r5
    ac98:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    ac9c:	2301      	movs	r3, #1
    ac9e:	461c      	mov	r4, r3
    aca0:	b97b      	cbnz	r3, acc2 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    aca2:	f7fd fce7 	bl	8674 <next_timeout>
			      || (ticks <= next_to);
    aca6:	f1b0 3fff 	cmp.w	r0, #4294967295
    acaa:	d0ed      	beq.n	ac88 <z_set_timeout_expiry+0x1a>
    acac:	42b0      	cmp	r0, r6
    acae:	dbec      	blt.n	ac8a <z_set_timeout_expiry+0x1c>
    acb0:	2401      	movs	r4, #1
    acb2:	e7ea      	b.n	ac8a <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    acb4:	4639      	mov	r1, r7
    acb6:	42b0      	cmp	r0, r6
    acb8:	bfa8      	it	ge
    acba:	4630      	movge	r0, r6
    acbc:	f7fb fa9c 	bl	61f8 <sys_clock_set_timeout>
    acc0:	e7e8      	b.n	ac94 <z_set_timeout_expiry+0x26>
}
    acc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000acc4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    acc4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    acc6:	f7fd fe07 	bl	88d8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    acca:	bd08      	pop	{r3, pc}

0000accc <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    accc:	b900      	cbnz	r0, acd0 <z_impl_k_busy_wait+0x4>
    acce:	4770      	bx	lr
{
    acd0:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    acd2:	f7fa f9a7 	bl	5024 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    acd6:	bd08      	pop	{r3, pc}

0000acd8 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
    acd8:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
    acda:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
    acdc:	2300      	movs	r3, #0
    acde:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
    ace0:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
    ace4:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
    ace6:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
    ace8:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    acea:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
    acec:	6343      	str	r3, [r0, #52]	; 0x34
}
    acee:	4770      	bx	lr

0000acf0 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    acf0:	b510      	push	{r4, lr}
    acf2:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    acf4:	f7ff ff87 	bl	ac06 <z_abort_timeout>

	if (inactive) {
    acf8:	b9a0      	cbnz	r0, ad24 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
    acfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    acfc:	b10b      	cbz	r3, ad02 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    acfe:	4620      	mov	r0, r4
    ad00:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    ad02:	f104 0018 	add.w	r0, r4, #24
    ad06:	f7ff ff11 	bl	ab2c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    ad0a:	b158      	cbz	r0, ad24 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
    ad0c:	f7ff fe73 	bl	a9f6 <z_ready_thread>
	__asm__ volatile(
    ad10:	f04f 0320 	mov.w	r3, #32
    ad14:	f3ef 8011 	mrs	r0, BASEPRI
    ad18:	f383 8812 	msr	BASEPRI_MAX, r3
    ad1c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    ad20:	f7ff fe45 	bl	a9ae <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
    ad24:	bd10      	pop	{r4, pc}

0000ad26 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    ad26:	4770      	bx	lr

0000ad28 <memcpy>:
    ad28:	440a      	add	r2, r1
    ad2a:	4291      	cmp	r1, r2
    ad2c:	f100 33ff 	add.w	r3, r0, #4294967295
    ad30:	d100      	bne.n	ad34 <memcpy+0xc>
    ad32:	4770      	bx	lr
    ad34:	b510      	push	{r4, lr}
    ad36:	f811 4b01 	ldrb.w	r4, [r1], #1
    ad3a:	f803 4f01 	strb.w	r4, [r3, #1]!
    ad3e:	4291      	cmp	r1, r2
    ad40:	d1f9      	bne.n	ad36 <memcpy+0xe>
    ad42:	bd10      	pop	{r4, pc}

0000ad44 <memset>:
    ad44:	4402      	add	r2, r0
    ad46:	4603      	mov	r3, r0
    ad48:	4293      	cmp	r3, r2
    ad4a:	d100      	bne.n	ad4e <memset+0xa>
    ad4c:	4770      	bx	lr
    ad4e:	f803 1b01 	strb.w	r1, [r3], #1
    ad52:	e7f9      	b.n	ad48 <memset+0x4>

0000ad54 <strncpy>:
    ad54:	b510      	push	{r4, lr}
    ad56:	3901      	subs	r1, #1
    ad58:	4603      	mov	r3, r0
    ad5a:	b132      	cbz	r2, ad6a <strncpy+0x16>
    ad5c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    ad60:	f803 4b01 	strb.w	r4, [r3], #1
    ad64:	3a01      	subs	r2, #1
    ad66:	2c00      	cmp	r4, #0
    ad68:	d1f7      	bne.n	ad5a <strncpy+0x6>
    ad6a:	441a      	add	r2, r3
    ad6c:	2100      	movs	r1, #0
    ad6e:	4293      	cmp	r3, r2
    ad70:	d100      	bne.n	ad74 <strncpy+0x20>
    ad72:	bd10      	pop	{r4, pc}
    ad74:	f803 1b01 	strb.w	r1, [r3], #1
    ad78:	e7f9      	b.n	ad6e <strncpy+0x1a>

0000ad7a <strnlen>:
    ad7a:	b510      	push	{r4, lr}
    ad7c:	4602      	mov	r2, r0
    ad7e:	4401      	add	r1, r0
    ad80:	428a      	cmp	r2, r1
    ad82:	4613      	mov	r3, r2
    ad84:	d101      	bne.n	ad8a <strnlen+0x10>
    ad86:	1a18      	subs	r0, r3, r0
    ad88:	bd10      	pop	{r4, pc}
    ad8a:	781c      	ldrb	r4, [r3, #0]
    ad8c:	3201      	adds	r2, #1
    ad8e:	2c00      	cmp	r4, #0
    ad90:	d1f6      	bne.n	ad80 <strnlen+0x6>
    ad92:	e7f8      	b.n	ad86 <strnlen+0xc>

0000ad94 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    ad94:	f7fb bb92 	b.w	64bc <SystemInit>
