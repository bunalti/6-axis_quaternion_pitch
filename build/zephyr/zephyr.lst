
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	200029a0 	.word	0x200029a0
}
   4:	000061b1 	.word	0x000061b1
   8:	00011a3b 	.word	0x00011a3b
   c:	00006169 	.word	0x00006169
  10:	00006169 	.word	0x00006169
  14:	00006169 	.word	0x00006169
  18:	00006169 	.word	0x00006169
	...
  2c:	0000580d 	.word	0x0000580d
  30:	00006169 	.word	0x00006169
  34:	00000000 	.word	0x00000000
  38:	000057b5 	.word	0x000057b5
  3c:	00006169 	.word	0x00006169

00000040 <_irq_vector_table>:
  40:	000058f9 000125a7 000058f9 000058f9     .X...%...X...X..
  50:	000058f9 000058f9 000058f9 000058f9     .X...X...X...X..
  60:	000058f9 000058f9 000125c5 000058f9     .X...X...%...X..
  70:	000058f9 000058f9 000058f9 000058f9     .X...X...X...X..
  80:	000058f9 000058f9 000058f9 000058f9     .X...X...X...X..
  90:	000125df 000058f9 000058f9 000058f9     .%...X...X...X..
  a0:	000058f9 000058f9 000058f9 000058f9     .X...X...X...X..
  b0:	000058f9 000058f9 000058f9 000058f9     .X...X...X...X..
  c0:	000058f9 000058f9 000058f9 000058f9     .X...X...X...X..
  d0:	000058f9 000058f9 000058f9              .X...X...X..

Disassembly of section text:

000000e0 <memchr>:
      e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
      e4:	2a10      	cmp	r2, #16
      e6:	db2b      	blt.n	140 <CONFIG_IDLE_STACK_SIZE>
      e8:	f010 0f07 	tst.w	r0, #7
      ec:	d008      	beq.n	100 <CONFIG_KOBJECT_TEXT_AREA>
      ee:	f810 3b01 	ldrb.w	r3, [r0], #1
      f2:	3a01      	subs	r2, #1
      f4:	428b      	cmp	r3, r1
      f6:	d02d      	beq.n	154 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa>
      f8:	f010 0f07 	tst.w	r0, #7
      fc:	b342      	cbz	r2, 150 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6>
      fe:	d1f6      	bne.n	ee <memchr+0xe>
     100:	b4f0      	push	{r4, r5, r6, r7}
     102:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     106:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     10a:	f022 0407 	bic.w	r4, r2, #7
     10e:	f07f 0700 	mvns.w	r7, #0
     112:	2300      	movs	r3, #0
     114:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     118:	3c08      	subs	r4, #8
     11a:	ea85 0501 	eor.w	r5, r5, r1
     11e:	ea86 0601 	eor.w	r6, r6, r1
     122:	fa85 f547 	uadd8	r5, r5, r7
     126:	faa3 f587 	sel	r5, r3, r7
     12a:	fa86 f647 	uadd8	r6, r6, r7
     12e:	faa5 f687 	sel	r6, r5, r7
     132:	b98e      	cbnz	r6, 158 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xe>
     134:	d1ee      	bne.n	114 <CONFIG_KOBJECT_TEXT_AREA+0x14>
     136:	bcf0      	pop	{r4, r5, r6, r7}
     138:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     13c:	f002 0207 	and.w	r2, r2, #7
     140:	b132      	cbz	r2, 150 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6>
     142:	f810 3b01 	ldrb.w	r3, [r0], #1
     146:	3a01      	subs	r2, #1
     148:	ea83 0301 	eor.w	r3, r3, r1
     14c:	b113      	cbz	r3, 154 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa>
     14e:	d1f8      	bne.n	142 <CONFIG_IDLE_STACK_SIZE+0x2>
     150:	2000      	movs	r0, #0
     152:	4770      	bx	lr
     154:	3801      	subs	r0, #1
     156:	4770      	bx	lr
     158:	2d00      	cmp	r5, #0
     15a:	bf06      	itte	eq
     15c:	4635      	moveq	r5, r6
     15e:	3803      	subeq	r0, #3
     160:	3807      	subne	r0, #7
     162:	f015 0f01 	tst.w	r5, #1
     166:	d107      	bne.n	178 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2e>
     168:	3001      	adds	r0, #1
     16a:	f415 7f80 	tst.w	r5, #256	; 0x100
     16e:	bf02      	ittt	eq
     170:	3001      	addeq	r0, #1
     172:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     176:	3001      	addeq	r0, #1
     178:	bcf0      	pop	{r4, r5, r6, r7}
     17a:	3801      	subs	r0, #1
     17c:	4770      	bx	lr
     17e:	bf00      	nop

00000180 <__aeabi_drsub>:
     180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     184:	e002      	b.n	18c <__adddf3>
     186:	bf00      	nop

00000188 <__aeabi_dsub>:
     188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000018c <__adddf3>:
     18c:	b530      	push	{r4, r5, lr}
     18e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     192:	ea4f 0543 	mov.w	r5, r3, lsl #1
     196:	ea94 0f05 	teq	r4, r5
     19a:	bf08      	it	eq
     19c:	ea90 0f02 	teqeq	r0, r2
     1a0:	bf1f      	itttt	ne
     1a2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1a6:	ea55 0c02 	orrsne.w	ip, r5, r2
     1aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     1ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     1b2:	f000 80e2 	beq.w	37a <__data_size+0x1e>
     1b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     1be:	bfb8      	it	lt
     1c0:	426d      	neglt	r5, r5
     1c2:	dd0c      	ble.n	1de <CONFIG_FS_FATFS_CODEPAGE+0x29>
     1c4:	442c      	add	r4, r5
     1c6:	ea80 0202 	eor.w	r2, r0, r2
     1ca:	ea81 0303 	eor.w	r3, r1, r3
     1ce:	ea82 0000 	eor.w	r0, r2, r0
     1d2:	ea83 0101 	eor.w	r1, r3, r1
     1d6:	ea80 0202 	eor.w	r2, r0, r2
     1da:	ea81 0303 	eor.w	r3, r1, r3
     1de:	2d36      	cmp	r5, #54	; 0x36
     1e0:	bf88      	it	hi
     1e2:	bd30      	pophi	{r4, r5, pc}
     1e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     1e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     1ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     1f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     1f4:	d002      	beq.n	1fc <CONFIG_FS_FATFS_CODEPAGE+0x47>
     1f6:	4240      	negs	r0, r0
     1f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     200:	ea4f 3303 	mov.w	r3, r3, lsl #12
     204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     208:	d002      	beq.n	210 <CONFIG_FLASH_SIZE+0x10>
     20a:	4252      	negs	r2, r2
     20c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     210:	ea94 0f05 	teq	r4, r5
     214:	f000 80a7 	beq.w	366 <__data_size+0xa>
     218:	f1a4 0401 	sub.w	r4, r4, #1
     21c:	f1d5 0e20 	rsbs	lr, r5, #32
     220:	db0d      	blt.n	23e <CONFIG_FLASH_SIZE+0x3e>
     222:	fa02 fc0e 	lsl.w	ip, r2, lr
     226:	fa22 f205 	lsr.w	r2, r2, r5
     22a:	1880      	adds	r0, r0, r2
     22c:	f141 0100 	adc.w	r1, r1, #0
     230:	fa03 f20e 	lsl.w	r2, r3, lr
     234:	1880      	adds	r0, r0, r2
     236:	fa43 f305 	asr.w	r3, r3, r5
     23a:	4159      	adcs	r1, r3
     23c:	e00e      	b.n	25c <CONFIG_FLASH_SIZE+0x5c>
     23e:	f1a5 0520 	sub.w	r5, r5, #32
     242:	f10e 0e20 	add.w	lr, lr, #32
     246:	2a01      	cmp	r2, #1
     248:	fa03 fc0e 	lsl.w	ip, r3, lr
     24c:	bf28      	it	cs
     24e:	f04c 0c02 	orrcs.w	ip, ip, #2
     252:	fa43 f305 	asr.w	r3, r3, r5
     256:	18c0      	adds	r0, r0, r3
     258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     25c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     260:	d507      	bpl.n	272 <CONFIG_FLASH_SIZE+0x72>
     262:	f04f 0e00 	mov.w	lr, #0
     266:	f1dc 0c00 	rsbs	ip, ip, #0
     26a:	eb7e 0000 	sbcs.w	r0, lr, r0
     26e:	eb6e 0101 	sbc.w	r1, lr, r1
     272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     276:	d31b      	bcc.n	2b0 <CONFIG_FLASH_SIZE+0xb0>
     278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     27c:	d30c      	bcc.n	298 <CONFIG_FLASH_SIZE+0x98>
     27e:	0849      	lsrs	r1, r1, #1
     280:	ea5f 0030 	movs.w	r0, r0, rrx
     284:	ea4f 0c3c 	mov.w	ip, ip, rrx
     288:	f104 0401 	add.w	r4, r4, #1
     28c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     294:	f080 809a 	bcs.w	3cc <__data_size+0x70>
     298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     29c:	bf08      	it	eq
     29e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2a2:	f150 0000 	adcs.w	r0, r0, #0
     2a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2aa:	ea41 0105 	orr.w	r1, r1, r5
     2ae:	bd30      	pop	{r4, r5, pc}
     2b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2b4:	4140      	adcs	r0, r0
     2b6:	eb41 0101 	adc.w	r1, r1, r1
     2ba:	3c01      	subs	r4, #1
     2bc:	bf28      	it	cs
     2be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2c2:	d2e9      	bcs.n	298 <CONFIG_FLASH_SIZE+0x98>
     2c4:	f091 0f00 	teq	r1, #0
     2c8:	bf04      	itt	eq
     2ca:	4601      	moveq	r1, r0
     2cc:	2000      	moveq	r0, #0
     2ce:	fab1 f381 	clz	r3, r1
     2d2:	bf08      	it	eq
     2d4:	3320      	addeq	r3, #32
     2d6:	f1a3 030b 	sub.w	r3, r3, #11
     2da:	f1b3 0220 	subs.w	r2, r3, #32
     2de:	da0c      	bge.n	2fa <CONFIG_FLASH_SIZE+0xfa>
     2e0:	320c      	adds	r2, #12
     2e2:	dd08      	ble.n	2f6 <CONFIG_FLASH_SIZE+0xf6>
     2e4:	f102 0c14 	add.w	ip, r2, #20
     2e8:	f1c2 020c 	rsb	r2, r2, #12
     2ec:	fa01 f00c 	lsl.w	r0, r1, ip
     2f0:	fa21 f102 	lsr.w	r1, r1, r2
     2f4:	e00c      	b.n	310 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x10>
     2f6:	f102 0214 	add.w	r2, r2, #20
     2fa:	bfd8      	it	le
     2fc:	f1c2 0c20 	rsble	ip, r2, #32
     300:	fa01 f102 	lsl.w	r1, r1, r2
     304:	fa20 fc0c 	lsr.w	ip, r0, ip
     308:	bfdc      	itt	le
     30a:	ea41 010c 	orrle.w	r1, r1, ip
     30e:	4090      	lslle	r0, r2
     310:	1ae4      	subs	r4, r4, r3
     312:	bfa2      	ittt	ge
     314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     318:	4329      	orrge	r1, r5
     31a:	bd30      	popge	{r4, r5, pc}
     31c:	ea6f 0404 	mvn.w	r4, r4
     320:	3c1f      	subs	r4, #31
     322:	da1c      	bge.n	35e <__data_size+0x2>
     324:	340c      	adds	r4, #12
     326:	dc0e      	bgt.n	346 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x46>
     328:	f104 0414 	add.w	r4, r4, #20
     32c:	f1c4 0220 	rsb	r2, r4, #32
     330:	fa20 f004 	lsr.w	r0, r0, r4
     334:	fa01 f302 	lsl.w	r3, r1, r2
     338:	ea40 0003 	orr.w	r0, r0, r3
     33c:	fa21 f304 	lsr.w	r3, r1, r4
     340:	ea45 0103 	orr.w	r1, r5, r3
     344:	bd30      	pop	{r4, r5, pc}
     346:	f1c4 040c 	rsb	r4, r4, #12
     34a:	f1c4 0220 	rsb	r2, r4, #32
     34e:	fa20 f002 	lsr.w	r0, r0, r2
     352:	fa01 f304 	lsl.w	r3, r1, r4
     356:	ea40 0003 	orr.w	r0, r0, r3
     35a:	4629      	mov	r1, r5
     35c:	bd30      	pop	{r4, r5, pc}
     35e:	fa21 f004 	lsr.w	r0, r1, r4
     362:	4629      	mov	r1, r5
     364:	bd30      	pop	{r4, r5, pc}
     366:	f094 0f00 	teq	r4, #0
     36a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     36e:	bf06      	itte	eq
     370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     374:	3401      	addeq	r4, #1
     376:	3d01      	subne	r5, #1
     378:	e74e      	b.n	218 <CONFIG_FLASH_SIZE+0x18>
     37a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     37e:	bf18      	it	ne
     380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     384:	d029      	beq.n	3da <__data_size+0x7e>
     386:	ea94 0f05 	teq	r4, r5
     38a:	bf08      	it	eq
     38c:	ea90 0f02 	teqeq	r0, r2
     390:	d005      	beq.n	39e <__data_size+0x42>
     392:	ea54 0c00 	orrs.w	ip, r4, r0
     396:	bf04      	itt	eq
     398:	4619      	moveq	r1, r3
     39a:	4610      	moveq	r0, r2
     39c:	bd30      	pop	{r4, r5, pc}
     39e:	ea91 0f03 	teq	r1, r3
     3a2:	bf1e      	ittt	ne
     3a4:	2100      	movne	r1, #0
     3a6:	2000      	movne	r0, #0
     3a8:	bd30      	popne	{r4, r5, pc}
     3aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ae:	d105      	bne.n	3bc <__data_size+0x60>
     3b0:	0040      	lsls	r0, r0, #1
     3b2:	4149      	adcs	r1, r1
     3b4:	bf28      	it	cs
     3b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3ba:	bd30      	pop	{r4, r5, pc}
     3bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3c0:	bf3c      	itt	cc
     3c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3c6:	bd30      	popcc	{r4, r5, pc}
     3c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3d4:	f04f 0000 	mov.w	r0, #0
     3d8:	bd30      	pop	{r4, r5, pc}
     3da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3de:	bf1a      	itte	ne
     3e0:	4619      	movne	r1, r3
     3e2:	4610      	movne	r0, r2
     3e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     3e8:	bf1c      	itt	ne
     3ea:	460b      	movne	r3, r1
     3ec:	4602      	movne	r2, r0
     3ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     3f2:	bf06      	itte	eq
     3f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     3f8:	ea91 0f03 	teqeq	r1, r3
     3fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     400:	bd30      	pop	{r4, r5, pc}
     402:	bf00      	nop

00000404 <__aeabi_ui2d>:
     404:	f090 0f00 	teq	r0, #0
     408:	bf04      	itt	eq
     40a:	2100      	moveq	r1, #0
     40c:	4770      	bxeq	lr
     40e:	b530      	push	{r4, r5, lr}
     410:	f44f 6480 	mov.w	r4, #1024	; 0x400
     414:	f104 0432 	add.w	r4, r4, #50	; 0x32
     418:	f04f 0500 	mov.w	r5, #0
     41c:	f04f 0100 	mov.w	r1, #0
     420:	e750      	b.n	2c4 <CONFIG_FLASH_SIZE+0xc4>
     422:	bf00      	nop

00000424 <__aeabi_i2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     43c:	bf48      	it	mi
     43e:	4240      	negmi	r0, r0
     440:	f04f 0100 	mov.w	r1, #0
     444:	e73e      	b.n	2c4 <CONFIG_FLASH_SIZE+0xc4>
     446:	bf00      	nop

00000448 <__aeabi_f2d>:
     448:	0042      	lsls	r2, r0, #1
     44a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     44e:	ea4f 0131 	mov.w	r1, r1, rrx
     452:	ea4f 7002 	mov.w	r0, r2, lsl #28
     456:	bf1f      	itttt	ne
     458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     45c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     464:	4770      	bxne	lr
     466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     46a:	bf08      	it	eq
     46c:	4770      	bxeq	lr
     46e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     472:	bf04      	itt	eq
     474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     478:	4770      	bxeq	lr
     47a:	b530      	push	{r4, r5, lr}
     47c:	f44f 7460 	mov.w	r4, #896	; 0x380
     480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     488:	e71c      	b.n	2c4 <CONFIG_FLASH_SIZE+0xc4>
     48a:	bf00      	nop

0000048c <__aeabi_ul2d>:
     48c:	ea50 0201 	orrs.w	r2, r0, r1
     490:	bf08      	it	eq
     492:	4770      	bxeq	lr
     494:	b530      	push	{r4, r5, lr}
     496:	f04f 0500 	mov.w	r5, #0
     49a:	e00a      	b.n	4b2 <__aeabi_l2d+0x16>

0000049c <__aeabi_l2d>:
     49c:	ea50 0201 	orrs.w	r2, r0, r1
     4a0:	bf08      	it	eq
     4a2:	4770      	bxeq	lr
     4a4:	b530      	push	{r4, r5, lr}
     4a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4aa:	d502      	bpl.n	4b2 <__aeabi_l2d+0x16>
     4ac:	4240      	negs	r0, r0
     4ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4be:	f43f aed8 	beq.w	272 <CONFIG_FLASH_SIZE+0x72>
     4c2:	f04f 0203 	mov.w	r2, #3
     4c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ca:	bf18      	it	ne
     4cc:	3203      	addne	r2, #3
     4ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4d2:	bf18      	it	ne
     4d4:	3203      	addne	r2, #3
     4d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4da:	f1c2 0320 	rsb	r3, r2, #32
     4de:	fa00 fc03 	lsl.w	ip, r0, r3
     4e2:	fa20 f002 	lsr.w	r0, r0, r2
     4e6:	fa01 fe03 	lsl.w	lr, r1, r3
     4ea:	ea40 000e 	orr.w	r0, r0, lr
     4ee:	fa21 f102 	lsr.w	r1, r1, r2
     4f2:	4414      	add	r4, r2
     4f4:	e6bd      	b.n	272 <CONFIG_FLASH_SIZE+0x72>
     4f6:	bf00      	nop

000004f8 <__aeabi_dmul>:
     4f8:	b570      	push	{r4, r5, r6, lr}
     4fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
     4fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     506:	bf1d      	ittte	ne
     508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     50c:	ea94 0f0c 	teqne	r4, ip
     510:	ea95 0f0c 	teqne	r5, ip
     514:	f000 f8de 	bleq	6d4 <__aeabi_dmul+0x1dc>
     518:	442c      	add	r4, r5
     51a:	ea81 0603 	eor.w	r6, r1, r3
     51e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     52a:	bf18      	it	ne
     52c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     538:	d038      	beq.n	5ac <__aeabi_dmul+0xb4>
     53a:	fba0 ce02 	umull	ip, lr, r0, r2
     53e:	f04f 0500 	mov.w	r5, #0
     542:	fbe1 e502 	umlal	lr, r5, r1, r2
     546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     54a:	fbe0 e503 	umlal	lr, r5, r0, r3
     54e:	f04f 0600 	mov.w	r6, #0
     552:	fbe1 5603 	umlal	r5, r6, r1, r3
     556:	f09c 0f00 	teq	ip, #0
     55a:	bf18      	it	ne
     55c:	f04e 0e01 	orrne.w	lr, lr, #1
     560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     56c:	d204      	bcs.n	578 <__aeabi_dmul+0x80>
     56e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     572:	416d      	adcs	r5, r5
     574:	eb46 0606 	adc.w	r6, r6, r6
     578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     57c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     58c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     590:	bf88      	it	hi
     592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     596:	d81e      	bhi.n	5d6 <__aeabi_dmul+0xde>
     598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     59c:	bf08      	it	eq
     59e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5a2:	f150 0000 	adcs.w	r0, r0, #0
     5a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5b0:	ea46 0101 	orr.w	r1, r6, r1
     5b4:	ea40 0002 	orr.w	r0, r0, r2
     5b8:	ea81 0103 	eor.w	r1, r1, r3
     5bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5c0:	bfc2      	ittt	gt
     5c2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ca:	bd70      	popgt	{r4, r5, r6, pc}
     5cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5d0:	f04f 0e00 	mov.w	lr, #0
     5d4:	3c01      	subs	r4, #1
     5d6:	f300 80ab 	bgt.w	730 <__aeabi_dmul+0x238>
     5da:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5de:	bfde      	ittt	le
     5e0:	2000      	movle	r0, #0
     5e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     5e6:	bd70      	pople	{r4, r5, r6, pc}
     5e8:	f1c4 0400 	rsb	r4, r4, #0
     5ec:	3c20      	subs	r4, #32
     5ee:	da35      	bge.n	65c <__aeabi_dmul+0x164>
     5f0:	340c      	adds	r4, #12
     5f2:	dc1b      	bgt.n	62c <__aeabi_dmul+0x134>
     5f4:	f104 0414 	add.w	r4, r4, #20
     5f8:	f1c4 0520 	rsb	r5, r4, #32
     5fc:	fa00 f305 	lsl.w	r3, r0, r5
     600:	fa20 f004 	lsr.w	r0, r0, r4
     604:	fa01 f205 	lsl.w	r2, r1, r5
     608:	ea40 0002 	orr.w	r0, r0, r2
     60c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     618:	fa21 f604 	lsr.w	r6, r1, r4
     61c:	eb42 0106 	adc.w	r1, r2, r6
     620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     624:	bf08      	it	eq
     626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     62a:	bd70      	pop	{r4, r5, r6, pc}
     62c:	f1c4 040c 	rsb	r4, r4, #12
     630:	f1c4 0520 	rsb	r5, r4, #32
     634:	fa00 f304 	lsl.w	r3, r0, r4
     638:	fa20 f005 	lsr.w	r0, r0, r5
     63c:	fa01 f204 	lsl.w	r2, r1, r4
     640:	ea40 0002 	orr.w	r0, r0, r2
     644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     64c:	f141 0100 	adc.w	r1, r1, #0
     650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     654:	bf08      	it	eq
     656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     65a:	bd70      	pop	{r4, r5, r6, pc}
     65c:	f1c4 0520 	rsb	r5, r4, #32
     660:	fa00 f205 	lsl.w	r2, r0, r5
     664:	ea4e 0e02 	orr.w	lr, lr, r2
     668:	fa20 f304 	lsr.w	r3, r0, r4
     66c:	fa01 f205 	lsl.w	r2, r1, r5
     670:	ea43 0302 	orr.w	r3, r3, r2
     674:	fa21 f004 	lsr.w	r0, r1, r4
     678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     67c:	fa21 f204 	lsr.w	r2, r1, r4
     680:	ea20 0002 	bic.w	r0, r0, r2
     684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     68c:	bf08      	it	eq
     68e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     692:	bd70      	pop	{r4, r5, r6, pc}
     694:	f094 0f00 	teq	r4, #0
     698:	d10f      	bne.n	6ba <__aeabi_dmul+0x1c2>
     69a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     69e:	0040      	lsls	r0, r0, #1
     6a0:	eb41 0101 	adc.w	r1, r1, r1
     6a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6a8:	bf08      	it	eq
     6aa:	3c01      	subeq	r4, #1
     6ac:	d0f7      	beq.n	69e <__aeabi_dmul+0x1a6>
     6ae:	ea41 0106 	orr.w	r1, r1, r6
     6b2:	f095 0f00 	teq	r5, #0
     6b6:	bf18      	it	ne
     6b8:	4770      	bxne	lr
     6ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6be:	0052      	lsls	r2, r2, #1
     6c0:	eb43 0303 	adc.w	r3, r3, r3
     6c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3d01      	subeq	r5, #1
     6cc:	d0f7      	beq.n	6be <__aeabi_dmul+0x1c6>
     6ce:	ea43 0306 	orr.w	r3, r3, r6
     6d2:	4770      	bx	lr
     6d4:	ea94 0f0c 	teq	r4, ip
     6d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6dc:	bf18      	it	ne
     6de:	ea95 0f0c 	teqne	r5, ip
     6e2:	d00c      	beq.n	6fe <__aeabi_dmul+0x206>
     6e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6e8:	bf18      	it	ne
     6ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6ee:	d1d1      	bne.n	694 <__aeabi_dmul+0x19c>
     6f0:	ea81 0103 	eor.w	r1, r1, r3
     6f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6f8:	f04f 0000 	mov.w	r0, #0
     6fc:	bd70      	pop	{r4, r5, r6, pc}
     6fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     702:	bf06      	itte	eq
     704:	4610      	moveq	r0, r2
     706:	4619      	moveq	r1, r3
     708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70c:	d019      	beq.n	742 <__aeabi_dmul+0x24a>
     70e:	ea94 0f0c 	teq	r4, ip
     712:	d102      	bne.n	71a <__aeabi_dmul+0x222>
     714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     718:	d113      	bne.n	742 <__aeabi_dmul+0x24a>
     71a:	ea95 0f0c 	teq	r5, ip
     71e:	d105      	bne.n	72c <__aeabi_dmul+0x234>
     720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     724:	bf1c      	itt	ne
     726:	4610      	movne	r0, r2
     728:	4619      	movne	r1, r3
     72a:	d10a      	bne.n	742 <__aeabi_dmul+0x24a>
     72c:	ea81 0103 	eor.w	r1, r1, r3
     730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     73c:	f04f 0000 	mov.w	r0, #0
     740:	bd70      	pop	{r4, r5, r6, pc}
     742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     74a:	bd70      	pop	{r4, r5, r6, pc}

0000074c <__aeabi_ddiv>:
     74c:	b570      	push	{r4, r5, r6, lr}
     74e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     75a:	bf1d      	ittte	ne
     75c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     760:	ea94 0f0c 	teqne	r4, ip
     764:	ea95 0f0c 	teqne	r5, ip
     768:	f000 f8a7 	bleq	8ba <CONFIG_HEAP_MEM_POOL_SIZE+0xba>
     76c:	eba4 0405 	sub.w	r4, r4, r5
     770:	ea81 0e03 	eor.w	lr, r1, r3
     774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     778:	ea4f 3101 	mov.w	r1, r1, lsl #12
     77c:	f000 8088 	beq.w	890 <CONFIG_HEAP_MEM_POOL_SIZE+0x90>
     780:	ea4f 3303 	mov.w	r3, r3, lsl #12
     784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     78c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     790:	ea4f 2202 	mov.w	r2, r2, lsl #8
     794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     79c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7a4:	429d      	cmp	r5, r3
     7a6:	bf08      	it	eq
     7a8:	4296      	cmpeq	r6, r2
     7aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7b2:	d202      	bcs.n	7ba <__aeabi_ddiv+0x6e>
     7b4:	085b      	lsrs	r3, r3, #1
     7b6:	ea4f 0232 	mov.w	r2, r2, rrx
     7ba:	1ab6      	subs	r6, r6, r2
     7bc:	eb65 0503 	sbc.w	r5, r5, r3
     7c0:	085b      	lsrs	r3, r3, #1
     7c2:	ea4f 0232 	mov.w	r2, r2, rrx
     7c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ce:	ebb6 0e02 	subs.w	lr, r6, r2
     7d2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7d6:	bf22      	ittt	cs
     7d8:	1ab6      	subcs	r6, r6, r2
     7da:	4675      	movcs	r5, lr
     7dc:	ea40 000c 	orrcs.w	r0, r0, ip
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	ebb6 0e02 	subs.w	lr, r6, r2
     7ea:	eb75 0e03 	sbcs.w	lr, r5, r3
     7ee:	bf22      	ittt	cs
     7f0:	1ab6      	subcs	r6, r6, r2
     7f2:	4675      	movcs	r5, lr
     7f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     7f8:	085b      	lsrs	r3, r3, #1
     7fa:	ea4f 0232 	mov.w	r2, r2, rrx
     7fe:	ebb6 0e02 	subs.w	lr, r6, r2
     802:	eb75 0e03 	sbcs.w	lr, r5, r3
     806:	bf22      	ittt	cs
     808:	1ab6      	subcs	r6, r6, r2
     80a:	4675      	movcs	r5, lr
     80c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     810:	085b      	lsrs	r3, r3, #1
     812:	ea4f 0232 	mov.w	r2, r2, rrx
     816:	ebb6 0e02 	subs.w	lr, r6, r2
     81a:	eb75 0e03 	sbcs.w	lr, r5, r3
     81e:	bf22      	ittt	cs
     820:	1ab6      	subcs	r6, r6, r2
     822:	4675      	movcs	r5, lr
     824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     828:	ea55 0e06 	orrs.w	lr, r5, r6
     82c:	d018      	beq.n	860 <CONFIG_HEAP_MEM_POOL_SIZE+0x60>
     82e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     836:	ea4f 1606 	mov.w	r6, r6, lsl #4
     83a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     83e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     84a:	d1c0      	bne.n	7ce <__aeabi_ddiv+0x82>
     84c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     850:	d10b      	bne.n	86a <CONFIG_HEAP_MEM_POOL_SIZE+0x6a>
     852:	ea41 0100 	orr.w	r1, r1, r0
     856:	f04f 0000 	mov.w	r0, #0
     85a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     85e:	e7b6      	b.n	7ce <__aeabi_ddiv+0x82>
     860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     864:	bf04      	itt	eq
     866:	4301      	orreq	r1, r0
     868:	2000      	moveq	r0, #0
     86a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     86e:	bf88      	it	hi
     870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     874:	f63f aeaf 	bhi.w	5d6 <__aeabi_dmul+0xde>
     878:	ebb5 0c03 	subs.w	ip, r5, r3
     87c:	bf04      	itt	eq
     87e:	ebb6 0c02 	subseq.w	ip, r6, r2
     882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     886:	f150 0000 	adcs.w	r0, r0, #0
     88a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     88e:	bd70      	pop	{r4, r5, r6, pc}
     890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     89c:	bfc2      	ittt	gt
     89e:	ebd4 050c 	rsbsgt	r5, r4, ip
     8a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8a6:	bd70      	popgt	{r4, r5, r6, pc}
     8a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8ac:	f04f 0e00 	mov.w	lr, #0
     8b0:	3c01      	subs	r4, #1
     8b2:	e690      	b.n	5d6 <__aeabi_dmul+0xde>
     8b4:	ea45 0e06 	orr.w	lr, r5, r6
     8b8:	e68d      	b.n	5d6 <__aeabi_dmul+0xde>
     8ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8be:	ea94 0f0c 	teq	r4, ip
     8c2:	bf08      	it	eq
     8c4:	ea95 0f0c 	teqeq	r5, ip
     8c8:	f43f af3b 	beq.w	742 <__aeabi_dmul+0x24a>
     8cc:	ea94 0f0c 	teq	r4, ip
     8d0:	d10a      	bne.n	8e8 <CONFIG_HEAP_MEM_POOL_SIZE+0xe8>
     8d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8d6:	f47f af34 	bne.w	742 <__aeabi_dmul+0x24a>
     8da:	ea95 0f0c 	teq	r5, ip
     8de:	f47f af25 	bne.w	72c <__aeabi_dmul+0x234>
     8e2:	4610      	mov	r0, r2
     8e4:	4619      	mov	r1, r3
     8e6:	e72c      	b.n	742 <__aeabi_dmul+0x24a>
     8e8:	ea95 0f0c 	teq	r5, ip
     8ec:	d106      	bne.n	8fc <CONFIG_HEAP_MEM_POOL_SIZE+0xfc>
     8ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     8f2:	f43f aefd 	beq.w	6f0 <__aeabi_dmul+0x1f8>
     8f6:	4610      	mov	r0, r2
     8f8:	4619      	mov	r1, r3
     8fa:	e722      	b.n	742 <__aeabi_dmul+0x24a>
     8fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     900:	bf18      	it	ne
     902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     906:	f47f aec5 	bne.w	694 <__aeabi_dmul+0x19c>
     90a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     90e:	f47f af0d 	bne.w	72c <__aeabi_dmul+0x234>
     912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     916:	f47f aeeb 	bne.w	6f0 <__aeabi_dmul+0x1f8>
     91a:	e712      	b.n	742 <__aeabi_dmul+0x24a>

0000091c <__gedf2>:
     91c:	f04f 3cff 	mov.w	ip, #4294967295
     920:	e006      	b.n	930 <__cmpdf2+0x4>
     922:	bf00      	nop

00000924 <__ledf2>:
     924:	f04f 0c01 	mov.w	ip, #1
     928:	e002      	b.n	930 <__cmpdf2+0x4>
     92a:	bf00      	nop

0000092c <__cmpdf2>:
     92c:	f04f 0c01 	mov.w	ip, #1
     930:	f84d cd04 	str.w	ip, [sp, #-4]!
     934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     93c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     940:	bf18      	it	ne
     942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     946:	d01b      	beq.n	980 <__cmpdf2+0x54>
     948:	b001      	add	sp, #4
     94a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     94e:	bf0c      	ite	eq
     950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     954:	ea91 0f03 	teqne	r1, r3
     958:	bf02      	ittt	eq
     95a:	ea90 0f02 	teqeq	r0, r2
     95e:	2000      	moveq	r0, #0
     960:	4770      	bxeq	lr
     962:	f110 0f00 	cmn.w	r0, #0
     966:	ea91 0f03 	teq	r1, r3
     96a:	bf58      	it	pl
     96c:	4299      	cmppl	r1, r3
     96e:	bf08      	it	eq
     970:	4290      	cmpeq	r0, r2
     972:	bf2c      	ite	cs
     974:	17d8      	asrcs	r0, r3, #31
     976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     97a:	f040 0001 	orr.w	r0, r0, #1
     97e:	4770      	bx	lr
     980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     988:	d102      	bne.n	990 <__cmpdf2+0x64>
     98a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     98e:	d107      	bne.n	9a0 <__cmpdf2+0x74>
     990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     998:	d1d6      	bne.n	948 <__cmpdf2+0x1c>
     99a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     99e:	d0d3      	beq.n	948 <__cmpdf2+0x1c>
     9a0:	f85d 0b04 	ldr.w	r0, [sp], #4
     9a4:	4770      	bx	lr
     9a6:	bf00      	nop

000009a8 <__aeabi_cdrcmple>:
     9a8:	4684      	mov	ip, r0
     9aa:	4610      	mov	r0, r2
     9ac:	4662      	mov	r2, ip
     9ae:	468c      	mov	ip, r1
     9b0:	4619      	mov	r1, r3
     9b2:	4663      	mov	r3, ip
     9b4:	e000      	b.n	9b8 <__aeabi_cdcmpeq>
     9b6:	bf00      	nop

000009b8 <__aeabi_cdcmpeq>:
     9b8:	b501      	push	{r0, lr}
     9ba:	f7ff ffb7 	bl	92c <__cmpdf2>
     9be:	2800      	cmp	r0, #0
     9c0:	bf48      	it	mi
     9c2:	f110 0f00 	cmnmi.w	r0, #0
     9c6:	bd01      	pop	{r0, pc}

000009c8 <__aeabi_dcmpeq>:
     9c8:	f84d ed08 	str.w	lr, [sp, #-8]!
     9cc:	f7ff fff4 	bl	9b8 <__aeabi_cdcmpeq>
     9d0:	bf0c      	ite	eq
     9d2:	2001      	moveq	r0, #1
     9d4:	2000      	movne	r0, #0
     9d6:	f85d fb08 	ldr.w	pc, [sp], #8
     9da:	bf00      	nop

000009dc <__aeabi_dcmplt>:
     9dc:	f84d ed08 	str.w	lr, [sp, #-8]!
     9e0:	f7ff ffea 	bl	9b8 <__aeabi_cdcmpeq>
     9e4:	bf34      	ite	cc
     9e6:	2001      	movcc	r0, #1
     9e8:	2000      	movcs	r0, #0
     9ea:	f85d fb08 	ldr.w	pc, [sp], #8
     9ee:	bf00      	nop

000009f0 <__aeabi_dcmple>:
     9f0:	f84d ed08 	str.w	lr, [sp, #-8]!
     9f4:	f7ff ffe0 	bl	9b8 <__aeabi_cdcmpeq>
     9f8:	bf94      	ite	ls
     9fa:	2001      	movls	r0, #1
     9fc:	2000      	movhi	r0, #0
     9fe:	f85d fb08 	ldr.w	pc, [sp], #8
     a02:	bf00      	nop

00000a04 <__aeabi_dcmpge>:
     a04:	f84d ed08 	str.w	lr, [sp, #-8]!
     a08:	f7ff ffce 	bl	9a8 <__aeabi_cdrcmple>
     a0c:	bf94      	ite	ls
     a0e:	2001      	movls	r0, #1
     a10:	2000      	movhi	r0, #0
     a12:	f85d fb08 	ldr.w	pc, [sp], #8
     a16:	bf00      	nop

00000a18 <__aeabi_dcmpgt>:
     a18:	f84d ed08 	str.w	lr, [sp, #-8]!
     a1c:	f7ff ffc4 	bl	9a8 <__aeabi_cdrcmple>
     a20:	bf34      	ite	cc
     a22:	2001      	movcc	r0, #1
     a24:	2000      	movcs	r0, #0
     a26:	f85d fb08 	ldr.w	pc, [sp], #8
     a2a:	bf00      	nop

00000a2c <__aeabi_frsub>:
     a2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     a30:	e002      	b.n	a38 <__addsf3>
     a32:	bf00      	nop

00000a34 <__aeabi_fsub>:
     a34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000a38 <__addsf3>:
     a38:	0042      	lsls	r2, r0, #1
     a3a:	bf1f      	itttt	ne
     a3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     a40:	ea92 0f03 	teqne	r2, r3
     a44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     a48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     a4c:	d06a      	beq.n	b24 <__addsf3+0xec>
     a4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
     a52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     a56:	bfc1      	itttt	gt
     a58:	18d2      	addgt	r2, r2, r3
     a5a:	4041      	eorgt	r1, r0
     a5c:	4048      	eorgt	r0, r1
     a5e:	4041      	eorgt	r1, r0
     a60:	bfb8      	it	lt
     a62:	425b      	neglt	r3, r3
     a64:	2b19      	cmp	r3, #25
     a66:	bf88      	it	hi
     a68:	4770      	bxhi	lr
     a6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     a6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     a72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a76:	bf18      	it	ne
     a78:	4240      	negne	r0, r0
     a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     a82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     a86:	bf18      	it	ne
     a88:	4249      	negne	r1, r1
     a8a:	ea92 0f03 	teq	r2, r3
     a8e:	d03f      	beq.n	b10 <__addsf3+0xd8>
     a90:	f1a2 0201 	sub.w	r2, r2, #1
     a94:	fa41 fc03 	asr.w	ip, r1, r3
     a98:	eb10 000c 	adds.w	r0, r0, ip
     a9c:	f1c3 0320 	rsb	r3, r3, #32
     aa0:	fa01 f103 	lsl.w	r1, r1, r3
     aa4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     aa8:	d502      	bpl.n	ab0 <__addsf3+0x78>
     aaa:	4249      	negs	r1, r1
     aac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     ab0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     ab4:	d313      	bcc.n	ade <__addsf3+0xa6>
     ab6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     aba:	d306      	bcc.n	aca <__addsf3+0x92>
     abc:	0840      	lsrs	r0, r0, #1
     abe:	ea4f 0131 	mov.w	r1, r1, rrx
     ac2:	f102 0201 	add.w	r2, r2, #1
     ac6:	2afe      	cmp	r2, #254	; 0xfe
     ac8:	d251      	bcs.n	b6e <__addsf3+0x136>
     aca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     ace:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     ad2:	bf08      	it	eq
     ad4:	f020 0001 	biceq.w	r0, r0, #1
     ad8:	ea40 0003 	orr.w	r0, r0, r3
     adc:	4770      	bx	lr
     ade:	0049      	lsls	r1, r1, #1
     ae0:	eb40 0000 	adc.w	r0, r0, r0
     ae4:	3a01      	subs	r2, #1
     ae6:	bf28      	it	cs
     ae8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     aec:	d2ed      	bcs.n	aca <__addsf3+0x92>
     aee:	fab0 fc80 	clz	ip, r0
     af2:	f1ac 0c08 	sub.w	ip, ip, #8
     af6:	ebb2 020c 	subs.w	r2, r2, ip
     afa:	fa00 f00c 	lsl.w	r0, r0, ip
     afe:	bfaa      	itet	ge
     b00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     b04:	4252      	neglt	r2, r2
     b06:	4318      	orrge	r0, r3
     b08:	bfbc      	itt	lt
     b0a:	40d0      	lsrlt	r0, r2
     b0c:	4318      	orrlt	r0, r3
     b0e:	4770      	bx	lr
     b10:	f092 0f00 	teq	r2, #0
     b14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     b18:	bf06      	itte	eq
     b1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     b1e:	3201      	addeq	r2, #1
     b20:	3b01      	subne	r3, #1
     b22:	e7b5      	b.n	a90 <__addsf3+0x58>
     b24:	ea4f 0341 	mov.w	r3, r1, lsl #1
     b28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     b2c:	bf18      	it	ne
     b2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     b32:	d021      	beq.n	b78 <__addsf3+0x140>
     b34:	ea92 0f03 	teq	r2, r3
     b38:	d004      	beq.n	b44 <__addsf3+0x10c>
     b3a:	f092 0f00 	teq	r2, #0
     b3e:	bf08      	it	eq
     b40:	4608      	moveq	r0, r1
     b42:	4770      	bx	lr
     b44:	ea90 0f01 	teq	r0, r1
     b48:	bf1c      	itt	ne
     b4a:	2000      	movne	r0, #0
     b4c:	4770      	bxne	lr
     b4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     b52:	d104      	bne.n	b5e <__addsf3+0x126>
     b54:	0040      	lsls	r0, r0, #1
     b56:	bf28      	it	cs
     b58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     b5c:	4770      	bx	lr
     b5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     b62:	bf3c      	itt	cc
     b64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     b68:	4770      	bxcc	lr
     b6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     b6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     b72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b76:	4770      	bx	lr
     b78:	ea7f 6222 	mvns.w	r2, r2, asr #24
     b7c:	bf16      	itet	ne
     b7e:	4608      	movne	r0, r1
     b80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     b84:	4601      	movne	r1, r0
     b86:	0242      	lsls	r2, r0, #9
     b88:	bf06      	itte	eq
     b8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     b8e:	ea90 0f01 	teqeq	r0, r1
     b92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     b96:	4770      	bx	lr

00000b98 <__aeabi_ui2f>:
     b98:	f04f 0300 	mov.w	r3, #0
     b9c:	e004      	b.n	ba8 <__aeabi_i2f+0x8>
     b9e:	bf00      	nop

00000ba0 <__aeabi_i2f>:
     ba0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     ba4:	bf48      	it	mi
     ba6:	4240      	negmi	r0, r0
     ba8:	ea5f 0c00 	movs.w	ip, r0
     bac:	bf08      	it	eq
     bae:	4770      	bxeq	lr
     bb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     bb4:	4601      	mov	r1, r0
     bb6:	f04f 0000 	mov.w	r0, #0
     bba:	e01c      	b.n	bf6 <__aeabi_l2f+0x2a>

00000bbc <__aeabi_ul2f>:
     bbc:	ea50 0201 	orrs.w	r2, r0, r1
     bc0:	bf08      	it	eq
     bc2:	4770      	bxeq	lr
     bc4:	f04f 0300 	mov.w	r3, #0
     bc8:	e00a      	b.n	be0 <__aeabi_l2f+0x14>
     bca:	bf00      	nop

00000bcc <__aeabi_l2f>:
     bcc:	ea50 0201 	orrs.w	r2, r0, r1
     bd0:	bf08      	it	eq
     bd2:	4770      	bxeq	lr
     bd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     bd8:	d502      	bpl.n	be0 <__aeabi_l2f+0x14>
     bda:	4240      	negs	r0, r0
     bdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     be0:	ea5f 0c01 	movs.w	ip, r1
     be4:	bf02      	ittt	eq
     be6:	4684      	moveq	ip, r0
     be8:	4601      	moveq	r1, r0
     bea:	2000      	moveq	r0, #0
     bec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     bf0:	bf08      	it	eq
     bf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     bf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     bfa:	fabc f28c 	clz	r2, ip
     bfe:	3a08      	subs	r2, #8
     c00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     c04:	db10      	blt.n	c28 <__aeabi_l2f+0x5c>
     c06:	fa01 fc02 	lsl.w	ip, r1, r2
     c0a:	4463      	add	r3, ip
     c0c:	fa00 fc02 	lsl.w	ip, r0, r2
     c10:	f1c2 0220 	rsb	r2, r2, #32
     c14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     c18:	fa20 f202 	lsr.w	r2, r0, r2
     c1c:	eb43 0002 	adc.w	r0, r3, r2
     c20:	bf08      	it	eq
     c22:	f020 0001 	biceq.w	r0, r0, #1
     c26:	4770      	bx	lr
     c28:	f102 0220 	add.w	r2, r2, #32
     c2c:	fa01 fc02 	lsl.w	ip, r1, r2
     c30:	f1c2 0220 	rsb	r2, r2, #32
     c34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     c38:	fa21 f202 	lsr.w	r2, r1, r2
     c3c:	eb43 0002 	adc.w	r0, r3, r2
     c40:	bf08      	it	eq
     c42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     c46:	4770      	bx	lr

00000c48 <__aeabi_fmul>:
     c48:	f04f 0cff 	mov.w	ip, #255	; 0xff
     c4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     c50:	bf1e      	ittt	ne
     c52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     c56:	ea92 0f0c 	teqne	r2, ip
     c5a:	ea93 0f0c 	teqne	r3, ip
     c5e:	d06f      	beq.n	d40 <__aeabi_fmul+0xf8>
     c60:	441a      	add	r2, r3
     c62:	ea80 0c01 	eor.w	ip, r0, r1
     c66:	0240      	lsls	r0, r0, #9
     c68:	bf18      	it	ne
     c6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     c6e:	d01e      	beq.n	cae <__aeabi_fmul+0x66>
     c70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     c74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     c78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     c7c:	fba0 3101 	umull	r3, r1, r0, r1
     c80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     c84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     c88:	bf3e      	ittt	cc
     c8a:	0049      	lslcc	r1, r1, #1
     c8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     c90:	005b      	lslcc	r3, r3, #1
     c92:	ea40 0001 	orr.w	r0, r0, r1
     c96:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     c9a:	2afd      	cmp	r2, #253	; 0xfd
     c9c:	d81d      	bhi.n	cda <__aeabi_fmul+0x92>
     c9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     ca2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     ca6:	bf08      	it	eq
     ca8:	f020 0001 	biceq.w	r0, r0, #1
     cac:	4770      	bx	lr
     cae:	f090 0f00 	teq	r0, #0
     cb2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     cb6:	bf08      	it	eq
     cb8:	0249      	lsleq	r1, r1, #9
     cba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     cbe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     cc2:	3a7f      	subs	r2, #127	; 0x7f
     cc4:	bfc2      	ittt	gt
     cc6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     cca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     cce:	4770      	bxgt	lr
     cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     cd4:	f04f 0300 	mov.w	r3, #0
     cd8:	3a01      	subs	r2, #1
     cda:	dc5d      	bgt.n	d98 <__aeabi_fmul+0x150>
     cdc:	f112 0f19 	cmn.w	r2, #25
     ce0:	bfdc      	itt	le
     ce2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     ce6:	4770      	bxle	lr
     ce8:	f1c2 0200 	rsb	r2, r2, #0
     cec:	0041      	lsls	r1, r0, #1
     cee:	fa21 f102 	lsr.w	r1, r1, r2
     cf2:	f1c2 0220 	rsb	r2, r2, #32
     cf6:	fa00 fc02 	lsl.w	ip, r0, r2
     cfa:	ea5f 0031 	movs.w	r0, r1, rrx
     cfe:	f140 0000 	adc.w	r0, r0, #0
     d02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     d06:	bf08      	it	eq
     d08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     d0c:	4770      	bx	lr
     d0e:	f092 0f00 	teq	r2, #0
     d12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     d16:	bf02      	ittt	eq
     d18:	0040      	lsleq	r0, r0, #1
     d1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     d1e:	3a01      	subeq	r2, #1
     d20:	d0f9      	beq.n	d16 <__aeabi_fmul+0xce>
     d22:	ea40 000c 	orr.w	r0, r0, ip
     d26:	f093 0f00 	teq	r3, #0
     d2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     d2e:	bf02      	ittt	eq
     d30:	0049      	lsleq	r1, r1, #1
     d32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     d36:	3b01      	subeq	r3, #1
     d38:	d0f9      	beq.n	d2e <__aeabi_fmul+0xe6>
     d3a:	ea41 010c 	orr.w	r1, r1, ip
     d3e:	e78f      	b.n	c60 <__aeabi_fmul+0x18>
     d40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     d44:	ea92 0f0c 	teq	r2, ip
     d48:	bf18      	it	ne
     d4a:	ea93 0f0c 	teqne	r3, ip
     d4e:	d00a      	beq.n	d66 <__aeabi_fmul+0x11e>
     d50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     d54:	bf18      	it	ne
     d56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     d5a:	d1d8      	bne.n	d0e <__aeabi_fmul+0xc6>
     d5c:	ea80 0001 	eor.w	r0, r0, r1
     d60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     d64:	4770      	bx	lr
     d66:	f090 0f00 	teq	r0, #0
     d6a:	bf17      	itett	ne
     d6c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     d70:	4608      	moveq	r0, r1
     d72:	f091 0f00 	teqne	r1, #0
     d76:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     d7a:	d014      	beq.n	da6 <__aeabi_fmul+0x15e>
     d7c:	ea92 0f0c 	teq	r2, ip
     d80:	d101      	bne.n	d86 <__aeabi_fmul+0x13e>
     d82:	0242      	lsls	r2, r0, #9
     d84:	d10f      	bne.n	da6 <__aeabi_fmul+0x15e>
     d86:	ea93 0f0c 	teq	r3, ip
     d8a:	d103      	bne.n	d94 <__aeabi_fmul+0x14c>
     d8c:	024b      	lsls	r3, r1, #9
     d8e:	bf18      	it	ne
     d90:	4608      	movne	r0, r1
     d92:	d108      	bne.n	da6 <__aeabi_fmul+0x15e>
     d94:	ea80 0001 	eor.w	r0, r0, r1
     d98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     d9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     da4:	4770      	bx	lr
     da6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     daa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     dae:	4770      	bx	lr

00000db0 <__aeabi_fdiv>:
     db0:	f04f 0cff 	mov.w	ip, #255	; 0xff
     db4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     db8:	bf1e      	ittt	ne
     dba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     dbe:	ea92 0f0c 	teqne	r2, ip
     dc2:	ea93 0f0c 	teqne	r3, ip
     dc6:	d069      	beq.n	e9c <__aeabi_fdiv+0xec>
     dc8:	eba2 0203 	sub.w	r2, r2, r3
     dcc:	ea80 0c01 	eor.w	ip, r0, r1
     dd0:	0249      	lsls	r1, r1, #9
     dd2:	ea4f 2040 	mov.w	r0, r0, lsl #9
     dd6:	d037      	beq.n	e48 <__aeabi_fdiv+0x98>
     dd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     ddc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     de0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     de4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     de8:	428b      	cmp	r3, r1
     dea:	bf38      	it	cc
     dec:	005b      	lslcc	r3, r3, #1
     dee:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     df2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     df6:	428b      	cmp	r3, r1
     df8:	bf24      	itt	cs
     dfa:	1a5b      	subcs	r3, r3, r1
     dfc:	ea40 000c 	orrcs.w	r0, r0, ip
     e00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     e04:	bf24      	itt	cs
     e06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     e0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     e0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     e12:	bf24      	itt	cs
     e14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     e18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     e1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     e20:	bf24      	itt	cs
     e22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     e26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     e2a:	011b      	lsls	r3, r3, #4
     e2c:	bf18      	it	ne
     e2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     e32:	d1e0      	bne.n	df6 <__aeabi_fdiv+0x46>
     e34:	2afd      	cmp	r2, #253	; 0xfd
     e36:	f63f af50 	bhi.w	cda <__aeabi_fmul+0x92>
     e3a:	428b      	cmp	r3, r1
     e3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     e40:	bf08      	it	eq
     e42:	f020 0001 	biceq.w	r0, r0, #1
     e46:	4770      	bx	lr
     e48:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     e4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     e50:	327f      	adds	r2, #127	; 0x7f
     e52:	bfc2      	ittt	gt
     e54:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     e58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     e5c:	4770      	bxgt	lr
     e5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     e62:	f04f 0300 	mov.w	r3, #0
     e66:	3a01      	subs	r2, #1
     e68:	e737      	b.n	cda <__aeabi_fmul+0x92>
     e6a:	f092 0f00 	teq	r2, #0
     e6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     e72:	bf02      	ittt	eq
     e74:	0040      	lsleq	r0, r0, #1
     e76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     e7a:	3a01      	subeq	r2, #1
     e7c:	d0f9      	beq.n	e72 <__aeabi_fdiv+0xc2>
     e7e:	ea40 000c 	orr.w	r0, r0, ip
     e82:	f093 0f00 	teq	r3, #0
     e86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     e8a:	bf02      	ittt	eq
     e8c:	0049      	lsleq	r1, r1, #1
     e8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     e92:	3b01      	subeq	r3, #1
     e94:	d0f9      	beq.n	e8a <__aeabi_fdiv+0xda>
     e96:	ea41 010c 	orr.w	r1, r1, ip
     e9a:	e795      	b.n	dc8 <__aeabi_fdiv+0x18>
     e9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     ea0:	ea92 0f0c 	teq	r2, ip
     ea4:	d108      	bne.n	eb8 <__aeabi_fdiv+0x108>
     ea6:	0242      	lsls	r2, r0, #9
     ea8:	f47f af7d 	bne.w	da6 <__aeabi_fmul+0x15e>
     eac:	ea93 0f0c 	teq	r3, ip
     eb0:	f47f af70 	bne.w	d94 <__aeabi_fmul+0x14c>
     eb4:	4608      	mov	r0, r1
     eb6:	e776      	b.n	da6 <__aeabi_fmul+0x15e>
     eb8:	ea93 0f0c 	teq	r3, ip
     ebc:	d104      	bne.n	ec8 <__aeabi_fdiv+0x118>
     ebe:	024b      	lsls	r3, r1, #9
     ec0:	f43f af4c 	beq.w	d5c <__aeabi_fmul+0x114>
     ec4:	4608      	mov	r0, r1
     ec6:	e76e      	b.n	da6 <__aeabi_fmul+0x15e>
     ec8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     ecc:	bf18      	it	ne
     ece:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     ed2:	d1ca      	bne.n	e6a <__aeabi_fdiv+0xba>
     ed4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     ed8:	f47f af5c 	bne.w	d94 <__aeabi_fmul+0x14c>
     edc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     ee0:	f47f af3c 	bne.w	d5c <__aeabi_fmul+0x114>
     ee4:	e75f      	b.n	da6 <__aeabi_fmul+0x15e>
     ee6:	bf00      	nop

00000ee8 <__gesf2>:
     ee8:	f04f 3cff 	mov.w	ip, #4294967295
     eec:	e006      	b.n	efc <__cmpsf2+0x4>
     eee:	bf00      	nop

00000ef0 <__lesf2>:
     ef0:	f04f 0c01 	mov.w	ip, #1
     ef4:	e002      	b.n	efc <__cmpsf2+0x4>
     ef6:	bf00      	nop

00000ef8 <__cmpsf2>:
     ef8:	f04f 0c01 	mov.w	ip, #1
     efc:	f84d cd04 	str.w	ip, [sp, #-4]!
     f00:	ea4f 0240 	mov.w	r2, r0, lsl #1
     f04:	ea4f 0341 	mov.w	r3, r1, lsl #1
     f08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     f0c:	bf18      	it	ne
     f0e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     f12:	d011      	beq.n	f38 <__cmpsf2+0x40>
     f14:	b001      	add	sp, #4
     f16:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     f1a:	bf18      	it	ne
     f1c:	ea90 0f01 	teqne	r0, r1
     f20:	bf58      	it	pl
     f22:	ebb2 0003 	subspl.w	r0, r2, r3
     f26:	bf88      	it	hi
     f28:	17c8      	asrhi	r0, r1, #31
     f2a:	bf38      	it	cc
     f2c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     f30:	bf18      	it	ne
     f32:	f040 0001 	orrne.w	r0, r0, #1
     f36:	4770      	bx	lr
     f38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     f3c:	d102      	bne.n	f44 <__cmpsf2+0x4c>
     f3e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
     f42:	d105      	bne.n	f50 <__cmpsf2+0x58>
     f44:	ea7f 6c23 	mvns.w	ip, r3, asr #24
     f48:	d1e4      	bne.n	f14 <__cmpsf2+0x1c>
     f4a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
     f4e:	d0e1      	beq.n	f14 <__cmpsf2+0x1c>
     f50:	f85d 0b04 	ldr.w	r0, [sp], #4
     f54:	4770      	bx	lr
     f56:	bf00      	nop

00000f58 <__aeabi_cfrcmple>:
     f58:	4684      	mov	ip, r0
     f5a:	4608      	mov	r0, r1
     f5c:	4661      	mov	r1, ip
     f5e:	e7ff      	b.n	f60 <__aeabi_cfcmpeq>

00000f60 <__aeabi_cfcmpeq>:
     f60:	b50f      	push	{r0, r1, r2, r3, lr}
     f62:	f7ff ffc9 	bl	ef8 <__cmpsf2>
     f66:	2800      	cmp	r0, #0
     f68:	bf48      	it	mi
     f6a:	f110 0f00 	cmnmi.w	r0, #0
     f6e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00000f70 <__aeabi_fcmpeq>:
     f70:	f84d ed08 	str.w	lr, [sp, #-8]!
     f74:	f7ff fff4 	bl	f60 <__aeabi_cfcmpeq>
     f78:	bf0c      	ite	eq
     f7a:	2001      	moveq	r0, #1
     f7c:	2000      	movne	r0, #0
     f7e:	f85d fb08 	ldr.w	pc, [sp], #8
     f82:	bf00      	nop

00000f84 <__aeabi_fcmplt>:
     f84:	f84d ed08 	str.w	lr, [sp, #-8]!
     f88:	f7ff ffea 	bl	f60 <__aeabi_cfcmpeq>
     f8c:	bf34      	ite	cc
     f8e:	2001      	movcc	r0, #1
     f90:	2000      	movcs	r0, #0
     f92:	f85d fb08 	ldr.w	pc, [sp], #8
     f96:	bf00      	nop

00000f98 <__aeabi_fcmple>:
     f98:	f84d ed08 	str.w	lr, [sp, #-8]!
     f9c:	f7ff ffe0 	bl	f60 <__aeabi_cfcmpeq>
     fa0:	bf94      	ite	ls
     fa2:	2001      	movls	r0, #1
     fa4:	2000      	movhi	r0, #0
     fa6:	f85d fb08 	ldr.w	pc, [sp], #8
     faa:	bf00      	nop

00000fac <__aeabi_fcmpge>:
     fac:	f84d ed08 	str.w	lr, [sp, #-8]!
     fb0:	f7ff ffd2 	bl	f58 <__aeabi_cfrcmple>
     fb4:	bf94      	ite	ls
     fb6:	2001      	movls	r0, #1
     fb8:	2000      	movhi	r0, #0
     fba:	f85d fb08 	ldr.w	pc, [sp], #8
     fbe:	bf00      	nop

00000fc0 <__aeabi_fcmpgt>:
     fc0:	f84d ed08 	str.w	lr, [sp, #-8]!
     fc4:	f7ff ffc8 	bl	f58 <__aeabi_cfrcmple>
     fc8:	bf34      	ite	cc
     fca:	2001      	movcc	r0, #1
     fcc:	2000      	movcs	r0, #0
     fce:	f85d fb08 	ldr.w	pc, [sp], #8
     fd2:	bf00      	nop

00000fd4 <__aeabi_uldivmod>:
     fd4:	b953      	cbnz	r3, fec <__aeabi_uldivmod+0x18>
     fd6:	b94a      	cbnz	r2, fec <__aeabi_uldivmod+0x18>
     fd8:	2900      	cmp	r1, #0
     fda:	bf08      	it	eq
     fdc:	2800      	cmpeq	r0, #0
     fde:	bf1c      	itt	ne
     fe0:	f04f 31ff 	movne.w	r1, #4294967295
     fe4:	f04f 30ff 	movne.w	r0, #4294967295
     fe8:	f000 b96c 	b.w	12c4 <__aeabi_idiv0>
     fec:	f1ad 0c08 	sub.w	ip, sp, #8
     ff0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     ff4:	f000 f806 	bl	1004 <__udivmoddi4>
     ff8:	f8dd e004 	ldr.w	lr, [sp, #4]
     ffc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1000:	b004      	add	sp, #16
    1002:	4770      	bx	lr

00001004 <__udivmoddi4>:
    1004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1008:	9e08      	ldr	r6, [sp, #32]
    100a:	460d      	mov	r5, r1
    100c:	4604      	mov	r4, r0
    100e:	468e      	mov	lr, r1
    1010:	2b00      	cmp	r3, #0
    1012:	f040 8082 	bne.w	111a <__udivmoddi4+0x116>
    1016:	428a      	cmp	r2, r1
    1018:	4617      	mov	r7, r2
    101a:	d946      	bls.n	10aa <__udivmoddi4+0xa6>
    101c:	fab2 f282 	clz	r2, r2
    1020:	b14a      	cbz	r2, 1036 <__udivmoddi4+0x32>
    1022:	f1c2 0120 	rsb	r1, r2, #32
    1026:	fa05 f302 	lsl.w	r3, r5, r2
    102a:	fa20 f101 	lsr.w	r1, r0, r1
    102e:	4097      	lsls	r7, r2
    1030:	ea41 0e03 	orr.w	lr, r1, r3
    1034:	4094      	lsls	r4, r2
    1036:	ea4f 4817 	mov.w	r8, r7, lsr #16
    103a:	0c23      	lsrs	r3, r4, #16
    103c:	fbbe fcf8 	udiv	ip, lr, r8
    1040:	b2b9      	uxth	r1, r7
    1042:	fb08 ee1c 	mls	lr, r8, ip, lr
    1046:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
    104a:	fb0c f001 	mul.w	r0, ip, r1
    104e:	4298      	cmp	r0, r3
    1050:	d90a      	bls.n	1068 <__udivmoddi4+0x64>
    1052:	18fb      	adds	r3, r7, r3
    1054:	f10c 35ff 	add.w	r5, ip, #4294967295
    1058:	f080 8116 	bcs.w	1288 <__udivmoddi4+0x284>
    105c:	4298      	cmp	r0, r3
    105e:	f240 8113 	bls.w	1288 <__udivmoddi4+0x284>
    1062:	f1ac 0c02 	sub.w	ip, ip, #2
    1066:	443b      	add	r3, r7
    1068:	1a1b      	subs	r3, r3, r0
    106a:	b2a4      	uxth	r4, r4
    106c:	fbb3 f0f8 	udiv	r0, r3, r8
    1070:	fb08 3310 	mls	r3, r8, r0, r3
    1074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    1078:	fb00 f101 	mul.w	r1, r0, r1
    107c:	42a1      	cmp	r1, r4
    107e:	d909      	bls.n	1094 <__udivmoddi4+0x90>
    1080:	193c      	adds	r4, r7, r4
    1082:	f100 33ff 	add.w	r3, r0, #4294967295
    1086:	f080 8101 	bcs.w	128c <__udivmoddi4+0x288>
    108a:	42a1      	cmp	r1, r4
    108c:	f240 80fe 	bls.w	128c <__udivmoddi4+0x288>
    1090:	3802      	subs	r0, #2
    1092:	443c      	add	r4, r7
    1094:	1a64      	subs	r4, r4, r1
    1096:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    109a:	2100      	movs	r1, #0
    109c:	b11e      	cbz	r6, 10a6 <__udivmoddi4+0xa2>
    109e:	40d4      	lsrs	r4, r2
    10a0:	2300      	movs	r3, #0
    10a2:	e9c6 4300 	strd	r4, r3, [r6]
    10a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    10aa:	b902      	cbnz	r2, 10ae <__udivmoddi4+0xaa>
    10ac:	deff      	udf	#255	; 0xff
    10ae:	fab2 f282 	clz	r2, r2
    10b2:	2a00      	cmp	r2, #0
    10b4:	d14f      	bne.n	1156 <__udivmoddi4+0x152>
    10b6:	1bcb      	subs	r3, r1, r7
    10b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    10bc:	fa1f f887 	uxth.w	r8, r7
    10c0:	2101      	movs	r1, #1
    10c2:	fbb3 fcfe 	udiv	ip, r3, lr
    10c6:	0c25      	lsrs	r5, r4, #16
    10c8:	fb0e 331c 	mls	r3, lr, ip, r3
    10cc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    10d0:	fb08 f30c 	mul.w	r3, r8, ip
    10d4:	42ab      	cmp	r3, r5
    10d6:	d907      	bls.n	10e8 <__udivmoddi4+0xe4>
    10d8:	197d      	adds	r5, r7, r5
    10da:	f10c 30ff 	add.w	r0, ip, #4294967295
    10de:	d202      	bcs.n	10e6 <__udivmoddi4+0xe2>
    10e0:	42ab      	cmp	r3, r5
    10e2:	f200 80e7 	bhi.w	12b4 <__udivmoddi4+0x2b0>
    10e6:	4684      	mov	ip, r0
    10e8:	1aed      	subs	r5, r5, r3
    10ea:	b2a3      	uxth	r3, r4
    10ec:	fbb5 f0fe 	udiv	r0, r5, lr
    10f0:	fb0e 5510 	mls	r5, lr, r0, r5
    10f4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    10f8:	fb08 f800 	mul.w	r8, r8, r0
    10fc:	45a0      	cmp	r8, r4
    10fe:	d907      	bls.n	1110 <__udivmoddi4+0x10c>
    1100:	193c      	adds	r4, r7, r4
    1102:	f100 33ff 	add.w	r3, r0, #4294967295
    1106:	d202      	bcs.n	110e <__udivmoddi4+0x10a>
    1108:	45a0      	cmp	r8, r4
    110a:	f200 80d7 	bhi.w	12bc <__udivmoddi4+0x2b8>
    110e:	4618      	mov	r0, r3
    1110:	eba4 0408 	sub.w	r4, r4, r8
    1114:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    1118:	e7c0      	b.n	109c <__udivmoddi4+0x98>
    111a:	428b      	cmp	r3, r1
    111c:	d908      	bls.n	1130 <__udivmoddi4+0x12c>
    111e:	2e00      	cmp	r6, #0
    1120:	f000 80af 	beq.w	1282 <__udivmoddi4+0x27e>
    1124:	2100      	movs	r1, #0
    1126:	e9c6 0500 	strd	r0, r5, [r6]
    112a:	4608      	mov	r0, r1
    112c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1130:	fab3 f183 	clz	r1, r3
    1134:	2900      	cmp	r1, #0
    1136:	d14b      	bne.n	11d0 <__udivmoddi4+0x1cc>
    1138:	42ab      	cmp	r3, r5
    113a:	d302      	bcc.n	1142 <__udivmoddi4+0x13e>
    113c:	4282      	cmp	r2, r0
    113e:	f200 80b7 	bhi.w	12b0 <__udivmoddi4+0x2ac>
    1142:	1a84      	subs	r4, r0, r2
    1144:	eb65 0303 	sbc.w	r3, r5, r3
    1148:	2001      	movs	r0, #1
    114a:	469e      	mov	lr, r3
    114c:	2e00      	cmp	r6, #0
    114e:	d0aa      	beq.n	10a6 <__udivmoddi4+0xa2>
    1150:	e9c6 4e00 	strd	r4, lr, [r6]
    1154:	e7a7      	b.n	10a6 <__udivmoddi4+0xa2>
    1156:	f1c2 0c20 	rsb	ip, r2, #32
    115a:	fa01 f302 	lsl.w	r3, r1, r2
    115e:	4097      	lsls	r7, r2
    1160:	fa20 f00c 	lsr.w	r0, r0, ip
    1164:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1168:	fa21 fc0c 	lsr.w	ip, r1, ip
    116c:	4318      	orrs	r0, r3
    116e:	fbbc f1fe 	udiv	r1, ip, lr
    1172:	0c05      	lsrs	r5, r0, #16
    1174:	fb0e cc11 	mls	ip, lr, r1, ip
    1178:	fa1f f887 	uxth.w	r8, r7
    117c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    1180:	fb01 f308 	mul.w	r3, r1, r8
    1184:	42ab      	cmp	r3, r5
    1186:	fa04 f402 	lsl.w	r4, r4, r2
    118a:	d909      	bls.n	11a0 <__udivmoddi4+0x19c>
    118c:	197d      	adds	r5, r7, r5
    118e:	f101 3cff 	add.w	ip, r1, #4294967295
    1192:	f080 808b 	bcs.w	12ac <__udivmoddi4+0x2a8>
    1196:	42ab      	cmp	r3, r5
    1198:	f240 8088 	bls.w	12ac <__udivmoddi4+0x2a8>
    119c:	3902      	subs	r1, #2
    119e:	443d      	add	r5, r7
    11a0:	1aeb      	subs	r3, r5, r3
    11a2:	b285      	uxth	r5, r0
    11a4:	fbb3 f0fe 	udiv	r0, r3, lr
    11a8:	fb0e 3310 	mls	r3, lr, r0, r3
    11ac:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    11b0:	fb00 f308 	mul.w	r3, r0, r8
    11b4:	42ab      	cmp	r3, r5
    11b6:	d907      	bls.n	11c8 <__udivmoddi4+0x1c4>
    11b8:	197d      	adds	r5, r7, r5
    11ba:	f100 3cff 	add.w	ip, r0, #4294967295
    11be:	d271      	bcs.n	12a4 <__udivmoddi4+0x2a0>
    11c0:	42ab      	cmp	r3, r5
    11c2:	d96f      	bls.n	12a4 <__udivmoddi4+0x2a0>
    11c4:	3802      	subs	r0, #2
    11c6:	443d      	add	r5, r7
    11c8:	1aeb      	subs	r3, r5, r3
    11ca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    11ce:	e778      	b.n	10c2 <__udivmoddi4+0xbe>
    11d0:	f1c1 0c20 	rsb	ip, r1, #32
    11d4:	408b      	lsls	r3, r1
    11d6:	fa22 f70c 	lsr.w	r7, r2, ip
    11da:	431f      	orrs	r7, r3
    11dc:	fa20 f40c 	lsr.w	r4, r0, ip
    11e0:	fa05 f301 	lsl.w	r3, r5, r1
    11e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    11e8:	fa25 f50c 	lsr.w	r5, r5, ip
    11ec:	431c      	orrs	r4, r3
    11ee:	0c23      	lsrs	r3, r4, #16
    11f0:	fbb5 f9fe 	udiv	r9, r5, lr
    11f4:	fa1f f887 	uxth.w	r8, r7
    11f8:	fb0e 5519 	mls	r5, lr, r9, r5
    11fc:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
    1200:	fb09 fa08 	mul.w	sl, r9, r8
    1204:	45aa      	cmp	sl, r5
    1206:	fa02 f201 	lsl.w	r2, r2, r1
    120a:	fa00 f301 	lsl.w	r3, r0, r1
    120e:	d908      	bls.n	1222 <__udivmoddi4+0x21e>
    1210:	197d      	adds	r5, r7, r5
    1212:	f109 30ff 	add.w	r0, r9, #4294967295
    1216:	d247      	bcs.n	12a8 <__udivmoddi4+0x2a4>
    1218:	45aa      	cmp	sl, r5
    121a:	d945      	bls.n	12a8 <__udivmoddi4+0x2a4>
    121c:	f1a9 0902 	sub.w	r9, r9, #2
    1220:	443d      	add	r5, r7
    1222:	eba5 050a 	sub.w	r5, r5, sl
    1226:	b2a4      	uxth	r4, r4
    1228:	fbb5 f0fe 	udiv	r0, r5, lr
    122c:	fb0e 5510 	mls	r5, lr, r0, r5
    1230:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    1234:	fb00 f808 	mul.w	r8, r0, r8
    1238:	45a0      	cmp	r8, r4
    123a:	d907      	bls.n	124c <__udivmoddi4+0x248>
    123c:	193c      	adds	r4, r7, r4
    123e:	f100 35ff 	add.w	r5, r0, #4294967295
    1242:	d22d      	bcs.n	12a0 <__udivmoddi4+0x29c>
    1244:	45a0      	cmp	r8, r4
    1246:	d92b      	bls.n	12a0 <__udivmoddi4+0x29c>
    1248:	3802      	subs	r0, #2
    124a:	443c      	add	r4, r7
    124c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    1250:	eba4 0408 	sub.w	r4, r4, r8
    1254:	fba0 8902 	umull	r8, r9, r0, r2
    1258:	454c      	cmp	r4, r9
    125a:	46c6      	mov	lr, r8
    125c:	464d      	mov	r5, r9
    125e:	d319      	bcc.n	1294 <__udivmoddi4+0x290>
    1260:	d016      	beq.n	1290 <__udivmoddi4+0x28c>
    1262:	b15e      	cbz	r6, 127c <__udivmoddi4+0x278>
    1264:	ebb3 020e 	subs.w	r2, r3, lr
    1268:	eb64 0405 	sbc.w	r4, r4, r5
    126c:	fa04 fc0c 	lsl.w	ip, r4, ip
    1270:	40ca      	lsrs	r2, r1
    1272:	ea4c 0202 	orr.w	r2, ip, r2
    1276:	40cc      	lsrs	r4, r1
    1278:	e9c6 2400 	strd	r2, r4, [r6]
    127c:	2100      	movs	r1, #0
    127e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1282:	4631      	mov	r1, r6
    1284:	4630      	mov	r0, r6
    1286:	e70e      	b.n	10a6 <__udivmoddi4+0xa2>
    1288:	46ac      	mov	ip, r5
    128a:	e6ed      	b.n	1068 <__udivmoddi4+0x64>
    128c:	4618      	mov	r0, r3
    128e:	e701      	b.n	1094 <__udivmoddi4+0x90>
    1290:	4543      	cmp	r3, r8
    1292:	d2e6      	bcs.n	1262 <__udivmoddi4+0x25e>
    1294:	ebb8 0e02 	subs.w	lr, r8, r2
    1298:	eb69 0507 	sbc.w	r5, r9, r7
    129c:	3801      	subs	r0, #1
    129e:	e7e0      	b.n	1262 <__udivmoddi4+0x25e>
    12a0:	4628      	mov	r0, r5
    12a2:	e7d3      	b.n	124c <__udivmoddi4+0x248>
    12a4:	4660      	mov	r0, ip
    12a6:	e78f      	b.n	11c8 <__udivmoddi4+0x1c4>
    12a8:	4681      	mov	r9, r0
    12aa:	e7ba      	b.n	1222 <__udivmoddi4+0x21e>
    12ac:	4661      	mov	r1, ip
    12ae:	e777      	b.n	11a0 <__udivmoddi4+0x19c>
    12b0:	4608      	mov	r0, r1
    12b2:	e74b      	b.n	114c <__udivmoddi4+0x148>
    12b4:	f1ac 0c02 	sub.w	ip, ip, #2
    12b8:	443d      	add	r5, r7
    12ba:	e715      	b.n	10e8 <__udivmoddi4+0xe4>
    12bc:	3802      	subs	r0, #2
    12be:	443c      	add	r4, r7
    12c0:	e726      	b.n	1110 <__udivmoddi4+0x10c>
    12c2:	bf00      	nop

000012c4 <__aeabi_idiv0>:
    12c4:	4770      	bx	lr
    12c6:	bf00      	nop

000012c8 <__aeabi_dcmpun>:
    12c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    12cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    12d0:	d102      	bne.n	12d8 <__aeabi_dcmpun+0x10>
    12d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    12d6:	d10a      	bne.n	12ee <__aeabi_dcmpun+0x26>
    12d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    12dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    12e0:	d102      	bne.n	12e8 <__aeabi_dcmpun+0x20>
    12e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    12e6:	d102      	bne.n	12ee <__aeabi_dcmpun+0x26>
    12e8:	f04f 0000 	mov.w	r0, #0
    12ec:	4770      	bx	lr
    12ee:	f04f 0001 	mov.w	r0, #1
    12f2:	4770      	bx	lr

000012f4 <__aeabi_d2iz>:
    12f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
    12f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    12fc:	d215      	bcs.n	132a <__aeabi_d2iz+0x36>
    12fe:	d511      	bpl.n	1324 <__aeabi_d2iz+0x30>
    1300:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    1304:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    1308:	d912      	bls.n	1330 <__aeabi_d2iz+0x3c>
    130a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    130e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1312:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    1316:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    131a:	fa23 f002 	lsr.w	r0, r3, r2
    131e:	bf18      	it	ne
    1320:	4240      	negne	r0, r0
    1322:	4770      	bx	lr
    1324:	f04f 0000 	mov.w	r0, #0
    1328:	4770      	bx	lr
    132a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    132e:	d105      	bne.n	133c <__aeabi_d2iz+0x48>
    1330:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    1334:	bf08      	it	eq
    1336:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    133a:	4770      	bx	lr
    133c:	f04f 0000 	mov.w	r0, #0
    1340:	4770      	bx	lr
    1342:	bf00      	nop

00001344 <strcmp>:
    1344:	f810 2b01 	ldrb.w	r2, [r0], #1
    1348:	f811 3b01 	ldrb.w	r3, [r1], #1
    134c:	2a01      	cmp	r2, #1
    134e:	bf28      	it	cs
    1350:	429a      	cmpcs	r2, r3
    1352:	d0f7      	beq.n	1344 <strcmp>
    1354:	1ad0      	subs	r0, r2, r3
    1356:	4770      	bx	lr

00001358 <strlen>:
    1358:	4603      	mov	r3, r0
    135a:	f813 2b01 	ldrb.w	r2, [r3], #1
    135e:	2a00      	cmp	r2, #0
    1360:	d1fb      	bne.n	135a <strlen+0x2>
    1362:	1a18      	subs	r0, r3, r0
    1364:	3801      	subs	r0, #1
    1366:	4770      	bx	lr

00001368 <_dtoa_r>:
    1368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    136c:	6a44      	ldr	r4, [r0, #36]	; 0x24
    136e:	b099      	sub	sp, #100	; 0x64
    1370:	4616      	mov	r6, r2
    1372:	461f      	mov	r7, r3
    1374:	e9cd 6704 	strd	r6, r7, [sp, #16]
    1378:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    137c:	4605      	mov	r5, r0
    137e:	b93c      	cbnz	r4, 1390 <_dtoa_r+0x28>
    1380:	2010      	movs	r0, #16
    1382:	f00e fff7 	bl	10374 <malloc>
    1386:	e9c0 4401 	strd	r4, r4, [r0, #4]
    138a:	6268      	str	r0, [r5, #36]	; 0x24
    138c:	6004      	str	r4, [r0, #0]
    138e:	60c4      	str	r4, [r0, #12]
    1390:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1392:	6819      	ldr	r1, [r3, #0]
    1394:	b151      	cbz	r1, 13ac <_dtoa_r+0x44>
    1396:	685a      	ldr	r2, [r3, #4]
    1398:	604a      	str	r2, [r1, #4]
    139a:	2301      	movs	r3, #1
    139c:	4093      	lsls	r3, r2
    139e:	608b      	str	r3, [r1, #8]
    13a0:	4628      	mov	r0, r5
    13a2:	f013 fd75 	bl	14e90 <_Bfree>
    13a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    13a8:	2200      	movs	r2, #0
    13aa:	601a      	str	r2, [r3, #0]
    13ac:	1e3b      	subs	r3, r7, #0
    13ae:	bfb9      	ittee	lt
    13b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    13b4:	9305      	strlt	r3, [sp, #20]
    13b6:	2300      	movge	r3, #0
    13b8:	f8c8 3000 	strge.w	r3, [r8]
    13bc:	f8dd 9014 	ldr.w	r9, [sp, #20]
    13c0:	4ba7      	ldr	r3, [pc, #668]	; (1660 <_dtoa_r+0x2f8>)
    13c2:	bfbc      	itt	lt
    13c4:	2201      	movlt	r2, #1
    13c6:	f8c8 2000 	strlt.w	r2, [r8]
    13ca:	ea33 0309 	bics.w	r3, r3, r9
    13ce:	d119      	bne.n	1404 <_dtoa_r+0x9c>
    13d0:	9a24      	ldr	r2, [sp, #144]	; 0x90
    13d2:	f242 730f 	movw	r3, #9999	; 0x270f
    13d6:	6013      	str	r3, [r2, #0]
    13d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
    13dc:	4333      	orrs	r3, r6
    13de:	f000 856d 	beq.w	1ebc <_dtoa_r+0xb54>
    13e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
    13e4:	b953      	cbnz	r3, 13fc <_dtoa_r+0x94>
    13e6:	4b9f      	ldr	r3, [pc, #636]	; (1664 <_dtoa_r+0x2fc>)
    13e8:	e023      	b.n	1432 <_dtoa_r+0xca>
    13ea:	4b9f      	ldr	r3, [pc, #636]	; (1668 <_dtoa_r+0x300>)
    13ec:	9303      	str	r3, [sp, #12]
    13ee:	3308      	adds	r3, #8
    13f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    13f2:	6013      	str	r3, [r2, #0]
    13f4:	9803      	ldr	r0, [sp, #12]
    13f6:	b019      	add	sp, #100	; 0x64
    13f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13fc:	4b99      	ldr	r3, [pc, #612]	; (1664 <_dtoa_r+0x2fc>)
    13fe:	9303      	str	r3, [sp, #12]
    1400:	3303      	adds	r3, #3
    1402:	e7f5      	b.n	13f0 <_dtoa_r+0x88>
    1404:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    1408:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    140c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1410:	2200      	movs	r2, #0
    1412:	2300      	movs	r3, #0
    1414:	f7ff fad8 	bl	9c8 <__aeabi_dcmpeq>
    1418:	4680      	mov	r8, r0
    141a:	b160      	cbz	r0, 1436 <_dtoa_r+0xce>
    141c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    141e:	2301      	movs	r3, #1
    1420:	6013      	str	r3, [r2, #0]
    1422:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1424:	2b00      	cmp	r3, #0
    1426:	f000 8546 	beq.w	1eb6 <_dtoa_r+0xb4e>
    142a:	4b90      	ldr	r3, [pc, #576]	; (166c <_dtoa_r+0x304>)
    142c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    142e:	6013      	str	r3, [r2, #0]
    1430:	3b01      	subs	r3, #1
    1432:	9303      	str	r3, [sp, #12]
    1434:	e7de      	b.n	13f4 <_dtoa_r+0x8c>
    1436:	ab16      	add	r3, sp, #88	; 0x58
    1438:	9301      	str	r3, [sp, #4]
    143a:	ab17      	add	r3, sp, #92	; 0x5c
    143c:	9300      	str	r3, [sp, #0]
    143e:	4628      	mov	r0, r5
    1440:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    1444:	f013 ff5c 	bl	15300 <__d2b>
    1448:	f3c9 540a 	ubfx	r4, r9, #20, #11
    144c:	4683      	mov	fp, r0
    144e:	2c00      	cmp	r4, #0
    1450:	d07e      	beq.n	1550 <_dtoa_r+0x1e8>
    1452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1454:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    1458:	f3c3 0313 	ubfx	r3, r3, #0, #20
    145c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1460:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    1464:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    1468:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    146c:	4b80      	ldr	r3, [pc, #512]	; (1670 <_dtoa_r+0x308>)
    146e:	2200      	movs	r2, #0
    1470:	f7fe fe8a 	bl	188 <__aeabi_dsub>
    1474:	a374      	add	r3, pc, #464	; (adr r3, 1648 <_dtoa_r+0x2e0>)
    1476:	e9d3 2300 	ldrd	r2, r3, [r3]
    147a:	f7ff f83d 	bl	4f8 <__aeabi_dmul>
    147e:	a374      	add	r3, pc, #464	; (adr r3, 1650 <_dtoa_r+0x2e8>)
    1480:	e9d3 2300 	ldrd	r2, r3, [r3]
    1484:	f7fe fe82 	bl	18c <__adddf3>
    1488:	4606      	mov	r6, r0
    148a:	4620      	mov	r0, r4
    148c:	460f      	mov	r7, r1
    148e:	f7fe ffc9 	bl	424 <__aeabi_i2d>
    1492:	a371      	add	r3, pc, #452	; (adr r3, 1658 <_dtoa_r+0x2f0>)
    1494:	e9d3 2300 	ldrd	r2, r3, [r3]
    1498:	f7ff f82e 	bl	4f8 <__aeabi_dmul>
    149c:	4602      	mov	r2, r0
    149e:	460b      	mov	r3, r1
    14a0:	4630      	mov	r0, r6
    14a2:	4639      	mov	r1, r7
    14a4:	f7fe fe72 	bl	18c <__adddf3>
    14a8:	4606      	mov	r6, r0
    14aa:	460f      	mov	r7, r1
    14ac:	f7ff ff22 	bl	12f4 <__aeabi_d2iz>
    14b0:	2200      	movs	r2, #0
    14b2:	4682      	mov	sl, r0
    14b4:	2300      	movs	r3, #0
    14b6:	4630      	mov	r0, r6
    14b8:	4639      	mov	r1, r7
    14ba:	f7ff fa8f 	bl	9dc <__aeabi_dcmplt>
    14be:	b148      	cbz	r0, 14d4 <_dtoa_r+0x16c>
    14c0:	4650      	mov	r0, sl
    14c2:	f7fe ffaf 	bl	424 <__aeabi_i2d>
    14c6:	4632      	mov	r2, r6
    14c8:	463b      	mov	r3, r7
    14ca:	f7ff fa7d 	bl	9c8 <__aeabi_dcmpeq>
    14ce:	b908      	cbnz	r0, 14d4 <_dtoa_r+0x16c>
    14d0:	f10a 3aff 	add.w	sl, sl, #4294967295
    14d4:	f1ba 0f16 	cmp.w	sl, #22
    14d8:	d857      	bhi.n	158a <_dtoa_r+0x222>
    14da:	4b66      	ldr	r3, [pc, #408]	; (1674 <_dtoa_r+0x30c>)
    14dc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    14e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    14e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    14e8:	f7ff fa78 	bl	9dc <__aeabi_dcmplt>
    14ec:	2800      	cmp	r0, #0
    14ee:	d04e      	beq.n	158e <_dtoa_r+0x226>
    14f0:	f10a 3aff 	add.w	sl, sl, #4294967295
    14f4:	2300      	movs	r3, #0
    14f6:	930f      	str	r3, [sp, #60]	; 0x3c
    14f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    14fa:	1b1c      	subs	r4, r3, r4
    14fc:	1e63      	subs	r3, r4, #1
    14fe:	9309      	str	r3, [sp, #36]	; 0x24
    1500:	bf45      	ittet	mi
    1502:	f1c4 0301 	rsbmi	r3, r4, #1
    1506:	9306      	strmi	r3, [sp, #24]
    1508:	2300      	movpl	r3, #0
    150a:	2300      	movmi	r3, #0
    150c:	bf4c      	ite	mi
    150e:	9309      	strmi	r3, [sp, #36]	; 0x24
    1510:	9306      	strpl	r3, [sp, #24]
    1512:	f1ba 0f00 	cmp.w	sl, #0
    1516:	db3c      	blt.n	1592 <_dtoa_r+0x22a>
    1518:	9b09      	ldr	r3, [sp, #36]	; 0x24
    151a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    151e:	4453      	add	r3, sl
    1520:	9309      	str	r3, [sp, #36]	; 0x24
    1522:	2300      	movs	r3, #0
    1524:	930a      	str	r3, [sp, #40]	; 0x28
    1526:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1528:	2b09      	cmp	r3, #9
    152a:	f200 80b5 	bhi.w	1698 <_dtoa_r+0x330>
    152e:	2b05      	cmp	r3, #5
    1530:	bfc4      	itt	gt
    1532:	3b04      	subgt	r3, #4
    1534:	9322      	strgt	r3, [sp, #136]	; 0x88
    1536:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1538:	f1a3 0302 	sub.w	r3, r3, #2
    153c:	bfcc      	ite	gt
    153e:	2400      	movgt	r4, #0
    1540:	2401      	movle	r4, #1
    1542:	2b03      	cmp	r3, #3
    1544:	f200 80b4 	bhi.w	16b0 <_dtoa_r+0x348>
    1548:	e8df f003 	tbb	[pc, r3]
    154c:	a47a982d 	.word	0xa47a982d
    1550:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
    1554:	441c      	add	r4, r3
    1556:	f204 4332 	addw	r3, r4, #1074	; 0x432
    155a:	2b20      	cmp	r3, #32
    155c:	bfc3      	ittte	gt
    155e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    1562:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
    1566:	fa09 f303 	lslgt.w	r3, r9, r3
    156a:	f1c3 0320 	rsble	r3, r3, #32
    156e:	bfc6      	itte	gt
    1570:	fa26 f000 	lsrgt.w	r0, r6, r0
    1574:	4318      	orrgt	r0, r3
    1576:	fa06 f003 	lslle.w	r0, r6, r3
    157a:	f7fe ff43 	bl	404 <__aeabi_ui2d>
    157e:	2301      	movs	r3, #1
    1580:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    1584:	3c01      	subs	r4, #1
    1586:	9313      	str	r3, [sp, #76]	; 0x4c
    1588:	e770      	b.n	146c <_dtoa_r+0x104>
    158a:	2301      	movs	r3, #1
    158c:	e7b3      	b.n	14f6 <_dtoa_r+0x18e>
    158e:	900f      	str	r0, [sp, #60]	; 0x3c
    1590:	e7b2      	b.n	14f8 <_dtoa_r+0x190>
    1592:	9b06      	ldr	r3, [sp, #24]
    1594:	eba3 030a 	sub.w	r3, r3, sl
    1598:	9306      	str	r3, [sp, #24]
    159a:	f1ca 0300 	rsb	r3, sl, #0
    159e:	930a      	str	r3, [sp, #40]	; 0x28
    15a0:	2300      	movs	r3, #0
    15a2:	930e      	str	r3, [sp, #56]	; 0x38
    15a4:	e7bf      	b.n	1526 <_dtoa_r+0x1be>
    15a6:	2300      	movs	r3, #0
    15a8:	930b      	str	r3, [sp, #44]	; 0x2c
    15aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    15ac:	2b00      	cmp	r3, #0
    15ae:	f300 8082 	bgt.w	16b6 <_dtoa_r+0x34e>
    15b2:	f04f 0901 	mov.w	r9, #1
    15b6:	f8cd 9020 	str.w	r9, [sp, #32]
    15ba:	464b      	mov	r3, r9
    15bc:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    15c0:	6a6e      	ldr	r6, [r5, #36]	; 0x24
    15c2:	2200      	movs	r2, #0
    15c4:	6072      	str	r2, [r6, #4]
    15c6:	2204      	movs	r2, #4
    15c8:	f102 0014 	add.w	r0, r2, #20
    15cc:	4298      	cmp	r0, r3
    15ce:	6871      	ldr	r1, [r6, #4]
    15d0:	d977      	bls.n	16c2 <_dtoa_r+0x35a>
    15d2:	4628      	mov	r0, r5
    15d4:	f013 fc28 	bl	14e28 <_Balloc>
    15d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    15da:	6030      	str	r0, [r6, #0]
    15dc:	681b      	ldr	r3, [r3, #0]
    15de:	9303      	str	r3, [sp, #12]
    15e0:	9b08      	ldr	r3, [sp, #32]
    15e2:	2b0e      	cmp	r3, #14
    15e4:	f200 80ee 	bhi.w	17c4 <_dtoa_r+0x45c>
    15e8:	2c00      	cmp	r4, #0
    15ea:	f000 80eb 	beq.w	17c4 <_dtoa_r+0x45c>
    15ee:	f1ba 0f00 	cmp.w	sl, #0
    15f2:	dd7a      	ble.n	16ea <_dtoa_r+0x382>
    15f4:	4a1f      	ldr	r2, [pc, #124]	; (1674 <_dtoa_r+0x30c>)
    15f6:	f00a 030f 	and.w	r3, sl, #15
    15fa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    15fe:	e9d3 3400 	ldrd	r3, r4, [r3]
    1602:	f41a 7f80 	tst.w	sl, #256	; 0x100
    1606:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    160a:	ea4f 142a 	mov.w	r4, sl, asr #4
    160e:	d05c      	beq.n	16ca <_dtoa_r+0x362>
    1610:	4b19      	ldr	r3, [pc, #100]	; (1678 <_dtoa_r+0x310>)
    1612:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1616:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    161a:	f7ff f897 	bl	74c <__aeabi_ddiv>
    161e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1622:	f004 040f 	and.w	r4, r4, #15
    1626:	2703      	movs	r7, #3
    1628:	4e13      	ldr	r6, [pc, #76]	; (1678 <_dtoa_r+0x310>)
    162a:	2c00      	cmp	r4, #0
    162c:	d14f      	bne.n	16ce <_dtoa_r+0x366>
    162e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1632:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1636:	f7ff f889 	bl	74c <__aeabi_ddiv>
    163a:	e9cd 0104 	strd	r0, r1, [sp, #16]
    163e:	e06e      	b.n	171e <_dtoa_r+0x3b6>
    1640:	2301      	movs	r3, #1
    1642:	e7b1      	b.n	15a8 <_dtoa_r+0x240>
    1644:	f3af 8000 	nop.w
    1648:	636f4361 	.word	0x636f4361
    164c:	3fd287a7 	.word	0x3fd287a7
    1650:	8b60c8b3 	.word	0x8b60c8b3
    1654:	3fc68a28 	.word	0x3fc68a28
    1658:	509f79fb 	.word	0x509f79fb
    165c:	3fd34413 	.word	0x3fd34413
    1660:	7ff00000 	.word	0x7ff00000
    1664:	000174ae 	.word	0x000174ae
    1668:	000174a5 	.word	0x000174a5
    166c:	00017482 	.word	0x00017482
    1670:	3ff80000 	.word	0x3ff80000
    1674:	00015890 	.word	0x00015890
    1678:	00015868 	.word	0x00015868
    167c:	2300      	movs	r3, #0
    167e:	930b      	str	r3, [sp, #44]	; 0x2c
    1680:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1682:	eb0a 0903 	add.w	r9, sl, r3
    1686:	f109 0301 	add.w	r3, r9, #1
    168a:	2b01      	cmp	r3, #1
    168c:	9308      	str	r3, [sp, #32]
    168e:	bfb8      	it	lt
    1690:	2301      	movlt	r3, #1
    1692:	e795      	b.n	15c0 <_dtoa_r+0x258>
    1694:	2301      	movs	r3, #1
    1696:	e7f2      	b.n	167e <_dtoa_r+0x316>
    1698:	2401      	movs	r4, #1
    169a:	2300      	movs	r3, #0
    169c:	9322      	str	r3, [sp, #136]	; 0x88
    169e:	940b      	str	r4, [sp, #44]	; 0x2c
    16a0:	f04f 39ff 	mov.w	r9, #4294967295
    16a4:	2200      	movs	r2, #0
    16a6:	f8cd 9020 	str.w	r9, [sp, #32]
    16aa:	2312      	movs	r3, #18
    16ac:	9223      	str	r2, [sp, #140]	; 0x8c
    16ae:	e787      	b.n	15c0 <_dtoa_r+0x258>
    16b0:	2301      	movs	r3, #1
    16b2:	930b      	str	r3, [sp, #44]	; 0x2c
    16b4:	e7f4      	b.n	16a0 <_dtoa_r+0x338>
    16b6:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    16ba:	f8cd 9020 	str.w	r9, [sp, #32]
    16be:	464b      	mov	r3, r9
    16c0:	e77e      	b.n	15c0 <_dtoa_r+0x258>
    16c2:	3101      	adds	r1, #1
    16c4:	6071      	str	r1, [r6, #4]
    16c6:	0052      	lsls	r2, r2, #1
    16c8:	e77e      	b.n	15c8 <_dtoa_r+0x260>
    16ca:	2702      	movs	r7, #2
    16cc:	e7ac      	b.n	1628 <_dtoa_r+0x2c0>
    16ce:	07e1      	lsls	r1, r4, #31
    16d0:	d508      	bpl.n	16e4 <_dtoa_r+0x37c>
    16d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    16d6:	e9d6 2300 	ldrd	r2, r3, [r6]
    16da:	f7fe ff0d 	bl	4f8 <__aeabi_dmul>
    16de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    16e2:	3701      	adds	r7, #1
    16e4:	1064      	asrs	r4, r4, #1
    16e6:	3608      	adds	r6, #8
    16e8:	e79f      	b.n	162a <_dtoa_r+0x2c2>
    16ea:	f000 80a5 	beq.w	1838 <_dtoa_r+0x4d0>
    16ee:	f1ca 0400 	rsb	r4, sl, #0
    16f2:	4ba4      	ldr	r3, [pc, #656]	; (1984 <_dtoa_r+0x61c>)
    16f4:	4ea4      	ldr	r6, [pc, #656]	; (1988 <_dtoa_r+0x620>)
    16f6:	f004 020f 	and.w	r2, r4, #15
    16fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    16fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    1702:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1706:	f7fe fef7 	bl	4f8 <__aeabi_dmul>
    170a:	e9cd 0104 	strd	r0, r1, [sp, #16]
    170e:	1124      	asrs	r4, r4, #4
    1710:	2300      	movs	r3, #0
    1712:	2702      	movs	r7, #2
    1714:	2c00      	cmp	r4, #0
    1716:	f040 8084 	bne.w	1822 <_dtoa_r+0x4ba>
    171a:	2b00      	cmp	r3, #0
    171c:	d18d      	bne.n	163a <_dtoa_r+0x2d2>
    171e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1720:	2b00      	cmp	r3, #0
    1722:	f000 808b 	beq.w	183c <_dtoa_r+0x4d4>
    1726:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    172a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    172e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1732:	4b96      	ldr	r3, [pc, #600]	; (198c <_dtoa_r+0x624>)
    1734:	2200      	movs	r2, #0
    1736:	f7ff f951 	bl	9dc <__aeabi_dcmplt>
    173a:	2800      	cmp	r0, #0
    173c:	d07e      	beq.n	183c <_dtoa_r+0x4d4>
    173e:	9b08      	ldr	r3, [sp, #32]
    1740:	2b00      	cmp	r3, #0
    1742:	d07b      	beq.n	183c <_dtoa_r+0x4d4>
    1744:	f1b9 0f00 	cmp.w	r9, #0
    1748:	dd38      	ble.n	17bc <_dtoa_r+0x454>
    174a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    174e:	4b90      	ldr	r3, [pc, #576]	; (1990 <_dtoa_r+0x628>)
    1750:	2200      	movs	r2, #0
    1752:	f7fe fed1 	bl	4f8 <__aeabi_dmul>
    1756:	e9cd 0104 	strd	r0, r1, [sp, #16]
    175a:	f10a 38ff 	add.w	r8, sl, #4294967295
    175e:	3701      	adds	r7, #1
    1760:	464c      	mov	r4, r9
    1762:	4638      	mov	r0, r7
    1764:	f7fe fe5e 	bl	424 <__aeabi_i2d>
    1768:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    176c:	f7fe fec4 	bl	4f8 <__aeabi_dmul>
    1770:	4b88      	ldr	r3, [pc, #544]	; (1994 <_dtoa_r+0x62c>)
    1772:	2200      	movs	r2, #0
    1774:	f7fe fd0a 	bl	18c <__adddf3>
    1778:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
    177c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1780:	9611      	str	r6, [sp, #68]	; 0x44
    1782:	2c00      	cmp	r4, #0
    1784:	d15d      	bne.n	1842 <_dtoa_r+0x4da>
    1786:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    178a:	4b83      	ldr	r3, [pc, #524]	; (1998 <_dtoa_r+0x630>)
    178c:	2200      	movs	r2, #0
    178e:	f7fe fcfb 	bl	188 <__aeabi_dsub>
    1792:	4602      	mov	r2, r0
    1794:	460b      	mov	r3, r1
    1796:	e9cd 2304 	strd	r2, r3, [sp, #16]
    179a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    179c:	4633      	mov	r3, r6
    179e:	f7ff f93b 	bl	a18 <__aeabi_dcmpgt>
    17a2:	2800      	cmp	r0, #0
    17a4:	f040 8297 	bne.w	1cd6 <_dtoa_r+0x96e>
    17a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    17ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
    17ae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    17b2:	f7ff f913 	bl	9dc <__aeabi_dcmplt>
    17b6:	2800      	cmp	r0, #0
    17b8:	f040 828b 	bne.w	1cd2 <_dtoa_r+0x96a>
    17bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    17c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
    17c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    17c6:	2b00      	cmp	r3, #0
    17c8:	f2c0 8151 	blt.w	1a6e <_dtoa_r+0x706>
    17cc:	f1ba 0f0e 	cmp.w	sl, #14
    17d0:	f300 814d 	bgt.w	1a6e <_dtoa_r+0x706>
    17d4:	4b6b      	ldr	r3, [pc, #428]	; (1984 <_dtoa_r+0x61c>)
    17d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    17da:	e9d3 3400 	ldrd	r3, r4, [r3]
    17de:	e9cd 3406 	strd	r3, r4, [sp, #24]
    17e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    17e4:	2b00      	cmp	r3, #0
    17e6:	f280 80db 	bge.w	19a0 <_dtoa_r+0x638>
    17ea:	9b08      	ldr	r3, [sp, #32]
    17ec:	2b00      	cmp	r3, #0
    17ee:	f300 80d7 	bgt.w	19a0 <_dtoa_r+0x638>
    17f2:	f040 826d 	bne.w	1cd0 <_dtoa_r+0x968>
    17f6:	4b68      	ldr	r3, [pc, #416]	; (1998 <_dtoa_r+0x630>)
    17f8:	2200      	movs	r2, #0
    17fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    17fe:	f7fe fe7b 	bl	4f8 <__aeabi_dmul>
    1802:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1806:	f7ff f8fd 	bl	a04 <__aeabi_dcmpge>
    180a:	9c08      	ldr	r4, [sp, #32]
    180c:	4626      	mov	r6, r4
    180e:	2800      	cmp	r0, #0
    1810:	f040 8243 	bne.w	1c9a <_dtoa_r+0x932>
    1814:	9f03      	ldr	r7, [sp, #12]
    1816:	2331      	movs	r3, #49	; 0x31
    1818:	f807 3b01 	strb.w	r3, [r7], #1
    181c:	f10a 0a01 	add.w	sl, sl, #1
    1820:	e23f      	b.n	1ca2 <_dtoa_r+0x93a>
    1822:	07e2      	lsls	r2, r4, #31
    1824:	d505      	bpl.n	1832 <_dtoa_r+0x4ca>
    1826:	e9d6 2300 	ldrd	r2, r3, [r6]
    182a:	f7fe fe65 	bl	4f8 <__aeabi_dmul>
    182e:	3701      	adds	r7, #1
    1830:	2301      	movs	r3, #1
    1832:	1064      	asrs	r4, r4, #1
    1834:	3608      	adds	r6, #8
    1836:	e76d      	b.n	1714 <_dtoa_r+0x3ac>
    1838:	2702      	movs	r7, #2
    183a:	e770      	b.n	171e <_dtoa_r+0x3b6>
    183c:	9c08      	ldr	r4, [sp, #32]
    183e:	46d0      	mov	r8, sl
    1840:	e78f      	b.n	1762 <_dtoa_r+0x3fa>
    1842:	9903      	ldr	r1, [sp, #12]
    1844:	4b4f      	ldr	r3, [pc, #316]	; (1984 <_dtoa_r+0x61c>)
    1846:	4421      	add	r1, r4
    1848:	9112      	str	r1, [sp, #72]	; 0x48
    184a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    184c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    1850:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    1854:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    1858:	2900      	cmp	r1, #0
    185a:	d046      	beq.n	18ea <_dtoa_r+0x582>
    185c:	494f      	ldr	r1, [pc, #316]	; (199c <_dtoa_r+0x634>)
    185e:	2000      	movs	r0, #0
    1860:	f7fe ff74 	bl	74c <__aeabi_ddiv>
    1864:	463b      	mov	r3, r7
    1866:	4632      	mov	r2, r6
    1868:	f7fe fc8e 	bl	188 <__aeabi_dsub>
    186c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1870:	9f03      	ldr	r7, [sp, #12]
    1872:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1876:	f7ff fd3d 	bl	12f4 <__aeabi_d2iz>
    187a:	4604      	mov	r4, r0
    187c:	f7fe fdd2 	bl	424 <__aeabi_i2d>
    1880:	4602      	mov	r2, r0
    1882:	460b      	mov	r3, r1
    1884:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1888:	f7fe fc7e 	bl	188 <__aeabi_dsub>
    188c:	3430      	adds	r4, #48	; 0x30
    188e:	4602      	mov	r2, r0
    1890:	460b      	mov	r3, r1
    1892:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1896:	f807 4b01 	strb.w	r4, [r7], #1
    189a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    189e:	f7ff f89d 	bl	9dc <__aeabi_dcmplt>
    18a2:	2800      	cmp	r0, #0
    18a4:	d165      	bne.n	1972 <_dtoa_r+0x60a>
    18a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    18aa:	4938      	ldr	r1, [pc, #224]	; (198c <_dtoa_r+0x624>)
    18ac:	2000      	movs	r0, #0
    18ae:	f7fe fc6b 	bl	188 <__aeabi_dsub>
    18b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    18b6:	f7ff f891 	bl	9dc <__aeabi_dcmplt>
    18ba:	2800      	cmp	r0, #0
    18bc:	f040 80b6 	bne.w	1a2c <_dtoa_r+0x6c4>
    18c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    18c2:	429f      	cmp	r7, r3
    18c4:	f43f af7a 	beq.w	17bc <_dtoa_r+0x454>
    18c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    18cc:	4b30      	ldr	r3, [pc, #192]	; (1990 <_dtoa_r+0x628>)
    18ce:	2200      	movs	r2, #0
    18d0:	f7fe fe12 	bl	4f8 <__aeabi_dmul>
    18d4:	4b2e      	ldr	r3, [pc, #184]	; (1990 <_dtoa_r+0x628>)
    18d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    18da:	2200      	movs	r2, #0
    18dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    18e0:	f7fe fe0a 	bl	4f8 <__aeabi_dmul>
    18e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    18e8:	e7c3      	b.n	1872 <_dtoa_r+0x50a>
    18ea:	4630      	mov	r0, r6
    18ec:	4639      	mov	r1, r7
    18ee:	f7fe fe03 	bl	4f8 <__aeabi_dmul>
    18f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    18f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    18f8:	9c03      	ldr	r4, [sp, #12]
    18fa:	9314      	str	r3, [sp, #80]	; 0x50
    18fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1900:	f7ff fcf8 	bl	12f4 <__aeabi_d2iz>
    1904:	9015      	str	r0, [sp, #84]	; 0x54
    1906:	f7fe fd8d 	bl	424 <__aeabi_i2d>
    190a:	4602      	mov	r2, r0
    190c:	460b      	mov	r3, r1
    190e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1912:	f7fe fc39 	bl	188 <__aeabi_dsub>
    1916:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1918:	3330      	adds	r3, #48	; 0x30
    191a:	f804 3b01 	strb.w	r3, [r4], #1
    191e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1920:	429c      	cmp	r4, r3
    1922:	4606      	mov	r6, r0
    1924:	460f      	mov	r7, r1
    1926:	f04f 0200 	mov.w	r2, #0
    192a:	d124      	bne.n	1976 <_dtoa_r+0x60e>
    192c:	4b1b      	ldr	r3, [pc, #108]	; (199c <_dtoa_r+0x634>)
    192e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1932:	f7fe fc2b 	bl	18c <__adddf3>
    1936:	4602      	mov	r2, r0
    1938:	460b      	mov	r3, r1
    193a:	4630      	mov	r0, r6
    193c:	4639      	mov	r1, r7
    193e:	f7ff f86b 	bl	a18 <__aeabi_dcmpgt>
    1942:	2800      	cmp	r0, #0
    1944:	d171      	bne.n	1a2a <_dtoa_r+0x6c2>
    1946:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    194a:	4914      	ldr	r1, [pc, #80]	; (199c <_dtoa_r+0x634>)
    194c:	2000      	movs	r0, #0
    194e:	f7fe fc1b 	bl	188 <__aeabi_dsub>
    1952:	4602      	mov	r2, r0
    1954:	460b      	mov	r3, r1
    1956:	4630      	mov	r0, r6
    1958:	4639      	mov	r1, r7
    195a:	f7ff f83f 	bl	9dc <__aeabi_dcmplt>
    195e:	2800      	cmp	r0, #0
    1960:	f43f af2c 	beq.w	17bc <_dtoa_r+0x454>
    1964:	9f14      	ldr	r7, [sp, #80]	; 0x50
    1966:	1e7b      	subs	r3, r7, #1
    1968:	9314      	str	r3, [sp, #80]	; 0x50
    196a:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    196e:	2b30      	cmp	r3, #48	; 0x30
    1970:	d0f8      	beq.n	1964 <_dtoa_r+0x5fc>
    1972:	46c2      	mov	sl, r8
    1974:	e049      	b.n	1a0a <_dtoa_r+0x6a2>
    1976:	4b06      	ldr	r3, [pc, #24]	; (1990 <_dtoa_r+0x628>)
    1978:	f7fe fdbe 	bl	4f8 <__aeabi_dmul>
    197c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1980:	e7bc      	b.n	18fc <_dtoa_r+0x594>
    1982:	bf00      	nop
    1984:	00015890 	.word	0x00015890
    1988:	00015868 	.word	0x00015868
    198c:	3ff00000 	.word	0x3ff00000
    1990:	40240000 	.word	0x40240000
    1994:	401c0000 	.word	0x401c0000
    1998:	40140000 	.word	0x40140000
    199c:	3fe00000 	.word	0x3fe00000
    19a0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    19a4:	9f03      	ldr	r7, [sp, #12]
    19a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    19aa:	4640      	mov	r0, r8
    19ac:	4649      	mov	r1, r9
    19ae:	f7fe fecd 	bl	74c <__aeabi_ddiv>
    19b2:	f7ff fc9f 	bl	12f4 <__aeabi_d2iz>
    19b6:	4604      	mov	r4, r0
    19b8:	f7fe fd34 	bl	424 <__aeabi_i2d>
    19bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    19c0:	f7fe fd9a 	bl	4f8 <__aeabi_dmul>
    19c4:	f104 0630 	add.w	r6, r4, #48	; 0x30
    19c8:	460b      	mov	r3, r1
    19ca:	4602      	mov	r2, r0
    19cc:	4649      	mov	r1, r9
    19ce:	4640      	mov	r0, r8
    19d0:	f7fe fbda 	bl	188 <__aeabi_dsub>
    19d4:	f807 6b01 	strb.w	r6, [r7], #1
    19d8:	9e03      	ldr	r6, [sp, #12]
    19da:	9b08      	ldr	r3, [sp, #32]
    19dc:	1bbe      	subs	r6, r7, r6
    19de:	42b3      	cmp	r3, r6
    19e0:	d138      	bne.n	1a54 <_dtoa_r+0x6ec>
    19e2:	4602      	mov	r2, r0
    19e4:	460b      	mov	r3, r1
    19e6:	f7fe fbd1 	bl	18c <__adddf3>
    19ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    19ee:	4680      	mov	r8, r0
    19f0:	4689      	mov	r9, r1
    19f2:	f7ff f811 	bl	a18 <__aeabi_dcmpgt>
    19f6:	bb58      	cbnz	r0, 1a50 <_dtoa_r+0x6e8>
    19f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    19fc:	4640      	mov	r0, r8
    19fe:	4649      	mov	r1, r9
    1a00:	f7fe ffe2 	bl	9c8 <__aeabi_dcmpeq>
    1a04:	b108      	cbz	r0, 1a0a <_dtoa_r+0x6a2>
    1a06:	07e1      	lsls	r1, r4, #31
    1a08:	d422      	bmi.n	1a50 <_dtoa_r+0x6e8>
    1a0a:	4628      	mov	r0, r5
    1a0c:	4659      	mov	r1, fp
    1a0e:	f013 fa3f 	bl	14e90 <_Bfree>
    1a12:	2300      	movs	r3, #0
    1a14:	703b      	strb	r3, [r7, #0]
    1a16:	9b24      	ldr	r3, [sp, #144]	; 0x90
    1a18:	f10a 0001 	add.w	r0, sl, #1
    1a1c:	6018      	str	r0, [r3, #0]
    1a1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1a20:	2b00      	cmp	r3, #0
    1a22:	f43f ace7 	beq.w	13f4 <_dtoa_r+0x8c>
    1a26:	601f      	str	r7, [r3, #0]
    1a28:	e4e4      	b.n	13f4 <_dtoa_r+0x8c>
    1a2a:	4627      	mov	r7, r4
    1a2c:	463b      	mov	r3, r7
    1a2e:	461f      	mov	r7, r3
    1a30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    1a34:	2a39      	cmp	r2, #57	; 0x39
    1a36:	d107      	bne.n	1a48 <_dtoa_r+0x6e0>
    1a38:	9a03      	ldr	r2, [sp, #12]
    1a3a:	429a      	cmp	r2, r3
    1a3c:	d1f7      	bne.n	1a2e <_dtoa_r+0x6c6>
    1a3e:	9903      	ldr	r1, [sp, #12]
    1a40:	2230      	movs	r2, #48	; 0x30
    1a42:	f108 0801 	add.w	r8, r8, #1
    1a46:	700a      	strb	r2, [r1, #0]
    1a48:	781a      	ldrb	r2, [r3, #0]
    1a4a:	3201      	adds	r2, #1
    1a4c:	701a      	strb	r2, [r3, #0]
    1a4e:	e790      	b.n	1972 <_dtoa_r+0x60a>
    1a50:	46d0      	mov	r8, sl
    1a52:	e7eb      	b.n	1a2c <_dtoa_r+0x6c4>
    1a54:	4ba1      	ldr	r3, [pc, #644]	; (1cdc <_dtoa_r+0x974>)
    1a56:	2200      	movs	r2, #0
    1a58:	f7fe fd4e 	bl	4f8 <__aeabi_dmul>
    1a5c:	2200      	movs	r2, #0
    1a5e:	2300      	movs	r3, #0
    1a60:	4680      	mov	r8, r0
    1a62:	4689      	mov	r9, r1
    1a64:	f7fe ffb0 	bl	9c8 <__aeabi_dcmpeq>
    1a68:	2800      	cmp	r0, #0
    1a6a:	d09c      	beq.n	19a6 <_dtoa_r+0x63e>
    1a6c:	e7cd      	b.n	1a0a <_dtoa_r+0x6a2>
    1a6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1a70:	2a00      	cmp	r2, #0
    1a72:	f000 80cd 	beq.w	1c10 <_dtoa_r+0x8a8>
    1a76:	9a22      	ldr	r2, [sp, #136]	; 0x88
    1a78:	2a01      	cmp	r2, #1
    1a7a:	f300 80af 	bgt.w	1bdc <_dtoa_r+0x874>
    1a7e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    1a80:	2a00      	cmp	r2, #0
    1a82:	f000 80a7 	beq.w	1bd4 <_dtoa_r+0x86c>
    1a86:	f203 4333 	addw	r3, r3, #1075	; 0x433
    1a8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    1a8c:	9f06      	ldr	r7, [sp, #24]
    1a8e:	9a06      	ldr	r2, [sp, #24]
    1a90:	441a      	add	r2, r3
    1a92:	9206      	str	r2, [sp, #24]
    1a94:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1a96:	2101      	movs	r1, #1
    1a98:	441a      	add	r2, r3
    1a9a:	4628      	mov	r0, r5
    1a9c:	9209      	str	r2, [sp, #36]	; 0x24
    1a9e:	f013 fa9a 	bl	14fd6 <__i2b>
    1aa2:	4606      	mov	r6, r0
    1aa4:	2f00      	cmp	r7, #0
    1aa6:	dd0c      	ble.n	1ac2 <_dtoa_r+0x75a>
    1aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1aaa:	2b00      	cmp	r3, #0
    1aac:	dd09      	ble.n	1ac2 <_dtoa_r+0x75a>
    1aae:	42bb      	cmp	r3, r7
    1ab0:	9a06      	ldr	r2, [sp, #24]
    1ab2:	bfa8      	it	ge
    1ab4:	463b      	movge	r3, r7
    1ab6:	1ad2      	subs	r2, r2, r3
    1ab8:	9206      	str	r2, [sp, #24]
    1aba:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1abc:	1aff      	subs	r7, r7, r3
    1abe:	1ad3      	subs	r3, r2, r3
    1ac0:	9309      	str	r3, [sp, #36]	; 0x24
    1ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1ac4:	b1f3      	cbz	r3, 1b04 <_dtoa_r+0x79c>
    1ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ac8:	2b00      	cmp	r3, #0
    1aca:	f000 80a5 	beq.w	1c18 <_dtoa_r+0x8b0>
    1ace:	2c00      	cmp	r4, #0
    1ad0:	dd10      	ble.n	1af4 <_dtoa_r+0x78c>
    1ad2:	4631      	mov	r1, r6
    1ad4:	4622      	mov	r2, r4
    1ad6:	4628      	mov	r0, r5
    1ad8:	f00f f8a0 	bl	10c1c <__pow5mult>
    1adc:	465a      	mov	r2, fp
    1ade:	4601      	mov	r1, r0
    1ae0:	4606      	mov	r6, r0
    1ae2:	4628      	mov	r0, r5
    1ae4:	f013 fa80 	bl	14fe8 <__multiply>
    1ae8:	4659      	mov	r1, fp
    1aea:	4680      	mov	r8, r0
    1aec:	4628      	mov	r0, r5
    1aee:	f013 f9cf 	bl	14e90 <_Bfree>
    1af2:	46c3      	mov	fp, r8
    1af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1af6:	1b1a      	subs	r2, r3, r4
    1af8:	d004      	beq.n	1b04 <_dtoa_r+0x79c>
    1afa:	4659      	mov	r1, fp
    1afc:	4628      	mov	r0, r5
    1afe:	f00f f88d 	bl	10c1c <__pow5mult>
    1b02:	4683      	mov	fp, r0
    1b04:	2101      	movs	r1, #1
    1b06:	4628      	mov	r0, r5
    1b08:	f013 fa65 	bl	14fd6 <__i2b>
    1b0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1b0e:	2b00      	cmp	r3, #0
    1b10:	4604      	mov	r4, r0
    1b12:	f340 8083 	ble.w	1c1c <_dtoa_r+0x8b4>
    1b16:	461a      	mov	r2, r3
    1b18:	4601      	mov	r1, r0
    1b1a:	4628      	mov	r0, r5
    1b1c:	f00f f87e 	bl	10c1c <__pow5mult>
    1b20:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1b22:	2b01      	cmp	r3, #1
    1b24:	4604      	mov	r4, r0
    1b26:	dd7c      	ble.n	1c22 <_dtoa_r+0x8ba>
    1b28:	f04f 0800 	mov.w	r8, #0
    1b2c:	6923      	ldr	r3, [r4, #16]
    1b2e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1b32:	6918      	ldr	r0, [r3, #16]
    1b34:	f013 fa01 	bl	14f3a <__hi0bits>
    1b38:	f1c0 0020 	rsb	r0, r0, #32
    1b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1b3e:	4418      	add	r0, r3
    1b40:	f010 001f 	ands.w	r0, r0, #31
    1b44:	f000 808e 	beq.w	1c64 <_dtoa_r+0x8fc>
    1b48:	f1c0 0320 	rsb	r3, r0, #32
    1b4c:	2b04      	cmp	r3, #4
    1b4e:	f340 8087 	ble.w	1c60 <_dtoa_r+0x8f8>
    1b52:	f1c0 001c 	rsb	r0, r0, #28
    1b56:	9b06      	ldr	r3, [sp, #24]
    1b58:	4403      	add	r3, r0
    1b5a:	9306      	str	r3, [sp, #24]
    1b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1b5e:	4403      	add	r3, r0
    1b60:	4407      	add	r7, r0
    1b62:	9309      	str	r3, [sp, #36]	; 0x24
    1b64:	9b06      	ldr	r3, [sp, #24]
    1b66:	2b00      	cmp	r3, #0
    1b68:	dd05      	ble.n	1b76 <_dtoa_r+0x80e>
    1b6a:	4659      	mov	r1, fp
    1b6c:	461a      	mov	r2, r3
    1b6e:	4628      	mov	r0, r5
    1b70:	f013 fad6 	bl	15120 <__lshift>
    1b74:	4683      	mov	fp, r0
    1b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1b78:	2b00      	cmp	r3, #0
    1b7a:	dd05      	ble.n	1b88 <_dtoa_r+0x820>
    1b7c:	4621      	mov	r1, r4
    1b7e:	461a      	mov	r2, r3
    1b80:	4628      	mov	r0, r5
    1b82:	f013 facd 	bl	15120 <__lshift>
    1b86:	4604      	mov	r4, r0
    1b88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1b8a:	2b00      	cmp	r3, #0
    1b8c:	d06c      	beq.n	1c68 <_dtoa_r+0x900>
    1b8e:	4621      	mov	r1, r4
    1b90:	4658      	mov	r0, fp
    1b92:	f013 fb24 	bl	151de <__mcmp>
    1b96:	2800      	cmp	r0, #0
    1b98:	da66      	bge.n	1c68 <_dtoa_r+0x900>
    1b9a:	2300      	movs	r3, #0
    1b9c:	4659      	mov	r1, fp
    1b9e:	220a      	movs	r2, #10
    1ba0:	4628      	mov	r0, r5
    1ba2:	f013 f98c 	bl	14ebe <__multadd>
    1ba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ba8:	f10a 3aff 	add.w	sl, sl, #4294967295
    1bac:	4683      	mov	fp, r0
    1bae:	2b00      	cmp	r3, #0
    1bb0:	f000 818b 	beq.w	1eca <_dtoa_r+0xb62>
    1bb4:	4631      	mov	r1, r6
    1bb6:	2300      	movs	r3, #0
    1bb8:	220a      	movs	r2, #10
    1bba:	4628      	mov	r0, r5
    1bbc:	f013 f97f 	bl	14ebe <__multadd>
    1bc0:	f1b9 0f00 	cmp.w	r9, #0
    1bc4:	4606      	mov	r6, r0
    1bc6:	f300 8091 	bgt.w	1cec <_dtoa_r+0x984>
    1bca:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1bcc:	2b02      	cmp	r3, #2
    1bce:	f340 808d 	ble.w	1cec <_dtoa_r+0x984>
    1bd2:	e051      	b.n	1c78 <_dtoa_r+0x910>
    1bd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1bd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    1bda:	e756      	b.n	1a8a <_dtoa_r+0x722>
    1bdc:	9b08      	ldr	r3, [sp, #32]
    1bde:	1e5c      	subs	r4, r3, #1
    1be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1be2:	42a3      	cmp	r3, r4
    1be4:	bfbf      	itttt	lt
    1be6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    1be8:	940a      	strlt	r4, [sp, #40]	; 0x28
    1bea:	1ae2      	sublt	r2, r4, r3
    1bec:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
    1bee:	bfb6      	itet	lt
    1bf0:	189b      	addlt	r3, r3, r2
    1bf2:	1b1c      	subge	r4, r3, r4
    1bf4:	930e      	strlt	r3, [sp, #56]	; 0x38
    1bf6:	9b08      	ldr	r3, [sp, #32]
    1bf8:	bfb8      	it	lt
    1bfa:	2400      	movlt	r4, #0
    1bfc:	2b00      	cmp	r3, #0
    1bfe:	bfb9      	ittee	lt
    1c00:	9b06      	ldrlt	r3, [sp, #24]
    1c02:	9a08      	ldrlt	r2, [sp, #32]
    1c04:	9f06      	ldrge	r7, [sp, #24]
    1c06:	9b08      	ldrge	r3, [sp, #32]
    1c08:	bfbc      	itt	lt
    1c0a:	1a9f      	sublt	r7, r3, r2
    1c0c:	2300      	movlt	r3, #0
    1c0e:	e73e      	b.n	1a8e <_dtoa_r+0x726>
    1c10:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    1c12:	9f06      	ldr	r7, [sp, #24]
    1c14:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    1c16:	e745      	b.n	1aa4 <_dtoa_r+0x73c>
    1c18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1c1a:	e76e      	b.n	1afa <_dtoa_r+0x792>
    1c1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1c1e:	2b01      	cmp	r3, #1
    1c20:	dc19      	bgt.n	1c56 <_dtoa_r+0x8ee>
    1c22:	9b04      	ldr	r3, [sp, #16]
    1c24:	b9bb      	cbnz	r3, 1c56 <_dtoa_r+0x8ee>
    1c26:	9b05      	ldr	r3, [sp, #20]
    1c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
    1c2c:	b99b      	cbnz	r3, 1c56 <_dtoa_r+0x8ee>
    1c2e:	9b05      	ldr	r3, [sp, #20]
    1c30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    1c34:	0d1b      	lsrs	r3, r3, #20
    1c36:	051b      	lsls	r3, r3, #20
    1c38:	b183      	cbz	r3, 1c5c <_dtoa_r+0x8f4>
    1c3a:	9b06      	ldr	r3, [sp, #24]
    1c3c:	3301      	adds	r3, #1
    1c3e:	9306      	str	r3, [sp, #24]
    1c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1c42:	3301      	adds	r3, #1
    1c44:	9309      	str	r3, [sp, #36]	; 0x24
    1c46:	f04f 0801 	mov.w	r8, #1
    1c4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1c4c:	2b00      	cmp	r3, #0
    1c4e:	f47f af6d 	bne.w	1b2c <_dtoa_r+0x7c4>
    1c52:	2001      	movs	r0, #1
    1c54:	e772      	b.n	1b3c <_dtoa_r+0x7d4>
    1c56:	f04f 0800 	mov.w	r8, #0
    1c5a:	e7f6      	b.n	1c4a <_dtoa_r+0x8e2>
    1c5c:	4698      	mov	r8, r3
    1c5e:	e7f4      	b.n	1c4a <_dtoa_r+0x8e2>
    1c60:	d080      	beq.n	1b64 <_dtoa_r+0x7fc>
    1c62:	4618      	mov	r0, r3
    1c64:	301c      	adds	r0, #28
    1c66:	e776      	b.n	1b56 <_dtoa_r+0x7ee>
    1c68:	9b08      	ldr	r3, [sp, #32]
    1c6a:	2b00      	cmp	r3, #0
    1c6c:	dc38      	bgt.n	1ce0 <_dtoa_r+0x978>
    1c6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1c70:	2b02      	cmp	r3, #2
    1c72:	dd35      	ble.n	1ce0 <_dtoa_r+0x978>
    1c74:	f8dd 9020 	ldr.w	r9, [sp, #32]
    1c78:	f1b9 0f00 	cmp.w	r9, #0
    1c7c:	d10d      	bne.n	1c9a <_dtoa_r+0x932>
    1c7e:	4621      	mov	r1, r4
    1c80:	464b      	mov	r3, r9
    1c82:	2205      	movs	r2, #5
    1c84:	4628      	mov	r0, r5
    1c86:	f013 f91a 	bl	14ebe <__multadd>
    1c8a:	4601      	mov	r1, r0
    1c8c:	4604      	mov	r4, r0
    1c8e:	4658      	mov	r0, fp
    1c90:	f013 faa5 	bl	151de <__mcmp>
    1c94:	2800      	cmp	r0, #0
    1c96:	f73f adbd 	bgt.w	1814 <_dtoa_r+0x4ac>
    1c9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1c9c:	9f03      	ldr	r7, [sp, #12]
    1c9e:	ea6f 0a03 	mvn.w	sl, r3
    1ca2:	f04f 0800 	mov.w	r8, #0
    1ca6:	4621      	mov	r1, r4
    1ca8:	4628      	mov	r0, r5
    1caa:	f013 f8f1 	bl	14e90 <_Bfree>
    1cae:	2e00      	cmp	r6, #0
    1cb0:	f43f aeab 	beq.w	1a0a <_dtoa_r+0x6a2>
    1cb4:	f1b8 0f00 	cmp.w	r8, #0
    1cb8:	d005      	beq.n	1cc6 <_dtoa_r+0x95e>
    1cba:	45b0      	cmp	r8, r6
    1cbc:	d003      	beq.n	1cc6 <_dtoa_r+0x95e>
    1cbe:	4641      	mov	r1, r8
    1cc0:	4628      	mov	r0, r5
    1cc2:	f013 f8e5 	bl	14e90 <_Bfree>
    1cc6:	4631      	mov	r1, r6
    1cc8:	4628      	mov	r0, r5
    1cca:	f013 f8e1 	bl	14e90 <_Bfree>
    1cce:	e69c      	b.n	1a0a <_dtoa_r+0x6a2>
    1cd0:	2400      	movs	r4, #0
    1cd2:	4626      	mov	r6, r4
    1cd4:	e7e1      	b.n	1c9a <_dtoa_r+0x932>
    1cd6:	46c2      	mov	sl, r8
    1cd8:	4626      	mov	r6, r4
    1cda:	e59b      	b.n	1814 <_dtoa_r+0x4ac>
    1cdc:	40240000 	.word	0x40240000
    1ce0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ce2:	f8dd 9020 	ldr.w	r9, [sp, #32]
    1ce6:	2b00      	cmp	r3, #0
    1ce8:	f000 80f6 	beq.w	1ed8 <_dtoa_r+0xb70>
    1cec:	2f00      	cmp	r7, #0
    1cee:	dd05      	ble.n	1cfc <_dtoa_r+0x994>
    1cf0:	4631      	mov	r1, r6
    1cf2:	463a      	mov	r2, r7
    1cf4:	4628      	mov	r0, r5
    1cf6:	f013 fa13 	bl	15120 <__lshift>
    1cfa:	4606      	mov	r6, r0
    1cfc:	f1b8 0f00 	cmp.w	r8, #0
    1d00:	d055      	beq.n	1dae <_dtoa_r+0xa46>
    1d02:	6871      	ldr	r1, [r6, #4]
    1d04:	4628      	mov	r0, r5
    1d06:	f013 f88f 	bl	14e28 <_Balloc>
    1d0a:	6932      	ldr	r2, [r6, #16]
    1d0c:	3202      	adds	r2, #2
    1d0e:	4607      	mov	r7, r0
    1d10:	0092      	lsls	r2, r2, #2
    1d12:	f106 010c 	add.w	r1, r6, #12
    1d16:	300c      	adds	r0, #12
    1d18:	f012 fe93 	bl	14a42 <memcpy>
    1d1c:	2201      	movs	r2, #1
    1d1e:	4639      	mov	r1, r7
    1d20:	4628      	mov	r0, r5
    1d22:	f013 f9fd 	bl	15120 <__lshift>
    1d26:	9b03      	ldr	r3, [sp, #12]
    1d28:	3301      	adds	r3, #1
    1d2a:	9308      	str	r3, [sp, #32]
    1d2c:	9b03      	ldr	r3, [sp, #12]
    1d2e:	444b      	add	r3, r9
    1d30:	930a      	str	r3, [sp, #40]	; 0x28
    1d32:	9b04      	ldr	r3, [sp, #16]
    1d34:	f003 0301 	and.w	r3, r3, #1
    1d38:	46b0      	mov	r8, r6
    1d3a:	9309      	str	r3, [sp, #36]	; 0x24
    1d3c:	4606      	mov	r6, r0
    1d3e:	9b08      	ldr	r3, [sp, #32]
    1d40:	4621      	mov	r1, r4
    1d42:	3b01      	subs	r3, #1
    1d44:	4658      	mov	r0, fp
    1d46:	9304      	str	r3, [sp, #16]
    1d48:	f012 ffe3 	bl	14d12 <quorem>
    1d4c:	4603      	mov	r3, r0
    1d4e:	3330      	adds	r3, #48	; 0x30
    1d50:	9006      	str	r0, [sp, #24]
    1d52:	4641      	mov	r1, r8
    1d54:	4658      	mov	r0, fp
    1d56:	930b      	str	r3, [sp, #44]	; 0x2c
    1d58:	f013 fa41 	bl	151de <__mcmp>
    1d5c:	4632      	mov	r2, r6
    1d5e:	4681      	mov	r9, r0
    1d60:	4621      	mov	r1, r4
    1d62:	4628      	mov	r0, r5
    1d64:	f013 fa56 	bl	15214 <__mdiff>
    1d68:	68c2      	ldr	r2, [r0, #12]
    1d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d6c:	4607      	mov	r7, r0
    1d6e:	bb02      	cbnz	r2, 1db2 <_dtoa_r+0xa4a>
    1d70:	4601      	mov	r1, r0
    1d72:	4658      	mov	r0, fp
    1d74:	f013 fa33 	bl	151de <__mcmp>
    1d78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d7a:	4602      	mov	r2, r0
    1d7c:	4639      	mov	r1, r7
    1d7e:	4628      	mov	r0, r5
    1d80:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
    1d84:	f013 f884 	bl	14e90 <_Bfree>
    1d88:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1d8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1d8c:	9f08      	ldr	r7, [sp, #32]
    1d8e:	ea43 0102 	orr.w	r1, r3, r2
    1d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d94:	430b      	orrs	r3, r1
    1d96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d98:	d10d      	bne.n	1db6 <_dtoa_r+0xa4e>
    1d9a:	2b39      	cmp	r3, #57	; 0x39
    1d9c:	d029      	beq.n	1df2 <_dtoa_r+0xa8a>
    1d9e:	f1b9 0f00 	cmp.w	r9, #0
    1da2:	dd01      	ble.n	1da8 <_dtoa_r+0xa40>
    1da4:	9b06      	ldr	r3, [sp, #24]
    1da6:	3331      	adds	r3, #49	; 0x31
    1da8:	9a04      	ldr	r2, [sp, #16]
    1daa:	7013      	strb	r3, [r2, #0]
    1dac:	e77b      	b.n	1ca6 <_dtoa_r+0x93e>
    1dae:	4630      	mov	r0, r6
    1db0:	e7b9      	b.n	1d26 <_dtoa_r+0x9be>
    1db2:	2201      	movs	r2, #1
    1db4:	e7e2      	b.n	1d7c <_dtoa_r+0xa14>
    1db6:	f1b9 0f00 	cmp.w	r9, #0
    1dba:	db06      	blt.n	1dca <_dtoa_r+0xa62>
    1dbc:	9922      	ldr	r1, [sp, #136]	; 0x88
    1dbe:	ea41 0909 	orr.w	r9, r1, r9
    1dc2:	9909      	ldr	r1, [sp, #36]	; 0x24
    1dc4:	ea59 0101 	orrs.w	r1, r9, r1
    1dc8:	d120      	bne.n	1e0c <_dtoa_r+0xaa4>
    1dca:	2a00      	cmp	r2, #0
    1dcc:	ddec      	ble.n	1da8 <_dtoa_r+0xa40>
    1dce:	4659      	mov	r1, fp
    1dd0:	2201      	movs	r2, #1
    1dd2:	4628      	mov	r0, r5
    1dd4:	9308      	str	r3, [sp, #32]
    1dd6:	f013 f9a3 	bl	15120 <__lshift>
    1dda:	4621      	mov	r1, r4
    1ddc:	4683      	mov	fp, r0
    1dde:	f013 f9fe 	bl	151de <__mcmp>
    1de2:	2800      	cmp	r0, #0
    1de4:	9b08      	ldr	r3, [sp, #32]
    1de6:	dc02      	bgt.n	1dee <_dtoa_r+0xa86>
    1de8:	d1de      	bne.n	1da8 <_dtoa_r+0xa40>
    1dea:	07da      	lsls	r2, r3, #31
    1dec:	d5dc      	bpl.n	1da8 <_dtoa_r+0xa40>
    1dee:	2b39      	cmp	r3, #57	; 0x39
    1df0:	d1d8      	bne.n	1da4 <_dtoa_r+0xa3c>
    1df2:	9a04      	ldr	r2, [sp, #16]
    1df4:	2339      	movs	r3, #57	; 0x39
    1df6:	7013      	strb	r3, [r2, #0]
    1df8:	463b      	mov	r3, r7
    1dfa:	461f      	mov	r7, r3
    1dfc:	3b01      	subs	r3, #1
    1dfe:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    1e02:	2a39      	cmp	r2, #57	; 0x39
    1e04:	d050      	beq.n	1ea8 <_dtoa_r+0xb40>
    1e06:	3201      	adds	r2, #1
    1e08:	701a      	strb	r2, [r3, #0]
    1e0a:	e74c      	b.n	1ca6 <_dtoa_r+0x93e>
    1e0c:	2a00      	cmp	r2, #0
    1e0e:	dd03      	ble.n	1e18 <_dtoa_r+0xab0>
    1e10:	2b39      	cmp	r3, #57	; 0x39
    1e12:	d0ee      	beq.n	1df2 <_dtoa_r+0xa8a>
    1e14:	3301      	adds	r3, #1
    1e16:	e7c7      	b.n	1da8 <_dtoa_r+0xa40>
    1e18:	9a08      	ldr	r2, [sp, #32]
    1e1a:	990a      	ldr	r1, [sp, #40]	; 0x28
    1e1c:	f802 3c01 	strb.w	r3, [r2, #-1]
    1e20:	428a      	cmp	r2, r1
    1e22:	d02a      	beq.n	1e7a <_dtoa_r+0xb12>
    1e24:	4659      	mov	r1, fp
    1e26:	2300      	movs	r3, #0
    1e28:	220a      	movs	r2, #10
    1e2a:	4628      	mov	r0, r5
    1e2c:	f013 f847 	bl	14ebe <__multadd>
    1e30:	45b0      	cmp	r8, r6
    1e32:	4683      	mov	fp, r0
    1e34:	f04f 0300 	mov.w	r3, #0
    1e38:	f04f 020a 	mov.w	r2, #10
    1e3c:	4641      	mov	r1, r8
    1e3e:	4628      	mov	r0, r5
    1e40:	d107      	bne.n	1e52 <_dtoa_r+0xaea>
    1e42:	f013 f83c 	bl	14ebe <__multadd>
    1e46:	4680      	mov	r8, r0
    1e48:	4606      	mov	r6, r0
    1e4a:	9b08      	ldr	r3, [sp, #32]
    1e4c:	3301      	adds	r3, #1
    1e4e:	9308      	str	r3, [sp, #32]
    1e50:	e775      	b.n	1d3e <_dtoa_r+0x9d6>
    1e52:	f013 f834 	bl	14ebe <__multadd>
    1e56:	4631      	mov	r1, r6
    1e58:	4680      	mov	r8, r0
    1e5a:	2300      	movs	r3, #0
    1e5c:	220a      	movs	r2, #10
    1e5e:	4628      	mov	r0, r5
    1e60:	f013 f82d 	bl	14ebe <__multadd>
    1e64:	4606      	mov	r6, r0
    1e66:	e7f0      	b.n	1e4a <_dtoa_r+0xae2>
    1e68:	f1b9 0f00 	cmp.w	r9, #0
    1e6c:	9a03      	ldr	r2, [sp, #12]
    1e6e:	bfcc      	ite	gt
    1e70:	464f      	movgt	r7, r9
    1e72:	2701      	movle	r7, #1
    1e74:	4417      	add	r7, r2
    1e76:	f04f 0800 	mov.w	r8, #0
    1e7a:	4659      	mov	r1, fp
    1e7c:	2201      	movs	r2, #1
    1e7e:	4628      	mov	r0, r5
    1e80:	9308      	str	r3, [sp, #32]
    1e82:	f013 f94d 	bl	15120 <__lshift>
    1e86:	4621      	mov	r1, r4
    1e88:	4683      	mov	fp, r0
    1e8a:	f013 f9a8 	bl	151de <__mcmp>
    1e8e:	2800      	cmp	r0, #0
    1e90:	dcb2      	bgt.n	1df8 <_dtoa_r+0xa90>
    1e92:	d102      	bne.n	1e9a <_dtoa_r+0xb32>
    1e94:	9b08      	ldr	r3, [sp, #32]
    1e96:	07db      	lsls	r3, r3, #31
    1e98:	d4ae      	bmi.n	1df8 <_dtoa_r+0xa90>
    1e9a:	463b      	mov	r3, r7
    1e9c:	461f      	mov	r7, r3
    1e9e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    1ea2:	2a30      	cmp	r2, #48	; 0x30
    1ea4:	d0fa      	beq.n	1e9c <_dtoa_r+0xb34>
    1ea6:	e6fe      	b.n	1ca6 <_dtoa_r+0x93e>
    1ea8:	9a03      	ldr	r2, [sp, #12]
    1eaa:	429a      	cmp	r2, r3
    1eac:	d1a5      	bne.n	1dfa <_dtoa_r+0xa92>
    1eae:	f10a 0a01 	add.w	sl, sl, #1
    1eb2:	2331      	movs	r3, #49	; 0x31
    1eb4:	e779      	b.n	1daa <_dtoa_r+0xa42>
    1eb6:	4b13      	ldr	r3, [pc, #76]	; (1f04 <_dtoa_r+0xb9c>)
    1eb8:	f7ff babb 	b.w	1432 <_dtoa_r+0xca>
    1ebc:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1ebe:	2b00      	cmp	r3, #0
    1ec0:	f47f aa93 	bne.w	13ea <_dtoa_r+0x82>
    1ec4:	4b10      	ldr	r3, [pc, #64]	; (1f08 <_dtoa_r+0xba0>)
    1ec6:	f7ff bab4 	b.w	1432 <_dtoa_r+0xca>
    1eca:	f1b9 0f00 	cmp.w	r9, #0
    1ece:	dc03      	bgt.n	1ed8 <_dtoa_r+0xb70>
    1ed0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1ed2:	2b02      	cmp	r3, #2
    1ed4:	f73f aed0 	bgt.w	1c78 <_dtoa_r+0x910>
    1ed8:	9f03      	ldr	r7, [sp, #12]
    1eda:	4621      	mov	r1, r4
    1edc:	4658      	mov	r0, fp
    1ede:	f012 ff18 	bl	14d12 <quorem>
    1ee2:	f100 0330 	add.w	r3, r0, #48	; 0x30
    1ee6:	f807 3b01 	strb.w	r3, [r7], #1
    1eea:	9a03      	ldr	r2, [sp, #12]
    1eec:	1aba      	subs	r2, r7, r2
    1eee:	4591      	cmp	r9, r2
    1ef0:	ddba      	ble.n	1e68 <_dtoa_r+0xb00>
    1ef2:	4659      	mov	r1, fp
    1ef4:	2300      	movs	r3, #0
    1ef6:	220a      	movs	r2, #10
    1ef8:	4628      	mov	r0, r5
    1efa:	f012 ffe0 	bl	14ebe <__multadd>
    1efe:	4683      	mov	fp, r0
    1f00:	e7eb      	b.n	1eda <_dtoa_r+0xb72>
    1f02:	bf00      	nop
    1f04:	00017481 	.word	0x00017481
    1f08:	000174a5 	.word	0x000174a5

00001f0c <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
    1f0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f10:	4605      	mov	r5, r0
    1f12:	460e      	mov	r6, r1
    1f14:	4614      	mov	r4, r2
	const struct gpio_driver_api *api =
    1f16:	f8d0 a008 	ldr.w	sl, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
    1f1a:	f8d0 b004 	ldr.w	fp, [r0, #4]
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    1f1e:	f8d0 8010 	ldr.w	r8, [r0, #16]
		(struct gpio_driver_data *)port->data;

	__ASSERT((flags & GPIO_INT_MASK) == 0,
    1f22:	f412 2ffc 	tst.w	r2, #516096	; 0x7e000
    1f26:	d136      	bne.n	1f96 <z_impl_gpio_pin_configure+0x8a>
		 "Interrupt flags are not supported");

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    1f28:	f004 0330 	and.w	r3, r4, #48	; 0x30
    1f2c:	2b30      	cmp	r3, #48	; 0x30
    1f2e:	d03f      	beq.n	1fb0 <z_impl_gpio_pin_configure+0xa4>
		 (GPIO_PULL_UP | GPIO_PULL_DOWN),
		 "Pull Up and Pull Down should not be enabled simultaneously");

	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
    1f30:	f240 2302 	movw	r3, #514	; 0x202
    1f34:	4023      	ands	r3, r4
    1f36:	2b02      	cmp	r3, #2
    1f38:	d047      	beq.n	1fca <z_impl_gpio_pin_configure+0xbe>
		 "Output needs to be enabled for 'Open Drain', 'Open Source' "
		 "mode to be supported");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    1f3a:	f004 0306 	and.w	r3, r4, #6
    1f3e:	2b04      	cmp	r3, #4
    1f40:	d050      	beq.n	1fe4 <z_impl_gpio_pin_configure+0xd8>
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
    1f42:	f414 6740 	ands.w	r7, r4, #3072	; 0xc00
    1f46:	d002      	beq.n	1f4e <z_impl_gpio_pin_configure+0x42>
    1f48:	f414 7f00 	tst.w	r4, #512	; 0x200
    1f4c:	d057      	beq.n	1ffe <z_impl_gpio_pin_configure+0xf2>
		 || (flags & GPIO_OUTPUT) != 0,
		 "Output needs to be enabled to be initialized low or high");

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
    1f4e:	f5b7 6f40 	cmp.w	r7, #3072	; 0xc00
    1f52:	d062      	beq.n	201a <z_impl_gpio_pin_configure+0x10e>
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    1f54:	f414 5f80 	tst.w	r4, #4096	; 0x1000
    1f58:	d005      	beq.n	1f66 <z_impl_gpio_pin_configure+0x5a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    1f5a:	b127      	cbz	r7, 1f66 <z_impl_gpio_pin_configure+0x5a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    1f5c:	f014 0f01 	tst.w	r4, #1
    1f60:	d001      	beq.n	1f66 <z_impl_gpio_pin_configure+0x5a>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    1f62:	f484 6440 	eor.w	r4, r4, #3072	; 0xc00
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    1f66:	f424 5980 	bic.w	r9, r4, #4096	; 0x1000

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1f6a:	f8db 3000 	ldr.w	r3, [fp]
    1f6e:	2701      	movs	r7, #1
    1f70:	40b7      	lsls	r7, r6
    1f72:	423b      	tst	r3, r7
    1f74:	d05f      	beq.n	2036 <z_impl_gpio_pin_configure+0x12a>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    1f76:	f014 0f01 	tst.w	r4, #1
    1f7a:	d06a      	beq.n	2052 <z_impl_gpio_pin_configure+0x146>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    1f7c:	f8d8 3000 	ldr.w	r3, [r8]
    1f80:	431f      	orrs	r7, r3
    1f82:	f8c8 7000 	str.w	r7, [r8]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
    1f86:	f8da 3000 	ldr.w	r3, [sl]
    1f8a:	464a      	mov	r2, r9
    1f8c:	4631      	mov	r1, r6
    1f8e:	4628      	mov	r0, r5
    1f90:	4798      	blx	r3
}
    1f92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT((flags & GPIO_INT_MASK) == 0,
    1f96:	4f32      	ldr	r7, [pc, #200]	; (2060 <z_impl_gpio_pin_configure+0x154>)
    1f98:	f240 22de 	movw	r2, #734	; 0x2de
    1f9c:	4639      	mov	r1, r7
    1f9e:	4831      	ldr	r0, [pc, #196]	; (2064 <z_impl_gpio_pin_configure+0x158>)
    1fa0:	f00f f842 	bl	11028 <printk>
    1fa4:	f240 21de 	movw	r1, #734	; 0x2de
    1fa8:	4638      	mov	r0, r7
    1faa:	f00f f95f 	bl	1126c <assert_post_action>
    1fae:	e7bb      	b.n	1f28 <z_impl_gpio_pin_configure+0x1c>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    1fb0:	4f2b      	ldr	r7, [pc, #172]	; (2060 <z_impl_gpio_pin_configure+0x154>)
    1fb2:	f240 22e1 	movw	r2, #737	; 0x2e1
    1fb6:	4639      	mov	r1, r7
    1fb8:	482a      	ldr	r0, [pc, #168]	; (2064 <z_impl_gpio_pin_configure+0x158>)
    1fba:	f00f f835 	bl	11028 <printk>
    1fbe:	f240 21e1 	movw	r1, #737	; 0x2e1
    1fc2:	4638      	mov	r0, r7
    1fc4:	f00f f952 	bl	1126c <assert_post_action>
    1fc8:	e7b2      	b.n	1f30 <z_impl_gpio_pin_configure+0x24>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
    1fca:	4f25      	ldr	r7, [pc, #148]	; (2060 <z_impl_gpio_pin_configure+0x154>)
    1fcc:	f240 22e5 	movw	r2, #741	; 0x2e5
    1fd0:	4639      	mov	r1, r7
    1fd2:	4824      	ldr	r0, [pc, #144]	; (2064 <z_impl_gpio_pin_configure+0x158>)
    1fd4:	f00f f828 	bl	11028 <printk>
    1fd8:	f240 21e5 	movw	r1, #741	; 0x2e5
    1fdc:	4638      	mov	r0, r7
    1fde:	f00f f945 	bl	1126c <assert_post_action>
    1fe2:	e7aa      	b.n	1f3a <z_impl_gpio_pin_configure+0x2e>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    1fe4:	4f1e      	ldr	r7, [pc, #120]	; (2060 <z_impl_gpio_pin_configure+0x154>)
    1fe6:	f240 22e9 	movw	r2, #745	; 0x2e9
    1fea:	4639      	mov	r1, r7
    1fec:	481d      	ldr	r0, [pc, #116]	; (2064 <z_impl_gpio_pin_configure+0x158>)
    1fee:	f00f f81b 	bl	11028 <printk>
    1ff2:	f240 21e9 	movw	r1, #745	; 0x2e9
    1ff6:	4638      	mov	r0, r7
    1ff8:	f00f f938 	bl	1126c <assert_post_action>
    1ffc:	e7a1      	b.n	1f42 <z_impl_gpio_pin_configure+0x36>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
    1ffe:	f8df 9060 	ldr.w	r9, [pc, #96]	; 2060 <z_impl_gpio_pin_configure+0x154>
    2002:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    2006:	4649      	mov	r1, r9
    2008:	4816      	ldr	r0, [pc, #88]	; (2064 <z_impl_gpio_pin_configure+0x158>)
    200a:	f00f f80d 	bl	11028 <printk>
    200e:	f44f 713b 	mov.w	r1, #748	; 0x2ec
    2012:	4648      	mov	r0, r9
    2014:	f00f f92a 	bl	1126c <assert_post_action>
    2018:	e799      	b.n	1f4e <z_impl_gpio_pin_configure+0x42>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
    201a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 2060 <z_impl_gpio_pin_configure+0x154>
    201e:	f44f 723c 	mov.w	r2, #752	; 0x2f0
    2022:	4649      	mov	r1, r9
    2024:	480f      	ldr	r0, [pc, #60]	; (2064 <z_impl_gpio_pin_configure+0x158>)
    2026:	f00e ffff 	bl	11028 <printk>
    202a:	f44f 713c 	mov.w	r1, #752	; 0x2f0
    202e:	4648      	mov	r0, r9
    2030:	f00f f91c 	bl	1126c <assert_post_action>
    2034:	e78e      	b.n	1f54 <z_impl_gpio_pin_configure+0x48>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    2036:	f8df b028 	ldr.w	fp, [pc, #40]	; 2060 <z_impl_gpio_pin_configure+0x154>
    203a:	f240 22fd 	movw	r2, #765	; 0x2fd
    203e:	4659      	mov	r1, fp
    2040:	4808      	ldr	r0, [pc, #32]	; (2064 <z_impl_gpio_pin_configure+0x158>)
    2042:	f00e fff1 	bl	11028 <printk>
    2046:	f240 21fd 	movw	r1, #765	; 0x2fd
    204a:	4658      	mov	r0, fp
    204c:	f00f f90e 	bl	1126c <assert_post_action>
    2050:	e791      	b.n	1f76 <z_impl_gpio_pin_configure+0x6a>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    2052:	f8d8 3000 	ldr.w	r3, [r8]
    2056:	ea23 0707 	bic.w	r7, r3, r7
    205a:	f8c8 7000 	str.w	r7, [r8]
    205e:	e792      	b.n	1f86 <z_impl_gpio_pin_configure+0x7a>
    2060:	00015958 	.word	0x00015958
    2064:	00015984 	.word	0x00015984

00002068 <lsdir>:
static const char *disk_mount_pt = "/SD:";
char filename[255];
struct fs_file_t file;

static int lsdir(const char *path)
{
    2068:	b530      	push	{r4, r5, lr}
    206a:	b083      	sub	sp, #12
    206c:	4605      	mov	r5, r0
 * @param zdp Pointer to file object
 *
 */
static inline void fs_dir_t_init(struct fs_dir_t *zdp)
{
	*zdp = (struct fs_dir_t){ 0 };
    206e:	2300      	movs	r3, #0
    2070:	9300      	str	r3, [sp, #0]
    2072:	9301      	str	r3, [sp, #4]
	static struct fs_dirent entry;

	fs_dir_t_init(&dirp);

	/* Verify fs_opendir() */
	res = fs_opendir(&dirp, path);
    2074:	4601      	mov	r1, r0
    2076:	4668      	mov	r0, sp
    2078:	f004 fb84 	bl	6784 <fs_opendir>
	if (res) {
    207c:	b920      	cbnz	r0, 2088 <lsdir+0x20>
		printk("Error opening dir %s [%d]\n", path, res);
		return res;
	}

	printk("\nListing dir %s ...\n", path);
    207e:	4629      	mov	r1, r5
    2080:	4814      	ldr	r0, [pc, #80]	; (20d4 <lsdir+0x6c>)
    2082:	f00e ffd1 	bl	11028 <printk>
    2086:	e00d      	b.n	20a4 <lsdir+0x3c>
    2088:	4604      	mov	r4, r0
		printk("Error opening dir %s [%d]\n", path, res);
    208a:	4602      	mov	r2, r0
    208c:	4629      	mov	r1, r5
    208e:	4812      	ldr	r0, [pc, #72]	; (20d8 <lsdir+0x70>)
    2090:	f00e ffca 	bl	11028 <printk>
		return res;
    2094:	e01b      	b.n	20ce <lsdir+0x66>
		}

		if (entry.type == FS_DIR_ENTRY_DIR) {
			printk("[DIR ] %s\n", entry.name);
		} else {
			printk("[FILE] %s (size = %zu)\n",
    2096:	4911      	ldr	r1, [pc, #68]	; (20dc <lsdir+0x74>)
    2098:	f8d1 2104 	ldr.w	r2, [r1, #260]	; 0x104
    209c:	3101      	adds	r1, #1
    209e:	4810      	ldr	r0, [pc, #64]	; (20e0 <lsdir+0x78>)
    20a0:	f00e ffc2 	bl	11028 <printk>
		res = fs_readdir(&dirp, &entry);
    20a4:	490d      	ldr	r1, [pc, #52]	; (20dc <lsdir+0x74>)
    20a6:	4668      	mov	r0, sp
    20a8:	f004 fc02 	bl	68b0 <fs_readdir>
		if (res || entry.name[0] == 0) {
    20ac:	4604      	mov	r4, r0
    20ae:	b958      	cbnz	r0, 20c8 <lsdir+0x60>
    20b0:	4b0a      	ldr	r3, [pc, #40]	; (20dc <lsdir+0x74>)
    20b2:	785b      	ldrb	r3, [r3, #1]
    20b4:	b143      	cbz	r3, 20c8 <lsdir+0x60>
		if (entry.type == FS_DIR_ENTRY_DIR) {
    20b6:	4b09      	ldr	r3, [pc, #36]	; (20dc <lsdir+0x74>)
    20b8:	781b      	ldrb	r3, [r3, #0]
    20ba:	2b01      	cmp	r3, #1
    20bc:	d1eb      	bne.n	2096 <lsdir+0x2e>
			printk("[DIR ] %s\n", entry.name);
    20be:	4909      	ldr	r1, [pc, #36]	; (20e4 <lsdir+0x7c>)
    20c0:	4809      	ldr	r0, [pc, #36]	; (20e8 <lsdir+0x80>)
    20c2:	f00e ffb1 	bl	11028 <printk>
    20c6:	e7ed      	b.n	20a4 <lsdir+0x3c>
				entry.name, entry.size);
		}
	}

	/* Verify fs_closedir() */
	fs_closedir(&dirp);
    20c8:	4668      	mov	r0, sp
    20ca:	f004 fc7d 	bl	69c8 <fs_closedir>

	return res;
}
    20ce:	4620      	mov	r0, r4
    20d0:	b003      	add	sp, #12
    20d2:	bd30      	pop	{r4, r5, pc}
    20d4:	000159b8 	.word	0x000159b8
    20d8:	0001599c 	.word	0x0001599c
    20dc:	20000670 	.word	0x20000670
    20e0:	000159dc 	.word	0x000159dc
    20e4:	20000671 	.word	0x20000671
    20e8:	000159d0 	.word	0x000159d0

000020ec <clocks_start>:

	return 0;
}

int clocks_start(void)
{
    20ec:	b510      	push	{r4, lr}
    20ee:	b084      	sub	sp, #16
	int err;
	int res;
	struct onoff_manager *clk_mgr;
	struct onoff_client clk_cli;

	clk_mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    20f0:	2000      	movs	r0, #0
    20f2:	f005 fdef 	bl	7cd4 <z_nrf_clock_control_get_onoff>
	if (!clk_mgr) {
    20f6:	b320      	cbz	r0, 2142 <clocks_start+0x56>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    20f8:	2300      	movs	r3, #0
    20fa:	9301      	str	r3, [sp, #4]
    20fc:	9303      	str	r3, [sp, #12]
    20fe:	2301      	movs	r3, #1
    2100:	9302      	str	r3, [sp, #8]
		return -ENXIO;
	}

	sys_notify_init_spinwait(&clk_cli.notify);

	err = onoff_request(clk_mgr, &clk_cli);
    2102:	4669      	mov	r1, sp
    2104:	f000 fe9e 	bl	2e44 <onoff_request>
	if (err < 0) {
    2108:	1e04      	subs	r4, r0, #0
    210a:	db2d      	blt.n	2168 <clocks_start+0x7c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    210c:	9b02      	ldr	r3, [sp, #8]
	if (sys_notify_get_method(notify) == SYS_NOTIFY_METHOD_COMPLETED) {
    210e:	f013 0f03 	tst.w	r3, #3
    2112:	d13b      	bne.n	218c <clocks_start+0xa0>
		*result = notify->result;
    2114:	9c03      	ldr	r4, [sp, #12]
		return err;
	}

	do {
		err = sys_notify_fetch_result(&clk_cli.notify, &res);
		if (!err && res) {
    2116:	2c00      	cmp	r4, #0
    2118:	d03a      	beq.n	2190 <clocks_start+0xa4>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    211a:	4b27      	ldr	r3, [pc, #156]	; (21b8 <clocks_start+0xcc>)
    211c:	4a27      	ldr	r2, [pc, #156]	; (21bc <clocks_start+0xd0>)
    211e:	1a9b      	subs	r3, r3, r2
    2120:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Clock could not be started: %d", res);
    2122:	f04f 0200 	mov.w	r2, #0
    2126:	2101      	movs	r1, #1
    2128:	f361 0202 	bfi	r2, r1, #0, #3
    212c:	f36f 02c5 	bfc	r2, #3, #3
    2130:	f363 128f 	bfi	r2, r3, #6, #10
    2134:	4621      	mov	r1, r4
    2136:	4822      	ldr	r0, [pc, #136]	; (21c0 <clocks_start+0xd4>)
    2138:	f002 faba 	bl	46b0 <log_1>
		}
	} while (err);

	LOG_DBG("HF clock started");
	return 0;
}
    213c:	4620      	mov	r0, r4
    213e:	b004      	add	sp, #16
    2140:	bd10      	pop	{r4, pc}
    2142:	4b1d      	ldr	r3, [pc, #116]	; (21b8 <clocks_start+0xcc>)
    2144:	4a1d      	ldr	r2, [pc, #116]	; (21bc <clocks_start+0xd0>)
    2146:	1a9b      	subs	r3, r3, r2
    2148:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to get the Clock manager");
    214a:	f04f 0100 	mov.w	r1, #0
    214e:	2201      	movs	r2, #1
    2150:	f362 0102 	bfi	r1, r2, #0, #3
    2154:	f36f 01c5 	bfc	r1, #3, #3
    2158:	f363 118f 	bfi	r1, r3, #6, #10
    215c:	4819      	ldr	r0, [pc, #100]	; (21c4 <clocks_start+0xd8>)
    215e:	f002 fb79 	bl	4854 <log_0>
		return -ENXIO;
    2162:	f06f 0405 	mvn.w	r4, #5
    2166:	e7e9      	b.n	213c <clocks_start+0x50>
    2168:	4b13      	ldr	r3, [pc, #76]	; (21b8 <clocks_start+0xcc>)
    216a:	4a14      	ldr	r2, [pc, #80]	; (21bc <clocks_start+0xd0>)
    216c:	1a9b      	subs	r3, r3, r2
    216e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Clock request failed: %d", err);
    2170:	f04f 0200 	mov.w	r2, #0
    2174:	2101      	movs	r1, #1
    2176:	f361 0202 	bfi	r2, r1, #0, #3
    217a:	f36f 02c5 	bfc	r2, #3, #3
    217e:	f363 128f 	bfi	r2, r3, #6, #10
    2182:	4621      	mov	r1, r4
    2184:	4810      	ldr	r0, [pc, #64]	; (21c8 <clocks_start+0xdc>)
    2186:	f002 fa93 	bl	46b0 <log_1>
		return err;
    218a:	e7d7      	b.n	213c <clocks_start+0x50>
	int rv = -EAGAIN;
    218c:	f06f 040a 	mvn.w	r4, #10
	} while (err);
    2190:	2c00      	cmp	r4, #0
    2192:	d1bb      	bne.n	210c <clocks_start+0x20>
    2194:	4b08      	ldr	r3, [pc, #32]	; (21b8 <clocks_start+0xcc>)
    2196:	4a09      	ldr	r2, [pc, #36]	; (21bc <clocks_start+0xd0>)
    2198:	1a9b      	subs	r3, r3, r2
    219a:	08db      	lsrs	r3, r3, #3
	LOG_DBG("HF clock started");
    219c:	f04f 0200 	mov.w	r2, #0
    21a0:	2104      	movs	r1, #4
    21a2:	f361 0202 	bfi	r2, r1, #0, #3
    21a6:	f36f 02c5 	bfc	r2, #3, #3
    21aa:	f363 128f 	bfi	r2, r3, #6, #10
    21ae:	4907      	ldr	r1, [pc, #28]	; (21cc <clocks_start+0xe0>)
    21b0:	4807      	ldr	r0, [pc, #28]	; (21d0 <clocks_start+0xe4>)
    21b2:	f002 fa7d 	bl	46b0 <log_1>
	return 0;
    21b6:	e7c1      	b.n	213c <clocks_start+0x50>
    21b8:	00015774 	.word	0x00015774
    21bc:	00015774 	.word	0x00015774
    21c0:	00015a30 	.word	0x00015a30
    21c4:	000159f4 	.word	0x000159f4
    21c8:	00015a14 	.word	0x00015a14
    21cc:	00015b70 	.word	0x00015b70
    21d0:	00015a50 	.word	0x00015a50

000021d4 <main>:
/*****BMX160 IMU SPI*****/

  

void main(void)
{
    21d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    21d6:	b083      	sub	sp, #12
	int err;
	int len;
	char* data;
	data = (char*)malloc(64 * sizeof(char));
    21d8:	2040      	movs	r0, #64	; 0x40
    21da:	f00e f8cb 	bl	10374 <malloc>

	err = clocks_start();
    21de:	f7ff ff85 	bl	20ec <clocks_start>
 	if (err) {
    21e2:	b108      	cbz	r0, 21e8 <main+0x14>

		
    // Sleep and wait for next cycle
	k_sleep(K_MSEC(6.25));
	}
}
    21e4:	b003      	add	sp, #12
    21e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21e8:	4606      	mov	r6, r0
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    21ea:	48a2      	ldr	r0, [pc, #648]	; (2474 <main+0x2a0>)
    21ec:	f00b fc38 	bl	da60 <z_impl_device_get_binding>
	if (device_get_binding("SPI_1") == NULL) {
    21f0:	2800      	cmp	r0, #0
    21f2:	d075      	beq.n	22e0 <main+0x10c>
		if (disk_access_init(disk_pdrv) != 0) {
    21f4:	48a0      	ldr	r0, [pc, #640]	; (2478 <main+0x2a4>)
    21f6:	f00f fb8a 	bl	1190e <disk_access_init>
    21fa:	2800      	cmp	r0, #0
    21fc:	d075      	beq.n	22ea <main+0x116>
    21fe:	4b9f      	ldr	r3, [pc, #636]	; (247c <main+0x2a8>)
    2200:	4a9f      	ldr	r2, [pc, #636]	; (2480 <main+0x2ac>)
    2202:	1a9b      	subs	r3, r3, r2
    2204:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Storage init ERROR!");
    2206:	f04f 0100 	mov.w	r1, #0
    220a:	2201      	movs	r2, #1
    220c:	f362 0102 	bfi	r1, r2, #0, #3
    2210:	f36f 01c5 	bfc	r1, #3, #3
    2214:	f363 118f 	bfi	r1, r3, #6, #10
    2218:	489a      	ldr	r0, [pc, #616]	; (2484 <main+0x2b0>)
    221a:	f002 fb1b 	bl	4854 <log_0>
	mp.mnt_point = disk_mount_pt;
    221e:	489a      	ldr	r0, [pc, #616]	; (2488 <main+0x2b4>)
    2220:	4b9a      	ldr	r3, [pc, #616]	; (248c <main+0x2b8>)
    2222:	60c3      	str	r3, [r0, #12]
	int res = fs_mount(&mp);
    2224:	f004 fbfe 	bl	6a24 <fs_mount>
	if (res == FR_OK) {
    2228:	2800      	cmp	r0, #0
    222a:	f040 80ac 	bne.w	2386 <main+0x1b2>
		printk("Disk mounted.\n");
    222e:	4898      	ldr	r0, [pc, #608]	; (2490 <main+0x2bc>)
    2230:	f00e fefa 	bl	11028 <printk>
		lsdir(disk_mount_pt);
    2234:	4895      	ldr	r0, [pc, #596]	; (248c <main+0x2b8>)
    2236:	f7ff ff17 	bl	2068 <lsdir>
	*zfp = (struct fs_file_t){ 0 };
    223a:	4b96      	ldr	r3, [pc, #600]	; (2494 <main+0x2c0>)
    223c:	2200      	movs	r2, #0
    223e:	601a      	str	r2, [r3, #0]
    2240:	605a      	str	r2, [r3, #4]
    2242:	609a      	str	r2, [r3, #8]
	snprintf(filename, sizeof(filename), "%s/test.txt", mp.mnt_point);
    2244:	4b90      	ldr	r3, [pc, #576]	; (2488 <main+0x2b4>)
    2246:	68db      	ldr	r3, [r3, #12]
    2248:	4a93      	ldr	r2, [pc, #588]	; (2498 <main+0x2c4>)
    224a:	21ff      	movs	r1, #255	; 0xff
    224c:	4893      	ldr	r0, [pc, #588]	; (249c <main+0x2c8>)
    224e:	f00e fca1 	bl	10b94 <sniprintf>
    2252:	4893      	ldr	r0, [pc, #588]	; (24a0 <main+0x2cc>)
    2254:	f00b fc04 	bl	da60 <z_impl_device_get_binding>
	bmxIMU_spi.gpio0_dev= device_get_binding("GPIO_0");
    2258:	4c92      	ldr	r4, [pc, #584]	; (24a4 <main+0x2d0>)
    225a:	6160      	str	r0, [r4, #20]
	gpio_pin_configure(bmxIMU_spi.gpio0_dev, bmxIMU_spi.spi_cs_pin, GPIO_OUTPUT | GPIO_ACTIVE_LOW);
    225c:	7c21      	ldrb	r1, [r4, #16]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    225e:	f240 2201 	movw	r2, #513	; 0x201
    2262:	f7ff fe53 	bl	1f0c <z_impl_gpio_pin_configure>
    2266:	4890      	ldr	r0, [pc, #576]	; (24a8 <main+0x2d4>)
    2268:	f00b fbfa 	bl	da60 <z_impl_device_get_binding>
	bmxIMU_spi.spi_dev = device_get_binding(spiName0);
    226c:	60e0      	str	r0, [r4, #12]
	if (bmxIMU_spi.spi_dev == NULL) {
    226e:	2800      	cmp	r0, #0
    2270:	f000 808d 	beq.w	238e <main+0x1ba>
		printk("Got SPI device\n");
    2274:	488d      	ldr	r0, [pc, #564]	; (24ac <main+0x2d8>)
    2276:	f00e fed7 	bl	11028 <printk>
	begin_bmx160(&bmxIMU_spi);
    227a:	488a      	ldr	r0, [pc, #552]	; (24a4 <main+0x2d0>)
    227c:	f00e fe46 	bl	10f0c <begin_bmx160>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    2280:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2284:	2100      	movs	r1, #0
    2286:	f00d fb73 	bl	f970 <z_impl_k_sleep>
    228a:	4c85      	ldr	r4, [pc, #532]	; (24a0 <main+0x2cc>)
    228c:	4620      	mov	r0, r4
    228e:	f00b fbe7 	bl	da60 <z_impl_device_get_binding>
    2292:	f240 2201 	movw	r2, #513	; 0x201
    2296:	2107      	movs	r1, #7
    2298:	f7ff fe38 	bl	1f0c <z_impl_gpio_pin_configure>
    229c:	4620      	mov	r0, r4
    229e:	f00b fbdf 	bl	da60 <z_impl_device_get_binding>
    22a2:	4604      	mov	r4, r0
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
	const struct gpio_driver_config *const cfg =
    22a4:	6843      	ldr	r3, [r0, #4]
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
    22a6:	6907      	ldr	r7, [r0, #16]
			(const struct gpio_driver_data *)port->data;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    22a8:	681b      	ldr	r3, [r3, #0]
    22aa:	f013 0f80 	tst.w	r3, #128	; 0x80
    22ae:	d073      	beq.n	2398 <main+0x1c4>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    22b0:	683b      	ldr	r3, [r7, #0]
    22b2:	f013 0f80 	tst.w	r3, #128	; 0x80
    22b6:	d17c      	bne.n	23b2 <main+0x1de>
    22b8:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
    22ba:	6863      	ldr	r3, [r4, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    22bc:	681b      	ldr	r3, [r3, #0]
    22be:	f013 0f80 	tst.w	r3, #128	; 0x80
    22c2:	d078      	beq.n	23b6 <main+0x1e2>
	if (value != 0)	{
    22c4:	2d00      	cmp	r5, #0
    22c6:	f000 8083 	beq.w	23d0 <main+0x1fc>
	const struct gpio_driver_api *api =
    22ca:	68a3      	ldr	r3, [r4, #8]
	return api->port_set_bits_raw(port, pins);
    22cc:	68db      	ldr	r3, [r3, #12]
    22ce:	2180      	movs	r1, #128	; 0x80
    22d0:	4620      	mov	r0, r4
    22d2:	4798      	blx	r3
    22d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    22d8:	2100      	movs	r1, #0
    22da:	f00d fb49 	bl	f970 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    22de:	e0a2      	b.n	2426 <main+0x252>
		printk("Could not get %s device\n", "SPI_1");
    22e0:	4964      	ldr	r1, [pc, #400]	; (2474 <main+0x2a0>)
    22e2:	4873      	ldr	r0, [pc, #460]	; (24b0 <main+0x2dc>)
    22e4:	f00e fea0 	bl	11028 <printk>
		return;
    22e8:	e77c      	b.n	21e4 <main+0x10>
		if (disk_access_ioctl(disk_pdrv,
    22ea:	466a      	mov	r2, sp
    22ec:	2101      	movs	r1, #1
    22ee:	4862      	ldr	r0, [pc, #392]	; (2478 <main+0x2a4>)
    22f0:	f00f fb6f 	bl	119d2 <disk_access_ioctl>
    22f4:	b180      	cbz	r0, 2318 <main+0x144>
    22f6:	4b61      	ldr	r3, [pc, #388]	; (247c <main+0x2a8>)
    22f8:	4a61      	ldr	r2, [pc, #388]	; (2480 <main+0x2ac>)
    22fa:	1a9b      	subs	r3, r3, r2
    22fc:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Unable to get sector count");
    22fe:	f04f 0100 	mov.w	r1, #0
    2302:	2201      	movs	r2, #1
    2304:	f362 0102 	bfi	r1, r2, #0, #3
    2308:	f36f 01c5 	bfc	r1, #3, #3
    230c:	f363 118f 	bfi	r1, r3, #6, #10
    2310:	4868      	ldr	r0, [pc, #416]	; (24b4 <main+0x2e0>)
    2312:	f002 fa9f 	bl	4854 <log_0>
    2316:	e782      	b.n	221e <main+0x4a>
    2318:	4b58      	ldr	r3, [pc, #352]	; (247c <main+0x2a8>)
    231a:	4a59      	ldr	r2, [pc, #356]	; (2480 <main+0x2ac>)
    231c:	1a9b      	subs	r3, r3, r2
    231e:	08db      	lsrs	r3, r3, #3
		LOG_INF("Block count %u", block_count);
    2320:	f04f 0200 	mov.w	r2, #0
    2324:	2103      	movs	r1, #3
    2326:	f361 0202 	bfi	r2, r1, #0, #3
    232a:	f36f 02c5 	bfc	r2, #3, #3
    232e:	f363 128f 	bfi	r2, r3, #6, #10
    2332:	9900      	ldr	r1, [sp, #0]
    2334:	4860      	ldr	r0, [pc, #384]	; (24b8 <main+0x2e4>)
    2336:	f002 f9bb 	bl	46b0 <log_1>
		if (disk_access_ioctl(disk_pdrv,
    233a:	aa01      	add	r2, sp, #4
    233c:	2102      	movs	r1, #2
    233e:	484e      	ldr	r0, [pc, #312]	; (2478 <main+0x2a4>)
    2340:	f00f fb47 	bl	119d2 <disk_access_ioctl>
    2344:	b180      	cbz	r0, 2368 <main+0x194>
    2346:	4b4d      	ldr	r3, [pc, #308]	; (247c <main+0x2a8>)
    2348:	4a4d      	ldr	r2, [pc, #308]	; (2480 <main+0x2ac>)
    234a:	1a9b      	subs	r3, r3, r2
    234c:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Unable to get sector size");
    234e:	f04f 0100 	mov.w	r1, #0
    2352:	2201      	movs	r2, #1
    2354:	f362 0102 	bfi	r1, r2, #0, #3
    2358:	f36f 01c5 	bfc	r1, #3, #3
    235c:	f363 118f 	bfi	r1, r3, #6, #10
    2360:	4856      	ldr	r0, [pc, #344]	; (24bc <main+0x2e8>)
    2362:	f002 fa77 	bl	4854 <log_0>
    2366:	e75a      	b.n	221e <main+0x4a>
		printk("Sector size %u\n", block_size);
    2368:	9901      	ldr	r1, [sp, #4]
    236a:	4855      	ldr	r0, [pc, #340]	; (24c0 <main+0x2ec>)
    236c:	f00e fe5c 	bl	11028 <printk>
		memory_size_mb = (uint64_t)block_count * block_size;
    2370:	9800      	ldr	r0, [sp, #0]
    2372:	9b01      	ldr	r3, [sp, #4]
    2374:	fba0 0103 	umull	r0, r1, r0, r3
		printk("Memory Size(MB) %u\n", (uint32_t)(memory_size_mb >> 20));
    2378:	0d03      	lsrs	r3, r0, #20
    237a:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    237e:	4851      	ldr	r0, [pc, #324]	; (24c4 <main+0x2f0>)
    2380:	f00e fe52 	bl	11028 <printk>
    2384:	e74b      	b.n	221e <main+0x4a>
		printk("Error mounting disk.\n");
    2386:	4850      	ldr	r0, [pc, #320]	; (24c8 <main+0x2f4>)
    2388:	f00e fe4e 	bl	11028 <printk>
    238c:	e755      	b.n	223a <main+0x66>
		printk("Could not get %s device\n", spiName0);
    238e:	4946      	ldr	r1, [pc, #280]	; (24a8 <main+0x2d4>)
    2390:	4847      	ldr	r0, [pc, #284]	; (24b0 <main+0x2dc>)
    2392:	f00e fe49 	bl	11028 <printk>
		return;
    2396:	e725      	b.n	21e4 <main+0x10>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    2398:	4d4c      	ldr	r5, [pc, #304]	; (24cc <main+0x2f8>)
    239a:	f240 42bb 	movw	r2, #1211	; 0x4bb
    239e:	4629      	mov	r1, r5
    23a0:	484b      	ldr	r0, [pc, #300]	; (24d0 <main+0x2fc>)
    23a2:	f00e fe41 	bl	11028 <printk>
    23a6:	f240 41bb 	movw	r1, #1211	; 0x4bb
    23aa:	4628      	mov	r0, r5
    23ac:	f00e ff5e 	bl	1126c <assert_post_action>
    23b0:	e77e      	b.n	22b0 <main+0xdc>
		value = (value != 0) ? 0 : 1;
    23b2:	4635      	mov	r5, r6
    23b4:	e781      	b.n	22ba <main+0xe6>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    23b6:	4f45      	ldr	r7, [pc, #276]	; (24cc <main+0x2f8>)
    23b8:	f240 4291 	movw	r2, #1169	; 0x491
    23bc:	4639      	mov	r1, r7
    23be:	4844      	ldr	r0, [pc, #272]	; (24d0 <main+0x2fc>)
    23c0:	f00e fe32 	bl	11028 <printk>
    23c4:	f240 4191 	movw	r1, #1169	; 0x491
    23c8:	4638      	mov	r0, r7
    23ca:	f00e ff4f 	bl	1126c <assert_post_action>
    23ce:	e779      	b.n	22c4 <main+0xf0>
	const struct gpio_driver_api *api =
    23d0:	68a3      	ldr	r3, [r4, #8]
	return api->port_clear_bits_raw(port, pins);
    23d2:	691b      	ldr	r3, [r3, #16]
    23d4:	2180      	movs	r1, #128	; 0x80
    23d6:	4620      	mov	r0, r4
    23d8:	4798      	blx	r3
    23da:	e77b      	b.n	22d4 <main+0x100>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    23dc:	4f3b      	ldr	r7, [pc, #236]	; (24cc <main+0x2f8>)
    23de:	f240 42bb 	movw	r2, #1211	; 0x4bb
    23e2:	4639      	mov	r1, r7
    23e4:	483a      	ldr	r0, [pc, #232]	; (24d0 <main+0x2fc>)
    23e6:	f00e fe1f 	bl	11028 <printk>
    23ea:	f240 41bb 	movw	r1, #1211	; 0x4bb
    23ee:	4638      	mov	r0, r7
    23f0:	f00e ff3c 	bl	1126c <assert_post_action>
    23f4:	e02c      	b.n	2450 <main+0x27c>
		value = (value != 0) ? 0 : 1;
    23f6:	2501      	movs	r5, #1
    23f8:	e02f      	b.n	245a <main+0x286>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    23fa:	4f34      	ldr	r7, [pc, #208]	; (24cc <main+0x2f8>)
    23fc:	f240 4291 	movw	r2, #1169	; 0x491
    2400:	4639      	mov	r1, r7
    2402:	4833      	ldr	r0, [pc, #204]	; (24d0 <main+0x2fc>)
    2404:	f00e fe10 	bl	11028 <printk>
    2408:	f240 4191 	movw	r1, #1169	; 0x491
    240c:	4638      	mov	r0, r7
    240e:	f00e ff2d 	bl	1126c <assert_post_action>
    2412:	e027      	b.n	2464 <main+0x290>
	const struct gpio_driver_api *api =
    2414:	68a3      	ldr	r3, [r4, #8]
	return api->port_clear_bits_raw(port, pins);
    2416:	691b      	ldr	r3, [r3, #16]
    2418:	2180      	movs	r1, #128	; 0x80
    241a:	4620      	mov	r0, r4
    241c:	4798      	blx	r3
    241e:	20c5      	movs	r0, #197	; 0xc5
    2420:	2100      	movs	r1, #0
    2422:	f00d faa5 	bl	f970 <z_impl_k_sleep>
	err = getData_bmx160(&bmxIMU_spi, &bmx160_data);
    2426:	4c2b      	ldr	r4, [pc, #172]	; (24d4 <main+0x300>)
    2428:	4621      	mov	r1, r4
    242a:	481e      	ldr	r0, [pc, #120]	; (24a4 <main+0x2d0>)
    242c:	f000 fa06 	bl	283c <getData_bmx160>
	if (bmx160_data.gx == BMX160_OK)
    2430:	2100      	movs	r1, #0
    2432:	68e0      	ldr	r0, [r4, #12]
    2434:	f7fe fd9c 	bl	f70 <__aeabi_fcmpeq>
    2438:	2800      	cmp	r0, #0
    243a:	d0f0      	beq.n	241e <main+0x24a>
    243c:	4818      	ldr	r0, [pc, #96]	; (24a0 <main+0x2cc>)
    243e:	f00b fb0f 	bl	da60 <z_impl_device_get_binding>
    2442:	4604      	mov	r4, r0
	const struct gpio_driver_config *const cfg =
    2444:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
    2446:	6905      	ldr	r5, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    2448:	681b      	ldr	r3, [r3, #0]
    244a:	f013 0f80 	tst.w	r3, #128	; 0x80
    244e:	d0c5      	beq.n	23dc <main+0x208>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    2450:	682b      	ldr	r3, [r5, #0]
    2452:	f013 0f80 	tst.w	r3, #128	; 0x80
    2456:	d1ce      	bne.n	23f6 <main+0x222>
    2458:	4635      	mov	r5, r6
	const struct gpio_driver_config *const cfg =
    245a:	6863      	ldr	r3, [r4, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    245c:	681b      	ldr	r3, [r3, #0]
    245e:	f013 0f80 	tst.w	r3, #128	; 0x80
    2462:	d0ca      	beq.n	23fa <main+0x226>
	if (value != 0)	{
    2464:	2d00      	cmp	r5, #0
    2466:	d0d5      	beq.n	2414 <main+0x240>
	const struct gpio_driver_api *api =
    2468:	68a3      	ldr	r3, [r4, #8]
	return api->port_set_bits_raw(port, pins);
    246a:	68db      	ldr	r3, [r3, #12]
    246c:	2180      	movs	r1, #128	; 0x80
    246e:	4620      	mov	r0, r4
    2470:	4798      	blx	r3
    2472:	e7d4      	b.n	241e <main+0x24a>
    2474:	00015a68 	.word	0x00015a68
    2478:	00015a8c 	.word	0x00015a8c
    247c:	00015774 	.word	0x00015774
    2480:	00015774 	.word	0x00015774
    2484:	00015a90 	.word	0x00015a90
    2488:	20000018 	.word	0x20000018
    248c:	00015b10 	.word	0x00015b10
    2490:	00015b18 	.word	0x00015b18
    2494:	200009b4 	.word	0x200009b4
    2498:	00015b40 	.word	0x00015b40
    249c:	200009c0 	.word	0x200009c0
    24a0:	00015b4c 	.word	0x00015b4c
    24a4:	20000000 	.word	0x20000000
    24a8:	00015b54 	.word	0x00015b54
    24ac:	00015b5c 	.word	0x00015b5c
    24b0:	00015a70 	.word	0x00015a70
    24b4:	00015aa4 	.word	0x00015aa4
    24b8:	00015ac0 	.word	0x00015ac0
    24bc:	00015ad0 	.word	0x00015ad0
    24c0:	00015aec 	.word	0x00015aec
    24c4:	00015afc 	.word	0x00015afc
    24c8:	00015b28 	.word	0x00015b28
    24cc:	00015958 	.word	0x00015958
    24d0:	00015984 	.word	0x00015984
    24d4:	20000658 	.word	0x20000658

000024d8 <writeReg_bmx160>:

    return result;
}

int writeReg_bmx160(bmx160_spi * bmxIMU_spi_p, uint8_t reg, uint8_t data)
{
    24d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    24dc:	b089      	sub	sp, #36	; 0x24
    24de:	4604      	mov	r4, r0
    24e0:	f88d 1007 	strb.w	r1, [sp, #7]
    24e4:	f88d 2006 	strb.w	r2, [sp, #6]
    int result;
	const struct spi_buf buf[2] = {
    24e8:	f10d 0307 	add.w	r3, sp, #7
    24ec:	9304      	str	r3, [sp, #16]
    24ee:	2501      	movs	r5, #1
    24f0:	9505      	str	r5, [sp, #20]
    24f2:	f10d 0206 	add.w	r2, sp, #6
    24f6:	9206      	str	r2, [sp, #24]
    24f8:	9507      	str	r5, [sp, #28]
		{
			.buf = &data,
			.len = 1,
		}
	};
	const struct spi_buf_set tx = {
    24fa:	aa04      	add	r2, sp, #16
    24fc:	9202      	str	r2, [sp, #8]
    24fe:	2202      	movs	r2, #2
    2500:	9203      	str	r2, [sp, #12]
		.buffers = buf,
		.count = 2,
	};
	gpio_pin_set(bmxIMU_spi_p->gpio0_dev, bmxIMU_spi_p->spi_cs_pin, 1);
    2502:	6946      	ldr	r6, [r0, #20]
    2504:	f890 8010 	ldrb.w	r8, [r0, #16]
	const struct gpio_driver_config *const cfg =
    2508:	6872      	ldr	r2, [r6, #4]
	const struct gpio_driver_data *const data =
    250a:	6937      	ldr	r7, [r6, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    250c:	6812      	ldr	r2, [r2, #0]
    250e:	fa05 f508 	lsl.w	r5, r5, r8
    2512:	422a      	tst	r2, r5
    2514:	d01d      	beq.n	2552 <writeReg_bmx160+0x7a>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    2516:	683b      	ldr	r3, [r7, #0]
    2518:	421d      	tst	r5, r3
    251a:	d128      	bne.n	256e <writeReg_bmx160+0x96>
    251c:	2701      	movs	r7, #1
	const struct gpio_driver_config *const cfg =
    251e:	6873      	ldr	r3, [r6, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    2520:	681b      	ldr	r3, [r3, #0]
    2522:	2501      	movs	r5, #1
    2524:	fa05 f508 	lsl.w	r5, r5, r8
    2528:	422b      	tst	r3, r5
    252a:	d022      	beq.n	2572 <writeReg_bmx160+0x9a>
	if (value != 0)	{
    252c:	b37f      	cbz	r7, 258e <writeReg_bmx160+0xb6>
	const struct gpio_driver_api *api =
    252e:	68b3      	ldr	r3, [r6, #8]
	return api->port_set_bits_raw(port, pins);
    2530:	68db      	ldr	r3, [r3, #12]
    2532:	4629      	mov	r1, r5
    2534:	4630      	mov	r0, r6
    2536:	4798      	blx	r3

	//result = spi_write_dt(bus, &tx);
	result = spi_write(bmxIMU_spi_p->spi_dev, &bmxIMU_spi_p->spi_cfg, &tx);
    2538:	68e0      	ldr	r0, [r4, #12]
static inline int z_impl_spi_transceive(const struct device *dev,
					const struct spi_config *config,
					const struct spi_buf_set *tx_bufs,
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
    253a:	6883      	ldr	r3, [r0, #8]
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
    253c:	681d      	ldr	r5, [r3, #0]
    253e:	2300      	movs	r3, #0
    2540:	aa02      	add	r2, sp, #8
    2542:	4621      	mov	r1, r4
    2544:	47a8      	blx	r5
	if (result) 
    2546:	4607      	mov	r7, r0
    2548:	b338      	cbz	r0, 259a <writeReg_bmx160+0xc2>
        return result;
		//printk("SPI error: %d\n", result);
	}
    gpio_pin_set(bmxIMU_spi_p->gpio0_dev, bmxIMU_spi_p->spi_cs_pin, 0);
    return 0;
}
    254a:	4638      	mov	r0, r7
    254c:	b009      	add	sp, #36	; 0x24
    254e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    2552:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 2620 <writeReg_bmx160+0x148>
    2556:	f240 42bb 	movw	r2, #1211	; 0x4bb
    255a:	4649      	mov	r1, r9
    255c:	482f      	ldr	r0, [pc, #188]	; (261c <writeReg_bmx160+0x144>)
    255e:	f00e fd63 	bl	11028 <printk>
    2562:	f240 41bb 	movw	r1, #1211	; 0x4bb
    2566:	4648      	mov	r0, r9
    2568:	f00e fe80 	bl	1126c <assert_post_action>
    256c:	e7d3      	b.n	2516 <writeReg_bmx160+0x3e>
		value = (value != 0) ? 0 : 1;
    256e:	2700      	movs	r7, #0
    2570:	e7d5      	b.n	251e <writeReg_bmx160+0x46>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    2572:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 2620 <writeReg_bmx160+0x148>
    2576:	f240 4291 	movw	r2, #1169	; 0x491
    257a:	4641      	mov	r1, r8
    257c:	4827      	ldr	r0, [pc, #156]	; (261c <writeReg_bmx160+0x144>)
    257e:	f00e fd53 	bl	11028 <printk>
    2582:	f240 4191 	movw	r1, #1169	; 0x491
    2586:	4640      	mov	r0, r8
    2588:	f00e fe70 	bl	1126c <assert_post_action>
    258c:	e7ce      	b.n	252c <writeReg_bmx160+0x54>
	const struct gpio_driver_api *api =
    258e:	68b3      	ldr	r3, [r6, #8]
	return api->port_clear_bits_raw(port, pins);
    2590:	691b      	ldr	r3, [r3, #16]
    2592:	4629      	mov	r1, r5
    2594:	4630      	mov	r0, r6
    2596:	4798      	blx	r3
    2598:	e7ce      	b.n	2538 <writeReg_bmx160+0x60>
    gpio_pin_set(bmxIMU_spi_p->gpio0_dev, bmxIMU_spi_p->spi_cs_pin, 0);
    259a:	6965      	ldr	r5, [r4, #20]
    259c:	f894 8010 	ldrb.w	r8, [r4, #16]
	const struct gpio_driver_config *const cfg =
    25a0:	686b      	ldr	r3, [r5, #4]
	const struct gpio_driver_data *const data =
    25a2:	692c      	ldr	r4, [r5, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    25a4:	681b      	ldr	r3, [r3, #0]
    25a6:	2601      	movs	r6, #1
    25a8:	fa06 f608 	lsl.w	r6, r6, r8
    25ac:	4233      	tst	r3, r6
    25ae:	d011      	beq.n	25d4 <writeReg_bmx160+0xfc>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    25b0:	6823      	ldr	r3, [r4, #0]
    25b2:	421e      	tst	r6, r3
    25b4:	d11c      	bne.n	25f0 <writeReg_bmx160+0x118>
    25b6:	463e      	mov	r6, r7
	const struct gpio_driver_config *const cfg =
    25b8:	686b      	ldr	r3, [r5, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    25ba:	681b      	ldr	r3, [r3, #0]
    25bc:	2401      	movs	r4, #1
    25be:	fa04 f408 	lsl.w	r4, r4, r8
    25c2:	4223      	tst	r3, r4
    25c4:	d016      	beq.n	25f4 <writeReg_bmx160+0x11c>
	if (value != 0)	{
    25c6:	b31e      	cbz	r6, 2610 <writeReg_bmx160+0x138>
	const struct gpio_driver_api *api =
    25c8:	68ab      	ldr	r3, [r5, #8]
	return api->port_set_bits_raw(port, pins);
    25ca:	68db      	ldr	r3, [r3, #12]
    25cc:	4621      	mov	r1, r4
    25ce:	4628      	mov	r0, r5
    25d0:	4798      	blx	r3
    25d2:	e7ba      	b.n	254a <writeReg_bmx160+0x72>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    25d4:	f8df 9048 	ldr.w	r9, [pc, #72]	; 2620 <writeReg_bmx160+0x148>
    25d8:	f240 42bb 	movw	r2, #1211	; 0x4bb
    25dc:	4649      	mov	r1, r9
    25de:	480f      	ldr	r0, [pc, #60]	; (261c <writeReg_bmx160+0x144>)
    25e0:	f00e fd22 	bl	11028 <printk>
    25e4:	f240 41bb 	movw	r1, #1211	; 0x4bb
    25e8:	4648      	mov	r0, r9
    25ea:	f00e fe3f 	bl	1126c <assert_post_action>
    25ee:	e7df      	b.n	25b0 <writeReg_bmx160+0xd8>
		value = (value != 0) ? 0 : 1;
    25f0:	2601      	movs	r6, #1
    25f2:	e7e1      	b.n	25b8 <writeReg_bmx160+0xe0>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    25f4:	f8df 8028 	ldr.w	r8, [pc, #40]	; 2620 <writeReg_bmx160+0x148>
    25f8:	f240 4291 	movw	r2, #1169	; 0x491
    25fc:	4641      	mov	r1, r8
    25fe:	4807      	ldr	r0, [pc, #28]	; (261c <writeReg_bmx160+0x144>)
    2600:	f00e fd12 	bl	11028 <printk>
    2604:	f240 4191 	movw	r1, #1169	; 0x491
    2608:	4640      	mov	r0, r8
    260a:	f00e fe2f 	bl	1126c <assert_post_action>
    260e:	e7da      	b.n	25c6 <writeReg_bmx160+0xee>
	const struct gpio_driver_api *api =
    2610:	68ab      	ldr	r3, [r5, #8]
	return api->port_clear_bits_raw(port, pins);
    2612:	691b      	ldr	r3, [r3, #16]
    2614:	4621      	mov	r1, r4
    2616:	4628      	mov	r0, r5
    2618:	4798      	blx	r3
	}

	return gpio_pin_set_raw(port, pin, value);
    261a:	e796      	b.n	254a <writeReg_bmx160+0x72>
    261c:	00015984 	.word	0x00015984
    2620:	00015958 	.word	0x00015958

00002624 <setAccelRange_bmx160>:
{
    2624:	b510      	push	{r4, lr}
    2626:	460c      	mov	r4, r1
    writeReg_bmx160(bmxIMU_spi_p, BMX160_ACC_RANGE_REG, sentVal);
    2628:	460a      	mov	r2, r1
    262a:	2141      	movs	r1, #65	; 0x41
    262c:	f7ff ff54 	bl	24d8 <writeReg_bmx160>
    switch (passVal){
    2630:	3c03      	subs	r4, #3
    2632:	2c09      	cmp	r4, #9
    2634:	d816      	bhi.n	2664 <setAccelRange_bmx160+0x40>
    2636:	e8df f004 	tbb	[pc, r4]
    263a:	1505      	.short	0x1505
    263c:	0d151509 	.word	0x0d151509
    2640:	11151515 	.word	0x11151515
            accelRange = BMX160_ACCEL_MG_LSB_2G * G_CONST;
    2644:	4b09      	ldr	r3, [pc, #36]	; (266c <setAccelRange_bmx160+0x48>)
    2646:	4a0a      	ldr	r2, [pc, #40]	; (2670 <setAccelRange_bmx160+0x4c>)
    2648:	601a      	str	r2, [r3, #0]
}
    264a:	bd10      	pop	{r4, pc}
            accelRange = BMX160_ACCEL_MG_LSB_4G * G_CONST;
    264c:	4b07      	ldr	r3, [pc, #28]	; (266c <setAccelRange_bmx160+0x48>)
    264e:	4a09      	ldr	r2, [pc, #36]	; (2674 <setAccelRange_bmx160+0x50>)
    2650:	601a      	str	r2, [r3, #0]
            break;
    2652:	e7fa      	b.n	264a <setAccelRange_bmx160+0x26>
            accelRange = BMX160_ACCEL_MG_LSB_8G * G_CONST;
    2654:	4b05      	ldr	r3, [pc, #20]	; (266c <setAccelRange_bmx160+0x48>)
    2656:	4a08      	ldr	r2, [pc, #32]	; (2678 <setAccelRange_bmx160+0x54>)
    2658:	601a      	str	r2, [r3, #0]
            break;
    265a:	e7f6      	b.n	264a <setAccelRange_bmx160+0x26>
            accelRange = BMX160_ACCEL_MG_LSB_16G * G_CONST;
    265c:	4b03      	ldr	r3, [pc, #12]	; (266c <setAccelRange_bmx160+0x48>)
    265e:	4a07      	ldr	r2, [pc, #28]	; (267c <setAccelRange_bmx160+0x58>)
    2660:	601a      	str	r2, [r3, #0]
            break;
    2662:	e7f2      	b.n	264a <setAccelRange_bmx160+0x26>
            accelRange = BMX160_ACCEL_MG_LSB_2G * G_CONST;
    2664:	4b01      	ldr	r3, [pc, #4]	; (266c <setAccelRange_bmx160+0x48>)
    2666:	4a02      	ldr	r2, [pc, #8]	; (2670 <setAccelRange_bmx160+0x4c>)
    2668:	601a      	str	r2, [r3, #0]
}
    266a:	e7ee      	b.n	264a <setAccelRange_bmx160+0x26>
    266c:	2000003c 	.word	0x2000003c
    2670:	3a1cf5a9 	.word	0x3a1cf5a9
    2674:	3a9cf5a9 	.word	0x3a9cf5a9
    2678:	3b1cf5d3 	.word	0x3b1cf5d3
    267c:	3b9cf5bd 	.word	0x3b9cf5bd

00002680 <setGyroRange_bmx160>:
{
    2680:	b510      	push	{r4, lr}
    2682:	460c      	mov	r4, r1
    writeReg_bmx160(bmxIMU_spi_p, BMX160_GYR_RANGE_REG, sentVal);
    2684:	460a      	mov	r2, r1
    2686:	2143      	movs	r1, #67	; 0x43
    2688:	f7ff ff26 	bl	24d8 <writeReg_bmx160>
    switch (passVal){
    268c:	2c04      	cmp	r4, #4
    268e:	d818      	bhi.n	26c2 <setGyroRange_bmx160+0x42>
    2690:	e8df f004 	tbb	[pc, r4]
    2694:	070b0f13 	.word	0x070b0f13
    2698:	03          	.byte	0x03
    2699:	00          	.byte	0x00
            gyroRange = BMX160_GYRO_SENSITIVITY_125DPS;
    269a:	4b0c      	ldr	r3, [pc, #48]	; (26cc <setGyroRange_bmx160+0x4c>)
    269c:	4a0c      	ldr	r2, [pc, #48]	; (26d0 <setGyroRange_bmx160+0x50>)
    269e:	601a      	str	r2, [r3, #0]
}
    26a0:	bd10      	pop	{r4, pc}
            gyroRange = BMX160_GYRO_SENSITIVITY_250DPS;
    26a2:	4b0a      	ldr	r3, [pc, #40]	; (26cc <setGyroRange_bmx160+0x4c>)
    26a4:	4a0b      	ldr	r2, [pc, #44]	; (26d4 <setGyroRange_bmx160+0x54>)
    26a6:	601a      	str	r2, [r3, #0]
            break;
    26a8:	e7fa      	b.n	26a0 <setGyroRange_bmx160+0x20>
            gyroRange = BMX160_GYRO_SENSITIVITY_500DPS;
    26aa:	4b08      	ldr	r3, [pc, #32]	; (26cc <setGyroRange_bmx160+0x4c>)
    26ac:	4a0a      	ldr	r2, [pc, #40]	; (26d8 <setGyroRange_bmx160+0x58>)
    26ae:	601a      	str	r2, [r3, #0]
            break;
    26b0:	e7f6      	b.n	26a0 <setGyroRange_bmx160+0x20>
            gyroRange = BMX160_GYRO_SENSITIVITY_1000DPS;
    26b2:	4b06      	ldr	r3, [pc, #24]	; (26cc <setGyroRange_bmx160+0x4c>)
    26b4:	4a09      	ldr	r2, [pc, #36]	; (26dc <setGyroRange_bmx160+0x5c>)
    26b6:	601a      	str	r2, [r3, #0]
            break;
    26b8:	e7f2      	b.n	26a0 <setGyroRange_bmx160+0x20>
            gyroRange = BMX160_GYRO_SENSITIVITY_2000DPS;
    26ba:	4b04      	ldr	r3, [pc, #16]	; (26cc <setGyroRange_bmx160+0x4c>)
    26bc:	4a08      	ldr	r2, [pc, #32]	; (26e0 <setGyroRange_bmx160+0x60>)
    26be:	601a      	str	r2, [r3, #0]
            break;
    26c0:	e7ee      	b.n	26a0 <setGyroRange_bmx160+0x20>
            gyroRange = BMX160_GYRO_SENSITIVITY_250DPS;
    26c2:	4b02      	ldr	r3, [pc, #8]	; (26cc <setGyroRange_bmx160+0x4c>)
    26c4:	4a03      	ldr	r2, [pc, #12]	; (26d4 <setGyroRange_bmx160+0x54>)
    26c6:	601a      	str	r2, [r3, #0]
}
    26c8:	e7ea      	b.n	26a0 <setGyroRange_bmx160+0x20>
    26ca:	bf00      	nop
    26cc:	20000040 	.word	0x20000040
    26d0:	3b79c1f8 	.word	0x3b79c1f8
    26d4:	3bf9c1f8 	.word	0x3bf9c1f8
    26d8:	3c79c18d 	.word	0x3c79c18d
    26dc:	3cf9c18d 	.word	0x3cf9c18d
    26e0:	3d79c18d 	.word	0x3d79c18d

000026e4 <readReg_bmx160>:

int readReg_bmx160(bmx160_spi * bmxIMU_spi_p, uint8_t reg, uint8_t *data, size_t len)
{
    26e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    26e8:	b08d      	sub	sp, #52	; 0x34
    26ea:	4604      	mov	r4, r0
    int result;
	unsigned char tx_buffer[2] = { 0, 0};
    26ec:	2000      	movs	r0, #0
    26ee:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c

	tx_buffer[0] = 0x80 | reg;
    26f2:	f061 017f 	orn	r1, r1, #127	; 0x7f
    26f6:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c

	const struct spi_buf tx_buf = {
    26fa:	a90b      	add	r1, sp, #44	; 0x2c
    26fc:	9109      	str	r1, [sp, #36]	; 0x24
    26fe:	2001      	movs	r0, #1
    2700:	900a      	str	r0, [sp, #40]	; 0x28
		.buf = tx_buffer,
		.len = 1,
	};
	const struct spi_buf_set tx = {
    2702:	ad09      	add	r5, sp, #36	; 0x24
    2704:	9507      	str	r5, [sp, #28]
    2706:	9008      	str	r0, [sp, #32]
		.buffers = &tx_buf,
		.count = 1,
	};

	struct spi_buf rx_buf[2] = {
    2708:	9103      	str	r1, [sp, #12]
    270a:	9004      	str	r0, [sp, #16]
    270c:	9205      	str	r2, [sp, #20]
    270e:	9306      	str	r3, [sp, #24]
			.buf = data,
			.len = len,
		}
	};

	const struct spi_buf_set rx = {
    2710:	ab03      	add	r3, sp, #12
    2712:	9301      	str	r3, [sp, #4]
    2714:	2302      	movs	r3, #2
    2716:	9302      	str	r3, [sp, #8]
		.buffers = rx_buf,
		.count = 2,
	};
	gpio_pin_set(bmxIMU_spi_p->gpio0_dev, bmxIMU_spi_p->spi_cs_pin, 1);
    2718:	6966      	ldr	r6, [r4, #20]
    271a:	f894 8010 	ldrb.w	r8, [r4, #16]
	const struct gpio_driver_config *const cfg =
    271e:	6873      	ldr	r3, [r6, #4]
	const struct gpio_driver_data *const data =
    2720:	6937      	ldr	r7, [r6, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    2722:	681b      	ldr	r3, [r3, #0]
    2724:	fa00 f508 	lsl.w	r5, r0, r8
    2728:	422b      	tst	r3, r5
    272a:	d03a      	beq.n	27a2 <readReg_bmx160+0xbe>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    272c:	683b      	ldr	r3, [r7, #0]
    272e:	421d      	tst	r5, r3
    2730:	d145      	bne.n	27be <readReg_bmx160+0xda>
    2732:	2701      	movs	r7, #1
	const struct gpio_driver_config *const cfg =
    2734:	6873      	ldr	r3, [r6, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    2736:	681b      	ldr	r3, [r3, #0]
    2738:	2501      	movs	r5, #1
    273a:	fa05 f508 	lsl.w	r5, r5, r8
    273e:	422b      	tst	r3, r5
    2740:	d03f      	beq.n	27c2 <readReg_bmx160+0xde>
	if (value != 0)	{
    2742:	2f00      	cmp	r7, #0
    2744:	d04b      	beq.n	27de <readReg_bmx160+0xfa>
	const struct gpio_driver_api *api =
    2746:	68b3      	ldr	r3, [r6, #8]
	return api->port_set_bits_raw(port, pins);
    2748:	68db      	ldr	r3, [r3, #12]
    274a:	4629      	mov	r1, r5
    274c:	4630      	mov	r0, r6
    274e:	4798      	blx	r3
	result = spi_transceive(bmxIMU_spi_p->spi_dev, &bmxIMU_spi_p->spi_cfg, &tx, &rx);
    2750:	68e0      	ldr	r0, [r4, #12]
	const struct spi_driver_api *api =
    2752:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    2754:	681d      	ldr	r5, [r3, #0]
    2756:	ab01      	add	r3, sp, #4
    2758:	aa07      	add	r2, sp, #28
    275a:	4621      	mov	r1, r4
    275c:	47a8      	blx	r5
    275e:	4607      	mov	r7, r0
    gpio_pin_set(bmxIMU_spi_p->gpio0_dev, bmxIMU_spi_p->spi_cs_pin, 0);
    2760:	6965      	ldr	r5, [r4, #20]
    2762:	f894 8010 	ldrb.w	r8, [r4, #16]
	const struct gpio_driver_config *const cfg =
    2766:	686b      	ldr	r3, [r5, #4]
	const struct gpio_driver_data *const data =
    2768:	692c      	ldr	r4, [r5, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    276a:	681b      	ldr	r3, [r3, #0]
    276c:	2601      	movs	r6, #1
    276e:	fa06 f608 	lsl.w	r6, r6, r8
    2772:	4233      	tst	r3, r6
    2774:	d039      	beq.n	27ea <readReg_bmx160+0x106>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    2776:	6823      	ldr	r3, [r4, #0]
    2778:	421e      	tst	r6, r3
    277a:	d144      	bne.n	2806 <readReg_bmx160+0x122>
    277c:	2600      	movs	r6, #0
	const struct gpio_driver_config *const cfg =
    277e:	686b      	ldr	r3, [r5, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    2780:	681b      	ldr	r3, [r3, #0]
    2782:	2401      	movs	r4, #1
    2784:	fa04 f408 	lsl.w	r4, r4, r8
    2788:	4223      	tst	r3, r4
    278a:	d03e      	beq.n	280a <readReg_bmx160+0x126>
	if (value != 0)	{
    278c:	2e00      	cmp	r6, #0
    278e:	d04a      	beq.n	2826 <readReg_bmx160+0x142>
	const struct gpio_driver_api *api =
    2790:	68ab      	ldr	r3, [r5, #8]
	return api->port_set_bits_raw(port, pins);
    2792:	68db      	ldr	r3, [r3, #12]
    2794:	4621      	mov	r1, r4
    2796:	4628      	mov	r0, r5
    2798:	4798      	blx	r3
	if (result) {
		return result;
	}

	return 0;
}
    279a:	4638      	mov	r0, r7
    279c:	b00d      	add	sp, #52	; 0x34
    279e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    27a2:	f8df 9094 	ldr.w	r9, [pc, #148]	; 2838 <readReg_bmx160+0x154>
    27a6:	f240 42bb 	movw	r2, #1211	; 0x4bb
    27aa:	4649      	mov	r1, r9
    27ac:	4821      	ldr	r0, [pc, #132]	; (2834 <readReg_bmx160+0x150>)
    27ae:	f00e fc3b 	bl	11028 <printk>
    27b2:	f240 41bb 	movw	r1, #1211	; 0x4bb
    27b6:	4648      	mov	r0, r9
    27b8:	f00e fd58 	bl	1126c <assert_post_action>
    27bc:	e7b6      	b.n	272c <readReg_bmx160+0x48>
		value = (value != 0) ? 0 : 1;
    27be:	2700      	movs	r7, #0
    27c0:	e7b8      	b.n	2734 <readReg_bmx160+0x50>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    27c2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2838 <readReg_bmx160+0x154>
    27c6:	f240 4291 	movw	r2, #1169	; 0x491
    27ca:	4641      	mov	r1, r8
    27cc:	4819      	ldr	r0, [pc, #100]	; (2834 <readReg_bmx160+0x150>)
    27ce:	f00e fc2b 	bl	11028 <printk>
    27d2:	f240 4191 	movw	r1, #1169	; 0x491
    27d6:	4640      	mov	r0, r8
    27d8:	f00e fd48 	bl	1126c <assert_post_action>
    27dc:	e7b1      	b.n	2742 <readReg_bmx160+0x5e>
	const struct gpio_driver_api *api =
    27de:	68b3      	ldr	r3, [r6, #8]
	return api->port_clear_bits_raw(port, pins);
    27e0:	691b      	ldr	r3, [r3, #16]
    27e2:	4629      	mov	r1, r5
    27e4:	4630      	mov	r0, r6
    27e6:	4798      	blx	r3
    27e8:	e7b2      	b.n	2750 <readReg_bmx160+0x6c>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    27ea:	f8df 904c 	ldr.w	r9, [pc, #76]	; 2838 <readReg_bmx160+0x154>
    27ee:	f240 42bb 	movw	r2, #1211	; 0x4bb
    27f2:	4649      	mov	r1, r9
    27f4:	480f      	ldr	r0, [pc, #60]	; (2834 <readReg_bmx160+0x150>)
    27f6:	f00e fc17 	bl	11028 <printk>
    27fa:	f240 41bb 	movw	r1, #1211	; 0x4bb
    27fe:	4648      	mov	r0, r9
    2800:	f00e fd34 	bl	1126c <assert_post_action>
    2804:	e7b7      	b.n	2776 <readReg_bmx160+0x92>
		value = (value != 0) ? 0 : 1;
    2806:	2601      	movs	r6, #1
    2808:	e7b9      	b.n	277e <readReg_bmx160+0x9a>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    280a:	f8df 802c 	ldr.w	r8, [pc, #44]	; 2838 <readReg_bmx160+0x154>
    280e:	f240 4291 	movw	r2, #1169	; 0x491
    2812:	4641      	mov	r1, r8
    2814:	4807      	ldr	r0, [pc, #28]	; (2834 <readReg_bmx160+0x150>)
    2816:	f00e fc07 	bl	11028 <printk>
    281a:	f240 4191 	movw	r1, #1169	; 0x491
    281e:	4640      	mov	r0, r8
    2820:	f00e fd24 	bl	1126c <assert_post_action>
    2824:	e7b2      	b.n	278c <readReg_bmx160+0xa8>
	const struct gpio_driver_api *api =
    2826:	68ab      	ldr	r3, [r5, #8]
	return api->port_clear_bits_raw(port, pins);
    2828:	691b      	ldr	r3, [r3, #16]
    282a:	4621      	mov	r1, r4
    282c:	4628      	mov	r0, r5
    282e:	4798      	blx	r3
	if (result) {
    2830:	e7b3      	b.n	279a <readReg_bmx160+0xb6>
    2832:	bf00      	nop
    2834:	00015984 	.word	0x00015984
    2838:	00015958 	.word	0x00015958

0000283c <getData_bmx160>:
    if (sen_data == NULL)
    283c:	2900      	cmp	r1, #0
    283e:	d06d      	beq.n	291c <getData_bmx160+0xe0>
{
    2840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2844:	b084      	sub	sp, #16
    2846:	460d      	mov	r5, r1
    uint8_t data[12] = {0};
    2848:	2300      	movs	r3, #0
    284a:	9301      	str	r3, [sp, #4]
    284c:	9302      	str	r3, [sp, #8]
    284e:	9303      	str	r3, [sp, #12]
    result = readReg_bmx160(bmxIMU_spi_p, BMX160_GYR_X_LSB_REG, data, 12);
    2850:	230c      	movs	r3, #12
    2852:	aa01      	add	r2, sp, #4
    2854:	4619      	mov	r1, r3
    2856:	f7ff ff45 	bl	26e4 <readReg_bmx160>
    285a:	4606      	mov	r6, r0
    x = (int16_t) (((uint16_t)data[1] << 8) | data[0]);
    285c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    2860:	021b      	lsls	r3, r3, #8
    2862:	b21b      	sxth	r3, r3
    2864:	f89d 0004 	ldrb.w	r0, [sp, #4]
    y = (int16_t) (((uint16_t)data[3] << 8) | data[2]);
    2868:	f89d 7007 	ldrb.w	r7, [sp, #7]
    286c:	023f      	lsls	r7, r7, #8
    286e:	b23f      	sxth	r7, r7
    2870:	f89d 2006 	ldrb.w	r2, [sp, #6]
    2874:	4317      	orrs	r7, r2
    z = (int16_t) (((uint16_t)data[5] << 8) | data[4]);
    2876:	f89d 4009 	ldrb.w	r4, [sp, #9]
    287a:	0224      	lsls	r4, r4, #8
    287c:	b224      	sxth	r4, r4
    287e:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2882:	4314      	orrs	r4, r2
    sen_data->gx = (float)(x) * gyroRange;
    2884:	4318      	orrs	r0, r3
    2886:	f7fe f98b 	bl	ba0 <__aeabi_i2f>
    288a:	4b25      	ldr	r3, [pc, #148]	; (2920 <getData_bmx160+0xe4>)
    288c:	f8d3 8000 	ldr.w	r8, [r3]
    2890:	4641      	mov	r1, r8
    2892:	f7fe f9d9 	bl	c48 <__aeabi_fmul>
    2896:	60e8      	str	r0, [r5, #12]
    sen_data->gy = (float)(y) * gyroRange;
    2898:	4638      	mov	r0, r7
    289a:	f7fe f981 	bl	ba0 <__aeabi_i2f>
    289e:	4601      	mov	r1, r0
    28a0:	4640      	mov	r0, r8
    28a2:	f7fe f9d1 	bl	c48 <__aeabi_fmul>
    28a6:	6128      	str	r0, [r5, #16]
    sen_data->gz = (float)(z) * gyroRange;
    28a8:	4620      	mov	r0, r4
    28aa:	f7fe f979 	bl	ba0 <__aeabi_i2f>
    28ae:	4601      	mov	r1, r0
    28b0:	4640      	mov	r0, r8
    28b2:	f7fe f9c9 	bl	c48 <__aeabi_fmul>
    28b6:	6168      	str	r0, [r5, #20]
    x = (int16_t) (((uint16_t)data[7] << 8) | data[6]);
    28b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    28bc:	021b      	lsls	r3, r3, #8
    28be:	b21b      	sxth	r3, r3
    28c0:	f89d 000a 	ldrb.w	r0, [sp, #10]
    y = (int16_t) (((uint16_t)data[9] << 8) | data[8]);
    28c4:	f89d 700d 	ldrb.w	r7, [sp, #13]
    28c8:	023f      	lsls	r7, r7, #8
    28ca:	b23f      	sxth	r7, r7
    28cc:	f89d 200c 	ldrb.w	r2, [sp, #12]
    28d0:	4317      	orrs	r7, r2
    z = (int16_t) (((uint16_t)data[11] << 8) | data[10]);
    28d2:	f89d 400f 	ldrb.w	r4, [sp, #15]
    28d6:	0224      	lsls	r4, r4, #8
    28d8:	b224      	sxth	r4, r4
    28da:	f89d 200e 	ldrb.w	r2, [sp, #14]
    28de:	4314      	orrs	r4, r2
    sen_data->ax = (float)(x) * accelRange;
    28e0:	4318      	orrs	r0, r3
    28e2:	f7fe f95d 	bl	ba0 <__aeabi_i2f>
    28e6:	4b0f      	ldr	r3, [pc, #60]	; (2924 <getData_bmx160+0xe8>)
    28e8:	f8d3 8000 	ldr.w	r8, [r3]
    28ec:	4641      	mov	r1, r8
    28ee:	f7fe f9ab 	bl	c48 <__aeabi_fmul>
    28f2:	6028      	str	r0, [r5, #0]
    sen_data->ay = (float)(y) * accelRange;
    28f4:	4638      	mov	r0, r7
    28f6:	f7fe f953 	bl	ba0 <__aeabi_i2f>
    28fa:	4601      	mov	r1, r0
    28fc:	4640      	mov	r0, r8
    28fe:	f7fe f9a3 	bl	c48 <__aeabi_fmul>
    2902:	6068      	str	r0, [r5, #4]
    sen_data->az = (float)(z) * accelRange;
    2904:	4620      	mov	r0, r4
    2906:	f7fe f94b 	bl	ba0 <__aeabi_i2f>
    290a:	4601      	mov	r1, r0
    290c:	4640      	mov	r0, r8
    290e:	f7fe f99b 	bl	c48 <__aeabi_fmul>
    2912:	60a8      	str	r0, [r5, #8]
    return result;
    2914:	b2f0      	uxtb	r0, r6
}
    2916:	b004      	add	sp, #16
    2918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BMX160_E_NULL_PTR;
    291c:	20ff      	movs	r0, #255	; 0xff
}
    291e:	4770      	bx	lr
    2920:	20000040 	.word	0x20000040
    2924:	2000003c 	.word	0x2000003c

00002928 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    2928:	b538      	push	{r3, r4, r5, lr}
    292a:	4604      	mov	r4, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    292c:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    292e:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    2932:	6081      	str	r1, [r0, #8]
	switch (method) {
    2934:	2b02      	cmp	r3, #2
    2936:	d903      	bls.n	2940 <sys_notify_finalize+0x18>
    2938:	2b03      	cmp	r3, #3
    293a:	d102      	bne.n	2942 <sys_notify_finalize+0x1a>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    293c:	6800      	ldr	r0, [r0, #0]
		break;
    293e:	e00d      	b.n	295c <sys_notify_finalize+0x34>
	switch (method) {
    2940:	b95b      	cbnz	r3, 295a <sys_notify_finalize+0x32>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
    2942:	4d08      	ldr	r5, [pc, #32]	; (2964 <sys_notify_finalize+0x3c>)
    2944:	2245      	movs	r2, #69	; 0x45
    2946:	4629      	mov	r1, r5
    2948:	4807      	ldr	r0, [pc, #28]	; (2968 <sys_notify_finalize+0x40>)
    294a:	f00e fb6d 	bl	11028 <printk>
    294e:	2145      	movs	r1, #69	; 0x45
    2950:	4628      	mov	r0, r5
    2952:	f00e fc8b 	bl	1126c <assert_post_action>
	sys_notify_generic_callback rv = NULL;
    2956:	2000      	movs	r0, #0
    2958:	e000      	b.n	295c <sys_notify_finalize+0x34>
	switch (method) {
    295a:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    295c:	2300      	movs	r3, #0
    295e:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    2960:	bd38      	pop	{r3, r4, r5, pc}
    2962:	bf00      	nop
    2964:	00015b80 	.word	0x00015b80
    2968:	00015984 	.word	0x00015984

0000296c <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    296c:	4b01      	ldr	r3, [pc, #4]	; (2974 <__printk_hook_install+0x8>)
    296e:	6018      	str	r0, [r3, #0]
}
    2970:	4770      	bx	lr
    2972:	bf00      	nop
    2974:	20000044 	.word	0x20000044

00002978 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    2978:	b510      	push	{r4, lr}
    297a:	b084      	sub	sp, #16
    297c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    297e:	9001      	str	r0, [sp, #4]
    2980:	9102      	str	r1, [sp, #8]
    2982:	2100      	movs	r1, #0
    2984:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
    2986:	a901      	add	r1, sp, #4
    2988:	4805      	ldr	r0, [pc, #20]	; (29a0 <vsnprintk+0x28>)
    298a:	f000 fda1 	bl	34d0 <cbvprintf>

	if (ctx.count < ctx.max) {
    298e:	9b03      	ldr	r3, [sp, #12]
    2990:	9a02      	ldr	r2, [sp, #8]
    2992:	4293      	cmp	r3, r2
    2994:	da01      	bge.n	299a <vsnprintk+0x22>
		str[ctx.count] = '\0';
    2996:	2200      	movs	r2, #0
    2998:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    299a:	9803      	ldr	r0, [sp, #12]
    299c:	b004      	add	sp, #16
    299e:	bd10      	pop	{r4, pc}
    29a0:	00010ff9 	.word	0x00010ff9

000029a4 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
    29a4:	b538      	push	{r3, r4, r5, lr}
    29a6:	4604      	mov	r4, r0
    29a8:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    29aa:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
    29ac:	2a00      	cmp	r2, #0
    29ae:	db13      	blt.n	29d8 <process_complete+0x34>
    29b0:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
    29b4:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    29b6:	2a01      	cmp	r2, #1
    29b8:	d91a      	bls.n	29f0 <process_complete+0x4c>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
    29ba:	2b04      	cmp	r3, #4
    29bc:	d04d      	beq.n	2a5a <process_complete+0xb6>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
    29be:	4c2d      	ldr	r4, [pc, #180]	; (2a74 <process_complete+0xd0>)
    29c0:	f240 121b 	movw	r2, #283	; 0x11b
    29c4:	4621      	mov	r1, r4
    29c6:	482c      	ldr	r0, [pc, #176]	; (2a78 <process_complete+0xd4>)
    29c8:	f00e fb2e 	bl	11028 <printk>
    29cc:	f240 111b 	movw	r1, #283	; 0x11b
    29d0:	4620      	mov	r0, r4
    29d2:	f00e fc4b 	bl	1126c <assert_post_action>
	}
}
    29d6:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    29d8:	e9d0 0100 	ldrd	r0, r1, [r0]
    29dc:	e885 0003 	stmia.w	r5, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    29e0:	2300      	movs	r3, #0
    29e2:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    29e4:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    29e6:	2101      	movs	r1, #1
    29e8:	4620      	mov	r0, r4
    29ea:	f00e fb39 	bl	11060 <set_state>
    29ee:	e7f2      	b.n	29d6 <process_complete+0x32>
		*clients = mgr->clients;
    29f0:	e9d0 0100 	ldrd	r0, r1, [r0]
    29f4:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    29f8:	2200      	movs	r2, #0
    29fa:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    29fc:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    29fe:	2b06      	cmp	r3, #6
    2a00:	d00f      	beq.n	2a22 <process_complete+0x7e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    2a02:	2b05      	cmp	r3, #5
    2a04:	d11c      	bne.n	2a40 <process_complete+0x9c>
			set_state(mgr, ONOFF_STATE_OFF);
    2a06:	2100      	movs	r1, #0
    2a08:	4620      	mov	r0, r4
    2a0a:	f00e fb29 	bl	11060 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    2a0e:	4620      	mov	r0, r4
    2a10:	f00e fb4d 	bl	110ae <process_recheck>
    2a14:	2800      	cmp	r0, #0
    2a16:	d0de      	beq.n	29d6 <process_complete+0x32>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2a18:	8ba3      	ldrh	r3, [r4, #28]
    2a1a:	f043 0320 	orr.w	r3, r3, #32
    2a1e:	83a3      	strh	r3, [r4, #28]
    2a20:	e7d9      	b.n	29d6 <process_complete+0x32>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    2a22:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    2a24:	b13b      	cbz	r3, 2a36 <process_complete+0x92>
				mgr->refs += 1U;
    2a26:	8be2      	ldrh	r2, [r4, #30]
    2a28:	3201      	adds	r2, #1
    2a2a:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    2a2c:	2b00      	cmp	r3, #0
    2a2e:	d0f9      	beq.n	2a24 <process_complete+0x80>
	return node->next;
    2a30:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    2a32:	2b00      	cmp	r3, #0
    2a34:	d1f6      	bne.n	2a24 <process_complete+0x80>
			set_state(mgr, ONOFF_STATE_ON);
    2a36:	2102      	movs	r1, #2
    2a38:	4620      	mov	r0, r4
    2a3a:	f00e fb11 	bl	11060 <set_state>
    2a3e:	e7e6      	b.n	2a0e <process_complete+0x6a>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    2a40:	4d0c      	ldr	r5, [pc, #48]	; (2a74 <process_complete+0xd0>)
    2a42:	f240 1209 	movw	r2, #265	; 0x109
    2a46:	4629      	mov	r1, r5
    2a48:	480b      	ldr	r0, [pc, #44]	; (2a78 <process_complete+0xd4>)
    2a4a:	f00e faed 	bl	11028 <printk>
    2a4e:	f240 1109 	movw	r1, #265	; 0x109
    2a52:	4628      	mov	r0, r5
    2a54:	f00e fc0a 	bl	1126c <assert_post_action>
    2a58:	e7d5      	b.n	2a06 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
    2a5a:	2100      	movs	r1, #0
    2a5c:	f00e fb00 	bl	11060 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    2a60:	4620      	mov	r0, r4
    2a62:	f00e fb24 	bl	110ae <process_recheck>
    2a66:	2800      	cmp	r0, #0
    2a68:	d0b5      	beq.n	29d6 <process_complete+0x32>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2a6a:	8ba3      	ldrh	r3, [r4, #28]
    2a6c:	f043 0320 	orr.w	r3, r3, #32
    2a70:	83a3      	strh	r3, [r4, #28]
    2a72:	e7b0      	b.n	29d6 <process_complete+0x32>
    2a74:	00015ba4 	.word	0x00015ba4
    2a78:	00015984 	.word	0x00015984

00002a7c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    2a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a80:	b083      	sub	sp, #12
    2a82:	4604      	mov	r4, r0
    2a84:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2a86:	8b83      	ldrh	r3, [r0, #28]
    2a88:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
    2a8c:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
    2a90:	460d      	mov	r5, r1
    2a92:	b131      	cbz	r1, 2aa2 <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    2a94:	f1b8 0f00 	cmp.w	r8, #0
    2a98:	d111      	bne.n	2abe <process_event+0x42>
	list->head = NULL;
    2a9a:	2300      	movs	r3, #0
    2a9c:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    2a9e:	9301      	str	r3, [sp, #4]
}
    2aa0:	e0a7      	b.n	2bf2 <process_event+0x176>
	__ASSERT_NO_MSG(evt != EVT_NOP);
    2aa2:	f8df 9314 	ldr.w	r9, [pc, #788]	; 2db8 <process_event+0x33c>
    2aa6:	f240 1233 	movw	r2, #307	; 0x133
    2aaa:	4649      	mov	r1, r9
    2aac:	48c1      	ldr	r0, [pc, #772]	; (2db4 <process_event+0x338>)
    2aae:	f00e fabb 	bl	11028 <printk>
    2ab2:	f240 1133 	movw	r1, #307	; 0x133
    2ab6:	4648      	mov	r0, r9
    2ab8:	f00e fbd8 	bl	1126c <assert_post_action>
    2abc:	e7ea      	b.n	2a94 <process_event+0x18>
		if (evt == EVT_COMPLETE) {
    2abe:	2d01      	cmp	r5, #1
    2ac0:	d013      	beq.n	2aea <process_event+0x6e>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    2ac2:	2d02      	cmp	r5, #2
    2ac4:	d116      	bne.n	2af4 <process_event+0x78>

			mgr->flags |= ONOFF_FLAG_RECHECK;
    2ac6:	8ba3      	ldrh	r3, [r4, #28]
    2ac8:	f043 0320 	orr.w	r3, r3, #32
    2acc:	83a3      	strh	r3, [r4, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2ace:	f104 0014 	add.w	r0, r4, #20
    2ad2:	f00b faaf 	bl	e034 <z_spin_unlock_valid>
    2ad6:	2800      	cmp	r0, #0
    2ad8:	f000 8176 	beq.w	2dc8 <process_event+0x34c>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    2adc:	f386 8811 	msr	BASEPRI, r6
    2ae0:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    2ae4:	b003      	add	sp, #12
    2ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    2aea:	8ba3      	ldrh	r3, [r4, #28]
    2aec:	f043 0310 	orr.w	r3, r3, #16
    2af0:	83a3      	strh	r3, [r4, #28]
    2af2:	e7ec      	b.n	2ace <process_event+0x52>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    2af4:	4db0      	ldr	r5, [pc, #704]	; (2db8 <process_event+0x33c>)
    2af6:	f44f 729e 	mov.w	r2, #316	; 0x13c
    2afa:	4629      	mov	r1, r5
    2afc:	48ad      	ldr	r0, [pc, #692]	; (2db4 <process_event+0x338>)
    2afe:	f00e fa93 	bl	11028 <printk>
    2b02:	f44f 719e 	mov.w	r1, #316	; 0x13c
    2b06:	4628      	mov	r0, r5
    2b08:	f00e fbb0 	bl	1126c <assert_post_action>
    2b0c:	e7db      	b.n	2ac6 <process_event+0x4a>
			evt = process_recheck(mgr);
    2b0e:	4620      	mov	r0, r4
    2b10:	f00e facd 	bl	110ae <process_recheck>
    2b14:	4605      	mov	r5, r0
    2b16:	e06e      	b.n	2bf6 <process_event+0x17a>
			res = mgr->last_res;
    2b18:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
    2b1c:	464a      	mov	r2, r9
    2b1e:	4669      	mov	r1, sp
    2b20:	4620      	mov	r0, r4
    2b22:	f7ff ff3f 	bl	29a4 <process_complete>
		onoff_transition_fn transit = NULL;
    2b26:	2500      	movs	r5, #0
    2b28:	e010      	b.n	2b4c <process_event+0xd0>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    2b2a:	2f00      	cmp	r7, #0
    2b2c:	d17f      	bne.n	2c2e <process_event+0x1b2>
	return list->head;
    2b2e:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    2b30:	2b00      	cmp	r3, #0
    2b32:	f000 8089 	beq.w	2c48 <process_event+0x1cc>
			transit = mgr->transitions->start;
    2b36:	6923      	ldr	r3, [r4, #16]
    2b38:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    2b3a:	2d00      	cmp	r5, #0
    2b3c:	f000 8091 	beq.w	2c62 <process_event+0x1e6>
			set_state(mgr, ONOFF_STATE_TO_ON);
    2b40:	2106      	movs	r1, #6
    2b42:	4620      	mov	r0, r4
    2b44:	f00e fa8c 	bl	11060 <set_state>
		res = 0;
    2b48:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2b4c:	8ba3      	ldrh	r3, [r4, #28]
    2b4e:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2b52:	45b8      	cmp	r8, r7
    2b54:	f000 8100 	beq.w	2d58 <process_event+0x2dc>
    2b58:	68a2      	ldr	r2, [r4, #8]
    2b5a:	2a00      	cmp	r2, #0
    2b5c:	f000 80fe 	beq.w	2d5c <process_event+0x2e0>
    2b60:	2201      	movs	r2, #1
		if (do_monitors
    2b62:	4617      	mov	r7, r2
    2b64:	b91a      	cbnz	r2, 2b6e <process_event+0xf2>
    2b66:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    2b68:	2a00      	cmp	r2, #0
    2b6a:	f000 80f9 	beq.w	2d60 <process_event+0x2e4>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2b6e:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    2b72:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    2b74:	f104 0a14 	add.w	sl, r4, #20
    2b78:	4650      	mov	r0, sl
    2b7a:	f00b fa5b 	bl	e034 <z_spin_unlock_valid>
    2b7e:	2800      	cmp	r0, #0
    2b80:	f000 80f2 	beq.w	2d68 <process_event+0x2ec>
    2b84:	f386 8811 	msr	BASEPRI, r6
    2b88:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    2b8c:	2f00      	cmp	r7, #0
    2b8e:	f040 80f7 	bne.w	2d80 <process_event+0x304>
    2b92:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    2b94:	b12b      	cbz	r3, 2ba2 <process_event+0x126>
				notify_all(mgr, &clients, state, res);
    2b96:	464b      	mov	r3, r9
    2b98:	4642      	mov	r2, r8
    2b9a:	4669      	mov	r1, sp
    2b9c:	4620      	mov	r0, r4
    2b9e:	f00e fac8 	bl	11132 <notify_all>
			if (transit != NULL) {
    2ba2:	b115      	cbz	r5, 2baa <process_event+0x12e>
				transit(mgr, transition_complete);
    2ba4:	4985      	ldr	r1, [pc, #532]	; (2dbc <process_event+0x340>)
    2ba6:	4620      	mov	r0, r4
    2ba8:	47a8      	blx	r5
	__asm__ volatile(
    2baa:	f04f 0320 	mov.w	r3, #32
    2bae:	f3ef 8611 	mrs	r6, BASEPRI
    2bb2:	f383 8812 	msr	BASEPRI_MAX, r3
    2bb6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2bba:	4650      	mov	r0, sl
    2bbc:	f00b fa2a 	bl	e014 <z_spin_lock_valid>
    2bc0:	2800      	cmp	r0, #0
    2bc2:	f000 80e3 	beq.w	2d8c <process_event+0x310>
	z_spin_lock_set_owner(l);
    2bc6:	4650      	mov	r0, sl
    2bc8:	f00b fa44 	bl	e054 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    2bcc:	8ba3      	ldrh	r3, [r4, #28]
    2bce:	f023 0308 	bic.w	r3, r3, #8
    2bd2:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    2bd4:	8ba3      	ldrh	r3, [r4, #28]
    2bd6:	f013 0f10 	tst.w	r3, #16
    2bda:	f000 80e2 	beq.w	2da2 <process_event+0x326>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    2bde:	f023 0310 	bic.w	r3, r3, #16
    2be2:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    2be4:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    2be6:	8ba7      	ldrh	r7, [r4, #28]
    2be8:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
    2bec:	2d00      	cmp	r5, #0
    2bee:	f43f af6e 	beq.w	2ace <process_event+0x52>
		if (evt == EVT_RECHECK) {
    2bf2:	2d02      	cmp	r5, #2
    2bf4:	d08b      	beq.n	2b0e <process_event+0x92>
		if (evt == EVT_NOP) {
    2bf6:	2d00      	cmp	r5, #0
    2bf8:	f43f af69 	beq.w	2ace <process_event+0x52>
		if (evt == EVT_COMPLETE) {
    2bfc:	2d01      	cmp	r5, #1
    2bfe:	d08b      	beq.n	2b18 <process_event+0x9c>
		} else if (evt == EVT_START) {
    2c00:	2d03      	cmp	r5, #3
    2c02:	d092      	beq.n	2b2a <process_event+0xae>
		} else if (evt == EVT_STOP) {
    2c04:	2d04      	cmp	r5, #4
    2c06:	d03a      	beq.n	2c7e <process_event+0x202>
		} else if (evt == EVT_RESET) {
    2c08:	2d05      	cmp	r5, #5
    2c0a:	f040 8096 	bne.w	2d3a <process_event+0x2be>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    2c0e:	2f01      	cmp	r7, #1
    2c10:	d16b      	bne.n	2cea <process_event+0x26e>
    2c12:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    2c14:	2b00      	cmp	r3, #0
    2c16:	d075      	beq.n	2d04 <process_event+0x288>
			transit = mgr->transitions->reset;
    2c18:	6923      	ldr	r3, [r4, #16]
    2c1a:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    2c1c:	2d00      	cmp	r5, #0
    2c1e:	d07e      	beq.n	2d1e <process_event+0x2a2>
			set_state(mgr, ONOFF_STATE_RESETTING);
    2c20:	2105      	movs	r1, #5
    2c22:	4620      	mov	r0, r4
    2c24:	f00e fa1c 	bl	11060 <set_state>
		res = 0;
    2c28:	f04f 0900 	mov.w	r9, #0
    2c2c:	e78e      	b.n	2b4c <process_event+0xd0>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    2c2e:	4d62      	ldr	r5, [pc, #392]	; (2db8 <process_event+0x33c>)
    2c30:	f44f 72ab 	mov.w	r2, #342	; 0x156
    2c34:	4629      	mov	r1, r5
    2c36:	485f      	ldr	r0, [pc, #380]	; (2db4 <process_event+0x338>)
    2c38:	f00e f9f6 	bl	11028 <printk>
    2c3c:	f44f 71ab 	mov.w	r1, #342	; 0x156
    2c40:	4628      	mov	r0, r5
    2c42:	f00e fb13 	bl	1126c <assert_post_action>
    2c46:	e772      	b.n	2b2e <process_event+0xb2>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    2c48:	4d5b      	ldr	r5, [pc, #364]	; (2db8 <process_event+0x33c>)
    2c4a:	f240 1257 	movw	r2, #343	; 0x157
    2c4e:	4629      	mov	r1, r5
    2c50:	4858      	ldr	r0, [pc, #352]	; (2db4 <process_event+0x338>)
    2c52:	f00e f9e9 	bl	11028 <printk>
    2c56:	f240 1157 	movw	r1, #343	; 0x157
    2c5a:	4628      	mov	r0, r5
    2c5c:	f00e fb06 	bl	1126c <assert_post_action>
    2c60:	e769      	b.n	2b36 <process_event+0xba>
			__ASSERT_NO_MSG(transit != NULL);
    2c62:	f8df 8154 	ldr.w	r8, [pc, #340]	; 2db8 <process_event+0x33c>
    2c66:	f44f 72ad 	mov.w	r2, #346	; 0x15a
    2c6a:	4641      	mov	r1, r8
    2c6c:	4851      	ldr	r0, [pc, #324]	; (2db4 <process_event+0x338>)
    2c6e:	f00e f9db 	bl	11028 <printk>
    2c72:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    2c76:	4640      	mov	r0, r8
    2c78:	f00e faf8 	bl	1126c <assert_post_action>
    2c7c:	e760      	b.n	2b40 <process_event+0xc4>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    2c7e:	2f02      	cmp	r7, #2
    2c80:	d10b      	bne.n	2c9a <process_event+0x21e>
			__ASSERT_NO_MSG(mgr->refs == 0);
    2c82:	8be3      	ldrh	r3, [r4, #30]
    2c84:	b9b3      	cbnz	r3, 2cb4 <process_event+0x238>
			transit = mgr->transitions->stop;
    2c86:	6923      	ldr	r3, [r4, #16]
    2c88:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    2c8a:	b305      	cbz	r5, 2cce <process_event+0x252>
			set_state(mgr, ONOFF_STATE_TO_OFF);
    2c8c:	2104      	movs	r1, #4
    2c8e:	4620      	mov	r0, r4
    2c90:	f00e f9e6 	bl	11060 <set_state>
		res = 0;
    2c94:	f04f 0900 	mov.w	r9, #0
    2c98:	e758      	b.n	2b4c <process_event+0xd0>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    2c9a:	4d47      	ldr	r5, [pc, #284]	; (2db8 <process_event+0x33c>)
    2c9c:	f240 125d 	movw	r2, #349	; 0x15d
    2ca0:	4629      	mov	r1, r5
    2ca2:	4844      	ldr	r0, [pc, #272]	; (2db4 <process_event+0x338>)
    2ca4:	f00e f9c0 	bl	11028 <printk>
    2ca8:	f240 115d 	movw	r1, #349	; 0x15d
    2cac:	4628      	mov	r0, r5
    2cae:	f00e fadd 	bl	1126c <assert_post_action>
    2cb2:	e7e6      	b.n	2c82 <process_event+0x206>
			__ASSERT_NO_MSG(mgr->refs == 0);
    2cb4:	4d40      	ldr	r5, [pc, #256]	; (2db8 <process_event+0x33c>)
    2cb6:	f44f 72af 	mov.w	r2, #350	; 0x15e
    2cba:	4629      	mov	r1, r5
    2cbc:	483d      	ldr	r0, [pc, #244]	; (2db4 <process_event+0x338>)
    2cbe:	f00e f9b3 	bl	11028 <printk>
    2cc2:	f44f 71af 	mov.w	r1, #350	; 0x15e
    2cc6:	4628      	mov	r0, r5
    2cc8:	f00e fad0 	bl	1126c <assert_post_action>
    2ccc:	e7db      	b.n	2c86 <process_event+0x20a>
			__ASSERT_NO_MSG(transit != NULL);
    2cce:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 2db8 <process_event+0x33c>
    2cd2:	f240 1261 	movw	r2, #353	; 0x161
    2cd6:	4641      	mov	r1, r8
    2cd8:	4836      	ldr	r0, [pc, #216]	; (2db4 <process_event+0x338>)
    2cda:	f00e f9a5 	bl	11028 <printk>
    2cde:	f240 1161 	movw	r1, #353	; 0x161
    2ce2:	4640      	mov	r0, r8
    2ce4:	f00e fac2 	bl	1126c <assert_post_action>
    2ce8:	e7d0      	b.n	2c8c <process_event+0x210>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    2cea:	4d33      	ldr	r5, [pc, #204]	; (2db8 <process_event+0x33c>)
    2cec:	f44f 72b2 	mov.w	r2, #356	; 0x164
    2cf0:	4629      	mov	r1, r5
    2cf2:	4830      	ldr	r0, [pc, #192]	; (2db4 <process_event+0x338>)
    2cf4:	f00e f998 	bl	11028 <printk>
    2cf8:	f44f 71b2 	mov.w	r1, #356	; 0x164
    2cfc:	4628      	mov	r0, r5
    2cfe:	f00e fab5 	bl	1126c <assert_post_action>
    2d02:	e786      	b.n	2c12 <process_event+0x196>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    2d04:	4d2c      	ldr	r5, [pc, #176]	; (2db8 <process_event+0x33c>)
    2d06:	f240 1265 	movw	r2, #357	; 0x165
    2d0a:	4629      	mov	r1, r5
    2d0c:	4829      	ldr	r0, [pc, #164]	; (2db4 <process_event+0x338>)
    2d0e:	f00e f98b 	bl	11028 <printk>
    2d12:	f240 1165 	movw	r1, #357	; 0x165
    2d16:	4628      	mov	r0, r5
    2d18:	f00e faa8 	bl	1126c <assert_post_action>
    2d1c:	e77c      	b.n	2c18 <process_event+0x19c>
			__ASSERT_NO_MSG(transit != NULL);
    2d1e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 2db8 <process_event+0x33c>
    2d22:	f44f 72b4 	mov.w	r2, #360	; 0x168
    2d26:	4641      	mov	r1, r8
    2d28:	4822      	ldr	r0, [pc, #136]	; (2db4 <process_event+0x338>)
    2d2a:	f00e f97d 	bl	11028 <printk>
    2d2e:	f44f 71b4 	mov.w	r1, #360	; 0x168
    2d32:	4640      	mov	r0, r8
    2d34:	f00e fa9a 	bl	1126c <assert_post_action>
    2d38:	e772      	b.n	2c20 <process_event+0x1a4>
			__ASSERT_NO_MSG(false);
    2d3a:	4d1f      	ldr	r5, [pc, #124]	; (2db8 <process_event+0x33c>)
    2d3c:	f240 126b 	movw	r2, #363	; 0x16b
    2d40:	4629      	mov	r1, r5
    2d42:	481c      	ldr	r0, [pc, #112]	; (2db4 <process_event+0x338>)
    2d44:	f00e f970 	bl	11028 <printk>
    2d48:	f240 116b 	movw	r1, #363	; 0x16b
    2d4c:	4628      	mov	r0, r5
    2d4e:	f00e fa8d 	bl	1126c <assert_post_action>
		onoff_transition_fn transit = NULL;
    2d52:	2500      	movs	r5, #0
		res = 0;
    2d54:	46a9      	mov	r9, r5
    2d56:	e6f9      	b.n	2b4c <process_event+0xd0>
				   && !sys_slist_is_empty(&mgr->monitors);
    2d58:	2200      	movs	r2, #0
    2d5a:	e702      	b.n	2b62 <process_event+0xe6>
    2d5c:	2200      	movs	r2, #0
    2d5e:	e700      	b.n	2b62 <process_event+0xe6>
		    || (transit != NULL)) {
    2d60:	2d00      	cmp	r5, #0
    2d62:	f47f af04 	bne.w	2b6e <process_event+0xf2>
    2d66:	e735      	b.n	2bd4 <process_event+0x158>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2d68:	f8df b054 	ldr.w	fp, [pc, #84]	; 2dc0 <process_event+0x344>
    2d6c:	22ac      	movs	r2, #172	; 0xac
    2d6e:	4659      	mov	r1, fp
    2d70:	4810      	ldr	r0, [pc, #64]	; (2db4 <process_event+0x338>)
    2d72:	f00e f959 	bl	11028 <printk>
    2d76:	21ac      	movs	r1, #172	; 0xac
    2d78:	4658      	mov	r0, fp
    2d7a:	f00e fa77 	bl	1126c <assert_post_action>
    2d7e:	e701      	b.n	2b84 <process_event+0x108>
				notify_monitors(mgr, state, res);
    2d80:	464a      	mov	r2, r9
    2d82:	4641      	mov	r1, r8
    2d84:	4620      	mov	r0, r4
    2d86:	f00e f973 	bl	11070 <notify_monitors>
    2d8a:	e702      	b.n	2b92 <process_event+0x116>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2d8c:	4d0c      	ldr	r5, [pc, #48]	; (2dc0 <process_event+0x344>)
    2d8e:	2281      	movs	r2, #129	; 0x81
    2d90:	4629      	mov	r1, r5
    2d92:	4808      	ldr	r0, [pc, #32]	; (2db4 <process_event+0x338>)
    2d94:	f00e f948 	bl	11028 <printk>
    2d98:	2181      	movs	r1, #129	; 0x81
    2d9a:	4628      	mov	r0, r5
    2d9c:	f00e fa66 	bl	1126c <assert_post_action>
    2da0:	e711      	b.n	2bc6 <process_event+0x14a>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    2da2:	f013 0f20 	tst.w	r3, #32
    2da6:	d00d      	beq.n	2dc4 <process_event+0x348>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    2da8:	f023 0320 	bic.w	r3, r3, #32
    2dac:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
    2dae:	2502      	movs	r5, #2
    2db0:	e719      	b.n	2be6 <process_event+0x16a>
    2db2:	bf00      	nop
    2db4:	00015984 	.word	0x00015984
    2db8:	00015ba4 	.word	0x00015ba4
    2dbc:	00002de9 	.word	0x00002de9
    2dc0:	00015bc8 	.word	0x00015bc8
		evt = EVT_NOP;
    2dc4:	2500      	movs	r5, #0
    2dc6:	e70e      	b.n	2be6 <process_event+0x16a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2dc8:	4c05      	ldr	r4, [pc, #20]	; (2de0 <process_event+0x364>)
    2dca:	22ac      	movs	r2, #172	; 0xac
    2dcc:	4621      	mov	r1, r4
    2dce:	4805      	ldr	r0, [pc, #20]	; (2de4 <process_event+0x368>)
    2dd0:	f00e f92a 	bl	11028 <printk>
    2dd4:	21ac      	movs	r1, #172	; 0xac
    2dd6:	4620      	mov	r0, r4
    2dd8:	f00e fa48 	bl	1126c <assert_post_action>
    2ddc:	e67e      	b.n	2adc <process_event+0x60>
    2dde:	bf00      	nop
    2de0:	00015bc8 	.word	0x00015bc8
    2de4:	00015984 	.word	0x00015984

00002de8 <transition_complete>:
{
    2de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2dec:	4604      	mov	r4, r0
    2dee:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    2df0:	f100 0614 	add.w	r6, r0, #20
    2df4:	f04f 0320 	mov.w	r3, #32
    2df8:	f3ef 8711 	mrs	r7, BASEPRI
    2dfc:	f383 8812 	msr	BASEPRI_MAX, r3
    2e00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2e04:	4630      	mov	r0, r6
    2e06:	f00b f905 	bl	e014 <z_spin_lock_valid>
    2e0a:	b150      	cbz	r0, 2e22 <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
    2e0c:	4630      	mov	r0, r6
    2e0e:	f00b f921 	bl	e054 <z_spin_lock_set_owner>
	mgr->last_res = res;
    2e12:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    2e14:	463a      	mov	r2, r7
    2e16:	2101      	movs	r1, #1
    2e18:	4620      	mov	r0, r4
    2e1a:	f7ff fe2f 	bl	2a7c <process_event>
}
    2e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2e22:	f8df 801c 	ldr.w	r8, [pc, #28]	; 2e40 <transition_complete+0x58>
    2e26:	2281      	movs	r2, #129	; 0x81
    2e28:	4641      	mov	r1, r8
    2e2a:	4804      	ldr	r0, [pc, #16]	; (2e3c <transition_complete+0x54>)
    2e2c:	f00e f8fc 	bl	11028 <printk>
    2e30:	2181      	movs	r1, #129	; 0x81
    2e32:	4640      	mov	r0, r8
    2e34:	f00e fa1a 	bl	1126c <assert_post_action>
    2e38:	e7e8      	b.n	2e0c <transition_complete+0x24>
    2e3a:	bf00      	nop
    2e3c:	00015984 	.word	0x00015984
    2e40:	00015bc8 	.word	0x00015bc8

00002e44 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    2e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2e48:	4604      	mov	r4, r0
    2e4a:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    2e4c:	f00e f948 	bl	110e0 <validate_args>

	if (rv < 0) {
    2e50:	1e06      	subs	r6, r0, #0
    2e52:	db53      	blt.n	2efc <onoff_request+0xb8>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    2e54:	f104 0714 	add.w	r7, r4, #20
    2e58:	f04f 0320 	mov.w	r3, #32
    2e5c:	f3ef 8911 	mrs	r9, BASEPRI
    2e60:	f383 8812 	msr	BASEPRI_MAX, r3
    2e64:	f3bf 8f6f 	isb	sy
    2e68:	4638      	mov	r0, r7
    2e6a:	f00b f8d3 	bl	e014 <z_spin_lock_valid>
    2e6e:	b1e8      	cbz	r0, 2eac <onoff_request+0x68>
	z_spin_lock_set_owner(l);
    2e70:	4638      	mov	r0, r7
    2e72:	f00b f8ef 	bl	e054 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2e76:	8ba5      	ldrh	r5, [r4, #28]
    2e78:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    2e7c:	8be3      	ldrh	r3, [r4, #30]
    2e7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2e82:	4293      	cmp	r3, r2
    2e84:	d050      	beq.n	2f28 <onoff_request+0xe4>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    2e86:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    2e88:	2d02      	cmp	r5, #2
    2e8a:	d01a      	beq.n	2ec2 <onoff_request+0x7e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    2e8c:	b305      	cbz	r5, 2ed0 <onoff_request+0x8c>
		   || (state == ONOFF_STATE_TO_OFF)
    2e8e:	2d04      	cmp	r5, #4
    2e90:	d01e      	beq.n	2ed0 <onoff_request+0x8c>
		   || (state == ONOFF_STATE_TO_ON)) {
    2e92:	2d06      	cmp	r5, #6
    2e94:	d01c      	beq.n	2ed0 <onoff_request+0x8c>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    2e96:	2d05      	cmp	r5, #5
    2e98:	d04d      	beq.n	2f36 <onoff_request+0xf2>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    2e9a:	2d01      	cmp	r5, #1
    2e9c:	d131      	bne.n	2f02 <onoff_request+0xbe>
		rv = -EIO;
    2e9e:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    2ea2:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    2ea6:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    2ea8:	4652      	mov	r2, sl
    2eaa:	e017      	b.n	2edc <onoff_request+0x98>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2eac:	4d36      	ldr	r5, [pc, #216]	; (2f88 <onoff_request+0x144>)
    2eae:	2281      	movs	r2, #129	; 0x81
    2eb0:	4629      	mov	r1, r5
    2eb2:	4836      	ldr	r0, [pc, #216]	; (2f8c <onoff_request+0x148>)
    2eb4:	f00e f8b8 	bl	11028 <printk>
    2eb8:	2181      	movs	r1, #129	; 0x81
    2eba:	4628      	mov	r0, r5
    2ebc:	f00e f9d6 	bl	1126c <assert_post_action>
    2ec0:	e7d6      	b.n	2e70 <onoff_request+0x2c>
		mgr->refs += 1U;
    2ec2:	3301      	adds	r3, #1
    2ec4:	83e3      	strh	r3, [r4, #30]
		notify = true;
    2ec6:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
    2eca:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    2ecc:	461a      	mov	r2, r3
    2ece:	e005      	b.n	2edc <onoff_request+0x98>
		start = (state == ONOFF_STATE_OFF);
    2ed0:	fab5 f385 	clz	r3, r5
    2ed4:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    2ed6:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
    2eda:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
    2edc:	b142      	cbz	r2, 2ef0 <onoff_request+0xac>
	parent->next = child;
    2ede:	2200      	movs	r2, #0
    2ee0:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
    2ee4:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    2ee6:	b36a      	cbz	r2, 2f44 <onoff_request+0x100>
	parent->next = child;
    2ee8:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    2eec:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    2ef0:	b36b      	cbz	r3, 2f4e <onoff_request+0x10a>
		process_event(mgr, EVT_RECHECK, key);
    2ef2:	464a      	mov	r2, r9
    2ef4:	2102      	movs	r1, #2
    2ef6:	4620      	mov	r0, r4
    2ef8:	f7ff fdc0 	bl	2a7c <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    2efc:	4630      	mov	r0, r6
    2efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    2f02:	4e23      	ldr	r6, [pc, #140]	; (2f90 <onoff_request+0x14c>)
    2f04:	f240 12c9 	movw	r2, #457	; 0x1c9
    2f08:	4631      	mov	r1, r6
    2f0a:	4820      	ldr	r0, [pc, #128]	; (2f8c <onoff_request+0x148>)
    2f0c:	f00e f88c 	bl	11028 <printk>
    2f10:	f240 11c9 	movw	r1, #457	; 0x1c9
    2f14:	4630      	mov	r0, r6
    2f16:	f00e f9a9 	bl	1126c <assert_post_action>
		rv = -EIO;
    2f1a:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    2f1e:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    2f22:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    2f24:	4652      	mov	r2, sl
    2f26:	e7d9      	b.n	2edc <onoff_request+0x98>
		rv = -EAGAIN;
    2f28:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    2f2c:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    2f30:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    2f32:	4652      	mov	r2, sl
    2f34:	e7d2      	b.n	2edc <onoff_request+0x98>
		rv = -ENOTSUP;
    2f36:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    2f3a:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    2f3e:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    2f40:	4652      	mov	r2, sl
    2f42:	e7cb      	b.n	2edc <onoff_request+0x98>
    2f44:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    2f48:	f8c4 8000 	str.w	r8, [r4]
}
    2f4c:	e7d0      	b.n	2ef0 <onoff_request+0xac>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2f4e:	4638      	mov	r0, r7
    2f50:	f00b f870 	bl	e034 <z_spin_unlock_valid>
    2f54:	b168      	cbz	r0, 2f72 <onoff_request+0x12e>
	__asm__ volatile(
    2f56:	f389 8811 	msr	BASEPRI, r9
    2f5a:	f3bf 8f6f 	isb	sy
		if (notify) {
    2f5e:	f1ba 0f00 	cmp.w	sl, #0
    2f62:	d0cb      	beq.n	2efc <onoff_request+0xb8>
			notify_one(mgr, cli, state, 0);
    2f64:	2300      	movs	r3, #0
    2f66:	462a      	mov	r2, r5
    2f68:	4641      	mov	r1, r8
    2f6a:	4620      	mov	r0, r4
    2f6c:	f00e f8ce 	bl	1110c <notify_one>
    2f70:	e7c4      	b.n	2efc <onoff_request+0xb8>
    2f72:	4f05      	ldr	r7, [pc, #20]	; (2f88 <onoff_request+0x144>)
    2f74:	22ac      	movs	r2, #172	; 0xac
    2f76:	4639      	mov	r1, r7
    2f78:	4804      	ldr	r0, [pc, #16]	; (2f8c <onoff_request+0x148>)
    2f7a:	f00e f855 	bl	11028 <printk>
    2f7e:	21ac      	movs	r1, #172	; 0xac
    2f80:	4638      	mov	r0, r7
    2f82:	f00e f973 	bl	1126c <assert_post_action>
    2f86:	e7e6      	b.n	2f56 <onoff_request+0x112>
    2f88:	00015bc8 	.word	0x00015bc8
    2f8c:	00015984 	.word	0x00015984
    2f90:	00015ba4 	.word	0x00015ba4

00002f94 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    2f94:	b410      	push	{r4}
    2f96:	4604      	mov	r4, r0
	const char *sp = *str;
    2f98:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    2f9a:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
    2f9c:	7813      	ldrb	r3, [r2, #0]
    2f9e:	4907      	ldr	r1, [pc, #28]	; (2fbc <extract_decimal+0x28>)
    2fa0:	5c59      	ldrb	r1, [r3, r1]
    2fa2:	f011 0f04 	tst.w	r1, #4
    2fa6:	d006      	beq.n	2fb6 <extract_decimal+0x22>
		val = 10U * val + *sp++ - '0';
    2fa8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2fac:	3201      	adds	r2, #1
    2fae:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    2fb2:	3830      	subs	r0, #48	; 0x30
    2fb4:	e7f2      	b.n	2f9c <extract_decimal+0x8>
	}
	*str = sp;
    2fb6:	6022      	str	r2, [r4, #0]
	return val;
}
    2fb8:	bc10      	pop	{r4}
    2fba:	4770      	bx	lr
    2fbc:	00017371 	.word	0x00017371

00002fc0 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    2fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2fc4:	b083      	sub	sp, #12
    2fc6:	4604      	mov	r4, r0
    2fc8:	460d      	mov	r5, r1
    2fca:	9201      	str	r2, [sp, #4]
    2fcc:	469a      	mov	sl, r3
    2fce:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    2fd2:	78d3      	ldrb	r3, [r2, #3]
    2fd4:	4a31      	ldr	r2, [pc, #196]	; (309c <encode_uint+0xdc>)
    2fd6:	f813 b002 	ldrb.w	fp, [r3, r2]
    2fda:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    2fde:	2b6f      	cmp	r3, #111	; 0x6f
    2fe0:	d00f      	beq.n	3002 <encode_uint+0x42>
    2fe2:	d906      	bls.n	2ff2 <encode_uint+0x32>
    2fe4:	2b70      	cmp	r3, #112	; 0x70
    2fe6:	d00f      	beq.n	3008 <encode_uint+0x48>
    2fe8:	2b78      	cmp	r3, #120	; 0x78
    2fea:	d110      	bne.n	300e <encode_uint+0x4e>
		return 16;
    2fec:	f04f 0910 	mov.w	r9, #16
    2ff0:	e023      	b.n	303a <encode_uint+0x7a>
	switch (specifier) {
    2ff2:	2b58      	cmp	r3, #88	; 0x58
    2ff4:	d002      	beq.n	2ffc <encode_uint+0x3c>
    2ff6:	f04f 090a 	mov.w	r9, #10
    2ffa:	e01e      	b.n	303a <encode_uint+0x7a>
		return 16;
    2ffc:	f04f 0910 	mov.w	r9, #16
    3000:	e01b      	b.n	303a <encode_uint+0x7a>
		return 8;
    3002:	f04f 0908 	mov.w	r9, #8
    3006:	e018      	b.n	303a <encode_uint+0x7a>
		return 16;
    3008:	f04f 0910 	mov.w	r9, #16
    300c:	e015      	b.n	303a <encode_uint+0x7a>
	switch (specifier) {
    300e:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    3012:	e012      	b.n	303a <encode_uint+0x7a>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
    3014:	b2d2      	uxtb	r2, r2
    3016:	3230      	adds	r2, #48	; 0x30
    3018:	b2d2      	uxtb	r2, r2
    301a:	f808 2d01 	strb.w	r2, [r8, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
    301e:	4632      	mov	r2, r6
    3020:	463b      	mov	r3, r7
    3022:	4620      	mov	r0, r4
    3024:	4629      	mov	r1, r5
    3026:	f7fd ffd5 	bl	fd4 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    302a:	42bd      	cmp	r5, r7
    302c:	bf08      	it	eq
    302e:	42b4      	cmpeq	r4, r6
    3030:	d318      	bcc.n	3064 <encode_uint+0xa4>
    3032:	45d0      	cmp	r8, sl
    3034:	d916      	bls.n	3064 <encode_uint+0xa4>
		value /= radix;
    3036:	4604      	mov	r4, r0
    3038:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    303a:	464e      	mov	r6, r9
    303c:	2700      	movs	r7, #0
    303e:	464a      	mov	r2, r9
    3040:	463b      	mov	r3, r7
    3042:	4620      	mov	r0, r4
    3044:	4629      	mov	r1, r5
    3046:	f7fd ffc5 	bl	fd4 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    304a:	2a09      	cmp	r2, #9
    304c:	d9e2      	bls.n	3014 <encode_uint+0x54>
    304e:	f1bb 0f01 	cmp.w	fp, #1
    3052:	d003      	beq.n	305c <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    3054:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3056:	3257      	adds	r2, #87	; 0x57
    3058:	b2d2      	uxtb	r2, r2
    305a:	e7de      	b.n	301a <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    305c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    305e:	3237      	adds	r2, #55	; 0x37
    3060:	b2d2      	uxtb	r2, r2
    3062:	e7da      	b.n	301a <encode_uint+0x5a>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    3064:	9b01      	ldr	r3, [sp, #4]
    3066:	781b      	ldrb	r3, [r3, #0]
    3068:	f013 0f20 	tst.w	r3, #32
    306c:	d005      	beq.n	307a <encode_uint+0xba>
		if (radix == 8) {
    306e:	f1b9 0f08 	cmp.w	r9, #8
    3072:	d006      	beq.n	3082 <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
    3074:	f1b9 0f10 	cmp.w	r9, #16
    3078:	d009      	beq.n	308e <encode_uint+0xce>
			;
		}
	}

	return bp;
}
    307a:	4640      	mov	r0, r8
    307c:	b003      	add	sp, #12
    307e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    3082:	9a01      	ldr	r2, [sp, #4]
    3084:	7893      	ldrb	r3, [r2, #2]
    3086:	f043 0308 	orr.w	r3, r3, #8
    308a:	7093      	strb	r3, [r2, #2]
    308c:	e7f5      	b.n	307a <encode_uint+0xba>
			conv->altform_0c = true;
    308e:	9a01      	ldr	r2, [sp, #4]
    3090:	7893      	ldrb	r3, [r2, #2]
    3092:	f043 0310 	orr.w	r3, r3, #16
    3096:	7093      	strb	r3, [r2, #2]
    3098:	e7ef      	b.n	307a <encode_uint+0xba>
    309a:	bf00      	nop
    309c:	00017371 	.word	0x00017371

000030a0 <encode_float>:
			  struct conversion *conv,
			  int precision,
			  char *sign,
			  char *bps,
			  const char **bpe)
{
    30a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30a4:	b089      	sub	sp, #36	; 0x24
    30a6:	4692      	mov	sl, r2
    30a8:	461d      	mov	r5, r3
	char *buf = bps;

	/* Prepend the sign: '-' if negative, flags control
	 * non-negative behavior.
	 */
	if ((u.u64 & SIGN_MASK) != 0U) {
    30aa:	2800      	cmp	r0, #0
    30ac:	f171 0300 	sbcs.w	r3, r1, #0
    30b0:	db08      	blt.n	30c4 <encode_float+0x24>
		*sign = '-';
	} else if (conv->flag_plus) {
    30b2:	f89a 3000 	ldrb.w	r3, [sl]
    30b6:	f013 0f08 	tst.w	r3, #8
    30ba:	d014      	beq.n	30e6 <encode_float+0x46>
		*sign = '+';
    30bc:	232b      	movs	r3, #43	; 0x2b
    30be:	9a12      	ldr	r2, [sp, #72]	; 0x48
    30c0:	7013      	strb	r3, [r2, #0]
    30c2:	e002      	b.n	30ca <encode_float+0x2a>
		*sign = '-';
    30c4:	232d      	movs	r3, #45	; 0x2d
    30c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    30c8:	7013      	strb	r3, [r2, #0]
	}

	/* Extract the non-negative offset exponent and fraction.  Record
	 * whether the value is subnormal.
	 */
	char c = conv->specifier;
    30ca:	f89a b003 	ldrb.w	fp, [sl, #3]
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    30ce:	f3c1 540a 	ubfx	r4, r1, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    30d2:	4602      	mov	r2, r0
    30d4:	f3c1 0313 	ubfx	r3, r1, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
    30d8:	b964      	cbnz	r4, 30f4 <encode_float+0x54>
    30da:	ea52 0103 	orrs.w	r1, r2, r3
    30de:	d130      	bne.n	3142 <encode_float+0xa2>
    30e0:	f04f 0e00 	mov.w	lr, #0
    30e4:	e008      	b.n	30f8 <encode_float+0x58>
	} else if (conv->flag_space) {
    30e6:	f013 0f10 	tst.w	r3, #16
    30ea:	d0ee      	beq.n	30ca <encode_float+0x2a>
		*sign = ' ';
    30ec:	2320      	movs	r3, #32
    30ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
    30f0:	7013      	strb	r3, [r2, #0]
    30f2:	e7ea      	b.n	30ca <encode_float+0x2a>
	bool is_subnormal = (expo == 0) && (fract != 0);
    30f4:	f04f 0e00 	mov.w	lr, #0

	/* Exponent of all-ones signals infinity or NaN, which are
	 * text constants regardless of specifier.
	 */
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    30f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
    30fc:	428c      	cmp	r4, r1
    30fe:	d023      	beq.n	3148 <encode_float+0xa8>
		*bpe = buf;
		return bps;
	}

	/* The case of an F specifier is no longer relevant. */
	if (c == 'F') {
    3100:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
    3104:	d060      	beq.n	31c8 <encode_float+0x128>

	/* Remainder of code operates on a 64-bit fraction, so shift up (and
	 * discard garbage from the exponent where the implicit 1 would be
	 * stored).
	 */
	fract <<= EXPONENT_BITS;
    3106:	ea4f 2cc3 	mov.w	ip, r3, lsl #11
    310a:	ea4c 5c52 	orr.w	ip, ip, r2, lsr #21
    310e:	02d2      	lsls	r2, r2, #11
	fract &= ~SIGN_MASK;
    3110:	f02c 4c00 	bic.w	ip, ip, #2147483648	; 0x80000000
    3114:	9206      	str	r2, [sp, #24]
    3116:	f8cd c01c 	str.w	ip, [sp, #28]

	/* Non-zero values need normalization. */
	if ((expo | fract) != 0) {
    311a:	ea44 0002 	orr.w	r0, r4, r2
    311e:	17e3      	asrs	r3, r4, #31
    3120:	ea43 010c 	orr.w	r1, r3, ip
    3124:	ea50 0301 	orrs.w	r3, r0, r1
    3128:	d008      	beq.n	313c <encode_float+0x9c>
		if (is_subnormal) {
    312a:	f1be 0f00 	cmp.w	lr, #0
    312e:	d14f      	bne.n	31d0 <encode_float+0x130>
		}
		/* Adjust the offset exponent to be signed rather than offset,
		 * and set the implicit 1 bit in the (shifted) 53-bit
		 * fraction.
		 */
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    3130:	f2a4 34fe 	subw	r4, r4, #1022	; 0x3fe
		fract |= BIT_63;
    3134:	9b07      	ldr	r3, [sp, #28]
    3136:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    313a:	9307      	str	r3, [sp, #28]
		c = 'f';
    313c:	f04f 0800 	mov.w	r8, #0
    3140:	e061      	b.n	3206 <encode_float+0x166>
	bool is_subnormal = (expo == 0) && (fract != 0);
    3142:	f04f 0e01 	mov.w	lr, #1
    3146:	e7d7      	b.n	30f8 <encode_float+0x58>
		if (fract == 0) {
    3148:	4313      	orrs	r3, r2
    314a:	d122      	bne.n	3192 <encode_float+0xf2>
			if (isupper((int)c)) {
    314c:	4bad      	ldr	r3, [pc, #692]	; (3404 <encode_float+0x364>)
    314e:	f81b 3003 	ldrb.w	r3, [fp, r3]
    3152:	f003 0303 	and.w	r3, r3, #3
    3156:	2b01      	cmp	r3, #1
    3158:	d011      	beq.n	317e <encode_float+0xde>
				*buf++ = 'i';
    315a:	2369      	movs	r3, #105	; 0x69
    315c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    315e:	7013      	strb	r3, [r2, #0]
				*buf++ = 'n';
    3160:	236e      	movs	r3, #110	; 0x6e
    3162:	7053      	strb	r3, [r2, #1]
				*buf++ = 'f';
    3164:	3203      	adds	r2, #3
    3166:	2366      	movs	r3, #102	; 0x66
    3168:	9913      	ldr	r1, [sp, #76]	; 0x4c
    316a:	708b      	strb	r3, [r1, #2]
		conv->flag_zero = false;
    316c:	f89a 3000 	ldrb.w	r3, [sl]
    3170:	f36f 1386 	bfc	r3, #6, #1
    3174:	f88a 3000 	strb.w	r3, [sl]
		*bpe = buf;
    3178:	9b14      	ldr	r3, [sp, #80]	; 0x50
    317a:	601a      	str	r2, [r3, #0]
		return bps;
    317c:	e192      	b.n	34a4 <encode_float+0x404>
				*buf++ = 'I';
    317e:	2349      	movs	r3, #73	; 0x49
    3180:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3182:	7013      	strb	r3, [r2, #0]
				*buf++ = 'N';
    3184:	234e      	movs	r3, #78	; 0x4e
    3186:	7053      	strb	r3, [r2, #1]
				*buf++ = 'F';
    3188:	3203      	adds	r2, #3
    318a:	2346      	movs	r3, #70	; 0x46
    318c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    318e:	708b      	strb	r3, [r1, #2]
    3190:	e7ec      	b.n	316c <encode_float+0xcc>
			if (isupper((int)c)) {
    3192:	4b9c      	ldr	r3, [pc, #624]	; (3404 <encode_float+0x364>)
    3194:	f81b 3003 	ldrb.w	r3, [fp, r3]
    3198:	f003 0303 	and.w	r3, r3, #3
    319c:	2b01      	cmp	r3, #1
    319e:	d009      	beq.n	31b4 <encode_float+0x114>
				*buf++ = 'n';
    31a0:	236e      	movs	r3, #110	; 0x6e
    31a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    31a4:	7013      	strb	r3, [r2, #0]
				*buf++ = 'a';
    31a6:	2261      	movs	r2, #97	; 0x61
    31a8:	9913      	ldr	r1, [sp, #76]	; 0x4c
    31aa:	704a      	strb	r2, [r1, #1]
				*buf++ = 'n';
    31ac:	460a      	mov	r2, r1
    31ae:	3203      	adds	r2, #3
    31b0:	708b      	strb	r3, [r1, #2]
    31b2:	e7db      	b.n	316c <encode_float+0xcc>
				*buf++ = 'N';
    31b4:	234e      	movs	r3, #78	; 0x4e
    31b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    31b8:	7013      	strb	r3, [r2, #0]
				*buf++ = 'A';
    31ba:	2241      	movs	r2, #65	; 0x41
    31bc:	9913      	ldr	r1, [sp, #76]	; 0x4c
    31be:	704a      	strb	r2, [r1, #1]
				*buf++ = 'N';
    31c0:	460a      	mov	r2, r1
    31c2:	3203      	adds	r2, #3
    31c4:	708b      	strb	r3, [r1, #2]
    31c6:	e7d1      	b.n	316c <encode_float+0xcc>
		c = 'f';
    31c8:	f04f 0b66 	mov.w	fp, #102	; 0x66
    31cc:	e79b      	b.n	3106 <encode_float+0x66>
				expo--;
    31ce:	3c01      	subs	r4, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    31d0:	9b06      	ldr	r3, [sp, #24]
    31d2:	9a07      	ldr	r2, [sp, #28]
    31d4:	eb13 0803 	adds.w	r8, r3, r3
    31d8:	eb42 0902 	adc.w	r9, r2, r2
    31dc:	e9cd 8906 	strd	r8, r9, [sp, #24]
    31e0:	f1b8 0f00 	cmp.w	r8, #0
    31e4:	f179 0300 	sbcs.w	r3, r9, #0
    31e8:	daf1      	bge.n	31ce <encode_float+0x12e>
    31ea:	e7a1      	b.n	3130 <encode_float+0x90>
			fract >>= 1;
			expo++;
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));

		/* Perform fract * 5 * 2 / 10 */
		fract *= 5U;
    31ec:	ea4f 0c82 	mov.w	ip, r2, lsl #2
    31f0:	0098      	lsls	r0, r3, #2
    31f2:	ea4c 7493 	orr.w	r4, ip, r3, lsr #30
    31f6:	18c3      	adds	r3, r0, r3
    31f8:	eb44 0202 	adc.w	r2, r4, r2
    31fc:	9306      	str	r3, [sp, #24]
    31fe:	9207      	str	r2, [sp, #28]
		expo++;
    3200:	1c8c      	adds	r4, r1, #2
		decexp--;
    3202:	f108 38ff 	add.w	r8, r8, #4294967295
	while (expo < -2) {
    3206:	f114 0f02 	cmn.w	r4, #2
    320a:	da26      	bge.n	325a <encode_float+0x1ba>
			fract >>= 1;
    320c:	9907      	ldr	r1, [sp, #28]
    320e:	9b06      	ldr	r3, [sp, #24]
    3210:	085b      	lsrs	r3, r3, #1
    3212:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
    3216:	084a      	lsrs	r2, r1, #1
    3218:	9306      	str	r3, [sp, #24]
    321a:	9207      	str	r2, [sp, #28]
			expo++;
    321c:	4621      	mov	r1, r4
    321e:	3401      	adds	r4, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    3220:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
    3224:	d2f2      	bcs.n	320c <encode_float+0x16c>
    3226:	e7e1      	b.n	31ec <encode_float+0x14c>
		/*
		 * Perform fract / 5 / 2 * 10.
		 * The +2 is there to do round the result of the division
		 * by 5 not to lose too much precision in extreme cases.
		 */
		fract += 2;
    3228:	9b06      	ldr	r3, [sp, #24]
    322a:	3302      	adds	r3, #2
    322c:	9a07      	ldr	r2, [sp, #28]
    322e:	f142 0200 	adc.w	r2, r2, #0
    3232:	9306      	str	r3, [sp, #24]
    3234:	9207      	str	r2, [sp, #28]
		_ldiv5(&fract);
    3236:	a806      	add	r0, sp, #24
    3238:	f00d ffb8 	bl	111ac <_ldiv5>
		expo--;
    323c:	3c01      	subs	r4, #1
		decexp++;
    323e:	f108 0801 	add.w	r8, r8, #1

		/* Bring back our fractional number to full scale */
		do {
			fract <<= 1;
    3242:	9b06      	ldr	r3, [sp, #24]
    3244:	9a07      	ldr	r2, [sp, #28]
    3246:	18de      	adds	r6, r3, r3
    3248:	eb42 0702 	adc.w	r7, r2, r2
    324c:	e9cd 6706 	strd	r6, r7, [sp, #24]
			expo--;
    3250:	3c01      	subs	r4, #1
		} while (!(fract & BIT_63));
    3252:	2e00      	cmp	r6, #0
    3254:	f177 0300 	sbcs.w	r3, r7, #0
    3258:	daf3      	bge.n	3242 <encode_float+0x1a2>
	while (expo > 0) {
    325a:	2c00      	cmp	r4, #0
    325c:	dce4      	bgt.n	3228 <encode_float+0x188>
	/*
	 * The binary fractional point is located somewhere above bit 63.
	 * Move it between bits 59 and 60 to give 4 bits of room to the
	 * integer part.
	 */
	fract >>= (4 - expo);
    325e:	f1c4 0104 	rsb	r1, r4, #4
    3262:	9a07      	ldr	r2, [sp, #28]
    3264:	341c      	adds	r4, #28
    3266:	f1a1 0020 	sub.w	r0, r1, #32
    326a:	9b06      	ldr	r3, [sp, #24]
    326c:	40cb      	lsrs	r3, r1
    326e:	fa02 f404 	lsl.w	r4, r2, r4
    3272:	4323      	orrs	r3, r4
    3274:	fa22 f000 	lsr.w	r0, r2, r0
    3278:	4303      	orrs	r3, r0
    327a:	40ca      	lsrs	r2, r1
    327c:	9306      	str	r3, [sp, #24]
    327e:	9207      	str	r2, [sp, #28]

	if ((c == 'g') || (c == 'G')) {
    3280:	f1bb 0f67 	cmp.w	fp, #103	; 0x67
    3284:	d012      	beq.n	32ac <encode_float+0x20c>
    3286:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
    328a:	d00f      	beq.n	32ac <encode_float+0x20c>
	bool prune_zero = false;
    328c:	2700      	movs	r7, #0
			prune_zero = true;
		}
	}

	int decimals;
	if (c == 'f') {
    328e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
    3292:	d029      	beq.n	32e8 <encode_float+0x248>
		decimals = precision + decexp;
		if (decimals < 0) {
			decimals = 0;
		}
	} else {
		decimals = precision + 1;
    3294:	1c6c      	adds	r4, r5, #1
	}

	int digit_count = 16;
    3296:	2310      	movs	r3, #16
    3298:	9305      	str	r3, [sp, #20]

	if (decimals > 16) {
    329a:	429c      	cmp	r4, r3
    329c:	dd00      	ble.n	32a0 <encode_float+0x200>
		decimals = 16;
    329e:	461c      	mov	r4, r3
	}

	/* Round the value to the last digit being printed. */
	uint64_t round = BIT64(59); /* 0.5 */
    32a0:	2200      	movs	r2, #0
    32a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    32a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
	while (decimals--) {
    32aa:	e028      	b.n	32fe <encode_float+0x25e>
		if (decexp < (-4 + 1) || decexp > precision) {
    32ac:	f118 0f03 	cmn.w	r8, #3
    32b0:	db01      	blt.n	32b6 <encode_float+0x216>
    32b2:	45a8      	cmp	r8, r5
    32b4:	dd11      	ble.n	32da <encode_float+0x23a>
			c += 'e' - 'g';  /* e or E */
    32b6:	f1ab 0b02 	sub.w	fp, fp, #2
    32ba:	fa5f fb8b 	uxtb.w	fp, fp
			if (precision > 0) {
    32be:	2d00      	cmp	r5, #0
    32c0:	dd00      	ble.n	32c4 <encode_float+0x224>
				precision--;
    32c2:	3d01      	subs	r5, #1
		if (!conv->flag_hash && (precision > 0)) {
    32c4:	f89a 3000 	ldrb.w	r3, [sl]
    32c8:	f3c3 1740 	ubfx	r7, r3, #5, #1
    32cc:	f013 0f20 	tst.w	r3, #32
    32d0:	d108      	bne.n	32e4 <encode_float+0x244>
    32d2:	2d00      	cmp	r5, #0
    32d4:	dddb      	ble.n	328e <encode_float+0x1ee>
			prune_zero = true;
    32d6:	2701      	movs	r7, #1
    32d8:	e7d9      	b.n	328e <encode_float+0x1ee>
			precision -= decexp;
    32da:	eba5 0508 	sub.w	r5, r5, r8
			c = 'f';
    32de:	f04f 0b66 	mov.w	fp, #102	; 0x66
    32e2:	e7ef      	b.n	32c4 <encode_float+0x224>
	bool prune_zero = false;
    32e4:	2700      	movs	r7, #0
    32e6:	e7d2      	b.n	328e <encode_float+0x1ee>
		if (decimals < 0) {
    32e8:	eb18 0405 	adds.w	r4, r8, r5
    32ec:	d5d3      	bpl.n	3296 <encode_float+0x1f6>
	int digit_count = 16;
    32ee:	2310      	movs	r3, #16
    32f0:	9305      	str	r3, [sp, #20]
			decimals = 0;
    32f2:	2400      	movs	r4, #0
    32f4:	e7d4      	b.n	32a0 <encode_float+0x200>
		_ldiv10(&round);
    32f6:	a802      	add	r0, sp, #8
    32f8:	f00d ff76 	bl	111e8 <_ldiv10>
	while (decimals--) {
    32fc:	4634      	mov	r4, r6
    32fe:	1e66      	subs	r6, r4, #1
    3300:	2c00      	cmp	r4, #0
    3302:	d1f8      	bne.n	32f6 <encode_float+0x256>
	}
	fract += round;
    3304:	9b06      	ldr	r3, [sp, #24]
    3306:	9a02      	ldr	r2, [sp, #8]
    3308:	189b      	adds	r3, r3, r2
    330a:	9300      	str	r3, [sp, #0]
    330c:	9a07      	ldr	r2, [sp, #28]
    330e:	9b03      	ldr	r3, [sp, #12]
    3310:	eb42 0303 	adc.w	r3, r2, r3
    3314:	9301      	str	r3, [sp, #4]
    3316:	e9dd 2300 	ldrd	r2, r3, [sp]
    331a:	e9cd 2306 	strd	r2, r3, [sp, #24]
	/* Make sure rounding didn't make fract >= 1.0 */
	if (fract >= BIT64(60)) {
    331e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    3322:	bf08      	it	eq
    3324:	2a00      	cmpeq	r2, #0
    3326:	d207      	bcs.n	3338 <encode_float+0x298>
		_ldiv10(&fract);
		decexp++;
	}

	if (c == 'f') {
    3328:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
    332c:	d145      	bne.n	33ba <encode_float+0x31a>
		if (decexp > 0) {
    332e:	f1b8 0f00 	cmp.w	r8, #0
    3332:	dd3d      	ble.n	33b0 <encode_float+0x310>
	char *buf = bps;
    3334:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    3336:	e00d      	b.n	3354 <encode_float+0x2b4>
		_ldiv10(&fract);
    3338:	a806      	add	r0, sp, #24
    333a:	f00d ff55 	bl	111e8 <_ldiv10>
		decexp++;
    333e:	f108 0801 	add.w	r8, r8, #1
    3342:	e7f1      	b.n	3328 <encode_float+0x288>
			/* Emit the digits above the decimal point. */
			while (decexp > 0 && digit_count > 0) {
				*buf++ = _get_digit(&fract, &digit_count);
    3344:	a905      	add	r1, sp, #20
    3346:	a806      	add	r0, sp, #24
    3348:	f00d ff5a 	bl	11200 <_get_digit>
    334c:	f806 0b01 	strb.w	r0, [r6], #1
				decexp--;
    3350:	f108 38ff 	add.w	r8, r8, #4294967295
			while (decexp > 0 && digit_count > 0) {
    3354:	f1b8 0f00 	cmp.w	r8, #0
    3358:	dd02      	ble.n	3360 <encode_float+0x2c0>
    335a:	9b05      	ldr	r3, [sp, #20]
    335c:	2b00      	cmp	r3, #0
    335e:	dcf1      	bgt.n	3344 <encode_float+0x2a4>
			}

			conv->pad0_value = decexp;
    3360:	f8ca 8004 	str.w	r8, [sl, #4]

			decexp = 0;
    3364:	46a0      	mov	r8, r4
		}

		/* Emit the decimal point only if required by the alternative
		 * format, or if more digits are to follow.
		 */
		if (conv->flag_hash || (precision > 0)) {
    3366:	f89a 3000 	ldrb.w	r3, [sl]
    336a:	f013 0f20 	tst.w	r3, #32
    336e:	d101      	bne.n	3374 <encode_float+0x2d4>
    3370:	2d00      	cmp	r5, #0
    3372:	dd02      	ble.n	337a <encode_float+0x2da>
			*buf++ = '.';
    3374:	232e      	movs	r3, #46	; 0x2e
    3376:	f806 3b01 	strb.w	r3, [r6], #1
		}

		if (decexp < 0 && precision > 0) {
    337a:	f1b8 0f00 	cmp.w	r8, #0
    337e:	da33      	bge.n	33e8 <encode_float+0x348>
    3380:	2d00      	cmp	r5, #0
    3382:	dd31      	ble.n	33e8 <encode_float+0x348>
			conv->pad0_value = -decexp;
    3384:	f1c8 0300 	rsb	r3, r8, #0
    3388:	f8ca 3004 	str.w	r3, [sl, #4]
			if (conv->pad0_value > precision) {
    338c:	429d      	cmp	r5, r3
    338e:	da01      	bge.n	3394 <encode_float+0x2f4>
				conv->pad0_value = precision;
    3390:	f8ca 5004 	str.w	r5, [sl, #4]
			}

			precision -= conv->pad0_value;
    3394:	f8da 3004 	ldr.w	r3, [sl, #4]
    3398:	1aed      	subs	r5, r5, r3
			conv->pad_postdp = (conv->pad0_value > 0);
    339a:	2b00      	cmp	r3, #0
    339c:	bfd4      	ite	le
    339e:	2300      	movle	r3, #0
    33a0:	2301      	movgt	r3, #1
    33a2:	f89a 2002 	ldrb.w	r2, [sl, #2]
    33a6:	f363 1245 	bfi	r2, r3, #5, #1
    33aa:	f88a 2002 	strb.w	r2, [sl, #2]
    33ae:	e01b      	b.n	33e8 <encode_float+0x348>
			*buf++ = '0';
    33b0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    33b2:	2330      	movs	r3, #48	; 0x30
    33b4:	f806 3b01 	strb.w	r3, [r6], #1
    33b8:	e7d5      	b.n	3366 <encode_float+0x2c6>
		}
	} else { /* e or E */
		/* Emit the one digit before the decimal.  If it's not zero,
		 * this is significant so reduce the base-10 exponent.
		 */
		*buf = _get_digit(&fract, &digit_count);
    33ba:	a905      	add	r1, sp, #20
    33bc:	a806      	add	r0, sp, #24
    33be:	f00d ff1f 	bl	11200 <_get_digit>
    33c2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    33c4:	f806 0b01 	strb.w	r0, [r6], #1
		if (*buf++ != '0') {
    33c8:	2830      	cmp	r0, #48	; 0x30
    33ca:	d001      	beq.n	33d0 <encode_float+0x330>
			decexp--;
    33cc:	f108 38ff 	add.w	r8, r8, #4294967295
		}

		/* Emit the decimal point only if required by the alternative
		 * format, or if more digits are to follow.
		 */
		if (conv->flag_hash || (precision > 0)) {
    33d0:	f89a 3000 	ldrb.w	r3, [sl]
    33d4:	f013 0f20 	tst.w	r3, #32
    33d8:	d101      	bne.n	33de <encode_float+0x33e>
    33da:	2d00      	cmp	r5, #0
    33dc:	dd04      	ble.n	33e8 <encode_float+0x348>
			*buf++ = '.';
    33de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    33e0:	1c9e      	adds	r6, r3, #2
    33e2:	232e      	movs	r3, #46	; 0x2e
    33e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    33e6:	7053      	strb	r3, [r2, #1]
		}
	}

	while (precision > 0 && digit_count > 0) {
    33e8:	2d00      	cmp	r5, #0
    33ea:	dd0d      	ble.n	3408 <encode_float+0x368>
    33ec:	9b05      	ldr	r3, [sp, #20]
    33ee:	2b00      	cmp	r3, #0
    33f0:	dd0a      	ble.n	3408 <encode_float+0x368>
		*buf++ = _get_digit(&fract, &digit_count);
    33f2:	a905      	add	r1, sp, #20
    33f4:	a806      	add	r0, sp, #24
    33f6:	f00d ff03 	bl	11200 <_get_digit>
    33fa:	f806 0b01 	strb.w	r0, [r6], #1
		precision--;
    33fe:	3d01      	subs	r5, #1
    3400:	e7f2      	b.n	33e8 <encode_float+0x348>
    3402:	bf00      	nop
    3404:	00017371 	.word	0x00017371
	}

	conv->pad0_pre_exp = precision;
    3408:	f8ca 5008 	str.w	r5, [sl, #8]

	if (prune_zero) {
    340c:	b157      	cbz	r7, 3424 <encode_float+0x384>
		conv->pad0_pre_exp = 0;
    340e:	2300      	movs	r3, #0
    3410:	f8ca 3008 	str.w	r3, [sl, #8]
		while (*--buf == '0') {
    3414:	4633      	mov	r3, r6
    3416:	461e      	mov	r6, r3
    3418:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    341c:	2a30      	cmp	r2, #48	; 0x30
    341e:	d0fa      	beq.n	3416 <encode_float+0x376>
			;
		}
		if (*buf != '.') {
    3420:	2a2e      	cmp	r2, #46	; 0x2e
    3422:	d043      	beq.n	34ac <encode_float+0x40c>
			buf++;
		}
	}

	/* Emit the explicit exponent, if format requires it. */
	if ((c == 'e') || (c == 'E')) {
    3424:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
    3428:	d002      	beq.n	3430 <encode_float+0x390>
    342a:	f1bb 0f45 	cmp.w	fp, #69	; 0x45
    342e:	d12a      	bne.n	3486 <encode_float+0x3e6>
		*buf++ = c;
    3430:	f886 b000 	strb.w	fp, [r6]
		if (decexp < 0) {
    3434:	f1b8 0f00 	cmp.w	r8, #0
    3438:	db3a      	blt.n	34b0 <encode_float+0x410>
			decexp = -decexp;
			*buf++ = '-';
		} else {
			*buf++ = '+';
    343a:	1cb2      	adds	r2, r6, #2
    343c:	232b      	movs	r3, #43	; 0x2b
    343e:	7073      	strb	r3, [r6, #1]
		}

		/* At most 3 digits to the decimal.  Spit them out. */
		if (decexp >= 100) {
    3440:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
    3444:	dd0d      	ble.n	3462 <encode_float+0x3c2>
			*buf++ = (decexp / 100) + '0';
    3446:	4920      	ldr	r1, [pc, #128]	; (34c8 <encode_float+0x428>)
    3448:	fb81 3108 	smull	r3, r1, r1, r8
    344c:	ea4f 73e8 	mov.w	r3, r8, asr #31
    3450:	ebc3 1361 	rsb	r3, r3, r1, asr #5
    3454:	f103 0130 	add.w	r1, r3, #48	; 0x30
    3458:	f802 1b01 	strb.w	r1, [r2], #1
			decexp %= 100;
    345c:	2164      	movs	r1, #100	; 0x64
    345e:	fb01 8813 	mls	r8, r1, r3, r8
		}

		*buf++ = (decexp / 10) + '0';
    3462:	491a      	ldr	r1, [pc, #104]	; (34cc <encode_float+0x42c>)
    3464:	fb81 3108 	smull	r3, r1, r1, r8
    3468:	ea4f 73e8 	mov.w	r3, r8, asr #31
    346c:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
    3470:	f103 0130 	add.w	r1, r3, #48	; 0x30
    3474:	4616      	mov	r6, r2
    3476:	f806 1b02 	strb.w	r1, [r6], #2
		*buf++ = (decexp % 10) + '0';
    347a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    347e:	eba8 0343 	sub.w	r3, r8, r3, lsl #1
    3482:	3330      	adds	r3, #48	; 0x30
    3484:	7053      	strb	r3, [r2, #1]
	}

	/* Cache whether there's padding required */
	conv->pad_fp = (conv->pad0_value > 0)
    3486:	f8da 3004 	ldr.w	r3, [sl, #4]
		|| (conv->pad0_pre_exp > 0);
    348a:	2b00      	cmp	r3, #0
    348c:	dd16      	ble.n	34bc <encode_float+0x41c>
    348e:	2401      	movs	r4, #1
	conv->pad_fp = (conv->pad0_value > 0)
    3490:	f89a 3002 	ldrb.w	r3, [sl, #2]
    3494:	f364 1386 	bfi	r3, r4, #6, #1
    3498:	f88a 3002 	strb.w	r3, [sl, #2]

	/* Set the end of the encoded sequence, and return its start.  Also
	 * store EOS as a non-digit/non-decimal value so we don't have to
	 * check against bpe when iterating in multiple places.
	 */
	*bpe = buf;
    349c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    349e:	601e      	str	r6, [r3, #0]
	*buf = 0;
    34a0:	2300      	movs	r3, #0
    34a2:	7033      	strb	r3, [r6, #0]
	return bps;
}
    34a4:	9813      	ldr	r0, [sp, #76]	; 0x4c
    34a6:	b009      	add	sp, #36	; 0x24
    34a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (*--buf == '0') {
    34ac:	461e      	mov	r6, r3
    34ae:	e7b9      	b.n	3424 <encode_float+0x384>
			decexp = -decexp;
    34b0:	f1c8 0800 	rsb	r8, r8, #0
			*buf++ = '-';
    34b4:	1cb2      	adds	r2, r6, #2
    34b6:	232d      	movs	r3, #45	; 0x2d
    34b8:	7073      	strb	r3, [r6, #1]
    34ba:	e7c1      	b.n	3440 <encode_float+0x3a0>
		|| (conv->pad0_pre_exp > 0);
    34bc:	f8da 3008 	ldr.w	r3, [sl, #8]
    34c0:	2b00      	cmp	r3, #0
    34c2:	dde5      	ble.n	3490 <encode_float+0x3f0>
    34c4:	2401      	movs	r4, #1
    34c6:	e7e3      	b.n	3490 <encode_float+0x3f0>
    34c8:	51eb851f 	.word	0x51eb851f
    34cc:	66666667 	.word	0x66666667

000034d0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    34d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34d4:	b099      	sub	sp, #100	; 0x64
    34d6:	4606      	mov	r6, r0
    34d8:	460d      	mov	r5, r1
    34da:	4617      	mov	r7, r2
    34dc:	9305      	str	r3, [sp, #20]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    34de:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    34e0:	e000      	b.n	34e4 <cbvprintf+0x14>
		if (*fp != '%') {
			OUTC(*fp++);
    34e2:	3401      	adds	r4, #1
	while (*fp != 0) {
    34e4:	7838      	ldrb	r0, [r7, #0]
    34e6:	2800      	cmp	r0, #0
    34e8:	f000 8593 	beq.w	4012 <cbvprintf+0xb42>
		if (*fp != '%') {
    34ec:	2825      	cmp	r0, #37	; 0x25
    34ee:	d007      	beq.n	3500 <cbvprintf+0x30>
			OUTC(*fp++);
    34f0:	3701      	adds	r7, #1
    34f2:	4629      	mov	r1, r5
    34f4:	47b0      	blx	r6
    34f6:	2800      	cmp	r0, #0
    34f8:	daf3      	bge.n	34e2 <cbvprintf+0x12>
	}

	return count;
#undef OUTS
#undef OUTC
}
    34fa:	b019      	add	sp, #100	; 0x64
    34fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} state = {
    3500:	2300      	movs	r3, #0
    3502:	930a      	str	r3, [sp, #40]	; 0x28
    3504:	930b      	str	r3, [sp, #44]	; 0x2c
    3506:	930f      	str	r3, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
    3508:	f10d 025d 	add.w	r2, sp, #93	; 0x5d
    350c:	9208      	str	r2, [sp, #32]
		char sign = 0;
    350e:	f88d 301f 	strb.w	r3, [sp, #31]
	*conv = (struct conversion) {
    3512:	930c      	str	r3, [sp, #48]	; 0x30
    3514:	930d      	str	r3, [sp, #52]	; 0x34
    3516:	930e      	str	r3, [sp, #56]	; 0x38
	++sp;
    3518:	f107 0901 	add.w	r9, r7, #1
	if (*sp == '%') {
    351c:	787b      	ldrb	r3, [r7, #1]
    351e:	2b25      	cmp	r3, #37	; 0x25
    3520:	d002      	beq.n	3528 <cbvprintf+0x58>
	bool loop = true;
    3522:	f04f 0801 	mov.w	r8, #1
    3526:	e031      	b.n	358c <cbvprintf+0xbc>
		conv->specifier = *sp++;
    3528:	f107 0902 	add.w	r9, r7, #2
    352c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		return sp;
    3530:	e1ae      	b.n	3890 <cbvprintf+0x3c0>
			conv->flag_dash = true;
    3532:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    3536:	f043 0304 	orr.w	r3, r3, #4
    353a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (loop) {
    353e:	f1b8 0f00 	cmp.w	r8, #0
    3542:	d020      	beq.n	3586 <cbvprintf+0xb6>
			++sp;
    3544:	f109 0901 	add.w	r9, r9, #1
    3548:	e01d      	b.n	3586 <cbvprintf+0xb6>
			conv->flag_plus = true;
    354a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    354e:	f043 0308 	orr.w	r3, r3, #8
    3552:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
    3556:	e7f2      	b.n	353e <cbvprintf+0x6e>
			conv->flag_space = true;
    3558:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    355c:	f043 0310 	orr.w	r3, r3, #16
    3560:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
    3564:	e7eb      	b.n	353e <cbvprintf+0x6e>
			conv->flag_hash = true;
    3566:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    356a:	f043 0320 	orr.w	r3, r3, #32
    356e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
    3572:	e7e4      	b.n	353e <cbvprintf+0x6e>
			conv->flag_zero = true;
    3574:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    3578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    357c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
    3580:	e7dd      	b.n	353e <cbvprintf+0x6e>
		switch (*sp) {
    3582:	f04f 0800 	mov.w	r8, #0
	} while (loop);
    3586:	f1b8 0f00 	cmp.w	r8, #0
    358a:	d029      	beq.n	35e0 <cbvprintf+0x110>
		switch (*sp) {
    358c:	f899 3000 	ldrb.w	r3, [r9]
    3590:	3b20      	subs	r3, #32
    3592:	2b10      	cmp	r3, #16
    3594:	d8f5      	bhi.n	3582 <cbvprintf+0xb2>
    3596:	a201      	add	r2, pc, #4	; (adr r2, 359c <cbvprintf+0xcc>)
    3598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    359c:	00003559 	.word	0x00003559
    35a0:	00003583 	.word	0x00003583
    35a4:	00003583 	.word	0x00003583
    35a8:	00003567 	.word	0x00003567
    35ac:	00003583 	.word	0x00003583
    35b0:	00003583 	.word	0x00003583
    35b4:	00003583 	.word	0x00003583
    35b8:	00003583 	.word	0x00003583
    35bc:	00003583 	.word	0x00003583
    35c0:	00003583 	.word	0x00003583
    35c4:	00003583 	.word	0x00003583
    35c8:	0000354b 	.word	0x0000354b
    35cc:	00003583 	.word	0x00003583
    35d0:	00003533 	.word	0x00003533
    35d4:	00003583 	.word	0x00003583
    35d8:	00003583 	.word	0x00003583
    35dc:	00003575 	.word	0x00003575
	if (conv->flag_zero && conv->flag_dash) {
    35e0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    35e4:	f003 0344 	and.w	r3, r3, #68	; 0x44
    35e8:	2b44      	cmp	r3, #68	; 0x44
    35ea:	d06d      	beq.n	36c8 <cbvprintf+0x1f8>
	sp = extract_width(conv, sp);
    35ec:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
	conv->width_present = true;
    35f0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    35f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    35f8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	if (*sp == '*') {
    35fc:	f899 3000 	ldrb.w	r3, [r9]
    3600:	2b2a      	cmp	r3, #42	; 0x2a
    3602:	d068      	beq.n	36d6 <cbvprintf+0x206>
	size_t width = extract_decimal(&sp);
    3604:	a809      	add	r0, sp, #36	; 0x24
    3606:	f7ff fcc5 	bl	2f94 <extract_decimal>
	if (sp != wp) {
    360a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    360c:	4599      	cmp	r9, r3
    360e:	d012      	beq.n	3636 <cbvprintf+0x166>
		conv->width_present = true;
    3610:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    3614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3618:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		conv->width_value = width;
    361c:	900d      	str	r0, [sp, #52]	; 0x34
		conv->unsupported |= ((conv->width_value < 0)
    361e:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    3622:	2800      	cmp	r0, #0
    3624:	db60      	blt.n	36e8 <cbvprintf+0x218>
    3626:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    3628:	4313      	orrs	r3, r2
    362a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    362e:	f363 0241 	bfi	r2, r3, #1, #1
    3632:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    3636:	9b09      	ldr	r3, [sp, #36]	; 0x24
	sp = extract_prec(conv, sp);
    3638:	9309      	str	r3, [sp, #36]	; 0x24
	conv->prec_present = (*sp == '.');
    363a:	781b      	ldrb	r3, [r3, #0]
    363c:	2b2e      	cmp	r3, #46	; 0x2e
    363e:	bf14      	ite	ne
    3640:	2300      	movne	r3, #0
    3642:	2301      	moveq	r3, #1
    3644:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    3648:	f363 0241 	bfi	r2, r3, #1, #1
    364c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    3650:	2b00      	cmp	r3, #0
    3652:	d04b      	beq.n	36ec <cbvprintf+0x21c>
	++sp;
    3654:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3656:	1c5a      	adds	r2, r3, #1
    3658:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    365a:	785b      	ldrb	r3, [r3, #1]
    365c:	2b2a      	cmp	r3, #42	; 0x2a
    365e:	d048      	beq.n	36f2 <cbvprintf+0x222>
	size_t prec = extract_decimal(&sp);
    3660:	a809      	add	r0, sp, #36	; 0x24
    3662:	f7ff fc97 	bl	2f94 <extract_decimal>
	conv->prec_value = prec;
    3666:	900e      	str	r0, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    3668:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    366c:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    3670:	2800      	cmp	r0, #0
    3672:	db47      	blt.n	3704 <cbvprintf+0x234>
    3674:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    3676:	4313      	orrs	r3, r2
    3678:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    367c:	f363 0241 	bfi	r2, r3, #1, #1
    3680:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    3684:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
	switch (*sp) {
    3688:	f899 3000 	ldrb.w	r3, [r9]
    368c:	3b4c      	subs	r3, #76	; 0x4c
    368e:	2b2e      	cmp	r3, #46	; 0x2e
    3690:	f200 80dc 	bhi.w	384c <cbvprintf+0x37c>
    3694:	e8df f003 	tbb	[pc, r3]
    3698:	dadadaca 	.word	0xdadadaca
    369c:	dadadada 	.word	0xdadadada
    36a0:	dadadada 	.word	0xdadadada
    36a4:	dadadada 	.word	0xdadadada
    36a8:	dadadada 	.word	0xdadadada
    36ac:	dadadada 	.word	0xdadadada
    36b0:	dadadada 	.word	0xdadadada
    36b4:	da6ada38 	.word	0xda6ada38
    36b8:	dadada51 	.word	0xdadada51
    36bc:	dadadada 	.word	0xdadadada
    36c0:	dadadac0 	.word	0xdadadac0
    36c4:	dada      	.short	0xdada
    36c6:	b6          	.byte	0xb6
    36c7:	00          	.byte	0x00
		conv->flag_zero = false;
    36c8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    36cc:	f36f 1386 	bfc	r3, #6, #1
    36d0:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    36d4:	e78a      	b.n	35ec <cbvprintf+0x11c>
		conv->width_star = true;
    36d6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    36da:	f043 0301 	orr.w	r3, r3, #1
    36de:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		return ++sp;
    36e2:	464b      	mov	r3, r9
    36e4:	3301      	adds	r3, #1
    36e6:	e7a7      	b.n	3638 <cbvprintf+0x168>
				      || (width != (size_t)conv->width_value));
    36e8:	2201      	movs	r2, #1
    36ea:	e79d      	b.n	3628 <cbvprintf+0x158>
		return sp;
    36ec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    36f0:	e7ca      	b.n	3688 <cbvprintf+0x1b8>
		conv->prec_star = true;
    36f2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    36f6:	f043 0304 	orr.w	r3, r3, #4
    36fa:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		return ++sp;
    36fe:	f102 0901 	add.w	r9, r2, #1
    3702:	e7c1      	b.n	3688 <cbvprintf+0x1b8>
			      || (prec != (size_t)conv->prec_value));
    3704:	2201      	movs	r2, #1
    3706:	e7b6      	b.n	3676 <cbvprintf+0x1a6>
		if (*++sp == 'h') {
    3708:	f109 0201 	add.w	r2, r9, #1
    370c:	f899 3001 	ldrb.w	r3, [r9, #1]
    3710:	2b68      	cmp	r3, #104	; 0x68
    3712:	d008      	beq.n	3726 <cbvprintf+0x256>
			conv->length_mod = LENGTH_H;
    3714:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    3718:	2102      	movs	r1, #2
    371a:	f361 03c6 	bfi	r3, r1, #3, #4
    371e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		if (*++sp == 'h') {
    3722:	4691      	mov	r9, r2
    3724:	e02b      	b.n	377e <cbvprintf+0x2ae>
			conv->length_mod = LENGTH_HH;
    3726:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    372a:	2201      	movs	r2, #1
    372c:	f362 03c6 	bfi	r3, r2, #3, #4
    3730:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
			++sp;
    3734:	f109 0902 	add.w	r9, r9, #2
    3738:	e021      	b.n	377e <cbvprintf+0x2ae>
		if (*++sp == 'l') {
    373a:	f109 0201 	add.w	r2, r9, #1
    373e:	f899 3001 	ldrb.w	r3, [r9, #1]
    3742:	2b6c      	cmp	r3, #108	; 0x6c
    3744:	d008      	beq.n	3758 <cbvprintf+0x288>
			conv->length_mod = LENGTH_L;
    3746:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    374a:	2103      	movs	r1, #3
    374c:	f361 03c6 	bfi	r3, r1, #3, #4
    3750:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		if (*++sp == 'l') {
    3754:	4691      	mov	r9, r2
    3756:	e012      	b.n	377e <cbvprintf+0x2ae>
			conv->length_mod = LENGTH_LL;
    3758:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    375c:	2204      	movs	r2, #4
    375e:	f362 03c6 	bfi	r3, r2, #3, #4
    3762:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
			++sp;
    3766:	f109 0902 	add.w	r9, r9, #2
    376a:	e008      	b.n	377e <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
    376c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    3770:	2205      	movs	r2, #5
    3772:	f362 03c6 	bfi	r3, r2, #3, #4
    3776:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
    377a:	f109 0901 	add.w	r9, r9, #1
	conv->specifier = *sp++;
    377e:	f819 2b01 	ldrb.w	r2, [r9], #1
    3782:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    3786:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
    378a:	2b37      	cmp	r3, #55	; 0x37
    378c:	f200 8185 	bhi.w	3a9a <cbvprintf+0x5ca>
    3790:	e8df f013 	tbh	[pc, r3, lsl #1]
    3794:	01830131 	.word	0x01830131
    3798:	01830183 	.word	0x01830183
    379c:	01310131 	.word	0x01310131
    37a0:	01830131 	.word	0x01830131
    37a4:	01830183 	.word	0x01830183
    37a8:	01830183 	.word	0x01830183
    37ac:	01830183 	.word	0x01830183
    37b0:	01830183 	.word	0x01830183
    37b4:	01830183 	.word	0x01830183
    37b8:	01830183 	.word	0x01830183
    37bc:	01830183 	.word	0x01830183
    37c0:	011c0183 	.word	0x011c0183
    37c4:	01830183 	.word	0x01830183
    37c8:	01830183 	.word	0x01830183
    37cc:	01830183 	.word	0x01830183
    37d0:	01830183 	.word	0x01830183
    37d4:	01830131 	.word	0x01830131
    37d8:	0063011c 	.word	0x0063011c
    37dc:	01310131 	.word	0x01310131
    37e0:	01830131 	.word	0x01830131
    37e4:	01830063 	.word	0x01830063
    37e8:	01830183 	.word	0x01830183
    37ec:	01620183 	.word	0x01620183
    37f0:	0173011c 	.word	0x0173011c
    37f4:	01830183 	.word	0x01830183
    37f8:	01830173 	.word	0x01830173
    37fc:	0183011c 	.word	0x0183011c
    3800:	011c0183 	.word	0x011c0183
		conv->length_mod = LENGTH_Z;
    3804:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    3808:	2206      	movs	r2, #6
    380a:	f362 03c6 	bfi	r3, r2, #3, #4
    380e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
    3812:	f109 0901 	add.w	r9, r9, #1
		break;
    3816:	e7b2      	b.n	377e <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
    3818:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    381c:	2207      	movs	r2, #7
    381e:	f362 03c6 	bfi	r3, r2, #3, #4
    3822:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
    3826:	f109 0901 	add.w	r9, r9, #1
		break;
    382a:	e7a8      	b.n	377e <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_UPPER_L;
    382c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    3830:	2208      	movs	r2, #8
    3832:	f362 03c6 	bfi	r3, r2, #3, #4
    3836:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
    383a:	f109 0901 	add.w	r9, r9, #1
		conv->unsupported = true;
    383e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    3842:	f043 0302 	orr.w	r3, r3, #2
    3846:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		break;
    384a:	e798      	b.n	377e <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_NONE;
    384c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    3850:	f36f 03c6 	bfc	r3, #3, #4
    3854:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    3858:	e791      	b.n	377e <cbvprintf+0x2ae>
		conv->specifier_cat = SPECIFIER_SINT;
    385a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    385e:	2101      	movs	r1, #1
    3860:	f361 0302 	bfi	r3, r1, #0, #3
    3864:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    3868:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    386c:	f003 0378 	and.w	r3, r3, #120	; 0x78
    3870:	2b40      	cmp	r3, #64	; 0x40
    3872:	f000 80b3 	beq.w	39dc <cbvprintf+0x50c>
		if (conv->specifier == 'c') {
    3876:	2a63      	cmp	r2, #99	; 0x63
    3878:	f000 80b7 	beq.w	39ea <cbvprintf+0x51a>
	conv->unsupported |= unsupported;
    387c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    3880:	f3c3 0240 	ubfx	r2, r3, #1, #1
    3884:	ea48 0802 	orr.w	r8, r8, r2
    3888:	f368 0341 	bfi	r3, r8, #1, #1
    388c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (conv->width_star) {
    3890:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    3894:	f013 0f01 	tst.w	r3, #1
    3898:	f000 8112 	beq.w	3ac0 <cbvprintf+0x5f0>
			width = va_arg(ap, int);
    389c:	9b05      	ldr	r3, [sp, #20]
    389e:	1d1a      	adds	r2, r3, #4
    38a0:	9205      	str	r2, [sp, #20]
    38a2:	f8d3 8000 	ldr.w	r8, [r3]
			if (width < 0) {
    38a6:	f1b8 0f00 	cmp.w	r8, #0
    38aa:	f2c0 8100 	blt.w	3aae <cbvprintf+0x5de>
		if (conv->prec_star) {
    38ae:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    38b2:	f013 0f04 	tst.w	r3, #4
    38b6:	f000 8116 	beq.w	3ae6 <cbvprintf+0x616>
			int arg = va_arg(ap, int);
    38ba:	9b05      	ldr	r3, [sp, #20]
    38bc:	1d1a      	adds	r2, r3, #4
    38be:	9205      	str	r2, [sp, #20]
    38c0:	f8d3 a000 	ldr.w	sl, [r3]
			if (arg < 0) {
    38c4:	f1ba 0f00 	cmp.w	sl, #0
    38c8:	f2c0 8104 	blt.w	3ad4 <cbvprintf+0x604>
		conv->pad0_value = 0;
    38cc:	2300      	movs	r3, #0
    38ce:	930d      	str	r3, [sp, #52]	; 0x34
		conv->pad0_pre_exp = 0;
    38d0:	930e      	str	r3, [sp, #56]	; 0x38
		    && (conv->specifier_cat == SPECIFIER_FP)
    38d2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    38d6:	f003 0307 	and.w	r3, r3, #7
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    38da:	2b04      	cmp	r3, #4
    38dc:	f000 810c 	beq.w	3af8 <cbvprintf+0x628>
			= (enum specifier_cat_enum)conv->specifier_cat;
    38e0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    38e4:	f003 0307 	and.w	r3, r3, #7
			= (enum length_mod_enum)conv->length_mod;
    38e8:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
    38ec:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    38f0:	2b01      	cmp	r3, #1
    38f2:	f000 8111 	beq.w	3b18 <cbvprintf+0x648>
		} else if (specifier_cat == SPECIFIER_UINT) {
    38f6:	2b02      	cmp	r3, #2
    38f8:	f000 8156 	beq.w	3ba8 <cbvprintf+0x6d8>
		} else if (specifier_cat == SPECIFIER_FP) {
    38fc:	2b04      	cmp	r3, #4
    38fe:	f000 81a7 	beq.w	3c50 <cbvprintf+0x780>
		} else if (specifier_cat == SPECIFIER_PTR) {
    3902:	2b03      	cmp	r3, #3
    3904:	f000 81be 	beq.w	3c84 <cbvprintf+0x7b4>
		if (conv->invalid || conv->unsupported) {
    3908:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    390c:	f012 0f03 	tst.w	r2, #3
    3910:	f040 81be 	bne.w	3c90 <cbvprintf+0x7c0>
		switch (conv->specifier) {
    3914:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    3918:	3b25      	subs	r3, #37	; 0x25
    391a:	2b53      	cmp	r3, #83	; 0x53
    391c:	f200 81cb 	bhi.w	3cb6 <cbvprintf+0x7e6>
    3920:	e8df f013 	tbh	[pc, r3, lsl #1]
    3924:	01c901c2 	.word	0x01c901c2
    3928:	01c901c9 	.word	0x01c901c9
    392c:	01c901c9 	.word	0x01c901c9
    3930:	01c901c9 	.word	0x01c901c9
    3934:	01c901c9 	.word	0x01c901c9
    3938:	01c901c9 	.word	0x01c901c9
    393c:	01c901c9 	.word	0x01c901c9
    3940:	01c901c9 	.word	0x01c901c9
    3944:	01c901c9 	.word	0x01c901c9
    3948:	01c901c9 	.word	0x01c901c9
    394c:	01c901c9 	.word	0x01c901c9
    3950:	01c901c9 	.word	0x01c901c9
    3954:	01c901c9 	.word	0x01c901c9
    3958:	01c901c9 	.word	0x01c901c9
    395c:	01c9028a 	.word	0x01c9028a
    3960:	01c901c9 	.word	0x01c901c9
    3964:	028a028a 	.word	0x028a028a
    3968:	01c9028a 	.word	0x01c9028a
    396c:	01c901c9 	.word	0x01c901c9
    3970:	01c901c9 	.word	0x01c901c9
    3974:	01c901c9 	.word	0x01c901c9
    3978:	01c901c9 	.word	0x01c901c9
    397c:	01c901c9 	.word	0x01c901c9
    3980:	01c901c9 	.word	0x01c901c9
    3984:	01c901c9 	.word	0x01c901c9
    3988:	022401c9 	.word	0x022401c9
    398c:	01c901c9 	.word	0x01c901c9
    3990:	01c901c9 	.word	0x01c901c9
    3994:	01c901c9 	.word	0x01c901c9
    3998:	01c901c9 	.word	0x01c901c9
    399c:	01c9028a 	.word	0x01c9028a
    39a0:	0216020e 	.word	0x0216020e
    39a4:	028a028a 	.word	0x028a028a
    39a8:	01c9028a 	.word	0x01c9028a
    39ac:	01c90216 	.word	0x01c90216
    39b0:	01c901c9 	.word	0x01c901c9
    39b4:	026601c9 	.word	0x026601c9
    39b8:	024e0224 	.word	0x024e0224
    39bc:	01c901c9 	.word	0x01c901c9
    39c0:	01c901cb 	.word	0x01c901cb
    39c4:	01c90224 	.word	0x01c90224
    39c8:	022401c9 	.word	0x022401c9
		conv->specifier_cat = SPECIFIER_UINT;
    39cc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    39d0:	2102      	movs	r1, #2
    39d2:	f361 0302 	bfi	r3, r1, #0, #3
    39d6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    39da:	e745      	b.n	3868 <cbvprintf+0x398>
			conv->invalid = true;
    39dc:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
    39e0:	f041 0101 	orr.w	r1, r1, #1
    39e4:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    39e8:	e745      	b.n	3876 <cbvprintf+0x3a6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    39ea:	f1b3 0800 	subs.w	r8, r3, #0
    39ee:	bf18      	it	ne
    39f0:	f04f 0801 	movne.w	r8, #1
    39f4:	e742      	b.n	387c <cbvprintf+0x3ac>
		conv->specifier_cat = SPECIFIER_FP;
    39f6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    39fa:	2104      	movs	r1, #4
    39fc:	f361 0302 	bfi	r3, r1, #0, #3
    3a00:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			|| (conv->specifier == 'A');
    3a04:	2a61      	cmp	r2, #97	; 0x61
    3a06:	d01f      	beq.n	3a48 <cbvprintf+0x578>
    3a08:	2a41      	cmp	r2, #65	; 0x41
    3a0a:	d01b      	beq.n	3a44 <cbvprintf+0x574>
    3a0c:	2200      	movs	r2, #0
		conv->specifier_a = (conv->specifier == 'a')
    3a0e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    3a12:	f362 13c7 	bfi	r3, r2, #7, #1
    3a16:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		if (conv->specifier_a
    3a1a:	b2da      	uxtb	r2, r3
    3a1c:	f013 0f80 	tst.w	r3, #128	; 0x80
    3a20:	d142      	bne.n	3aa8 <cbvprintf+0x5d8>
		if (conv->length_mod == LENGTH_L) {
    3a22:	f002 0278 	and.w	r2, r2, #120	; 0x78
    3a26:	2a18      	cmp	r2, #24
    3a28:	d010      	beq.n	3a4c <cbvprintf+0x57c>
		} else if ((conv->length_mod != LENGTH_NONE)
    3a2a:	2a00      	cmp	r2, #0
    3a2c:	f43f af26 	beq.w	387c <cbvprintf+0x3ac>
			   && (conv->length_mod != LENGTH_UPPER_L)) {
    3a30:	2a40      	cmp	r2, #64	; 0x40
    3a32:	f43f af23 	beq.w	387c <cbvprintf+0x3ac>
			conv->invalid = true;
    3a36:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    3a3a:	f043 0301 	orr.w	r3, r3, #1
    3a3e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    3a42:	e71b      	b.n	387c <cbvprintf+0x3ac>
			|| (conv->specifier == 'A');
    3a44:	2201      	movs	r2, #1
    3a46:	e7e2      	b.n	3a0e <cbvprintf+0x53e>
    3a48:	2201      	movs	r2, #1
    3a4a:	e7e0      	b.n	3a0e <cbvprintf+0x53e>
			conv->length_mod = LENGTH_NONE;
    3a4c:	b2db      	uxtb	r3, r3
    3a4e:	f36f 03c6 	bfc	r3, #3, #4
    3a52:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    3a56:	e711      	b.n	387c <cbvprintf+0x3ac>
		conv->specifier_cat = SPECIFIER_PTR;
    3a58:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    3a5c:	2203      	movs	r2, #3
    3a5e:	f362 0302 	bfi	r3, r2, #0, #3
    3a62:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    3a66:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    3a6a:	f003 0378 	and.w	r3, r3, #120	; 0x78
    3a6e:	2b40      	cmp	r3, #64	; 0x40
    3a70:	f47f af04 	bne.w	387c <cbvprintf+0x3ac>
			unsupported = true;
    3a74:	f04f 0801 	mov.w	r8, #1
    3a78:	e700      	b.n	387c <cbvprintf+0x3ac>
		conv->specifier_cat = SPECIFIER_PTR;
    3a7a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    3a7e:	2203      	movs	r2, #3
    3a80:	f362 0302 	bfi	r3, r2, #0, #3
    3a84:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    3a88:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    3a8c:	f013 0f78 	tst.w	r3, #120	; 0x78
    3a90:	f43f aef4 	beq.w	387c <cbvprintf+0x3ac>
			unsupported = true;
    3a94:	f04f 0801 	mov.w	r8, #1
    3a98:	e6f0      	b.n	387c <cbvprintf+0x3ac>
		conv->invalid = true;
    3a9a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    3a9e:	f043 0301 	orr.w	r3, r3, #1
    3aa2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		break;
    3aa6:	e6e9      	b.n	387c <cbvprintf+0x3ac>
			unsupported = true;
    3aa8:	f04f 0801 	mov.w	r8, #1
    3aac:	e6e6      	b.n	387c <cbvprintf+0x3ac>
				conv->flag_dash = true;
    3aae:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    3ab2:	f043 0304 	orr.w	r3, r3, #4
    3ab6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
				width = -width;
    3aba:	f1c8 0800 	rsb	r8, r8, #0
    3abe:	e6f6      	b.n	38ae <cbvprintf+0x3de>
		} else if (conv->width_present) {
    3ac0:	f99d 3030 	ldrsb.w	r3, [sp, #48]	; 0x30
    3ac4:	2b00      	cmp	r3, #0
    3ac6:	db02      	blt.n	3ace <cbvprintf+0x5fe>
		int width = -1;
    3ac8:	f04f 38ff 	mov.w	r8, #4294967295
    3acc:	e6ef      	b.n	38ae <cbvprintf+0x3de>
			width = conv->width_value;
    3ace:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    3ad2:	e6ec      	b.n	38ae <cbvprintf+0x3de>
				conv->prec_present = false;
    3ad4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    3ad8:	f36f 0341 	bfc	r3, #1, #1
    3adc:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    3ae0:	f04f 3aff 	mov.w	sl, #4294967295
    3ae4:	e6f2      	b.n	38cc <cbvprintf+0x3fc>
		} else if (conv->prec_present) {
    3ae6:	f013 0f02 	tst.w	r3, #2
    3aea:	d002      	beq.n	3af2 <cbvprintf+0x622>
			precision = conv->prec_value;
    3aec:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    3af0:	e6ec      	b.n	38cc <cbvprintf+0x3fc>
		int precision = -1;
    3af2:	f04f 3aff 	mov.w	sl, #4294967295
    3af6:	e6e9      	b.n	38cc <cbvprintf+0x3fc>
		    && !conv->prec_present) {
    3af8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    3afc:	f013 0f02 	tst.w	r3, #2
    3b00:	f47f aeee 	bne.w	38e0 <cbvprintf+0x410>
			if (conv->specifier_a) {
    3b04:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
    3b08:	2b00      	cmp	r3, #0
    3b0a:	db02      	blt.n	3b12 <cbvprintf+0x642>
				precision = 6;
    3b0c:	f04f 0a06 	mov.w	sl, #6
    3b10:	e6e6      	b.n	38e0 <cbvprintf+0x410>
				precision = FRACTION_HEX;
    3b12:	f04f 0a0d 	mov.w	sl, #13
    3b16:	e6e3      	b.n	38e0 <cbvprintf+0x410>
			switch (length_mod) {
    3b18:	1ecb      	subs	r3, r1, #3
    3b1a:	2b04      	cmp	r3, #4
    3b1c:	d804      	bhi.n	3b28 <cbvprintf+0x658>
    3b1e:	e8df f003 	tbb	[pc, r3]
    3b22:	1d0b      	.short	0x1d0b
    3b24:	3529      	.short	0x3529
    3b26:	35          	.byte	0x35
    3b27:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    3b28:	9b05      	ldr	r3, [sp, #20]
    3b2a:	1d1a      	adds	r2, r3, #4
    3b2c:	9205      	str	r2, [sp, #20]
    3b2e:	681a      	ldr	r2, [r3, #0]
    3b30:	17d3      	asrs	r3, r2, #31
    3b32:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    3b36:	e006      	b.n	3b46 <cbvprintf+0x676>
					value->sint = va_arg(ap, long);
    3b38:	9b05      	ldr	r3, [sp, #20]
    3b3a:	1d1a      	adds	r2, r3, #4
    3b3c:	9205      	str	r2, [sp, #20]
    3b3e:	681a      	ldr	r2, [r3, #0]
    3b40:	17d3      	asrs	r3, r2, #31
    3b42:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    3b46:	2901      	cmp	r1, #1
    3b48:	d028      	beq.n	3b9c <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
    3b4a:	2902      	cmp	r1, #2
    3b4c:	f47f aedc 	bne.w	3908 <cbvprintf+0x438>
				value->sint = (short)value->sint;
    3b50:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
    3b54:	17d3      	asrs	r3, r2, #31
    3b56:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    3b5a:	e6d5      	b.n	3908 <cbvprintf+0x438>
					(sint_value_type)va_arg(ap, long long);
    3b5c:	9b05      	ldr	r3, [sp, #20]
    3b5e:	3307      	adds	r3, #7
    3b60:	f023 0307 	bic.w	r3, r3, #7
    3b64:	f103 0208 	add.w	r2, r3, #8
    3b68:	9205      	str	r2, [sp, #20]
    3b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    3b6e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    3b72:	e7e8      	b.n	3b46 <cbvprintf+0x676>
					(sint_value_type)va_arg(ap, intmax_t);
    3b74:	9b05      	ldr	r3, [sp, #20]
    3b76:	3307      	adds	r3, #7
    3b78:	f023 0307 	bic.w	r3, r3, #7
    3b7c:	f103 0208 	add.w	r2, r3, #8
    3b80:	9205      	str	r2, [sp, #20]
    3b82:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    3b86:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    3b8a:	e7dc      	b.n	3b46 <cbvprintf+0x676>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    3b8c:	9b05      	ldr	r3, [sp, #20]
    3b8e:	1d1a      	adds	r2, r3, #4
    3b90:	9205      	str	r2, [sp, #20]
    3b92:	681a      	ldr	r2, [r3, #0]
    3b94:	17d3      	asrs	r3, r2, #31
				value->sint =
    3b96:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    3b9a:	e7d4      	b.n	3b46 <cbvprintf+0x676>
				value->sint = (char)value->sint;
    3b9c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    3ba0:	930a      	str	r3, [sp, #40]	; 0x28
    3ba2:	2300      	movs	r3, #0
    3ba4:	930b      	str	r3, [sp, #44]	; 0x2c
    3ba6:	e6af      	b.n	3908 <cbvprintf+0x438>
			switch (length_mod) {
    3ba8:	1ecb      	subs	r3, r1, #3
    3baa:	2b04      	cmp	r3, #4
    3bac:	d804      	bhi.n	3bb8 <cbvprintf+0x6e8>
    3bae:	e8df f003 	tbb	[pc, r3]
    3bb2:	1f0b      	.short	0x1f0b
    3bb4:	4135      	.short	0x4135
    3bb6:	41          	.byte	0x41
    3bb7:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    3bb8:	9b05      	ldr	r3, [sp, #20]
    3bba:	1d1a      	adds	r2, r3, #4
    3bbc:	9205      	str	r2, [sp, #20]
    3bbe:	681b      	ldr	r3, [r3, #0]
    3bc0:	930a      	str	r3, [sp, #40]	; 0x28
    3bc2:	2300      	movs	r3, #0
    3bc4:	930b      	str	r3, [sp, #44]	; 0x2c
				break;
    3bc6:	e01e      	b.n	3c06 <cbvprintf+0x736>
				    && (conv->specifier == 'c')) {
    3bc8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
				if ((!WCHAR_IS_SIGNED)
    3bcc:	2b63      	cmp	r3, #99	; 0x63
    3bce:	d007      	beq.n	3be0 <cbvprintf+0x710>
					value->uint = va_arg(ap, unsigned long);
    3bd0:	9b05      	ldr	r3, [sp, #20]
    3bd2:	1d1a      	adds	r2, r3, #4
    3bd4:	9205      	str	r2, [sp, #20]
    3bd6:	681b      	ldr	r3, [r3, #0]
    3bd8:	930a      	str	r3, [sp, #40]	; 0x28
    3bda:	2300      	movs	r3, #0
    3bdc:	930b      	str	r3, [sp, #44]	; 0x2c
    3bde:	e012      	b.n	3c06 <cbvprintf+0x736>
					value->uint = (wchar_t)va_arg(ap,
    3be0:	9b05      	ldr	r3, [sp, #20]
    3be2:	1d1a      	adds	r2, r3, #4
    3be4:	9205      	str	r2, [sp, #20]
    3be6:	681b      	ldr	r3, [r3, #0]
    3be8:	930a      	str	r3, [sp, #40]	; 0x28
    3bea:	2300      	movs	r3, #0
    3bec:	930b      	str	r3, [sp, #44]	; 0x2c
    3bee:	e00a      	b.n	3c06 <cbvprintf+0x736>
					(uint_value_type)va_arg(ap,
    3bf0:	9b05      	ldr	r3, [sp, #20]
    3bf2:	3307      	adds	r3, #7
    3bf4:	f023 0307 	bic.w	r3, r3, #7
    3bf8:	f103 0208 	add.w	r2, r3, #8
    3bfc:	9205      	str	r2, [sp, #20]
    3bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    3c02:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    3c06:	2901      	cmp	r1, #1
    3c08:	d01c      	beq.n	3c44 <cbvprintf+0x774>
			} else if (length_mod == LENGTH_H) {
    3c0a:	2902      	cmp	r1, #2
    3c0c:	f47f ae7c 	bne.w	3908 <cbvprintf+0x438>
				value->uint = (unsigned short)value->uint;
    3c10:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    3c14:	930a      	str	r3, [sp, #40]	; 0x28
    3c16:	2300      	movs	r3, #0
    3c18:	930b      	str	r3, [sp, #44]	; 0x2c
    3c1a:	e675      	b.n	3908 <cbvprintf+0x438>
					(uint_value_type)va_arg(ap,
    3c1c:	9b05      	ldr	r3, [sp, #20]
    3c1e:	3307      	adds	r3, #7
    3c20:	f023 0307 	bic.w	r3, r3, #7
    3c24:	f103 0208 	add.w	r2, r3, #8
    3c28:	9205      	str	r2, [sp, #20]
    3c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    3c2e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    3c32:	e7e8      	b.n	3c06 <cbvprintf+0x736>
					(uint_value_type)va_arg(ap, size_t);
    3c34:	9b05      	ldr	r3, [sp, #20]
    3c36:	1d1a      	adds	r2, r3, #4
    3c38:	9205      	str	r2, [sp, #20]
    3c3a:	681b      	ldr	r3, [r3, #0]
				value->uint =
    3c3c:	930a      	str	r3, [sp, #40]	; 0x28
    3c3e:	2300      	movs	r3, #0
    3c40:	930b      	str	r3, [sp, #44]	; 0x2c
				break;
    3c42:	e7e0      	b.n	3c06 <cbvprintf+0x736>
				value->uint = (unsigned char)value->uint;
    3c44:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    3c48:	930a      	str	r3, [sp, #40]	; 0x28
    3c4a:	2300      	movs	r3, #0
    3c4c:	930b      	str	r3, [sp, #44]	; 0x2c
    3c4e:	e65b      	b.n	3908 <cbvprintf+0x438>
			if (length_mod == LENGTH_UPPER_L) {
    3c50:	2908      	cmp	r1, #8
    3c52:	d00b      	beq.n	3c6c <cbvprintf+0x79c>
				value->dbl = va_arg(ap, double);
    3c54:	9b05      	ldr	r3, [sp, #20]
    3c56:	3307      	adds	r3, #7
    3c58:	f023 0307 	bic.w	r3, r3, #7
    3c5c:	f103 0208 	add.w	r2, r3, #8
    3c60:	9205      	str	r2, [sp, #20]
    3c62:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c66:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    3c6a:	e64d      	b.n	3908 <cbvprintf+0x438>
				value->ldbl = va_arg(ap, long double);
    3c6c:	9b05      	ldr	r3, [sp, #20]
    3c6e:	3307      	adds	r3, #7
    3c70:	f023 0307 	bic.w	r3, r3, #7
    3c74:	f103 0208 	add.w	r2, r3, #8
    3c78:	9205      	str	r2, [sp, #20]
    3c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c7e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    3c82:	e641      	b.n	3908 <cbvprintf+0x438>
			value->ptr = va_arg(ap, void *);
    3c84:	9b05      	ldr	r3, [sp, #20]
    3c86:	1d1a      	adds	r2, r3, #4
    3c88:	9205      	str	r2, [sp, #20]
    3c8a:	681b      	ldr	r3, [r3, #0]
    3c8c:	930a      	str	r3, [sp, #40]	; 0x28
    3c8e:	e63b      	b.n	3908 <cbvprintf+0x438>
			OUTS(sp, fp);
    3c90:	464b      	mov	r3, r9
    3c92:	463a      	mov	r2, r7
    3c94:	4629      	mov	r1, r5
    3c96:	4630      	mov	r0, r6
    3c98:	f00d face 	bl	11238 <outs>
    3c9c:	2800      	cmp	r0, #0
    3c9e:	f6ff ac2c 	blt.w	34fa <cbvprintf+0x2a>
    3ca2:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    3ca4:	464f      	mov	r7, r9
			continue;
    3ca6:	e41d      	b.n	34e4 <cbvprintf+0x14>
			OUTC('%');
    3ca8:	4629      	mov	r1, r5
    3caa:	2025      	movs	r0, #37	; 0x25
    3cac:	47b0      	blx	r6
    3cae:	2800      	cmp	r0, #0
    3cb0:	f6ff ac23 	blt.w	34fa <cbvprintf+0x2a>
    3cb4:	3401      	adds	r4, #1
		fp = extract_conversion(conv, sp);
    3cb6:	464f      	mov	r7, r9
			continue;
    3cb8:	e414      	b.n	34e4 <cbvprintf+0x14>
			bps = (const char *)value->ptr;
    3cba:	9f0a      	ldr	r7, [sp, #40]	; 0x28
			if (precision >= 0) {
    3cbc:	f1ba 0f00 	cmp.w	sl, #0
    3cc0:	db3a      	blt.n	3d38 <cbvprintf+0x868>
				len = strnlen(bps, precision);
    3cc2:	4651      	mov	r1, sl
    3cc4:	4638      	mov	r0, r7
    3cc6:	f011 f817 	bl	14cf8 <strnlen>
			bpe = bps + len;
    3cca:	4438      	add	r0, r7
    3ccc:	9008      	str	r0, [sp, #32]
		if (bps == NULL) {
    3cce:	2f00      	cmp	r7, #0
    3cd0:	d0f1      	beq.n	3cb6 <cbvprintf+0x7e6>
		size_t nj_len = (bpe - bps);
    3cd2:	9b08      	ldr	r3, [sp, #32]
    3cd4:	1bdb      	subs	r3, r3, r7
		if (sign != 0) {
    3cd6:	f89d 001f 	ldrb.w	r0, [sp, #31]
    3cda:	b100      	cbz	r0, 3cde <cbvprintf+0x80e>
			nj_len += 1U;
    3cdc:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    3cde:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    3ce2:	f011 0f10 	tst.w	r1, #16
    3ce6:	f000 80b6 	beq.w	3e56 <cbvprintf+0x986>
			nj_len += 2U;
    3cea:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    3cec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3cee:	4413      	add	r3, r2
		if (conv->pad_fp) {
    3cf0:	f011 0f40 	tst.w	r1, #64	; 0x40
    3cf4:	d001      	beq.n	3cfa <cbvprintf+0x82a>
			nj_len += conv->pad0_pre_exp;
    3cf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3cf8:	4413      	add	r3, r2
		if (width > 0) {
    3cfa:	f1b8 0f00 	cmp.w	r8, #0
    3cfe:	f340 80c3 	ble.w	3e88 <cbvprintf+0x9b8>
			width -= (int)nj_len;
    3d02:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    3d06:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    3d0a:	f013 0f04 	tst.w	r3, #4
    3d0e:	f040 80bb 	bne.w	3e88 <cbvprintf+0x9b8>
				if (conv->flag_zero) {
    3d12:	f013 0f40 	tst.w	r3, #64	; 0x40
    3d16:	f000 80a4 	beq.w	3e62 <cbvprintf+0x992>
					if (sign != 0) {
    3d1a:	2800      	cmp	r0, #0
    3d1c:	f000 80a4 	beq.w	3e68 <cbvprintf+0x998>
						OUTC(sign);
    3d20:	4629      	mov	r1, r5
    3d22:	47b0      	blx	r6
    3d24:	2800      	cmp	r0, #0
    3d26:	f6ff abe8 	blt.w	34fa <cbvprintf+0x2a>
    3d2a:	3401      	adds	r4, #1
						sign = 0;
    3d2c:	2300      	movs	r3, #0
    3d2e:	f88d 301f 	strb.w	r3, [sp, #31]
					pad = '0';
    3d32:	f04f 0a30 	mov.w	sl, #48	; 0x30
    3d36:	e099      	b.n	3e6c <cbvprintf+0x99c>
				len = strlen(bps);
    3d38:	4638      	mov	r0, r7
    3d3a:	f7fd fb0d 	bl	1358 <strlen>
    3d3e:	e7c4      	b.n	3cca <cbvprintf+0x7fa>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    3d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3d42:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
			bpe = buf + 1;
    3d46:	f10d 0345 	add.w	r3, sp, #69	; 0x45
    3d4a:	9308      	str	r3, [sp, #32]
			bps = buf;
    3d4c:	af11      	add	r7, sp, #68	; 0x44
			break;
    3d4e:	e7be      	b.n	3cce <cbvprintf+0x7fe>
			if (conv->flag_plus) {
    3d50:	f012 0f08 	tst.w	r2, #8
    3d54:	d024      	beq.n	3da0 <cbvprintf+0x8d0>
				sign = '+';
    3d56:	232b      	movs	r3, #43	; 0x2b
    3d58:	f88d 301f 	strb.w	r3, [sp, #31]
			sint = value->sint;
    3d5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    3d60:	2a00      	cmp	r2, #0
    3d62:	f173 0100 	sbcs.w	r1, r3, #0
    3d66:	db22      	blt.n	3dae <cbvprintf+0x8de>
				value->uint = (uint_value_type)sint;
    3d68:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			bps = encode_uint(value->uint, conv, buf, bpe);
    3d6c:	9b08      	ldr	r3, [sp, #32]
    3d6e:	9300      	str	r3, [sp, #0]
    3d70:	ab11      	add	r3, sp, #68	; 0x44
    3d72:	aa0c      	add	r2, sp, #48	; 0x30
    3d74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    3d78:	f7ff f922 	bl	2fc0 <encode_uint>
    3d7c:	4607      	mov	r7, r0
			if (precision >= 0) {
    3d7e:	f1ba 0f00 	cmp.w	sl, #0
    3d82:	dba4      	blt.n	3cce <cbvprintf+0x7fe>
				size_t len = bpe - bps;
    3d84:	9b08      	ldr	r3, [sp, #32]
    3d86:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    3d88:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    3d8c:	f36f 1286 	bfc	r2, #6, #1
    3d90:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    3d94:	459a      	cmp	sl, r3
    3d96:	d99a      	bls.n	3cce <cbvprintf+0x7fe>
					conv->pad0_value = precision - (int)len;
    3d98:	ebaa 0303 	sub.w	r3, sl, r3
    3d9c:	930d      	str	r3, [sp, #52]	; 0x34
    3d9e:	e796      	b.n	3cce <cbvprintf+0x7fe>
			} else if (conv->flag_space) {
    3da0:	f012 0f10 	tst.w	r2, #16
    3da4:	d0da      	beq.n	3d5c <cbvprintf+0x88c>
				sign = ' ';
    3da6:	2320      	movs	r3, #32
    3da8:	f88d 301f 	strb.w	r3, [sp, #31]
    3dac:	e7d6      	b.n	3d5c <cbvprintf+0x88c>
				sign = '-';
    3dae:	212d      	movs	r1, #45	; 0x2d
    3db0:	f88d 101f 	strb.w	r1, [sp, #31]
				value->uint = (uint_value_type)-sint;
    3db4:	4252      	negs	r2, r2
    3db6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3dba:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    3dbe:	e7d5      	b.n	3d6c <cbvprintf+0x89c>
			if (value->ptr != NULL) {
    3dc0:	980a      	ldr	r0, [sp, #40]	; 0x28
    3dc2:	b918      	cbnz	r0, 3dcc <cbvprintf+0x8fc>
			bpe = bps + 5;
    3dc4:	4f94      	ldr	r7, [pc, #592]	; (4018 <cbvprintf+0xb48>)
    3dc6:	9708      	str	r7, [sp, #32]
			bps = "(nil)";
    3dc8:	3f05      	subs	r7, #5
			break;
    3dca:	e780      	b.n	3cce <cbvprintf+0x7fe>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3dcc:	9b08      	ldr	r3, [sp, #32]
    3dce:	9300      	str	r3, [sp, #0]
    3dd0:	ab11      	add	r3, sp, #68	; 0x44
    3dd2:	aa0c      	add	r2, sp, #48	; 0x30
    3dd4:	2100      	movs	r1, #0
    3dd6:	f7ff f8f3 	bl	2fc0 <encode_uint>
    3dda:	4607      	mov	r7, r0
				conv->altform_0c = true;
    3ddc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    3de0:	f043 0310 	orr.w	r3, r3, #16
    3de4:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
				conv->specifier = 'x';
    3de8:	2378      	movs	r3, #120	; 0x78
    3dea:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
				goto prec_int_pad0;
    3dee:	e7c6      	b.n	3d7e <cbvprintf+0x8ae>
				store_count(conv, value->ptr, count);
    3df0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    3df2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    3df6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    3dfa:	2b07      	cmp	r3, #7
    3dfc:	f63f af5b 	bhi.w	3cb6 <cbvprintf+0x7e6>
    3e00:	e8df f003 	tbb	[pc, r3]
    3e04:	0a080604 	.word	0x0a080604
    3e08:	1816110c 	.word	0x1816110c
		*(int *)dp = count;
    3e0c:	6014      	str	r4, [r2, #0]
		break;
    3e0e:	e752      	b.n	3cb6 <cbvprintf+0x7e6>
		*(signed char *)dp = (signed char)count;
    3e10:	7014      	strb	r4, [r2, #0]
		break;
    3e12:	e750      	b.n	3cb6 <cbvprintf+0x7e6>
		*(short *)dp = (short)count;
    3e14:	8014      	strh	r4, [r2, #0]
		break;
    3e16:	e74e      	b.n	3cb6 <cbvprintf+0x7e6>
		*(long *)dp = (long)count;
    3e18:	6014      	str	r4, [r2, #0]
		break;
    3e1a:	e74c      	b.n	3cb6 <cbvprintf+0x7e6>
		*(long long *)dp = (long long)count;
    3e1c:	4620      	mov	r0, r4
    3e1e:	17e1      	asrs	r1, r4, #31
    3e20:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    3e24:	e747      	b.n	3cb6 <cbvprintf+0x7e6>
		*(intmax_t *)dp = (intmax_t)count;
    3e26:	4620      	mov	r0, r4
    3e28:	17e1      	asrs	r1, r4, #31
    3e2a:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    3e2e:	e742      	b.n	3cb6 <cbvprintf+0x7e6>
		*(size_t *)dp = (size_t)count;
    3e30:	6014      	str	r4, [r2, #0]
		break;
    3e32:	e740      	b.n	3cb6 <cbvprintf+0x7e6>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    3e34:	6014      	str	r4, [r2, #0]
}
    3e36:	e73e      	b.n	3cb6 <cbvprintf+0x7e6>
				bps = encode_float(value->dbl, conv, precision,
    3e38:	ab08      	add	r3, sp, #32
    3e3a:	9302      	str	r3, [sp, #8]
    3e3c:	ab11      	add	r3, sp, #68	; 0x44
    3e3e:	9301      	str	r3, [sp, #4]
    3e40:	f10d 031f 	add.w	r3, sp, #31
    3e44:	9300      	str	r3, [sp, #0]
    3e46:	4653      	mov	r3, sl
    3e48:	aa0c      	add	r2, sp, #48	; 0x30
    3e4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    3e4e:	f7ff f927 	bl	30a0 <encode_float>
    3e52:	4607      	mov	r7, r0
			break;
    3e54:	e73b      	b.n	3cce <cbvprintf+0x7fe>
		} else if (conv->altform_0) {
    3e56:	f011 0f08 	tst.w	r1, #8
    3e5a:	f43f af47 	beq.w	3cec <cbvprintf+0x81c>
			nj_len += 1U;
    3e5e:	3301      	adds	r3, #1
    3e60:	e744      	b.n	3cec <cbvprintf+0x81c>
				char pad = ' ';
    3e62:	f04f 0a20 	mov.w	sl, #32
    3e66:	e001      	b.n	3e6c <cbvprintf+0x99c>
					pad = '0';
    3e68:	f04f 0a30 	mov.w	sl, #48	; 0x30
    3e6c:	4643      	mov	r3, r8
				while (width-- > 0) {
    3e6e:	f103 38ff 	add.w	r8, r3, #4294967295
    3e72:	2b00      	cmp	r3, #0
    3e74:	dd08      	ble.n	3e88 <cbvprintf+0x9b8>
					OUTC(pad);
    3e76:	4629      	mov	r1, r5
    3e78:	4650      	mov	r0, sl
    3e7a:	47b0      	blx	r6
    3e7c:	2800      	cmp	r0, #0
    3e7e:	f6ff ab3c 	blt.w	34fa <cbvprintf+0x2a>
    3e82:	3401      	adds	r4, #1
				while (width-- > 0) {
    3e84:	4643      	mov	r3, r8
    3e86:	e7f2      	b.n	3e6e <cbvprintf+0x99e>
		if (sign != 0) {
    3e88:	f89d 001f 	ldrb.w	r0, [sp, #31]
    3e8c:	b128      	cbz	r0, 3e9a <cbvprintf+0x9ca>
			OUTC(sign);
    3e8e:	4629      	mov	r1, r5
    3e90:	47b0      	blx	r6
    3e92:	2800      	cmp	r0, #0
    3e94:	f6ff ab31 	blt.w	34fa <cbvprintf+0x2a>
    3e98:	3401      	adds	r4, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    3e9a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    3e9e:	f013 0f40 	tst.w	r3, #64	; 0x40
    3ea2:	d072      	beq.n	3f8a <cbvprintf+0xaba>
			if (conv->specifier_a) {
    3ea4:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
    3ea8:	2b00      	cmp	r3, #0
    3eaa:	db0d      	blt.n	3ec8 <cbvprintf+0x9f8>
				while (isdigit((int)*cp)) {
    3eac:	7838      	ldrb	r0, [r7, #0]
    3eae:	4b5b      	ldr	r3, [pc, #364]	; (401c <cbvprintf+0xb4c>)
    3eb0:	5cc3      	ldrb	r3, [r0, r3]
    3eb2:	f013 0f04 	tst.w	r3, #4
    3eb6:	d012      	beq.n	3ede <cbvprintf+0xa0e>
					OUTC(*cp++);
    3eb8:	3701      	adds	r7, #1
    3eba:	4629      	mov	r1, r5
    3ebc:	47b0      	blx	r6
    3ebe:	2800      	cmp	r0, #0
    3ec0:	f6ff ab1b 	blt.w	34fa <cbvprintf+0x2a>
    3ec4:	3401      	adds	r4, #1
    3ec6:	e7f1      	b.n	3eac <cbvprintf+0x9dc>
				while (*cp != 'p') {
    3ec8:	7838      	ldrb	r0, [r7, #0]
    3eca:	2870      	cmp	r0, #112	; 0x70
    3ecc:	d044      	beq.n	3f58 <cbvprintf+0xa88>
					OUTC(*cp++);
    3ece:	3701      	adds	r7, #1
    3ed0:	4629      	mov	r1, r5
    3ed2:	47b0      	blx	r6
    3ed4:	2800      	cmp	r0, #0
    3ed6:	f6ff ab10 	blt.w	34fa <cbvprintf+0x2a>
    3eda:	3401      	adds	r4, #1
    3edc:	e7f4      	b.n	3ec8 <cbvprintf+0x9f8>
				pad_len = conv->pad0_value;
    3ede:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
				if (!conv->pad_postdp) {
    3ee2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    3ee6:	f013 0f20 	tst.w	r3, #32
    3eea:	d010      	beq.n	3f0e <cbvprintf+0xa3e>
				if (*cp == '.') {
    3eec:	7838      	ldrb	r0, [r7, #0]
    3eee:	282e      	cmp	r0, #46	; 0x2e
    3ef0:	d01d      	beq.n	3f2e <cbvprintf+0xa5e>
				while (isdigit((int)*cp)) {
    3ef2:	7838      	ldrb	r0, [r7, #0]
    3ef4:	4b49      	ldr	r3, [pc, #292]	; (401c <cbvprintf+0xb4c>)
    3ef6:	5cc3      	ldrb	r3, [r0, r3]
    3ef8:	f013 0f04 	tst.w	r3, #4
    3efc:	d02c      	beq.n	3f58 <cbvprintf+0xa88>
					OUTC(*cp++);
    3efe:	3701      	adds	r7, #1
    3f00:	4629      	mov	r1, r5
    3f02:	47b0      	blx	r6
    3f04:	2800      	cmp	r0, #0
    3f06:	f6ff aaf8 	blt.w	34fa <cbvprintf+0x2a>
    3f0a:	3401      	adds	r4, #1
    3f0c:	e7f1      	b.n	3ef2 <cbvprintf+0xa22>
					while (pad_len-- > 0) {
    3f0e:	f10a 3bff 	add.w	fp, sl, #4294967295
    3f12:	f1ba 0f00 	cmp.w	sl, #0
    3f16:	dd08      	ble.n	3f2a <cbvprintf+0xa5a>
						OUTC('0');
    3f18:	4629      	mov	r1, r5
    3f1a:	2030      	movs	r0, #48	; 0x30
    3f1c:	47b0      	blx	r6
    3f1e:	2800      	cmp	r0, #0
    3f20:	f6ff aaeb 	blt.w	34fa <cbvprintf+0x2a>
    3f24:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
    3f26:	46da      	mov	sl, fp
    3f28:	e7f1      	b.n	3f0e <cbvprintf+0xa3e>
    3f2a:	46da      	mov	sl, fp
    3f2c:	e7de      	b.n	3eec <cbvprintf+0xa1c>
					OUTC(*cp++);
    3f2e:	3701      	adds	r7, #1
    3f30:	4629      	mov	r1, r5
    3f32:	47b0      	blx	r6
    3f34:	2800      	cmp	r0, #0
    3f36:	f6ff aae0 	blt.w	34fa <cbvprintf+0x2a>
    3f3a:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
    3f3c:	f10a 3bff 	add.w	fp, sl, #4294967295
    3f40:	f1ba 0f00 	cmp.w	sl, #0
    3f44:	ddd5      	ble.n	3ef2 <cbvprintf+0xa22>
						OUTC('0');
    3f46:	4629      	mov	r1, r5
    3f48:	2030      	movs	r0, #48	; 0x30
    3f4a:	47b0      	blx	r6
    3f4c:	2800      	cmp	r0, #0
    3f4e:	f6ff aad4 	blt.w	34fa <cbvprintf+0x2a>
    3f52:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
    3f54:	46da      	mov	sl, fp
    3f56:	e7f1      	b.n	3f3c <cbvprintf+0xa6c>
			pad_len = conv->pad0_pre_exp;
    3f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			while (pad_len-- > 0) {
    3f5a:	f103 3aff 	add.w	sl, r3, #4294967295
    3f5e:	2b00      	cmp	r3, #0
    3f60:	dd08      	ble.n	3f74 <cbvprintf+0xaa4>
				OUTC('0');
    3f62:	4629      	mov	r1, r5
    3f64:	2030      	movs	r0, #48	; 0x30
    3f66:	47b0      	blx	r6
    3f68:	2800      	cmp	r0, #0
    3f6a:	f6ff aac6 	blt.w	34fa <cbvprintf+0x2a>
    3f6e:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    3f70:	4653      	mov	r3, sl
    3f72:	e7f2      	b.n	3f5a <cbvprintf+0xa8a>
			OUTS(cp, bpe);
    3f74:	9b08      	ldr	r3, [sp, #32]
    3f76:	463a      	mov	r2, r7
    3f78:	4629      	mov	r1, r5
    3f7a:	4630      	mov	r0, r6
    3f7c:	f00d f95c 	bl	11238 <outs>
    3f80:	2800      	cmp	r0, #0
    3f82:	f6ff aaba 	blt.w	34fa <cbvprintf+0x2a>
    3f86:	4404      	add	r4, r0
    3f88:	e033      	b.n	3ff2 <cbvprintf+0xb22>
			if (conv->altform_0c | conv->altform_0) {
    3f8a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    3f8e:	f3c3 1200 	ubfx	r2, r3, #4, #1
    3f92:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    3f96:	4313      	orrs	r3, r2
    3f98:	d006      	beq.n	3fa8 <cbvprintf+0xad8>
				OUTC('0');
    3f9a:	4629      	mov	r1, r5
    3f9c:	2030      	movs	r0, #48	; 0x30
    3f9e:	47b0      	blx	r6
    3fa0:	2800      	cmp	r0, #0
    3fa2:	f6ff aaaa 	blt.w	34fa <cbvprintf+0x2a>
    3fa6:	3401      	adds	r4, #1
			if (conv->altform_0c) {
    3fa8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    3fac:	f013 0f10 	tst.w	r3, #16
    3fb0:	d007      	beq.n	3fc2 <cbvprintf+0xaf2>
				OUTC(conv->specifier);
    3fb2:	4629      	mov	r1, r5
    3fb4:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    3fb8:	47b0      	blx	r6
    3fba:	2800      	cmp	r0, #0
    3fbc:	f6ff aa9d 	blt.w	34fa <cbvprintf+0x2a>
    3fc0:	3401      	adds	r4, #1
			pad_len = conv->pad0_value;
    3fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			while (pad_len-- > 0) {
    3fc4:	f103 3aff 	add.w	sl, r3, #4294967295
    3fc8:	2b00      	cmp	r3, #0
    3fca:	dd08      	ble.n	3fde <cbvprintf+0xb0e>
				OUTC('0');
    3fcc:	4629      	mov	r1, r5
    3fce:	2030      	movs	r0, #48	; 0x30
    3fd0:	47b0      	blx	r6
    3fd2:	2800      	cmp	r0, #0
    3fd4:	f6ff aa91 	blt.w	34fa <cbvprintf+0x2a>
    3fd8:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    3fda:	4653      	mov	r3, sl
    3fdc:	e7f2      	b.n	3fc4 <cbvprintf+0xaf4>
			OUTS(bps, bpe);
    3fde:	9b08      	ldr	r3, [sp, #32]
    3fe0:	463a      	mov	r2, r7
    3fe2:	4629      	mov	r1, r5
    3fe4:	4630      	mov	r0, r6
    3fe6:	f00d f927 	bl	11238 <outs>
    3fea:	2800      	cmp	r0, #0
    3fec:	f6ff aa85 	blt.w	34fa <cbvprintf+0x2a>
    3ff0:	4404      	add	r4, r0
		while (width > 0) {
    3ff2:	f1b8 0f00 	cmp.w	r8, #0
    3ff6:	dd09      	ble.n	400c <cbvprintf+0xb3c>
			OUTC(' ');
    3ff8:	4629      	mov	r1, r5
    3ffa:	2020      	movs	r0, #32
    3ffc:	47b0      	blx	r6
    3ffe:	2800      	cmp	r0, #0
    4000:	f6ff aa7b 	blt.w	34fa <cbvprintf+0x2a>
    4004:	3401      	adds	r4, #1
			--width;
    4006:	f108 38ff 	add.w	r8, r8, #4294967295
    400a:	e7f2      	b.n	3ff2 <cbvprintf+0xb22>
		fp = extract_conversion(conv, sp);
    400c:	464f      	mov	r7, r9
    400e:	f7ff ba69 	b.w	34e4 <cbvprintf+0x14>
	return count;
    4012:	4620      	mov	r0, r4
    4014:	f7ff ba71 	b.w	34fa <cbvprintf+0x2a>
    4018:	00015bf5 	.word	0x00015bf5
    401c:	00017371 	.word	0x00017371

00004020 <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    4020:	4b05      	ldr	r3, [pc, #20]	; (4038 <is_rodata+0x18>)
    4022:	4298      	cmp	r0, r3
    4024:	d304      	bcc.n	4030 <is_rodata+0x10>
    4026:	4b05      	ldr	r3, [pc, #20]	; (403c <is_rodata+0x1c>)
    4028:	4298      	cmp	r0, r3
    402a:	d303      	bcc.n	4034 <is_rodata+0x14>
    402c:	2000      	movs	r0, #0
    402e:	4770      	bx	lr
    4030:	2000      	movs	r0, #0
    4032:	4770      	bx	lr
    4034:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
    4036:	4770      	bx	lr
    4038:	0001554c 	.word	0x0001554c
    403c:	000174d0 	.word	0x000174d0

00004040 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
    4040:	b508      	push	{r3, lr}
	proc_tid = process_tid;
    4042:	4b06      	ldr	r3, [pc, #24]	; (405c <thread_set+0x1c>)
    4044:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    4046:	b118      	cbz	r0, 4050 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    4048:	4b05      	ldr	r3, [pc, #20]	; (4060 <thread_set+0x20>)
    404a:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    404c:	2b09      	cmp	r3, #9
    404e:	dc00      	bgt.n	4052 <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
    4050:	bd08      	pop	{r3, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    4052:	4804      	ldr	r0, [pc, #16]	; (4064 <thread_set+0x24>)
    4054:	f00a fb76 	bl	e744 <z_impl_k_sem_give>
}
    4058:	e7fa      	b.n	4050 <thread_set+0x10>
    405a:	bf00      	nop
    405c:	20000af4 	.word	0x20000af4
    4060:	20000ac0 	.word	0x20000ac0
    4064:	200003d8 	.word	0x200003d8

00004068 <log_process_thread_timer_expiry_fn>:

	return 0;
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    4068:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    406a:	4802      	ldr	r0, [pc, #8]	; (4074 <log_process_thread_timer_expiry_fn+0xc>)
    406c:	f00a fb6a 	bl	e744 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
    4070:	bd08      	pop	{r3, pc}
    4072:	bf00      	nop
    4074:	200003d8 	.word	0x200003d8

00004078 <next_pending>:
{
    4078:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
    407a:	4803      	ldr	r0, [pc, #12]	; (4088 <next_pending+0x10>)
    407c:	f00d f90c 	bl	11298 <log_list_head_peek>
}
    4080:	3800      	subs	r0, #0
    4082:	bf18      	it	ne
    4084:	2001      	movne	r0, #1
    4086:	bd08      	pop	{r3, pc}
    4088:	20000acc 	.word	0x20000acc

0000408c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    408c:	b530      	push	{r4, r5, lr}
    408e:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    4090:	2200      	movs	r2, #0
    4092:	490f      	ldr	r1, [pc, #60]	; (40d0 <enable_logger+0x44>)
    4094:	480f      	ldr	r0, [pc, #60]	; (40d4 <enable_logger+0x48>)
    4096:	f010 fc9e 	bl	149d6 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    409a:	4d0f      	ldr	r5, [pc, #60]	; (40d8 <enable_logger+0x4c>)
    409c:	2200      	movs	r2, #0
    409e:	2300      	movs	r3, #0
    40a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    40a4:	2400      	movs	r4, #0
    40a6:	9404      	str	r4, [sp, #16]
    40a8:	230e      	movs	r3, #14
    40aa:	9303      	str	r3, [sp, #12]
    40ac:	9402      	str	r4, [sp, #8]
    40ae:	9401      	str	r4, [sp, #4]
    40b0:	9400      	str	r4, [sp, #0]
    40b2:	4b0a      	ldr	r3, [pc, #40]	; (40dc <enable_logger+0x50>)
    40b4:	f44f 7240 	mov.w	r2, #768	; 0x300
    40b8:	4909      	ldr	r1, [pc, #36]	; (40e0 <enable_logger+0x54>)
    40ba:	4628      	mov	r0, r5
    40bc:	f00a f8c4 	bl	e248 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    40c0:	4908      	ldr	r1, [pc, #32]	; (40e4 <enable_logger+0x58>)
    40c2:	4628      	mov	r0, r5
    40c4:	f009 ff82 	bl	dfcc <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    40c8:	4620      	mov	r0, r4
    40ca:	b009      	add	sp, #36	; 0x24
    40cc:	bd30      	pop	{r4, r5, pc}
    40ce:	bf00      	nop
    40d0:	00004069 	.word	0x00004069
    40d4:	200003e8 	.word	0x200003e8
    40d8:	20000420 	.word	0x20000420
    40dc:	00004951 	.word	0x00004951
    40e0:	20001680 	.word	0x20001680
    40e4:	00015bf8 	.word	0x00015bf8

000040e8 <z_log_get_s_mask>:
{
    40e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40ea:	4604      	mov	r4, r0
    40ec:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
    40ee:	2920      	cmp	r1, #32
    40f0:	d803      	bhi.n	40fa <z_log_get_s_mask+0x12>
			arm = false;
    40f2:	2000      	movs	r0, #0
    40f4:	4606      	mov	r6, r0
    40f6:	4605      	mov	r5, r0
    40f8:	e00d      	b.n	4116 <z_log_get_s_mask+0x2e>
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
    40fa:	4d13      	ldr	r5, [pc, #76]	; (4148 <z_log_get_s_mask+0x60>)
    40fc:	2287      	movs	r2, #135	; 0x87
    40fe:	4629      	mov	r1, r5
    4100:	4812      	ldr	r0, [pc, #72]	; (414c <z_log_get_s_mask+0x64>)
    4102:	f00c ff91 	bl	11028 <printk>
    4106:	2187      	movs	r1, #135	; 0x87
    4108:	4628      	mov	r0, r5
    410a:	f00d f8af 	bl	1126c <assert_post_action>
    410e:	e7f0      	b.n	40f2 <z_log_get_s_mask+0xa>
			arm = !arm;
    4110:	f085 0501 	eor.w	r5, r5, #1
			arm = false;
    4114:	461c      	mov	r4, r3
	while ((curr = *str++) && arg < nargs) {
    4116:	4623      	mov	r3, r4
    4118:	f813 2b01 	ldrb.w	r2, [r3], #1
    411c:	b19a      	cbz	r2, 4146 <z_log_get_s_mask+0x5e>
    411e:	42be      	cmp	r6, r7
    4120:	d211      	bcs.n	4146 <z_log_get_s_mask+0x5e>
		if (curr == '%') {
    4122:	2a25      	cmp	r2, #37	; 0x25
    4124:	d0f4      	beq.n	4110 <z_log_get_s_mask+0x28>
		} else if (arm && isalpha((int)curr)) {
    4126:	2d00      	cmp	r5, #0
    4128:	d0f4      	beq.n	4114 <z_log_get_s_mask+0x2c>
    412a:	4909      	ldr	r1, [pc, #36]	; (4150 <z_log_get_s_mask+0x68>)
    412c:	5c51      	ldrb	r1, [r2, r1]
    412e:	f011 0f03 	tst.w	r1, #3
    4132:	d0ef      	beq.n	4114 <z_log_get_s_mask+0x2c>
			if (curr == 's') {
    4134:	2a73      	cmp	r2, #115	; 0x73
    4136:	d002      	beq.n	413e <z_log_get_s_mask+0x56>
			arg++;
    4138:	3601      	adds	r6, #1
			arm = false;
    413a:	2500      	movs	r5, #0
    413c:	e7ea      	b.n	4114 <z_log_get_s_mask+0x2c>
				mask |= BIT(arg);
    413e:	2201      	movs	r2, #1
    4140:	40b2      	lsls	r2, r6
    4142:	4310      	orrs	r0, r2
    4144:	e7f8      	b.n	4138 <z_log_get_s_mask+0x50>
}
    4146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4148:	00015c00 	.word	0x00015c00
    414c:	00015984 	.word	0x00015984
    4150:	00017371 	.word	0x00017371

00004154 <log_init>:
{
    4154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    4156:	4b1f      	ldr	r3, [pc, #124]	; (41d4 <log_init+0x80>)
    4158:	4a1f      	ldr	r2, [pc, #124]	; (41d8 <log_init+0x84>)
    415a:	1a9b      	subs	r3, r3, r2
    415c:	111e      	asrs	r6, r3, #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    415e:	2b9f      	cmp	r3, #159	; 0x9f
    4160:	d80e      	bhi.n	4180 <log_init+0x2c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    4162:	4b1e      	ldr	r3, [pc, #120]	; (41dc <log_init+0x88>)
    4164:	f3bf 8f5b 	dmb	ish
    4168:	e853 2f00 	ldrex	r2, [r3]
    416c:	1c51      	adds	r1, r2, #1
    416e:	e843 1000 	strex	r0, r1, [r3]
    4172:	2800      	cmp	r0, #0
    4174:	d1f8      	bne.n	4168 <log_init+0x14>
    4176:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    417a:	bb52      	cbnz	r2, 41d2 <log_init+0x7e>
	for (i = 0; i < log_backend_count_get(); i++) {
    417c:	2400      	movs	r4, #0
    417e:	e016      	b.n	41ae <log_init+0x5a>
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    4180:	4c17      	ldr	r4, [pc, #92]	; (41e0 <log_init+0x8c>)
    4182:	f240 224a 	movw	r2, #586	; 0x24a
    4186:	4621      	mov	r1, r4
    4188:	4816      	ldr	r0, [pc, #88]	; (41e4 <log_init+0x90>)
    418a:	f00c ff4d 	bl	11028 <printk>
    418e:	f240 214a 	movw	r1, #586	; 0x24a
    4192:	4620      	mov	r0, r4
    4194:	f00d f86a 	bl	1126c <assert_post_action>
    4198:	e7e3      	b.n	4162 <log_init+0xe>
					   backend->cb->ctx,
    419a:	4b0f      	ldr	r3, [pc, #60]	; (41d8 <log_init+0x84>)
    419c:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    41a0:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    41a2:	2204      	movs	r2, #4
    41a4:	6819      	ldr	r1, [r3, #0]
    41a6:	4628      	mov	r0, r5
    41a8:	f000 fc30 	bl	4a0c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    41ac:	3401      	adds	r4, #1
    41ae:	42b4      	cmp	r4, r6
    41b0:	da0f      	bge.n	41d2 <log_init+0x7e>
		const struct log_backend *backend = log_backend_get(i);
    41b2:	4627      	mov	r7, r4
	return &__log_backends_start[idx];
    41b4:	4d08      	ldr	r5, [pc, #32]	; (41d8 <log_init+0x84>)
    41b6:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    41ba:	7b2b      	ldrb	r3, [r5, #12]
    41bc:	2b00      	cmp	r3, #0
    41be:	d0f5      	beq.n	41ac <log_init+0x58>
			if (backend->api->init != NULL) {
    41c0:	0123      	lsls	r3, r4, #4
    41c2:	4a05      	ldr	r2, [pc, #20]	; (41d8 <log_init+0x84>)
    41c4:	58d3      	ldr	r3, [r2, r3]
    41c6:	699b      	ldr	r3, [r3, #24]
    41c8:	2b00      	cmp	r3, #0
    41ca:	d0e6      	beq.n	419a <log_init+0x46>
				backend->api->init(backend);
    41cc:	4628      	mov	r0, r5
    41ce:	4798      	blx	r3
    41d0:	e7e3      	b.n	419a <log_init+0x46>
}
    41d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41d4:	000157e4 	.word	0x000157e4
    41d8:	000157d4 	.word	0x000157d4
    41dc:	20000ac8 	.word	0x20000ac8
    41e0:	00015c00 	.word	0x00015c00
    41e4:	00015984 	.word	0x00015984

000041e8 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    41e8:	b138      	cbz	r0, 41fa <log_set_timestamp_func+0x12>
{
    41ea:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    41ec:	4a04      	ldr	r2, [pc, #16]	; (4200 <log_set_timestamp_func+0x18>)
    41ee:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
    41f0:	4608      	mov	r0, r1
    41f2:	f000 ff13 	bl	501c <log_output_timestamp_freq_set>
	return 0;
    41f6:	2000      	movs	r0, #0
}
    41f8:	bd08      	pop	{r3, pc}
		return -EINVAL;
    41fa:	f06f 0015 	mvn.w	r0, #21
}
    41fe:	4770      	bx	lr
    4200:	20000048 	.word	0x20000048

00004204 <log_core_init>:
{
    4204:	b508      	push	{r3, lr}
	panic_mode = false;
    4206:	2300      	movs	r3, #0
    4208:	4a0a      	ldr	r2, [pc, #40]	; (4234 <log_core_init+0x30>)
    420a:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    420c:	4a0a      	ldr	r2, [pc, #40]	; (4238 <log_core_init+0x34>)
    420e:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    4210:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    4214:	4809      	ldr	r0, [pc, #36]	; (423c <log_core_init+0x38>)
    4216:	f7ff ffe7 	bl	41e8 <log_set_timestamp_func>
		log_msg_pool_init();
    421a:	f000 fc39 	bl	4a90 <log_msg_pool_init>
		log_list_init(&list);
    421e:	4808      	ldr	r0, [pc, #32]	; (4240 <log_core_init+0x3c>)
    4220:	f00d f82c 	bl	1127c <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    4224:	2304      	movs	r3, #4
    4226:	2228      	movs	r2, #40	; 0x28
    4228:	4906      	ldr	r1, [pc, #24]	; (4244 <log_core_init+0x40>)
    422a:	4807      	ldr	r0, [pc, #28]	; (4248 <log_core_init+0x44>)
    422c:	f010 fb27 	bl	1487e <k_mem_slab_init>
}
    4230:	bd08      	pop	{r3, pc}
    4232:	bf00      	nop
    4234:	20001657 	.word	0x20001657
    4238:	20000ac4 	.word	0x20000ac4
    423c:	000112b1 	.word	0x000112b1
    4240:	20000acc 	.word	0x20000acc
    4244:	20003340 	.word	0x20003340
    4248:	20000ad4 	.word	0x20000ad4

0000424c <get_msg>:
{
    424c:	b510      	push	{r4, lr}
	__asm__ volatile(
    424e:	f04f 0320 	mov.w	r3, #32
    4252:	f3ef 8411 	mrs	r4, BASEPRI
    4256:	f383 8812 	msr	BASEPRI_MAX, r3
    425a:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
    425e:	4804      	ldr	r0, [pc, #16]	; (4270 <get_msg+0x24>)
    4260:	f00d f81c 	bl	1129c <log_list_head_get>
	__asm__ volatile(
    4264:	f384 8811 	msr	BASEPRI, r4
    4268:	f3bf 8f6f 	isb	sy
}
    426c:	bd10      	pop	{r4, pc}
    426e:	bf00      	nop
    4270:	20000acc 	.word	0x20000acc

00004274 <z_log_notify_backend_enabled>:
{
    4274:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    4276:	4b05      	ldr	r3, [pc, #20]	; (428c <z_log_notify_backend_enabled+0x18>)
    4278:	781b      	ldrb	r3, [r3, #0]
    427a:	b11b      	cbz	r3, 4284 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
    427c:	4b03      	ldr	r3, [pc, #12]	; (428c <z_log_notify_backend_enabled+0x18>)
    427e:	2201      	movs	r2, #1
    4280:	701a      	strb	r2, [r3, #0]
}
    4282:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    4284:	4802      	ldr	r0, [pc, #8]	; (4290 <z_log_notify_backend_enabled+0x1c>)
    4286:	f00a fa5d 	bl	e744 <z_impl_k_sem_give>
}
    428a:	e7f7      	b.n	427c <z_log_notify_backend_enabled+0x8>
    428c:	20001656 	.word	0x20001656
    4290:	200003d8 	.word	0x200003d8

00004294 <z_log_dropped>:
    4294:	4b0c      	ldr	r3, [pc, #48]	; (42c8 <z_log_dropped+0x34>)
    4296:	f3bf 8f5b 	dmb	ish
    429a:	e853 2f00 	ldrex	r2, [r3]
    429e:	3201      	adds	r2, #1
    42a0:	e843 2100 	strex	r1, r2, [r3]
    42a4:	2900      	cmp	r1, #0
    42a6:	d1f8      	bne.n	429a <z_log_dropped+0x6>
    42a8:	f3bf 8f5b 	dmb	ish
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    42ac:	4b07      	ldr	r3, [pc, #28]	; (42cc <z_log_dropped+0x38>)
    42ae:	f3bf 8f5b 	dmb	ish
    42b2:	e853 2f00 	ldrex	r2, [r3]
    42b6:	3a01      	subs	r2, #1
    42b8:	e843 2100 	strex	r1, r2, [r3]
    42bc:	2900      	cmp	r1, #0
    42be:	d1f8      	bne.n	42b2 <z_log_dropped+0x1e>
    42c0:	f3bf 8f5b 	dmb	ish
}
    42c4:	4770      	bx	lr
    42c6:	bf00      	nop
    42c8:	20000ac4 	.word	0x20000ac4
    42cc:	20000ac0 	.word	0x20000ac0

000042d0 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    42d0:	4b06      	ldr	r3, [pc, #24]	; (42ec <z_log_dropped_read_and_clear+0x1c>)
}
    42d2:	2000      	movs	r0, #0
    42d4:	4602      	mov	r2, r0
    42d6:	f3bf 8f5b 	dmb	ish
    42da:	e853 0f00 	ldrex	r0, [r3]
    42de:	e843 2100 	strex	r1, r2, [r3]
    42e2:	2900      	cmp	r1, #0
    42e4:	d1f9      	bne.n	42da <z_log_dropped_read_and_clear+0xa>
    42e6:	f3bf 8f5b 	dmb	ish
    42ea:	4770      	bx	lr
    42ec:	20000ac4 	.word	0x20000ac4

000042f0 <dropped_notify>:
{
    42f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    42f4:	f7ff ffec 	bl	42d0 <z_log_dropped_read_and_clear>
    42f8:	4607      	mov	r7, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
    42fa:	2400      	movs	r4, #0
    42fc:	e01a      	b.n	4334 <dropped_notify+0x44>
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
    42fe:	f8df 907c 	ldr.w	r9, [pc, #124]	; 437c <dropped_notify+0x8c>
    4302:	f240 121d 	movw	r2, #285	; 0x11d
    4306:	4649      	mov	r1, r9
    4308:	4819      	ldr	r0, [pc, #100]	; (4370 <dropped_notify+0x80>)
    430a:	f00c fe8d 	bl	11028 <printk>
    430e:	f240 111d 	movw	r1, #285	; 0x11d
    4312:	4648      	mov	r0, r9
    4314:	f00c ffaa 	bl	1126c <assert_post_action>
    4318:	e018      	b.n	434c <dropped_notify+0x5c>
	__ASSERT_NO_MSG(backend != NULL);
    431a:	f8df 9060 	ldr.w	r9, [pc, #96]	; 437c <dropped_notify+0x8c>
    431e:	22b4      	movs	r2, #180	; 0xb4
    4320:	4649      	mov	r1, r9
    4322:	4813      	ldr	r0, [pc, #76]	; (4370 <dropped_notify+0x80>)
    4324:	f00c fe80 	bl	11028 <printk>
    4328:	21b4      	movs	r1, #180	; 0xb4
    432a:	4648      	mov	r0, r9
    432c:	f00c ff9e 	bl	1126c <assert_post_action>
    4330:	e012      	b.n	4358 <dropped_notify+0x68>
    4332:	3401      	adds	r4, #1
    4334:	4b0f      	ldr	r3, [pc, #60]	; (4374 <dropped_notify+0x84>)
    4336:	4a10      	ldr	r2, [pc, #64]	; (4378 <dropped_notify+0x88>)
    4338:	1a9b      	subs	r3, r3, r2
    433a:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    433e:	da14      	bge.n	436a <dropped_notify+0x7a>
	return &__log_backends_start[idx];
    4340:	ea4f 1804 	mov.w	r8, r4, lsl #4
    4344:	4d0c      	ldr	r5, [pc, #48]	; (4378 <dropped_notify+0x88>)
	__ASSERT_NO_MSG(backend != NULL);
    4346:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    434a:	d0d8      	beq.n	42fe <dropped_notify+0xe>
	return backend->cb->active;
    434c:	6873      	ldr	r3, [r6, #4]
    434e:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    4350:	2b00      	cmp	r3, #0
    4352:	d0ee      	beq.n	4332 <dropped_notify+0x42>
	__ASSERT_NO_MSG(backend != NULL);
    4354:	2e00      	cmp	r6, #0
    4356:	d0e0      	beq.n	431a <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    4358:	f858 3005 	ldr.w	r3, [r8, r5]
    435c:	691b      	ldr	r3, [r3, #16]
    435e:	2b00      	cmp	r3, #0
    4360:	d0e7      	beq.n	4332 <dropped_notify+0x42>
		backend->api->dropped(backend, cnt);
    4362:	4639      	mov	r1, r7
    4364:	4630      	mov	r0, r6
    4366:	4798      	blx	r3
}
    4368:	e7e3      	b.n	4332 <dropped_notify+0x42>
}
    436a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    436e:	bf00      	nop
    4370:	00015984 	.word	0x00015984
    4374:	000157e4 	.word	0x000157e4
    4378:	000157d4 	.word	0x000157d4
    437c:	00015c30 	.word	0x00015c30

00004380 <z_log_dropped_pending>:
	return dropped_cnt > 0;
    4380:	4b03      	ldr	r3, [pc, #12]	; (4390 <z_log_dropped_pending+0x10>)
    4382:	6818      	ldr	r0, [r3, #0]
}
    4384:	2800      	cmp	r0, #0
    4386:	bfd4      	ite	le
    4388:	2000      	movle	r0, #0
    438a:	2001      	movgt	r0, #1
    438c:	4770      	bx	lr
    438e:	bf00      	nop
    4390:	20000ac4 	.word	0x20000ac4

00004394 <z_log_strdup>:
{
    4394:	b570      	push	{r4, r5, r6, lr}
    4396:	b082      	sub	sp, #8
    4398:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
    439a:	f7ff fe41 	bl	4020 <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    439e:	bb10      	cbnz	r0, 43e6 <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    43a0:	2200      	movs	r2, #0
    43a2:	2300      	movs	r3, #0
    43a4:	a901      	add	r1, sp, #4
    43a6:	4811      	ldr	r0, [pc, #68]	; (43ec <z_log_strdup+0x58>)
    43a8:	f009 fd58 	bl	de5c <k_mem_slab_alloc>
	if (err != 0) {
    43ac:	b108      	cbz	r0, 43b2 <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
    43ae:	4c10      	ldr	r4, [pc, #64]	; (43f0 <z_log_strdup+0x5c>)
    43b0:	e019      	b.n	43e6 <z_log_strdup+0x52>
	(void)atomic_set(&dup->refcount, 1);
    43b2:	9b01      	ldr	r3, [sp, #4]
    43b4:	2201      	movs	r2, #1
    43b6:	f3bf 8f5b 	dmb	ish
    43ba:	e853 1f00 	ldrex	r1, [r3]
    43be:	e843 2000 	strex	r0, r2, [r3]
    43c2:	2800      	cmp	r0, #0
    43c4:	d1f9      	bne.n	43ba <z_log_strdup+0x26>
    43c6:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    43ca:	9d01      	ldr	r5, [sp, #4]
    43cc:	1d2e      	adds	r6, r5, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    43ce:	221f      	movs	r2, #31
    43d0:	4621      	mov	r1, r4
    43d2:	4630      	mov	r0, r6
    43d4:	f010 fc7d 	bl	14cd2 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    43d8:	237e      	movs	r3, #126	; 0x7e
    43da:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    43de:	2300      	movs	r3, #0
    43e0:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
	return dup->buf;
    43e4:	4634      	mov	r4, r6
}
    43e6:	4620      	mov	r0, r4
    43e8:	b002      	add	sp, #8
    43ea:	bd70      	pop	{r4, r5, r6, pc}
    43ec:	20000ad4 	.word	0x20000ad4
    43f0:	00015c64 	.word	0x00015c64

000043f4 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    43f4:	b138      	cbz	r0, 4406 <log_is_strdup+0x12>
    43f6:	4a07      	ldr	r2, [pc, #28]	; (4414 <log_is_strdup+0x20>)
    43f8:	4290      	cmp	r0, r2
    43fa:	d306      	bcc.n	440a <log_is_strdup+0x16>
    43fc:	32a0      	adds	r2, #160	; 0xa0
    43fe:	4290      	cmp	r0, r2
    4400:	d305      	bcc.n	440e <log_is_strdup+0x1a>
    4402:	2000      	movs	r0, #0
    4404:	4770      	bx	lr
    4406:	2000      	movs	r0, #0
    4408:	4770      	bx	lr
    440a:	2000      	movs	r0, #0
    440c:	4770      	bx	lr
    440e:	2001      	movs	r0, #1
}
    4410:	4770      	bx	lr
    4412:	bf00      	nop
    4414:	20003340 	.word	0x20003340

00004418 <detect_missed_strdup>:
{
    4418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    441a:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
    441c:	f013 0f01 	tst.w	r3, #1
    4420:	d000      	beq.n	4424 <detect_missed_strdup+0xc>
}
    4422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4424:	4607      	mov	r7, r0
	msg_str = log_msg_str_get(msg);
    4426:	f00d f804 	bl	11432 <log_msg_str_get>
    442a:	4604      	mov	r4, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    442c:	4638      	mov	r0, r7
    442e:	f00c ffeb 	bl	11408 <log_msg_nargs_get>
    4432:	4601      	mov	r1, r0
    4434:	4620      	mov	r0, r4
    4436:	f7ff fe57 	bl	40e8 <z_log_get_s_mask>
    443a:	4605      	mov	r5, r0
	while (mask) {
    443c:	e004      	b.n	4448 <detect_missed_strdup+0x30>
		mask &= ~BIT(idx);
    443e:	2301      	movs	r3, #1
    4440:	fa03 f404 	lsl.w	r4, r3, r4
    4444:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
    4448:	2d00      	cmp	r5, #0
    444a:	d0ea      	beq.n	4422 <detect_missed_strdup+0xa>
		idx = 31 - __builtin_clz(mask);
    444c:	fab5 f485 	clz	r4, r5
    4450:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    4454:	4621      	mov	r1, r4
    4456:	4638      	mov	r0, r7
    4458:	f00c ffd9 	bl	1140e <log_msg_arg_get>
    445c:	4606      	mov	r6, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
    445e:	f7ff fddf 	bl	4020 <is_rodata>
    4462:	2800      	cmp	r0, #0
    4464:	d1eb      	bne.n	443e <detect_missed_strdup+0x26>
    4466:	4630      	mov	r0, r6
    4468:	f7ff ffc4 	bl	43f4 <log_is_strdup>
    446c:	2800      	cmp	r0, #0
    446e:	d1e6      	bne.n	443e <detect_missed_strdup+0x26>
    4470:	4b09      	ldr	r3, [pc, #36]	; (4498 <detect_missed_strdup+0x80>)
    4472:	429e      	cmp	r6, r3
    4474:	d0e3      	beq.n	443e <detect_missed_strdup+0x26>
	return msg->hdr.ids.source_id;
    4476:	8979      	ldrh	r1, [r7, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
    4478:	f3c1 1189 	ubfx	r1, r1, #6, #10
    447c:	f000 fab6 	bl	49ec <log_source_name_get>
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
    4480:	4e06      	ldr	r6, [pc, #24]	; (449c <detect_missed_strdup+0x84>)
    4482:	22d8      	movs	r2, #216	; 0xd8
    4484:	4631      	mov	r1, r6
    4486:	4806      	ldr	r0, [pc, #24]	; (44a0 <detect_missed_strdup+0x88>)
    4488:	f00c fdce 	bl	11028 <printk>
    448c:	21d8      	movs	r1, #216	; 0xd8
    448e:	4630      	mov	r0, r6
    4490:	f00c feec 	bl	1126c <assert_post_action>
    4494:	e7d3      	b.n	443e <detect_missed_strdup+0x26>
    4496:	bf00      	nop
    4498:	00015c64 	.word	0x00015c64
    449c:	00015c00 	.word	0x00015c00
    44a0:	00015984 	.word	0x00015984

000044a4 <msg_process>:
{
    44a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    44a8:	4607      	mov	r7, r0
	if (!bypass) {
    44aa:	2900      	cmp	r1, #0
    44ac:	d14e      	bne.n	454c <msg_process+0xa8>
		    !panic_mode) {
    44ae:	4b2a      	ldr	r3, [pc, #168]	; (4558 <msg_process+0xb4>)
    44b0:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
    44b2:	b10b      	cbz	r3, 44b8 <msg_process+0x14>
{
    44b4:	2400      	movs	r4, #0
    44b6:	e023      	b.n	4500 <msg_process+0x5c>
			detect_missed_strdup(msg.msg);
    44b8:	f7ff ffae 	bl	4418 <detect_missed_strdup>
    44bc:	e7fa      	b.n	44b4 <msg_process+0x10>
	__ASSERT_NO_MSG(backend != NULL);
    44be:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 4568 <msg_process+0xc4>
    44c2:	f240 121d 	movw	r2, #285	; 0x11d
    44c6:	4649      	mov	r1, r9
    44c8:	4824      	ldr	r0, [pc, #144]	; (455c <msg_process+0xb8>)
    44ca:	f00c fdad 	bl	11028 <printk>
    44ce:	f240 111d 	movw	r1, #285	; 0x11d
    44d2:	4648      	mov	r0, r9
    44d4:	f00c feca 	bl	1126c <assert_post_action>
    44d8:	e01e      	b.n	4518 <msg_process+0x74>
	__ASSERT_NO_MSG(backend != NULL);
    44da:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4568 <msg_process+0xc4>
    44de:	226b      	movs	r2, #107	; 0x6b
    44e0:	4649      	mov	r1, r9
    44e2:	481e      	ldr	r0, [pc, #120]	; (455c <msg_process+0xb8>)
    44e4:	f00c fda0 	bl	11028 <printk>
    44e8:	216b      	movs	r1, #107	; 0x6b
    44ea:	4648      	mov	r0, r9
    44ec:	f00c febe 	bl	1126c <assert_post_action>
    44f0:	e01e      	b.n	4530 <msg_process+0x8c>
	backend->api->put(backend, msg);
    44f2:	f858 3005 	ldr.w	r3, [r8, r5]
    44f6:	685b      	ldr	r3, [r3, #4]
    44f8:	4639      	mov	r1, r7
    44fa:	4630      	mov	r0, r6
    44fc:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    44fe:	3401      	adds	r4, #1
    4500:	4b17      	ldr	r3, [pc, #92]	; (4560 <msg_process+0xbc>)
    4502:	4a18      	ldr	r2, [pc, #96]	; (4564 <msg_process+0xc0>)
    4504:	1a9b      	subs	r3, r3, r2
    4506:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    450a:	da1f      	bge.n	454c <msg_process+0xa8>
	return &__log_backends_start[idx];
    450c:	ea4f 1804 	mov.w	r8, r4, lsl #4
    4510:	4d14      	ldr	r5, [pc, #80]	; (4564 <msg_process+0xc0>)
	__ASSERT_NO_MSG(backend != NULL);
    4512:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    4516:	d0d2      	beq.n	44be <msg_process+0x1a>
	return backend->cb->active;
    4518:	6873      	ldr	r3, [r6, #4]
    451a:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
    451c:	2b00      	cmp	r3, #0
    451e:	d0ee      	beq.n	44fe <msg_process+0x5a>
			    msg_filter_check(backend, msg)) {
    4520:	4639      	mov	r1, r7
    4522:	4630      	mov	r0, r6
    4524:	f00c fec2 	bl	112ac <msg_filter_check>
			if (log_backend_is_active(backend) &&
    4528:	2800      	cmp	r0, #0
    452a:	d0e8      	beq.n	44fe <msg_process+0x5a>
	__ASSERT_NO_MSG(backend != NULL);
    452c:	2e00      	cmp	r6, #0
    452e:	d0d4      	beq.n	44da <msg_process+0x36>
	__ASSERT_NO_MSG(msg != NULL);
    4530:	2f00      	cmp	r7, #0
    4532:	d1de      	bne.n	44f2 <msg_process+0x4e>
    4534:	f8df 9030 	ldr.w	r9, [pc, #48]	; 4568 <msg_process+0xc4>
    4538:	226c      	movs	r2, #108	; 0x6c
    453a:	4649      	mov	r1, r9
    453c:	4807      	ldr	r0, [pc, #28]	; (455c <msg_process+0xb8>)
    453e:	f00c fd73 	bl	11028 <printk>
    4542:	216c      	movs	r1, #108	; 0x6c
    4544:	4648      	mov	r0, r9
    4546:	f00c fe91 	bl	1126c <assert_post_action>
    454a:	e7d2      	b.n	44f2 <msg_process+0x4e>
			log_msg_put(msg.msg);
    454c:	4638      	mov	r0, r7
    454e:	f00c ff72 	bl	11436 <log_msg_put>
}
    4552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4556:	bf00      	nop
    4558:	20001657 	.word	0x20001657
    455c:	00015984 	.word	0x00015984
    4560:	000157e4 	.word	0x000157e4
    4564:	000157d4 	.word	0x000157d4
    4568:	00015c30 	.word	0x00015c30

0000456c <z_impl_log_process>:
{
    456c:	b510      	push	{r4, lr}
    456e:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    4570:	4b11      	ldr	r3, [pc, #68]	; (45b8 <z_impl_log_process+0x4c>)
    4572:	781b      	ldrb	r3, [r3, #0]
    4574:	b903      	cbnz	r3, 4578 <z_impl_log_process+0xc>
    4576:	b1d0      	cbz	r0, 45ae <z_impl_log_process+0x42>
	msg = get_msg();
    4578:	f7ff fe68 	bl	424c <get_msg>
	if (msg.msg) {
    457c:	4603      	mov	r3, r0
    457e:	b180      	cbz	r0, 45a2 <z_impl_log_process+0x36>
		if (!bypass) {
    4580:	b95c      	cbnz	r4, 459a <z_impl_log_process+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4582:	4a0e      	ldr	r2, [pc, #56]	; (45bc <z_impl_log_process+0x50>)
    4584:	f3bf 8f5b 	dmb	ish
    4588:	e852 1f00 	ldrex	r1, [r2]
    458c:	3901      	subs	r1, #1
    458e:	e842 1000 	strex	r0, r1, [r2]
    4592:	2800      	cmp	r0, #0
    4594:	d1f8      	bne.n	4588 <z_impl_log_process+0x1c>
    4596:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
    459a:	4621      	mov	r1, r4
    459c:	4618      	mov	r0, r3
    459e:	f7ff ff81 	bl	44a4 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
    45a2:	b914      	cbnz	r4, 45aa <z_impl_log_process+0x3e>
    45a4:	f7ff feec 	bl	4380 <z_log_dropped_pending>
    45a8:	b910      	cbnz	r0, 45b0 <z_impl_log_process+0x44>
	return next_pending();
    45aa:	f7ff fd65 	bl	4078 <next_pending>
}
    45ae:	bd10      	pop	{r4, pc}
		dropped_notify();
    45b0:	f7ff fe9e 	bl	42f0 <dropped_notify>
    45b4:	e7f9      	b.n	45aa <z_impl_log_process+0x3e>
    45b6:	bf00      	nop
    45b8:	20001656 	.word	0x20001656
    45bc:	20000ac0 	.word	0x20000ac0

000045c0 <z_log_msg_post_finalize>:
{
    45c0:	b510      	push	{r4, lr}
    45c2:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    45c4:	4b1d      	ldr	r3, [pc, #116]	; (463c <z_log_msg_post_finalize+0x7c>)
    45c6:	f3bf 8f5b 	dmb	ish
    45ca:	e853 2f00 	ldrex	r2, [r3]
    45ce:	1c51      	adds	r1, r2, #1
    45d0:	e843 1000 	strex	r0, r1, [r3]
    45d4:	2800      	cmp	r0, #0
    45d6:	d1f8      	bne.n	45ca <z_log_msg_post_finalize+0xa>
    45d8:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    45dc:	4b18      	ldr	r3, [pc, #96]	; (4640 <z_log_msg_post_finalize+0x80>)
    45de:	781b      	ldrb	r3, [r3, #0]
    45e0:	b93b      	cbnz	r3, 45f2 <z_log_msg_post_finalize+0x32>
	} else if (proc_tid != NULL && cnt == 0) {
    45e2:	4b18      	ldr	r3, [pc, #96]	; (4644 <z_log_msg_post_finalize+0x84>)
    45e4:	681b      	ldr	r3, [r3, #0]
    45e6:	b103      	cbz	r3, 45ea <z_log_msg_post_finalize+0x2a>
    45e8:	b19a      	cbz	r2, 4612 <z_log_msg_post_finalize+0x52>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    45ea:	2a0a      	cmp	r2, #10
    45ec:	d01c      	beq.n	4628 <z_log_msg_post_finalize+0x68>
}
    45ee:	b002      	add	sp, #8
    45f0:	bd10      	pop	{r4, pc}
	__asm__ volatile(
    45f2:	f04f 0320 	mov.w	r3, #32
    45f6:	f3ef 8411 	mrs	r4, BASEPRI
    45fa:	f383 8812 	msr	BASEPRI_MAX, r3
    45fe:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    4602:	2000      	movs	r0, #0
    4604:	f7ff ffb2 	bl	456c <z_impl_log_process>
	__asm__ volatile(
    4608:	f384 8811 	msr	BASEPRI, r4
    460c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    4610:	e7ed      	b.n	45ee <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_start(timer, duration, period);
    4612:	2200      	movs	r2, #0
    4614:	2300      	movs	r3, #0
    4616:	e9cd 2300 	strd	r2, r3, [sp]
    461a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    461e:	2300      	movs	r3, #0
    4620:	4809      	ldr	r0, [pc, #36]	; (4648 <z_log_msg_post_finalize+0x88>)
    4622:	f00b fe29 	bl	10278 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && cnt == 0) {
    4626:	e7e2      	b.n	45ee <z_log_msg_post_finalize+0x2e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    4628:	2b00      	cmp	r3, #0
    462a:	d0e0      	beq.n	45ee <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_stop(timer);
    462c:	4806      	ldr	r0, [pc, #24]	; (4648 <z_log_msg_post_finalize+0x88>)
    462e:	f010 f9de 	bl	149ee <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    4632:	4806      	ldr	r0, [pc, #24]	; (464c <z_log_msg_post_finalize+0x8c>)
    4634:	f00a f886 	bl	e744 <z_impl_k_sem_give>
}
    4638:	e7d9      	b.n	45ee <z_log_msg_post_finalize+0x2e>
    463a:	bf00      	nop
    463c:	20000ac0 	.word	0x20000ac0
    4640:	20001657 	.word	0x20001657
    4644:	20000af4 	.word	0x20000af4
    4648:	200003e8 	.word	0x200003e8
    464c:	200003d8 	.word	0x200003d8

00004650 <z_log_printk>:
{
    4650:	b530      	push	{r4, r5, lr}
    4652:	b0a3      	sub	sp, #140	; 0x8c
    4654:	4602      	mov	r2, r0
    4656:	460b      	mov	r3, r1
		} src_level_union = {
    4658:	2500      	movs	r5, #0
			length = vsnprintk(str, sizeof(str), fmt, ap);
    465a:	2181      	movs	r1, #129	; 0x81
    465c:	a801      	add	r0, sp, #4
    465e:	f7fe f98b 	bl	2978 <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
    4662:	4602      	mov	r2, r0
    4664:	2881      	cmp	r0, #129	; 0x81
    4666:	bf28      	it	cs
    4668:	2281      	movcs	r2, #129	; 0x81
    466a:	a901      	add	r1, sp, #4
    466c:	4628      	mov	r0, r5
    466e:	f00c ff26 	bl	114be <log_msg_hexdump_create>
			if (msg == NULL) {
    4672:	b1b8      	cbz	r0, 46a4 <z_log_printk+0x54>
    4674:	4604      	mov	r4, r0
	msg->hdr.ids = src_level;
    4676:	8145      	strh	r5, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
    4678:	4b0b      	ldr	r3, [pc, #44]	; (46a8 <z_log_printk+0x58>)
    467a:	681b      	ldr	r3, [r3, #0]
    467c:	4798      	blx	r3
    467e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    4680:	f04f 0320 	mov.w	r3, #32
    4684:	f3ef 8511 	mrs	r5, BASEPRI
    4688:	f383 8812 	msr	BASEPRI_MAX, r3
    468c:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    4690:	4621      	mov	r1, r4
    4692:	4806      	ldr	r0, [pc, #24]	; (46ac <z_log_printk+0x5c>)
    4694:	f00c fdf6 	bl	11284 <log_list_add_tail>
	__asm__ volatile(
    4698:	f385 8811 	msr	BASEPRI, r5
    469c:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    46a0:	f7ff ff8e 	bl	45c0 <z_log_msg_post_finalize>
}
    46a4:	b023      	add	sp, #140	; 0x8c
    46a6:	bd30      	pop	{r4, r5, pc}
    46a8:	20000048 	.word	0x20000048
    46ac:	20000acc 	.word	0x20000acc

000046b0 <log_1>:
{
    46b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46b2:	4606      	mov	r6, r0
    46b4:	460d      	mov	r5, r1
    46b6:	4617      	mov	r7, r2
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    46b8:	f000 fa0e 	bl	4ad8 <log_msg_chunk_alloc>

	if (msg != NULL) {
    46bc:	4604      	mov	r4, r0
    46be:	b140      	cbz	r0, 46d2 <log_1+0x22>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    46c0:	2301      	movs	r3, #1
    46c2:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    46c4:	2100      	movs	r1, #0
    46c6:	8101      	strh	r1, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    46c8:	f04f 0300 	mov.w	r3, #0
    46cc:	f361 0300 	bfi	r3, r1, #0, #1
    46d0:	7203      	strb	r3, [r0, #8]
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
    46d2:	b134      	cbz	r4, 46e2 <log_1+0x32>
		msg->str = str;
    46d4:	6126      	str	r6, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
    46d6:	7a63      	ldrb	r3, [r4, #9]
    46d8:	2201      	movs	r2, #1
    46da:	f362 1307 	bfi	r3, r2, #4, #4
    46de:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    46e0:	6165      	str	r5, [r4, #20]
		if (msg == NULL) {
    46e2:	b1b4      	cbz	r4, 4712 <log_1+0x62>
	msg->hdr.ids = src_level;
    46e4:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    46e6:	4b0b      	ldr	r3, [pc, #44]	; (4714 <log_1+0x64>)
    46e8:	681b      	ldr	r3, [r3, #0]
    46ea:	4798      	blx	r3
    46ec:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    46ee:	f04f 0320 	mov.w	r3, #32
    46f2:	f3ef 8511 	mrs	r5, BASEPRI
    46f6:	f383 8812 	msr	BASEPRI_MAX, r3
    46fa:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    46fe:	4621      	mov	r1, r4
    4700:	4805      	ldr	r0, [pc, #20]	; (4718 <log_1+0x68>)
    4702:	f00c fdbf 	bl	11284 <log_list_add_tail>
	__asm__ volatile(
    4706:	f385 8811 	msr	BASEPRI, r5
    470a:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    470e:	f7ff ff57 	bl	45c0 <z_log_msg_post_finalize>
}
    4712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4714:	20000048 	.word	0x20000048
    4718:	20000acc 	.word	0x20000acc

0000471c <log_2>:
{
    471c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4720:	4607      	mov	r7, r0
    4722:	460e      	mov	r6, r1
    4724:	4615      	mov	r5, r2
    4726:	4698      	mov	r8, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    4728:	f000 f9d6 	bl	4ad8 <log_msg_chunk_alloc>
	if (msg != NULL) {
    472c:	4604      	mov	r4, r0
    472e:	b140      	cbz	r0, 4742 <log_2+0x26>
		msg->hdr.ref_cnt = 1;
    4730:	2301      	movs	r3, #1
    4732:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    4734:	2200      	movs	r2, #0
    4736:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    4738:	f04f 0300 	mov.w	r3, #0
    473c:	f362 0300 	bfi	r3, r2, #0, #1
    4740:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
    4742:	b13c      	cbz	r4, 4754 <log_2+0x38>
		msg->str = str;
    4744:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
    4746:	7a63      	ldrb	r3, [r4, #9]
    4748:	2202      	movs	r2, #2
    474a:	f362 1307 	bfi	r3, r2, #4, #4
    474e:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    4750:	6166      	str	r6, [r4, #20]
		msg->payload.single.args[1] = arg2;
    4752:	61a5      	str	r5, [r4, #24]
		if (msg == NULL) {
    4754:	b1bc      	cbz	r4, 4786 <log_2+0x6a>
	msg->hdr.ids = src_level;
    4756:	f8a4 800a 	strh.w	r8, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    475a:	4b0c      	ldr	r3, [pc, #48]	; (478c <log_2+0x70>)
    475c:	681b      	ldr	r3, [r3, #0]
    475e:	4798      	blx	r3
    4760:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    4762:	f04f 0320 	mov.w	r3, #32
    4766:	f3ef 8511 	mrs	r5, BASEPRI
    476a:	f383 8812 	msr	BASEPRI_MAX, r3
    476e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    4772:	4621      	mov	r1, r4
    4774:	4806      	ldr	r0, [pc, #24]	; (4790 <log_2+0x74>)
    4776:	f00c fd85 	bl	11284 <log_list_add_tail>
	__asm__ volatile(
    477a:	f385 8811 	msr	BASEPRI, r5
    477e:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    4782:	f7ff ff1d 	bl	45c0 <z_log_msg_post_finalize>
}
    4786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    478a:	bf00      	nop
    478c:	20000048 	.word	0x20000048
    4790:	20000acc 	.word	0x20000acc

00004794 <log_n>:
{
    4794:	b538      	push	{r3, r4, r5, lr}
    4796:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
    4798:	f000 f9fa 	bl	4b90 <log_msg_create_n>
		if (msg == NULL) {
    479c:	b1b8      	cbz	r0, 47ce <log_n+0x3a>
    479e:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
    47a0:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
    47a2:	4b0b      	ldr	r3, [pc, #44]	; (47d0 <log_n+0x3c>)
    47a4:	681b      	ldr	r3, [r3, #0]
    47a6:	4798      	blx	r3
    47a8:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
    47aa:	f04f 0320 	mov.w	r3, #32
    47ae:	f3ef 8411 	mrs	r4, BASEPRI
    47b2:	f383 8812 	msr	BASEPRI_MAX, r3
    47b6:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    47ba:	4629      	mov	r1, r5
    47bc:	4805      	ldr	r0, [pc, #20]	; (47d4 <log_n+0x40>)
    47be:	f00c fd61 	bl	11284 <log_list_add_tail>
	__asm__ volatile(
    47c2:	f384 8811 	msr	BASEPRI, r4
    47c6:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    47ca:	f7ff fef9 	bl	45c0 <z_log_msg_post_finalize>
}
    47ce:	bd38      	pop	{r3, r4, r5, pc}
    47d0:	20000048 	.word	0x20000048
    47d4:	20000acc 	.word	0x20000acc

000047d8 <log_3>:
{
    47d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47dc:	4680      	mov	r8, r0
    47de:	460f      	mov	r7, r1
    47e0:	4616      	mov	r6, r2
    47e2:	461d      	mov	r5, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    47e4:	f000 f978 	bl	4ad8 <log_msg_chunk_alloc>
	if (msg != NULL) {
    47e8:	4604      	mov	r4, r0
    47ea:	b140      	cbz	r0, 47fe <log_3+0x26>
		msg->hdr.ref_cnt = 1;
    47ec:	2301      	movs	r3, #1
    47ee:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    47f0:	2200      	movs	r2, #0
    47f2:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    47f4:	f04f 0300 	mov.w	r3, #0
    47f8:	f362 0300 	bfi	r3, r2, #0, #1
    47fc:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
    47fe:	b14c      	cbz	r4, 4814 <log_3+0x3c>
		msg->str = str;
    4800:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
    4804:	7a63      	ldrb	r3, [r4, #9]
    4806:	2203      	movs	r2, #3
    4808:	f362 1307 	bfi	r3, r2, #4, #4
    480c:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    480e:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
    4810:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
    4812:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
    4814:	b1c4      	cbz	r4, 4848 <log_3+0x70>
	msg->hdr.ids = src_level;
    4816:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    481a:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    481c:	4b0b      	ldr	r3, [pc, #44]	; (484c <log_3+0x74>)
    481e:	681b      	ldr	r3, [r3, #0]
    4820:	4798      	blx	r3
    4822:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    4824:	f04f 0320 	mov.w	r3, #32
    4828:	f3ef 8511 	mrs	r5, BASEPRI
    482c:	f383 8812 	msr	BASEPRI_MAX, r3
    4830:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    4834:	4621      	mov	r1, r4
    4836:	4806      	ldr	r0, [pc, #24]	; (4850 <log_3+0x78>)
    4838:	f00c fd24 	bl	11284 <log_list_add_tail>
	__asm__ volatile(
    483c:	f385 8811 	msr	BASEPRI, r5
    4840:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    4844:	f7ff febc 	bl	45c0 <z_log_msg_post_finalize>
}
    4848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    484c:	20000048 	.word	0x20000048
    4850:	20000acc 	.word	0x20000acc

00004854 <log_0>:
{
    4854:	b570      	push	{r4, r5, r6, lr}
    4856:	4605      	mov	r5, r0
    4858:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    485a:	f000 f93d 	bl	4ad8 <log_msg_chunk_alloc>
	if (msg != NULL) {
    485e:	4604      	mov	r4, r0
    4860:	b140      	cbz	r0, 4874 <log_0+0x20>
		msg->hdr.ref_cnt = 1;
    4862:	2301      	movs	r3, #1
    4864:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    4866:	2200      	movs	r2, #0
    4868:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    486a:	f04f 0300 	mov.w	r3, #0
    486e:	f362 0300 	bfi	r3, r2, #0, #1
    4872:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    4874:	b104      	cbz	r4, 4878 <log_0+0x24>
		msg->str = str;
    4876:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
    4878:	b1b4      	cbz	r4, 48a8 <log_0+0x54>
	msg->hdr.ids = src_level;
    487a:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    487c:	4b0b      	ldr	r3, [pc, #44]	; (48ac <log_0+0x58>)
    487e:	681b      	ldr	r3, [r3, #0]
    4880:	4798      	blx	r3
    4882:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    4884:	f04f 0320 	mov.w	r3, #32
    4888:	f3ef 8511 	mrs	r5, BASEPRI
    488c:	f383 8812 	msr	BASEPRI_MAX, r3
    4890:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    4894:	4621      	mov	r1, r4
    4896:	4806      	ldr	r0, [pc, #24]	; (48b0 <log_0+0x5c>)
    4898:	f00c fcf4 	bl	11284 <log_list_add_tail>
	__asm__ volatile(
    489c:	f385 8811 	msr	BASEPRI, r5
    48a0:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    48a4:	f7ff fe8c 	bl	45c0 <z_log_msg_post_finalize>
}
    48a8:	bd70      	pop	{r4, r5, r6, pc}
    48aa:	bf00      	nop
    48ac:	20000048 	.word	0x20000048
    48b0:	20000acc 	.word	0x20000acc

000048b4 <z_impl_log_panic>:
	if (panic_mode) {
    48b4:	4b21      	ldr	r3, [pc, #132]	; (493c <z_impl_log_panic+0x88>)
    48b6:	781b      	ldrb	r3, [r3, #0]
    48b8:	b103      	cbz	r3, 48bc <z_impl_log_panic+0x8>
    48ba:	4770      	bx	lr
{
    48bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	log_init();
    48c0:	f7ff fc48 	bl	4154 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    48c4:	2400      	movs	r4, #0
    48c6:	e012      	b.n	48ee <z_impl_log_panic+0x3a>
	__ASSERT_NO_MSG(backend != NULL);
    48c8:	f8df 8080 	ldr.w	r8, [pc, #128]	; 494c <z_impl_log_panic+0x98>
    48cc:	f240 121d 	movw	r2, #285	; 0x11d
    48d0:	4641      	mov	r1, r8
    48d2:	481b      	ldr	r0, [pc, #108]	; (4940 <z_impl_log_panic+0x8c>)
    48d4:	f00c fba8 	bl	11028 <printk>
    48d8:	f240 111d 	movw	r1, #285	; 0x11d
    48dc:	4640      	mov	r0, r8
    48de:	f00c fcc5 	bl	1126c <assert_post_action>
    48e2:	e00f      	b.n	4904 <z_impl_log_panic+0x50>
	backend->api->panic(backend);
    48e4:	597b      	ldr	r3, [r7, r5]
    48e6:	695b      	ldr	r3, [r3, #20]
    48e8:	4630      	mov	r0, r6
    48ea:	4798      	blx	r3
    48ec:	3401      	adds	r4, #1
    48ee:	4b15      	ldr	r3, [pc, #84]	; (4944 <z_impl_log_panic+0x90>)
    48f0:	4a15      	ldr	r2, [pc, #84]	; (4948 <z_impl_log_panic+0x94>)
    48f2:	1a9b      	subs	r3, r3, r2
    48f4:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    48f8:	da16      	bge.n	4928 <z_impl_log_panic+0x74>
	return &__log_backends_start[idx];
    48fa:	0127      	lsls	r7, r4, #4
    48fc:	4d12      	ldr	r5, [pc, #72]	; (4948 <z_impl_log_panic+0x94>)
	__ASSERT_NO_MSG(backend != NULL);
    48fe:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    4902:	d0e1      	beq.n	48c8 <z_impl_log_panic+0x14>
	return backend->cb->active;
    4904:	6873      	ldr	r3, [r6, #4]
    4906:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    4908:	2b00      	cmp	r3, #0
    490a:	d0ef      	beq.n	48ec <z_impl_log_panic+0x38>
	__ASSERT_NO_MSG(backend != NULL);
    490c:	2e00      	cmp	r6, #0
    490e:	d1e9      	bne.n	48e4 <z_impl_log_panic+0x30>
    4910:	f8df 8038 	ldr.w	r8, [pc, #56]	; 494c <z_impl_log_panic+0x98>
    4914:	22c2      	movs	r2, #194	; 0xc2
    4916:	4641      	mov	r1, r8
    4918:	4809      	ldr	r0, [pc, #36]	; (4940 <z_impl_log_panic+0x8c>)
    491a:	f00c fb85 	bl	11028 <printk>
    491e:	21c2      	movs	r1, #194	; 0xc2
    4920:	4640      	mov	r0, r8
    4922:	f00c fca3 	bl	1126c <assert_post_action>
    4926:	e7dd      	b.n	48e4 <z_impl_log_panic+0x30>
    4928:	2000      	movs	r0, #0
    492a:	f7ff fe1f 	bl	456c <z_impl_log_process>
		while (log_process(false) == true) {
    492e:	2800      	cmp	r0, #0
    4930:	d1fa      	bne.n	4928 <z_impl_log_panic+0x74>
	panic_mode = true;
    4932:	4b02      	ldr	r3, [pc, #8]	; (493c <z_impl_log_panic+0x88>)
    4934:	2201      	movs	r2, #1
    4936:	701a      	strb	r2, [r3, #0]
}
    4938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    493c:	20001657 	.word	0x20001657
    4940:	00015984 	.word	0x00015984
    4944:	000157e4 	.word	0x000157e4
    4948:	000157d4 	.word	0x000157d4
    494c:	00015c30 	.word	0x00015c30

00004950 <log_process_thread_func>:
{
    4950:	b510      	push	{r4, lr}
	return __log_backends_end - __log_backends_start;
    4952:	4b13      	ldr	r3, [pc, #76]	; (49a0 <log_process_thread_func+0x50>)
    4954:	4a13      	ldr	r2, [pc, #76]	; (49a4 <log_process_thread_func+0x54>)
    4956:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    4958:	2b00      	cmp	r3, #0
    495a:	dd06      	ble.n	496a <log_process_thread_func+0x1a>
	log_init();
    495c:	f7ff fbfa 	bl	4154 <log_init>
	return z_impl_z_current_get();
    4960:	f00b f84a 	bl	f9f8 <z_impl_z_current_get>
	thread_set(k_current_get());
    4964:	f7ff fb6c 	bl	4040 <thread_set>
    4968:	e013      	b.n	4992 <log_process_thread_func+0x42>
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    496a:	4c0f      	ldr	r4, [pc, #60]	; (49a8 <log_process_thread_func+0x58>)
    496c:	f240 42f1 	movw	r2, #1265	; 0x4f1
    4970:	4621      	mov	r1, r4
    4972:	480e      	ldr	r0, [pc, #56]	; (49ac <log_process_thread_func+0x5c>)
    4974:	f00c fb58 	bl	11028 <printk>
    4978:	f240 41f1 	movw	r1, #1265	; 0x4f1
    497c:	4620      	mov	r0, r4
    497e:	f00c fc75 	bl	1126c <assert_post_action>
    4982:	e7eb      	b.n	495c <log_process_thread_func+0xc>
	return z_impl_k_sem_take(sem, timeout);
    4984:	f04f 32ff 	mov.w	r2, #4294967295
    4988:	f04f 33ff 	mov.w	r3, #4294967295
    498c:	4808      	ldr	r0, [pc, #32]	; (49b0 <log_process_thread_func+0x60>)
    498e:	f009 ff13 	bl	e7b8 <z_impl_k_sem_take>
    4992:	2000      	movs	r0, #0
    4994:	f7ff fdea 	bl	456c <z_impl_log_process>
		if (log_process(false) == false) {
    4998:	2800      	cmp	r0, #0
    499a:	d1fa      	bne.n	4992 <log_process_thread_func+0x42>
    499c:	e7f2      	b.n	4984 <log_process_thread_func+0x34>
    499e:	bf00      	nop
    49a0:	000157e4 	.word	0x000157e4
    49a4:	000157d4 	.word	0x000157d4
    49a8:	00015c00 	.word	0x00015c00
    49ac:	00015984 	.word	0x00015984
    49b0:	200003d8 	.word	0x200003d8

000049b4 <z_log_free>:
{
    49b4:	b500      	push	{lr}
    49b6:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    49b8:	3804      	subs	r0, #4
    49ba:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    49bc:	f3bf 8f5b 	dmb	ish
    49c0:	e850 3f00 	ldrex	r3, [r0]
    49c4:	1e5a      	subs	r2, r3, #1
    49c6:	e840 2100 	strex	r1, r2, [r0]
    49ca:	2900      	cmp	r1, #0
    49cc:	d1f8      	bne.n	49c0 <z_log_free+0xc>
    49ce:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    49d2:	2b01      	cmp	r3, #1
    49d4:	d002      	beq.n	49dc <z_log_free+0x28>
}
    49d6:	b003      	add	sp, #12
    49d8:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    49dc:	a901      	add	r1, sp, #4
    49de:	4802      	ldr	r0, [pc, #8]	; (49e8 <z_log_free+0x34>)
    49e0:	f009 fa9e 	bl	df20 <k_mem_slab_free>
}
    49e4:	e7f7      	b.n	49d6 <z_log_free+0x22>
    49e6:	bf00      	nop
    49e8:	20000ad4 	.word	0x20000ad4

000049ec <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    49ec:	4b05      	ldr	r3, [pc, #20]	; (4a04 <log_source_name_get+0x18>)
    49ee:	4a06      	ldr	r2, [pc, #24]	; (4a08 <log_source_name_get+0x1c>)
    49f0:	1a9b      	subs	r3, r3, r2
    49f2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    49f6:	d202      	bcs.n	49fe <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    49f8:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    49fc:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    49fe:	2000      	movs	r0, #0
}
    4a00:	4770      	bx	lr
    4a02:	bf00      	nop
    4a04:	000157d4 	.word	0x000157d4
    4a08:	00015774 	.word	0x00015774

00004a0c <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    4a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a0e:	4605      	mov	r5, r0
    4a10:	460e      	mov	r6, r1
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    4a12:	4c14      	ldr	r4, [pc, #80]	; (4a64 <log_backend_enable+0x58>)
    4a14:	1b04      	subs	r4, r0, r4
    4a16:	1124      	asrs	r4, r4, #4
    4a18:	3401      	adds	r4, #1

	log_backend_id_set(backend, id);
    4a1a:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
    4a1c:	b150      	cbz	r0, 4a34 <log_backend_enable+0x28>
	backend->cb->id = id;
    4a1e:	686b      	ldr	r3, [r5, #4]
    4a20:	711c      	strb	r4, [r3, #4]
	__ASSERT_NO_MSG(backend != NULL);
    4a22:	b195      	cbz	r5, 4a4a <log_backend_enable+0x3e>
	backend->cb->ctx = ctx;
    4a24:	686b      	ldr	r3, [r5, #4]
    4a26:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    4a28:	686b      	ldr	r3, [r5, #4]
    4a2a:	2201      	movs	r2, #1
    4a2c:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    4a2e:	f7ff fc21 	bl	4274 <z_log_notify_backend_enabled>
}
    4a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(backend != NULL);
    4a34:	4f0c      	ldr	r7, [pc, #48]	; (4a68 <log_backend_enable+0x5c>)
    4a36:	22d1      	movs	r2, #209	; 0xd1
    4a38:	4639      	mov	r1, r7
    4a3a:	480c      	ldr	r0, [pc, #48]	; (4a6c <log_backend_enable+0x60>)
    4a3c:	f00c faf4 	bl	11028 <printk>
    4a40:	21d1      	movs	r1, #209	; 0xd1
    4a42:	4638      	mov	r0, r7
    4a44:	f00c fc12 	bl	1126c <assert_post_action>
    4a48:	e7e9      	b.n	4a1e <log_backend_enable+0x12>
	__ASSERT_NO_MSG(backend != NULL);
    4a4a:	4c07      	ldr	r4, [pc, #28]	; (4a68 <log_backend_enable+0x5c>)
    4a4c:	f44f 7281 	mov.w	r2, #258	; 0x102
    4a50:	4621      	mov	r1, r4
    4a52:	4806      	ldr	r0, [pc, #24]	; (4a6c <log_backend_enable+0x60>)
    4a54:	f00c fae8 	bl	11028 <printk>
    4a58:	f44f 7181 	mov.w	r1, #258	; 0x102
    4a5c:	4620      	mov	r0, r4
    4a5e:	f00c fc05 	bl	1126c <assert_post_action>
    4a62:	e7df      	b.n	4a24 <log_backend_enable+0x18>
    4a64:	000157d4 	.word	0x000157d4
    4a68:	00015c30 	.word	0x00015c30
    4a6c:	00015984 	.word	0x00015984

00004a70 <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
    4a70:	b510      	push	{r4, lr}
    4a72:	b082      	sub	sp, #8
    4a74:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
    4a76:	9b01      	ldr	r3, [sp, #4]
    4a78:	b133      	cbz	r3, 4a88 <cont_free+0x18>
		next = cont->next;
    4a7a:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    4a7c:	a901      	add	r1, sp, #4
    4a7e:	4803      	ldr	r0, [pc, #12]	; (4a8c <cont_free+0x1c>)
    4a80:	f009 fa4e 	bl	df20 <k_mem_slab_free>
		cont = next;
    4a84:	9401      	str	r4, [sp, #4]
    4a86:	e7f6      	b.n	4a76 <cont_free+0x6>
	}
}
    4a88:	b002      	add	sp, #8
    4a8a:	bd10      	pop	{r4, pc}
    4a8c:	20000af8 	.word	0x20000af8

00004a90 <log_msg_pool_init>:
{
    4a90:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    4a92:	2320      	movs	r3, #32
    4a94:	461a      	mov	r2, r3
    4a96:	4902      	ldr	r1, [pc, #8]	; (4aa0 <log_msg_pool_init+0x10>)
    4a98:	4802      	ldr	r0, [pc, #8]	; (4aa4 <log_msg_pool_init+0x14>)
    4a9a:	f00f fef0 	bl	1487e <k_mem_slab_init>
}
    4a9e:	bd08      	pop	{r3, pc}
    4aa0:	200033e0 	.word	0x200033e0
    4aa4:	20000af8 	.word	0x20000af8

00004aa8 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    4aa8:	b510      	push	{r4, lr}
    4aaa:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
    4aac:	2300      	movs	r3, #0
    4aae:	9301      	str	r3, [sp, #4]
    4ab0:	2001      	movs	r0, #1
    4ab2:	f7ff fd5b 	bl	456c <z_impl_log_process>
    4ab6:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
    4ab8:	f7ff fbec 	bl	4294 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    4abc:	2200      	movs	r2, #0
    4abe:	2300      	movs	r3, #0
    4ac0:	a901      	add	r1, sp, #4
    4ac2:	4804      	ldr	r0, [pc, #16]	; (4ad4 <log_msg_no_space_handle+0x2c>)
    4ac4:	f009 f9ca 	bl	de5c <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    4ac8:	b108      	cbz	r0, 4ace <log_msg_no_space_handle+0x26>
    4aca:	2c00      	cmp	r4, #0
    4acc:	d1f0      	bne.n	4ab0 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
    4ace:	9801      	ldr	r0, [sp, #4]
    4ad0:	b002      	add	sp, #8
    4ad2:	bd10      	pop	{r4, pc}
    4ad4:	20000af8 	.word	0x20000af8

00004ad8 <log_msg_chunk_alloc>:
{
    4ad8:	b500      	push	{lr}
    4ada:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
    4adc:	2300      	movs	r3, #0
    4ade:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
    4ae0:	f00c fbec 	bl	112bc <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    4ae4:	b150      	cbz	r0, 4afc <log_msg_chunk_alloc+0x24>
    4ae6:	2200      	movs	r2, #0
    4ae8:	2300      	movs	r3, #0
    4aea:	a901      	add	r1, sp, #4
    4aec:	4807      	ldr	r0, [pc, #28]	; (4b0c <log_msg_chunk_alloc+0x34>)
    4aee:	f009 f9b5 	bl	de5c <k_mem_slab_alloc>
	if (err != 0) {
    4af2:	b930      	cbnz	r0, 4b02 <log_msg_chunk_alloc+0x2a>
}
    4af4:	9801      	ldr	r0, [sp, #4]
    4af6:	b003      	add	sp, #12
    4af8:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    4afc:	2200      	movs	r2, #0
    4afe:	2300      	movs	r3, #0
    4b00:	e7f3      	b.n	4aea <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
    4b02:	f7ff ffd1 	bl	4aa8 <log_msg_no_space_handle>
    4b06:	9001      	str	r0, [sp, #4]
    4b08:	e7f4      	b.n	4af4 <log_msg_chunk_alloc+0x1c>
    4b0a:	bf00      	nop
    4b0c:	20000af8 	.word	0x20000af8

00004b10 <msg_free>:
{
    4b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b12:	b083      	sub	sp, #12
    4b14:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
    4b16:	4604      	mov	r4, r0
    4b18:	f00c fc76 	bl	11408 <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    4b1c:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
    4b1e:	f013 0f01 	tst.w	r3, #1
    4b22:	d101      	bne.n	4b28 <msg_free+0x18>
    4b24:	4606      	mov	r6, r0
    4b26:	bb50      	cbnz	r0, 4b7e <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
    4b28:	9b01      	ldr	r3, [sp, #4]
    4b2a:	7a1a      	ldrb	r2, [r3, #8]
    4b2c:	f012 0f02 	tst.w	r2, #2
    4b30:	d128      	bne.n	4b84 <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    4b32:	a901      	add	r1, sp, #4
    4b34:	4815      	ldr	r0, [pc, #84]	; (4b8c <msg_free+0x7c>)
    4b36:	f009 f9f3 	bl	df20 <k_mem_slab_free>
}
    4b3a:	b003      	add	sp, #12
    4b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
    4b3e:	9801      	ldr	r0, [sp, #4]
    4b40:	f00c fc77 	bl	11432 <log_msg_str_get>
    4b44:	4631      	mov	r1, r6
    4b46:	f7ff facf 	bl	40e8 <z_log_get_s_mask>
					if (smask == 0U) {
    4b4a:	4607      	mov	r7, r0
    4b4c:	b988      	cbnz	r0, 4b72 <msg_free+0x62>
    4b4e:	e7eb      	b.n	4b28 <msg_free+0x18>
					z_log_free(buf);
    4b50:	4628      	mov	r0, r5
    4b52:	f7ff ff2f 	bl	49b4 <z_log_free>
		for (i = 0U; i < nargs; i++) {
    4b56:	3401      	adds	r4, #1
    4b58:	42b4      	cmp	r4, r6
    4b5a:	d2e5      	bcs.n	4b28 <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
    4b5c:	4621      	mov	r1, r4
    4b5e:	9801      	ldr	r0, [sp, #4]
    4b60:	f00c fc55 	bl	1140e <log_msg_arg_get>
    4b64:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
    4b66:	f7ff fc45 	bl	43f4 <log_is_strdup>
    4b6a:	2800      	cmp	r0, #0
    4b6c:	d0f3      	beq.n	4b56 <msg_free+0x46>
				if (smask == 0U) {
    4b6e:	2f00      	cmp	r7, #0
    4b70:	d0e5      	beq.n	4b3e <msg_free+0x2e>
				if (smask & BIT(i)) {
    4b72:	fa27 f304 	lsr.w	r3, r7, r4
    4b76:	f013 0f01 	tst.w	r3, #1
    4b7a:	d0ec      	beq.n	4b56 <msg_free+0x46>
    4b7c:	e7e8      	b.n	4b50 <msg_free+0x40>
		uint32_t smask = 0U;
    4b7e:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
    4b80:	463c      	mov	r4, r7
    4b82:	e7e9      	b.n	4b58 <msg_free+0x48>
		cont_free(msg->payload.ext.next);
    4b84:	6958      	ldr	r0, [r3, #20]
    4b86:	f7ff ff73 	bl	4a70 <cont_free>
    4b8a:	e7d2      	b.n	4b32 <msg_free+0x22>
    4b8c:	20000af8 	.word	0x20000af8

00004b90 <log_msg_create_n>:
		cont = cont->next;
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, uint32_t nargs)
{
    4b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b92:	4607      	mov	r7, r0
    4b94:	460e      	mov	r6, r1
    4b96:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
    4b98:	2a0e      	cmp	r2, #14
    4b9a:	d80f      	bhi.n	4bbc <log_msg_create_n+0x2c>

	struct  log_msg *msg = NULL;

	msg = msg_alloc(nargs);
    4b9c:	4620      	mov	r0, r4
    4b9e:	f00c fc5d 	bl	1145c <msg_alloc>

	if (msg != NULL) {
    4ba2:	4605      	mov	r5, r0
    4ba4:	b140      	cbz	r0, 4bb8 <log_msg_create_n+0x28>
		msg->str = str;
    4ba6:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = nargs;
    4ba8:	7a43      	ldrb	r3, [r0, #9]
    4baa:	f364 1307 	bfi	r3, r4, #4, #4
    4bae:	7243      	strb	r3, [r0, #9]
		copy_args_to_msg(msg, args, nargs);
    4bb0:	4622      	mov	r2, r4
    4bb2:	4631      	mov	r1, r6
    4bb4:	f00c fb96 	bl	112e4 <copy_args_to_msg>
	}

	return msg;
}
    4bb8:	4628      	mov	r0, r5
    4bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
    4bbc:	4d06      	ldr	r5, [pc, #24]	; (4bd8 <log_msg_create_n+0x48>)
    4bbe:	f240 123b 	movw	r2, #315	; 0x13b
    4bc2:	4629      	mov	r1, r5
    4bc4:	4805      	ldr	r0, [pc, #20]	; (4bdc <log_msg_create_n+0x4c>)
    4bc6:	f00c fa2f 	bl	11028 <printk>
    4bca:	f240 113b 	movw	r1, #315	; 0x13b
    4bce:	4628      	mov	r0, r5
    4bd0:	f00c fb4c 	bl	1126c <assert_post_action>
    4bd4:	e7e2      	b.n	4b9c <log_msg_create_n+0xc>
    4bd6:	bf00      	nop
    4bd8:	00015cb4 	.word	0x00015cb4
    4bdc:	00015984 	.word	0x00015984

00004be0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    4be0:	b40e      	push	{r1, r2, r3}
    4be2:	b500      	push	{lr}
    4be4:	b082      	sub	sp, #8
    4be6:	4601      	mov	r1, r0
    4be8:	ab03      	add	r3, sp, #12
    4bea:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    4bee:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    4bf0:	4803      	ldr	r0, [pc, #12]	; (4c00 <print_formatted+0x20>)
    4bf2:	f7fe fc6d 	bl	34d0 <cbvprintf>
	va_end(args);

	return length;
}
    4bf6:	b002      	add	sp, #8
    4bf8:	f85d eb04 	ldr.w	lr, [sp], #4
    4bfc:	b003      	add	sp, #12
    4bfe:	4770      	bx	lr
    4c00:	00004ee1 	.word	0x00004ee1

00004c04 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
    4c04:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c06:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
    4c08:	f011 0f44 	tst.w	r1, #68	; 0x44
    4c0c:	d005      	beq.n	4c1a <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
    4c0e:	4b1a      	ldr	r3, [pc, #104]	; (4c78 <timestamp_print+0x74>)
    4c10:	681c      	ldr	r4, [r3, #0]
    4c12:	b934      	cbnz	r4, 4c22 <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
    4c14:	2000      	movs	r0, #0
	}

	return length;
}
    4c16:	b005      	add	sp, #20
    4c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    4c1a:	4918      	ldr	r1, [pc, #96]	; (4c7c <timestamp_print+0x78>)
    4c1c:	f7ff ffe0 	bl	4be0 <print_formatted>
    4c20:	e7f9      	b.n	4c16 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    4c22:	4b17      	ldr	r3, [pc, #92]	; (4c80 <timestamp_print+0x7c>)
    4c24:	6819      	ldr	r1, [r3, #0]
    4c26:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    4c2a:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
    4c2e:	4a15      	ldr	r2, [pc, #84]	; (4c84 <timestamp_print+0x80>)
    4c30:	fba2 3205 	umull	r3, r2, r2, r5
    4c34:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    4c36:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    4c3a:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
    4c3e:	4b12      	ldr	r3, [pc, #72]	; (4c88 <timestamp_print+0x84>)
    4c40:	fba3 7306 	umull	r7, r3, r3, r6
    4c44:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    4c46:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
    4c4a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    4c4e:	fb05 f101 	mul.w	r1, r5, r1
    4c52:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    4c56:	fb07 1114 	mls	r1, r7, r4, r1
    4c5a:	fb05 f101 	mul.w	r1, r5, r1
    4c5e:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(output,
    4c62:	9402      	str	r4, [sp, #8]
    4c64:	9701      	str	r7, [sp, #4]
    4c66:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    4c6a:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
    4c6e:	9100      	str	r1, [sp, #0]
    4c70:	4906      	ldr	r1, [pc, #24]	; (4c8c <timestamp_print+0x88>)
    4c72:	f7ff ffb5 	bl	4be0 <print_formatted>
    4c76:	e7ce      	b.n	4c16 <timestamp_print+0x12>
    4c78:	20000b18 	.word	0x20000b18
    4c7c:	00015ce0 	.word	0x00015ce0
    4c80:	20000b1c 	.word	0x20000b1c
    4c84:	91a2b3c5 	.word	0x91a2b3c5
    4c88:	88888889 	.word	0x88888889
    4c8c:	00015cec 	.word	0x00015cec

00004c90 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    4c90:	b161      	cbz	r1, 4cac <color_print+0x1c>
{
    4c92:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    4c94:	b12a      	cbz	r2, 4ca2 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    4c96:	4a06      	ldr	r2, [pc, #24]	; (4cb0 <color_print+0x20>)
    4c98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4c9c:	b912      	cbnz	r2, 4ca4 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    4c9e:	4a05      	ldr	r2, [pc, #20]	; (4cb4 <color_print+0x24>)
    4ca0:	e000      	b.n	4ca4 <color_print+0x14>
    4ca2:	4a04      	ldr	r2, [pc, #16]	; (4cb4 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    4ca4:	4904      	ldr	r1, [pc, #16]	; (4cb8 <color_print+0x28>)
    4ca6:	f7ff ff9b 	bl	4be0 <print_formatted>
	}
}
    4caa:	bd08      	pop	{r3, pc}
    4cac:	4770      	bx	lr
    4cae:	bf00      	nop
    4cb0:	00015d94 	.word	0x00015d94
    4cb4:	00015d08 	.word	0x00015d08
    4cb8:	00015d10 	.word	0x00015d10

00004cbc <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    4cbc:	f011 0f10 	tst.w	r1, #16
    4cc0:	d10b      	bne.n	4cda <newline_print+0x1e>
{
    4cc2:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    4cc4:	f011 0f20 	tst.w	r1, #32
    4cc8:	d003      	beq.n	4cd2 <newline_print+0x16>
		print_formatted(ctx, "\n");
    4cca:	4904      	ldr	r1, [pc, #16]	; (4cdc <newline_print+0x20>)
    4ccc:	f7ff ff88 	bl	4be0 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    4cd0:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    4cd2:	4903      	ldr	r1, [pc, #12]	; (4ce0 <newline_print+0x24>)
    4cd4:	f7ff ff84 	bl	4be0 <print_formatted>
    4cd8:	e7fa      	b.n	4cd0 <newline_print+0x14>
    4cda:	4770      	bx	lr
    4cdc:	00015b3c 	.word	0x00015b3c
    4ce0:	00015d14 	.word	0x00015d14

00004ce4 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    4ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ce8:	4605      	mov	r5, r0
    4cea:	460f      	mov	r7, r1
    4cec:	4616      	mov	r6, r2
    4cee:	4698      	mov	r8, r3
	newline_print(output, flags);
    4cf0:	9906      	ldr	r1, [sp, #24]
    4cf2:	f7ff ffe3 	bl	4cbc <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    4cf6:	2400      	movs	r4, #0
    4cf8:	4544      	cmp	r4, r8
    4cfa:	da05      	bge.n	4d08 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    4cfc:	4924      	ldr	r1, [pc, #144]	; (4d90 <hexdump_line_print+0xac>)
    4cfe:	4628      	mov	r0, r5
    4d00:	f7ff ff6e 	bl	4be0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    4d04:	3401      	adds	r4, #1
    4d06:	e7f7      	b.n	4cf8 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4d08:	2400      	movs	r4, #0
    4d0a:	e009      	b.n	4d20 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    4d0c:	4920      	ldr	r1, [pc, #128]	; (4d90 <hexdump_line_print+0xac>)
    4d0e:	4628      	mov	r0, r5
    4d10:	f7ff ff66 	bl	4be0 <print_formatted>
    4d14:	e00b      	b.n	4d2e <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    4d16:	491f      	ldr	r1, [pc, #124]	; (4d94 <hexdump_line_print+0xb0>)
    4d18:	4628      	mov	r0, r5
    4d1a:	f7ff ff61 	bl	4be0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4d1e:	3401      	adds	r4, #1
    4d20:	2c0f      	cmp	r4, #15
    4d22:	dc0c      	bgt.n	4d3e <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    4d24:	2c00      	cmp	r4, #0
    4d26:	dd02      	ble.n	4d2e <hexdump_line_print+0x4a>
    4d28:	f014 0f07 	tst.w	r4, #7
    4d2c:	d0ee      	beq.n	4d0c <hexdump_line_print+0x28>
		if (i < length) {
    4d2e:	42b4      	cmp	r4, r6
    4d30:	d2f1      	bcs.n	4d16 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    4d32:	5d3a      	ldrb	r2, [r7, r4]
    4d34:	4918      	ldr	r1, [pc, #96]	; (4d98 <hexdump_line_print+0xb4>)
    4d36:	4628      	mov	r0, r5
    4d38:	f7ff ff52 	bl	4be0 <print_formatted>
    4d3c:	e7ef      	b.n	4d1e <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    4d3e:	4917      	ldr	r1, [pc, #92]	; (4d9c <hexdump_line_print+0xb8>)
    4d40:	4628      	mov	r0, r5
    4d42:	f7ff ff4d 	bl	4be0 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4d46:	2400      	movs	r4, #0
    4d48:	e009      	b.n	4d5e <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    4d4a:	4911      	ldr	r1, [pc, #68]	; (4d90 <hexdump_line_print+0xac>)
    4d4c:	4628      	mov	r0, r5
    4d4e:	f7ff ff47 	bl	4be0 <print_formatted>
    4d52:	e00b      	b.n	4d6c <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    4d54:	4912      	ldr	r1, [pc, #72]	; (4da0 <hexdump_line_print+0xbc>)
    4d56:	4628      	mov	r0, r5
    4d58:	f7ff ff42 	bl	4be0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4d5c:	3401      	adds	r4, #1
    4d5e:	2c0f      	cmp	r4, #15
    4d60:	dc13      	bgt.n	4d8a <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
    4d62:	2c00      	cmp	r4, #0
    4d64:	dd02      	ble.n	4d6c <hexdump_line_print+0x88>
    4d66:	f014 0f07 	tst.w	r4, #7
    4d6a:	d0ee      	beq.n	4d4a <hexdump_line_print+0x66>
		if (i < length) {
    4d6c:	42b4      	cmp	r4, r6
    4d6e:	d207      	bcs.n	4d80 <hexdump_line_print+0x9c>
			char c = (char)data[i];
    4d70:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
    4d72:	4b0c      	ldr	r3, [pc, #48]	; (4da4 <hexdump_line_print+0xc0>)
    4d74:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
    4d76:	f013 0f97 	tst.w	r3, #151	; 0x97
    4d7a:	d1eb      	bne.n	4d54 <hexdump_line_print+0x70>
    4d7c:	222e      	movs	r2, #46	; 0x2e
    4d7e:	e7e9      	b.n	4d54 <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
    4d80:	4903      	ldr	r1, [pc, #12]	; (4d90 <hexdump_line_print+0xac>)
    4d82:	4628      	mov	r0, r5
    4d84:	f7ff ff2c 	bl	4be0 <print_formatted>
    4d88:	e7e8      	b.n	4d5c <hexdump_line_print+0x78>
		}
	}
}
    4d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d8e:	bf00      	nop
    4d90:	00015d38 	.word	0x00015d38
    4d94:	00016a9c 	.word	0x00016a9c
    4d98:	00015d18 	.word	0x00015d18
    4d9c:	00015d20 	.word	0x00015d20
    4da0:	00015d24 	.word	0x00015d24
    4da4:	00017371 	.word	0x00017371

00004da8 <ids_print>:
{
    4da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4dac:	4680      	mov	r8, r0
    4dae:	4616      	mov	r6, r2
    4db0:	461d      	mov	r5, r3
    4db2:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    4db6:	b959      	cbnz	r1, 4dd0 <ids_print+0x28>
	int total = 0;
    4db8:	2400      	movs	r4, #0
	if (source_id >= 0) {
    4dba:	2f00      	cmp	r7, #0
    4dbc:	db1c      	blt.n	4df8 <ids_print+0x50>
		total += print_formatted(output,
    4dbe:	b186      	cbz	r6, 4de2 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    4dc0:	2301      	movs	r3, #1
    4dc2:	9a07      	ldr	r2, [sp, #28]
    4dc4:	4093      	lsls	r3, r2
				(func_on &&
    4dc6:	f013 0f10 	tst.w	r3, #16
    4dca:	d118      	bne.n	4dfe <ids_print+0x56>
		total += print_formatted(output,
    4dcc:	4e0d      	ldr	r6, [pc, #52]	; (4e04 <ids_print+0x5c>)
    4dce:	e009      	b.n	4de4 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    4dd0:	4b0d      	ldr	r3, [pc, #52]	; (4e08 <ids_print+0x60>)
    4dd2:	9a07      	ldr	r2, [sp, #28]
    4dd4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4dd8:	490c      	ldr	r1, [pc, #48]	; (4e0c <ids_print+0x64>)
    4dda:	f7ff ff01 	bl	4be0 <print_formatted>
    4dde:	4604      	mov	r4, r0
    4de0:	e7eb      	b.n	4dba <ids_print+0x12>
		total += print_formatted(output,
    4de2:	4e08      	ldr	r6, [pc, #32]	; (4e04 <ids_print+0x5c>)
    4de4:	4639      	mov	r1, r7
    4de6:	4628      	mov	r0, r5
    4de8:	f7ff fe00 	bl	49ec <log_source_name_get>
    4dec:	4602      	mov	r2, r0
    4dee:	4631      	mov	r1, r6
    4df0:	4640      	mov	r0, r8
    4df2:	f7ff fef5 	bl	4be0 <print_formatted>
    4df6:	4404      	add	r4, r0
}
    4df8:	4620      	mov	r0, r4
    4dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    4dfe:	4e04      	ldr	r6, [pc, #16]	; (4e10 <ids_print+0x68>)
    4e00:	e7f0      	b.n	4de4 <ids_print+0x3c>
    4e02:	bf00      	nop
    4e04:	00015d28 	.word	0x00015d28
    4e08:	00015dd0 	.word	0x00015dd0
    4e0c:	00015d34 	.word	0x00015d34
    4e10:	00015d30 	.word	0x00015d30

00004e14 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    4e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e18:	b085      	sub	sp, #20
    4e1a:	4605      	mov	r5, r0
    4e1c:	460c      	mov	r4, r1
    4e1e:	4616      	mov	r6, r2
    4e20:	9303      	str	r3, [sp, #12]
    4e22:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    4e26:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    4e2a:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    4e2e:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    4e32:	f00c fa41 	bl	112b8 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    4e36:	b1e8      	cbz	r0, 4e74 <prefix_print+0x60>
    4e38:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    4e3a:	4913      	ldr	r1, [pc, #76]	; (4e88 <prefix_print+0x74>)
    4e3c:	4628      	mov	r0, r5
    4e3e:	f7ff fecf 	bl	4be0 <print_formatted>
    4e42:	4607      	mov	r7, r0
	}

	if (stamp) {
    4e44:	f1bb 0f00 	cmp.w	fp, #0
    4e48:	d116      	bne.n	4e78 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    4e4a:	4642      	mov	r2, r8
    4e4c:	4651      	mov	r1, sl
    4e4e:	4628      	mov	r0, r5
    4e50:	f00c fb9e 	bl	11590 <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
    4e54:	f8cd 8004 	str.w	r8, [sp, #4]
    4e58:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    4e5c:	9300      	str	r3, [sp, #0]
    4e5e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    4e62:	4632      	mov	r2, r6
    4e64:	4649      	mov	r1, r9
    4e66:	4628      	mov	r0, r5
    4e68:	f7ff ff9e 	bl	4da8 <ids_print>
			domain_id, source_id, level);


	return length;
}
    4e6c:	4438      	add	r0, r7
    4e6e:	b005      	add	sp, #20
    4e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    4e74:	2700      	movs	r7, #0
    4e76:	e7e5      	b.n	4e44 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    4e78:	9a03      	ldr	r2, [sp, #12]
    4e7a:	4621      	mov	r1, r4
    4e7c:	4628      	mov	r0, r5
    4e7e:	f7ff fec1 	bl	4c04 <timestamp_print>
    4e82:	4407      	add	r7, r0
    4e84:	e7e1      	b.n	4e4a <prefix_print+0x36>
    4e86:	bf00      	nop
    4e88:	00015d3c 	.word	0x00015d3c

00004e8c <hexdump_print>:
{
    4e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4e90:	b089      	sub	sp, #36	; 0x24
    4e92:	4607      	mov	r7, r0
    4e94:	460e      	mov	r6, r1
    4e96:	4691      	mov	r9, r2
    4e98:	4698      	mov	r8, r3
	print_formatted(output, "%s", log_msg_str_get(msg));
    4e9a:	f00c faca 	bl	11432 <log_msg_str_get>
    4e9e:	4602      	mov	r2, r0
    4ea0:	490e      	ldr	r1, [pc, #56]	; (4edc <hexdump_print+0x50>)
    4ea2:	4630      	mov	r0, r6
    4ea4:	f7ff fe9c 	bl	4be0 <print_formatted>
	uint32_t offset = 0U;
    4ea8:	2400      	movs	r4, #0
		length = sizeof(buf);
    4eaa:	2510      	movs	r5, #16
    4eac:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    4eae:	4623      	mov	r3, r4
    4eb0:	aa03      	add	r2, sp, #12
    4eb2:	eb0d 0105 	add.w	r1, sp, r5
    4eb6:	4638      	mov	r0, r7
    4eb8:	f00c fb55 	bl	11566 <log_msg_hexdump_data_get>
		if (length) {
    4ebc:	9a03      	ldr	r2, [sp, #12]
    4ebe:	b152      	cbz	r2, 4ed6 <hexdump_print+0x4a>
			hexdump_line_print(output, buf, length,
    4ec0:	f8cd 8000 	str.w	r8, [sp]
    4ec4:	464b      	mov	r3, r9
    4ec6:	eb0d 0105 	add.w	r1, sp, r5
    4eca:	4630      	mov	r0, r6
    4ecc:	f7ff ff0a 	bl	4ce4 <hexdump_line_print>
			offset += length;
    4ed0:	9d03      	ldr	r5, [sp, #12]
    4ed2:	442c      	add	r4, r5
		length = sizeof(buf);
    4ed4:	e7e9      	b.n	4eaa <hexdump_print+0x1e>
}
    4ed6:	b009      	add	sp, #36	; 0x24
    4ed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4edc:	00015d10 	.word	0x00015d10

00004ee0 <out_func>:
{
    4ee0:	b538      	push	{r3, r4, r5, lr}
    4ee2:	4605      	mov	r5, r0
    4ee4:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    4ee6:	684b      	ldr	r3, [r1, #4]
    4ee8:	681a      	ldr	r2, [r3, #0]
    4eea:	68cb      	ldr	r3, [r1, #12]
    4eec:	429a      	cmp	r2, r3
    4eee:	d014      	beq.n	4f1a <out_func+0x3a>
	idx = atomic_inc(&out_ctx->control_block->offset);
    4ef0:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    4ef2:	f3bf 8f5b 	dmb	ish
    4ef6:	e853 2f00 	ldrex	r2, [r3]
    4efa:	1c51      	adds	r1, r2, #1
    4efc:	e843 1000 	strex	r0, r1, [r3]
    4f00:	2800      	cmp	r0, #0
    4f02:	d1f8      	bne.n	4ef6 <out_func+0x16>
    4f04:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    4f08:	68a3      	ldr	r3, [r4, #8]
    4f0a:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
    4f0c:	6863      	ldr	r3, [r4, #4]
    4f0e:	681a      	ldr	r2, [r3, #0]
    4f10:	68e3      	ldr	r3, [r4, #12]
    4f12:	429a      	cmp	r2, r3
    4f14:	d805      	bhi.n	4f22 <out_func+0x42>
}
    4f16:	2000      	movs	r0, #0
    4f18:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
    4f1a:	4608      	mov	r0, r1
    4f1c:	f00c fcab 	bl	11876 <log_output_flush>
    4f20:	e7e6      	b.n	4ef0 <out_func+0x10>
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
    4f22:	4c05      	ldr	r4, [pc, #20]	; (4f38 <out_func+0x58>)
    4f24:	2274      	movs	r2, #116	; 0x74
    4f26:	4621      	mov	r1, r4
    4f28:	4804      	ldr	r0, [pc, #16]	; (4f3c <out_func+0x5c>)
    4f2a:	f00c f87d 	bl	11028 <printk>
    4f2e:	2174      	movs	r1, #116	; 0x74
    4f30:	4620      	mov	r0, r4
    4f32:	f00c f99b 	bl	1126c <assert_post_action>
    4f36:	e7ee      	b.n	4f16 <out_func+0x36>
    4f38:	00015d40 	.word	0x00015d40
    4f3c:	00015984 	.word	0x00015984

00004f40 <raw_string_print>:
{
    4f40:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f42:	b083      	sub	sp, #12
    4f44:	4606      	mov	r6, r0
    4f46:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(output->size);
    4f48:	68cb      	ldr	r3, [r1, #12]
    4f4a:	b113      	cbz	r3, 4f52 <raw_string_print+0x12>
{
    4f4c:	2700      	movs	r7, #0
    4f4e:	463d      	mov	r5, r7
    4f50:	e01a      	b.n	4f88 <raw_string_print+0x48>
	__ASSERT_NO_MSG(output->size);
    4f52:	4d19      	ldr	r5, [pc, #100]	; (4fb8 <raw_string_print+0x78>)
    4f54:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
    4f58:	4629      	mov	r1, r5
    4f5a:	4818      	ldr	r0, [pc, #96]	; (4fbc <raw_string_print+0x7c>)
    4f5c:	f00c f864 	bl	11028 <printk>
    4f60:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
    4f64:	4628      	mov	r0, r5
    4f66:	f00c f981 	bl	1126c <assert_post_action>
    4f6a:	e7ef      	b.n	4f4c <raw_string_print+0xc>
			eol = (output->buf[length - 1] == '\n');
    4f6c:	68a2      	ldr	r2, [r4, #8]
    4f6e:	4413      	add	r3, r2
    4f70:	f813 7c01 	ldrb.w	r7, [r3, #-1]
    4f74:	2f0a      	cmp	r7, #10
    4f76:	bf14      	ite	ne
    4f78:	2700      	movne	r7, #0
    4f7a:	2701      	moveq	r7, #1
		log_output_flush(output);
    4f7c:	4620      	mov	r0, r4
    4f7e:	f00c fc7a 	bl	11876 <log_output_flush>
		offset += length;
    4f82:	9b01      	ldr	r3, [sp, #4]
    4f84:	441d      	add	r5, r3
	} while (length > 0);
    4f86:	b173      	cbz	r3, 4fa6 <raw_string_print+0x66>
		length = output->size;
    4f88:	68e3      	ldr	r3, [r4, #12]
    4f8a:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    4f8c:	462b      	mov	r3, r5
    4f8e:	aa01      	add	r2, sp, #4
    4f90:	68a1      	ldr	r1, [r4, #8]
    4f92:	4630      	mov	r0, r6
    4f94:	f00c fae7 	bl	11566 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    4f98:	6863      	ldr	r3, [r4, #4]
    4f9a:	9a01      	ldr	r2, [sp, #4]
    4f9c:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    4f9e:	9b01      	ldr	r3, [sp, #4]
    4fa0:	2b00      	cmp	r3, #0
    4fa2:	d0eb      	beq.n	4f7c <raw_string_print+0x3c>
    4fa4:	e7e2      	b.n	4f6c <raw_string_print+0x2c>
	if (eol) {
    4fa6:	b90f      	cbnz	r7, 4fac <raw_string_print+0x6c>
}
    4fa8:	b003      	add	sp, #12
    4faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
    4fac:	4904      	ldr	r1, [pc, #16]	; (4fc0 <raw_string_print+0x80>)
    4fae:	4620      	mov	r0, r4
    4fb0:	f7ff fe16 	bl	4be0 <print_formatted>
}
    4fb4:	e7f8      	b.n	4fa8 <raw_string_print+0x68>
    4fb6:	bf00      	nop
    4fb8:	00015d40 	.word	0x00015d40
    4fbc:	00015984 	.word	0x00015984
    4fc0:	00015d70 	.word	0x00015d70

00004fc4 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    4fc4:	b570      	push	{r4, r5, r6, lr}
    4fc6:	b082      	sub	sp, #8
    4fc8:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
    4fca:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    4fcc:	f242 730f 	movw	r3, #9999	; 0x270f
    4fd0:	428b      	cmp	r3, r1
    4fd2:	bf28      	it	cs
    4fd4:	460b      	movcs	r3, r1
    4fd6:	4a0e      	ldr	r2, [pc, #56]	; (5010 <log_output_dropped_process+0x4c>)
    4fd8:	2105      	movs	r1, #5
    4fda:	4668      	mov	r0, sp
    4fdc:	f00c f832 	bl	11044 <snprintk>
    4fe0:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
    4fe2:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    4fe4:	685b      	ldr	r3, [r3, #4]
    4fe6:	220b      	movs	r2, #11
    4fe8:	490a      	ldr	r1, [pc, #40]	; (5014 <log_output_dropped_process+0x50>)
    4fea:	4628      	mov	r0, r5
    4fec:	f00c fac3 	bl	11576 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
    4ff0:	6863      	ldr	r3, [r4, #4]
    4ff2:	685b      	ldr	r3, [r3, #4]
    4ff4:	4632      	mov	r2, r6
    4ff6:	4669      	mov	r1, sp
    4ff8:	4628      	mov	r0, r5
    4ffa:	f00c fabc 	bl	11576 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
    4ffe:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    5000:	685b      	ldr	r3, [r3, #4]
    5002:	221b      	movs	r2, #27
    5004:	4904      	ldr	r1, [pc, #16]	; (5018 <log_output_dropped_process+0x54>)
    5006:	4628      	mov	r0, r5
    5008:	f00c fab5 	bl	11576 <buffer_write>
}
    500c:	b002      	add	sp, #8
    500e:	bd70      	pop	{r4, r5, r6, pc}
    5010:	00015a4c 	.word	0x00015a4c
    5014:	00015dc4 	.word	0x00015dc4
    5018:	00015da8 	.word	0x00015da8

0000501c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    501c:	4b07      	ldr	r3, [pc, #28]	; (503c <log_output_timestamp_freq_set+0x20>)
    501e:	2201      	movs	r2, #1
    5020:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    5022:	4b07      	ldr	r3, [pc, #28]	; (5040 <log_output_timestamp_freq_set+0x24>)
    5024:	4298      	cmp	r0, r3
    5026:	d905      	bls.n	5034 <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
    5028:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    502a:	4a04      	ldr	r2, [pc, #16]	; (503c <log_output_timestamp_freq_set+0x20>)
    502c:	6813      	ldr	r3, [r2, #0]
    502e:	005b      	lsls	r3, r3, #1
    5030:	6013      	str	r3, [r2, #0]
    5032:	e7f6      	b.n	5022 <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
    5034:	4b03      	ldr	r3, [pc, #12]	; (5044 <log_output_timestamp_freq_set+0x28>)
    5036:	6018      	str	r0, [r3, #0]
}
    5038:	4770      	bx	lr
    503a:	bf00      	nop
    503c:	20000b1c 	.word	0x20000b1c
    5040:	000f4240 	.word	0x000f4240
    5044:	20000b18 	.word	0x20000b18

00005048 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    5048:	4b01      	ldr	r3, [pc, #4]	; (5050 <log_backend_rtt_init+0x8>)
    504a:	2201      	movs	r2, #1
    504c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    504e:	4770      	bx	lr
    5050:	20001658 	.word	0x20001658

00005054 <on_failed_write>:
{
    5054:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    5056:	b918      	cbnz	r0, 5060 <on_failed_write+0xc>
		host_present = false;
    5058:	4b08      	ldr	r3, [pc, #32]	; (507c <on_failed_write+0x28>)
    505a:	2200      	movs	r2, #0
    505c:	701a      	strb	r2, [r3, #0]
}
    505e:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    5060:	4b07      	ldr	r3, [pc, #28]	; (5080 <on_failed_write+0x2c>)
    5062:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
    5064:	b123      	cbz	r3, 5070 <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
    5066:	f241 3088 	movw	r0, #5000	; 0x1388
    506a:	f00f fcae 	bl	149ca <z_impl_k_busy_wait>
}
    506e:	e7f6      	b.n	505e <on_failed_write+0xa>
	return z_impl_k_sleep(timeout);
    5070:	20a4      	movs	r0, #164	; 0xa4
    5072:	2100      	movs	r1, #0
    5074:	f00a fc7c 	bl	f970 <z_impl_k_sleep>
}
    5078:	e7f1      	b.n	505e <on_failed_write+0xa>
    507a:	bf00      	nop
    507c:	20001658 	.word	0x20001658
    5080:	20001659 	.word	0x20001659

00005084 <on_write>:
{
    5084:	b538      	push	{r3, r4, r5, lr}
    5086:	4604      	mov	r4, r0
	host_present = true;
    5088:	4b0a      	ldr	r3, [pc, #40]	; (50b4 <on_write+0x30>)
    508a:	2201      	movs	r2, #1
    508c:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    508e:	4b0a      	ldr	r3, [pc, #40]	; (50b8 <on_write+0x34>)
    5090:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    5092:	b903      	cbnz	r3, 5096 <on_write+0x12>
}
    5094:	bd38      	pop	{r3, r4, r5, pc}
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    5096:	2000      	movs	r0, #0
    5098:	f008 fc9e 	bl	d9d8 <SEGGER_RTT_HasDataUp>
    509c:	2800      	cmp	r0, #0
    509e:	d0f9      	beq.n	5094 <on_write+0x10>
    50a0:	4b04      	ldr	r3, [pc, #16]	; (50b4 <on_write+0x30>)
    50a2:	781b      	ldrb	r3, [r3, #0]
    50a4:	2b00      	cmp	r3, #0
    50a6:	d0f5      	beq.n	5094 <on_write+0x10>
			on_failed_write(retry_cnt--);
    50a8:	1e65      	subs	r5, r4, #1
    50aa:	4620      	mov	r0, r4
    50ac:	f7ff ffd2 	bl	5054 <on_failed_write>
    50b0:	462c      	mov	r4, r5
    50b2:	e7f0      	b.n	5096 <on_write+0x12>
    50b4:	20001658 	.word	0x20001658
    50b8:	20001659 	.word	0x20001659

000050bc <data_out_block_mode>:
{
    50bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    50c0:	4606      	mov	r6, r0
    50c2:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    50c4:	2704      	movs	r7, #4
    50c6:	e00d      	b.n	50e4 <data_out_block_mode+0x28>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    50c8:	462a      	mov	r2, r5
    50ca:	4631      	mov	r1, r6
    50cc:	2000      	movs	r0, #0
    50ce:	f008 fbe9 	bl	d8a4 <SEGGER_RTT_WriteSkipNoLock>
    50d2:	4604      	mov	r4, r0
    50d4:	e01c      	b.n	5110 <data_out_block_mode+0x54>
			on_write(retry_cnt);
    50d6:	4638      	mov	r0, r7
    50d8:	f7ff ffd4 	bl	5084 <on_write>
	} while ((ret == 0) && host_present);
    50dc:	bb1c      	cbnz	r4, 5126 <data_out_block_mode+0x6a>
    50de:	4b16      	ldr	r3, [pc, #88]	; (5138 <data_out_block_mode+0x7c>)
    50e0:	781b      	ldrb	r3, [r3, #0]
    50e2:	b303      	cbz	r3, 5126 <data_out_block_mode+0x6a>
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    50e4:	4b15      	ldr	r3, [pc, #84]	; (513c <data_out_block_mode+0x80>)
    50e6:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
    50e8:	2b00      	cmp	r3, #0
    50ea:	d1ed      	bne.n	50c8 <data_out_block_mode+0xc>
	return z_impl_k_mutex_lock(mutex, timeout);
    50ec:	f8df 8050 	ldr.w	r8, [pc, #80]	; 5140 <data_out_block_mode+0x84>
    50f0:	f04f 32ff 	mov.w	r2, #4294967295
    50f4:	f04f 33ff 	mov.w	r3, #4294967295
    50f8:	4640      	mov	r0, r8
    50fa:	f009 f983 	bl	e404 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    50fe:	462a      	mov	r2, r5
    5100:	4631      	mov	r1, r6
    5102:	2000      	movs	r0, #0
    5104:	f008 fbce 	bl	d8a4 <SEGGER_RTT_WriteSkipNoLock>
    5108:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    510a:	4640      	mov	r0, r8
    510c:	f009 fa70 	bl	e5f0 <z_impl_k_mutex_unlock>
		if (ret) {
    5110:	2c00      	cmp	r4, #0
    5112:	d1e0      	bne.n	50d6 <data_out_block_mode+0x1a>
		} else if (host_present) {
    5114:	4b08      	ldr	r3, [pc, #32]	; (5138 <data_out_block_mode+0x7c>)
    5116:	781b      	ldrb	r3, [r3, #0]
    5118:	2b00      	cmp	r3, #0
    511a:	d0df      	beq.n	50dc <data_out_block_mode+0x20>
			retry_cnt--;
    511c:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    511e:	4638      	mov	r0, r7
    5120:	f7ff ff98 	bl	5054 <on_failed_write>
    5124:	e7da      	b.n	50dc <data_out_block_mode+0x20>
	return ((ret == 0) && host_present) ? 0 : length;
    5126:	b914      	cbnz	r4, 512e <data_out_block_mode+0x72>
    5128:	4b03      	ldr	r3, [pc, #12]	; (5138 <data_out_block_mode+0x7c>)
    512a:	781b      	ldrb	r3, [r3, #0]
    512c:	b903      	cbnz	r3, 5130 <data_out_block_mode+0x74>
    512e:	462c      	mov	r4, r5
}
    5130:	4620      	mov	r0, r4
    5132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5136:	bf00      	nop
    5138:	20001658 	.word	0x20001658
    513c:	20001659 	.word	0x20001659
    5140:	200003c4 	.word	0x200003c4

00005144 <panic>:

static void panic(struct log_backend const *const backend)
{
    5144:	b508      	push	{r3, lr}
	panic_mode = true;
    5146:	4b03      	ldr	r3, [pc, #12]	; (5154 <panic+0x10>)
    5148:	2201      	movs	r2, #1
    514a:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    514c:	4802      	ldr	r0, [pc, #8]	; (5158 <panic+0x14>)
    514e:	f00c fb92 	bl	11876 <log_output_flush>
	log_backend_std_panic(&log_output_rtt);
}
    5152:	bd08      	pop	{r3, pc}
    5154:	20001659 	.word	0x20001659
    5158:	00015e10 	.word	0x00015e10

0000515c <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    515c:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    515e:	4802      	ldr	r0, [pc, #8]	; (5168 <dropped+0xc>)
    5160:	f7ff ff30 	bl	4fc4 <log_output_dropped_process>
	ARG_UNUSED(backend);

	log_backend_std_dropped(&log_output_rtt, cnt);
}
    5164:	bd08      	pop	{r3, pc}
    5166:	bf00      	nop
    5168:	00015e10 	.word	0x00015e10

0000516c <put>:
{
    516c:	b510      	push	{r4, lr}
    516e:	460c      	mov	r4, r1
	log_msg_get(msg);
    5170:	4608      	mov	r0, r1
    5172:	f00c f93c 	bl	113ee <log_msg_get>
	log_output_msg_process(output, msg, flags);
    5176:	220f      	movs	r2, #15
    5178:	4621      	mov	r1, r4
    517a:	4803      	ldr	r0, [pc, #12]	; (5188 <put+0x1c>)
    517c:	f00c fb88 	bl	11890 <log_output_msg_process>
	log_msg_put(msg);
    5180:	4620      	mov	r0, r4
    5182:	f00c f958 	bl	11436 <log_msg_put>
}
    5186:	bd10      	pop	{r4, pc}
    5188:	00015e10 	.word	0x00015e10

0000518c <disk_init>:
	k_mutex_unlock(&mutex);
	return rc;
}

static int disk_init(const struct device *dev)
{
    518c:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
    518e:	4804      	ldr	r0, [pc, #16]	; (51a0 <disk_init+0x14>)
    5190:	f00f fbc9 	bl	14926 <z_impl_k_mutex_init>
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    5194:	4b03      	ldr	r3, [pc, #12]	; (51a4 <disk_init+0x18>)
    5196:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    5198:	605b      	str	r3, [r3, #4]
	ARG_UNUSED(dev);

	k_mutex_init(&mutex);
	sys_dlist_init(&disk_access_list);
	return 0;
}
    519a:	2000      	movs	r0, #0
    519c:	bd08      	pop	{r3, pc}
    519e:	bf00      	nop
    51a0:	20000b4c 	.word	0x20000b4c
    51a4:	20000b44 	.word	0x20000b44

000051a8 <disk_access_get_di>:
{
    51a8:	b570      	push	{r4, r5, r6, lr}
    51aa:	4606      	mov	r6, r0
	size_t name_len = strlen(name);
    51ac:	f7fc f8d4 	bl	1358 <strlen>
    51b0:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    51b2:	f04f 32ff 	mov.w	r2, #4294967295
    51b6:	f04f 33ff 	mov.w	r3, #4294967295
    51ba:	4811      	ldr	r0, [pc, #68]	; (5200 <disk_access_get_di+0x58>)
    51bc:	f009 f922 	bl	e404 <z_impl_k_mutex_lock>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    51c0:	4b10      	ldr	r3, [pc, #64]	; (5204 <disk_access_get_di+0x5c>)
    51c2:	681c      	ldr	r4, [r3, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    51c4:	429c      	cmp	r4, r3
    51c6:	d106      	bne.n	51d6 <disk_access_get_di+0x2e>
    51c8:	2400      	movs	r4, #0
    51ca:	e004      	b.n	51d6 <disk_access_get_di+0x2e>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    51cc:	4b0d      	ldr	r3, [pc, #52]	; (5204 <disk_access_get_di+0x5c>)
    51ce:	685b      	ldr	r3, [r3, #4]
    51d0:	429c      	cmp	r4, r3
    51d2:	d00e      	beq.n	51f2 <disk_access_get_di+0x4a>
    51d4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_NODE(&disk_access_list, node) {
    51d6:	b16c      	cbz	r4, 51f4 <disk_access_get_di+0x4c>
		if (strlen(itr->name) != name_len) {
    51d8:	68a0      	ldr	r0, [r4, #8]
    51da:	f7fc f8bd 	bl	1358 <strlen>
    51de:	42a8      	cmp	r0, r5
    51e0:	d1f4      	bne.n	51cc <disk_access_get_di+0x24>
		if (strncmp(name, itr->name, name_len) == 0) {
    51e2:	462a      	mov	r2, r5
    51e4:	68a1      	ldr	r1, [r4, #8]
    51e6:	4630      	mov	r0, r6
    51e8:	f00f fd61 	bl	14cae <strncmp>
    51ec:	2800      	cmp	r0, #0
    51ee:	d1ed      	bne.n	51cc <disk_access_get_di+0x24>
    51f0:	e000      	b.n	51f4 <disk_access_get_di+0x4c>
	struct disk_info *disk = NULL, *itr;
    51f2:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    51f4:	4802      	ldr	r0, [pc, #8]	; (5200 <disk_access_get_di+0x58>)
    51f6:	f009 f9fb 	bl	e5f0 <z_impl_k_mutex_unlock>
}
    51fa:	4620      	mov	r0, r4
    51fc:	bd70      	pop	{r4, r5, r6, pc}
    51fe:	bf00      	nop
    5200:	20000b4c 	.word	0x20000b4c
    5204:	20000b44 	.word	0x20000b44

00005208 <disk_access_register>:
{
    5208:	b510      	push	{r4, lr}
    520a:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    520c:	f04f 32ff 	mov.w	r2, #4294967295
    5210:	f04f 33ff 	mov.w	r3, #4294967295
    5214:	481d      	ldr	r0, [pc, #116]	; (528c <disk_access_register+0x84>)
    5216:	f009 f8f5 	bl	e404 <z_impl_k_mutex_lock>
	if ((disk == NULL) || (disk->name == NULL)) {
    521a:	b184      	cbz	r4, 523e <disk_access_register+0x36>
    521c:	68a0      	ldr	r0, [r4, #8]
    521e:	b170      	cbz	r0, 523e <disk_access_register+0x36>
	if (disk_access_get_di(disk->name) != NULL) {
    5220:	f7ff ffc2 	bl	51a8 <disk_access_get_di>
    5224:	b9f0      	cbnz	r0, 5264 <disk_access_register+0x5c>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    5226:	4b1a      	ldr	r3, [pc, #104]	; (5290 <disk_access_register+0x88>)
    5228:	685a      	ldr	r2, [r3, #4]

	node->next = list;
    522a:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    522c:	6062      	str	r2, [r4, #4]

	tail->next = node;
    522e:	6014      	str	r4, [r2, #0]
	list->tail = node;
    5230:	605c      	str	r4, [r3, #4]
	int rc = 0;
    5232:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    5234:	4815      	ldr	r0, [pc, #84]	; (528c <disk_access_register+0x84>)
    5236:	f009 f9db 	bl	e5f0 <z_impl_k_mutex_unlock>
}
    523a:	4620      	mov	r0, r4
    523c:	bd10      	pop	{r4, pc}
    523e:	4b15      	ldr	r3, [pc, #84]	; (5294 <disk_access_register+0x8c>)
    5240:	4a15      	ldr	r2, [pc, #84]	; (5298 <disk_access_register+0x90>)
    5242:	1a9b      	subs	r3, r3, r2
    5244:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid disk interface!!");
    5246:	f04f 0100 	mov.w	r1, #0
    524a:	2201      	movs	r2, #1
    524c:	f362 0102 	bfi	r1, r2, #0, #3
    5250:	f36f 01c5 	bfc	r1, #3, #3
    5254:	f363 118f 	bfi	r1, r3, #6, #10
    5258:	4810      	ldr	r0, [pc, #64]	; (529c <disk_access_register+0x94>)
    525a:	f7ff fafb 	bl	4854 <log_0>
		rc = -EINVAL;
    525e:	f06f 0415 	mvn.w	r4, #21
		goto reg_err;
    5262:	e7e7      	b.n	5234 <disk_access_register+0x2c>
    5264:	4b0b      	ldr	r3, [pc, #44]	; (5294 <disk_access_register+0x8c>)
    5266:	4a0c      	ldr	r2, [pc, #48]	; (5298 <disk_access_register+0x90>)
    5268:	1a9b      	subs	r3, r3, r2
    526a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("disk interface already registered!!");
    526c:	f04f 0100 	mov.w	r1, #0
    5270:	2201      	movs	r2, #1
    5272:	f362 0102 	bfi	r1, r2, #0, #3
    5276:	f36f 01c5 	bfc	r1, #3, #3
    527a:	f363 118f 	bfi	r1, r3, #6, #10
    527e:	4808      	ldr	r0, [pc, #32]	; (52a0 <disk_access_register+0x98>)
    5280:	f7ff fae8 	bl	4854 <log_0>
		rc = -EINVAL;
    5284:	f06f 0415 	mvn.w	r4, #21
		goto reg_err;
    5288:	e7d4      	b.n	5234 <disk_access_register+0x2c>
    528a:	bf00      	nop
    528c:	20000b4c 	.word	0x20000b4c
    5290:	20000b44 	.word	0x20000b44
    5294:	00015784 	.word	0x00015784
    5298:	00015774 	.word	0x00015774
    529c:	00015e20 	.word	0x00015e20
    52a0:	00015e3c 	.word	0x00015e3c

000052a4 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    52a4:	b570      	push	{r4, r5, r6, lr}
    52a6:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
    52a8:	4b3d      	ldr	r3, [pc, #244]	; (53a0 <pm_system_resume+0xfc>)
    52aa:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    52ac:	f004 031f 	and.w	r3, r4, #31
    52b0:	2201      	movs	r2, #1
    52b2:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    52b4:	0961      	lsrs	r1, r4, #5
    52b6:	4b3b      	ldr	r3, [pc, #236]	; (53a4 <pm_system_resume+0x100>)
    52b8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    52bc:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    52be:	f3bf 8f5b 	dmb	ish
    52c2:	e853 1f00 	ldrex	r1, [r3]
    52c6:	ea01 0500 	and.w	r5, r1, r0
    52ca:	e843 5600 	strex	r6, r5, [r3]
    52ce:	2e00      	cmp	r6, #0
    52d0:	d1f7      	bne.n	52c2 <pm_system_resume+0x1e>
    52d2:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    52d6:	420a      	tst	r2, r1
    52d8:	d055      	beq.n	5386 <pm_system_resume+0xe2>
		exit_pos_ops(z_power_states[id]);
    52da:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    52de:	4a32      	ldr	r2, [pc, #200]	; (53a8 <pm_system_resume+0x104>)
    52e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    52e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    52e8:	ab04      	add	r3, sp, #16
    52ea:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    52ee:	4b2f      	ldr	r3, [pc, #188]	; (53ac <pm_system_resume+0x108>)
    52f0:	b19b      	cbz	r3, 531a <pm_system_resume+0x76>
		pm_power_state_exit_post_ops(info);
    52f2:	f00c fc15 	bl	11b20 <pm_power_state_exit_post_ops>
	__asm__ volatile(
    52f6:	f04f 0320 	mov.w	r3, #32
    52fa:	f3ef 8611 	mrs	r6, BASEPRI
    52fe:	f383 8812 	msr	BASEPRI_MAX, r3
    5302:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5306:	482a      	ldr	r0, [pc, #168]	; (53b0 <pm_system_resume+0x10c>)
    5308:	f008 fe84 	bl	e014 <z_spin_lock_valid>
    530c:	b158      	cbz	r0, 5326 <pm_system_resume+0x82>
	z_spin_lock_set_owner(l);
    530e:	4828      	ldr	r0, [pc, #160]	; (53b0 <pm_system_resume+0x10c>)
    5310:	f008 fea0 	bl	e054 <z_spin_lock_set_owner>
	return list->head;
    5314:	4b27      	ldr	r3, [pc, #156]	; (53b4 <pm_system_resume+0x110>)
    5316:	681d      	ldr	r5, [r3, #0]
    5318:	e015      	b.n	5346 <pm_system_resume+0xa2>
	__asm__ volatile(
    531a:	2300      	movs	r3, #0
    531c:	f383 8811 	msr	BASEPRI, r3
    5320:	f3bf 8f6f 	isb	sy
}
    5324:	e7e7      	b.n	52f6 <pm_system_resume+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5326:	4d24      	ldr	r5, [pc, #144]	; (53b8 <pm_system_resume+0x114>)
    5328:	2281      	movs	r2, #129	; 0x81
    532a:	4629      	mov	r1, r5
    532c:	4823      	ldr	r0, [pc, #140]	; (53bc <pm_system_resume+0x118>)
    532e:	f00b fe7b 	bl	11028 <printk>
    5332:	2181      	movs	r1, #129	; 0x81
    5334:	4628      	mov	r0, r5
    5336:	f00b ff99 	bl	1126c <assert_post_action>
    533a:	e7e8      	b.n	530e <pm_system_resume+0x6a>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    533c:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    533e:	b10d      	cbz	r5, 5344 <pm_system_resume+0xa0>
	return node->next;
    5340:	682b      	ldr	r3, [r5, #0]
    5342:	b16b      	cbz	r3, 5360 <pm_system_resume+0xbc>
{
    5344:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    5346:	b15d      	cbz	r5, 5360 <pm_system_resume+0xbc>
			callback = notifier->state_exit;
    5348:	68aa      	ldr	r2, [r5, #8]
		if (callback) {
    534a:	2a00      	cmp	r2, #0
    534c:	d0f6      	beq.n	533c <pm_system_resume+0x98>
			callback(z_power_states[_current_cpu->id].state);
    534e:	4b14      	ldr	r3, [pc, #80]	; (53a0 <pm_system_resume+0xfc>)
    5350:	7d1b      	ldrb	r3, [r3, #20]
    5352:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5356:	4914      	ldr	r1, [pc, #80]	; (53a8 <pm_system_resume+0x104>)
    5358:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    535c:	4790      	blx	r2
    535e:	e7ed      	b.n	533c <pm_system_resume+0x98>
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
    5360:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5362:	4813      	ldr	r0, [pc, #76]	; (53b0 <pm_system_resume+0x10c>)
    5364:	f008 fe66 	bl	e034 <z_spin_unlock_valid>
    5368:	b178      	cbz	r0, 538a <pm_system_resume+0xe6>
	__asm__ volatile(
    536a:	f385 8811 	msr	BASEPRI, r5
    536e:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    5372:	4a0d      	ldr	r2, [pc, #52]	; (53a8 <pm_system_resume+0x104>)
    5374:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    5378:	00a1      	lsls	r1, r4, #2
    537a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    537e:	2300      	movs	r3, #0
    5380:	5053      	str	r3, [r2, r1]
    5382:	6063      	str	r3, [r4, #4]
    5384:	60a3      	str	r3, [r4, #8]
			0, 0};
	}
}
    5386:	b004      	add	sp, #16
    5388:	bd70      	pop	{r4, r5, r6, pc}
    538a:	4e0b      	ldr	r6, [pc, #44]	; (53b8 <pm_system_resume+0x114>)
    538c:	22ac      	movs	r2, #172	; 0xac
    538e:	4631      	mov	r1, r6
    5390:	480a      	ldr	r0, [pc, #40]	; (53bc <pm_system_resume+0x118>)
    5392:	f00b fe49 	bl	11028 <printk>
    5396:	21ac      	movs	r1, #172	; 0xac
    5398:	4630      	mov	r0, r6
    539a:	f00b ff67 	bl	1126c <assert_post_action>
    539e:	e7e4      	b.n	536a <pm_system_resume+0xc6>
    53a0:	200015f8 	.word	0x200015f8
    53a4:	20000b6c 	.word	0x20000b6c
    53a8:	20000b70 	.word	0x20000b70
    53ac:	00011b21 	.word	0x00011b21
    53b0:	20000b60 	.word	0x20000b60
    53b4:	20000b64 	.word	0x20000b64
    53b8:	00015bc8 	.word	0x00015bc8
    53bc:	00015984 	.word	0x00015984

000053c0 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    53c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    53c2:	b089      	sub	sp, #36	; 0x24
    53c4:	4605      	mov	r5, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    53c6:	4b66      	ldr	r3, [pc, #408]	; (5560 <pm_system_suspend+0x1a0>)
    53c8:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    53ca:	f004 031f 	and.w	r3, r4, #31
    53ce:	2201      	movs	r2, #1
    53d0:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    53d2:	0961      	lsrs	r1, r4, #5
    53d4:	4b63      	ldr	r3, [pc, #396]	; (5564 <pm_system_suspend+0x1a4>)
    53d6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    53da:	f3bf 8f5b 	dmb	ish
    53de:	e853 1f00 	ldrex	r1, [r3]
    53e2:	ea41 0002 	orr.w	r0, r1, r2
    53e6:	e843 0600 	strex	r6, r0, [r3]
    53ea:	2e00      	cmp	r6, #0
    53ec:	d1f7      	bne.n	53de <pm_system_suspend+0x1e>
    53ee:	f3bf 8f5b 	dmb	ish

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    53f2:	420a      	tst	r2, r1
    53f4:	d01e      	beq.n	5434 <pm_system_suspend+0x74>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    53f6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    53fa:	4a5b      	ldr	r2, [pc, #364]	; (5568 <pm_system_suspend+0x1a8>)
    53fc:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    5400:	2b00      	cmp	r3, #0
    5402:	f000 80ab 	beq.w	555c <pm_system_suspend+0x19c>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    5406:	f1b5 3fff 	cmp.w	r5, #4294967295
    540a:	d123      	bne.n	5454 <pm_system_suspend+0x94>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    540c:	f009 fb6e 	bl	eaec <k_sched_lock>
	__asm__ volatile(
    5410:	f04f 0320 	mov.w	r3, #32
    5414:	f3ef 8611 	mrs	r6, BASEPRI
    5418:	f383 8812 	msr	BASEPRI_MAX, r3
    541c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5420:	4852      	ldr	r0, [pc, #328]	; (556c <pm_system_suspend+0x1ac>)
    5422:	f008 fdf7 	bl	e014 <z_spin_lock_valid>
    5426:	b358      	cbz	r0, 5480 <pm_system_suspend+0xc0>
	z_spin_lock_set_owner(l);
    5428:	4850      	ldr	r0, [pc, #320]	; (556c <pm_system_suspend+0x1ac>)
    542a:	f008 fe13 	bl	e054 <z_spin_lock_set_owner>
	return list->head;
    542e:	4b50      	ldr	r3, [pc, #320]	; (5570 <pm_system_suspend+0x1b0>)
    5430:	681d      	ldr	r5, [r3, #0]
    5432:	e035      	b.n	54a0 <pm_system_suspend+0xe0>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    5434:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    5438:	4b4b      	ldr	r3, [pc, #300]	; (5568 <pm_system_suspend+0x1a8>)
    543a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    543e:	466f      	mov	r7, sp
    5440:	462a      	mov	r2, r5
    5442:	4621      	mov	r1, r4
    5444:	4638      	mov	r0, r7
    5446:	f00c fadb 	bl	11a00 <pm_policy_next_state>
    544a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    544e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    5452:	e7d0      	b.n	53f6 <pm_system_suspend+0x36>
		     k_us_to_ticks_ceil32(
    5454:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    5458:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    545c:	689b      	ldr	r3, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    545e:	0c59      	lsrs	r1, r3, #17
    5460:	03d8      	lsls	r0, r3, #15
    5462:	4e44      	ldr	r6, [pc, #272]	; (5574 <pm_system_suspend+0x1b4>)
    5464:	4a44      	ldr	r2, [pc, #272]	; (5578 <pm_system_suspend+0x1b8>)
    5466:	2300      	movs	r3, #0
    5468:	1980      	adds	r0, r0, r6
    546a:	f04f 0600 	mov.w	r6, #0
    546e:	eb46 0101 	adc.w	r1, r6, r1
    5472:	f7fb fdaf 	bl	fd4 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    5476:	2101      	movs	r1, #1
    5478:	1a28      	subs	r0, r5, r0
    547a:	f00a fd0f 	bl	fe9c <z_set_timeout_expiry>
    547e:	e7c5      	b.n	540c <pm_system_suspend+0x4c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5480:	4d3e      	ldr	r5, [pc, #248]	; (557c <pm_system_suspend+0x1bc>)
    5482:	2281      	movs	r2, #129	; 0x81
    5484:	4629      	mov	r1, r5
    5486:	483e      	ldr	r0, [pc, #248]	; (5580 <pm_system_suspend+0x1c0>)
    5488:	f00b fdce 	bl	11028 <printk>
    548c:	2181      	movs	r1, #129	; 0x81
    548e:	4628      	mov	r0, r5
    5490:	f00b feec 	bl	1126c <assert_post_action>
    5494:	e7c8      	b.n	5428 <pm_system_suspend+0x68>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    5496:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    5498:	b10d      	cbz	r5, 549e <pm_system_suspend+0xde>
	return node->next;
    549a:	682b      	ldr	r3, [r5, #0]
    549c:	b16b      	cbz	r3, 54ba <pm_system_suspend+0xfa>
{
    549e:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    54a0:	b15d      	cbz	r5, 54ba <pm_system_suspend+0xfa>
			callback = notifier->state_entry;
    54a2:	686a      	ldr	r2, [r5, #4]
		if (callback) {
    54a4:	2a00      	cmp	r2, #0
    54a6:	d0f6      	beq.n	5496 <pm_system_suspend+0xd6>
			callback(z_power_states[_current_cpu->id].state);
    54a8:	4b2d      	ldr	r3, [pc, #180]	; (5560 <pm_system_suspend+0x1a0>)
    54aa:	7d1b      	ldrb	r3, [r3, #20]
    54ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    54b0:	492d      	ldr	r1, [pc, #180]	; (5568 <pm_system_suspend+0x1a8>)
    54b2:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    54b6:	4790      	blx	r2
    54b8:	e7ed      	b.n	5496 <pm_system_suspend+0xd6>
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
    54ba:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    54bc:	482b      	ldr	r0, [pc, #172]	; (556c <pm_system_suspend+0x1ac>)
    54be:	f008 fdb9 	bl	e034 <z_spin_unlock_valid>
    54c2:	2800      	cmp	r0, #0
    54c4:	d03f      	beq.n	5546 <pm_system_suspend+0x186>
	__asm__ volatile(
    54c6:	f385 8811 	msr	BASEPRI, r5
    54ca:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    54ce:	f004 031f 	and.w	r3, r4, #31
    54d2:	2101      	movs	r1, #1
    54d4:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    54d6:	0963      	lsrs	r3, r4, #5
    54d8:	4a2a      	ldr	r2, [pc, #168]	; (5584 <pm_system_suspend+0x1c4>)
    54da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    54de:	f3bf 8f5b 	dmb	ish
    54e2:	e853 2f00 	ldrex	r2, [r3]
    54e6:	430a      	orrs	r2, r1
    54e8:	e843 2000 	strex	r0, r2, [r3]
    54ec:	2800      	cmp	r0, #0
    54ee:	d1f8      	bne.n	54e2 <pm_system_suspend+0x122>
    54f0:	f3bf 8f5b 	dmb	ish
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    54f4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    54f8:	4a1b      	ldr	r2, [pc, #108]	; (5568 <pm_system_suspend+0x1a8>)
    54fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    54fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    5502:	ab08      	add	r3, sp, #32
    5504:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    5508:	4b1f      	ldr	r3, [pc, #124]	; (5588 <pm_system_suspend+0x1c8>)
    550a:	b10b      	cbz	r3, 5510 <pm_system_suspend+0x150>
		pm_power_state_set(info);
    550c:	f00c faf5 	bl	11afa <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    5510:	f7ff fec8 	bl	52a4 <pm_system_resume>
	k_sched_unlock();
    5514:	f009 ff8e 	bl	f434 <k_sched_unlock>
	bool ret = true;
    5518:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
    551a:	f004 021f 	and.w	r2, r4, #31
    551e:	2301      	movs	r3, #1
    5520:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5522:	0964      	lsrs	r4, r4, #5
    5524:	4a0f      	ldr	r2, [pc, #60]	; (5564 <pm_system_suspend+0x1a4>)
    5526:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    552a:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    552c:	f3bf 8f5b 	dmb	ish
    5530:	e854 2f00 	ldrex	r2, [r4]
    5534:	401a      	ands	r2, r3
    5536:	e844 2100 	strex	r1, r2, [r4]
    553a:	2900      	cmp	r1, #0
    553c:	d1f8      	bne.n	5530 <pm_system_suspend+0x170>
    553e:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    5542:	b009      	add	sp, #36	; 0x24
    5544:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5546:	4e0d      	ldr	r6, [pc, #52]	; (557c <pm_system_suspend+0x1bc>)
    5548:	22ac      	movs	r2, #172	; 0xac
    554a:	4631      	mov	r1, r6
    554c:	480c      	ldr	r0, [pc, #48]	; (5580 <pm_system_suspend+0x1c0>)
    554e:	f00b fd6b 	bl	11028 <printk>
    5552:	21ac      	movs	r1, #172	; 0xac
    5554:	4630      	mov	r0, r6
    5556:	f00b fe89 	bl	1126c <assert_post_action>
    555a:	e7b4      	b.n	54c6 <pm_system_suspend+0x106>
		ret = false;
    555c:	2000      	movs	r0, #0
    555e:	e7dc      	b.n	551a <pm_system_suspend+0x15a>
    5560:	200015f8 	.word	0x200015f8
    5564:	20000b7c 	.word	0x20000b7c
    5568:	20000b70 	.word	0x20000b70
    556c:	20000b60 	.word	0x20000b60
    5570:	20000b64 	.word	0x20000b64
    5574:	000f423f 	.word	0x000f423f
    5578:	000f4240 	.word	0x000f4240
    557c:	00015bc8 	.word	0x00015bc8
    5580:	00015984 	.word	0x00015984
    5584:	20000b6c 	.word	0x20000b6c
    5588:	00011afb 	.word	0x00011afb

0000558c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    558c:	4901      	ldr	r1, [pc, #4]	; (5594 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    558e:	2210      	movs	r2, #16
	str	r2, [r1]
    5590:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    5592:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    5594:	e000ed10 	.word	0xe000ed10

00005598 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    5598:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    559a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    559c:	f380 8811 	msr	BASEPRI, r0
	isb
    55a0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    55a4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    55a8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    55aa:	b662      	cpsie	i
	isb
    55ac:	f3bf 8f6f 	isb	sy

	bx	lr
    55b0:	4770      	bx	lr
    55b2:	bf00      	nop

000055b4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    55b4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    55b6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    55b8:	f381 8811 	msr	BASEPRI, r1

	wfe
    55bc:	bf20      	wfe

	msr	BASEPRI, r0
    55be:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    55c2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    55c4:	4770      	bx	lr
    55c6:	bf00      	nop

000055c8 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    55c8:	b570      	push	{r4, r5, r6, lr}
    55ca:	b082      	sub	sp, #8
    55cc:	4604      	mov	r4, r0
    55ce:	4d1f      	ldr	r5, [pc, #124]	; (564c <esf_dump+0x84>)
    55d0:	4b1f      	ldr	r3, [pc, #124]	; (5650 <esf_dump+0x88>)
    55d2:	1aed      	subs	r5, r5, r3
    55d4:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    55d6:	2601      	movs	r6, #1
    55d8:	f04f 0300 	mov.w	r3, #0
    55dc:	f366 0302 	bfi	r3, r6, #0, #3
    55e0:	f36f 03c5 	bfc	r3, #3, #3
    55e4:	f365 138f 	bfi	r3, r5, #6, #10
    55e8:	f8ad 3000 	strh.w	r3, [sp]
    55ec:	6883      	ldr	r3, [r0, #8]
    55ee:	6842      	ldr	r2, [r0, #4]
    55f0:	6801      	ldr	r1, [r0, #0]
    55f2:	4818      	ldr	r0, [pc, #96]	; (5654 <esf_dump+0x8c>)
    55f4:	f7ff f8f0 	bl	47d8 <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    55f8:	f04f 0300 	mov.w	r3, #0
    55fc:	f366 0302 	bfi	r3, r6, #0, #3
    5600:	f36f 03c5 	bfc	r3, #3, #3
    5604:	f365 138f 	bfi	r3, r5, #6, #10
    5608:	f8ad 3000 	strh.w	r3, [sp]
    560c:	6963      	ldr	r3, [r4, #20]
    560e:	6922      	ldr	r2, [r4, #16]
    5610:	68e1      	ldr	r1, [r4, #12]
    5612:	4811      	ldr	r0, [pc, #68]	; (5658 <esf_dump+0x90>)
    5614:	f7ff f8e0 	bl	47d8 <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    5618:	f04f 0200 	mov.w	r2, #0
    561c:	f366 0202 	bfi	r2, r6, #0, #3
    5620:	f36f 02c5 	bfc	r2, #3, #3
    5624:	f365 128f 	bfi	r2, r5, #6, #10
    5628:	69e1      	ldr	r1, [r4, #28]
    562a:	480c      	ldr	r0, [pc, #48]	; (565c <esf_dump+0x94>)
    562c:	f7ff f840 	bl	46b0 <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    5630:	f04f 0200 	mov.w	r2, #0
    5634:	f366 0202 	bfi	r2, r6, #0, #3
    5638:	f36f 02c5 	bfc	r2, #3, #3
    563c:	f365 128f 	bfi	r2, r5, #6, #10
    5640:	69a1      	ldr	r1, [r4, #24]
    5642:	4807      	ldr	r0, [pc, #28]	; (5660 <esf_dump+0x98>)
    5644:	f7ff f834 	bl	46b0 <log_1>
		esf->basic.pc);
}
    5648:	b002      	add	sp, #8
    564a:	bd70      	pop	{r4, r5, r6, pc}
    564c:	000157ac 	.word	0x000157ac
    5650:	00015774 	.word	0x00015774
    5654:	00015e6c 	.word	0x00015e6c
    5658:	00015e9c 	.word	0x00015e9c
    565c:	00015ecc 	.word	0x00015ecc
    5660:	00015edc 	.word	0x00015edc

00005664 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    5664:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    5666:	2b00      	cmp	r3, #0
    5668:	db08      	blt.n	567c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    566a:	f000 001f 	and.w	r0, r0, #31
    566e:	095b      	lsrs	r3, r3, #5
    5670:	2201      	movs	r2, #1
    5672:	fa02 f000 	lsl.w	r0, r2, r0
    5676:	4a02      	ldr	r2, [pc, #8]	; (5680 <arch_irq_enable+0x1c>)
    5678:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    567c:	4770      	bx	lr
    567e:	bf00      	nop
    5680:	e000e100 	.word	0xe000e100

00005684 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    5684:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    5686:	2b00      	cmp	r3, #0
    5688:	db0d      	blt.n	56a6 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    568a:	f000 001f 	and.w	r0, r0, #31
    568e:	095b      	lsrs	r3, r3, #5
    5690:	2201      	movs	r2, #1
    5692:	fa02 f000 	lsl.w	r0, r2, r0
    5696:	3320      	adds	r3, #32
    5698:	4a03      	ldr	r2, [pc, #12]	; (56a8 <arch_irq_disable+0x24>)
    569a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    569e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    56a2:	f3bf 8f6f 	isb	sy
}
    56a6:	4770      	bx	lr
    56a8:	e000e100 	.word	0xe000e100

000056ac <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    56ac:	0942      	lsrs	r2, r0, #5
    56ae:	4b05      	ldr	r3, [pc, #20]	; (56c4 <arch_irq_is_enabled+0x18>)
    56b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    56b4:	f000 001f 	and.w	r0, r0, #31
    56b8:	2301      	movs	r3, #1
    56ba:	fa03 f000 	lsl.w	r0, r3, r0
}
    56be:	4010      	ands	r0, r2
    56c0:	4770      	bx	lr
    56c2:	bf00      	nop
    56c4:	e000e100 	.word	0xe000e100

000056c8 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    56c8:	b570      	push	{r4, r5, r6, lr}
    56ca:	4605      	mov	r5, r0
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    56cc:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    56ce:	2c07      	cmp	r4, #7
    56d0:	d80b      	bhi.n	56ea <z_arm_irq_priority_set+0x22>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    56d2:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    56d4:	2b00      	cmp	r3, #0
    56d6:	db13      	blt.n	5700 <z_arm_irq_priority_set+0x38>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    56d8:	0164      	lsls	r4, r4, #5
    56da:	b2e4      	uxtb	r4, r4
    56dc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    56e0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    56e4:	f883 4300 	strb.w	r4, [r3, #768]	; 0x300
}
    56e8:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    56ea:	4e09      	ldr	r6, [pc, #36]	; (5710 <z_arm_irq_priority_set+0x48>)
    56ec:	2259      	movs	r2, #89	; 0x59
    56ee:	4631      	mov	r1, r6
    56f0:	4808      	ldr	r0, [pc, #32]	; (5714 <z_arm_irq_priority_set+0x4c>)
    56f2:	f00b fc99 	bl	11028 <printk>
    56f6:	2159      	movs	r1, #89	; 0x59
    56f8:	4630      	mov	r0, r6
    56fa:	f00b fdb7 	bl	1126c <assert_post_action>
    56fe:	e7e8      	b.n	56d2 <z_arm_irq_priority_set+0xa>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5700:	f005 050f 	and.w	r5, r5, #15
    5704:	0164      	lsls	r4, r4, #5
    5706:	b2e4      	uxtb	r4, r4
    5708:	4b03      	ldr	r3, [pc, #12]	; (5718 <z_arm_irq_priority_set+0x50>)
    570a:	555c      	strb	r4, [r3, r5]
}
    570c:	e7ec      	b.n	56e8 <z_arm_irq_priority_set+0x20>
    570e:	bf00      	nop
    5710:	00015f0c 	.word	0x00015f0c
    5714:	00015984 	.word	0x00015984
    5718:	e000ed14 	.word	0xe000ed14

0000571c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    571c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    571e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    5720:	4b05      	ldr	r3, [pc, #20]	; (5738 <_arch_isr_direct_pm+0x1c>)
    5722:	699b      	ldr	r3, [r3, #24]
    5724:	b90b      	cbnz	r3, 572a <_arch_isr_direct_pm+0xe>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    5726:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    5728:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
    572a:	4b03      	ldr	r3, [pc, #12]	; (5738 <_arch_isr_direct_pm+0x1c>)
    572c:	2200      	movs	r2, #0
    572e:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    5730:	f00f f8dd 	bl	148ee <z_pm_save_idle_exit>
    5734:	e7f7      	b.n	5726 <_arch_isr_direct_pm+0xa>
    5736:	bf00      	nop
    5738:	200015f8 	.word	0x200015f8

0000573c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    573c:	bf30      	wfi
    b z_SysNmiOnReset
    573e:	f7ff bffd 	b.w	573c <z_SysNmiOnReset>
    5742:	bf00      	nop

00005744 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    5744:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    5746:	4b0b      	ldr	r3, [pc, #44]	; (5774 <z_arm_prep_c+0x30>)
    5748:	4a0b      	ldr	r2, [pc, #44]	; (5778 <z_arm_prep_c+0x34>)
    574a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    574e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    5750:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5754:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    5758:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    575c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    5760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    5764:	f008 fb04 	bl	dd70 <z_bss_zero>
	z_data_copy();
    5768:	f00a f9ca 	bl	fb00 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    576c:	f000 fd06 	bl	617c <z_arm_interrupt_init>
	z_cstart();
    5770:	f008 fb0a 	bl	dd88 <z_cstart>
    5774:	e000ed00 	.word	0xe000ed00
    5778:	00000000 	.word	0x00000000

0000577c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    577c:	4a0a      	ldr	r2, [pc, #40]	; (57a8 <arch_swap+0x2c>)
    577e:	6893      	ldr	r3, [r2, #8]
    5780:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    5784:	4909      	ldr	r1, [pc, #36]	; (57ac <arch_swap+0x30>)
    5786:	6809      	ldr	r1, [r1, #0]
    5788:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    578c:	4908      	ldr	r1, [pc, #32]	; (57b0 <arch_swap+0x34>)
    578e:	684b      	ldr	r3, [r1, #4]
    5790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    5794:	604b      	str	r3, [r1, #4]
    5796:	2300      	movs	r3, #0
    5798:	f383 8811 	msr	BASEPRI, r3
    579c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    57a0:	6893      	ldr	r3, [r2, #8]
}
    57a2:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    57a6:	4770      	bx	lr
    57a8:	200015f8 	.word	0x200015f8
    57ac:	000170f8 	.word	0x000170f8
    57b0:	e000ed00 	.word	0xe000ed00

000057b4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    57b4:	4913      	ldr	r1, [pc, #76]	; (5804 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    57b6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    57b8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    57bc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    57be:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    57c2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    57c6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    57c8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    57cc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    57d0:	4f0d      	ldr	r7, [pc, #52]	; (5808 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    57d2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    57d6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    57d8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    57da:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    57dc:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    57e0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    57e2:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    57e6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    57ea:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    57ec:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    57ee:	f000 fd67 	bl	62c0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    57f2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    57f6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    57fa:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    57fe:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    5802:	4770      	bx	lr
    ldr r1, =_kernel
    5804:	200015f8 	.word	0x200015f8
    ldr v4, =_SCS_ICSR
    5808:	e000ed04 	.word	0xe000ed04

0000580c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    580c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    5810:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    5812:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    5816:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    581a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    581c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    5820:	2902      	cmp	r1, #2
    beq _oops
    5822:	d0ff      	beq.n	5824 <_oops>

00005824 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    5824:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    5826:	f00c f8fc 	bl	11a22 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    582a:	bd01      	pop	{r0, pc}

0000582c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    582c:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    582e:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    5832:	490d      	ldr	r1, [pc, #52]	; (5868 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    5834:	f021 0101 	bic.w	r1, r1, #1
    5838:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    583c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    5840:	9b01      	ldr	r3, [sp, #4]
    5842:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    5846:	9b02      	ldr	r3, [sp, #8]
    5848:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    584c:	9b03      	ldr	r3, [sp, #12]
    584e:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    5852:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    5856:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    585a:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    585c:	2300      	movs	r3, #0
    585e:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    5862:	bc10      	pop	{r4}
    5864:	4770      	bx	lr
    5866:	bf00      	nop
    5868:	00011199 	.word	0x00011199

0000586c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    586c:	4b16      	ldr	r3, [pc, #88]	; (58c8 <z_check_thread_stack_fail+0x5c>)
    586e:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    5870:	b1da      	cbz	r2, 58aa <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    5872:	f110 0f16 	cmn.w	r0, #22
    5876:	d01a      	beq.n	58ae <z_check_thread_stack_fail+0x42>
{
    5878:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    587a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    587e:	f1a3 0420 	sub.w	r4, r3, #32
    5882:	4284      	cmp	r4, r0
    5884:	d805      	bhi.n	5892 <z_check_thread_stack_fail+0x26>
    5886:	4283      	cmp	r3, r0
    5888:	d908      	bls.n	589c <z_check_thread_stack_fail+0x30>
    588a:	428b      	cmp	r3, r1
    588c:	d808      	bhi.n	58a0 <z_check_thread_stack_fail+0x34>
    588e:	2100      	movs	r1, #0
    5890:	e000      	b.n	5894 <z_check_thread_stack_fail+0x28>
    5892:	2100      	movs	r1, #0
    5894:	b931      	cbnz	r1, 58a4 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    5896:	2000      	movs	r0, #0
}
    5898:	bc10      	pop	{r4}
    589a:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    589c:	2100      	movs	r1, #0
    589e:	e7f9      	b.n	5894 <z_check_thread_stack_fail+0x28>
    58a0:	2101      	movs	r1, #1
    58a2:	e7f7      	b.n	5894 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
    58a4:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    58a8:	e7f6      	b.n	5898 <z_check_thread_stack_fail+0x2c>
		return 0;
    58aa:	2000      	movs	r0, #0
    58ac:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    58ae:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    58b2:	428b      	cmp	r3, r1
    58b4:	bf94      	ite	ls
    58b6:	2100      	movls	r1, #0
    58b8:	2101      	movhi	r1, #1
    58ba:	b909      	cbnz	r1, 58c0 <z_check_thread_stack_fail+0x54>
	return 0;
    58bc:	2000      	movs	r0, #0
}
    58be:	4770      	bx	lr
		return thread->stack_info.start;
    58c0:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    58c4:	4770      	bx	lr
    58c6:	bf00      	nop
    58c8:	200015f8 	.word	0x200015f8

000058cc <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    58cc:	b508      	push	{r3, lr}
    58ce:	460d      	mov	r5, r1
    58d0:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    58d2:	4b08      	ldr	r3, [pc, #32]	; (58f4 <arch_switch_to_main_thread+0x28>)
    58d4:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    58d6:	f000 fcf3 	bl	62c0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    58da:	4620      	mov	r0, r4
    58dc:	f385 8809 	msr	PSP, r5
    58e0:	2100      	movs	r1, #0
    58e2:	b663      	cpsie	if
    58e4:	f381 8811 	msr	BASEPRI, r1
    58e8:	f3bf 8f6f 	isb	sy
    58ec:	2200      	movs	r2, #0
    58ee:	2300      	movs	r3, #0
    58f0:	f00b fc52 	bl	11198 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    58f4:	200015f8 	.word	0x200015f8

000058f8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    58f8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    58fa:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    58fc:	4a0b      	ldr	r2, [pc, #44]	; (592c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    58fe:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    5900:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    5902:	bf1e      	ittt	ne
	movne	r1, #0
    5904:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    5906:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    5908:	f00e fff1 	blne	148ee <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    590c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    590e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    5912:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    5916:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    591a:	4905      	ldr	r1, [pc, #20]	; (5930 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    591c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    591e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    5920:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    5922:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    5926:	4903      	ldr	r1, [pc, #12]	; (5934 <_isr_wrapper+0x3c>)
	bx r1
    5928:	4708      	bx	r1
    592a:	0000      	.short	0x0000
	ldr r2, =_kernel
    592c:	200015f8 	.word	0x200015f8
	ldr r1, =_sw_isr_table
    5930:	0001563c 	.word	0x0001563c
	ldr r1, =z_arm_int_exit
    5934:	00005939 	.word	0x00005939

00005938 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    5938:	4b04      	ldr	r3, [pc, #16]	; (594c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    593a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    593c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    593e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    5940:	d003      	beq.n	594a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    5942:	4903      	ldr	r1, [pc, #12]	; (5950 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    5944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    5948:	600a      	str	r2, [r1, #0]

0000594a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    594a:	4770      	bx	lr
	ldr r3, =_kernel
    594c:	200015f8 	.word	0x200015f8
	ldr r1, =_SCS_ICSR
    5950:	e000ed04 	.word	0xe000ed04

00005954 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    5954:	b508      	push	{r3, lr}
    5956:	4b4e      	ldr	r3, [pc, #312]	; (5a90 <usage_fault+0x13c>)
    5958:	4a4e      	ldr	r2, [pc, #312]	; (5a94 <usage_fault+0x140>)
    595a:	1a9b      	subs	r3, r3, r2
    595c:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    595e:	f04f 0100 	mov.w	r1, #0
    5962:	2201      	movs	r2, #1
    5964:	f362 0102 	bfi	r1, r2, #0, #3
    5968:	f36f 01c5 	bfc	r1, #3, #3
    596c:	f363 118f 	bfi	r1, r3, #6, #10
    5970:	4849      	ldr	r0, [pc, #292]	; (5a98 <usage_fault+0x144>)
    5972:	f7fe ff6f 	bl	4854 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    5976:	4b49      	ldr	r3, [pc, #292]	; (5a9c <usage_fault+0x148>)
    5978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    597a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    597e:	d121      	bne.n	59c4 <usage_fault+0x70>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    5980:	4b46      	ldr	r3, [pc, #280]	; (5a9c <usage_fault+0x148>)
    5982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5984:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    5988:	d12d      	bne.n	59e6 <usage_fault+0x92>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    598a:	4b44      	ldr	r3, [pc, #272]	; (5a9c <usage_fault+0x148>)
    598c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    598e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    5992:	d139      	bne.n	5a08 <usage_fault+0xb4>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    5994:	4b41      	ldr	r3, [pc, #260]	; (5a9c <usage_fault+0x148>)
    5996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5998:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    599c:	d145      	bne.n	5a2a <usage_fault+0xd6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    599e:	4b3f      	ldr	r3, [pc, #252]	; (5a9c <usage_fault+0x148>)
    59a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    59a2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    59a6:	d151      	bne.n	5a4c <usage_fault+0xf8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    59a8:	4b3c      	ldr	r3, [pc, #240]	; (5a9c <usage_fault+0x148>)
    59aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    59ac:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    59b0:	d15d      	bne.n	5a6e <usage_fault+0x11a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    59b2:	4a3a      	ldr	r2, [pc, #232]	; (5a9c <usage_fault+0x148>)
    59b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    59b6:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    59ba:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    59be:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    59c0:	2000      	movs	r0, #0
    59c2:	bd08      	pop	{r3, pc}
    59c4:	4b32      	ldr	r3, [pc, #200]	; (5a90 <usage_fault+0x13c>)
    59c6:	4a33      	ldr	r2, [pc, #204]	; (5a94 <usage_fault+0x140>)
    59c8:	1a9b      	subs	r3, r3, r2
    59ca:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
    59cc:	f04f 0100 	mov.w	r1, #0
    59d0:	2201      	movs	r2, #1
    59d2:	f362 0102 	bfi	r1, r2, #0, #3
    59d6:	f36f 01c5 	bfc	r1, #3, #3
    59da:	f363 118f 	bfi	r1, r3, #6, #10
    59de:	4830      	ldr	r0, [pc, #192]	; (5aa0 <usage_fault+0x14c>)
    59e0:	f7fe ff38 	bl	4854 <log_0>
    59e4:	e7cc      	b.n	5980 <usage_fault+0x2c>
    59e6:	4b2a      	ldr	r3, [pc, #168]	; (5a90 <usage_fault+0x13c>)
    59e8:	4a2a      	ldr	r2, [pc, #168]	; (5a94 <usage_fault+0x140>)
    59ea:	1a9b      	subs	r3, r3, r2
    59ec:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
    59ee:	f04f 0100 	mov.w	r1, #0
    59f2:	2201      	movs	r2, #1
    59f4:	f362 0102 	bfi	r1, r2, #0, #3
    59f8:	f36f 01c5 	bfc	r1, #3, #3
    59fc:	f363 118f 	bfi	r1, r3, #6, #10
    5a00:	4828      	ldr	r0, [pc, #160]	; (5aa4 <usage_fault+0x150>)
    5a02:	f7fe ff27 	bl	4854 <log_0>
    5a06:	e7c0      	b.n	598a <usage_fault+0x36>
    5a08:	4b21      	ldr	r3, [pc, #132]	; (5a90 <usage_fault+0x13c>)
    5a0a:	4a22      	ldr	r2, [pc, #136]	; (5a94 <usage_fault+0x140>)
    5a0c:	1a9b      	subs	r3, r3, r2
    5a0e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
    5a10:	f04f 0100 	mov.w	r1, #0
    5a14:	2201      	movs	r2, #1
    5a16:	f362 0102 	bfi	r1, r2, #0, #3
    5a1a:	f36f 01c5 	bfc	r1, #3, #3
    5a1e:	f363 118f 	bfi	r1, r3, #6, #10
    5a22:	4821      	ldr	r0, [pc, #132]	; (5aa8 <usage_fault+0x154>)
    5a24:	f7fe ff16 	bl	4854 <log_0>
    5a28:	e7b4      	b.n	5994 <usage_fault+0x40>
    5a2a:	4b19      	ldr	r3, [pc, #100]	; (5a90 <usage_fault+0x13c>)
    5a2c:	4a19      	ldr	r2, [pc, #100]	; (5a94 <usage_fault+0x140>)
    5a2e:	1a9b      	subs	r3, r3, r2
    5a30:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    5a32:	f04f 0100 	mov.w	r1, #0
    5a36:	2201      	movs	r2, #1
    5a38:	f362 0102 	bfi	r1, r2, #0, #3
    5a3c:	f36f 01c5 	bfc	r1, #3, #3
    5a40:	f363 118f 	bfi	r1, r3, #6, #10
    5a44:	4819      	ldr	r0, [pc, #100]	; (5aac <usage_fault+0x158>)
    5a46:	f7fe ff05 	bl	4854 <log_0>
    5a4a:	e7a8      	b.n	599e <usage_fault+0x4a>
    5a4c:	4b10      	ldr	r3, [pc, #64]	; (5a90 <usage_fault+0x13c>)
    5a4e:	4a11      	ldr	r2, [pc, #68]	; (5a94 <usage_fault+0x140>)
    5a50:	1a9b      	subs	r3, r3, r2
    5a52:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
    5a54:	f04f 0100 	mov.w	r1, #0
    5a58:	2201      	movs	r2, #1
    5a5a:	f362 0102 	bfi	r1, r2, #0, #3
    5a5e:	f36f 01c5 	bfc	r1, #3, #3
    5a62:	f363 118f 	bfi	r1, r3, #6, #10
    5a66:	4812      	ldr	r0, [pc, #72]	; (5ab0 <usage_fault+0x15c>)
    5a68:	f7fe fef4 	bl	4854 <log_0>
    5a6c:	e79c      	b.n	59a8 <usage_fault+0x54>
    5a6e:	4b08      	ldr	r3, [pc, #32]	; (5a90 <usage_fault+0x13c>)
    5a70:	4a08      	ldr	r2, [pc, #32]	; (5a94 <usage_fault+0x140>)
    5a72:	1a9b      	subs	r3, r3, r2
    5a74:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    5a76:	f04f 0100 	mov.w	r1, #0
    5a7a:	2201      	movs	r2, #1
    5a7c:	f362 0102 	bfi	r1, r2, #0, #3
    5a80:	f36f 01c5 	bfc	r1, #3, #3
    5a84:	f363 118f 	bfi	r1, r3, #6, #10
    5a88:	480a      	ldr	r0, [pc, #40]	; (5ab4 <usage_fault+0x160>)
    5a8a:	f7fe fee3 	bl	4854 <log_0>
    5a8e:	e790      	b.n	59b2 <usage_fault+0x5e>
    5a90:	000157ac 	.word	0x000157ac
    5a94:	00015774 	.word	0x00015774
    5a98:	00015f44 	.word	0x00015f44
    5a9c:	e000ed00 	.word	0xe000ed00
    5aa0:	00015f5c 	.word	0x00015f5c
    5aa4:	00015f70 	.word	0x00015f70
    5aa8:	00015f8c 	.word	0x00015f8c
    5aac:	00015fac 	.word	0x00015fac
    5ab0:	00015fd4 	.word	0x00015fd4
    5ab4:	00015ff0 	.word	0x00015ff0

00005ab8 <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    5ab8:	b508      	push	{r3, lr}
	*recoverable = false;
    5aba:	2200      	movs	r2, #0
    5abc:	700a      	strb	r2, [r1, #0]
    5abe:	4b08      	ldr	r3, [pc, #32]	; (5ae0 <debug_monitor+0x28>)
    5ac0:	4908      	ldr	r1, [pc, #32]	; (5ae4 <debug_monitor+0x2c>)
    5ac2:	1a5b      	subs	r3, r3, r1
    5ac4:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
    5ac6:	f04f 0100 	mov.w	r1, #0
    5aca:	2001      	movs	r0, #1
    5acc:	f360 0102 	bfi	r1, r0, #0, #3
    5ad0:	f362 01c5 	bfi	r1, r2, #3, #3
    5ad4:	f363 118f 	bfi	r1, r3, #6, #10
    5ad8:	4803      	ldr	r0, [pc, #12]	; (5ae8 <debug_monitor+0x30>)
    5ada:	f7fe febb 	bl	4854 <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    5ade:	bd08      	pop	{r3, pc}
    5ae0:	000157ac 	.word	0x000157ac
    5ae4:	00015774 	.word	0x00015774
    5ae8:	0001601c 	.word	0x0001601c

00005aec <bus_fault>:
{
    5aec:	b570      	push	{r4, r5, r6, lr}
    5aee:	4605      	mov	r5, r0
    5af0:	460e      	mov	r6, r1
    5af2:	4614      	mov	r4, r2
    5af4:	4b5e      	ldr	r3, [pc, #376]	; (5c70 <bus_fault+0x184>)
    5af6:	4a5f      	ldr	r2, [pc, #380]	; (5c74 <bus_fault+0x188>)
    5af8:	1a9b      	subs	r3, r3, r2
    5afa:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    5afc:	f04f 0100 	mov.w	r1, #0
    5b00:	2201      	movs	r2, #1
    5b02:	f362 0102 	bfi	r1, r2, #0, #3
    5b06:	f36f 01c5 	bfc	r1, #3, #3
    5b0a:	f363 118f 	bfi	r1, r3, #6, #10
    5b0e:	485a      	ldr	r0, [pc, #360]	; (5c78 <bus_fault+0x18c>)
    5b10:	f7fe fea0 	bl	4854 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    5b14:	4b59      	ldr	r3, [pc, #356]	; (5c7c <bus_fault+0x190>)
    5b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5b18:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    5b1c:	d124      	bne.n	5b68 <bus_fault+0x7c>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    5b1e:	4b57      	ldr	r3, [pc, #348]	; (5c7c <bus_fault+0x190>)
    5b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5b22:	f413 6f00 	tst.w	r3, #2048	; 0x800
    5b26:	d130      	bne.n	5b8a <bus_fault+0x9e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    5b28:	4b54      	ldr	r3, [pc, #336]	; (5c7c <bus_fault+0x190>)
    5b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5b2c:	f413 7f00 	tst.w	r3, #512	; 0x200
    5b30:	d13c      	bne.n	5bac <bus_fault+0xc0>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    5b32:	4b52      	ldr	r3, [pc, #328]	; (5c7c <bus_fault+0x190>)
    5b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5b36:	f413 6f80 	tst.w	r3, #1024	; 0x400
    5b3a:	d165      	bne.n	5c08 <bus_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    5b3c:	4b4f      	ldr	r3, [pc, #316]	; (5c7c <bus_fault+0x190>)
    5b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5b40:	f413 7f80 	tst.w	r3, #256	; 0x100
    5b44:	d171      	bne.n	5c2a <bus_fault+0x13e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    5b46:	4b4d      	ldr	r3, [pc, #308]	; (5c7c <bus_fault+0x190>)
    5b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5b4a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    5b4e:	d17d      	bne.n	5c4c <bus_fault+0x160>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    5b50:	4a4a      	ldr	r2, [pc, #296]	; (5c7c <bus_fault+0x190>)
    5b52:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5b54:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    5b58:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    5b5a:	2101      	movs	r1, #1
    5b5c:	4628      	mov	r0, r5
    5b5e:	f00b ff72 	bl	11a46 <memory_fault_recoverable>
    5b62:	7020      	strb	r0, [r4, #0]
}
    5b64:	2000      	movs	r0, #0
    5b66:	bd70      	pop	{r4, r5, r6, pc}
    5b68:	4b41      	ldr	r3, [pc, #260]	; (5c70 <bus_fault+0x184>)
    5b6a:	4a42      	ldr	r2, [pc, #264]	; (5c74 <bus_fault+0x188>)
    5b6c:	1a9b      	subs	r3, r3, r2
    5b6e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
    5b70:	f04f 0100 	mov.w	r1, #0
    5b74:	2201      	movs	r2, #1
    5b76:	f362 0102 	bfi	r1, r2, #0, #3
    5b7a:	f36f 01c5 	bfc	r1, #3, #3
    5b7e:	f363 118f 	bfi	r1, r3, #6, #10
    5b82:	483f      	ldr	r0, [pc, #252]	; (5c80 <bus_fault+0x194>)
    5b84:	f7fe fe66 	bl	4854 <log_0>
    5b88:	e7c9      	b.n	5b1e <bus_fault+0x32>
    5b8a:	4b39      	ldr	r3, [pc, #228]	; (5c70 <bus_fault+0x184>)
    5b8c:	4a39      	ldr	r2, [pc, #228]	; (5c74 <bus_fault+0x188>)
    5b8e:	1a9b      	subs	r3, r3, r2
    5b90:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
    5b92:	f04f 0100 	mov.w	r1, #0
    5b96:	2201      	movs	r2, #1
    5b98:	f362 0102 	bfi	r1, r2, #0, #3
    5b9c:	f36f 01c5 	bfc	r1, #3, #3
    5ba0:	f363 118f 	bfi	r1, r3, #6, #10
    5ba4:	4837      	ldr	r0, [pc, #220]	; (5c84 <bus_fault+0x198>)
    5ba6:	f7fe fe55 	bl	4854 <log_0>
    5baa:	e7bd      	b.n	5b28 <bus_fault+0x3c>
    5bac:	4b30      	ldr	r3, [pc, #192]	; (5c70 <bus_fault+0x184>)
    5bae:	4a31      	ldr	r2, [pc, #196]	; (5c74 <bus_fault+0x188>)
    5bb0:	1a9b      	subs	r3, r3, r2
    5bb2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
    5bb4:	f04f 0100 	mov.w	r1, #0
    5bb8:	2201      	movs	r2, #1
    5bba:	f362 0102 	bfi	r1, r2, #0, #3
    5bbe:	f36f 01c5 	bfc	r1, #3, #3
    5bc2:	f363 118f 	bfi	r1, r3, #6, #10
    5bc6:	4830      	ldr	r0, [pc, #192]	; (5c88 <bus_fault+0x19c>)
    5bc8:	f7fe fe44 	bl	4854 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    5bcc:	4b2b      	ldr	r3, [pc, #172]	; (5c7c <bus_fault+0x190>)
    5bce:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    5bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5bd2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    5bd6:	d0ac      	beq.n	5b32 <bus_fault+0x46>
    5bd8:	4b25      	ldr	r3, [pc, #148]	; (5c70 <bus_fault+0x184>)
    5bda:	4a26      	ldr	r2, [pc, #152]	; (5c74 <bus_fault+0x188>)
    5bdc:	1a9b      	subs	r3, r3, r2
    5bde:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
    5be0:	f04f 0200 	mov.w	r2, #0
    5be4:	2001      	movs	r0, #1
    5be6:	f360 0202 	bfi	r2, r0, #0, #3
    5bea:	f36f 02c5 	bfc	r2, #3, #3
    5bee:	f363 128f 	bfi	r2, r3, #6, #10
    5bf2:	4826      	ldr	r0, [pc, #152]	; (5c8c <bus_fault+0x1a0>)
    5bf4:	f7fe fd5c 	bl	46b0 <log_1>
			if (from_hard_fault != 0) {
    5bf8:	2e00      	cmp	r6, #0
    5bfa:	d09a      	beq.n	5b32 <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    5bfc:	4a1f      	ldr	r2, [pc, #124]	; (5c7c <bus_fault+0x190>)
    5bfe:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5c00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    5c04:	6293      	str	r3, [r2, #40]	; 0x28
    5c06:	e794      	b.n	5b32 <bus_fault+0x46>
    5c08:	4b19      	ldr	r3, [pc, #100]	; (5c70 <bus_fault+0x184>)
    5c0a:	4a1a      	ldr	r2, [pc, #104]	; (5c74 <bus_fault+0x188>)
    5c0c:	1a9b      	subs	r3, r3, r2
    5c0e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
    5c10:	f04f 0100 	mov.w	r1, #0
    5c14:	2201      	movs	r2, #1
    5c16:	f362 0102 	bfi	r1, r2, #0, #3
    5c1a:	f36f 01c5 	bfc	r1, #3, #3
    5c1e:	f363 118f 	bfi	r1, r3, #6, #10
    5c22:	481b      	ldr	r0, [pc, #108]	; (5c90 <bus_fault+0x1a4>)
    5c24:	f7fe fe16 	bl	4854 <log_0>
    5c28:	e788      	b.n	5b3c <bus_fault+0x50>
    5c2a:	4b11      	ldr	r3, [pc, #68]	; (5c70 <bus_fault+0x184>)
    5c2c:	4a11      	ldr	r2, [pc, #68]	; (5c74 <bus_fault+0x188>)
    5c2e:	1a9b      	subs	r3, r3, r2
    5c30:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
    5c32:	f04f 0100 	mov.w	r1, #0
    5c36:	2201      	movs	r2, #1
    5c38:	f362 0102 	bfi	r1, r2, #0, #3
    5c3c:	f36f 01c5 	bfc	r1, #3, #3
    5c40:	f363 118f 	bfi	r1, r3, #6, #10
    5c44:	4813      	ldr	r0, [pc, #76]	; (5c94 <bus_fault+0x1a8>)
    5c46:	f7fe fe05 	bl	4854 <log_0>
    5c4a:	e781      	b.n	5b50 <bus_fault+0x64>
    5c4c:	4b08      	ldr	r3, [pc, #32]	; (5c70 <bus_fault+0x184>)
    5c4e:	4a09      	ldr	r2, [pc, #36]	; (5c74 <bus_fault+0x188>)
    5c50:	1a9b      	subs	r3, r3, r2
    5c52:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    5c54:	f04f 0100 	mov.w	r1, #0
    5c58:	2201      	movs	r2, #1
    5c5a:	f362 0102 	bfi	r1, r2, #0, #3
    5c5e:	f36f 01c5 	bfc	r1, #3, #3
    5c62:	f363 118f 	bfi	r1, r3, #6, #10
    5c66:	480c      	ldr	r0, [pc, #48]	; (5c98 <bus_fault+0x1ac>)
    5c68:	f7fe fdf4 	bl	4854 <log_0>
    5c6c:	e770      	b.n	5b50 <bus_fault+0x64>
    5c6e:	bf00      	nop
    5c70:	000157ac 	.word	0x000157ac
    5c74:	00015774 	.word	0x00015774
    5c78:	00016040 	.word	0x00016040
    5c7c:	e000ed00 	.word	0xe000ed00
    5c80:	00016058 	.word	0x00016058
    5c84:	0001606c 	.word	0x0001606c
    5c88:	00016080 	.word	0x00016080
    5c8c:	0001609c 	.word	0x0001609c
    5c90:	000160b4 	.word	0x000160b4
    5c94:	000160d0 	.word	0x000160d0
    5c98:	000160e8 	.word	0x000160e8

00005c9c <mem_manage_fault>:
{
    5c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c9e:	4605      	mov	r5, r0
    5ca0:	460c      	mov	r4, r1
    5ca2:	4616      	mov	r6, r2
    5ca4:	4b6d      	ldr	r3, [pc, #436]	; (5e5c <mem_manage_fault+0x1c0>)
    5ca6:	4a6e      	ldr	r2, [pc, #440]	; (5e60 <mem_manage_fault+0x1c4>)
    5ca8:	1a9b      	subs	r3, r3, r2
    5caa:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    5cac:	f04f 0100 	mov.w	r1, #0
    5cb0:	2201      	movs	r2, #1
    5cb2:	f362 0102 	bfi	r1, r2, #0, #3
    5cb6:	f36f 01c5 	bfc	r1, #3, #3
    5cba:	f363 118f 	bfi	r1, r3, #6, #10
    5cbe:	4869      	ldr	r0, [pc, #420]	; (5e64 <mem_manage_fault+0x1c8>)
    5cc0:	f7fe fdc8 	bl	4854 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    5cc4:	4b68      	ldr	r3, [pc, #416]	; (5e68 <mem_manage_fault+0x1cc>)
    5cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5cc8:	f013 0f10 	tst.w	r3, #16
    5ccc:	d132      	bne.n	5d34 <mem_manage_fault+0x98>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    5cce:	4b66      	ldr	r3, [pc, #408]	; (5e68 <mem_manage_fault+0x1cc>)
    5cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5cd2:	f013 0f08 	tst.w	r3, #8
    5cd6:	d13e      	bne.n	5d56 <mem_manage_fault+0xba>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    5cd8:	4b63      	ldr	r3, [pc, #396]	; (5e68 <mem_manage_fault+0x1cc>)
    5cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5cdc:	f013 0f02 	tst.w	r3, #2
    5ce0:	d14a      	bne.n	5d78 <mem_manage_fault+0xdc>
	uint32_t mmfar = -EINVAL;
    5ce2:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    5ce6:	4b60      	ldr	r3, [pc, #384]	; (5e68 <mem_manage_fault+0x1cc>)
    5ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5cea:	f013 0f01 	tst.w	r3, #1
    5cee:	d175      	bne.n	5ddc <mem_manage_fault+0x140>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    5cf0:	4b5d      	ldr	r3, [pc, #372]	; (5e68 <mem_manage_fault+0x1cc>)
    5cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5cf4:	f013 0f20 	tst.w	r3, #32
    5cf8:	f040 8081 	bne.w	5dfe <mem_manage_fault+0x162>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    5cfc:	4b5a      	ldr	r3, [pc, #360]	; (5e68 <mem_manage_fault+0x1cc>)
    5cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5d00:	f013 0f10 	tst.w	r3, #16
    5d04:	d104      	bne.n	5d10 <mem_manage_fault+0x74>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    5d06:	4b58      	ldr	r3, [pc, #352]	; (5e68 <mem_manage_fault+0x1cc>)
    5d08:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    5d0a:	f014 0402 	ands.w	r4, r4, #2
    5d0e:	d005      	beq.n	5d1c <mem_manage_fault+0x80>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    5d10:	4b55      	ldr	r3, [pc, #340]	; (5e68 <mem_manage_fault+0x1cc>)
    5d12:	685c      	ldr	r4, [r3, #4]
    5d14:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    5d18:	f040 8082 	bne.w	5e20 <mem_manage_fault+0x184>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    5d1c:	4a52      	ldr	r2, [pc, #328]	; (5e68 <mem_manage_fault+0x1cc>)
    5d1e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5d20:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    5d24:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    5d26:	2101      	movs	r1, #1
    5d28:	4628      	mov	r0, r5
    5d2a:	f00b fe8c 	bl	11a46 <memory_fault_recoverable>
    5d2e:	7030      	strb	r0, [r6, #0]
}
    5d30:	4620      	mov	r0, r4
    5d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d34:	4b49      	ldr	r3, [pc, #292]	; (5e5c <mem_manage_fault+0x1c0>)
    5d36:	4a4a      	ldr	r2, [pc, #296]	; (5e60 <mem_manage_fault+0x1c4>)
    5d38:	1a9b      	subs	r3, r3, r2
    5d3a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
    5d3c:	f04f 0100 	mov.w	r1, #0
    5d40:	2201      	movs	r2, #1
    5d42:	f362 0102 	bfi	r1, r2, #0, #3
    5d46:	f36f 01c5 	bfc	r1, #3, #3
    5d4a:	f363 118f 	bfi	r1, r3, #6, #10
    5d4e:	4847      	ldr	r0, [pc, #284]	; (5e6c <mem_manage_fault+0x1d0>)
    5d50:	f7fe fd80 	bl	4854 <log_0>
    5d54:	e7bb      	b.n	5cce <mem_manage_fault+0x32>
    5d56:	4b41      	ldr	r3, [pc, #260]	; (5e5c <mem_manage_fault+0x1c0>)
    5d58:	4a41      	ldr	r2, [pc, #260]	; (5e60 <mem_manage_fault+0x1c4>)
    5d5a:	1a9b      	subs	r3, r3, r2
    5d5c:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
    5d5e:	f04f 0100 	mov.w	r1, #0
    5d62:	2201      	movs	r2, #1
    5d64:	f362 0102 	bfi	r1, r2, #0, #3
    5d68:	f36f 01c5 	bfc	r1, #3, #3
    5d6c:	f363 118f 	bfi	r1, r3, #6, #10
    5d70:	483f      	ldr	r0, [pc, #252]	; (5e70 <mem_manage_fault+0x1d4>)
    5d72:	f7fe fd6f 	bl	4854 <log_0>
    5d76:	e7af      	b.n	5cd8 <mem_manage_fault+0x3c>
    5d78:	4b38      	ldr	r3, [pc, #224]	; (5e5c <mem_manage_fault+0x1c0>)
    5d7a:	4a39      	ldr	r2, [pc, #228]	; (5e60 <mem_manage_fault+0x1c4>)
    5d7c:	1a9b      	subs	r3, r3, r2
    5d7e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
    5d80:	f04f 0100 	mov.w	r1, #0
    5d84:	2201      	movs	r2, #1
    5d86:	f362 0102 	bfi	r1, r2, #0, #3
    5d8a:	f36f 01c5 	bfc	r1, #3, #3
    5d8e:	f363 118f 	bfi	r1, r3, #6, #10
    5d92:	4838      	ldr	r0, [pc, #224]	; (5e74 <mem_manage_fault+0x1d8>)
    5d94:	f7fe fd5e 	bl	4854 <log_0>
		uint32_t temp = SCB->MMFAR;
    5d98:	4b33      	ldr	r3, [pc, #204]	; (5e68 <mem_manage_fault+0x1cc>)
    5d9a:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    5d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5d9e:	f013 0f80 	tst.w	r3, #128	; 0x80
    5da2:	d102      	bne.n	5daa <mem_manage_fault+0x10e>
	uint32_t mmfar = -EINVAL;
    5da4:	f06f 0715 	mvn.w	r7, #21
    5da8:	e79d      	b.n	5ce6 <mem_manage_fault+0x4a>
    5daa:	4b2c      	ldr	r3, [pc, #176]	; (5e5c <mem_manage_fault+0x1c0>)
    5dac:	4a2c      	ldr	r2, [pc, #176]	; (5e60 <mem_manage_fault+0x1c4>)
    5dae:	1a9b      	subs	r3, r3, r2
    5db0:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    5db2:	f04f 0200 	mov.w	r2, #0
    5db6:	2101      	movs	r1, #1
    5db8:	f361 0202 	bfi	r2, r1, #0, #3
    5dbc:	f36f 02c5 	bfc	r2, #3, #3
    5dc0:	f363 128f 	bfi	r2, r3, #6, #10
    5dc4:	4639      	mov	r1, r7
    5dc6:	482c      	ldr	r0, [pc, #176]	; (5e78 <mem_manage_fault+0x1dc>)
    5dc8:	f7fe fc72 	bl	46b0 <log_1>
			if (from_hard_fault != 0) {
    5dcc:	2c00      	cmp	r4, #0
    5dce:	d08a      	beq.n	5ce6 <mem_manage_fault+0x4a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    5dd0:	4a25      	ldr	r2, [pc, #148]	; (5e68 <mem_manage_fault+0x1cc>)
    5dd2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5dd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    5dd8:	6293      	str	r3, [r2, #40]	; 0x28
    5dda:	e784      	b.n	5ce6 <mem_manage_fault+0x4a>
    5ddc:	4b1f      	ldr	r3, [pc, #124]	; (5e5c <mem_manage_fault+0x1c0>)
    5dde:	4a20      	ldr	r2, [pc, #128]	; (5e60 <mem_manage_fault+0x1c4>)
    5de0:	1a9b      	subs	r3, r3, r2
    5de2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
    5de4:	f04f 0100 	mov.w	r1, #0
    5de8:	2201      	movs	r2, #1
    5dea:	f362 0102 	bfi	r1, r2, #0, #3
    5dee:	f36f 01c5 	bfc	r1, #3, #3
    5df2:	f363 118f 	bfi	r1, r3, #6, #10
    5df6:	4821      	ldr	r0, [pc, #132]	; (5e7c <mem_manage_fault+0x1e0>)
    5df8:	f7fe fd2c 	bl	4854 <log_0>
    5dfc:	e778      	b.n	5cf0 <mem_manage_fault+0x54>
    5dfe:	4b17      	ldr	r3, [pc, #92]	; (5e5c <mem_manage_fault+0x1c0>)
    5e00:	4a17      	ldr	r2, [pc, #92]	; (5e60 <mem_manage_fault+0x1c4>)
    5e02:	1a9b      	subs	r3, r3, r2
    5e04:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
    5e06:	f04f 0100 	mov.w	r1, #0
    5e0a:	2201      	movs	r2, #1
    5e0c:	f362 0102 	bfi	r1, r2, #0, #3
    5e10:	f36f 01c5 	bfc	r1, #3, #3
    5e14:	f363 118f 	bfi	r1, r3, #6, #10
    5e18:	4819      	ldr	r0, [pc, #100]	; (5e80 <mem_manage_fault+0x1e4>)
    5e1a:	f7fe fd1b 	bl	4854 <log_0>
    5e1e:	e76d      	b.n	5cfc <mem_manage_fault+0x60>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    5e20:	4629      	mov	r1, r5
    5e22:	4638      	mov	r0, r7
    5e24:	f7ff fd22 	bl	586c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    5e28:	4607      	mov	r7, r0
    5e2a:	b998      	cbnz	r0, 5e54 <mem_manage_fault+0x1b8>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    5e2c:	4b0e      	ldr	r3, [pc, #56]	; (5e68 <mem_manage_fault+0x1cc>)
    5e2e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    5e30:	f014 0410 	ands.w	r4, r4, #16
    5e34:	f43f af72 	beq.w	5d1c <mem_manage_fault+0x80>
    5e38:	4c12      	ldr	r4, [pc, #72]	; (5e84 <mem_manage_fault+0x1e8>)
    5e3a:	f240 1249 	movw	r2, #329	; 0x149
    5e3e:	4621      	mov	r1, r4
    5e40:	4811      	ldr	r0, [pc, #68]	; (5e88 <mem_manage_fault+0x1ec>)
    5e42:	f00b f8f1 	bl	11028 <printk>
    5e46:	f240 1149 	movw	r1, #329	; 0x149
    5e4a:	4620      	mov	r0, r4
    5e4c:	f00b fa0e 	bl	1126c <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    5e50:	463c      	mov	r4, r7
    5e52:	e763      	b.n	5d1c <mem_manage_fault+0x80>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    5e54:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    5e58:	2402      	movs	r4, #2
    5e5a:	e75f      	b.n	5d1c <mem_manage_fault+0x80>
    5e5c:	000157ac 	.word	0x000157ac
    5e60:	00015774 	.word	0x00015774
    5e64:	00016118 	.word	0x00016118
    5e68:	e000ed00 	.word	0xe000ed00
    5e6c:	00016130 	.word	0x00016130
    5e70:	0001606c 	.word	0x0001606c
    5e74:	00016164 	.word	0x00016164
    5e78:	0001617c 	.word	0x0001617c
    5e7c:	00016194 	.word	0x00016194
    5e80:	000160e8 	.word	0x000160e8
    5e84:	000161b4 	.word	0x000161b4
    5e88:	00015984 	.word	0x00015984

00005e8c <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    5e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e8e:	4606      	mov	r6, r0
    5e90:	460c      	mov	r4, r1
    5e92:	4b56      	ldr	r3, [pc, #344]	; (5fec <hard_fault+0x160>)
    5e94:	4a56      	ldr	r2, [pc, #344]	; (5ff0 <hard_fault+0x164>)
    5e96:	1a9b      	subs	r3, r3, r2
    5e98:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
    5e9a:	f04f 0100 	mov.w	r1, #0
    5e9e:	2201      	movs	r2, #1
    5ea0:	f362 0102 	bfi	r1, r2, #0, #3
    5ea4:	f36f 01c5 	bfc	r1, #3, #3
    5ea8:	f363 118f 	bfi	r1, r3, #6, #10
    5eac:	4851      	ldr	r0, [pc, #324]	; (5ff4 <hard_fault+0x168>)
    5eae:	f7fe fcd1 	bl	4854 <log_0>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    5eb2:	2300      	movs	r3, #0
    5eb4:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    5eb6:	4b50      	ldr	r3, [pc, #320]	; (5ff8 <hard_fault+0x16c>)
    5eb8:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    5eba:	f017 0702 	ands.w	r7, r7, #2
    5ebe:	d134      	bne.n	5f2a <hard_fault+0x9e>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    5ec0:	4b4d      	ldr	r3, [pc, #308]	; (5ff8 <hard_fault+0x16c>)
    5ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5ec4:	2b00      	cmp	r3, #0
    5ec6:	db43      	blt.n	5f50 <hard_fault+0xc4>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    5ec8:	4b4b      	ldr	r3, [pc, #300]	; (5ff8 <hard_fault+0x16c>)
    5eca:	6add      	ldr	r5, [r3, #44]	; 0x2c
    5ecc:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
    5ed0:	d07f      	beq.n	5fd2 <hard_fault+0x146>
    5ed2:	4b46      	ldr	r3, [pc, #280]	; (5fec <hard_fault+0x160>)
    5ed4:	4a46      	ldr	r2, [pc, #280]	; (5ff0 <hard_fault+0x164>)
    5ed6:	1a9b      	subs	r3, r3, r2
    5ed8:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
    5eda:	f04f 0100 	mov.w	r1, #0
    5ede:	2201      	movs	r2, #1
    5ee0:	f362 0102 	bfi	r1, r2, #0, #3
    5ee4:	f36f 01c5 	bfc	r1, #3, #3
    5ee8:	f363 118f 	bfi	r1, r3, #6, #10
    5eec:	4843      	ldr	r0, [pc, #268]	; (5ffc <hard_fault+0x170>)
    5eee:	f7fe fcb1 	bl	4854 <log_0>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    5ef2:	69b3      	ldr	r3, [r6, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    5ef4:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    5ef8:	f64d 7302 	movw	r3, #57090	; 0xdf02
    5efc:	429a      	cmp	r2, r3
    5efe:	d039      	beq.n	5f74 <hard_fault+0xe8>
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    5f00:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    5f04:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    5f08:	781b      	ldrb	r3, [r3, #0]
    5f0a:	2b00      	cmp	r3, #0
    5f0c:	d145      	bne.n	5f9a <hard_fault+0x10e>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    5f0e:	4b3c      	ldr	r3, [pc, #240]	; (6000 <hard_fault+0x174>)
    5f10:	781b      	ldrb	r3, [r3, #0]
    5f12:	2b00      	cmp	r3, #0
    5f14:	d148      	bne.n	5fa8 <hard_fault+0x11c>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    5f16:	4b3b      	ldr	r3, [pc, #236]	; (6004 <hard_fault+0x178>)
    5f18:	881b      	ldrh	r3, [r3, #0]
    5f1a:	b29b      	uxth	r3, r3
    5f1c:	2b00      	cmp	r3, #0
    5f1e:	d04a      	beq.n	5fb6 <hard_fault+0x12a>
			reason = usage_fault(esf);
    5f20:	4630      	mov	r0, r6
    5f22:	f7ff fd17 	bl	5954 <usage_fault>
    5f26:	4605      	mov	r5, r0
    5f28:	e010      	b.n	5f4c <hard_fault+0xc0>
    5f2a:	4b30      	ldr	r3, [pc, #192]	; (5fec <hard_fault+0x160>)
    5f2c:	4a30      	ldr	r2, [pc, #192]	; (5ff0 <hard_fault+0x164>)
    5f2e:	1a9b      	subs	r3, r3, r2
    5f30:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
    5f32:	f04f 0100 	mov.w	r1, #0
    5f36:	2201      	movs	r2, #1
    5f38:	f362 0102 	bfi	r1, r2, #0, #3
    5f3c:	f36f 01c5 	bfc	r1, #3, #3
    5f40:	f363 118f 	bfi	r1, r3, #6, #10
    5f44:	4830      	ldr	r0, [pc, #192]	; (6008 <hard_fault+0x17c>)
    5f46:	f7fe fc85 	bl	4854 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    5f4a:	2500      	movs	r5, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    5f4c:	4628      	mov	r0, r5
    5f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f50:	4b26      	ldr	r3, [pc, #152]	; (5fec <hard_fault+0x160>)
    5f52:	4a27      	ldr	r2, [pc, #156]	; (5ff0 <hard_fault+0x164>)
    5f54:	1a9b      	subs	r3, r3, r2
    5f56:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
    5f58:	f04f 0100 	mov.w	r1, #0
    5f5c:	2201      	movs	r2, #1
    5f5e:	f362 0102 	bfi	r1, r2, #0, #3
    5f62:	f36f 01c5 	bfc	r1, #3, #3
    5f66:	f363 118f 	bfi	r1, r3, #6, #10
    5f6a:	4828      	ldr	r0, [pc, #160]	; (600c <hard_fault+0x180>)
    5f6c:	f7fe fc72 	bl	4854 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    5f70:	463d      	mov	r5, r7
    5f72:	e7eb      	b.n	5f4c <hard_fault+0xc0>
    5f74:	4b1d      	ldr	r3, [pc, #116]	; (5fec <hard_fault+0x160>)
    5f76:	4a1e      	ldr	r2, [pc, #120]	; (5ff0 <hard_fault+0x164>)
    5f78:	1a9b      	subs	r3, r3, r2
    5f7a:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    5f7c:	f04f 0200 	mov.w	r2, #0
    5f80:	2101      	movs	r1, #1
    5f82:	f361 0202 	bfi	r2, r1, #0, #3
    5f86:	f36f 02c5 	bfc	r2, #3, #3
    5f8a:	f363 128f 	bfi	r2, r3, #6, #10
    5f8e:	6831      	ldr	r1, [r6, #0]
    5f90:	481f      	ldr	r0, [pc, #124]	; (6010 <hard_fault+0x184>)
    5f92:	f7fe fb8d 	bl	46b0 <log_1>
			reason = esf->basic.r0;
    5f96:	6835      	ldr	r5, [r6, #0]
    5f98:	e7d8      	b.n	5f4c <hard_fault+0xc0>
			reason = mem_manage_fault(esf, 1, recoverable);
    5f9a:	4622      	mov	r2, r4
    5f9c:	2101      	movs	r1, #1
    5f9e:	4630      	mov	r0, r6
    5fa0:	f7ff fe7c 	bl	5c9c <mem_manage_fault>
    5fa4:	4605      	mov	r5, r0
    5fa6:	e7d1      	b.n	5f4c <hard_fault+0xc0>
			reason = bus_fault(esf, 1, recoverable);
    5fa8:	4622      	mov	r2, r4
    5faa:	2101      	movs	r1, #1
    5fac:	4630      	mov	r0, r6
    5fae:	f7ff fd9d 	bl	5aec <bus_fault>
    5fb2:	4605      	mov	r5, r0
    5fb4:	e7ca      	b.n	5f4c <hard_fault+0xc0>
			__ASSERT(0,
    5fb6:	4c17      	ldr	r4, [pc, #92]	; (6014 <hard_fault+0x188>)
    5fb8:	f240 22c3 	movw	r2, #707	; 0x2c3
    5fbc:	4621      	mov	r1, r4
    5fbe:	4816      	ldr	r0, [pc, #88]	; (6018 <hard_fault+0x18c>)
    5fc0:	f00b f832 	bl	11028 <printk>
    5fc4:	f240 21c3 	movw	r1, #707	; 0x2c3
    5fc8:	4620      	mov	r0, r4
    5fca:	f00b f94f 	bl	1126c <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    5fce:	463d      	mov	r5, r7
    5fd0:	e7bc      	b.n	5f4c <hard_fault+0xc0>
		__ASSERT(0,
    5fd2:	4c10      	ldr	r4, [pc, #64]	; (6014 <hard_fault+0x188>)
    5fd4:	f240 22c7 	movw	r2, #711	; 0x2c7
    5fd8:	4621      	mov	r1, r4
    5fda:	480f      	ldr	r0, [pc, #60]	; (6018 <hard_fault+0x18c>)
    5fdc:	f00b f824 	bl	11028 <printk>
    5fe0:	f240 21c7 	movw	r1, #711	; 0x2c7
    5fe4:	4620      	mov	r0, r4
    5fe6:	f00b f941 	bl	1126c <assert_post_action>
	return reason;
    5fea:	e7af      	b.n	5f4c <hard_fault+0xc0>
    5fec:	000157ac 	.word	0x000157ac
    5ff0:	00015774 	.word	0x00015774
    5ff4:	000161f0 	.word	0x000161f0
    5ff8:	e000ed00 	.word	0xe000ed00
    5ffc:	0001623c 	.word	0x0001623c
    6000:	e000ed29 	.word	0xe000ed29
    6004:	e000ed2a 	.word	0xe000ed2a
    6008:	00016208 	.word	0x00016208
    600c:	0001622c 	.word	0x0001622c
    6010:	0001625c 	.word	0x0001625c
    6014:	000161b4 	.word	0x000161b4
    6018:	00015984 	.word	0x00015984

0000601c <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    601c:	b508      	push	{r3, lr}
    601e:	460a      	mov	r2, r1
    6020:	480b      	ldr	r0, [pc, #44]	; (6050 <reserved_exception+0x34>)
    6022:	4b0c      	ldr	r3, [pc, #48]	; (6054 <reserved_exception+0x38>)
    6024:	1ac0      	subs	r0, r0, r3
    6026:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    6028:	f04f 0300 	mov.w	r3, #0
    602c:	2101      	movs	r1, #1
    602e:	f361 0302 	bfi	r3, r1, #0, #3
    6032:	f36f 03c5 	bfc	r3, #3, #3
    6036:	f360 138f 	bfi	r3, r0, #6, #10
    603a:	2a0f      	cmp	r2, #15
    603c:	dc05      	bgt.n	604a <reserved_exception+0x2e>
    603e:	4906      	ldr	r1, [pc, #24]	; (6058 <reserved_exception+0x3c>)
    6040:	3a10      	subs	r2, #16
    6042:	4806      	ldr	r0, [pc, #24]	; (605c <reserved_exception+0x40>)
    6044:	f7fe fb6a 	bl	471c <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    6048:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
    604a:	4905      	ldr	r1, [pc, #20]	; (6060 <reserved_exception+0x44>)
    604c:	e7f8      	b.n	6040 <reserved_exception+0x24>
    604e:	bf00      	nop
    6050:	000157ac 	.word	0x000157ac
    6054:	00015774 	.word	0x00015774
    6058:	00016278 	.word	0x00016278
    605c:	000162ac 	.word	0x000162ac
    6060:	00016290 	.word	0x00016290

00006064 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    6064:	b5f0      	push	{r4, r5, r6, r7, lr}
    6066:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6068:	4b35      	ldr	r3, [pc, #212]	; (6140 <z_arm_fault+0xdc>)
    606a:	685d      	ldr	r5, [r3, #4]
    606c:	f3c5 0508 	ubfx	r5, r5, #0, #9
    6070:	2300      	movs	r3, #0
    6072:	f383 8811 	msr	BASEPRI, r3
    6076:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    607a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    607e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    6082:	d12b      	bne.n	60dc <z_arm_fault+0x78>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    6084:	f002 030c 	and.w	r3, r2, #12
    6088:	2b08      	cmp	r3, #8
    608a:	d011      	beq.n	60b0 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    608c:	f012 0f08 	tst.w	r2, #8
    6090:	d021      	beq.n	60d6 <z_arm_fault+0x72>
			ptr_esf =  (z_arch_esf_t *)psp;
    6092:	460c      	mov	r4, r1
	*nested_exc = false;
    6094:	2700      	movs	r7, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    6096:	b324      	cbz	r4, 60e2 <z_arm_fault+0x7e>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    6098:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    609c:	4629      	mov	r1, r5
    609e:	4620      	mov	r0, r4
    60a0:	f00b fcd3 	bl	11a4a <fault_handle>
    60a4:	4606      	mov	r6, r0
	if (recoverable) {
    60a6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    60aa:	b33b      	cbz	r3, 60fc <z_arm_fault+0x98>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    60ac:	b00b      	add	sp, #44	; 0x2c
    60ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60b0:	4b24      	ldr	r3, [pc, #144]	; (6144 <z_arm_fault+0xe0>)
    60b2:	4a25      	ldr	r2, [pc, #148]	; (6148 <z_arm_fault+0xe4>)
    60b4:	1a9b      	subs	r3, r3, r2
    60b6:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    60b8:	f04f 0100 	mov.w	r1, #0
    60bc:	2201      	movs	r2, #1
    60be:	f362 0102 	bfi	r1, r2, #0, #3
    60c2:	f36f 01c5 	bfc	r1, #3, #3
    60c6:	f363 118f 	bfi	r1, r3, #6, #10
    60ca:	4820      	ldr	r0, [pc, #128]	; (614c <z_arm_fault+0xe8>)
    60cc:	f7fe fbc2 	bl	4854 <log_0>
	*nested_exc = false;
    60d0:	2700      	movs	r7, #0
		return NULL;
    60d2:	463c      	mov	r4, r7
    60d4:	e7df      	b.n	6096 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    60d6:	4604      	mov	r4, r0
			*nested_exc = true;
    60d8:	2701      	movs	r7, #1
    60da:	e7dc      	b.n	6096 <z_arm_fault+0x32>
	*nested_exc = false;
    60dc:	2700      	movs	r7, #0
		return NULL;
    60de:	463c      	mov	r4, r7
    60e0:	e7d9      	b.n	6096 <z_arm_fault+0x32>
	__ASSERT(esf != NULL,
    60e2:	4e1b      	ldr	r6, [pc, #108]	; (6150 <z_arm_fault+0xec>)
    60e4:	f240 32f2 	movw	r2, #1010	; 0x3f2
    60e8:	4631      	mov	r1, r6
    60ea:	481a      	ldr	r0, [pc, #104]	; (6154 <z_arm_fault+0xf0>)
    60ec:	f00a ff9c 	bl	11028 <printk>
    60f0:	f240 31f2 	movw	r1, #1010	; 0x3f2
    60f4:	4630      	mov	r0, r6
    60f6:	f00b f8b9 	bl	1126c <assert_post_action>
    60fa:	e7cd      	b.n	6098 <z_arm_fault+0x34>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    60fc:	ad01      	add	r5, sp, #4
    60fe:	6820      	ldr	r0, [r4, #0]
    6100:	6861      	ldr	r1, [r4, #4]
    6102:	68a2      	ldr	r2, [r4, #8]
    6104:	68e3      	ldr	r3, [r4, #12]
    6106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    6108:	6920      	ldr	r0, [r4, #16]
    610a:	6961      	ldr	r1, [r4, #20]
    610c:	69a2      	ldr	r2, [r4, #24]
    610e:	69e3      	ldr	r3, [r4, #28]
    6110:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	if (nested_exc) {
    6112:	b14f      	cbz	r7, 6128 <z_arm_fault+0xc4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    6114:	9b08      	ldr	r3, [sp, #32]
    6116:	f3c3 0208 	ubfx	r2, r3, #0, #9
    611a:	b95a      	cbnz	r2, 6134 <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    611c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    6120:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    6124:	9308      	str	r3, [sp, #32]
    6126:	e005      	b.n	6134 <z_arm_fault+0xd0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6128:	9b08      	ldr	r3, [sp, #32]
    612a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    612e:	f023 0301 	bic.w	r3, r3, #1
    6132:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    6134:	a901      	add	r1, sp, #4
    6136:	4630      	mov	r0, r6
    6138:	f00b fc67 	bl	11a0a <z_arm_fatal_error>
    613c:	e7b6      	b.n	60ac <z_arm_fault+0x48>
    613e:	bf00      	nop
    6140:	e000ed00 	.word	0xe000ed00
    6144:	000157ac 	.word	0x000157ac
    6148:	00015774 	.word	0x00015774
    614c:	000162c0 	.word	0x000162c0
    6150:	000161b4 	.word	0x000161b4
    6154:	00015984 	.word	0x00015984

00006158 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    6158:	4a02      	ldr	r2, [pc, #8]	; (6164 <z_arm_fault_init+0xc>)
    615a:	6953      	ldr	r3, [r2, #20]
    615c:	f043 0310 	orr.w	r3, r3, #16
    6160:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    6162:	4770      	bx	lr
    6164:	e000ed00 	.word	0xe000ed00

00006168 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    6168:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    616c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    6170:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    6172:	4672      	mov	r2, lr
	bl z_arm_fault
    6174:	f7ff ff76 	bl	6064 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    6178:	bd01      	pop	{r0, pc}
    617a:	bf00      	nop

0000617c <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    617c:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    617e:	e006      	b.n	618e <z_arm_interrupt_init+0x12>
    6180:	f002 010f 	and.w	r1, r2, #15
    6184:	4b09      	ldr	r3, [pc, #36]	; (61ac <z_arm_interrupt_init+0x30>)
    6186:	440b      	add	r3, r1
    6188:	2120      	movs	r1, #32
    618a:	7619      	strb	r1, [r3, #24]
    618c:	3201      	adds	r2, #1
    618e:	2a26      	cmp	r2, #38	; 0x26
    6190:	dc0a      	bgt.n	61a8 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    6192:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    6194:	2b00      	cmp	r3, #0
    6196:	dbf3      	blt.n	6180 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6198:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    619c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    61a0:	2120      	movs	r1, #32
    61a2:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    61a6:	e7f1      	b.n	618c <z_arm_interrupt_init+0x10>
	}
}
    61a8:	4770      	bx	lr
    61aa:	bf00      	nop
    61ac:	e000ecfc 	.word	0xe000ecfc

000061b0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    61b0:	2000      	movs	r0, #0
    msr CONTROL, r0
    61b2:	f380 8814 	msr	CONTROL, r0
    isb
    61b6:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    61ba:	f00f f9c1 	bl	15540 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    61be:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    61c0:	490d      	ldr	r1, [pc, #52]	; (61f8 <__start+0x48>)
    str r0, [r1]
    61c2:	6008      	str	r0, [r1, #0]
    dsb
    61c4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    61c8:	480c      	ldr	r0, [pc, #48]	; (61fc <__start+0x4c>)
    msr msp, r0
    61ca:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    61ce:	f000 f829 	bl	6224 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    61d2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    61d4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    61d8:	4809      	ldr	r0, [pc, #36]	; (6200 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    61da:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    61de:	1840      	adds	r0, r0, r1
    msr PSP, r0
    61e0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    61e4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    61e8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    61ea:	4308      	orrs	r0, r1
    msr CONTROL, r0
    61ec:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    61f0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    61f4:	f7ff faa6 	bl	5744 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    61f8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    61fc:	200029a0 	.word	0x200029a0
    ldr r0, =z_interrupt_stacks
    6200:	20002b20 	.word	0x20002b20

00006204 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    6204:	4b06      	ldr	r3, [pc, #24]	; (6220 <z_arm_clear_arm_mpu_config+0x1c>)
    6206:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    6208:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    620c:	2300      	movs	r3, #0
    620e:	4283      	cmp	r3, r0
    6210:	da05      	bge.n	621e <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    6212:	4a03      	ldr	r2, [pc, #12]	; (6220 <z_arm_clear_arm_mpu_config+0x1c>)
    6214:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    6216:	2100      	movs	r1, #0
    6218:	6111      	str	r1, [r2, #16]
    621a:	3301      	adds	r3, #1
    621c:	e7f7      	b.n	620e <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    621e:	4770      	bx	lr
    6220:	e000ed90 	.word	0xe000ed90

00006224 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    6224:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    6226:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    6228:	2400      	movs	r4, #0
    622a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    622e:	f7ff ffe9 	bl	6204 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    6232:	4623      	mov	r3, r4
    6234:	e008      	b.n	6248 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    6236:	f103 0120 	add.w	r1, r3, #32
    623a:	4a0e      	ldr	r2, [pc, #56]	; (6274 <z_arm_init_arch_hw_at_boot+0x50>)
    623c:	f04f 30ff 	mov.w	r0, #4294967295
    6240:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    6244:	3301      	adds	r3, #1
    6246:	b2db      	uxtb	r3, r3
    6248:	2b07      	cmp	r3, #7
    624a:	d9f4      	bls.n	6236 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    624c:	2300      	movs	r3, #0
    624e:	e008      	b.n	6262 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    6250:	f103 0160 	add.w	r1, r3, #96	; 0x60
    6254:	4a07      	ldr	r2, [pc, #28]	; (6274 <z_arm_init_arch_hw_at_boot+0x50>)
    6256:	f04f 30ff 	mov.w	r0, #4294967295
    625a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    625e:	3301      	adds	r3, #1
    6260:	b2db      	uxtb	r3, r3
    6262:	2b07      	cmp	r3, #7
    6264:	d9f4      	bls.n	6250 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    6266:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    6268:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    626c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    6270:	bd10      	pop	{r4, pc}
    6272:	bf00      	nop
    6274:	e000e100 	.word	0xe000e100

00006278 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    6278:	b508      	push	{r3, lr}
	if (_current == thread) {
    627a:	4b08      	ldr	r3, [pc, #32]	; (629c <z_impl_k_thread_abort+0x24>)
    627c:	689b      	ldr	r3, [r3, #8]
    627e:	4283      	cmp	r3, r0
    6280:	d002      	beq.n	6288 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    6282:	f009 fbbf 	bl	fa04 <z_thread_abort>
}
    6286:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6288:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    628c:	2b00      	cmp	r3, #0
    628e:	d0f8      	beq.n	6282 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6290:	4a03      	ldr	r2, [pc, #12]	; (62a0 <z_impl_k_thread_abort+0x28>)
    6292:	6853      	ldr	r3, [r2, #4]
    6294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    6298:	6053      	str	r3, [r2, #4]
    629a:	e7f2      	b.n	6282 <z_impl_k_thread_abort+0xa>
    629c:	200015f8 	.word	0x200015f8
    62a0:	e000ed00 	.word	0xe000ed00

000062a4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    62a4:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    62a6:	4b03      	ldr	r3, [pc, #12]	; (62b4 <z_arm_configure_static_mpu_regions+0x10>)
    62a8:	4a03      	ldr	r2, [pc, #12]	; (62b8 <z_arm_configure_static_mpu_regions+0x14>)
    62aa:	2101      	movs	r1, #1
    62ac:	4803      	ldr	r0, [pc, #12]	; (62bc <z_arm_configure_static_mpu_regions+0x18>)
    62ae:	f000 f8bf 	bl	6430 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    62b2:	bd08      	pop	{r3, pc}
    62b4:	20010000 	.word	0x20010000
    62b8:	20000000 	.word	0x20000000
    62bc:	000162f0 	.word	0x000162f0

000062c0 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    62c0:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    62c2:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    62c6:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    62c8:	4804      	ldr	r0, [pc, #16]	; (62dc <z_arm_configure_dynamic_mpu_regions+0x1c>)
    62ca:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    62cc:	2320      	movs	r3, #32
    62ce:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    62d0:	4b03      	ldr	r3, [pc, #12]	; (62e0 <z_arm_configure_dynamic_mpu_regions+0x20>)
    62d2:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    62d4:	2101      	movs	r1, #1
    62d6:	f000 f8c3 	bl	6460 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    62da:	bd08      	pop	{r3, pc}
    62dc:	20000b80 	.word	0x20000b80
    62e0:	150b0000 	.word	0x150b0000

000062e4 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    62e4:	4a06      	ldr	r2, [pc, #24]	; (6300 <region_init+0x1c>)
    62e6:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    62e8:	680b      	ldr	r3, [r1, #0]
    62ea:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    62ee:	4303      	orrs	r3, r0
    62f0:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    62f4:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    62f6:	688b      	ldr	r3, [r1, #8]
    62f8:	f043 0301 	orr.w	r3, r3, #1
    62fc:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    62fe:	4770      	bx	lr
    6300:	e000ed90 	.word	0xe000ed90

00006304 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    6304:	b510      	push	{r4, lr}
    6306:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    6308:	2807      	cmp	r0, #7
    630a:	d803      	bhi.n	6314 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    630c:	f7ff ffea 	bl	62e4 <region_init>

	return index;
    6310:	4620      	mov	r0, r4
}
    6312:	bd10      	pop	{r4, pc}
    6314:	4b09      	ldr	r3, [pc, #36]	; (633c <region_allocate_and_init+0x38>)
    6316:	4a0a      	ldr	r2, [pc, #40]	; (6340 <region_allocate_and_init+0x3c>)
    6318:	1a9b      	subs	r3, r3, r2
    631a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    631c:	f04f 0200 	mov.w	r2, #0
    6320:	2101      	movs	r1, #1
    6322:	f361 0202 	bfi	r2, r1, #0, #3
    6326:	f36f 02c5 	bfc	r2, #3, #3
    632a:	f363 128f 	bfi	r2, r3, #6, #10
    632e:	4601      	mov	r1, r0
    6330:	4804      	ldr	r0, [pc, #16]	; (6344 <region_allocate_and_init+0x40>)
    6332:	f7fe f9bd 	bl	46b0 <log_1>
		return -EINVAL;
    6336:	f06f 0015 	mvn.w	r0, #21
    633a:	e7ea      	b.n	6312 <region_allocate_and_init+0xe>
    633c:	000157a4 	.word	0x000157a4
    6340:	00015774 	.word	0x00015774
    6344:	000162fc 	.word	0x000162fc

00006348 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    6348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    634c:	4680      	mov	r8, r0
    634e:	460f      	mov	r7, r1
    6350:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
    6352:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    6354:	2400      	movs	r4, #0
    6356:	e009      	b.n	636c <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    6358:	4629      	mov	r1, r5
    635a:	b2f0      	uxtb	r0, r6
    635c:	f00b fbab 	bl	11ab6 <mpu_configure_region>
    6360:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    6362:	f110 0f16 	cmn.w	r0, #22
    6366:	d025      	beq.n	63b4 <mpu_configure_regions+0x6c>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    6368:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    636a:	3401      	adds	r4, #1
    636c:	42bc      	cmp	r4, r7
    636e:	da21      	bge.n	63b4 <mpu_configure_regions+0x6c>
		if (regions[i].size == 0U) {
    6370:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    6374:	eb08 0585 	add.w	r5, r8, r5, lsl #2
    6378:	686a      	ldr	r2, [r5, #4]
    637a:	2a00      	cmp	r2, #0
    637c:	d0f5      	beq.n	636a <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    637e:	f1ba 0f00 	cmp.w	sl, #0
    6382:	d0e9      	beq.n	6358 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    6384:	4628      	mov	r0, r5
    6386:	f00b fb85 	bl	11a94 <mpu_partition_is_valid>
		if (do_sanity_check &&
    638a:	2800      	cmp	r0, #0
    638c:	d1e4      	bne.n	6358 <mpu_configure_regions+0x10>
    638e:	4b0b      	ldr	r3, [pc, #44]	; (63bc <mpu_configure_regions+0x74>)
    6390:	4a0b      	ldr	r2, [pc, #44]	; (63c0 <mpu_configure_regions+0x78>)
    6392:	1a9b      	subs	r3, r3, r2
    6394:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Partition %u: sanity check failed.", i);
    6396:	f04f 0200 	mov.w	r2, #0
    639a:	2101      	movs	r1, #1
    639c:	f361 0202 	bfi	r2, r1, #0, #3
    63a0:	f36f 02c5 	bfc	r2, #3, #3
    63a4:	f363 128f 	bfi	r2, r3, #6, #10
    63a8:	4621      	mov	r1, r4
    63aa:	4806      	ldr	r0, [pc, #24]	; (63c4 <mpu_configure_regions+0x7c>)
    63ac:	f7fe f980 	bl	46b0 <log_1>
			return -EINVAL;
    63b0:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    63b4:	4630      	mov	r0, r6
    63b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    63ba:	bf00      	nop
    63bc:	000157a4 	.word	0x000157a4
    63c0:	00015774 	.word	0x00015774
    63c4:	00016324 	.word	0x00016324

000063c8 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    63c8:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    63ca:	4c03      	ldr	r4, [pc, #12]	; (63d8 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    63cc:	2301      	movs	r3, #1
    63ce:	7822      	ldrb	r2, [r4, #0]
    63d0:	f7ff ffba 	bl	6348 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    63d4:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    63d6:	bd10      	pop	{r4, pc}
    63d8:	2000165a 	.word	0x2000165a

000063dc <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    63dc:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    63de:	2300      	movs	r3, #0
    63e0:	4a08      	ldr	r2, [pc, #32]	; (6404 <mpu_configure_dynamic_mpu_regions+0x28>)
    63e2:	7812      	ldrb	r2, [r2, #0]
    63e4:	f7ff ffb0 	bl	6348 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    63e8:	f110 0f16 	cmn.w	r0, #22
    63ec:	d008      	beq.n	6400 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    63ee:	4603      	mov	r3, r0
    63f0:	2b07      	cmp	r3, #7
    63f2:	dc05      	bgt.n	6400 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    63f4:	4a04      	ldr	r2, [pc, #16]	; (6408 <mpu_configure_dynamic_mpu_regions+0x2c>)
    63f6:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    63f8:	2100      	movs	r1, #0
    63fa:	6111      	str	r1, [r2, #16]
    63fc:	3301      	adds	r3, #1
    63fe:	e7f7      	b.n	63f0 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    6400:	bd08      	pop	{r3, pc}
    6402:	bf00      	nop
    6404:	2000165a 	.word	0x2000165a
    6408:	e000ed90 	.word	0xe000ed90

0000640c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    640c:	4b03      	ldr	r3, [pc, #12]	; (641c <arm_core_mpu_enable+0x10>)
    640e:	2205      	movs	r2, #5
    6410:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    6412:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6416:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    641a:	4770      	bx	lr
    641c:	e000ed90 	.word	0xe000ed90

00006420 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    6420:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    6424:	4b01      	ldr	r3, [pc, #4]	; (642c <arm_core_mpu_disable+0xc>)
    6426:	2200      	movs	r2, #0
    6428:	605a      	str	r2, [r3, #4]
}
    642a:	4770      	bx	lr
    642c:	e000ed90 	.word	0xe000ed90

00006430 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    6430:	b510      	push	{r4, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    6432:	f7ff ffc9 	bl	63c8 <mpu_configure_static_mpu_regions>
    6436:	f110 0f16 	cmn.w	r0, #22
    643a:	d000      	beq.n	643e <arm_core_mpu_configure_static_mpu_regions+0xe>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    643c:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    643e:	4c06      	ldr	r4, [pc, #24]	; (6458 <arm_core_mpu_configure_static_mpu_regions+0x28>)
    6440:	f240 1211 	movw	r2, #273	; 0x111
    6444:	4621      	mov	r1, r4
    6446:	4805      	ldr	r0, [pc, #20]	; (645c <arm_core_mpu_configure_static_mpu_regions+0x2c>)
    6448:	f00a fdee 	bl	11028 <printk>
    644c:	f240 1111 	movw	r1, #273	; 0x111
    6450:	4620      	mov	r0, r4
    6452:	f00a ff0b 	bl	1126c <assert_post_action>
}
    6456:	e7f1      	b.n	643c <arm_core_mpu_configure_static_mpu_regions+0xc>
    6458:	00016348 	.word	0x00016348
    645c:	00015984 	.word	0x00015984

00006460 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    6460:	b510      	push	{r4, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    6462:	f7ff ffbb 	bl	63dc <mpu_configure_dynamic_mpu_regions>
    6466:	f110 0f16 	cmn.w	r0, #22
    646a:	d000      	beq.n	646e <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    646c:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    646e:	4c06      	ldr	r4, [pc, #24]	; (6488 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    6470:	f44f 7298 	mov.w	r2, #304	; 0x130
    6474:	4621      	mov	r1, r4
    6476:	4805      	ldr	r0, [pc, #20]	; (648c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
    6478:	f00a fdd6 	bl	11028 <printk>
    647c:	f44f 7198 	mov.w	r1, #304	; 0x130
    6480:	4620      	mov	r0, r4
    6482:	f00a fef3 	bl	1126c <assert_post_action>
}
    6486:	e7f1      	b.n	646c <arm_core_mpu_configure_dynamic_mpu_regions+0xc>
    6488:	00016348 	.word	0x00016348
    648c:	00015984 	.word	0x00015984

00006490 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    6490:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    6492:	4b1e      	ldr	r3, [pc, #120]	; (650c <z_arm_mpu_init+0x7c>)
    6494:	681d      	ldr	r5, [r3, #0]
    6496:	2d08      	cmp	r5, #8
    6498:	d803      	bhi.n	64a2 <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    649a:	f7ff ffc1 	bl	6420 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    649e:	2400      	movs	r4, #0
    64a0:	e018      	b.n	64d4 <z_arm_mpu_init+0x44>
		__ASSERT(0,
    64a2:	4c1b      	ldr	r4, [pc, #108]	; (6510 <z_arm_mpu_init+0x80>)
    64a4:	f44f 72a4 	mov.w	r2, #328	; 0x148
    64a8:	4621      	mov	r1, r4
    64aa:	481a      	ldr	r0, [pc, #104]	; (6514 <z_arm_mpu_init+0x84>)
    64ac:	f00a fdbc 	bl	11028 <printk>
    64b0:	f44f 71a4 	mov.w	r1, #328	; 0x148
    64b4:	4620      	mov	r0, r4
    64b6:	f00a fed9 	bl	1126c <assert_post_action>
		return -1;
    64ba:	f04f 30ff 	mov.w	r0, #4294967295
    64be:	e016      	b.n	64ee <z_arm_mpu_init+0x5e>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    64c0:	4b12      	ldr	r3, [pc, #72]	; (650c <z_arm_mpu_init+0x7c>)
    64c2:	6859      	ldr	r1, [r3, #4]
    64c4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    64c8:	0093      	lsls	r3, r2, #2
    64ca:	4419      	add	r1, r3
    64cc:	4620      	mov	r0, r4
    64ce:	f7ff ff09 	bl	62e4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    64d2:	3401      	adds	r4, #1
    64d4:	42a5      	cmp	r5, r4
    64d6:	d8f3      	bhi.n	64c0 <z_arm_mpu_init+0x30>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    64d8:	4b0f      	ldr	r3, [pc, #60]	; (6518 <z_arm_mpu_init+0x88>)
    64da:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    64dc:	f7ff ff96 	bl	640c <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
    64e0:	4b0e      	ldr	r3, [pc, #56]	; (651c <z_arm_mpu_init+0x8c>)
    64e2:	681b      	ldr	r3, [r3, #0]
    64e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
    64e8:	2b08      	cmp	r3, #8
    64ea:	d101      	bne.n	64f0 <z_arm_mpu_init+0x60>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    64ec:	2000      	movs	r0, #0
}
    64ee:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
    64f0:	4c07      	ldr	r4, [pc, #28]	; (6510 <z_arm_mpu_init+0x80>)
    64f2:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
    64f6:	4621      	mov	r1, r4
    64f8:	4806      	ldr	r0, [pc, #24]	; (6514 <z_arm_mpu_init+0x84>)
    64fa:	f00a fd95 	bl	11028 <printk>
    64fe:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    6502:	4620      	mov	r0, r4
    6504:	f00a feb2 	bl	1126c <assert_post_action>
	return 0;
    6508:	2000      	movs	r0, #0
    650a:	e7f0      	b.n	64ee <z_arm_mpu_init+0x5e>
    650c:	000163c0 	.word	0x000163c0
    6510:	00016348 	.word	0x00016348
    6514:	00015984 	.word	0x00015984
    6518:	2000165a 	.word	0x2000165a
    651c:	e000ed90 	.word	0xe000ed90

00006520 <malloc_prepare>:

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    6520:	4b0b      	ldr	r3, [pc, #44]	; (6550 <malloc_prepare+0x30>)
    6522:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    6526:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    652a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    652e:	d301      	bcc.n	6534 <malloc_prepare+0x14>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
    6530:	2000      	movs	r0, #0
    6532:	4770      	bx	lr
{
    6534:	b510      	push	{r4, lr}
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    6536:	4c07      	ldr	r4, [pc, #28]	; (6554 <malloc_prepare+0x34>)
    6538:	2281      	movs	r2, #129	; 0x81
    653a:	4621      	mov	r1, r4
    653c:	4806      	ldr	r0, [pc, #24]	; (6558 <malloc_prepare+0x38>)
    653e:	f00a fd73 	bl	11028 <printk>
    6542:	2181      	movs	r1, #129	; 0x81
    6544:	4620      	mov	r0, r4
    6546:	f00a fe91 	bl	1126c <assert_post_action>
}
    654a:	2000      	movs	r0, #0
    654c:	bd10      	pop	{r4, pc}
    654e:	bf00      	nop
    6550:	20003a60 	.word	0x20003a60
    6554:	00016380 	.word	0x00016380
    6558:	00015984 	.word	0x00015984

0000655c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    655c:	4b01      	ldr	r3, [pc, #4]	; (6564 <__stdout_hook_install+0x8>)
    655e:	6018      	str	r0, [r3, #0]
}
    6560:	4770      	bx	lr
    6562:	bf00      	nop
    6564:	2000004c 	.word	0x2000004c

00006568 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    6568:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    656a:	4b08      	ldr	r3, [pc, #32]	; (658c <_sbrk+0x24>)
    656c:	6819      	ldr	r1, [r3, #0]
    656e:	4b08      	ldr	r3, [pc, #32]	; (6590 <_sbrk+0x28>)
    6570:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    6572:	440a      	add	r2, r1
    6574:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    6578:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    657c:	429a      	cmp	r2, r3
    657e:	d202      	bcs.n	6586 <_sbrk+0x1e>
		heap_sz += count;
    6580:	4b02      	ldr	r3, [pc, #8]	; (658c <_sbrk+0x24>)
    6582:	601a      	str	r2, [r3, #0]
		ret = ptr;
    6584:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    6586:	f04f 30ff 	mov.w	r0, #4294967295
	}

	return ret;
}
    658a:	4770      	bx	lr
    658c:	20000b8c 	.word	0x20000b8c
    6590:	20003a60 	.word	0x20003a60

00006594 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
    6594:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
    6596:	4604      	mov	r4, r0
    6598:	b138      	cbz	r0, 65aa <__retarget_lock_acquire_recursive+0x16>
	return z_impl_k_mutex_lock(mutex, timeout);
    659a:	f04f 32ff 	mov.w	r2, #4294967295
    659e:	f04f 33ff 	mov.w	r3, #4294967295
    65a2:	4620      	mov	r0, r4
    65a4:	f007 ff2e 	bl	e404 <z_impl_k_mutex_lock>
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
    65a8:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
    65aa:	4d06      	ldr	r5, [pc, #24]	; (65c4 <__retarget_lock_acquire_recursive+0x30>)
    65ac:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    65b0:	4629      	mov	r1, r5
    65b2:	4805      	ldr	r0, [pc, #20]	; (65c8 <__retarget_lock_acquire_recursive+0x34>)
    65b4:	f00a fd38 	bl	11028 <printk>
    65b8:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    65bc:	4628      	mov	r0, r5
    65be:	f00a fe55 	bl	1126c <assert_post_action>
    65c2:	e7ea      	b.n	659a <__retarget_lock_acquire_recursive+0x6>
    65c4:	00016380 	.word	0x00016380
    65c8:	00015984 	.word	0x00015984

000065cc <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
    65cc:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
    65ce:	4604      	mov	r4, r0
    65d0:	b118      	cbz	r0, 65da <__retarget_lock_release_recursive+0xe>
	return z_impl_k_mutex_unlock(mutex);
    65d2:	4620      	mov	r0, r4
    65d4:	f008 f80c 	bl	e5f0 <z_impl_k_mutex_unlock>
	k_mutex_unlock((struct k_mutex *)lock);
}
    65d8:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
    65da:	4d06      	ldr	r5, [pc, #24]	; (65f4 <__retarget_lock_release_recursive+0x28>)
    65dc:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    65e0:	4629      	mov	r1, r5
    65e2:	4805      	ldr	r0, [pc, #20]	; (65f8 <__retarget_lock_release_recursive+0x2c>)
    65e4:	f00a fd20 	bl	11028 <printk>
    65e8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    65ec:	4628      	mov	r0, r5
    65ee:	f00a fe3d 	bl	1126c <assert_post_action>
    65f2:	e7ee      	b.n	65d2 <__retarget_lock_release_recursive+0x6>
    65f4:	00016380 	.word	0x00016380
    65f8:	00015984 	.word	0x00015984

000065fc <nordicsemi_nrf52_init>:
	__asm__ volatile(
    65fc:	f04f 0220 	mov.w	r2, #32
    6600:	f3ef 8311 	mrs	r3, BASEPRI
    6604:	f382 8812 	msr	BASEPRI_MAX, r2
    6608:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    660c:	4a04      	ldr	r2, [pc, #16]	; (6620 <nordicsemi_nrf52_init+0x24>)
    660e:	2101      	movs	r1, #1
    6610:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    6614:	f383 8811 	msr	BASEPRI, r3
    6618:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    661c:	2000      	movs	r0, #0
    661e:	4770      	bx	lr
    6620:	4001e000 	.word	0x4001e000

00006624 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    6624:	b2c0      	uxtb	r0, r0
    6626:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    662a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    662e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    6632:	4905      	ldr	r1, [pc, #20]	; (6648 <sys_arch_reboot+0x24>)
    6634:	68ca      	ldr	r2, [r1, #12]
    6636:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    663a:	4b04      	ldr	r3, [pc, #16]	; (664c <sys_arch_reboot+0x28>)
    663c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    663e:	60cb      	str	r3, [r1, #12]
    6640:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    6644:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    6646:	e7fd      	b.n	6644 <sys_arch_reboot+0x20>
    6648:	e000ed00 	.word	0xe000ed00
    664c:	05fa0004 	.word	0x05fa0004

00006650 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    6650:	b130      	cbz	r0, 6660 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    6652:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    6654:	0180      	lsls	r0, r0, #6
    6656:	4b03      	ldr	r3, [pc, #12]	; (6664 <arch_busy_wait+0x14>)
    6658:	f043 0301 	orr.w	r3, r3, #1
    665c:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    665e:	bd08      	pop	{r3, pc}
    6660:	4770      	bx	lr
    6662:	bf00      	nop
    6664:	00015860 	.word	0x00015860

00006668 <registry_add>:
static int registry_add(int type,
			const struct fs_file_system_t *fstp)
{
	int rv = -ENOSPC;

	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
    6668:	2300      	movs	r3, #0
    666a:	2b01      	cmp	r3, #1
    666c:	d80e      	bhi.n	668c <registry_add+0x24>
		struct registry_entry *ep = &registry[i];

		if (ep->fstp == NULL) {
    666e:	4a09      	ldr	r2, [pc, #36]	; (6694 <registry_add+0x2c>)
    6670:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    6674:	6852      	ldr	r2, [r2, #4]
    6676:	b10a      	cbz	r2, 667c <registry_add+0x14>
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
    6678:	3301      	adds	r3, #1
    667a:	e7f6      	b.n	666a <registry_add+0x2>
			ep->type = type;
    667c:	4a05      	ldr	r2, [pc, #20]	; (6694 <registry_add+0x2c>)
    667e:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
			ep->fstp = fstp;
    6682:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6686:	6059      	str	r1, [r3, #4]
			rv = 0;
    6688:	2000      	movs	r0, #0
			break;
    668a:	4770      	bx	lr
	int rv = -ENOSPC;
    668c:	f06f 001b 	mvn.w	r0, #27
		}
	}

	return rv;
}
    6690:	4770      	bx	lr
    6692:	bf00      	nop
    6694:	20000bac 	.word	0x20000bac

00006698 <registry_find>:

static struct registry_entry *registry_find(int type)
{
    6698:	4601      	mov	r1, r0
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
    669a:	2300      	movs	r3, #0
    669c:	e000      	b.n	66a0 <registry_find+0x8>
    669e:	3301      	adds	r3, #1
    66a0:	2b01      	cmp	r3, #1
    66a2:	d80b      	bhi.n	66bc <registry_find+0x24>
		struct registry_entry *ep = &registry[i];
    66a4:	4806      	ldr	r0, [pc, #24]	; (66c0 <registry_find+0x28>)
    66a6:	eb00 00c3 	add.w	r0, r0, r3, lsl #3

		if ((ep->fstp != NULL) && (ep->type == type)) {
    66aa:	6842      	ldr	r2, [r0, #4]
    66ac:	2a00      	cmp	r2, #0
    66ae:	d0f6      	beq.n	669e <registry_find+0x6>
    66b0:	4a03      	ldr	r2, [pc, #12]	; (66c0 <registry_find+0x28>)
    66b2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    66b6:	428a      	cmp	r2, r1
    66b8:	d1f1      	bne.n	669e <registry_find+0x6>
    66ba:	e000      	b.n	66be <registry_find+0x26>
			return ep;
		}
	}
	return NULL;
    66bc:	2000      	movs	r0, #0
}
    66be:	4770      	bx	lr
    66c0:	20000bac 	.word	0x20000bac

000066c4 <fs_get_mnt_point>:
	return (ep != NULL) ? ep->fstp : NULL;
}

static int fs_get_mnt_point(struct fs_mount_t **mnt_pntp,
			    const char *name, size_t *match_len)
{
    66c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    66c8:	4683      	mov	fp, r0
    66ca:	460f      	mov	r7, r1
    66cc:	4692      	mov	sl, r2
	struct fs_mount_t *mnt_p = NULL, *itr;
	size_t longest_match = 0;
	size_t len, name_len = strlen(name);
    66ce:	4608      	mov	r0, r1
    66d0:	f7fa fe42 	bl	1358 <strlen>
    66d4:	4680      	mov	r8, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    66d6:	f04f 32ff 	mov.w	r2, #4294967295
    66da:	f04f 33ff 	mov.w	r3, #4294967295
    66de:	4820      	ldr	r0, [pc, #128]	; (6760 <fs_get_mnt_point+0x9c>)
    66e0:	f007 fe90 	bl	e404 <z_impl_k_mutex_lock>
	return list->head == list;
    66e4:	4b1f      	ldr	r3, [pc, #124]	; (6764 <fs_get_mnt_point+0xa0>)
    66e6:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    66e8:	429c      	cmp	r4, r3
    66ea:	d01d      	beq.n	6728 <fs_get_mnt_point+0x64>
	return (node == list->tail) ? NULL : node->next;
    66ec:	2600      	movs	r6, #0
    66ee:	46b1      	mov	r9, r6
    66f0:	e00c      	b.n	670c <fs_get_mnt_point+0x48>
		if ((len > 1) && (name[len] != '/') && (name[len] != '\0')) {
			continue;
		}

		/* Check for mount point match */
		if (strncmp(name, itr->mnt_point, len) == 0) {
    66f2:	462a      	mov	r2, r5
    66f4:	68e1      	ldr	r1, [r4, #12]
    66f6:	4638      	mov	r0, r7
    66f8:	f00e fad9 	bl	14cae <strncmp>
    66fc:	b908      	cbnz	r0, 6702 <fs_get_mnt_point+0x3e>
			mnt_p = itr;
			longest_match = len;
    66fe:	462e      	mov	r6, r5
			mnt_p = itr;
    6700:	46a1      	mov	r9, r4
    6702:	4b18      	ldr	r3, [pc, #96]	; (6764 <fs_get_mnt_point+0xa0>)
    6704:	685b      	ldr	r3, [r3, #4]
    6706:	429c      	cmp	r4, r3
    6708:	d010      	beq.n	672c <fs_get_mnt_point+0x68>
    670a:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
    670c:	b184      	cbz	r4, 6730 <fs_get_mnt_point+0x6c>
		len = itr->mountp_len;
    670e:	69a5      	ldr	r5, [r4, #24]
		if ((len < longest_match) || (len > name_len)) {
    6710:	42ae      	cmp	r6, r5
    6712:	d8f6      	bhi.n	6702 <fs_get_mnt_point+0x3e>
    6714:	45a8      	cmp	r8, r5
    6716:	d3f4      	bcc.n	6702 <fs_get_mnt_point+0x3e>
		if ((len > 1) && (name[len] != '/') && (name[len] != '\0')) {
    6718:	2d01      	cmp	r5, #1
    671a:	d9ea      	bls.n	66f2 <fs_get_mnt_point+0x2e>
    671c:	5d7b      	ldrb	r3, [r7, r5]
    671e:	2b2f      	cmp	r3, #47	; 0x2f
    6720:	d0e7      	beq.n	66f2 <fs_get_mnt_point+0x2e>
    6722:	2b00      	cmp	r3, #0
    6724:	d0e5      	beq.n	66f2 <fs_get_mnt_point+0x2e>
    6726:	e7ec      	b.n	6702 <fs_get_mnt_point+0x3e>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6728:	2400      	movs	r4, #0
    672a:	e7df      	b.n	66ec <fs_get_mnt_point+0x28>
	return (node == list->tail) ? NULL : node->next;
    672c:	2400      	movs	r4, #0
    672e:	e7ed      	b.n	670c <fs_get_mnt_point+0x48>
	return z_impl_k_mutex_unlock(mutex);
    6730:	480b      	ldr	r0, [pc, #44]	; (6760 <fs_get_mnt_point+0x9c>)
    6732:	f007 ff5d 	bl	e5f0 <z_impl_k_mutex_unlock>
		}
	}
	k_mutex_unlock(&mutex);

	if (mnt_p == NULL) {
    6736:	f1b9 0f00 	cmp.w	r9, #0
    673a:	d00b      	beq.n	6754 <fs_get_mnt_point+0x90>
		return -ENOENT;
	}

	*mnt_pntp = mnt_p;
    673c:	f8cb 9000 	str.w	r9, [fp]
	if (match_len)
    6740:	f1ba 0f00 	cmp.w	sl, #0
    6744:	d009      	beq.n	675a <fs_get_mnt_point+0x96>
		*match_len = mnt_p->mountp_len;
    6746:	f8d9 3018 	ldr.w	r3, [r9, #24]
    674a:	f8ca 3000 	str.w	r3, [sl]

	return 0;
    674e:	2000      	movs	r0, #0
}
    6750:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOENT;
    6754:	f06f 0001 	mvn.w	r0, #1
    6758:	e7fa      	b.n	6750 <fs_get_mnt_point+0x8c>
	return 0;
    675a:	2000      	movs	r0, #0
    675c:	e7f8      	b.n	6750 <fs_get_mnt_point+0x8c>
    675e:	bf00      	nop
    6760:	20000b98 	.word	0x20000b98
    6764:	20000b90 	.word	0x20000b90

00006768 <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
    6768:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
    676a:	4804      	ldr	r0, [pc, #16]	; (677c <fs_init+0x14>)
    676c:	f00e f8db 	bl	14926 <z_impl_k_mutex_init>
	list->head = (sys_dnode_t *)list;
    6770:	4b03      	ldr	r3, [pc, #12]	; (6780 <fs_init+0x18>)
    6772:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    6774:	605b      	str	r3, [r3, #4]
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
    6776:	2000      	movs	r0, #0
    6778:	bd08      	pop	{r3, pc}
    677a:	bf00      	nop
    677c:	20000b98 	.word	0x20000b98
    6780:	20000b90 	.word	0x20000b90

00006784 <fs_opendir>:
{
    6784:	b5f0      	push	{r4, r5, r6, r7, lr}
    6786:	b083      	sub	sp, #12
	if ((abs_path == NULL) ||
    6788:	2900      	cmp	r1, #0
    678a:	d02b      	beq.n	67e4 <fs_opendir+0x60>
    678c:	4604      	mov	r4, r0
    678e:	460e      	mov	r6, r1
			(strlen(abs_path) < 1) || (abs_path[0] != '/')) {
    6790:	4608      	mov	r0, r1
    6792:	f7fa fde1 	bl	1358 <strlen>
	if ((abs_path == NULL) ||
    6796:	b328      	cbz	r0, 67e4 <fs_opendir+0x60>
			(strlen(abs_path) < 1) || (abs_path[0] != '/')) {
    6798:	7833      	ldrb	r3, [r6, #0]
    679a:	2b2f      	cmp	r3, #47	; 0x2f
    679c:	d122      	bne.n	67e4 <fs_opendir+0x60>
	if (zdp->mp != NULL || zdp->dirp != NULL) {
    679e:	6863      	ldr	r3, [r4, #4]
    67a0:	2b00      	cmp	r3, #0
    67a2:	d16c      	bne.n	687e <fs_opendir+0xfa>
    67a4:	6827      	ldr	r7, [r4, #0]
    67a6:	2f00      	cmp	r7, #0
    67a8:	d16c      	bne.n	6884 <fs_opendir+0x100>
	if (strcmp(abs_path, "/") == 0) {
    67aa:	4939      	ldr	r1, [pc, #228]	; (6890 <fs_opendir+0x10c>)
    67ac:	4630      	mov	r0, r6
    67ae:	f7fa fdc9 	bl	1344 <strcmp>
    67b2:	4605      	mov	r5, r0
    67b4:	b348      	cbz	r0, 680a <fs_opendir+0x86>
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
    67b6:	2200      	movs	r2, #0
    67b8:	4631      	mov	r1, r6
    67ba:	a801      	add	r0, sp, #4
    67bc:	f7ff ff82 	bl	66c4 <fs_get_mnt_point>
	if (rc < 0) {
    67c0:	1e05      	subs	r5, r0, #0
    67c2:	db36      	blt.n	6832 <fs_opendir+0xae>
	CHECKIF(mp->fs->opendir == NULL) {
    67c4:	9b01      	ldr	r3, [sp, #4]
    67c6:	69da      	ldr	r2, [r3, #28]
    67c8:	6a12      	ldr	r2, [r2, #32]
    67ca:	2a00      	cmp	r2, #0
    67cc:	d05d      	beq.n	688a <fs_opendir+0x106>
	zdp->mp = mp;
    67ce:	6063      	str	r3, [r4, #4]
	rc = zdp->mp->fs->opendir(zdp, abs_path);
    67d0:	69db      	ldr	r3, [r3, #28]
    67d2:	6a1b      	ldr	r3, [r3, #32]
    67d4:	4631      	mov	r1, r6
    67d6:	4620      	mov	r0, r4
    67d8:	4798      	blx	r3
	if (rc < 0) {
    67da:	1e05      	subs	r5, r0, #0
    67dc:	db3a      	blt.n	6854 <fs_opendir+0xd0>
}
    67de:	4628      	mov	r0, r5
    67e0:	b003      	add	sp, #12
    67e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67e4:	4b2b      	ldr	r3, [pc, #172]	; (6894 <fs_opendir+0x110>)
    67e6:	4a2c      	ldr	r2, [pc, #176]	; (6898 <fs_opendir+0x114>)
    67e8:	1a9b      	subs	r3, r3, r2
    67ea:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid directory name!!");
    67ec:	f04f 0100 	mov.w	r1, #0
    67f0:	2201      	movs	r2, #1
    67f2:	f362 0102 	bfi	r1, r2, #0, #3
    67f6:	f36f 01c5 	bfc	r1, #3, #3
    67fa:	f363 118f 	bfi	r1, r3, #6, #10
    67fe:	4827      	ldr	r0, [pc, #156]	; (689c <fs_opendir+0x118>)
    6800:	f7fe f828 	bl	4854 <log_0>
		return -EINVAL;
    6804:	f06f 0515 	mvn.w	r5, #21
    6808:	e7e9      	b.n	67de <fs_opendir+0x5a>
	return z_impl_k_mutex_lock(mutex, timeout);
    680a:	f04f 32ff 	mov.w	r2, #4294967295
    680e:	f04f 33ff 	mov.w	r3, #4294967295
    6812:	4823      	ldr	r0, [pc, #140]	; (68a0 <fs_opendir+0x11c>)
    6814:	f007 fdf6 	bl	e404 <z_impl_k_mutex_lock>
		zdp->mp = NULL;
    6818:	2300      	movs	r3, #0
    681a:	6063      	str	r3, [r4, #4]
	return list->head == list;
    681c:	4a21      	ldr	r2, [pc, #132]	; (68a4 <fs_opendir+0x120>)
    681e:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6820:	4293      	cmp	r3, r2
    6822:	d004      	beq.n	682e <fs_opendir+0xaa>
		zdp->dirp = sys_dlist_peek_head(&fs_mnt_list);
    6824:	6023      	str	r3, [r4, #0]
	return z_impl_k_mutex_unlock(mutex);
    6826:	481e      	ldr	r0, [pc, #120]	; (68a0 <fs_opendir+0x11c>)
    6828:	f007 fee2 	bl	e5f0 <z_impl_k_mutex_unlock>
		return 0;
    682c:	e7d7      	b.n	67de <fs_opendir+0x5a>
    682e:	463b      	mov	r3, r7
    6830:	e7f8      	b.n	6824 <fs_opendir+0xa0>
    6832:	4b18      	ldr	r3, [pc, #96]	; (6894 <fs_opendir+0x110>)
    6834:	4a18      	ldr	r2, [pc, #96]	; (6898 <fs_opendir+0x114>)
    6836:	1a9b      	subs	r3, r3, r2
    6838:	08db      	lsrs	r3, r3, #3
		LOG_ERR("mount point not found!!");
    683a:	f04f 0100 	mov.w	r1, #0
    683e:	2201      	movs	r2, #1
    6840:	f362 0102 	bfi	r1, r2, #0, #3
    6844:	f36f 01c5 	bfc	r1, #3, #3
    6848:	f363 118f 	bfi	r1, r3, #6, #10
    684c:	4816      	ldr	r0, [pc, #88]	; (68a8 <fs_opendir+0x124>)
    684e:	f7fe f801 	bl	4854 <log_0>
		return rc;
    6852:	e7c4      	b.n	67de <fs_opendir+0x5a>
		zdp->mp = NULL;
    6854:	2100      	movs	r1, #0
    6856:	6061      	str	r1, [r4, #4]
		zdp->dirp = NULL;
    6858:	6021      	str	r1, [r4, #0]
    685a:	4b0e      	ldr	r3, [pc, #56]	; (6894 <fs_opendir+0x110>)
    685c:	4a0e      	ldr	r2, [pc, #56]	; (6898 <fs_opendir+0x114>)
    685e:	1a9b      	subs	r3, r3, r2
    6860:	08db      	lsrs	r3, r3, #3
		LOG_ERR("directory open error (%d)", rc);
    6862:	f04f 0200 	mov.w	r2, #0
    6866:	2001      	movs	r0, #1
    6868:	f360 0202 	bfi	r2, r0, #0, #3
    686c:	f361 02c5 	bfi	r2, r1, #3, #3
    6870:	f363 128f 	bfi	r2, r3, #6, #10
    6874:	4629      	mov	r1, r5
    6876:	480d      	ldr	r0, [pc, #52]	; (68ac <fs_opendir+0x128>)
    6878:	f7fd ff1a 	bl	46b0 <log_1>
    687c:	e7af      	b.n	67de <fs_opendir+0x5a>
		return -EBUSY;
    687e:	f06f 050f 	mvn.w	r5, #15
    6882:	e7ac      	b.n	67de <fs_opendir+0x5a>
    6884:	f06f 050f 	mvn.w	r5, #15
    6888:	e7a9      	b.n	67de <fs_opendir+0x5a>
		return -ENOTSUP;
    688a:	f06f 0585 	mvn.w	r5, #133	; 0x85
    688e:	e7a6      	b.n	67de <fs_opendir+0x5a>
    6890:	00016444 	.word	0x00016444
    6894:	00015794 	.word	0x00015794
    6898:	00015774 	.word	0x00015774
    689c:	00016428 	.word	0x00016428
    68a0:	20000b98 	.word	0x20000b98
    68a4:	20000b90 	.word	0x20000b90
    68a8:	000163f8 	.word	0x000163f8
    68ac:	00016448 	.word	0x00016448

000068b0 <fs_readdir>:
{
    68b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    68b2:	4606      	mov	r6, r0
    68b4:	460d      	mov	r5, r1
	if (zdp->mp) {
    68b6:	6847      	ldr	r7, [r0, #4]
    68b8:	2f00      	cmp	r7, #0
    68ba:	d033      	beq.n	6924 <fs_readdir+0x74>
		CHECKIF(zdp->mp->fs->readdir == NULL) {
    68bc:	69fb      	ldr	r3, [r7, #28]
    68be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    68c0:	2b00      	cmp	r3, #0
    68c2:	d06d      	beq.n	69a0 <fs_readdir+0xf0>
			rc = zdp->mp->fs->readdir(zdp, entry);
    68c4:	6873      	ldr	r3, [r6, #4]
    68c6:	69db      	ldr	r3, [r3, #28]
    68c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    68ca:	4629      	mov	r1, r5
    68cc:	4630      	mov	r0, r6
    68ce:	4798      	blx	r3
			if (rc < 0) {
    68d0:	1e04      	subs	r4, r0, #0
    68d2:	db11      	blt.n	68f8 <fs_readdir+0x48>
			if (entry->name[0] == 0) {
    68d4:	786b      	ldrb	r3, [r5, #1]
    68d6:	b17b      	cbz	r3, 68f8 <fs_readdir+0x48>
			if (entry->type != FS_DIR_ENTRY_DIR) {
    68d8:	782b      	ldrb	r3, [r5, #0]
    68da:	2b01      	cmp	r3, #1
    68dc:	d10c      	bne.n	68f8 <fs_readdir+0x48>
			if ((strcmp(entry->name, ".") != 0)
    68de:	1c6f      	adds	r7, r5, #1
    68e0:	4932      	ldr	r1, [pc, #200]	; (69ac <fs_readdir+0xfc>)
    68e2:	4638      	mov	r0, r7
    68e4:	f7fa fd2e 	bl	1344 <strcmp>
    68e8:	2800      	cmp	r0, #0
    68ea:	d0eb      	beq.n	68c4 <fs_readdir+0x14>
			    && (strcmp(entry->name, "..") != 0)) {
    68ec:	4930      	ldr	r1, [pc, #192]	; (69b0 <fs_readdir+0x100>)
    68ee:	4638      	mov	r0, r7
    68f0:	f7fa fd28 	bl	1344 <strcmp>
    68f4:	2800      	cmp	r0, #0
    68f6:	d0e5      	beq.n	68c4 <fs_readdir+0x14>
		if (rc < 0) {
    68f8:	2c00      	cmp	r4, #0
    68fa:	db01      	blt.n	6900 <fs_readdir+0x50>
}
    68fc:	4620      	mov	r0, r4
    68fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6900:	4b2c      	ldr	r3, [pc, #176]	; (69b4 <fs_readdir+0x104>)
    6902:	4a2d      	ldr	r2, [pc, #180]	; (69b8 <fs_readdir+0x108>)
    6904:	1a9b      	subs	r3, r3, r2
    6906:	08db      	lsrs	r3, r3, #3
			LOG_ERR("directory read error (%d)", rc);
    6908:	f04f 0200 	mov.w	r2, #0
    690c:	2101      	movs	r1, #1
    690e:	f361 0202 	bfi	r2, r1, #0, #3
    6912:	f36f 02c5 	bfc	r2, #3, #3
    6916:	f363 128f 	bfi	r2, r3, #6, #10
    691a:	4621      	mov	r1, r4
    691c:	4827      	ldr	r0, [pc, #156]	; (69bc <fs_readdir+0x10c>)
    691e:	f7fd fec7 	bl	46b0 <log_1>
		return rc;
    6922:	e7eb      	b.n	68fc <fs_readdir+0x4c>
	if (zdp->dirp == NULL) {
    6924:	6803      	ldr	r3, [r0, #0]
    6926:	b1a3      	cbz	r3, 6952 <fs_readdir+0xa2>
	return z_impl_k_mutex_lock(mutex, timeout);
    6928:	f04f 32ff 	mov.w	r2, #4294967295
    692c:	f04f 33ff 	mov.w	r3, #4294967295
    6930:	4823      	ldr	r0, [pc, #140]	; (69c0 <fs_readdir+0x110>)
    6932:	f007 fd67 	bl	e404 <z_impl_k_mutex_lock>
	return list->head == list;
    6936:	4b23      	ldr	r3, [pc, #140]	; (69c4 <fs_readdir+0x114>)
    6938:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    693a:	429c      	cmp	r4, r3
    693c:	d022      	beq.n	6984 <fs_readdir+0xd4>
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
    693e:	b31c      	cbz	r4, 6988 <fs_readdir+0xd8>
		if (node == zdp->dirp) {
    6940:	6833      	ldr	r3, [r6, #0]
    6942:	429c      	cmp	r4, r3
    6944:	d009      	beq.n	695a <fs_readdir+0xaa>
	return (node == list->tail) ? NULL : node->next;
    6946:	4b1f      	ldr	r3, [pc, #124]	; (69c4 <fs_readdir+0x114>)
    6948:	685b      	ldr	r3, [r3, #4]
    694a:	42a3      	cmp	r3, r4
    694c:	d020      	beq.n	6990 <fs_readdir+0xe0>
    694e:	6824      	ldr	r4, [r4, #0]
    6950:	e7f5      	b.n	693e <fs_readdir+0x8e>
		entry->name[0] = 0;
    6952:	2000      	movs	r0, #0
    6954:	7048      	strb	r0, [r1, #1]
		return 0;
    6956:	4604      	mov	r4, r0
    6958:	e7d0      	b.n	68fc <fs_readdir+0x4c>
			entry->type = FS_DIR_ENTRY_DIR;
    695a:	4628      	mov	r0, r5
    695c:	2301      	movs	r3, #1
    695e:	f800 3b01 	strb.w	r3, [r0], #1
			strncpy(entry->name, mnt->mnt_point + 1,
    6962:	68e1      	ldr	r1, [r4, #12]
    6964:	22ff      	movs	r2, #255	; 0xff
    6966:	4419      	add	r1, r3
    6968:	f00e f9b3 	bl	14cd2 <strncpy>
			entry->name[sizeof(entry->name) - 1] = 0;
    696c:	2300      	movs	r3, #0
    696e:	f885 3100 	strb.w	r3, [r5, #256]	; 0x100
			entry->size = 0;
    6972:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
    6976:	4b13      	ldr	r3, [pc, #76]	; (69c4 <fs_readdir+0x114>)
    6978:	685b      	ldr	r3, [r3, #4]
    697a:	42a3      	cmp	r3, r4
    697c:	d006      	beq.n	698c <fs_readdir+0xdc>
    697e:	6827      	ldr	r7, [r4, #0]
			found = true;
    6980:	2401      	movs	r4, #1
    6982:	e006      	b.n	6992 <fs_readdir+0xe2>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6984:	463c      	mov	r4, r7
    6986:	e7da      	b.n	693e <fs_readdir+0x8e>
	sys_dnode_t *node, *next = NULL;
    6988:	4627      	mov	r7, r4
    698a:	e002      	b.n	6992 <fs_readdir+0xe2>
			found = true;
    698c:	2401      	movs	r4, #1
    698e:	e000      	b.n	6992 <fs_readdir+0xe2>
	bool found = false;
    6990:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    6992:	480b      	ldr	r0, [pc, #44]	; (69c0 <fs_readdir+0x110>)
    6994:	f007 fe2c 	bl	e5f0 <z_impl_k_mutex_unlock>
	if (!found) {
    6998:	b12c      	cbz	r4, 69a6 <fs_readdir+0xf6>
	zdp->dirp = next;
    699a:	6037      	str	r7, [r6, #0]
	return 0;
    699c:	2400      	movs	r4, #0
    699e:	e7ad      	b.n	68fc <fs_readdir+0x4c>
			return  -ENOTSUP;
    69a0:	f06f 0485 	mvn.w	r4, #133	; 0x85
    69a4:	e7aa      	b.n	68fc <fs_readdir+0x4c>
		return -ENOENT;
    69a6:	f06f 0401 	mvn.w	r4, #1
    69aa:	e7a7      	b.n	68fc <fs_readdir+0x4c>
    69ac:	00016464 	.word	0x00016464
    69b0:	00016468 	.word	0x00016468
    69b4:	00015794 	.word	0x00015794
    69b8:	00015774 	.word	0x00015774
    69bc:	0001646c 	.word	0x0001646c
    69c0:	20000b98 	.word	0x20000b98
    69c4:	20000b90 	.word	0x20000b90

000069c8 <fs_closedir>:
{
    69c8:	b538      	push	{r3, r4, r5, lr}
    69ca:	4604      	mov	r4, r0
	if (zdp->mp == NULL) {
    69cc:	6843      	ldr	r3, [r0, #4]
    69ce:	b153      	cbz	r3, 69e6 <fs_closedir+0x1e>
	CHECKIF(zdp->mp->fs->closedir == NULL) {
    69d0:	69db      	ldr	r3, [r3, #28]
    69d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    69d4:	b1e3      	cbz	r3, 6a10 <fs_closedir+0x48>
	rc = zdp->mp->fs->closedir(zdp);
    69d6:	4798      	blx	r3
	if (rc < 0) {
    69d8:	1e05      	subs	r5, r0, #0
    69da:	db07      	blt.n	69ec <fs_closedir+0x24>
	zdp->mp = NULL;
    69dc:	2300      	movs	r3, #0
    69de:	6063      	str	r3, [r4, #4]
	zdp->dirp = NULL;
    69e0:	6023      	str	r3, [r4, #0]
}
    69e2:	4628      	mov	r0, r5
    69e4:	bd38      	pop	{r3, r4, r5, pc}
		zdp->dirp = NULL;
    69e6:	2500      	movs	r5, #0
    69e8:	6005      	str	r5, [r0, #0]
		return 0;
    69ea:	e7fa      	b.n	69e2 <fs_closedir+0x1a>
    69ec:	4b0a      	ldr	r3, [pc, #40]	; (6a18 <fs_closedir+0x50>)
    69ee:	4a0b      	ldr	r2, [pc, #44]	; (6a1c <fs_closedir+0x54>)
    69f0:	1a9b      	subs	r3, r3, r2
    69f2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("directory close error (%d)", rc);
    69f4:	f04f 0200 	mov.w	r2, #0
    69f8:	2101      	movs	r1, #1
    69fa:	f361 0202 	bfi	r2, r1, #0, #3
    69fe:	f36f 02c5 	bfc	r2, #3, #3
    6a02:	f363 128f 	bfi	r2, r3, #6, #10
    6a06:	4629      	mov	r1, r5
    6a08:	4805      	ldr	r0, [pc, #20]	; (6a20 <fs_closedir+0x58>)
    6a0a:	f7fd fe51 	bl	46b0 <log_1>
		return rc;
    6a0e:	e7e8      	b.n	69e2 <fs_closedir+0x1a>
		return -ENOTSUP;
    6a10:	f06f 0585 	mvn.w	r5, #133	; 0x85
    6a14:	e7e5      	b.n	69e2 <fs_closedir+0x1a>
    6a16:	bf00      	nop
    6a18:	00015794 	.word	0x00015794
    6a1c:	00015774 	.word	0x00015774
    6a20:	00016488 	.word	0x00016488

00006a24 <fs_mount>:
{
    6a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((mp == NULL) || (mp->mnt_point == NULL)) {
    6a26:	b1c0      	cbz	r0, 6a5a <fs_mount+0x36>
    6a28:	4606      	mov	r6, r0
    6a2a:	68c0      	ldr	r0, [r0, #12]
    6a2c:	b1a8      	cbz	r0, 6a5a <fs_mount+0x36>
	len = strlen(mp->mnt_point);
    6a2e:	f7fa fc93 	bl	1358 <strlen>
    6a32:	4605      	mov	r5, r0
	if ((len <= 1) || (mp->mnt_point[0] != '/')) {
    6a34:	2801      	cmp	r0, #1
    6a36:	d923      	bls.n	6a80 <fs_mount+0x5c>
    6a38:	68f3      	ldr	r3, [r6, #12]
    6a3a:	781b      	ldrb	r3, [r3, #0]
    6a3c:	2b2f      	cmp	r3, #47	; 0x2f
    6a3e:	d11f      	bne.n	6a80 <fs_mount+0x5c>
	return z_impl_k_mutex_lock(mutex, timeout);
    6a40:	f04f 32ff 	mov.w	r2, #4294967295
    6a44:	f04f 33ff 	mov.w	r3, #4294967295
    6a48:	485e      	ldr	r0, [pc, #376]	; (6bc4 <fs_mount+0x1a0>)
    6a4a:	f007 fcdb 	bl	e404 <z_impl_k_mutex_lock>
	return list->head == list;
    6a4e:	4b5e      	ldr	r3, [pc, #376]	; (6bc8 <fs_mount+0x1a4>)
    6a50:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6a52:	429c      	cmp	r4, r3
    6a54:	d12c      	bne.n	6ab0 <fs_mount+0x8c>
    6a56:	2400      	movs	r4, #0
    6a58:	e02a      	b.n	6ab0 <fs_mount+0x8c>
    6a5a:	4b5c      	ldr	r3, [pc, #368]	; (6bcc <fs_mount+0x1a8>)
    6a5c:	4a5c      	ldr	r2, [pc, #368]	; (6bd0 <fs_mount+0x1ac>)
    6a5e:	1a9b      	subs	r3, r3, r2
    6a60:	08db      	lsrs	r3, r3, #3
		LOG_ERR("mount point not initialized!!");
    6a62:	f04f 0100 	mov.w	r1, #0
    6a66:	2201      	movs	r2, #1
    6a68:	f362 0102 	bfi	r1, r2, #0, #3
    6a6c:	f36f 01c5 	bfc	r1, #3, #3
    6a70:	f363 118f 	bfi	r1, r3, #6, #10
    6a74:	4857      	ldr	r0, [pc, #348]	; (6bd4 <fs_mount+0x1b0>)
    6a76:	f7fd feed 	bl	4854 <log_0>
		return -EINVAL;
    6a7a:	f06f 0415 	mvn.w	r4, #21
    6a7e:	e050      	b.n	6b22 <fs_mount+0xfe>
    6a80:	4b52      	ldr	r3, [pc, #328]	; (6bcc <fs_mount+0x1a8>)
    6a82:	4a53      	ldr	r2, [pc, #332]	; (6bd0 <fs_mount+0x1ac>)
    6a84:	1a9b      	subs	r3, r3, r2
    6a86:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid mount point!!");
    6a88:	f04f 0100 	mov.w	r1, #0
    6a8c:	2201      	movs	r2, #1
    6a8e:	f362 0102 	bfi	r1, r2, #0, #3
    6a92:	f36f 01c5 	bfc	r1, #3, #3
    6a96:	f363 118f 	bfi	r1, r3, #6, #10
    6a9a:	484f      	ldr	r0, [pc, #316]	; (6bd8 <fs_mount+0x1b4>)
    6a9c:	f7fd feda 	bl	4854 <log_0>
		return -EINVAL;
    6aa0:	f06f 0415 	mvn.w	r4, #21
    6aa4:	e03d      	b.n	6b22 <fs_mount+0xfe>
	return (node == list->tail) ? NULL : node->next;
    6aa6:	4b48      	ldr	r3, [pc, #288]	; (6bc8 <fs_mount+0x1a4>)
    6aa8:	685b      	ldr	r3, [r3, #4]
    6aaa:	42a3      	cmp	r3, r4
    6aac:	d01e      	beq.n	6aec <fs_mount+0xc8>
    6aae:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
    6ab0:	b1e4      	cbz	r4, 6aec <fs_mount+0xc8>
		if (len != itr->mountp_len) {
    6ab2:	69a3      	ldr	r3, [r4, #24]
    6ab4:	42ab      	cmp	r3, r5
    6ab6:	d1f6      	bne.n	6aa6 <fs_mount+0x82>
		if (strncmp(mp->mnt_point, itr->mnt_point, len) == 0) {
    6ab8:	462a      	mov	r2, r5
    6aba:	68e1      	ldr	r1, [r4, #12]
    6abc:	68f0      	ldr	r0, [r6, #12]
    6abe:	f00e f8f6 	bl	14cae <strncmp>
    6ac2:	2800      	cmp	r0, #0
    6ac4:	d1ef      	bne.n	6aa6 <fs_mount+0x82>
    6ac6:	4b41      	ldr	r3, [pc, #260]	; (6bcc <fs_mount+0x1a8>)
    6ac8:	4a41      	ldr	r2, [pc, #260]	; (6bd0 <fs_mount+0x1ac>)
    6aca:	1a9b      	subs	r3, r3, r2
    6acc:	08db      	lsrs	r3, r3, #3
			LOG_ERR("mount point already exists!!");
    6ace:	f04f 0100 	mov.w	r1, #0
    6ad2:	2201      	movs	r2, #1
    6ad4:	f362 0102 	bfi	r1, r2, #0, #3
    6ad8:	f36f 01c5 	bfc	r1, #3, #3
    6adc:	f363 118f 	bfi	r1, r3, #6, #10
    6ae0:	483e      	ldr	r0, [pc, #248]	; (6bdc <fs_mount+0x1b8>)
    6ae2:	f7fd feb7 	bl	4854 <log_0>
			rc = -EBUSY;
    6ae6:	f06f 040f 	mvn.w	r4, #15
			goto mount_err;
    6aea:	e017      	b.n	6b1c <fs_mount+0xf8>
	fs = fs_type_get(mp->type);
    6aec:	68b4      	ldr	r4, [r6, #8]
    6aee:	4620      	mov	r0, r4
    6af0:	f00b f821 	bl	11b36 <fs_type_get>
	if (fs == NULL) {
    6af4:	4607      	mov	r7, r0
    6af6:	b1b0      	cbz	r0, 6b26 <fs_mount+0x102>
	CHECKIF(fs->mount == NULL) {
    6af8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    6afa:	b33b      	cbz	r3, 6b4c <fs_mount+0x128>
	if (fs->unmount == NULL) {
    6afc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6afe:	2b00      	cmp	r3, #0
    6b00:	d038      	beq.n	6b74 <fs_mount+0x150>
	rc = fs->mount(mp);
    6b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6b04:	4630      	mov	r0, r6
    6b06:	4798      	blx	r3
	if (rc < 0) {
    6b08:	1e04      	subs	r4, r0, #0
    6b0a:	db49      	blt.n	6ba0 <fs_mount+0x17c>
	mp->mountp_len = len;
    6b0c:	61b5      	str	r5, [r6, #24]
	mp->fs = fs;
    6b0e:	61f7      	str	r7, [r6, #28]
	sys_dnode_t *const tail = list->tail;
    6b10:	4b2d      	ldr	r3, [pc, #180]	; (6bc8 <fs_mount+0x1a4>)
    6b12:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    6b14:	6033      	str	r3, [r6, #0]
	node->prev = tail;
    6b16:	6072      	str	r2, [r6, #4]
	tail->next = node;
    6b18:	6016      	str	r6, [r2, #0]
	list->tail = node;
    6b1a:	605e      	str	r6, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    6b1c:	4829      	ldr	r0, [pc, #164]	; (6bc4 <fs_mount+0x1a0>)
    6b1e:	f007 fd67 	bl	e5f0 <z_impl_k_mutex_unlock>
}
    6b22:	4620      	mov	r0, r4
    6b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b26:	4b29      	ldr	r3, [pc, #164]	; (6bcc <fs_mount+0x1a8>)
    6b28:	4a29      	ldr	r2, [pc, #164]	; (6bd0 <fs_mount+0x1ac>)
    6b2a:	1a9b      	subs	r3, r3, r2
    6b2c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("requested file system type not registered!!");
    6b2e:	f04f 0100 	mov.w	r1, #0
    6b32:	2201      	movs	r2, #1
    6b34:	f362 0102 	bfi	r1, r2, #0, #3
    6b38:	f36f 01c5 	bfc	r1, #3, #3
    6b3c:	f363 118f 	bfi	r1, r3, #6, #10
    6b40:	4827      	ldr	r0, [pc, #156]	; (6be0 <fs_mount+0x1bc>)
    6b42:	f7fd fe87 	bl	4854 <log_0>
		rc = -ENOENT;
    6b46:	f06f 0401 	mvn.w	r4, #1
		goto mount_err;
    6b4a:	e7e7      	b.n	6b1c <fs_mount+0xf8>
    6b4c:	4b1f      	ldr	r3, [pc, #124]	; (6bcc <fs_mount+0x1a8>)
    6b4e:	4a20      	ldr	r2, [pc, #128]	; (6bd0 <fs_mount+0x1ac>)
    6b50:	1a9b      	subs	r3, r3, r2
    6b52:	08db      	lsrs	r3, r3, #3
		LOG_ERR("fs type %d does not support mounting", mp->type);
    6b54:	f04f 0200 	mov.w	r2, #0
    6b58:	2101      	movs	r1, #1
    6b5a:	f361 0202 	bfi	r2, r1, #0, #3
    6b5e:	f36f 02c5 	bfc	r2, #3, #3
    6b62:	f363 128f 	bfi	r2, r3, #6, #10
    6b66:	4621      	mov	r1, r4
    6b68:	481e      	ldr	r0, [pc, #120]	; (6be4 <fs_mount+0x1c0>)
    6b6a:	f7fd fda1 	bl	46b0 <log_1>
		rc = -ENOTSUP;
    6b6e:	f06f 0485 	mvn.w	r4, #133	; 0x85
		goto mount_err;
    6b72:	e7d3      	b.n	6b1c <fs_mount+0xf8>
    6b74:	4b15      	ldr	r3, [pc, #84]	; (6bcc <fs_mount+0x1a8>)
    6b76:	4a16      	ldr	r2, [pc, #88]	; (6bd0 <fs_mount+0x1ac>)
    6b78:	1a9b      	subs	r3, r3, r2
    6b7a:	08db      	lsrs	r3, r3, #3
		LOG_WRN("mount path %s is not unmountable",
    6b7c:	f04f 0400 	mov.w	r4, #0
    6b80:	2202      	movs	r2, #2
    6b82:	f362 0402 	bfi	r4, r2, #0, #3
    6b86:	f36f 04c5 	bfc	r4, #3, #3
    6b8a:	f363 148f 	bfi	r4, r3, #6, #10
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
    6b8e:	68f0      	ldr	r0, [r6, #12]
    6b90:	f7fd fc00 	bl	4394 <z_log_strdup>
    6b94:	4601      	mov	r1, r0
    6b96:	4622      	mov	r2, r4
    6b98:	4813      	ldr	r0, [pc, #76]	; (6be8 <fs_mount+0x1c4>)
    6b9a:	f7fd fd89 	bl	46b0 <log_1>
    6b9e:	e7b0      	b.n	6b02 <fs_mount+0xde>
    6ba0:	4b0a      	ldr	r3, [pc, #40]	; (6bcc <fs_mount+0x1a8>)
    6ba2:	4a0b      	ldr	r2, [pc, #44]	; (6bd0 <fs_mount+0x1ac>)
    6ba4:	1a9b      	subs	r3, r3, r2
    6ba6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("fs mount error (%d)", rc);
    6ba8:	f04f 0200 	mov.w	r2, #0
    6bac:	2101      	movs	r1, #1
    6bae:	f361 0202 	bfi	r2, r1, #0, #3
    6bb2:	f36f 02c5 	bfc	r2, #3, #3
    6bb6:	f363 128f 	bfi	r2, r3, #6, #10
    6bba:	4621      	mov	r1, r4
    6bbc:	480b      	ldr	r0, [pc, #44]	; (6bec <fs_mount+0x1c8>)
    6bbe:	f7fd fd77 	bl	46b0 <log_1>
		goto mount_err;
    6bc2:	e7ab      	b.n	6b1c <fs_mount+0xf8>
    6bc4:	20000b98 	.word	0x20000b98
    6bc8:	20000b90 	.word	0x20000b90
    6bcc:	00015794 	.word	0x00015794
    6bd0:	00015774 	.word	0x00015774
    6bd4:	000164a4 	.word	0x000164a4
    6bd8:	000164c4 	.word	0x000164c4
    6bdc:	000164dc 	.word	0x000164dc
    6be0:	000164fc 	.word	0x000164fc
    6be4:	00016528 	.word	0x00016528
    6be8:	00016550 	.word	0x00016550
    6bec:	00016574 	.word	0x00016574

00006bf0 <fs_register>:
{
    6bf0:	b538      	push	{r3, r4, r5, lr}
    6bf2:	4604      	mov	r4, r0
    6bf4:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    6bf6:	f04f 32ff 	mov.w	r2, #4294967295
    6bfa:	f04f 33ff 	mov.w	r3, #4294967295
    6bfe:	480a      	ldr	r0, [pc, #40]	; (6c28 <fs_register+0x38>)
    6c00:	f007 fc00 	bl	e404 <z_impl_k_mutex_lock>
	if (fs_type_get(type) != NULL) {
    6c04:	4620      	mov	r0, r4
    6c06:	f00a ff96 	bl	11b36 <fs_type_get>
    6c0a:	b948      	cbnz	r0, 6c20 <fs_register+0x30>
		rc = registry_add(type, fs);
    6c0c:	4629      	mov	r1, r5
    6c0e:	4620      	mov	r0, r4
    6c10:	f7ff fd2a 	bl	6668 <registry_add>
    6c14:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    6c16:	4804      	ldr	r0, [pc, #16]	; (6c28 <fs_register+0x38>)
    6c18:	f007 fcea 	bl	e5f0 <z_impl_k_mutex_unlock>
}
    6c1c:	4620      	mov	r0, r4
    6c1e:	bd38      	pop	{r3, r4, r5, pc}
		rc = -EALREADY;
    6c20:	f06f 0477 	mvn.w	r4, #119	; 0x77
    6c24:	e7f7      	b.n	6c16 <fs_register+0x26>
    6c26:	bf00      	nop
    6c28:	20000b98 	.word	0x20000b98

00006c2c <fatfs_init>:
	.stat = fatfs_stat,
	.statvfs = fatfs_statvfs,
};

static int fatfs_init(const struct device *dev)
{
    6c2c:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	return fs_register(FS_FATFS, &fatfs_fs);
    6c2e:	4902      	ldr	r1, [pc, #8]	; (6c38 <fatfs_init+0xc>)
    6c30:	2000      	movs	r0, #0
    6c32:	f7ff ffdd 	bl	6bf0 <fs_register>
}
    6c36:	bd08      	pop	{r3, pc}
    6c38:	0001658c 	.word	0x0001658c

00006c3c <fatfs_mount>:
{
    6c3c:	b530      	push	{r4, r5, lr}
    6c3e:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    6c42:	4604      	mov	r4, r0
	res = f_mount((FATFS *)mountp->fs_data, &mountp->mnt_point[1], 1);
    6c44:	68c1      	ldr	r1, [r0, #12]
    6c46:	2201      	movs	r2, #1
    6c48:	4411      	add	r1, r2
    6c4a:	6900      	ldr	r0, [r0, #16]
    6c4c:	f003 fbbc 	bl	a3c8 <f_mount>
	if (res == FR_NO_FILESYSTEM &&
    6c50:	280d      	cmp	r0, #13
    6c52:	d00d      	beq.n	6c70 <fatfs_mount+0x34>
	if (res == FR_NO_FILESYSTEM &&
    6c54:	280d      	cmp	r0, #13
    6c56:	d013      	beq.n	6c80 <fatfs_mount+0x44>
	if (res == FR_OK) {
    6c58:	b928      	cbnz	r0, 6c66 <fatfs_mount+0x2a>
		mountp->flags |= FS_MOUNT_FLAG_USE_DISK_ACCESS;
    6c5a:	f894 3020 	ldrb.w	r3, [r4, #32]
    6c5e:	f043 0308 	orr.w	r3, r3, #8
    6c62:	f884 3020 	strb.w	r3, [r4, #32]
	return translate_error(res);
    6c66:	f00a ff6e 	bl	11b46 <translate_error>
}
    6c6a:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    6c6e:	bd30      	pop	{r4, r5, pc}
	    (mountp->flags & FS_MOUNT_FLAG_READ_ONLY) != 0) {
    6c70:	f894 3020 	ldrb.w	r3, [r4, #32]
	if (res == FR_NO_FILESYSTEM &&
    6c74:	f013 0f02 	tst.w	r3, #2
    6c78:	d0ec      	beq.n	6c54 <fatfs_mount+0x18>
		return -EROFS;
    6c7a:	f06f 001d 	mvn.w	r0, #29
    6c7e:	e7f4      	b.n	6c6a <fatfs_mount+0x2e>
	    (mountp->flags & FS_MOUNT_FLAG_NO_FORMAT) == 0) {
    6c80:	f894 3020 	ldrb.w	r3, [r4, #32]
	if (res == FR_NO_FILESYSTEM &&
    6c84:	f013 0f01 	tst.w	r3, #1
    6c88:	d1e6      	bne.n	6c58 <fatfs_mount+0x1c>
		MKFS_PARM mkfs_opt = {
    6c8a:	466d      	mov	r5, sp
    6c8c:	4b0a      	ldr	r3, [pc, #40]	; (6cb8 <fatfs_mount+0x7c>)
    6c8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6c90:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		res = f_mkfs(&mountp->mnt_point[1], &mkfs_opt, work, sizeof(work));
    6c94:	68e0      	ldr	r0, [r4, #12]
    6c96:	f44f 7300 	mov.w	r3, #512	; 0x200
    6c9a:	aa04      	add	r2, sp, #16
    6c9c:	4629      	mov	r1, r5
    6c9e:	3001      	adds	r0, #1
    6ca0:	f003 fe66 	bl	a970 <f_mkfs>
		if (res == FR_OK) {
    6ca4:	2800      	cmp	r0, #0
    6ca6:	d1d7      	bne.n	6c58 <fatfs_mount+0x1c>
					&mountp->mnt_point[1], 1);
    6ca8:	68e1      	ldr	r1, [r4, #12]
			res = f_mount((FATFS *)mountp->fs_data,
    6caa:	2201      	movs	r2, #1
    6cac:	4411      	add	r1, r2
    6cae:	6920      	ldr	r0, [r4, #16]
    6cb0:	f003 fb8a 	bl	a3c8 <f_mount>
    6cb4:	e7d0      	b.n	6c58 <fatfs_mount+0x1c>
    6cb6:	bf00      	nop
    6cb8:	00015850 	.word	0x00015850

00006cbc <fatfs_closedir>:
{
    6cbc:	b538      	push	{r3, r4, r5, lr}
    6cbe:	4604      	mov	r4, r0
	res = f_closedir(zdp->dirp);
    6cc0:	6800      	ldr	r0, [r0, #0]
    6cc2:	f00d fa1d 	bl	14100 <f_closedir>
    6cc6:	4605      	mov	r5, r0
	k_mem_slab_free(&fatfs_dirp_pool, &zdp->dirp);
    6cc8:	4621      	mov	r1, r4
    6cca:	4803      	ldr	r0, [pc, #12]	; (6cd8 <fatfs_closedir+0x1c>)
    6ccc:	f007 f928 	bl	df20 <k_mem_slab_free>
	return translate_error(res);
    6cd0:	4628      	mov	r0, r5
    6cd2:	f00a ff38 	bl	11b46 <translate_error>
}
    6cd6:	bd38      	pop	{r3, r4, r5, pc}
    6cd8:	20000370 	.word	0x20000370

00006cdc <fatfs_opendir>:
{
    6cdc:	b530      	push	{r4, r5, lr}
    6cde:	b083      	sub	sp, #12
    6ce0:	4604      	mov	r4, r0
    6ce2:	460d      	mov	r5, r1
	if (k_mem_slab_alloc(&fatfs_dirp_pool, &ptr, K_NO_WAIT) == 0) {
    6ce4:	2200      	movs	r2, #0
    6ce6:	2300      	movs	r3, #0
    6ce8:	a901      	add	r1, sp, #4
    6cea:	480f      	ldr	r0, [pc, #60]	; (6d28 <fatfs_opendir+0x4c>)
    6cec:	f007 f8b6 	bl	de5c <k_mem_slab_alloc>
    6cf0:	b980      	cbnz	r0, 6d14 <fatfs_opendir+0x38>
__ssp_bos_icheck3(memset, void *, int)
    6cf2:	2250      	movs	r2, #80	; 0x50
    6cf4:	2100      	movs	r1, #0
    6cf6:	9801      	ldr	r0, [sp, #4]
    6cf8:	f00d feb1 	bl	14a5e <memset>
		zdp->dirp = ptr;
    6cfc:	9801      	ldr	r0, [sp, #4]
    6cfe:	6020      	str	r0, [r4, #0]
	res = f_opendir(zdp->dirp, &path[1]);
    6d00:	1c69      	adds	r1, r5, #1
    6d02:	f00d f9b4 	bl	1406e <f_opendir>
	if (res != FR_OK) {
    6d06:	4605      	mov	r5, r0
    6d08:	b938      	cbnz	r0, 6d1a <fatfs_opendir+0x3e>
	return translate_error(res);
    6d0a:	4628      	mov	r0, r5
    6d0c:	f00a ff1b 	bl	11b46 <translate_error>
}
    6d10:	b003      	add	sp, #12
    6d12:	bd30      	pop	{r4, r5, pc}
		return -ENOMEM;
    6d14:	f06f 000b 	mvn.w	r0, #11
    6d18:	e7fa      	b.n	6d10 <fatfs_opendir+0x34>
		k_mem_slab_free(&fatfs_dirp_pool, &ptr);
    6d1a:	a901      	add	r1, sp, #4
    6d1c:	4802      	ldr	r0, [pc, #8]	; (6d28 <fatfs_opendir+0x4c>)
    6d1e:	f007 f8ff 	bl	df20 <k_mem_slab_free>
		zdp->dirp = NULL;
    6d22:	2300      	movs	r3, #0
    6d24:	6023      	str	r3, [r4, #0]
    6d26:	e7f0      	b.n	6d0a <fatfs_opendir+0x2e>
    6d28:	20000370 	.word	0x20000370

00006d2c <fatfs_close>:
{
    6d2c:	b538      	push	{r3, r4, r5, lr}
    6d2e:	4604      	mov	r4, r0
	res = f_close(zfp->filep);
    6d30:	6800      	ldr	r0, [r0, #0]
    6d32:	f00d f884 	bl	13e3e <f_close>
    6d36:	4605      	mov	r5, r0
	k_mem_slab_free(&fatfs_filep_pool, &zfp->filep);
    6d38:	4621      	mov	r1, r4
    6d3a:	4804      	ldr	r0, [pc, #16]	; (6d4c <fatfs_close+0x20>)
    6d3c:	f007 f8f0 	bl	df20 <k_mem_slab_free>
	zfp->filep = NULL;
    6d40:	2300      	movs	r3, #0
    6d42:	6023      	str	r3, [r4, #0]
	return translate_error(res);
    6d44:	4628      	mov	r0, r5
    6d46:	f00a fefe 	bl	11b46 <translate_error>
}
    6d4a:	bd38      	pop	{r3, r4, r5, pc}
    6d4c:	20000390 	.word	0x20000390

00006d50 <fatfs_open>:
{
    6d50:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d52:	b083      	sub	sp, #12
    6d54:	4604      	mov	r4, r0
    6d56:	460d      	mov	r5, r1
    6d58:	4616      	mov	r6, r2
	if (k_mem_slab_alloc(&fatfs_filep_pool, &ptr, K_NO_WAIT) == 0) {
    6d5a:	2200      	movs	r2, #0
    6d5c:	2300      	movs	r3, #0
    6d5e:	a901      	add	r1, sp, #4
    6d60:	4811      	ldr	r0, [pc, #68]	; (6da8 <fatfs_open+0x58>)
    6d62:	f007 f87b 	bl	de5c <k_mem_slab_alloc>
    6d66:	b9a8      	cbnz	r0, 6d94 <fatfs_open+0x44>
    6d68:	2250      	movs	r2, #80	; 0x50
    6d6a:	2100      	movs	r1, #0
    6d6c:	9801      	ldr	r0, [sp, #4]
    6d6e:	f00d fe76 	bl	14a5e <memset>
		zfp->filep = ptr;
    6d72:	9f01      	ldr	r7, [sp, #4]
    6d74:	6027      	str	r7, [r4, #0]
	fs_mode = translate_flags(mode);
    6d76:	4630      	mov	r0, r6
    6d78:	f00a ff14 	bl	11ba4 <translate_flags>
    6d7c:	4602      	mov	r2, r0
	res = f_open(zfp->filep, &file_name[1], fs_mode);
    6d7e:	1c69      	adds	r1, r5, #1
    6d80:	4638      	mov	r0, r7
    6d82:	f003 fb49 	bl	a418 <f_open>
	if (res != FR_OK) {
    6d86:	4605      	mov	r5, r0
    6d88:	b938      	cbnz	r0, 6d9a <fatfs_open+0x4a>
	return translate_error(res);
    6d8a:	4628      	mov	r0, r5
    6d8c:	f00a fedb 	bl	11b46 <translate_error>
}
    6d90:	b003      	add	sp, #12
    6d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOMEM;
    6d94:	f06f 000b 	mvn.w	r0, #11
    6d98:	e7fa      	b.n	6d90 <fatfs_open+0x40>
		k_mem_slab_free(&fatfs_filep_pool, &ptr);
    6d9a:	a901      	add	r1, sp, #4
    6d9c:	4802      	ldr	r0, [pc, #8]	; (6da8 <fatfs_open+0x58>)
    6d9e:	f007 f8bf 	bl	df20 <k_mem_slab_free>
		zfp->filep = NULL;
    6da2:	2300      	movs	r3, #0
    6da4:	6023      	str	r3, [r4, #0]
    6da6:	e7f0      	b.n	6d8a <fatfs_open+0x3a>
    6da8:	20000390 	.word	0x20000390

00006dac <sdhc_spi_rx_bytes>:
	return err;
}

/* Receives a fixed number of bytes */
static int sdhc_spi_rx_bytes(struct sdhc_spi_data *data, uint8_t *buf, int len)
{
    6dac:	b5f0      	push	{r4, r5, r6, r7, lr}
    6dae:	b08b      	sub	sp, #44	; 0x2c
    6db0:	4604      	mov	r4, r0
    6db2:	460e      	mov	r6, r1
    6db4:	4615      	mov	r5, r2
	struct spi_buf tx_bufs[] = {
    6db6:	4b0e      	ldr	r3, [pc, #56]	; (6df0 <sdhc_spi_rx_bytes+0x44>)
    6db8:	9308      	str	r3, [sp, #32]
    6dba:	9209      	str	r2, [sp, #36]	; 0x24
			.buf = (uint8_t *)sdhc_ones,
			.len = len
		}
	};

	const struct spi_buf_set tx = {
    6dbc:	ab08      	add	r3, sp, #32
    6dbe:	9306      	str	r3, [sp, #24]
    6dc0:	2301      	movs	r3, #1
    6dc2:	9307      	str	r3, [sp, #28]
		.buffers = tx_bufs,
		.count = 1,
	};

	struct spi_buf rx_bufs[] = {
    6dc4:	9104      	str	r1, [sp, #16]
    6dc6:	9205      	str	r2, [sp, #20]
			.buf = buf,
			.len = len
		}
	};

	const struct spi_buf_set rx = {
    6dc8:	aa04      	add	r2, sp, #16
    6dca:	9202      	str	r2, [sp, #8]
    6dcc:	9303      	str	r3, [sp, #12]
		.buffers = rx_bufs,
		.count = 1,
	};

	return sdhc_spi_trace(data, -1,
    6dce:	6800      	ldr	r0, [r0, #0]
    6dd0:	6861      	ldr	r1, [r4, #4]
	const struct spi_driver_api *api =
    6dd2:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    6dd4:	681f      	ldr	r7, [r3, #0]
    6dd6:	ab02      	add	r3, sp, #8
    6dd8:	aa06      	add	r2, sp, #24
    6dda:	47b8      	blx	r7
    6ddc:	4602      	mov	r2, r0
    6dde:	9500      	str	r5, [sp, #0]
    6de0:	4633      	mov	r3, r6
    6de2:	f04f 31ff 	mov.w	r1, #4294967295
    6de6:	4620      	mov	r0, r4
    6de8:	f00b f805 	bl	11df6 <sdhc_spi_trace>
			  spi_transceive(data->spi, data->spi_cfg, &tx, &rx),
			  buf, len);
}
    6dec:	b00b      	add	sp, #44	; 0x2c
    6dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6df0:	00016680 	.word	0x00016680

00006df4 <disk_spi_sdhc_access_ioctl>:
	return err;
}

static int disk_spi_sdhc_access_ioctl(struct disk_info *disk,
	uint8_t cmd, void *buf)
{
    6df4:	b430      	push	{r4, r5}
	const struct device *dev = disk->dev;
    6df6:	6903      	ldr	r3, [r0, #16]
	struct sdhc_spi_data *data = dev->data;
    6df8:	691d      	ldr	r5, [r3, #16]
	int err;

	err = sdhc_map_disk_status(data->status);
    6dfa:	7c2c      	ldrb	r4, [r5, #16]
}

/* Maps a flag based error code into a Zephyr errno */
static inline int sdhc_map_flags(const struct sdhc_flag_map *map, int flags)
{
	if (flags < 0) {
    6dfc:	4b11      	ldr	r3, [pc, #68]	; (6e44 <disk_spi_sdhc_access_ioctl+0x50>)
		return flags;
	}

	for (; map->mask != 0U; map++) {
    6dfe:	7818      	ldrb	r0, [r3, #0]
    6e00:	b130      	cbz	r0, 6e10 <disk_spi_sdhc_access_ioctl+0x1c>
		if ((flags & map->mask) == map->mask) {
    6e02:	43a0      	bics	r0, r4
    6e04:	d001      	beq.n	6e0a <disk_spi_sdhc_access_ioctl+0x16>
	for (; map->mask != 0U; map++) {
    6e06:	3302      	adds	r3, #2
    6e08:	e7f9      	b.n	6dfe <disk_spi_sdhc_access_ioctl+0xa>
			return -map->err;
    6e0a:	7858      	ldrb	r0, [r3, #1]
    6e0c:	4240      	negs	r0, r0
    6e0e:	e001      	b.n	6e14 <disk_spi_sdhc_access_ioctl+0x20>
		}
	}

	return -map->err;
    6e10:	7858      	ldrb	r0, [r3, #1]
    6e12:	4240      	negs	r0, r0
	if (err != 0) {
    6e14:	b960      	cbnz	r0, 6e30 <disk_spi_sdhc_access_ioctl+0x3c>
		return err;
	}

	switch (cmd) {
    6e16:	3901      	subs	r1, #1
    6e18:	2904      	cmp	r1, #4
    6e1a:	d804      	bhi.n	6e26 <disk_spi_sdhc_access_ioctl+0x32>
    6e1c:	e8df f001 	tbb	[pc, r1]
    6e20:	0e030a06 	.word	0x0e030a06
    6e24:	08          	.byte	0x08
    6e25:	00          	.byte	0x00
	if (err != 0) {
    6e26:	f06f 0015 	mvn.w	r0, #21
    6e2a:	e001      	b.n	6e30 <disk_spi_sdhc_access_ioctl+0x3c>
	case DISK_IOCTL_CTRL_SYNC:
		break;
	case DISK_IOCTL_GET_SECTOR_COUNT:
		*(uint32_t *)buf = data->sector_count;
    6e2c:	68eb      	ldr	r3, [r5, #12]
    6e2e:	6013      	str	r3, [r2, #0]
	default:
		return -EINVAL;
	}

	return 0;
}
    6e30:	bc30      	pop	{r4, r5}
    6e32:	4770      	bx	lr
		*(uint32_t *)buf = SDMMC_DEFAULT_BLOCK_SIZE;
    6e34:	f44f 7300 	mov.w	r3, #512	; 0x200
    6e38:	6013      	str	r3, [r2, #0]
		break;
    6e3a:	e7f9      	b.n	6e30 <disk_spi_sdhc_access_ioctl+0x3c>
		*(uint32_t *)buf = SDMMC_DEFAULT_BLOCK_SIZE;
    6e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
    6e40:	6013      	str	r3, [r2, #0]
		break;
    6e42:	e7f5      	b.n	6e30 <disk_spi_sdhc_access_ioctl+0x3c>
    6e44:	00016678 	.word	0x00016678

00006e48 <disk_spi_sdhc_init>:
	.name = CONFIG_SDMMC_VOLUME_NAME,
	.ops = &spi_sdhc_disk_ops,
};

static int disk_spi_sdhc_init(const struct device *dev)
{
    6e48:	b510      	push	{r4, lr}
    6e4a:	4604      	mov	r4, r0
	sdhc_spi_set_status(dev, DISK_STATUS_UNINIT);
    6e4c:	2101      	movs	r1, #1
    6e4e:	f00a ffc7 	bl	11de0 <sdhc_spi_set_status>

	spi_sdhc_disk.dev = dev;
    6e52:	4802      	ldr	r0, [pc, #8]	; (6e5c <disk_spi_sdhc_init+0x14>)
    6e54:	6104      	str	r4, [r0, #16]

	return disk_access_register(&spi_sdhc_disk);
    6e56:	f7fe f9d7 	bl	5208 <disk_access_register>
}
    6e5a:	bd10      	pop	{r4, pc}
    6e5c:	20000050 	.word	0x20000050

00006e60 <sdhc_spi_init>:
{
    6e60:	b538      	push	{r3, r4, r5, lr}
    6e62:	4604      	mov	r4, r0
	struct sdhc_spi_data *data = dev->data;
    6e64:	6905      	ldr	r5, [r0, #16]
    6e66:	4804      	ldr	r0, [pc, #16]	; (6e78 <sdhc_spi_init+0x18>)
    6e68:	f006 fdfa 	bl	da60 <z_impl_device_get_binding>
	data->spi = device_get_binding(DT_BUS_LABEL(SPI_SDHC_NODE));
    6e6c:	6028      	str	r0, [r5, #0]
	disk_spi_sdhc_init(dev);
    6e6e:	4620      	mov	r0, r4
    6e70:	f7ff ffea 	bl	6e48 <disk_spi_sdhc_init>
}
    6e74:	2000      	movs	r0, #0
    6e76:	bd38      	pop	{r3, r4, r5, pc}
    6e78:	00015a68 	.word	0x00015a68

00006e7c <sdhc_spi_tx_block>:
{
    6e7c:	b570      	push	{r4, r5, r6, lr}
    6e7e:	b082      	sub	sp, #8
    6e80:	4606      	mov	r6, r0
    6e82:	460c      	mov	r4, r1
    6e84:	4615      	mov	r5, r2
	buf[0] = SDHC_TOKEN_SINGLE;
    6e86:	23fe      	movs	r3, #254	; 0xfe
    6e88:	f88d 3004 	strb.w	r3, [sp, #4]
	err = sdhc_spi_tx(data, buf, 1);
    6e8c:	2201      	movs	r2, #1
    6e8e:	a901      	add	r1, sp, #4
    6e90:	f00a ffbf 	bl	11e12 <sdhc_spi_tx>
	if (err != 0) {
    6e94:	4603      	mov	r3, r0
    6e96:	b110      	cbz	r0, 6e9e <sdhc_spi_tx_block+0x22>
}
    6e98:	4618      	mov	r0, r3
    6e9a:	b002      	add	sp, #8
    6e9c:	bd70      	pop	{r4, r5, r6, pc}
	err = sdhc_spi_tx(data, send, len);
    6e9e:	462a      	mov	r2, r5
    6ea0:	4621      	mov	r1, r4
    6ea2:	4630      	mov	r0, r6
    6ea4:	f00a ffb5 	bl	11e12 <sdhc_spi_tx>
	if (err != 0) {
    6ea8:	4603      	mov	r3, r0
    6eaa:	2800      	cmp	r0, #0
    6eac:	d1f4      	bne.n	6e98 <sdhc_spi_tx_block+0x1c>
	sys_put_be16(crc16_itu_t(0, send, len), buf);
    6eae:	462a      	mov	r2, r5
    6eb0:	4621      	mov	r1, r4
    6eb2:	f00a f860 	bl	10f76 <crc16_itu_t>
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_be16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val >> 8;
    6eb6:	0a03      	lsrs	r3, r0, #8
    6eb8:	f88d 3004 	strb.w	r3, [sp, #4]
	dst[1] = val;
    6ebc:	f88d 0005 	strb.w	r0, [sp, #5]
	err = sdhc_spi_tx(data, buf, sizeof(buf));
    6ec0:	2202      	movs	r2, #2
    6ec2:	a901      	add	r1, sp, #4
    6ec4:	4630      	mov	r0, r6
    6ec6:	f00a ffa4 	bl	11e12 <sdhc_spi_tx>
	if (err != 0) {
    6eca:	4603      	mov	r3, r0
    6ecc:	2800      	cmp	r0, #0
    6ece:	d1e3      	bne.n	6e98 <sdhc_spi_tx_block+0x1c>
	return sdhc_map_data_status(sdhc_spi_rx_u8(data));
    6ed0:	4630      	mov	r0, r6
    6ed2:	f00a ff92 	bl	11dfa <sdhc_spi_rx_u8>
	if (flags < 0) {
    6ed6:	1e03      	subs	r3, r0, #0
    6ed8:	dbde      	blt.n	6e98 <sdhc_spi_tx_block+0x1c>
    6eda:	4a06      	ldr	r2, [pc, #24]	; (6ef4 <sdhc_spi_tx_block+0x78>)
	for (; map->mask != 0U; map++) {
    6edc:	7811      	ldrb	r1, [r2, #0]
    6ede:	b131      	cbz	r1, 6eee <sdhc_spi_tx_block+0x72>
		if ((flags & map->mask) == map->mask) {
    6ee0:	4399      	bics	r1, r3
    6ee2:	d001      	beq.n	6ee8 <sdhc_spi_tx_block+0x6c>
	for (; map->mask != 0U; map++) {
    6ee4:	3202      	adds	r2, #2
    6ee6:	e7f9      	b.n	6edc <sdhc_spi_tx_block+0x60>
			return -map->err;
    6ee8:	7853      	ldrb	r3, [r2, #1]
    6eea:	425b      	negs	r3, r3
    6eec:	e7d4      	b.n	6e98 <sdhc_spi_tx_block+0x1c>
	return -map->err;
    6eee:	7853      	ldrb	r3, [r2, #1]
    6ef0:	425b      	negs	r3, r3
    6ef2:	e7d1      	b.n	6e98 <sdhc_spi_tx_block+0x1c>
    6ef4:	00016670 	.word	0x00016670

00006ef8 <sdhc_spi_cmd_r1>:
{
    6ef8:	b508      	push	{r3, lr}
	return sdhc_map_r1_status(sdhc_spi_cmd_r1_raw(data, cmd, payload));
    6efa:	f00b f8fa 	bl	120f2 <sdhc_spi_cmd_r1_raw>
	if (flags < 0) {
    6efe:	2800      	cmp	r0, #0
    6f00:	db0b      	blt.n	6f1a <sdhc_spi_cmd_r1+0x22>
    6f02:	4b06      	ldr	r3, [pc, #24]	; (6f1c <sdhc_spi_cmd_r1+0x24>)
	for (; map->mask != 0U; map++) {
    6f04:	781a      	ldrb	r2, [r3, #0]
    6f06:	b132      	cbz	r2, 6f16 <sdhc_spi_cmd_r1+0x1e>
		if ((flags & map->mask) == map->mask) {
    6f08:	4382      	bics	r2, r0
    6f0a:	d001      	beq.n	6f10 <sdhc_spi_cmd_r1+0x18>
	for (; map->mask != 0U; map++) {
    6f0c:	3302      	adds	r3, #2
    6f0e:	e7f9      	b.n	6f04 <sdhc_spi_cmd_r1+0xc>
			return -map->err;
    6f10:	7858      	ldrb	r0, [r3, #1]
    6f12:	4240      	negs	r0, r0
    6f14:	e001      	b.n	6f1a <sdhc_spi_cmd_r1+0x22>
	return -map->err;
    6f16:	7858      	ldrb	r0, [r3, #1]
    6f18:	4240      	negs	r0, r0
}
    6f1a:	bd08      	pop	{r3, pc}
    6f1c:	000166c0 	.word	0x000166c0

00006f20 <sdhc_spi_write_multi>:
{
    6f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f24:	b082      	sub	sp, #8
    6f26:	4606      	mov	r6, r0
    6f28:	460f      	mov	r7, r1
    6f2a:	4698      	mov	r8, r3
	err = sdhc_map_disk_status(data->status);
    6f2c:	7c03      	ldrb	r3, [r0, #16]
	if (flags < 0) {
    6f2e:	4c39      	ldr	r4, [pc, #228]	; (7014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    6f30:	e000      	b.n	6f34 <sdhc_spi_write_multi+0x14>
	for (; map->mask != 0U; map++) {
    6f32:	3402      	adds	r4, #2
    6f34:	7825      	ldrb	r5, [r4, #0]
    6f36:	b12d      	cbz	r5, 6f44 <sdhc_spi_write_multi+0x24>
		if ((flags & map->mask) == map->mask) {
    6f38:	ea35 0103 	bics.w	r1, r5, r3
    6f3c:	d1f9      	bne.n	6f32 <sdhc_spi_write_multi+0x12>
			return -map->err;
    6f3e:	7865      	ldrb	r5, [r4, #1]
    6f40:	426d      	negs	r5, r5
    6f42:	e001      	b.n	6f48 <sdhc_spi_write_multi+0x28>
	return -map->err;
    6f44:	7865      	ldrb	r5, [r4, #1]
    6f46:	426d      	negs	r5, r5
	if (err != 0) {
    6f48:	b96d      	cbnz	r5, 6f66 <sdhc_spi_write_multi+0x46>
	if (data->high_capacity) {
    6f4a:	7a33      	ldrb	r3, [r6, #8]
    6f4c:	b903      	cbnz	r3, 6f50 <sdhc_spi_write_multi+0x30>
		addr = sector * SDMMC_DEFAULT_BLOCK_SIZE;
    6f4e:	0252      	lsls	r2, r2, #9
	err = sdhc_spi_cmd_r1(data, SDHC_WRITE_MULTIPLE_BLOCK, addr);
    6f50:	2119      	movs	r1, #25
    6f52:	4630      	mov	r0, r6
    6f54:	f7ff ffd0 	bl	6ef8 <sdhc_spi_cmd_r1>
	if (err < 0) {
    6f58:	1e05      	subs	r5, r0, #0
    6f5a:	da19      	bge.n	6f90 <sdhc_spi_write_multi+0x70>
	spi_release(data->spi, data->spi_cfg);
    6f5c:	6830      	ldr	r0, [r6, #0]
    6f5e:	6871      	ldr	r1, [r6, #4]
			  const struct spi_config *config);

static inline int z_impl_spi_release(const struct device *dev,
				     const struct spi_config *config)
{
	const struct spi_driver_api *api =
    6f60:	6883      	ldr	r3, [r0, #8]
		(const struct spi_driver_api *)dev->api;

	return api->release(dev, config);
    6f62:	685b      	ldr	r3, [r3, #4]
    6f64:	4798      	blx	r3
}
    6f66:	4628      	mov	r0, r5
    6f68:	b002      	add	sp, #8
    6f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -map->err;
    6f6e:	7855      	ldrb	r5, [r2, #1]
    6f70:	426d      	negs	r5, r5
    6f72:	e001      	b.n	6f78 <sdhc_spi_write_multi+0x58>
	return -map->err;
    6f74:	7855      	ldrb	r5, [r2, #1]
    6f76:	426d      	negs	r5, r5
		if (err != 0) {
    6f78:	2d00      	cmp	r5, #0
    6f7a:	d1ef      	bne.n	6f5c <sdhc_spi_write_multi+0x3c>
		err = sdhc_spi_skip_until_ready(data);
    6f7c:	4630      	mov	r0, r6
    6f7e:	f00a ff8f 	bl	11ea0 <sdhc_spi_skip_until_ready>
		if (err != 0) {
    6f82:	4605      	mov	r5, r0
    6f84:	2800      	cmp	r0, #0
    6f86:	d1e9      	bne.n	6f5c <sdhc_spi_write_multi+0x3c>
		buf += SDMMC_DEFAULT_BLOCK_SIZE;
    6f88:	f507 7700 	add.w	r7, r7, #512	; 0x200
	for (; count != 0U; count--) {
    6f8c:	f108 38ff 	add.w	r8, r8, #4294967295
    6f90:	f1b8 0f00 	cmp.w	r8, #0
    6f94:	d033      	beq.n	6ffe <sdhc_spi_write_multi+0xde>
		block[0] = SDHC_TOKEN_MULTI_WRITE;
    6f96:	23fc      	movs	r3, #252	; 0xfc
    6f98:	f88d 3004 	strb.w	r3, [sp, #4]
		err = sdhc_spi_tx(data, block, 1);
    6f9c:	2201      	movs	r2, #1
    6f9e:	a901      	add	r1, sp, #4
    6fa0:	4630      	mov	r0, r6
    6fa2:	f00a ff36 	bl	11e12 <sdhc_spi_tx>
		if (err != 0) {
    6fa6:	4605      	mov	r5, r0
    6fa8:	2800      	cmp	r0, #0
    6faa:	d1d7      	bne.n	6f5c <sdhc_spi_write_multi+0x3c>
		err = sdhc_spi_tx(data, buf, SDMMC_DEFAULT_BLOCK_SIZE);
    6fac:	f44f 7200 	mov.w	r2, #512	; 0x200
    6fb0:	4639      	mov	r1, r7
    6fb2:	4630      	mov	r0, r6
    6fb4:	f00a ff2d 	bl	11e12 <sdhc_spi_tx>
		if (err != 0) {
    6fb8:	4605      	mov	r5, r0
    6fba:	2800      	cmp	r0, #0
    6fbc:	d1ce      	bne.n	6f5c <sdhc_spi_write_multi+0x3c>
		sys_put_be16(crc16_itu_t(0, buf, SDMMC_DEFAULT_BLOCK_SIZE),
    6fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
    6fc2:	4639      	mov	r1, r7
    6fc4:	f009 ffd7 	bl	10f76 <crc16_itu_t>
	dst[0] = val >> 8;
    6fc8:	0a03      	lsrs	r3, r0, #8
    6fca:	f88d 3004 	strb.w	r3, [sp, #4]
	dst[1] = val;
    6fce:	f88d 0005 	strb.w	r0, [sp, #5]
		err = sdhc_spi_tx(data, block, sizeof(block));
    6fd2:	2202      	movs	r2, #2
    6fd4:	a901      	add	r1, sp, #4
    6fd6:	4630      	mov	r0, r6
    6fd8:	f00a ff1b 	bl	11e12 <sdhc_spi_tx>
		if (err != 0) {
    6fdc:	4605      	mov	r5, r0
    6fde:	2800      	cmp	r0, #0
    6fe0:	d1bc      	bne.n	6f5c <sdhc_spi_write_multi+0x3c>
		err = sdhc_map_data_status(sdhc_spi_rx_u8(data));
    6fe2:	4630      	mov	r0, r6
    6fe4:	f00a ff09 	bl	11dfa <sdhc_spi_rx_u8>
	if (flags < 0) {
    6fe8:	1e05      	subs	r5, r0, #0
    6fea:	dbc5      	blt.n	6f78 <sdhc_spi_write_multi+0x58>
    6fec:	4a0a      	ldr	r2, [pc, #40]	; (7018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>)
	for (; map->mask != 0U; map++) {
    6fee:	7814      	ldrb	r4, [r2, #0]
    6ff0:	2c00      	cmp	r4, #0
    6ff2:	d0bf      	beq.n	6f74 <sdhc_spi_write_multi+0x54>
		if ((flags & map->mask) == map->mask) {
    6ff4:	ea34 0305 	bics.w	r3, r4, r5
    6ff8:	d0b9      	beq.n	6f6e <sdhc_spi_write_multi+0x4e>
	for (; map->mask != 0U; map++) {
    6ffa:	3202      	adds	r2, #2
    6ffc:	e7f7      	b.n	6fee <sdhc_spi_write_multi+0xce>
	sdhc_spi_tx_cmd(data, SDHC_STOP_TRANSMISSION, 0);
    6ffe:	2200      	movs	r2, #0
    7000:	210c      	movs	r1, #12
    7002:	4630      	mov	r0, r6
    7004:	f00a ff27 	bl	11e56 <sdhc_spi_tx_cmd>
	err = sdhc_spi_skip_until_ready(data);
    7008:	4630      	mov	r0, r6
    700a:	f00a ff49 	bl	11ea0 <sdhc_spi_skip_until_ready>
    700e:	4605      	mov	r5, r0
	if (err != 0) {
    7010:	e7a4      	b.n	6f5c <sdhc_spi_write_multi+0x3c>
    7012:	bf00      	nop
    7014:	00016678 	.word	0x00016678
    7018:	00016670 	.word	0x00016670

0000701c <sdhc_spi_cmd_r1_idle>:
{
    701c:	b508      	push	{r3, lr}
	return sdhc_map_r1_idle_status(sdhc_spi_cmd_r1_raw(data, cmd, payload));
    701e:	f00b f868 	bl	120f2 <sdhc_spi_cmd_r1_raw>
}

/* Converts an eary stage idle mode R1 code into an error code */
static inline int sdhc_map_r1_idle_status(int status)
{
	if (status < 0) {
    7022:	2800      	cmp	r0, #0
    7024:	db0d      	blt.n	7042 <sdhc_spi_cmd_r1_idle+0x26>
		return status;
	}

	if (status == SDHC_R1_IDLE) {
    7026:	2801      	cmp	r0, #1
    7028:	d00c      	beq.n	7044 <sdhc_spi_cmd_r1_idle+0x28>
    702a:	4b07      	ldr	r3, [pc, #28]	; (7048 <sdhc_spi_cmd_r1_idle+0x2c>)
	for (; map->mask != 0U; map++) {
    702c:	781a      	ldrb	r2, [r3, #0]
    702e:	b132      	cbz	r2, 703e <sdhc_spi_cmd_r1_idle+0x22>
		if ((flags & map->mask) == map->mask) {
    7030:	4382      	bics	r2, r0
    7032:	d001      	beq.n	7038 <sdhc_spi_cmd_r1_idle+0x1c>
	for (; map->mask != 0U; map++) {
    7034:	3302      	adds	r3, #2
    7036:	e7f9      	b.n	702c <sdhc_spi_cmd_r1_idle+0x10>
			return -map->err;
    7038:	7858      	ldrb	r0, [r3, #1]
    703a:	4240      	negs	r0, r0
    703c:	e001      	b.n	7042 <sdhc_spi_cmd_r1_idle+0x26>
	return -map->err;
    703e:	7858      	ldrb	r0, [r3, #1]
    7040:	4240      	negs	r0, r0
}
    7042:	bd08      	pop	{r3, pc}
		return 0;
    7044:	2000      	movs	r0, #0
	return sdhc_map_r1_idle_status(sdhc_spi_cmd_r1_raw(data, cmd, payload));
    7046:	e7fc      	b.n	7042 <sdhc_spi_cmd_r1_idle+0x26>
    7048:	000166c0 	.word	0x000166c0

0000704c <sdhc_spi_go_idle>:
{
    704c:	b510      	push	{r4, lr}
    704e:	4604      	mov	r4, r0
	sdhc_spi_tx(data, sdhc_ones, 10);
    7050:	220a      	movs	r2, #10
    7052:	4907      	ldr	r1, [pc, #28]	; (7070 <sdhc_spi_go_idle+0x24>)
    7054:	f00a fedd 	bl	11e12 <sdhc_spi_tx>
	spi_release(data->spi, data->spi_cfg);
    7058:	6820      	ldr	r0, [r4, #0]
    705a:	6861      	ldr	r1, [r4, #4]
	const struct spi_driver_api *api =
    705c:	6883      	ldr	r3, [r0, #8]
	return api->release(dev, config);
    705e:	685b      	ldr	r3, [r3, #4]
    7060:	4798      	blx	r3
	return sdhc_spi_cmd_r1_idle(data, SDHC_GO_IDLE_STATE, 0);
    7062:	2200      	movs	r2, #0
    7064:	4611      	mov	r1, r2
    7066:	4620      	mov	r0, r4
    7068:	f7ff ffd8 	bl	701c <sdhc_spi_cmd_r1_idle>
}
    706c:	bd10      	pop	{r4, pc}
    706e:	bf00      	nop
    7070:	00016680 	.word	0x00016680

00007074 <sdhc_spi_cmd_r2>:
{
    7074:	b570      	push	{r4, r5, r6, lr}
    7076:	4605      	mov	r5, r0
	err = sdhc_spi_tx_cmd(data, cmd, payload);
    7078:	f00a feed 	bl	11e56 <sdhc_spi_tx_cmd>
	if (err != 0) {
    707c:	4606      	mov	r6, r0
    707e:	b108      	cbz	r0, 7084 <sdhc_spi_cmd_r2+0x10>
}
    7080:	4630      	mov	r0, r6
    7082:	bd70      	pop	{r4, r5, r6, pc}
	r1 = sdhc_map_r1_status(sdhc_spi_skip_until_start(data));
    7084:	4628      	mov	r0, r5
    7086:	f00a ffa6 	bl	11fd6 <sdhc_spi_skip_until_start>
	if (flags < 0) {
    708a:	1e04      	subs	r4, r0, #0
    708c:	db0b      	blt.n	70a6 <sdhc_spi_cmd_r2+0x32>
    708e:	4b0b      	ldr	r3, [pc, #44]	; (70bc <sdhc_spi_cmd_r2+0x48>)
	for (; map->mask != 0U; map++) {
    7090:	781a      	ldrb	r2, [r3, #0]
    7092:	b132      	cbz	r2, 70a2 <sdhc_spi_cmd_r2+0x2e>
		if ((flags & map->mask) == map->mask) {
    7094:	43a2      	bics	r2, r4
    7096:	d001      	beq.n	709c <sdhc_spi_cmd_r2+0x28>
	for (; map->mask != 0U; map++) {
    7098:	3302      	adds	r3, #2
    709a:	e7f9      	b.n	7090 <sdhc_spi_cmd_r2+0x1c>
			return -map->err;
    709c:	785c      	ldrb	r4, [r3, #1]
    709e:	4264      	negs	r4, r4
    70a0:	e001      	b.n	70a6 <sdhc_spi_cmd_r2+0x32>
	return -map->err;
    70a2:	785c      	ldrb	r4, [r3, #1]
    70a4:	4264      	negs	r4, r4
	r2 = sdhc_spi_rx_u8(data);
    70a6:	4628      	mov	r0, r5
    70a8:	f00a fea7 	bl	11dfa <sdhc_spi_rx_u8>
    70ac:	4606      	mov	r6, r0
	sdhc_spi_rx_u8(data);
    70ae:	4628      	mov	r0, r5
    70b0:	f00a fea3 	bl	11dfa <sdhc_spi_rx_u8>
	if (r1 < 0) {
    70b4:	2c00      	cmp	r4, #0
    70b6:	dae3      	bge.n	7080 <sdhc_spi_cmd_r2+0xc>
		return r1;
    70b8:	4626      	mov	r6, r4
    70ba:	e7e1      	b.n	7080 <sdhc_spi_cmd_r2+0xc>
    70bc:	000166c0 	.word	0x000166c0

000070c0 <sdhc_spi_write>:
{
    70c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    70c4:	4604      	mov	r4, r0
    70c6:	4688      	mov	r8, r1
    70c8:	4617      	mov	r7, r2
    70ca:	461e      	mov	r6, r3
	err = sdhc_map_disk_status(data->status);
    70cc:	7c03      	ldrb	r3, [r0, #16]
	if (flags < 0) {
    70ce:	4820      	ldr	r0, [pc, #128]	; (7150 <sdhc_spi_write+0x90>)
	for (; map->mask != 0U; map++) {
    70d0:	7805      	ldrb	r5, [r0, #0]
    70d2:	b13d      	cbz	r5, 70e4 <sdhc_spi_write+0x24>
		if ((flags & map->mask) == map->mask) {
    70d4:	ea35 0203 	bics.w	r2, r5, r3
    70d8:	d001      	beq.n	70de <sdhc_spi_write+0x1e>
	for (; map->mask != 0U; map++) {
    70da:	3002      	adds	r0, #2
    70dc:	e7f8      	b.n	70d0 <sdhc_spi_write+0x10>
			return -map->err;
    70de:	7845      	ldrb	r5, [r0, #1]
    70e0:	426d      	negs	r5, r5
    70e2:	e001      	b.n	70e8 <sdhc_spi_write+0x28>
	return -map->err;
    70e4:	7845      	ldrb	r5, [r0, #1]
    70e6:	426d      	negs	r5, r5
	if (err != 0) {
    70e8:	b1e5      	cbz	r5, 7124 <sdhc_spi_write+0x64>
    70ea:	e027      	b.n	713c <sdhc_spi_write+0x7c>
			addr = sector;
    70ec:	463a      	mov	r2, r7
		err = sdhc_spi_cmd_r1(data, SDHC_WRITE_BLOCK, addr);
    70ee:	2118      	movs	r1, #24
    70f0:	4620      	mov	r0, r4
    70f2:	f7ff ff01 	bl	6ef8 <sdhc_spi_cmd_r1>
		if (err < 0) {
    70f6:	2800      	cmp	r0, #0
    70f8:	db1a      	blt.n	7130 <sdhc_spi_write+0x70>
		err = sdhc_spi_tx_block(data, (uint8_t *)buf,
    70fa:	f44f 7200 	mov.w	r2, #512	; 0x200
    70fe:	4641      	mov	r1, r8
    7100:	4620      	mov	r0, r4
    7102:	f7ff febb 	bl	6e7c <sdhc_spi_tx_block>
		if (err != 0) {
    7106:	b9e0      	cbnz	r0, 7142 <sdhc_spi_write+0x82>
		err = sdhc_spi_skip_until_ready(data);
    7108:	4620      	mov	r0, r4
    710a:	f00a fec9 	bl	11ea0 <sdhc_spi_skip_until_ready>
		if (err != 0) {
    710e:	b9d0      	cbnz	r0, 7146 <sdhc_spi_write+0x86>
		err = sdhc_spi_cmd_r2(data, SDHC_SEND_STATUS, 0);
    7110:	2200      	movs	r2, #0
    7112:	210d      	movs	r1, #13
    7114:	4620      	mov	r0, r4
    7116:	f7ff ffad 	bl	7074 <sdhc_spi_cmd_r2>
		if (err != 0) {
    711a:	b9b0      	cbnz	r0, 714a <sdhc_spi_write+0x8a>
		buf += SDMMC_DEFAULT_BLOCK_SIZE;
    711c:	f508 7800 	add.w	r8, r8, #512	; 0x200
		sector++;
    7120:	3701      	adds	r7, #1
	for (; count != 0U; count--) {
    7122:	3e01      	subs	r6, #1
    7124:	b12e      	cbz	r6, 7132 <sdhc_spi_write+0x72>
		if (data->high_capacity) {
    7126:	7a23      	ldrb	r3, [r4, #8]
    7128:	2b00      	cmp	r3, #0
    712a:	d1df      	bne.n	70ec <sdhc_spi_write+0x2c>
			addr = sector * SDMMC_DEFAULT_BLOCK_SIZE;
    712c:	027a      	lsls	r2, r7, #9
    712e:	e7de      	b.n	70ee <sdhc_spi_write+0x2e>
		err = sdhc_spi_cmd_r1(data, SDHC_WRITE_BLOCK, addr);
    7130:	4605      	mov	r5, r0
	spi_release(data->spi, data->spi_cfg);
    7132:	6820      	ldr	r0, [r4, #0]
    7134:	6861      	ldr	r1, [r4, #4]
	const struct spi_driver_api *api =
    7136:	6883      	ldr	r3, [r0, #8]
	return api->release(dev, config);
    7138:	685b      	ldr	r3, [r3, #4]
    713a:	4798      	blx	r3
}
    713c:	4628      	mov	r0, r5
    713e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = sdhc_spi_tx_block(data, (uint8_t *)buf,
    7142:	4605      	mov	r5, r0
    7144:	e7f5      	b.n	7132 <sdhc_spi_write+0x72>
		err = sdhc_spi_skip_until_ready(data);
    7146:	4605      	mov	r5, r0
    7148:	e7f3      	b.n	7132 <sdhc_spi_write+0x72>
		err = sdhc_spi_cmd_r2(data, SDHC_SEND_STATUS, 0);
    714a:	4605      	mov	r5, r0
    714c:	e7f1      	b.n	7132 <sdhc_spi_write+0x72>
    714e:	bf00      	nop
    7150:	00016678 	.word	0x00016678

00007154 <sdhc_spi_cmd_r7_idle>:
{
    7154:	b508      	push	{r3, lr}
	return sdhc_map_r1_idle_status(
    7156:	f00b f82a 	bl	121ae <sdhc_spi_cmd_r37_raw>
	if (status < 0) {
    715a:	2800      	cmp	r0, #0
    715c:	db0d      	blt.n	717a <sdhc_spi_cmd_r7_idle+0x26>
	if (status == SDHC_R1_IDLE) {
    715e:	2801      	cmp	r0, #1
    7160:	d00c      	beq.n	717c <sdhc_spi_cmd_r7_idle+0x28>
    7162:	4b07      	ldr	r3, [pc, #28]	; (7180 <sdhc_spi_cmd_r7_idle+0x2c>)
	for (; map->mask != 0U; map++) {
    7164:	781a      	ldrb	r2, [r3, #0]
    7166:	b132      	cbz	r2, 7176 <sdhc_spi_cmd_r7_idle+0x22>
		if ((flags & map->mask) == map->mask) {
    7168:	4382      	bics	r2, r0
    716a:	d001      	beq.n	7170 <sdhc_spi_cmd_r7_idle+0x1c>
	for (; map->mask != 0U; map++) {
    716c:	3302      	adds	r3, #2
    716e:	e7f9      	b.n	7164 <sdhc_spi_cmd_r7_idle+0x10>
			return -map->err;
    7170:	7858      	ldrb	r0, [r3, #1]
    7172:	4240      	negs	r0, r0
    7174:	e001      	b.n	717a <sdhc_spi_cmd_r7_idle+0x26>
	return -map->err;
    7176:	7858      	ldrb	r0, [r3, #1]
    7178:	4240      	negs	r0, r0
}
    717a:	bd08      	pop	{r3, pc}
		return 0;
    717c:	2000      	movs	r0, #0
	return sdhc_map_r1_idle_status(
    717e:	e7fc      	b.n	717a <sdhc_spi_cmd_r7_idle+0x26>
    7180:	000166c0 	.word	0x000166c0

00007184 <sdhc_spi_cmd_r3>:
{
    7184:	b508      	push	{r3, lr}
	return sdhc_map_r1_status(
    7186:	f00b f812 	bl	121ae <sdhc_spi_cmd_r37_raw>
	if (flags < 0) {
    718a:	2800      	cmp	r0, #0
    718c:	db0b      	blt.n	71a6 <sdhc_spi_cmd_r3+0x22>
    718e:	4b06      	ldr	r3, [pc, #24]	; (71a8 <sdhc_spi_cmd_r3+0x24>)
	for (; map->mask != 0U; map++) {
    7190:	781a      	ldrb	r2, [r3, #0]
    7192:	b132      	cbz	r2, 71a2 <sdhc_spi_cmd_r3+0x1e>
		if ((flags & map->mask) == map->mask) {
    7194:	4382      	bics	r2, r0
    7196:	d001      	beq.n	719c <sdhc_spi_cmd_r3+0x18>
	for (; map->mask != 0U; map++) {
    7198:	3302      	adds	r3, #2
    719a:	e7f9      	b.n	7190 <sdhc_spi_cmd_r3+0xc>
			return -map->err;
    719c:	7858      	ldrb	r0, [r3, #1]
    719e:	4240      	negs	r0, r0
    71a0:	e001      	b.n	71a6 <sdhc_spi_cmd_r3+0x22>
	return -map->err;
    71a2:	7858      	ldrb	r0, [r3, #1]
    71a4:	4240      	negs	r0, r0
}
    71a6:	bd08      	pop	{r3, pc}
    71a8:	000166c0 	.word	0x000166c0

000071ac <sdhc_spi_skip>:
{
    71ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    71b0:	b083      	sub	sp, #12
    71b2:	4606      	mov	r6, r0
    71b4:	460d      	mov	r5, r1
	return z_impl_k_uptime_ticks();
    71b6:	f00d fc04 	bl	149c2 <z_impl_k_uptime_ticks>
		} else {
			return (t * to_hz + off) / from_hz;
    71ba:	014b      	lsls	r3, r1, #5
    71bc:	0142      	lsls	r2, r0, #5
    71be:	ea43 64d0 	orr.w	r4, r3, r0, lsr #27
    71c2:	1a13      	subs	r3, r2, r0
    71c4:	eb64 0201 	sbc.w	r2, r4, r1
    71c8:	0094      	lsls	r4, r2, #2
    71ca:	ea44 7493 	orr.w	r4, r4, r3, lsr #30
    71ce:	009f      	lsls	r7, r3, #2
    71d0:	4622      	mov	r2, r4
    71d2:	183b      	adds	r3, r7, r0
    71d4:	eb41 0202 	adc.w	r2, r1, r2
    71d8:	00d1      	lsls	r1, r2, #3
    71da:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
    71de:	00d8      	lsls	r0, r3, #3
    71e0:	0bc3      	lsrs	r3, r0, #15
    71e2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17

/* Initialises a retry helper */
static inline void sdhc_retry_init(struct sdhc_retry *retry, uint32_t timeout,
			    uint16_t sleep)
{
	retry->end = k_uptime_get_32() + timeout;
    71e6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
    71ea:	9300      	str	r3, [sp, #0]
	retry->tries = 0;
    71ec:	2300      	movs	r3, #0
    71ee:	f8ad 3004 	strh.w	r3, [sp, #4]
	retry->sleep = sleep;
    71f2:	f8ad 3006 	strh.w	r3, [sp, #6]
}
    71f6:	e008      	b.n	720a <sdhc_spi_skip+0x5e>
static inline bool sdhc_retry_ok(struct sdhc_retry *retry)
{
	int32_t remain = retry->end - k_uptime_get_32();

	if (retry->tries < SDHC_MIN_TRIES) {
		retry->tries++;
    71f8:	3201      	adds	r2, #1
    71fa:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (retry->sleep != 0U) {
    71fe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7202:	bb5b      	cbnz	r3, 725c <sdhc_spi_skip+0xb0>
			k_msleep(retry->sleep);
		}

		return true;
    7204:	2301      	movs	r3, #1
	} while (sdhc_retry_ok(&retry));
    7206:	2b00      	cmp	r3, #0
    7208:	d05f      	beq.n	72ca <sdhc_spi_skip+0x11e>
		err = sdhc_spi_rx_u8(data);
    720a:	4630      	mov	r0, r6
    720c:	f00a fdf5 	bl	11dfa <sdhc_spi_rx_u8>
		if (err != discard) {
    7210:	42a8      	cmp	r0, r5
    7212:	d16d      	bne.n	72f0 <sdhc_spi_skip+0x144>
	int32_t remain = retry->end - k_uptime_get_32();
    7214:	9c00      	ldr	r4, [sp, #0]
    7216:	f00d fbd4 	bl	149c2 <z_impl_k_uptime_ticks>
    721a:	014b      	lsls	r3, r1, #5
    721c:	0142      	lsls	r2, r0, #5
    721e:	ea43 67d0 	orr.w	r7, r3, r0, lsr #27
    7222:	1a13      	subs	r3, r2, r0
    7224:	eb67 0201 	sbc.w	r2, r7, r1
    7228:	0097      	lsls	r7, r2, #2
    722a:	ea47 7793 	orr.w	r7, r7, r3, lsr #30
    722e:	ea4f 0c83 	mov.w	ip, r3, lsl #2
    7232:	463a      	mov	r2, r7
    7234:	eb1c 0300 	adds.w	r3, ip, r0
    7238:	eb41 0202 	adc.w	r2, r1, r2
    723c:	00d1      	lsls	r1, r2, #3
    723e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
    7242:	00d8      	lsls	r0, r3, #3
    7244:	0bc3      	lsrs	r3, r0, #15
    7246:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    724a:	1ae3      	subs	r3, r4, r3
	if (retry->tries < SDHC_MIN_TRIES) {
    724c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
    7250:	2a13      	cmp	r2, #19
    7252:	ddd1      	ble.n	71f8 <sdhc_spi_skip+0x4c>
	}

	if (remain >= 0) {
    7254:	2b00      	cmp	r3, #0
    7256:	da19      	bge.n	728c <sdhc_spi_skip+0xe0>
		}

		return true;
	}

	return false;
    7258:	2300      	movs	r3, #0
    725a:	e7d4      	b.n	7206 <sdhc_spi_skip+0x5a>
    725c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    7260:	ea4f 79e3 	mov.w	r9, r3, asr #31
    7264:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    7268:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    726c:	03d8      	lsls	r0, r3, #15
    726e:	f240 34e7 	movw	r4, #999	; 0x3e7
    7272:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7276:	2300      	movs	r3, #0
    7278:	1900      	adds	r0, r0, r4
    727a:	f04f 0400 	mov.w	r4, #0
    727e:	eb44 0101 	adc.w	r1, r4, r1
    7282:	f7f9 fea7 	bl	fd4 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    7286:	f008 fb73 	bl	f970 <z_impl_k_sleep>
    728a:	e7bb      	b.n	7204 <sdhc_spi_skip+0x58>
		if (retry->sleep > 0) {
    728c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7290:	b1c3      	cbz	r3, 72c4 <sdhc_spi_skip+0x118>
    7292:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    7296:	ea4f 79e3 	mov.w	r9, r3, asr #31
    729a:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    729e:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    72a2:	03d8      	lsls	r0, r3, #15
    72a4:	f240 34e7 	movw	r4, #999	; 0x3e7
    72a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    72ac:	2300      	movs	r3, #0
    72ae:	1900      	adds	r0, r0, r4
    72b0:	f04f 0400 	mov.w	r4, #0
    72b4:	eb44 0101 	adc.w	r1, r4, r1
    72b8:	f7f9 fe8c 	bl	fd4 <__aeabi_uldivmod>
    72bc:	f008 fb58 	bl	f970 <z_impl_k_sleep>
		return true;
    72c0:	2301      	movs	r3, #1
    72c2:	e7a0      	b.n	7206 <sdhc_spi_skip+0x5a>
	z_impl_k_yield();
    72c4:	f008 fa24 	bl	f710 <z_impl_k_yield>
}
    72c8:	e7fa      	b.n	72c0 <sdhc_spi_skip+0x114>
    72ca:	4b0b      	ldr	r3, [pc, #44]	; (72f8 <sdhc_spi_skip+0x14c>)
    72cc:	4a0b      	ldr	r2, [pc, #44]	; (72fc <sdhc_spi_skip+0x150>)
    72ce:	1a9b      	subs	r3, r3, r2
    72d0:	08db      	lsrs	r3, r3, #3
	LOG_WRN("Timeout while waiting for !%d", discard);
    72d2:	f04f 0200 	mov.w	r2, #0
    72d6:	2102      	movs	r1, #2
    72d8:	f361 0202 	bfi	r2, r1, #0, #3
    72dc:	f36f 02c5 	bfc	r2, #3, #3
    72e0:	f363 128f 	bfi	r2, r3, #6, #10
    72e4:	4629      	mov	r1, r5
    72e6:	4806      	ldr	r0, [pc, #24]	; (7300 <sdhc_spi_skip+0x154>)
    72e8:	f7fd f9e2 	bl	46b0 <log_1>
	return -ETIMEDOUT;
    72ec:	f06f 0073 	mvn.w	r0, #115	; 0x73
}
    72f0:	b003      	add	sp, #12
    72f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    72f6:	bf00      	nop
    72f8:	000157bc 	.word	0x000157bc
    72fc:	00015774 	.word	0x00015774
    7300:	000165d4 	.word	0x000165d4

00007304 <sdhc_spi_rx_block>:
{
    7304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7308:	b08c      	sub	sp, #48	; 0x30
    730a:	4606      	mov	r6, r0
    730c:	4689      	mov	r9, r1
    730e:	4690      	mov	r8, r2
	token = sdhc_spi_skip(data, 0xFF);
    7310:	21ff      	movs	r1, #255	; 0xff
    7312:	f7ff ff4b 	bl	71ac <sdhc_spi_skip>
	if (token < 0) {
    7316:	1e04      	subs	r4, r0, #0
    7318:	db32      	blt.n	7380 <sdhc_spi_rx_block+0x7c>
	if (token != SDHC_TOKEN_SINGLE) {
    731a:	2cfe      	cmp	r4, #254	; 0xfe
    731c:	d143      	bne.n	73a6 <sdhc_spi_rx_block+0xa2>
	for (i = 0; i < len; i += sizeof(sdhc_ones)) {
    731e:	2500      	movs	r5, #0
    7320:	4545      	cmp	r5, r8
    7322:	da26      	bge.n	7372 <sdhc_spi_rx_block+0x6e>
		int remain = MIN(sizeof(sdhc_ones), len - i);
    7324:	eba8 0405 	sub.w	r4, r8, r5
    7328:	2c40      	cmp	r4, #64	; 0x40
    732a:	bf28      	it	cs
    732c:	2440      	movcs	r4, #64	; 0x40
		struct spi_buf tx_bufs[] = {
    732e:	4b1f      	ldr	r3, [pc, #124]	; (73ac <sdhc_spi_rx_block+0xa8>)
    7330:	9303      	str	r3, [sp, #12]
    7332:	9404      	str	r4, [sp, #16]
		const struct spi_buf_set tx = {
    7334:	ab03      	add	r3, sp, #12
    7336:	9305      	str	r3, [sp, #20]
    7338:	2301      	movs	r3, #1
    733a:	9306      	str	r3, [sp, #24]
				.buf = &buf[i],
    733c:	eb09 0705 	add.w	r7, r9, r5
		struct spi_buf rx_bufs[] = {
    7340:	9707      	str	r7, [sp, #28]
    7342:	9408      	str	r4, [sp, #32]
		const struct spi_buf_set rx = {
    7344:	aa07      	add	r2, sp, #28
    7346:	9209      	str	r2, [sp, #36]	; 0x24
    7348:	930a      	str	r3, [sp, #40]	; 0x28
		err = sdhc_spi_trace(data, -1,
    734a:	6830      	ldr	r0, [r6, #0]
    734c:	6871      	ldr	r1, [r6, #4]
	const struct spi_driver_api *api =
    734e:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    7350:	f8d3 a000 	ldr.w	sl, [r3]
    7354:	ab09      	add	r3, sp, #36	; 0x24
    7356:	aa05      	add	r2, sp, #20
    7358:	47d0      	blx	sl
    735a:	4602      	mov	r2, r0
    735c:	9400      	str	r4, [sp, #0]
    735e:	463b      	mov	r3, r7
    7360:	f04f 31ff 	mov.w	r1, #4294967295
    7364:	4630      	mov	r0, r6
    7366:	f00a fd46 	bl	11df6 <sdhc_spi_trace>
		if (err != 0) {
    736a:	4604      	mov	r4, r0
    736c:	b940      	cbnz	r0, 7380 <sdhc_spi_rx_block+0x7c>
	for (i = 0; i < len; i += sizeof(sdhc_ones)) {
    736e:	3540      	adds	r5, #64	; 0x40
    7370:	e7d6      	b.n	7320 <sdhc_spi_rx_block+0x1c>
	err = sdhc_spi_rx_bytes(data, crc, sizeof(crc));
    7372:	2203      	movs	r2, #3
    7374:	a90b      	add	r1, sp, #44	; 0x2c
    7376:	4630      	mov	r0, r6
    7378:	f7ff fd18 	bl	6dac <sdhc_spi_rx_bytes>
	if (err != 0) {
    737c:	4604      	mov	r4, r0
    737e:	b118      	cbz	r0, 7388 <sdhc_spi_rx_block+0x84>
}
    7380:	4620      	mov	r0, r4
    7382:	b00c      	add	sp, #48	; 0x30
    7384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_be16(const uint8_t src[2])
{
	return ((uint16_t)src[0] << 8) | src[1];
    7388:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    738c:	f89d 502d 	ldrb.w	r5, [sp, #45]	; 0x2d
    7390:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	if (sys_get_be16(crc) != crc16_itu_t(0, buf, len)) {
    7394:	4642      	mov	r2, r8
    7396:	4649      	mov	r1, r9
    7398:	f009 fded 	bl	10f76 <crc16_itu_t>
    739c:	42a8      	cmp	r0, r5
    739e:	d0ef      	beq.n	7380 <sdhc_spi_rx_block+0x7c>
		return -EILSEQ;
    73a0:	f06f 0489 	mvn.w	r4, #137	; 0x89
    73a4:	e7ec      	b.n	7380 <sdhc_spi_rx_block+0x7c>
		return -EIO;
    73a6:	f06f 0404 	mvn.w	r4, #4
    73aa:	e7e9      	b.n	7380 <sdhc_spi_rx_block+0x7c>
    73ac:	00016680 	.word	0x00016680

000073b0 <sdhc_spi_read>:
{
    73b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    73b4:	4680      	mov	r8, r0
    73b6:	460f      	mov	r7, r1
    73b8:	461e      	mov	r6, r3
	err = sdhc_map_disk_status(data->status);
    73ba:	7c03      	ldrb	r3, [r0, #16]
	if (flags < 0) {
    73bc:	4c1b      	ldr	r4, [pc, #108]	; (742c <sdhc_spi_read+0x7c>)
	for (; map->mask != 0U; map++) {
    73be:	7825      	ldrb	r5, [r4, #0]
    73c0:	b13d      	cbz	r5, 73d2 <sdhc_spi_read+0x22>
		if ((flags & map->mask) == map->mask) {
    73c2:	ea35 0103 	bics.w	r1, r5, r3
    73c6:	d001      	beq.n	73cc <sdhc_spi_read+0x1c>
	for (; map->mask != 0U; map++) {
    73c8:	3402      	adds	r4, #2
    73ca:	e7f8      	b.n	73be <sdhc_spi_read+0xe>
			return -map->err;
    73cc:	7864      	ldrb	r4, [r4, #1]
    73ce:	4264      	negs	r4, r4
    73d0:	e001      	b.n	73d6 <sdhc_spi_read+0x26>
	return -map->err;
    73d2:	7864      	ldrb	r4, [r4, #1]
    73d4:	4264      	negs	r4, r4
	if (err != 0) {
    73d6:	bb34      	cbnz	r4, 7426 <sdhc_spi_read+0x76>
	if (data->high_capacity) {
    73d8:	f898 3008 	ldrb.w	r3, [r8, #8]
    73dc:	b903      	cbnz	r3, 73e0 <sdhc_spi_read+0x30>
		addr = sector * SDMMC_DEFAULT_BLOCK_SIZE;
    73de:	0252      	lsls	r2, r2, #9
	err = sdhc_spi_cmd_r1(data, SDHC_READ_MULTIPLE_BLOCK, addr);
    73e0:	2112      	movs	r1, #18
    73e2:	4640      	mov	r0, r8
    73e4:	f7ff fd88 	bl	6ef8 <sdhc_spi_cmd_r1>
	if (err != 0) {
    73e8:	4604      	mov	r4, r0
    73ea:	b9a8      	cbnz	r0, 7418 <sdhc_spi_read+0x68>
	for (; count != 0U; count--) {
    73ec:	b15e      	cbz	r6, 7406 <sdhc_spi_read+0x56>
		err = sdhc_spi_rx_block(data, buf, SDMMC_DEFAULT_BLOCK_SIZE);
    73ee:	f44f 7200 	mov.w	r2, #512	; 0x200
    73f2:	4639      	mov	r1, r7
    73f4:	4640      	mov	r0, r8
    73f6:	f7ff ff85 	bl	7304 <sdhc_spi_rx_block>
		if (err != 0) {
    73fa:	4604      	mov	r4, r0
    73fc:	b960      	cbnz	r0, 7418 <sdhc_spi_read+0x68>
		buf += SDMMC_DEFAULT_BLOCK_SIZE;
    73fe:	f507 7700 	add.w	r7, r7, #512	; 0x200
	for (; count != 0U; count--) {
    7402:	3e01      	subs	r6, #1
    7404:	e7f2      	b.n	73ec <sdhc_spi_read+0x3c>
	sdhc_spi_cmd_r1(data, SDHC_STOP_TRANSMISSION, 0);
    7406:	2200      	movs	r2, #0
    7408:	210c      	movs	r1, #12
    740a:	4640      	mov	r0, r8
    740c:	f7ff fd74 	bl	6ef8 <sdhc_spi_cmd_r1>
	err = sdhc_spi_skip_until_ready(data);
    7410:	4640      	mov	r0, r8
    7412:	f00a fd45 	bl	11ea0 <sdhc_spi_skip_until_ready>
    7416:	4604      	mov	r4, r0
	spi_release(data->spi, data->spi_cfg);
    7418:	f8d8 0000 	ldr.w	r0, [r8]
    741c:	f8d8 1004 	ldr.w	r1, [r8, #4]
	const struct spi_driver_api *api =
    7420:	6883      	ldr	r3, [r0, #8]
	return api->release(dev, config);
    7422:	685b      	ldr	r3, [r3, #4]
    7424:	4798      	blx	r3
}
    7426:	4620      	mov	r0, r4
    7428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    742c:	00016678 	.word	0x00016678

00007430 <sdhc_spi_detect>:
{
    7430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7434:	b093      	sub	sp, #76	; 0x4c
    7436:	4606      	mov	r6, r0
	struct sdhc_spi_data *data = dev->data;
    7438:	6905      	ldr	r5, [r0, #16]
	sdhc_spi_set_status(dev, DISK_STATUS_UNINIT);
    743a:	2101      	movs	r1, #1
    743c:	f00a fcd0 	bl	11de0 <sdhc_spi_set_status>
	return z_impl_k_uptime_ticks();
    7440:	f00d fabf 	bl	149c2 <z_impl_k_uptime_ticks>
    7444:	014b      	lsls	r3, r1, #5
    7446:	0142      	lsls	r2, r0, #5
    7448:	ea43 64d0 	orr.w	r4, r3, r0, lsr #27
    744c:	1a13      	subs	r3, r2, r0
    744e:	eb64 0201 	sbc.w	r2, r4, r1
    7452:	0094      	lsls	r4, r2, #2
    7454:	ea44 7493 	orr.w	r4, r4, r3, lsr #30
    7458:	009f      	lsls	r7, r3, #2
    745a:	4622      	mov	r2, r4
    745c:	183b      	adds	r3, r7, r0
    745e:	eb41 0202 	adc.w	r2, r1, r2
    7462:	00d1      	lsls	r1, r2, #3
    7464:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
    7468:	00d8      	lsls	r0, r3, #3
    746a:	0bc3      	lsrs	r3, r0, #15
    746c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	retry->end = k_uptime_get_32() + timeout;
    7470:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
    7474:	3308      	adds	r3, #8
    7476:	930f      	str	r3, [sp, #60]	; 0x3c
	retry->tries = 0;
    7478:	2300      	movs	r3, #0
    747a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
	retry->sleep = sleep;
    747e:	2314      	movs	r3, #20
    7480:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
}
    7484:	e015      	b.n	74b2 <sdhc_spi_detect+0x82>
			err = sdhc_spi_check_interface(data);
    7486:	4628      	mov	r0, r5
    7488:	f00a febd 	bl	12206 <sdhc_spi_check_interface>
    748c:	4607      	mov	r7, r0
	err = sdhc_spi_cmd_r1_idle(data, SDHC_CRC_ON_OFF, 1);
    748e:	2201      	movs	r2, #1
    7490:	213b      	movs	r1, #59	; 0x3b
    7492:	4628      	mov	r0, r5
    7494:	f7ff fdc2 	bl	701c <sdhc_spi_cmd_r1_idle>
	if (err != 0) {
    7498:	4604      	mov	r4, r0
    749a:	2800      	cmp	r0, #0
    749c:	d07a      	beq.n	7594 <sdhc_spi_detect+0x164>
    749e:	e06a      	b.n	7576 <sdhc_spi_detect+0x146>
		retry->tries++;
    74a0:	3201      	adds	r2, #1
    74a2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		if (retry->sleep != 0U) {
    74a6:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    74aa:	bb5b      	cbnz	r3, 7504 <sdhc_spi_detect+0xd4>
		return true;
    74ac:	2301      	movs	r3, #1
		if (!sdhc_retry_ok(&retry)) {
    74ae:	2b00      	cmp	r3, #0
    74b0:	d05f      	beq.n	7572 <sdhc_spi_detect+0x142>
		err = sdhc_spi_go_idle(data);
    74b2:	4628      	mov	r0, r5
    74b4:	f7ff fdca 	bl	704c <sdhc_spi_go_idle>
		if (err == 0) {
    74b8:	2800      	cmp	r0, #0
    74ba:	d0e4      	beq.n	7486 <sdhc_spi_detect+0x56>
	int32_t remain = retry->end - k_uptime_get_32();
    74bc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    74be:	f00d fa80 	bl	149c2 <z_impl_k_uptime_ticks>
    74c2:	014b      	lsls	r3, r1, #5
    74c4:	0142      	lsls	r2, r0, #5
    74c6:	ea43 67d0 	orr.w	r7, r3, r0, lsr #27
    74ca:	1a13      	subs	r3, r2, r0
    74cc:	eb67 0201 	sbc.w	r2, r7, r1
    74d0:	0097      	lsls	r7, r2, #2
    74d2:	ea47 7793 	orr.w	r7, r7, r3, lsr #30
    74d6:	ea4f 0c83 	mov.w	ip, r3, lsl #2
    74da:	463a      	mov	r2, r7
    74dc:	eb1c 0300 	adds.w	r3, ip, r0
    74e0:	eb41 0202 	adc.w	r2, r1, r2
    74e4:	00d1      	lsls	r1, r2, #3
    74e6:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
    74ea:	00d8      	lsls	r0, r3, #3
    74ec:	0bc3      	lsrs	r3, r0, #15
    74ee:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    74f2:	1ae3      	subs	r3, r4, r3
	if (retry->tries < SDHC_MIN_TRIES) {
    74f4:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
    74f8:	2a13      	cmp	r2, #19
    74fa:	ddd1      	ble.n	74a0 <sdhc_spi_detect+0x70>
	if (remain >= 0) {
    74fc:	2b00      	cmp	r3, #0
    74fe:	da19      	bge.n	7534 <sdhc_spi_detect+0x104>
	return false;
    7500:	2300      	movs	r3, #0
    7502:	e7d4      	b.n	74ae <sdhc_spi_detect+0x7e>
    7504:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    7508:	ea4f 79e3 	mov.w	r9, r3, asr #31
    750c:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    7510:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    7514:	03d8      	lsls	r0, r3, #15
    7516:	f240 34e7 	movw	r4, #999	; 0x3e7
    751a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    751e:	2300      	movs	r3, #0
    7520:	1900      	adds	r0, r0, r4
    7522:	f04f 0400 	mov.w	r4, #0
    7526:	eb44 0101 	adc.w	r1, r4, r1
    752a:	f7f9 fd53 	bl	fd4 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    752e:	f008 fa1f 	bl	f970 <z_impl_k_sleep>
    7532:	e7bb      	b.n	74ac <sdhc_spi_detect+0x7c>
		if (retry->sleep > 0) {
    7534:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    7538:	b1c3      	cbz	r3, 756c <sdhc_spi_detect+0x13c>
    753a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    753e:	ea4f 79e3 	mov.w	r9, r3, asr #31
    7542:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    7546:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    754a:	03d8      	lsls	r0, r3, #15
    754c:	f240 34e7 	movw	r4, #999	; 0x3e7
    7550:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7554:	2300      	movs	r3, #0
    7556:	1900      	adds	r0, r0, r4
    7558:	f04f 0400 	mov.w	r4, #0
    755c:	eb44 0101 	adc.w	r1, r4, r1
    7560:	f7f9 fd38 	bl	fd4 <__aeabi_uldivmod>
    7564:	f008 fa04 	bl	f970 <z_impl_k_sleep>
		return true;
    7568:	2301      	movs	r3, #1
    756a:	e7a0      	b.n	74ae <sdhc_spi_detect+0x7e>
	z_impl_k_yield();
    756c:	f008 f8d0 	bl	f710 <z_impl_k_yield>
}
    7570:	e7fa      	b.n	7568 <sdhc_spi_detect+0x138>
			return -ENOENT;
    7572:	f06f 0401 	mvn.w	r4, #1
}
    7576:	4620      	mov	r0, r4
    7578:	b013      	add	sp, #76	; 0x4c
    757a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = sdhc_spi_cmd_r1(data, SDHC_SEND_OP_COND, is_v2 ? SDHC_HCS : 0);
    757e:	2200      	movs	r2, #0
    7580:	e011      	b.n	75a6 <sdhc_spi_detect+0x176>
		retry->tries++;
    7582:	3201      	adds	r2, #1
    7584:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		if (retry->sleep != 0U) {
    7588:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    758c:	bbbb      	cbnz	r3, 75fe <sdhc_spi_detect+0x1ce>
		return true;
    758e:	2301      	movs	r3, #1
	} while (sdhc_retry_ok(&retry));
    7590:	2b00      	cmp	r3, #0
    7592:	d06b      	beq.n	766c <sdhc_spi_detect+0x23c>
		sdhc_spi_cmd_r1_raw(data, SDHC_APP_CMD, 0);
    7594:	2200      	movs	r2, #0
    7596:	2137      	movs	r1, #55	; 0x37
    7598:	4628      	mov	r0, r5
    759a:	f00a fdaa 	bl	120f2 <sdhc_spi_cmd_r1_raw>
		err = sdhc_spi_cmd_r1(data, SDHC_SEND_OP_COND, is_v2 ? SDHC_HCS : 0);
    759e:	2f00      	cmp	r7, #0
    75a0:	d1ed      	bne.n	757e <sdhc_spi_detect+0x14e>
    75a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    75a6:	2129      	movs	r1, #41	; 0x29
    75a8:	4628      	mov	r0, r5
    75aa:	f7ff fca5 	bl	6ef8 <sdhc_spi_cmd_r1>
		if (err == 0) {
    75ae:	4680      	mov	r8, r0
    75b0:	2800      	cmp	r0, #0
    75b2:	d05b      	beq.n	766c <sdhc_spi_detect+0x23c>
	int32_t remain = retry->end - k_uptime_get_32();
    75b4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return z_impl_k_uptime_ticks();
    75b6:	f00d fa04 	bl	149c2 <z_impl_k_uptime_ticks>
    75ba:	014b      	lsls	r3, r1, #5
    75bc:	0142      	lsls	r2, r0, #5
    75be:	ea43 6cd0 	orr.w	ip, r3, r0, lsr #27
    75c2:	1a13      	subs	r3, r2, r0
    75c4:	eb6c 0201 	sbc.w	r2, ip, r1
    75c8:	ea4f 0c82 	mov.w	ip, r2, lsl #2
    75cc:	ea4c 7c93 	orr.w	ip, ip, r3, lsr #30
    75d0:	ea4f 0e83 	mov.w	lr, r3, lsl #2
    75d4:	4662      	mov	r2, ip
    75d6:	eb1e 0300 	adds.w	r3, lr, r0
    75da:	eb41 0202 	adc.w	r2, r1, r2
    75de:	00d1      	lsls	r1, r2, #3
    75e0:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
    75e4:	00d8      	lsls	r0, r3, #3
    75e6:	0bc3      	lsrs	r3, r0, #15
    75e8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    75ec:	1ae3      	subs	r3, r4, r3
	if (retry->tries < SDHC_MIN_TRIES) {
    75ee:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
    75f2:	2a13      	cmp	r2, #19
    75f4:	ddc5      	ble.n	7582 <sdhc_spi_detect+0x152>
	if (remain >= 0) {
    75f6:	2b00      	cmp	r3, #0
    75f8:	da19      	bge.n	762e <sdhc_spi_detect+0x1fe>
	return false;
    75fa:	2300      	movs	r3, #0
    75fc:	e7c8      	b.n	7590 <sdhc_spi_detect+0x160>
    75fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    7602:	ea4f 7be3 	mov.w	fp, r3, asr #31
    7606:	ea4f 31cb 	mov.w	r1, fp, lsl #15
    760a:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    760e:	03d8      	lsls	r0, r3, #15
    7610:	f240 34e7 	movw	r4, #999	; 0x3e7
    7614:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7618:	2300      	movs	r3, #0
    761a:	1900      	adds	r0, r0, r4
    761c:	f04f 0400 	mov.w	r4, #0
    7620:	eb44 0101 	adc.w	r1, r4, r1
    7624:	f7f9 fcd6 	bl	fd4 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    7628:	f008 f9a2 	bl	f970 <z_impl_k_sleep>
    762c:	e7af      	b.n	758e <sdhc_spi_detect+0x15e>
		if (retry->sleep > 0) {
    762e:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    7632:	b1c3      	cbz	r3, 7666 <sdhc_spi_detect+0x236>
    7634:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    7638:	ea4f 7be3 	mov.w	fp, r3, asr #31
    763c:	ea4f 31cb 	mov.w	r1, fp, lsl #15
    7640:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    7644:	03d8      	lsls	r0, r3, #15
    7646:	f240 34e7 	movw	r4, #999	; 0x3e7
    764a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    764e:	2300      	movs	r3, #0
    7650:	1900      	adds	r0, r0, r4
    7652:	f04f 0400 	mov.w	r4, #0
    7656:	eb44 0101 	adc.w	r1, r4, r1
    765a:	f7f9 fcbb 	bl	fd4 <__aeabi_uldivmod>
    765e:	f008 f987 	bl	f970 <z_impl_k_sleep>
		return true;
    7662:	2301      	movs	r3, #1
    7664:	e794      	b.n	7590 <sdhc_spi_detect+0x160>
	z_impl_k_yield();
    7666:	f008 f853 	bl	f710 <z_impl_k_yield>
}
    766a:	e7fa      	b.n	7662 <sdhc_spi_detect+0x232>
	if (err != 0) {
    766c:	f1b8 0f00 	cmp.w	r8, #0
    7670:	f040 8147 	bne.w	7902 <sdhc_spi_detect+0x4d2>
	ocr = 0;
    7674:	2300      	movs	r3, #0
    7676:	9311      	str	r3, [sp, #68]	; 0x44
	if (is_v2) {
    7678:	b367      	cbz	r7, 76d4 <sdhc_spi_detect+0x2a4>
	if ((ocr & SDHC_CCS) != 0U) {
    767a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    767c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    7680:	f000 8090 	beq.w	77a4 <sdhc_spi_detect+0x374>
		data->high_capacity = true;
    7684:	2301      	movs	r3, #1
    7686:	722b      	strb	r3, [r5, #8]
	err = sdhc_spi_cmd_r1(data, SDHC_SEND_CSD, 0);
    7688:	2200      	movs	r2, #0
    768a:	2109      	movs	r1, #9
    768c:	4628      	mov	r0, r5
    768e:	f7ff fc33 	bl	6ef8 <sdhc_spi_cmd_r1>
	if (err != 0) {
    7692:	4604      	mov	r4, r0
    7694:	2800      	cmp	r0, #0
    7696:	f47f af6e 	bne.w	7576 <sdhc_spi_detect+0x146>
	err = sdhc_spi_rx_block(data, buf, sizeof(buf));
    769a:	2210      	movs	r2, #16
    769c:	a90b      	add	r1, sp, #44	; 0x2c
    769e:	4628      	mov	r0, r5
    76a0:	f7ff fe30 	bl	7304 <sdhc_spi_rx_block>
	if (err != 0) {
    76a4:	4604      	mov	r4, r0
    76a6:	2800      	cmp	r0, #0
    76a8:	f47f af65 	bne.w	7576 <sdhc_spi_detect+0x146>
	structure = (buf[0] >> 6);
    76ac:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	switch (structure) {
    76b0:	099b      	lsrs	r3, r3, #6
    76b2:	f000 8084 	beq.w	77be <sdhc_spi_detect+0x38e>
    76b6:	2b01      	cmp	r3, #1
    76b8:	f000 810b 	beq.w	78d2 <sdhc_spi_detect+0x4a2>
    76bc:	f06f 0485 	mvn.w	r4, #133	; 0x85
    76c0:	e759      	b.n	7576 <sdhc_spi_detect+0x146>
		retry->tries++;
    76c2:	3201      	adds	r2, #1
    76c4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		if (retry->sleep != 0U) {
    76c8:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    76cc:	bb9b      	cbnz	r3, 7736 <sdhc_spi_detect+0x306>
		return true;
    76ce:	2301      	movs	r3, #1
		} while (sdhc_retry_ok(&retry));
    76d0:	2b00      	cmp	r3, #0
    76d2:	d0d2      	beq.n	767a <sdhc_spi_detect+0x24a>
			err = sdhc_spi_cmd_r3(data, SDHC_READ_OCR, 0, &ocr);
    76d4:	ab11      	add	r3, sp, #68	; 0x44
    76d6:	2200      	movs	r2, #0
    76d8:	213a      	movs	r1, #58	; 0x3a
    76da:	4628      	mov	r0, r5
    76dc:	f7ff fd52 	bl	7184 <sdhc_spi_cmd_r3>
			if (err != 0) {
    76e0:	4604      	mov	r4, r0
    76e2:	2800      	cmp	r0, #0
    76e4:	f47f af47 	bne.w	7576 <sdhc_spi_detect+0x146>
			if ((ocr & SDHC_BUSY) != 0U) {
    76e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    76ea:	2b00      	cmp	r3, #0
    76ec:	dbc5      	blt.n	767a <sdhc_spi_detect+0x24a>
	int32_t remain = retry->end - k_uptime_get_32();
    76ee:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return z_impl_k_uptime_ticks();
    76f0:	f00d f967 	bl	149c2 <z_impl_k_uptime_ticks>
    76f4:	014b      	lsls	r3, r1, #5
    76f6:	0142      	lsls	r2, r0, #5
    76f8:	ea43 67d0 	orr.w	r7, r3, r0, lsr #27
    76fc:	1a13      	subs	r3, r2, r0
    76fe:	eb67 0201 	sbc.w	r2, r7, r1
    7702:	0097      	lsls	r7, r2, #2
    7704:	ea47 7793 	orr.w	r7, r7, r3, lsr #30
    7708:	ea4f 0c83 	mov.w	ip, r3, lsl #2
    770c:	463a      	mov	r2, r7
    770e:	eb1c 0300 	adds.w	r3, ip, r0
    7712:	eb41 0202 	adc.w	r2, r1, r2
    7716:	00d1      	lsls	r1, r2, #3
    7718:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
    771c:	00d8      	lsls	r0, r3, #3
    771e:	0bc3      	lsrs	r3, r0, #15
    7720:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    7724:	1ae3      	subs	r3, r4, r3
	if (retry->tries < SDHC_MIN_TRIES) {
    7726:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
    772a:	2a13      	cmp	r2, #19
    772c:	ddc9      	ble.n	76c2 <sdhc_spi_detect+0x292>
	if (remain >= 0) {
    772e:	2b00      	cmp	r3, #0
    7730:	da19      	bge.n	7766 <sdhc_spi_detect+0x336>
	return false;
    7732:	2300      	movs	r3, #0
    7734:	e7cc      	b.n	76d0 <sdhc_spi_detect+0x2a0>
    7736:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    773a:	ea4f 79e3 	mov.w	r9, r3, asr #31
    773e:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    7742:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    7746:	03d8      	lsls	r0, r3, #15
    7748:	f240 34e7 	movw	r4, #999	; 0x3e7
    774c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7750:	2300      	movs	r3, #0
    7752:	1900      	adds	r0, r0, r4
    7754:	f04f 0400 	mov.w	r4, #0
    7758:	eb44 0101 	adc.w	r1, r4, r1
    775c:	f7f9 fc3a 	bl	fd4 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    7760:	f008 f906 	bl	f970 <z_impl_k_sleep>
    7764:	e7b3      	b.n	76ce <sdhc_spi_detect+0x29e>
		if (retry->sleep > 0) {
    7766:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    776a:	b1c3      	cbz	r3, 779e <sdhc_spi_detect+0x36e>
    776c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    7770:	ea4f 79e3 	mov.w	r9, r3, asr #31
    7774:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    7778:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    777c:	03d8      	lsls	r0, r3, #15
    777e:	f240 34e7 	movw	r4, #999	; 0x3e7
    7782:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7786:	2300      	movs	r3, #0
    7788:	1900      	adds	r0, r0, r4
    778a:	f04f 0400 	mov.w	r4, #0
    778e:	eb44 0101 	adc.w	r1, r4, r1
    7792:	f7f9 fc1f 	bl	fd4 <__aeabi_uldivmod>
    7796:	f008 f8eb 	bl	f970 <z_impl_k_sleep>
		return true;
    779a:	2301      	movs	r3, #1
    779c:	e798      	b.n	76d0 <sdhc_spi_detect+0x2a0>
	z_impl_k_yield();
    779e:	f007 ffb7 	bl	f710 <z_impl_k_yield>
}
    77a2:	e7fa      	b.n	779a <sdhc_spi_detect+0x36a>
		data->high_capacity = false;
    77a4:	2300      	movs	r3, #0
    77a6:	722b      	strb	r3, [r5, #8]
		err = sdhc_spi_cmd_r1(data, SDHC_SET_BLOCK_SIZE, SDMMC_DEFAULT_BLOCK_SIZE);
    77a8:	f44f 7200 	mov.w	r2, #512	; 0x200
    77ac:	2110      	movs	r1, #16
    77ae:	4628      	mov	r0, r5
    77b0:	f7ff fba2 	bl	6ef8 <sdhc_spi_cmd_r1>
		if (err != 0) {
    77b4:	4604      	mov	r4, r0
    77b6:	2800      	cmp	r0, #0
    77b8:	f43f af66 	beq.w	7688 <sdhc_spi_detect+0x258>
    77bc:	e6db      	b.n	7576 <sdhc_spi_detect+0x146>
		readbllen = buf[5] & ((1 << 4) - 1);
    77be:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    77c2:	f002 010f 	and.w	r1, r2, #15
		if ((readbllen < 9) || (readbllen > 11)) {
    77c6:	f1a1 0309 	sub.w	r3, r1, #9
    77ca:	b2db      	uxtb	r3, r3
    77cc:	2b02      	cmp	r3, #2
    77ce:	f200 809b 	bhi.w	7908 <sdhc_spi_detect+0x4d8>
    77d2:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    77d6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    77da:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    77de:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    77e2:	f89d 0035 	ldrb.w	r0, [sp, #53]	; 0x35
    77e6:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
 *
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_be32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    77ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		csize = (sys_get_be32(&buf[6]) >> 14) & ((1 << 12) - 1);
    77ee:	f3c3 338b 	ubfx	r3, r3, #14, #12
	return ((uint16_t)src[0] << 8) | src[1];
    77f2:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    77f6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
		csizemult = (uint8_t) ((sys_get_be16(&buf[9]) >> 7) & ((1 << 3) - 1));
    77fa:	f3c2 12c2 	ubfx	r2, r2, #7, #3
		data->sector_count = ((csize + 1) << (csizemult + 2 + readbllen - 9));
    77fe:	3301      	adds	r3, #1
    7800:	440a      	add	r2, r1
    7802:	3a07      	subs	r2, #7
    7804:	4093      	lsls	r3, r2
    7806:	60eb      	str	r3, [r5, #12]
    7808:	4b42      	ldr	r3, [pc, #264]	; (7914 <sdhc_spi_detect+0x4e4>)
    780a:	4a43      	ldr	r2, [pc, #268]	; (7918 <sdhc_spi_detect+0x4e8>)
    780c:	1a9b      	subs	r3, r3, r2
    780e:	08db      	lsrs	r3, r3, #3
	LOG_INF("Found a ~%u MiB SDHC card.",
    7810:	f04f 0200 	mov.w	r2, #0
    7814:	2103      	movs	r1, #3
    7816:	f361 0202 	bfi	r2, r1, #0, #3
    781a:	f36f 02c5 	bfc	r2, #3, #3
    781e:	f363 128f 	bfi	r2, r3, #6, #10
    7822:	68e9      	ldr	r1, [r5, #12]
    7824:	0ac9      	lsrs	r1, r1, #11
    7826:	483d      	ldr	r0, [pc, #244]	; (791c <sdhc_spi_detect+0x4ec>)
    7828:	f7fc ff42 	bl	46b0 <log_1>
	err = sdhc_spi_cmd_r1(data, SDHC_SEND_CID, 0);
    782c:	2200      	movs	r2, #0
    782e:	210a      	movs	r1, #10
    7830:	4628      	mov	r0, r5
    7832:	f7ff fb61 	bl	6ef8 <sdhc_spi_cmd_r1>
	if (err != 0) {
    7836:	4604      	mov	r4, r0
    7838:	2800      	cmp	r0, #0
    783a:	f47f ae9c 	bne.w	7576 <sdhc_spi_detect+0x146>
	err = sdhc_spi_rx_block(data, buf, sizeof(buf));
    783e:	2210      	movs	r2, #16
    7840:	a90b      	add	r1, sp, #44	; 0x2c
    7842:	4628      	mov	r0, r5
    7844:	f7ff fd5e 	bl	7304 <sdhc_spi_rx_block>
	if (err != 0) {
    7848:	4604      	mov	r4, r0
    784a:	2800      	cmp	r0, #0
    784c:	f47f ae93 	bne.w	7576 <sdhc_spi_detect+0x146>
    7850:	4a30      	ldr	r2, [pc, #192]	; (7914 <sdhc_spi_detect+0x4e4>)
    7852:	4b31      	ldr	r3, [pc, #196]	; (7918 <sdhc_spi_detect+0x4e8>)
    7854:	1ad2      	subs	r2, r2, r3
    7856:	08d2      	lsrs	r2, r2, #3
	LOG_INF("Manufacturer ID=%d OEM='%c%c' Name='%c%c%c%c%c' "
    7858:	f04f 0300 	mov.w	r3, #0
    785c:	2103      	movs	r1, #3
    785e:	f361 0302 	bfi	r3, r1, #0, #3
    7862:	f36f 03c5 	bfc	r3, #3, #3
    7866:	f362 138f 	bfi	r3, r2, #6, #10
    786a:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    786e:	9201      	str	r2, [sp, #4]
    7870:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
    7874:	9202      	str	r2, [sp, #8]
    7876:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    787a:	9203      	str	r2, [sp, #12]
    787c:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    7880:	9204      	str	r2, [sp, #16]
    7882:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    7886:	9205      	str	r2, [sp, #20]
    7888:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    788c:	9206      	str	r2, [sp, #24]
    788e:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    7892:	9207      	str	r2, [sp, #28]
    7894:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
    7898:	9208      	str	r2, [sp, #32]
    789a:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    789e:	9209      	str	r2, [sp, #36]	; 0x24
    78a0:	f89d 1035 	ldrb.w	r1, [sp, #53]	; 0x35
    78a4:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    78a8:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    78ac:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
    78b0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    78b4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    78b8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    78bc:	920a      	str	r2, [sp, #40]	; 0x28
    78be:	220a      	movs	r2, #10
    78c0:	a901      	add	r1, sp, #4
    78c2:	4817      	ldr	r0, [pc, #92]	; (7920 <sdhc_spi_detect+0x4f0>)
    78c4:	f7fc ff66 	bl	4794 <log_n>
	sdhc_spi_set_status(dev, DISK_STATUS_OK);
    78c8:	2100      	movs	r1, #0
    78ca:	4630      	mov	r0, r6
    78cc:	f00a fa88 	bl	11de0 <sdhc_spi_set_status>
	return 0;
    78d0:	e651      	b.n	7576 <sdhc_spi_detect+0x146>
	return ((uint16_t)src[0] << 8) | src[1];
    78d2:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    78d6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    78da:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    78de:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    78e2:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    78e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    78ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		csize = sys_get_be32(&buf[6]) & ((1 << 22) - 1);
    78ee:	f3c3 0315 	ubfx	r3, r3, #0, #22
		if (csize < 4112) {
    78f2:	f241 020f 	movw	r2, #4111	; 0x100f
    78f6:	4293      	cmp	r3, r2
    78f8:	d909      	bls.n	790e <sdhc_spi_detect+0x4de>
		data->sector_count = (csize + 1) *
    78fa:	3301      	adds	r3, #1
    78fc:	029b      	lsls	r3, r3, #10
    78fe:	60eb      	str	r3, [r5, #12]
		break;
    7900:	e782      	b.n	7808 <sdhc_spi_detect+0x3d8>
		return -ETIMEDOUT;
    7902:	f06f 0473 	mvn.w	r4, #115	; 0x73
    7906:	e636      	b.n	7576 <sdhc_spi_detect+0x146>
			return -ENOTSUP;
    7908:	f06f 0485 	mvn.w	r4, #133	; 0x85
    790c:	e633      	b.n	7576 <sdhc_spi_detect+0x146>
			return -ENOTSUP;
    790e:	f06f 0485 	mvn.w	r4, #133	; 0x85
    7912:	e630      	b.n	7576 <sdhc_spi_detect+0x146>
    7914:	000157bc 	.word	0x000157bc
    7918:	00015774 	.word	0x00015774
    791c:	000165f4 	.word	0x000165f4
    7920:	00016610 	.word	0x00016610

00007924 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    7924:	4800      	ldr	r0, [pc, #0]	; (7928 <get_hf_flags+0x4>)
    7926:	4770      	bx	lr
    7928:	20000c28 	.word	0x20000c28

0000792c <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    792c:	4b01      	ldr	r3, [pc, #4]	; (7934 <get_subsys+0x8>)
    792e:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    7930:	1140      	asrs	r0, r0, #5
    7932:	4770      	bx	lr
    7934:	20000be0 	.word	0x20000be0

00007938 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    7938:	b530      	push	{r4, r5, lr}
    793a:	b083      	sub	sp, #12
    793c:	4605      	mov	r5, r0
    793e:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    7940:	f7ff fff4 	bl	792c <get_subsys>
    7944:	4601      	mov	r1, r0
    7946:	2340      	movs	r3, #64	; 0x40
    7948:	9300      	str	r3, [sp, #0]
    794a:	4623      	mov	r3, r4
    794c:	4a05      	ldr	r2, [pc, #20]	; (7964 <onoff_start+0x2c>)
    794e:	4806      	ldr	r0, [pc, #24]	; (7968 <onoff_start+0x30>)
    7950:	f00a fd0e 	bl	12370 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    7954:	1e01      	subs	r1, r0, #0
    7956:	db01      	blt.n	795c <onoff_start+0x24>
		notify(mgr, err);
	}
}
    7958:	b003      	add	sp, #12
    795a:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    795c:	4628      	mov	r0, r5
    795e:	47a0      	blx	r4
}
    7960:	e7fa      	b.n	7958 <onoff_start+0x20>
    7962:	bf00      	nop
    7964:	000123b9 	.word	0x000123b9
    7968:	000155c4 	.word	0x000155c4

0000796c <generic_hfclk_stop>:
{
    796c:	b508      	push	{r3, lr}
    796e:	4b0a      	ldr	r3, [pc, #40]	; (7998 <generic_hfclk_stop+0x2c>)
    7970:	f3bf 8f5b 	dmb	ish
    7974:	e853 2f00 	ldrex	r2, [r3]
    7978:	f022 0102 	bic.w	r1, r2, #2
    797c:	e843 1000 	strex	r0, r1, [r3]
    7980:	2800      	cmp	r0, #0
    7982:	d1f7      	bne.n	7974 <generic_hfclk_stop+0x8>
    7984:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    7988:	f012 0f01 	tst.w	r2, #1
    798c:	d000      	beq.n	7990 <generic_hfclk_stop+0x24>
}
    798e:	bd08      	pop	{r3, pc}
	hfclk_stop();
    7990:	f00a fd1f 	bl	123d2 <hfclk_stop>
    7994:	e7fb      	b.n	798e <generic_hfclk_stop+0x22>
    7996:	bf00      	nop
    7998:	20000c38 	.word	0x20000c38

0000799c <generic_hfclk_start>:
{
    799c:	b510      	push	{r4, lr}
	__asm__ volatile(
    799e:	f04f 0320 	mov.w	r3, #32
    79a2:	f3ef 8411 	mrs	r4, BASEPRI
    79a6:	f383 8812 	msr	BASEPRI_MAX, r3
    79aa:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    79ae:	4a13      	ldr	r2, [pc, #76]	; (79fc <generic_hfclk_start+0x60>)
    79b0:	6813      	ldr	r3, [r2, #0]
    79b2:	f043 0302 	orr.w	r3, r3, #2
    79b6:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    79b8:	f013 0f01 	tst.w	r3, #1
    79bc:	d108      	bne.n	79d0 <generic_hfclk_start+0x34>
	bool already_started = false;
    79be:	2300      	movs	r3, #0
	__asm__ volatile(
    79c0:	f384 8811 	msr	BASEPRI, r4
    79c4:	f3bf 8f6f 	isb	sy
	if (already_started) {
    79c8:	b99b      	cbnz	r3, 79f2 <generic_hfclk_start+0x56>
	hfclk_start();
    79ca:	f00a fcfd 	bl	123c8 <hfclk_start>
}
    79ce:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    79d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    79d4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    79d8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    79dc:	f012 0f01 	tst.w	r2, #1
    79e0:	d101      	bne.n	79e6 <generic_hfclk_start+0x4a>
	bool already_started = false;
    79e2:	2300      	movs	r3, #0
    79e4:	e7ec      	b.n	79c0 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    79e6:	f7ff ff9d 	bl	7924 <get_hf_flags>
    79ea:	f00a fc9c 	bl	12326 <set_on_state>
			already_started = true;
    79ee:	2301      	movs	r3, #1
    79f0:	e7e6      	b.n	79c0 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    79f2:	2100      	movs	r1, #0
    79f4:	4802      	ldr	r0, [pc, #8]	; (7a00 <generic_hfclk_start+0x64>)
    79f6:	f00a fca9 	bl	1234c <clkstarted_handle>
		return;
    79fa:	e7e8      	b.n	79ce <generic_hfclk_start+0x32>
    79fc:	20000c38 	.word	0x20000c38
    7a00:	000155c4 	.word	0x000155c4

00007a04 <get_status>:
{
    7a04:	b570      	push	{r4, r5, r6, lr}
    7a06:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    7a08:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    7a0a:	2c01      	cmp	r4, #1
    7a0c:	d807      	bhi.n	7a1e <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    7a0e:	4621      	mov	r1, r4
    7a10:	4628      	mov	r0, r5
    7a12:	f00a fc3e 	bl	12292 <get_sub_data>
    7a16:	6880      	ldr	r0, [r0, #8]
}
    7a18:	f000 0007 	and.w	r0, r0, #7
    7a1c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    7a1e:	4e05      	ldr	r6, [pc, #20]	; (7a34 <get_status+0x30>)
    7a20:	2279      	movs	r2, #121	; 0x79
    7a22:	4631      	mov	r1, r6
    7a24:	4804      	ldr	r0, [pc, #16]	; (7a38 <get_status+0x34>)
    7a26:	f009 faff 	bl	11028 <printk>
    7a2a:	2179      	movs	r1, #121	; 0x79
    7a2c:	4630      	mov	r0, r6
    7a2e:	f009 fc1d 	bl	1126c <assert_post_action>
    7a32:	e7ec      	b.n	7a0e <get_status+0xa>
    7a34:	00016708 	.word	0x00016708
    7a38:	00015984 	.word	0x00015984

00007a3c <stop>:
{
    7a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a40:	4607      	mov	r7, r0
    7a42:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    7a44:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    7a46:	4621      	mov	r1, r4
    7a48:	f00a fc23 	bl	12292 <get_sub_data>
    7a4c:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    7a4e:	2c01      	cmp	r4, #1
    7a50:	d80f      	bhi.n	7a72 <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
    7a52:	4631      	mov	r1, r6
    7a54:	f105 0008 	add.w	r0, r5, #8
    7a58:	f00a fc2c 	bl	122b4 <set_off_state>
	if (err < 0) {
    7a5c:	2800      	cmp	r0, #0
    7a5e:	db06      	blt.n	7a6e <stop+0x32>
	get_sub_config(dev, type)->stop();
    7a60:	4621      	mov	r1, r4
    7a62:	4638      	mov	r0, r7
    7a64:	f00a fc1c 	bl	122a0 <get_sub_config>
    7a68:	6843      	ldr	r3, [r0, #4]
    7a6a:	4798      	blx	r3
	return 0;
    7a6c:	2000      	movs	r0, #0
}
    7a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    7a72:	f8df 8020 	ldr.w	r8, [pc, #32]	; 7a94 <stop+0x58>
    7a76:	f240 124d 	movw	r2, #333	; 0x14d
    7a7a:	4641      	mov	r1, r8
    7a7c:	4804      	ldr	r0, [pc, #16]	; (7a90 <stop+0x54>)
    7a7e:	f009 fad3 	bl	11028 <printk>
    7a82:	f240 114d 	movw	r1, #333	; 0x14d
    7a86:	4640      	mov	r0, r8
    7a88:	f009 fbf0 	bl	1126c <assert_post_action>
    7a8c:	e7e1      	b.n	7a52 <stop+0x16>
    7a8e:	bf00      	nop
    7a90:	00015984 	.word	0x00015984
    7a94:	00016708 	.word	0x00016708

00007a98 <onoff_stop>:
{
    7a98:	b538      	push	{r3, r4, r5, lr}
    7a9a:	4605      	mov	r5, r0
    7a9c:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    7a9e:	f7ff ff45 	bl	792c <get_subsys>
    7aa2:	4601      	mov	r1, r0
    7aa4:	2240      	movs	r2, #64	; 0x40
    7aa6:	4803      	ldr	r0, [pc, #12]	; (7ab4 <onoff_stop+0x1c>)
    7aa8:	f7ff ffc8 	bl	7a3c <stop>
    7aac:	4601      	mov	r1, r0
	notify(mgr, res);
    7aae:	4628      	mov	r0, r5
    7ab0:	47a0      	blx	r4
}
    7ab2:	bd38      	pop	{r3, r4, r5, pc}
    7ab4:	000155c4 	.word	0x000155c4

00007ab8 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    7ab8:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    7aba:	2801      	cmp	r0, #1
    7abc:	d01c      	beq.n	7af8 <clock_event_handler+0x40>
    7abe:	2803      	cmp	r0, #3
    7ac0:	d01f      	beq.n	7b02 <clock_event_handler+0x4a>
    7ac2:	b160      	cbz	r0, 7ade <clock_event_handler+0x26>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
    7ac4:	4c15      	ldr	r4, [pc, #84]	; (7b1c <clock_event_handler+0x64>)
    7ac6:	f240 2262 	movw	r2, #610	; 0x262
    7aca:	4621      	mov	r1, r4
    7acc:	4814      	ldr	r0, [pc, #80]	; (7b20 <clock_event_handler+0x68>)
    7ace:	f009 faab 	bl	11028 <printk>
    7ad2:	f240 2162 	movw	r1, #610	; 0x262
    7ad6:	4620      	mov	r0, r4
    7ad8:	f009 fbc8 	bl	1126c <assert_post_action>
		break;
	}
}
    7adc:	e010      	b.n	7b00 <clock_event_handler+0x48>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    7ade:	2100      	movs	r1, #0
    7ae0:	4810      	ldr	r0, [pc, #64]	; (7b24 <clock_event_handler+0x6c>)
    7ae2:	f00a fbd6 	bl	12292 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    7ae6:	6883      	ldr	r3, [r0, #8]
    7ae8:	f013 0f07 	tst.w	r3, #7
    7aec:	d108      	bne.n	7b00 <clock_event_handler+0x48>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    7aee:	2100      	movs	r1, #0
    7af0:	480c      	ldr	r0, [pc, #48]	; (7b24 <clock_event_handler+0x6c>)
    7af2:	f00a fc2b 	bl	1234c <clkstarted_handle>
    7af6:	e003      	b.n	7b00 <clock_event_handler+0x48>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    7af8:	2101      	movs	r1, #1
    7afa:	480a      	ldr	r0, [pc, #40]	; (7b24 <clock_event_handler+0x6c>)
    7afc:	f00a fc26 	bl	1234c <clkstarted_handle>
}
    7b00:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
    7b02:	4c06      	ldr	r4, [pc, #24]	; (7b1c <clock_event_handler+0x64>)
    7b04:	f240 225e 	movw	r2, #606	; 0x25e
    7b08:	4621      	mov	r1, r4
    7b0a:	4805      	ldr	r0, [pc, #20]	; (7b20 <clock_event_handler+0x68>)
    7b0c:	f009 fa8c 	bl	11028 <printk>
    7b10:	f240 215e 	movw	r1, #606	; 0x25e
    7b14:	4620      	mov	r0, r4
    7b16:	f009 fba9 	bl	1126c <assert_post_action>
		break;
    7b1a:	e7f1      	b.n	7b00 <clock_event_handler+0x48>
    7b1c:	00016708 	.word	0x00016708
    7b20:	00015984 	.word	0x00015984
    7b24:	000155c4 	.word	0x000155c4

00007b28 <api_blocking_start>:
{
    7b28:	b500      	push	{lr}
    7b2a:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    7b2c:	f8cd d000 	str.w	sp, [sp]
    7b30:	f8cd d004 	str.w	sp, [sp, #4]
    7b34:	2300      	movs	r3, #0
    7b36:	9302      	str	r3, [sp, #8]
    7b38:	2301      	movs	r3, #1
    7b3a:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    7b3c:	466b      	mov	r3, sp
    7b3e:	4a07      	ldr	r2, [pc, #28]	; (7b5c <api_blocking_start+0x34>)
    7b40:	f00a fc32 	bl	123a8 <api_start>
	if (err < 0) {
    7b44:	2800      	cmp	r0, #0
    7b46:	db05      	blt.n	7b54 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    7b48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    7b4c:	2300      	movs	r3, #0
    7b4e:	4668      	mov	r0, sp
    7b50:	f006 fe32 	bl	e7b8 <z_impl_k_sem_take>
}
    7b54:	b005      	add	sp, #20
    7b56:	f85d fb04 	ldr.w	pc, [sp], #4
    7b5a:	bf00      	nop
    7b5c:	000123f1 	.word	0x000123f1

00007b60 <lfclk_start>:
{
    7b60:	b508      	push	{r3, lr}
	if (!once) {
    7b62:	4b07      	ldr	r3, [pc, #28]	; (7b80 <lfclk_start+0x20>)
    7b64:	781b      	ldrb	r3, [r3, #0]
    7b66:	b11b      	cbz	r3, 7b70 <lfclk_start+0x10>
}
#endif // defined(CLOCK_FEATURE_HFCLK_DIVIDE_PRESENT) || NRF_CLOCK_HAS_HFCLK_192M

NRFX_STATIC_INLINE void nrfx_clock_lfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    7b68:	2000      	movs	r0, #0
    7b6a:	f004 f913 	bl	bd94 <nrfx_clock_start>
}
    7b6e:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
    7b70:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    7b74:	f00c ff29 	bl	149ca <z_impl_k_busy_wait>
		once = true;
    7b78:	4b01      	ldr	r3, [pc, #4]	; (7b80 <lfclk_start+0x20>)
    7b7a:	2201      	movs	r2, #1
    7b7c:	701a      	strb	r2, [r3, #0]
    7b7e:	e7f3      	b.n	7b68 <lfclk_start+0x8>
    7b80:	2000165b 	.word	0x2000165b

00007b84 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    7b84:	b570      	push	{r4, r5, r6, lr}
    7b86:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    7b88:	2200      	movs	r2, #0
    7b8a:	2101      	movs	r1, #1
    7b8c:	4610      	mov	r0, r2
    7b8e:	f7fd fd9b 	bl	56c8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    7b92:	2000      	movs	r0, #0
    7b94:	f7fd fd66 	bl	5664 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    7b98:	4811      	ldr	r0, [pc, #68]	; (7be0 <clk_init+0x5c>)
    7b9a:	f004 f8b7 	bl	bd0c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    7b9e:	4b11      	ldr	r3, [pc, #68]	; (7be4 <clk_init+0x60>)
    7ba0:	4298      	cmp	r0, r3
    7ba2:	d11a      	bne.n	7bda <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    7ba4:	f004 f8d8 	bl	bd58 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    7ba8:	2400      	movs	r4, #0
    7baa:	e003      	b.n	7bb4 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    7bac:	2301      	movs	r3, #1
    7bae:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    7bb0:	441c      	add	r4, r3
    7bb2:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
    7bb4:	2c01      	cmp	r4, #1
    7bb6:	d80e      	bhi.n	7bd6 <clk_init+0x52>
						get_sub_data(dev, i);
    7bb8:	4621      	mov	r1, r4
    7bba:	4630      	mov	r0, r6
    7bbc:	f00a fb69 	bl	12292 <get_sub_data>
    7bc0:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
    7bc2:	4621      	mov	r1, r4
    7bc4:	4630      	mov	r0, r6
    7bc6:	f00a fb71 	bl	122ac <get_onoff_manager>
    7bca:	4907      	ldr	r1, [pc, #28]	; (7be8 <clk_init+0x64>)
    7bcc:	f009 fac8 	bl	11160 <onoff_manager_init>
		if (err < 0) {
    7bd0:	2800      	cmp	r0, #0
    7bd2:	daeb      	bge.n	7bac <clk_init+0x28>
    7bd4:	e000      	b.n	7bd8 <clk_init+0x54>
	}

	return 0;
    7bd6:	2000      	movs	r0, #0
}
    7bd8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    7bda:	f06f 0004 	mvn.w	r0, #4
    7bde:	e7fb      	b.n	7bd8 <clk_init+0x54>
    7be0:	00007ab9 	.word	0x00007ab9
    7be4:	0bad0000 	.word	0x0bad0000
    7be8:	000167a0 	.word	0x000167a0

00007bec <lfclk_spinwait>:
{
    7bec:	b570      	push	{r4, r5, r6, lr}
    7bee:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    7bf0:	2801      	cmp	r0, #1
    7bf2:	d107      	bne.n	7c04 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    7bf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7bf8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    7bfc:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    7c00:	2b01      	cmp	r3, #1
    7c02:	d058      	beq.n	7cb6 <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    7c04:	f00c fe5c 	bl	148c0 <k_is_in_isr>
    7c08:	b928      	cbnz	r0, 7c16 <lfclk_spinwait+0x2a>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    7c0a:	4b2e      	ldr	r3, [pc, #184]	; (7cc4 <lfclk_spinwait+0xd8>)
    7c0c:	781b      	ldrb	r3, [r3, #0]
    7c0e:	2b00      	cmp	r3, #0
    7c10:	d041      	beq.n	7c96 <lfclk_spinwait+0xaa>
    7c12:	2300      	movs	r3, #0
    7c14:	e000      	b.n	7c18 <lfclk_spinwait+0x2c>
    7c16:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    7c18:	461c      	mov	r4, r3
    7c1a:	2b00      	cmp	r3, #0
    7c1c:	d03d      	beq.n	7c9a <lfclk_spinwait+0xae>
	__asm__ volatile(
    7c1e:	f04f 0320 	mov.w	r3, #32
    7c22:	f3ef 8611 	mrs	r6, BASEPRI
    7c26:	f383 8812 	msr	BASEPRI_MAX, r3
    7c2a:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    7c2e:	b924      	cbnz	r4, 7c3a <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    7c30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7c34:	2202      	movs	r2, #2
    7c36:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7c3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7c3e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    7c42:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7c46:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    7c4a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    7c4e:	d12b      	bne.n	7ca8 <lfclk_spinwait+0xbc>
    return false;
    7c50:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    7c52:	b11a      	cbz	r2, 7c5c <lfclk_spinwait+0x70>
    7c54:	2b01      	cmp	r3, #1
    7c56:	d029      	beq.n	7cac <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    7c58:	2d01      	cmp	r5, #1
    7c5a:	d027      	beq.n	7cac <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    7c5c:	b1fc      	cbz	r4, 7c9e <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    7c5e:	4630      	mov	r0, r6
    7c60:	f7fd fca8 	bl	55b4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    7c64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7c68:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    7c6c:	2b00      	cmp	r3, #0
    7c6e:	d1e4      	bne.n	7c3a <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7c70:	4b15      	ldr	r3, [pc, #84]	; (7cc8 <lfclk_spinwait+0xdc>)
    7c72:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    7c74:	2b00      	cmp	r3, #0
    7c76:	d0e0      	beq.n	7c3a <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7c78:	4b13      	ldr	r3, [pc, #76]	; (7cc8 <lfclk_spinwait+0xdc>)
    7c7a:	2200      	movs	r2, #0
    7c7c:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    7c7e:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    7c80:	2301      	movs	r3, #1
    7c82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7c86:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7c8a:	4a10      	ldr	r2, [pc, #64]	; (7ccc <lfclk_spinwait+0xe0>)
    7c8c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7c90:	4a0f      	ldr	r2, [pc, #60]	; (7cd0 <lfclk_spinwait+0xe4>)
    7c92:	6013      	str	r3, [r2, #0]
}
    7c94:	e7d1      	b.n	7c3a <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    7c96:	2301      	movs	r3, #1
    7c98:	e7be      	b.n	7c18 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    7c9a:	2600      	movs	r6, #0
    7c9c:	e7c7      	b.n	7c2e <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    7c9e:	2021      	movs	r0, #33	; 0x21
    7ca0:	2100      	movs	r1, #0
    7ca2:	f007 fe65 	bl	f970 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    7ca6:	e7dd      	b.n	7c64 <lfclk_spinwait+0x78>
                return true;
    7ca8:	2201      	movs	r2, #1
    7caa:	e7d2      	b.n	7c52 <lfclk_spinwait+0x66>
	if (isr_mode) {
    7cac:	b124      	cbz	r4, 7cb8 <lfclk_spinwait+0xcc>
	__asm__ volatile(
    7cae:	f386 8811 	msr	BASEPRI, r6
    7cb2:	f3bf 8f6f 	isb	sy
}
    7cb6:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    7cb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7cbc:	2202      	movs	r2, #2
    7cbe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    7cc2:	e7f8      	b.n	7cb6 <lfclk_spinwait+0xca>
    7cc4:	2000165d 	.word	0x2000165d
    7cc8:	40000104 	.word	0x40000104
    7ccc:	e000e100 	.word	0xe000e100
    7cd0:	40000008 	.word	0x40000008

00007cd4 <z_nrf_clock_control_get_onoff>:
{
    7cd4:	b508      	push	{r3, lr}
	return get_onoff_manager(CLOCK_DEVICE,
    7cd6:	b2c1      	uxtb	r1, r0
    7cd8:	4801      	ldr	r0, [pc, #4]	; (7ce0 <z_nrf_clock_control_get_onoff+0xc>)
    7cda:	f00a fae7 	bl	122ac <get_onoff_manager>
}
    7cde:	bd08      	pop	{r3, pc}
    7ce0:	000155c4 	.word	0x000155c4

00007ce4 <z_nrf_clock_control_lf_on>:
{
    7ce4:	b538      	push	{r3, r4, r5, lr}
    7ce6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    7ce8:	4b1e      	ldr	r3, [pc, #120]	; (7d64 <z_nrf_clock_control_lf_on+0x80>)
    7cea:	2101      	movs	r1, #1
    7cec:	f3bf 8f5b 	dmb	ish
    7cf0:	e853 2f00 	ldrex	r2, [r3]
    7cf4:	e843 1000 	strex	r0, r1, [r3]
    7cf8:	2800      	cmp	r0, #0
    7cfa:	d1f9      	bne.n	7cf0 <z_nrf_clock_control_lf_on+0xc>
    7cfc:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    7d00:	b142      	cbz	r2, 7d14 <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
    7d02:	b134      	cbz	r4, 7d12 <z_nrf_clock_control_lf_on+0x2e>
    7d04:	1e63      	subs	r3, r4, #1
    7d06:	b2db      	uxtb	r3, r3
    7d08:	2b01      	cmp	r3, #1
    7d0a:	d81d      	bhi.n	7d48 <z_nrf_clock_control_lf_on+0x64>
		lfclk_spinwait(start_mode);
    7d0c:	4620      	mov	r0, r4
    7d0e:	f7ff ff6d 	bl	7bec <lfclk_spinwait>
}
    7d12:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
    7d14:	4814      	ldr	r0, [pc, #80]	; (7d68 <z_nrf_clock_control_lf_on+0x84>)
    7d16:	f00a fac9 	bl	122ac <get_onoff_manager>
	*notify = (struct sys_notify){
    7d1a:	4914      	ldr	r1, [pc, #80]	; (7d6c <z_nrf_clock_control_lf_on+0x88>)
    7d1c:	2300      	movs	r3, #0
    7d1e:	604b      	str	r3, [r1, #4]
    7d20:	60cb      	str	r3, [r1, #12]
    7d22:	2301      	movs	r3, #1
    7d24:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    7d26:	f7fb f88d 	bl	2e44 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    7d2a:	2800      	cmp	r0, #0
    7d2c:	dae9      	bge.n	7d02 <z_nrf_clock_control_lf_on+0x1e>
    7d2e:	4d10      	ldr	r5, [pc, #64]	; (7d70 <z_nrf_clock_control_lf_on+0x8c>)
    7d30:	f44f 7208 	mov.w	r2, #544	; 0x220
    7d34:	4629      	mov	r1, r5
    7d36:	480f      	ldr	r0, [pc, #60]	; (7d74 <z_nrf_clock_control_lf_on+0x90>)
    7d38:	f009 f976 	bl	11028 <printk>
    7d3c:	f44f 7108 	mov.w	r1, #544	; 0x220
    7d40:	4628      	mov	r0, r5
    7d42:	f009 fa93 	bl	1126c <assert_post_action>
    7d46:	e7dc      	b.n	7d02 <z_nrf_clock_control_lf_on+0x1e>
		__ASSERT_NO_MSG(false);
    7d48:	4c09      	ldr	r4, [pc, #36]	; (7d70 <z_nrf_clock_control_lf_on+0x8c>)
    7d4a:	f240 2232 	movw	r2, #562	; 0x232
    7d4e:	4621      	mov	r1, r4
    7d50:	4808      	ldr	r0, [pc, #32]	; (7d74 <z_nrf_clock_control_lf_on+0x90>)
    7d52:	f009 f969 	bl	11028 <printk>
    7d56:	f240 2132 	movw	r1, #562	; 0x232
    7d5a:	4620      	mov	r0, r4
    7d5c:	f009 fa86 	bl	1126c <assert_post_action>
    7d60:	e7d7      	b.n	7d12 <z_nrf_clock_control_lf_on+0x2e>
    7d62:	bf00      	nop
    7d64:	20000c3c 	.word	0x20000c3c
    7d68:	000155c4 	.word	0x000155c4
    7d6c:	20000bd0 	.word	0x20000bd0
    7d70:	00016708 	.word	0x00016708
    7d74:	00015984 	.word	0x00015984

00007d78 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    7d78:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    7d7a:	4c04      	ldr	r4, [pc, #16]	; (7d8c <rtt_console_init+0x14>)
    7d7c:	4620      	mov	r0, r4
    7d7e:	f7fa fdf5 	bl	296c <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    7d82:	4620      	mov	r0, r4
    7d84:	f7fe fbea 	bl	655c <__stdout_hook_install>

	return 0;
}
    7d88:	2000      	movs	r0, #0
    7d8a:	bd10      	pop	{r4, pc}
    7d8c:	00007d91 	.word	0x00007d91

00007d90 <rtt_console_out>:
{
    7d90:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d92:	b083      	sub	sp, #12
    7d94:	4607      	mov	r7, r0
	char c = (char)character;
    7d96:	f88d 0007 	strb.w	r0, [sp, #7]
	int max_cnt = CONFIG_RTT_TX_RETRY_CNT;
    7d9a:	2602      	movs	r6, #2
    7d9c:	e006      	b.n	7dac <rtt_console_out+0x1c>
			host_present = true;
    7d9e:	4b13      	ldr	r3, [pc, #76]	; (7dec <rtt_console_out+0x5c>)
    7da0:	2201      	movs	r2, #1
    7da2:	701a      	strb	r2, [r3, #0]
    7da4:	e01e      	b.n	7de4 <rtt_console_out+0x54>
				wait();
    7da6:	f00a fb28 	bl	123fa <wait>
				max_cnt--;
    7daa:	3e01      	subs	r6, #1
	return z_impl_k_mutex_lock(mutex, timeout);
    7dac:	4d10      	ldr	r5, [pc, #64]	; (7df0 <rtt_console_out+0x60>)
    7dae:	f04f 32ff 	mov.w	r2, #4294967295
    7db2:	f04f 33ff 	mov.w	r3, #4294967295
    7db6:	4628      	mov	r0, r5
    7db8:	f006 fb24 	bl	e404 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    7dbc:	2201      	movs	r2, #1
    7dbe:	f10d 0107 	add.w	r1, sp, #7
    7dc2:	2000      	movs	r0, #0
    7dc4:	f005 fdd2 	bl	d96c <SEGGER_RTT_WriteNoLock>
    7dc8:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    7dca:	4628      	mov	r0, r5
    7dcc:	f006 fc10 	bl	e5f0 <z_impl_k_mutex_unlock>
		if (cnt) {
    7dd0:	2c00      	cmp	r4, #0
    7dd2:	d1e4      	bne.n	7d9e <rtt_console_out+0xe>
		} else if (host_present) {
    7dd4:	4b05      	ldr	r3, [pc, #20]	; (7dec <rtt_console_out+0x5c>)
    7dd6:	781b      	ldrb	r3, [r3, #0]
    7dd8:	b123      	cbz	r3, 7de4 <rtt_console_out+0x54>
			if (max_cnt) {
    7dda:	2e00      	cmp	r6, #0
    7ddc:	d1e3      	bne.n	7da6 <rtt_console_out+0x16>
				host_present = false;
    7dde:	4b03      	ldr	r3, [pc, #12]	; (7dec <rtt_console_out+0x5c>)
    7de0:	2200      	movs	r2, #0
    7de2:	701a      	strb	r2, [r3, #0]
}
    7de4:	4638      	mov	r0, r7
    7de6:	b003      	add	sp, #12
    7de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7dea:	bf00      	nop
    7dec:	2000165c 	.word	0x2000165c
    7df0:	200003c4 	.word	0x200003c4

00007df4 <get_drive>:

static int get_drive(gpio_flags_t flags, nrf_gpio_pin_drive_t *drive)
{
	int err = 0;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    7df4:	4b1f      	ldr	r3, [pc, #124]	; (7e74 <get_drive+0x80>)
    7df6:	4003      	ands	r3, r0
    7df8:	4a1f      	ldr	r2, [pc, #124]	; (7e78 <get_drive+0x84>)
    7dfa:	4293      	cmp	r3, r2
    7dfc:	d032      	beq.n	7e64 <get_drive+0x70>
    7dfe:	d816      	bhi.n	7e2e <get_drive+0x3a>
    7e00:	2b06      	cmp	r3, #6
    7e02:	d02b      	beq.n	7e5c <get_drive+0x68>
    7e04:	d906      	bls.n	7e14 <get_drive+0x20>
    7e06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    7e0a:	d10d      	bne.n	7e28 <get_drive+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		*drive = NRF_GPIO_PIN_H0S1;
    7e0c:	2301      	movs	r3, #1
    7e0e:	700b      	strb	r3, [r1, #0]
	int err = 0;
    7e10:	2000      	movs	r0, #0
		break;
    7e12:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    7e14:	b1fb      	cbz	r3, 7e56 <get_drive+0x62>
    7e16:	2b02      	cmp	r3, #2
    7e18:	d103      	bne.n	7e22 <get_drive+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0S1;
    7e1a:	2304      	movs	r3, #4
    7e1c:	700b      	strb	r3, [r1, #0]
	int err = 0;
    7e1e:	2000      	movs	r0, #0
		break;
    7e20:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    7e22:	f06f 0015 	mvn.w	r0, #21
    7e26:	4770      	bx	lr
    7e28:	f06f 0015 	mvn.w	r0, #21
    7e2c:	4770      	bx	lr
    7e2e:	4a13      	ldr	r2, [pc, #76]	; (7e7c <get_drive+0x88>)
    7e30:	4293      	cmp	r3, r2
    7e32:	d01b      	beq.n	7e6c <get_drive+0x78>
    7e34:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    7e38:	d103      	bne.n	7e42 <get_drive+0x4e>
		*drive = NRF_GPIO_PIN_H0H1;
    7e3a:	2303      	movs	r3, #3
    7e3c:	700b      	strb	r3, [r1, #0]
	int err = 0;
    7e3e:	2000      	movs	r0, #0
		break;
    7e40:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    7e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    7e46:	d103      	bne.n	7e50 <get_drive+0x5c>
		*drive = NRF_GPIO_PIN_S0H1;
    7e48:	2302      	movs	r3, #2
    7e4a:	700b      	strb	r3, [r1, #0]
	int err = 0;
    7e4c:	2000      	movs	r0, #0
		break;
    7e4e:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    7e50:	f06f 0015 	mvn.w	r0, #21
    7e54:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    7e56:	2000      	movs	r0, #0
    7e58:	7008      	strb	r0, [r1, #0]
		break;
    7e5a:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    7e5c:	2306      	movs	r3, #6
    7e5e:	700b      	strb	r3, [r1, #0]
	int err = 0;
    7e60:	2000      	movs	r0, #0
		break;
    7e62:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    7e64:	2307      	movs	r3, #7
    7e66:	700b      	strb	r3, [r1, #0]
	int err = 0;
    7e68:	2000      	movs	r0, #0
		break;
    7e6a:	4770      	bx	lr
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0H1;
    7e6c:	2305      	movs	r3, #5
    7e6e:	700b      	strb	r3, [r1, #0]
	int err = 0;
    7e70:	2000      	movs	r0, #0
		err = -EINVAL;
		break;
	}

	return err;
}
    7e72:	4770      	bx	lr
    7e74:	00f00006 	.word	0x00f00006
    7e78:	00100006 	.word	0x00100006
    7e7c:	00400002 	.word	0x00400002

00007e80 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    7e80:	b908      	cbnz	r0, 7e86 <get_dev+0x6>
    7e82:	4802      	ldr	r0, [pc, #8]	; (7e8c <get_dev+0xc>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    7e84:	4770      	bx	lr
	const struct device *dev = NULL;
    7e86:	2000      	movs	r0, #0
    7e88:	4770      	bx	lr
    7e8a:	bf00      	nop
    7e8c:	000155dc 	.word	0x000155dc

00007e90 <gpio_nrfx_manage_callback>:
{
    7e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e94:	4615      	mov	r5, r2
	return port->data;
    7e96:	6906      	ldr	r6, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    7e98:	1d37      	adds	r7, r6, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    7e9a:	460c      	mov	r4, r1
    7e9c:	b139      	cbz	r1, 7eae <gpio_nrfx_manage_callback+0x1e>
	__ASSERT(callback->handler, "No callback handler!");
    7e9e:	6863      	ldr	r3, [r4, #4]
    7ea0:	b18b      	cbz	r3, 7ec6 <gpio_nrfx_manage_callback+0x36>
	return list->head;
    7ea2:	6873      	ldr	r3, [r6, #4]

	if (!sys_slist_is_empty(callbacks)) {
    7ea4:	2b00      	cmp	r3, #0
    7ea6:	d033      	beq.n	7f10 <gpio_nrfx_manage_callback+0x80>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    7ea8:	4621      	mov	r1, r4
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7eaa:	2200      	movs	r2, #0
    7eac:	e022      	b.n	7ef4 <gpio_nrfx_manage_callback+0x64>
	__ASSERT(callback, "No callback!");
    7eae:	f8df 8088 	ldr.w	r8, [pc, #136]	; 7f38 <gpio_nrfx_manage_callback+0xa8>
    7eb2:	2224      	movs	r2, #36	; 0x24
    7eb4:	4641      	mov	r1, r8
    7eb6:	481f      	ldr	r0, [pc, #124]	; (7f34 <gpio_nrfx_manage_callback+0xa4>)
    7eb8:	f009 f8b6 	bl	11028 <printk>
    7ebc:	2124      	movs	r1, #36	; 0x24
    7ebe:	4640      	mov	r0, r8
    7ec0:	f009 f9d4 	bl	1126c <assert_post_action>
    7ec4:	e7eb      	b.n	7e9e <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
    7ec6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 7f38 <gpio_nrfx_manage_callback+0xa8>
    7eca:	2225      	movs	r2, #37	; 0x25
    7ecc:	4641      	mov	r1, r8
    7ece:	4819      	ldr	r0, [pc, #100]	; (7f34 <gpio_nrfx_manage_callback+0xa4>)
    7ed0:	f009 f8aa 	bl	11028 <printk>
    7ed4:	2125      	movs	r1, #37	; 0x25
    7ed6:	4640      	mov	r0, r8
    7ed8:	f009 f9c8 	bl	1126c <assert_post_action>
    7edc:	e7e1      	b.n	7ea2 <gpio_nrfx_manage_callback+0x12>
	return node->next;
    7ede:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    7ee0:	6073      	str	r3, [r6, #4]
	return list->tail;
    7ee2:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    7ee4:	4294      	cmp	r4, r2
    7ee6:	d10f      	bne.n	7f08 <gpio_nrfx_manage_callback+0x78>
	list->tail = node;
    7ee8:	607b      	str	r3, [r7, #4]
}
    7eea:	e00d      	b.n	7f08 <gpio_nrfx_manage_callback+0x78>
	list->tail = node;
    7eec:	607a      	str	r2, [r7, #4]
}
    7eee:	e00b      	b.n	7f08 <gpio_nrfx_manage_callback+0x78>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7ef0:	461a      	mov	r2, r3
    7ef2:	681b      	ldr	r3, [r3, #0]
    7ef4:	b15b      	cbz	r3, 7f0e <gpio_nrfx_manage_callback+0x7e>
    7ef6:	4299      	cmp	r1, r3
    7ef8:	d1fa      	bne.n	7ef0 <gpio_nrfx_manage_callback+0x60>
Z_GENLIST_REMOVE(slist, snode)
    7efa:	2a00      	cmp	r2, #0
    7efc:	d0ef      	beq.n	7ede <gpio_nrfx_manage_callback+0x4e>
	return node->next;
    7efe:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    7f00:	6013      	str	r3, [r2, #0]
	return list->tail;
    7f02:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    7f04:	429c      	cmp	r4, r3
    7f06:	d0f1      	beq.n	7eec <gpio_nrfx_manage_callback+0x5c>
	parent->next = child;
    7f08:	2300      	movs	r3, #0
    7f0a:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7f0c:	e000      	b.n	7f10 <gpio_nrfx_manage_callback+0x80>
			if (!set) {
    7f0e:	b155      	cbz	r5, 7f26 <gpio_nrfx_manage_callback+0x96>
				return -EINVAL;
			}
		}
	}

	if (set) {
    7f10:	b165      	cbz	r5, 7f2c <gpio_nrfx_manage_callback+0x9c>
	return list->head;
    7f12:	6873      	ldr	r3, [r6, #4]
	parent->next = child;
    7f14:	6023      	str	r3, [r4, #0]
	list->head = node;
    7f16:	6074      	str	r4, [r6, #4]
	return list->tail;
    7f18:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
    7f1a:	b10b      	cbz	r3, 7f20 <gpio_nrfx_manage_callback+0x90>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    7f1c:	2000      	movs	r0, #0
    7f1e:	e006      	b.n	7f2e <gpio_nrfx_manage_callback+0x9e>
	list->tail = node;
    7f20:	607c      	str	r4, [r7, #4]
    7f22:	2000      	movs	r0, #0
}
    7f24:	e003      	b.n	7f2e <gpio_nrfx_manage_callback+0x9e>
				return -EINVAL;
    7f26:	f06f 0015 	mvn.w	r0, #21
    7f2a:	e000      	b.n	7f2e <gpio_nrfx_manage_callback+0x9e>
	return 0;
    7f2c:	2000      	movs	r0, #0
}
    7f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f32:	bf00      	nop
    7f34:	00015984 	.word	0x00015984
    7f38:	000167ac 	.word	0x000167ac

00007f3c <nrfx_gpio_handler>:

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    7f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    7f40:	f000 041f 	and.w	r4, r0, #31
	uint32_t pin = abs_pin;
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
	const struct device *port = get_dev(port_id);
    7f44:	0940      	lsrs	r0, r0, #5
    7f46:	f7ff ff9b 	bl	7e80 <get_dev>

	/* If given port is handled directly by nrfx driver it might not be enabled in DT. */
	if (port == NULL) {
    7f4a:	b360      	cbz	r0, 7fa6 <nrfx_gpio_handler+0x6a>
    7f4c:	4607      	mov	r7, r0
	return port->data;
    7f4e:	6903      	ldr	r3, [r0, #16]
	}

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
    7f50:	2601      	movs	r6, #1
    7f52:	40a6      	lsls	r6, r4
	return list->head;
    7f54:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    7f56:	b11c      	cbz	r4, 7f60 <nrfx_gpio_handler+0x24>
    7f58:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    7f5a:	b17c      	cbz	r4, 7f7c <nrfx_gpio_handler+0x40>
	return node->next;
    7f5c:	6825      	ldr	r5, [r4, #0]
    7f5e:	e00d      	b.n	7f7c <nrfx_gpio_handler+0x40>
    7f60:	4625      	mov	r5, r4
    7f62:	e00b      	b.n	7f7c <nrfx_gpio_handler+0x40>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    7f64:	6863      	ldr	r3, [r4, #4]
    7f66:	68a2      	ldr	r2, [r4, #8]
    7f68:	4032      	ands	r2, r6
    7f6a:	4621      	mov	r1, r4
    7f6c:	4638      	mov	r0, r7
    7f6e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    7f70:	b1bd      	cbz	r5, 7fa2 <nrfx_gpio_handler+0x66>
    7f72:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    7f74:	b105      	cbz	r5, 7f78 <nrfx_gpio_handler+0x3c>
	return node->next;
    7f76:	682b      	ldr	r3, [r5, #0]
    7f78:	462c      	mov	r4, r5
    7f7a:	461d      	mov	r5, r3
    7f7c:	b19c      	cbz	r4, 7fa6 <nrfx_gpio_handler+0x6a>
		if (cb->pin_mask & pins) {
    7f7e:	68a3      	ldr	r3, [r4, #8]
    7f80:	421e      	tst	r6, r3
    7f82:	d0f5      	beq.n	7f70 <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
    7f84:	6863      	ldr	r3, [r4, #4]
    7f86:	2b00      	cmp	r3, #0
    7f88:	d1ec      	bne.n	7f64 <nrfx_gpio_handler+0x28>
    7f8a:	f8df 8024 	ldr.w	r8, [pc, #36]	; 7fb0 <nrfx_gpio_handler+0x74>
    7f8e:	2245      	movs	r2, #69	; 0x45
    7f90:	4641      	mov	r1, r8
    7f92:	4806      	ldr	r0, [pc, #24]	; (7fac <nrfx_gpio_handler+0x70>)
    7f94:	f009 f848 	bl	11028 <printk>
    7f98:	2145      	movs	r1, #69	; 0x45
    7f9a:	4640      	mov	r0, r8
    7f9c:	f009 f966 	bl	1126c <assert_post_action>
    7fa0:	e7e0      	b.n	7f64 <nrfx_gpio_handler+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    7fa2:	462b      	mov	r3, r5
    7fa4:	e7e8      	b.n	7f78 <nrfx_gpio_handler+0x3c>
}
    7fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7faa:	bf00      	nop
    7fac:	00015984 	.word	0x00015984
    7fb0:	000167ac 	.word	0x000167ac

00007fb4 <gpio_nrfx_pin_interrupt_configure>:
{
    7fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7fb6:	b085      	sub	sp, #20
    7fb8:	460e      	mov	r6, r1
    7fba:	4619      	mov	r1, r3
	return port->config;
    7fbc:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    7fbe:	7b1b      	ldrb	r3, [r3, #12]
    7fc0:	f006 051f 	and.w	r5, r6, #31
    7fc4:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    7fc8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    7fcc:	d022      	beq.n	8014 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14>
    7fce:	4607      	mov	r7, r0
    7fd0:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    7fd2:	2300      	movs	r3, #0
    7fd4:	9302      	str	r3, [sp, #8]
    7fd6:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    7fd8:	4610      	mov	r0, r2
    7fda:	f00a fa4b 	bl	12474 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    7fde:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    7fe2:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    7fe4:	6899      	ldr	r1, [r3, #8]
    7fe6:	40f1      	lsrs	r1, r6
    7fe8:	f011 0101 	ands.w	r1, r1, #1
    7fec:	d102      	bne.n	7ff4 <gpio_nrfx_pin_interrupt_configure+0x40>
    7fee:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
    7ff2:	d014      	beq.n	801e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    7ff4:	2300      	movs	r3, #0
    7ff6:	aa02      	add	r2, sp, #8
    7ff8:	4619      	mov	r1, r3
    7ffa:	4628      	mov	r0, r5
    7ffc:	f004 fb20 	bl	c640 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    8000:	4b2c      	ldr	r3, [pc, #176]	; (80b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb4>)
    8002:	4298      	cmp	r0, r3
    8004:	d152      	bne.n	80ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xac>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    8006:	2101      	movs	r1, #1
    8008:	4628      	mov	r0, r5
    800a:	f004 fd61 	bl	cad0 <nrfx_gpiote_trigger_enable>
	return 0;
    800e:	2000      	movs	r0, #0
}
    8010:	b005      	add	sp, #20
    8012:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    8014:	4628      	mov	r0, r5
    8016:	f004 fe3d 	bl	cc94 <nrfx_gpiote_trigger_disable>
		return 0;
    801a:	2000      	movs	r0, #0
    801c:	e7f8      	b.n	8010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10>
    switch (port)
    801e:	096b      	lsrs	r3, r5, #5
    8020:	d101      	bne.n	8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
            mask = P0_FEATURE_PINS_PRESENT;
    8022:	f04f 31ff 	mov.w	r1, #4294967295
    pin_number &= 0x1F;
    8026:	f005 031f 	and.w	r3, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    802a:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    802c:	f011 0f01 	tst.w	r1, #1
    8030:	d018      	beq.n	8064 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x64>
    *p_pin = pin_number & 0x1F;
    8032:	f005 041f 	and.w	r4, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8036:	096b      	lsrs	r3, r5, #5
    8038:	d121      	bne.n	807e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7e>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    803a:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    803e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8042:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    8046:	f013 0f01 	tst.w	r3, #1
    804a:	d1d3      	bne.n	7ff4 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    804c:	f10d 0107 	add.w	r1, sp, #7
    8050:	4628      	mov	r0, r5
    8052:	f004 fccf 	bl	c9f4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    8056:	4b18      	ldr	r3, [pc, #96]	; (80b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb8>)
    8058:	4298      	cmp	r0, r3
    805a:	d01d      	beq.n	8098 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x98>
		trigger_config.p_in_channel = &ch;
    805c:	f10d 0307 	add.w	r3, sp, #7
    8060:	9303      	str	r3, [sp, #12]
    8062:	e7c7      	b.n	7ff4 <gpio_nrfx_pin_interrupt_configure+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8064:	4c15      	ldr	r4, [pc, #84]	; (80bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbc>)
    8066:	f240 2229 	movw	r2, #553	; 0x229
    806a:	4621      	mov	r1, r4
    806c:	4814      	ldr	r0, [pc, #80]	; (80c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0>)
    806e:	f008 ffdb 	bl	11028 <printk>
    8072:	f240 2129 	movw	r1, #553	; 0x229
    8076:	4620      	mov	r0, r4
    8078:	f009 f8f8 	bl	1126c <assert_post_action>
    807c:	e7d9      	b.n	8032 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32>
            NRFX_ASSERT(0);
    807e:	4e0f      	ldr	r6, [pc, #60]	; (80bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbc>)
    8080:	f240 222e 	movw	r2, #558	; 0x22e
    8084:	4631      	mov	r1, r6
    8086:	480e      	ldr	r0, [pc, #56]	; (80c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0>)
    8088:	f008 ffce 	bl	11028 <printk>
    808c:	f240 212e 	movw	r1, #558	; 0x22e
    8090:	4630      	mov	r0, r6
    8092:	f009 f8eb 	bl	1126c <assert_post_action>
    8096:	e7d0      	b.n	803a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a>
			err = nrfx_gpiote_channel_alloc(&ch);
    8098:	f10d 0007 	add.w	r0, sp, #7
    809c:	f004 fd10 	bl	cac0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    80a0:	4b04      	ldr	r3, [pc, #16]	; (80b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb4>)
    80a2:	4298      	cmp	r0, r3
    80a4:	d0da      	beq.n	805c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c>
				return -ENOMEM;
    80a6:	f06f 000b 	mvn.w	r0, #11
    80aa:	e7b1      	b.n	8010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10>
		return -EIO;
    80ac:	f06f 0004 	mvn.w	r0, #4
    80b0:	e7ae      	b.n	8010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10>
    80b2:	bf00      	nop
    80b4:	0bad0000 	.word	0x0bad0000
    80b8:	0bad0004 	.word	0x0bad0004
    80bc:	000167dc 	.word	0x000167dc
    80c0:	00015984 	.word	0x00015984

000080c4 <pin_uninit>:
{
    80c4:	b530      	push	{r4, r5, lr}
    80c6:	b083      	sub	sp, #12
    80c8:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    80ca:	f10d 0107 	add.w	r1, sp, #7
    80ce:	f004 fc91 	bl	c9f4 <nrfx_gpiote_channel_get>
    80d2:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    80d4:	4620      	mov	r0, r4
    80d6:	f004 fe33 	bl	cd40 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    80da:	4b0b      	ldr	r3, [pc, #44]	; (8108 <pin_uninit+0x44>)
    80dc:	4298      	cmp	r0, r3
    80de:	d10f      	bne.n	8100 <pin_uninit+0x3c>
	if (free_ch) {
    80e0:	429d      	cmp	r5, r3
    80e2:	d005      	beq.n	80f0 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    80e4:	4b08      	ldr	r3, [pc, #32]	; (8108 <pin_uninit+0x44>)
    80e6:	4298      	cmp	r0, r3
    80e8:	d107      	bne.n	80fa <pin_uninit+0x36>
    80ea:	2000      	movs	r0, #0
}
    80ec:	b003      	add	sp, #12
    80ee:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    80f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    80f4:	f004 fcdc 	bl	cab0 <nrfx_gpiote_channel_free>
    80f8:	e7f4      	b.n	80e4 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    80fa:	f06f 0004 	mvn.w	r0, #4
    80fe:	e7f5      	b.n	80ec <pin_uninit+0x28>
		return -EIO;
    8100:	f06f 0004 	mvn.w	r0, #4
    8104:	e7f2      	b.n	80ec <pin_uninit+0x28>
    8106:	bf00      	nop
    8108:	0bad0000 	.word	0x0bad0000

0000810c <gpio_nrfx_pin_configure>:
{
    810c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8110:	b087      	sub	sp, #28
	return port->config;
    8112:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    8116:	f898 300c 	ldrb.w	r3, [r8, #12]
    811a:	f001 051f 	and.w	r5, r1, #31
    811e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    8122:	2a00      	cmp	r2, #0
    8124:	d044      	beq.n	81b0 <gpio_nrfx_pin_configure+0xa4>
    8126:	460c      	mov	r4, r1
    8128:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    812a:	2600      	movs	r6, #0
    812c:	9603      	str	r6, [sp, #12]
    812e:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    8130:	f10d 0117 	add.w	r1, sp, #23
    8134:	4620      	mov	r0, r4
    8136:	f004 fc5d 	bl	c9f4 <nrfx_gpiote_channel_get>
    813a:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    813c:	4633      	mov	r3, r6
    813e:	aa03      	add	r2, sp, #12
    8140:	4631      	mov	r1, r6
    8142:	4628      	mov	r0, r5
    8144:	f004 fa7c 	bl	c640 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    8148:	4b30      	ldr	r3, [pc, #192]	; (820c <gpio_nrfx_pin_configure+0x100>)
    814a:	4298      	cmp	r0, r3
    814c:	d15b      	bne.n	8206 <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    814e:	4599      	cmp	r9, r3
    8150:	d036      	beq.n	81c0 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    8152:	f417 7f00 	tst.w	r7, #512	; 0x200
    8156:	d043      	beq.n	81e0 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    8158:	f10d 0103 	add.w	r1, sp, #3
    815c:	4638      	mov	r0, r7
    815e:	f7ff fe49 	bl	7df4 <get_drive>
		if (rv != 0) {
    8162:	4606      	mov	r6, r0
    8164:	bb40      	cbnz	r0, 81b8 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    8166:	f89d 3003 	ldrb.w	r3, [sp, #3]
    816a:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    816e:	f417 7f80 	tst.w	r7, #256	; 0x100
    8172:	bf0c      	ite	eq
    8174:	2301      	moveq	r3, #1
    8176:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    8178:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    817c:	4638      	mov	r0, r7
    817e:	f00a f946 	bl	1240e <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    8182:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    8186:	f417 6f00 	tst.w	r7, #2048	; 0x800
    818a:	d01e      	beq.n	81ca <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    818c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    8190:	2101      	movs	r1, #1
    8192:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    8196:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    819a:	2200      	movs	r2, #0
    819c:	a901      	add	r1, sp, #4
    819e:	4628      	mov	r0, r5
    81a0:	f004 fb32 	bl	c808 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    81a4:	4b19      	ldr	r3, [pc, #100]	; (820c <gpio_nrfx_pin_configure+0x100>)
    81a6:	4298      	cmp	r0, r3
    81a8:	d006      	beq.n	81b8 <gpio_nrfx_pin_configure+0xac>
    81aa:	f06f 0615 	mvn.w	r6, #21
    81ae:	e003      	b.n	81b8 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    81b0:	4628      	mov	r0, r5
    81b2:	f7ff ff87 	bl	80c4 <pin_uninit>
    81b6:	4606      	mov	r6, r0
}
    81b8:	4630      	mov	r0, r6
    81ba:	b007      	add	sp, #28
    81bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    81c0:	f89d 0017 	ldrb.w	r0, [sp, #23]
    81c4:	f004 fc74 	bl	cab0 <nrfx_gpiote_channel_free>
    81c8:	e7c3      	b.n	8152 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    81ca:	f417 6f80 	tst.w	r7, #1024	; 0x400
    81ce:	d0e4      	beq.n	819a <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    81d0:	f8d8 2004 	ldr.w	r2, [r8, #4]
    81d4:	2301      	movs	r3, #1
    81d6:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    81da:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    81de:	e7dc      	b.n	819a <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    81e0:	4638      	mov	r0, r7
    81e2:	f00a f914 	bl	1240e <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    81e6:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    81ea:	2300      	movs	r3, #0
    81ec:	461a      	mov	r2, r3
    81ee:	a902      	add	r1, sp, #8
    81f0:	4628      	mov	r0, r5
    81f2:	f004 fa25 	bl	c640 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    81f6:	4b05      	ldr	r3, [pc, #20]	; (820c <gpio_nrfx_pin_configure+0x100>)
    81f8:	4298      	cmp	r0, r3
    81fa:	d101      	bne.n	8200 <gpio_nrfx_pin_configure+0xf4>
    81fc:	2600      	movs	r6, #0
    81fe:	e7db      	b.n	81b8 <gpio_nrfx_pin_configure+0xac>
    8200:	f06f 0615 	mvn.w	r6, #21
    8204:	e7d8      	b.n	81b8 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    8206:	f06f 0615 	mvn.w	r6, #21
    820a:	e7d5      	b.n	81b8 <gpio_nrfx_pin_configure+0xac>
    820c:	0bad0000 	.word	0x0bad0000

00008210 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    8210:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    8212:	f004 fc43 	bl	ca9c <nrfx_gpiote_is_init>
    8216:	b108      	cbz	r0, 821c <gpio_nrfx_init+0xc>
		return 0;
    8218:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    821a:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    821c:	f004 fc14 	bl	ca48 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    8220:	4b08      	ldr	r3, [pc, #32]	; (8244 <gpio_nrfx_init+0x34>)
    8222:	4298      	cmp	r0, r3
    8224:	d10a      	bne.n	823c <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    8226:	2100      	movs	r1, #0
    8228:	4807      	ldr	r0, [pc, #28]	; (8248 <gpio_nrfx_init+0x38>)
    822a:	f004 fbdd 	bl	c9e8 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    822e:	2200      	movs	r2, #0
    8230:	2105      	movs	r1, #5
    8232:	2006      	movs	r0, #6
    8234:	f7fd fa48 	bl	56c8 <z_arm_irq_priority_set>
	return 0;
    8238:	2000      	movs	r0, #0
    823a:	e7ee      	b.n	821a <gpio_nrfx_init+0xa>
		return -EIO;
    823c:	f06f 0004 	mvn.w	r0, #4
    8240:	e7eb      	b.n	821a <gpio_nrfx_init+0xa>
    8242:	bf00      	nop
    8244:	0bad0000 	.word	0x0bad0000
    8248:	00007f3d 	.word	0x00007f3d

0000824c <configure>:
	}
}

static int configure(const struct device *dev,
		     const struct spi_config *spi_cfg)
{
    824c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8250:	b086      	sub	sp, #24
    8252:	460c      	mov	r4, r1
	return dev->data;
    8254:	6907      	ldr	r7, [r0, #16]
	return dev->config;
    8256:	f8d0 8004 	ldr.w	r8, [r0, #4]
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
	struct spi_context *ctx = &dev_data->ctx;
	nrfx_spi_config_t config;
	nrfx_err_t result;

	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    825a:	f897 c05d 	ldrb.w	ip, [r7, #93]	; 0x5d
    825e:	f1bc 0f00 	cmp.w	ip, #0
    8262:	d003      	beq.n	826c <configure+0x20>
	._ctx_name.num_cs_gpios = DT_PROP_LEN_OR(_node_id, cs_gpios, 0),

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
    8264:	683b      	ldr	r3, [r7, #0]
    8266:	428b      	cmp	r3, r1
    8268:	f000 80f9 	beq.w	845e <configure+0x212>
		/* Already configured. No need to do it again. */
		return 0;
	}

	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    826c:	88a3      	ldrh	r3, [r4, #4]
    826e:	f413 6f00 	tst.w	r3, #2048	; 0x800
    8272:	d15c      	bne.n	832e <configure+0xe2>
		LOG_ERR("Half-duplex not supported");
		return -ENOTSUP;
	}

	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    8274:	f013 0f01 	tst.w	r3, #1
    8278:	d16c      	bne.n	8354 <configure+0x108>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
		return -EINVAL;
	}

	if (spi_cfg->operation & SPI_MODE_LOOP) {
    827a:	f013 0f08 	tst.w	r3, #8
    827e:	d17d      	bne.n	837c <configure+0x130>
	    (spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
		LOG_ERR("Only single line mode is supported");
		return -EINVAL;
	}

	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    8280:	f3c3 1345 	ubfx	r3, r3, #5, #6
    8284:	2b08      	cmp	r3, #8
    8286:	f040 808c 	bne.w	83a2 <configure+0x156>
		LOG_ERR("Word sizes other than 8 bits are not supported");
		return -EINVAL;
	}

	if (spi_cfg->frequency < 125000) {
    828a:	6822      	ldr	r2, [r4, #0]
    828c:	4b75      	ldr	r3, [pc, #468]	; (8464 <configure+0x218>)
    828e:	429a      	cmp	r2, r3
    8290:	f240 809a 	bls.w	83c8 <configure+0x17c>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
		return -EINVAL;
	}

	config = dev_config->def_config;
    8294:	ad01      	add	r5, sp, #4
    8296:	f108 0608 	add.w	r6, r8, #8
    829a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    829c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    829e:	6833      	ldr	r3, [r6, #0]
    82a0:	602b      	str	r3, [r5, #0]

	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
    82a2:	6823      	ldr	r3, [r4, #0]
	if (frequency < 250000) {
    82a4:	4a70      	ldr	r2, [pc, #448]	; (8468 <configure+0x21c>)
    82a6:	4293      	cmp	r3, r2
    82a8:	f240 80a1 	bls.w	83ee <configure+0x1a2>
	} else if (frequency < 500000) {
    82ac:	4a6f      	ldr	r2, [pc, #444]	; (846c <configure+0x220>)
    82ae:	4293      	cmp	r3, r2
    82b0:	f240 80a0 	bls.w	83f4 <configure+0x1a8>
	} else if (frequency < 1000000) {
    82b4:	4a6e      	ldr	r2, [pc, #440]	; (8470 <configure+0x224>)
    82b6:	4293      	cmp	r3, r2
    82b8:	f240 809f 	bls.w	83fa <configure+0x1ae>
	} else if (frequency < 2000000) {
    82bc:	4a6d      	ldr	r2, [pc, #436]	; (8474 <configure+0x228>)
    82be:	4293      	cmp	r3, r2
    82c0:	f240 809e 	bls.w	8400 <configure+0x1b4>
	} else if (frequency < 4000000) {
    82c4:	4a6c      	ldr	r2, [pc, #432]	; (8478 <configure+0x22c>)
    82c6:	4293      	cmp	r3, r2
    82c8:	f240 809d 	bls.w	8406 <configure+0x1ba>
	} else if (frequency < 8000000) {
    82cc:	4a6b      	ldr	r2, [pc, #428]	; (847c <configure+0x230>)
    82ce:	4293      	cmp	r3, r2
    82d0:	f080 809c 	bcs.w	840c <configure+0x1c0>
		return NRF_SPI_FREQ_4M;
    82d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
    82d8:	9303      	str	r3, [sp, #12]
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
    82da:	88a3      	ldrh	r3, [r4, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    82dc:	f013 0f02 	tst.w	r3, #2
    82e0:	f000 8097 	beq.w	8412 <configure+0x1c6>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    82e4:	f013 0f04 	tst.w	r3, #4
    82e8:	f000 8098 	beq.w	841c <configure+0x1d0>
			return NRF_SPI_MODE_3;
    82ec:	2303      	movs	r3, #3
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
    82ee:	f88d 3010 	strb.w	r3, [sp, #16]
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
    82f2:	88a3      	ldrh	r3, [r4, #4]
	if (operation & SPI_TRANSFER_LSB) {
    82f4:	f013 0f10 	tst.w	r3, #16
    82f8:	f000 8094 	beq.w	8424 <configure+0x1d8>
		return NRF_SPI_BIT_ORDER_LSB_FIRST;
    82fc:	2301      	movs	r3, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
    82fe:	f88d 3011 	strb.w	r3, [sp, #17]

	if (dev_data->initialized) {
    8302:	f1bc 0f00 	cmp.w	ip, #0
    8306:	f040 808f 	bne.w	8428 <configure+0x1dc>
		nrfx_spi_uninit(&dev_config->spi);
		dev_data->initialized = false;
	}

	result = nrfx_spi_init(&dev_config->spi, &config,
    830a:	463b      	mov	r3, r7
    830c:	4a5c      	ldr	r2, [pc, #368]	; (8480 <configure+0x234>)
    830e:	a901      	add	r1, sp, #4
    8310:	4640      	mov	r0, r8
    8312:	f005 f833 	bl	d37c <nrfx_spi_init>
			       event_handler, dev_data);
	if (result != NRFX_SUCCESS) {
    8316:	4b5b      	ldr	r3, [pc, #364]	; (8484 <configure+0x238>)
    8318:	4298      	cmp	r0, r3
    831a:	f040 808c 	bne.w	8436 <configure+0x1ea>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
		return -EIO;
	}

	dev_data->initialized = true;
    831e:	2301      	movs	r3, #1
    8320:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	ctx->config = spi_cfg;
    8324:	603c      	str	r4, [r7, #0]

	return 0;
    8326:	2000      	movs	r0, #0
}
    8328:	b006      	add	sp, #24
    832a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    832e:	4b56      	ldr	r3, [pc, #344]	; (8488 <configure+0x23c>)
    8330:	4a56      	ldr	r2, [pc, #344]	; (848c <configure+0x240>)
    8332:	1a9b      	subs	r3, r3, r2
    8334:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Half-duplex not supported");
    8336:	f04f 0100 	mov.w	r1, #0
    833a:	2201      	movs	r2, #1
    833c:	f362 0102 	bfi	r1, r2, #0, #3
    8340:	f36f 01c5 	bfc	r1, #3, #3
    8344:	f363 118f 	bfi	r1, r3, #6, #10
    8348:	4851      	ldr	r0, [pc, #324]	; (8490 <configure+0x244>)
    834a:	f7fc fa83 	bl	4854 <log_0>
		return -ENOTSUP;
    834e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    8352:	e7e9      	b.n	8328 <configure+0xdc>
    8354:	4b4c      	ldr	r3, [pc, #304]	; (8488 <configure+0x23c>)
    8356:	4a4d      	ldr	r2, [pc, #308]	; (848c <configure+0x240>)
    8358:	1a9b      	subs	r3, r3, r2
    835a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    835c:	f04f 0200 	mov.w	r2, #0
    8360:	2101      	movs	r1, #1
    8362:	f361 0202 	bfi	r2, r1, #0, #3
    8366:	f36f 02c5 	bfc	r2, #3, #3
    836a:	f363 128f 	bfi	r2, r3, #6, #10
    836e:	6801      	ldr	r1, [r0, #0]
    8370:	4848      	ldr	r0, [pc, #288]	; (8494 <configure+0x248>)
    8372:	f7fc f99d 	bl	46b0 <log_1>
		return -EINVAL;
    8376:	f06f 0015 	mvn.w	r0, #21
    837a:	e7d5      	b.n	8328 <configure+0xdc>
    837c:	4b42      	ldr	r3, [pc, #264]	; (8488 <configure+0x23c>)
    837e:	4a43      	ldr	r2, [pc, #268]	; (848c <configure+0x240>)
    8380:	1a9b      	subs	r3, r3, r2
    8382:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Loopback mode is not supported");
    8384:	f04f 0100 	mov.w	r1, #0
    8388:	2201      	movs	r2, #1
    838a:	f362 0102 	bfi	r1, r2, #0, #3
    838e:	f36f 01c5 	bfc	r1, #3, #3
    8392:	f363 118f 	bfi	r1, r3, #6, #10
    8396:	4840      	ldr	r0, [pc, #256]	; (8498 <configure+0x24c>)
    8398:	f7fc fa5c 	bl	4854 <log_0>
		return -EINVAL;
    839c:	f06f 0015 	mvn.w	r0, #21
    83a0:	e7c2      	b.n	8328 <configure+0xdc>
    83a2:	4b39      	ldr	r3, [pc, #228]	; (8488 <configure+0x23c>)
    83a4:	4a39      	ldr	r2, [pc, #228]	; (848c <configure+0x240>)
    83a6:	1a9b      	subs	r3, r3, r2
    83a8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Word sizes other than 8 bits are not supported");
    83aa:	f04f 0100 	mov.w	r1, #0
    83ae:	2201      	movs	r2, #1
    83b0:	f362 0102 	bfi	r1, r2, #0, #3
    83b4:	f36f 01c5 	bfc	r1, #3, #3
    83b8:	f363 118f 	bfi	r1, r3, #6, #10
    83bc:	4837      	ldr	r0, [pc, #220]	; (849c <configure+0x250>)
    83be:	f7fc fa49 	bl	4854 <log_0>
		return -EINVAL;
    83c2:	f06f 0015 	mvn.w	r0, #21
    83c6:	e7af      	b.n	8328 <configure+0xdc>
    83c8:	4b2f      	ldr	r3, [pc, #188]	; (8488 <configure+0x23c>)
    83ca:	4a30      	ldr	r2, [pc, #192]	; (848c <configure+0x240>)
    83cc:	1a9b      	subs	r3, r3, r2
    83ce:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    83d0:	f04f 0100 	mov.w	r1, #0
    83d4:	2201      	movs	r2, #1
    83d6:	f362 0102 	bfi	r1, r2, #0, #3
    83da:	f36f 01c5 	bfc	r1, #3, #3
    83de:	f363 118f 	bfi	r1, r3, #6, #10
    83e2:	482f      	ldr	r0, [pc, #188]	; (84a0 <configure+0x254>)
    83e4:	f7fc fa36 	bl	4854 <log_0>
		return -EINVAL;
    83e8:	f06f 0015 	mvn.w	r0, #21
    83ec:	e79c      	b.n	8328 <configure+0xdc>
		return NRF_SPI_FREQ_125K;
    83ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    83f2:	e771      	b.n	82d8 <configure+0x8c>
		return NRF_SPI_FREQ_250K;
    83f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    83f8:	e76e      	b.n	82d8 <configure+0x8c>
		return NRF_SPI_FREQ_500K;
    83fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    83fe:	e76b      	b.n	82d8 <configure+0x8c>
		return NRF_SPI_FREQ_1M;
    8400:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8404:	e768      	b.n	82d8 <configure+0x8c>
		return NRF_SPI_FREQ_2M;
    8406:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    840a:	e765      	b.n	82d8 <configure+0x8c>
		return NRF_SPI_FREQ_8M;
    840c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    8410:	e762      	b.n	82d8 <configure+0x8c>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    8412:	f013 0f04 	tst.w	r3, #4
    8416:	d003      	beq.n	8420 <configure+0x1d4>
			return NRF_SPI_MODE_1;
    8418:	2301      	movs	r3, #1
    841a:	e768      	b.n	82ee <configure+0xa2>
			return NRF_SPI_MODE_2;
    841c:	2302      	movs	r3, #2
    841e:	e766      	b.n	82ee <configure+0xa2>
			return NRF_SPI_MODE_0;
    8420:	2300      	movs	r3, #0
    8422:	e764      	b.n	82ee <configure+0xa2>
		return NRF_SPI_BIT_ORDER_MSB_FIRST;
    8424:	2300      	movs	r3, #0
    8426:	e76a      	b.n	82fe <configure+0xb2>
		nrfx_spi_uninit(&dev_config->spi);
    8428:	4640      	mov	r0, r8
    842a:	f005 f815 	bl	d458 <nrfx_spi_uninit>
		dev_data->initialized = false;
    842e:	2300      	movs	r3, #0
    8430:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    8434:	e769      	b.n	830a <configure+0xbe>
    8436:	4b14      	ldr	r3, [pc, #80]	; (8488 <configure+0x23c>)
    8438:	4a14      	ldr	r2, [pc, #80]	; (848c <configure+0x240>)
    843a:	1a9b      	subs	r3, r3, r2
    843c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    843e:	f04f 0200 	mov.w	r2, #0
    8442:	2101      	movs	r1, #1
    8444:	f361 0202 	bfi	r2, r1, #0, #3
    8448:	f36f 02c5 	bfc	r2, #3, #3
    844c:	f363 128f 	bfi	r2, r3, #6, #10
    8450:	4601      	mov	r1, r0
    8452:	4814      	ldr	r0, [pc, #80]	; (84a4 <configure+0x258>)
    8454:	f7fc f92c 	bl	46b0 <log_1>
		return -EIO;
    8458:	f06f 0004 	mvn.w	r0, #4
    845c:	e764      	b.n	8328 <configure+0xdc>
		return 0;
    845e:	2000      	movs	r0, #0
    8460:	e762      	b.n	8328 <configure+0xdc>
    8462:	bf00      	nop
    8464:	0001e847 	.word	0x0001e847
    8468:	0003d08f 	.word	0x0003d08f
    846c:	0007a11f 	.word	0x0007a11f
    8470:	000f423f 	.word	0x000f423f
    8474:	001e847f 	.word	0x001e847f
    8478:	003d08ff 	.word	0x003d08ff
    847c:	007a1200 	.word	0x007a1200
    8480:	00008b41 	.word	0x00008b41
    8484:	0bad0000 	.word	0x0bad0000
    8488:	000157cc 	.word	0x000157cc
    848c:	00015774 	.word	0x00015774
    8490:	00016844 	.word	0x00016844
    8494:	00016860 	.word	0x00016860
    8498:	00016884 	.word	0x00016884
    849c:	000168a4 	.word	0x000168a4
    84a0:	000168d4 	.word	0x000168d4
    84a4:	00016908 	.word	0x00016908

000084a8 <spi_nrfx_release>:
}
#endif /* CONFIG_SPI_ASYNC */

static int spi_nrfx_release(const struct device *dev,
			    const struct spi_config *spi_cfg)
{
    84a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return dev->data;
    84ac:	6904      	ldr	r4, [r0, #16]
    84ae:	6823      	ldr	r3, [r4, #0]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);

	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    84b0:	428b      	cmp	r3, r1
    84b2:	d15b      	bne.n	856c <spi_nrfx_release+0xc4>
		return -EINVAL;
	}

	if (dev_data->busy) {
    84b4:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    84b8:	2b00      	cmp	r3, #0
    84ba:	d15a      	bne.n	8572 <spi_nrfx_release+0xca>
}

static inline void _spi_context_cs_control(struct spi_context *ctx,
					   bool on, bool force_off)
{
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    84bc:	6823      	ldr	r3, [r4, #0]
    84be:	b333      	cbz	r3, 850e <spi_nrfx_release+0x66>
    84c0:	689b      	ldr	r3, [r3, #8]
    84c2:	b323      	cbz	r3, 850e <spi_nrfx_release+0x66>
    84c4:	681a      	ldr	r2, [r3, #0]
    84c6:	b312      	cbz	r2, 850e <spi_nrfx_release+0x66>
			if (!force_off &&
			    ctx->config->operation & SPI_HOLD_ON_CS) {
				return;
			}

			k_busy_wait(ctx->config->cs->delay);
    84c8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
    84ca:	f00c fa7e 	bl	149ca <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    84ce:	6823      	ldr	r3, [r4, #0]
    84d0:	689b      	ldr	r3, [r3, #8]
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
    84d2:	681d      	ldr	r5, [r3, #0]
    84d4:	791f      	ldrb	r7, [r3, #4]
	const struct gpio_driver_config *const cfg =
    84d6:	686b      	ldr	r3, [r5, #4]
	const struct gpio_driver_data *const data =
    84d8:	f8d5 8010 	ldr.w	r8, [r5, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    84dc:	681b      	ldr	r3, [r3, #0]
    84de:	2601      	movs	r6, #1
    84e0:	40be      	lsls	r6, r7
    84e2:	4233      	tst	r3, r6
    84e4:	d018      	beq.n	8518 <spi_nrfx_release+0x70>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    84e6:	f8d8 3000 	ldr.w	r3, [r8]
    84ea:	421e      	tst	r6, r3
    84ec:	d122      	bne.n	8534 <spi_nrfx_release+0x8c>
    84ee:	f04f 0800 	mov.w	r8, #0
	const struct gpio_driver_config *const cfg =
    84f2:	686b      	ldr	r3, [r5, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    84f4:	681b      	ldr	r3, [r3, #0]
    84f6:	2601      	movs	r6, #1
    84f8:	40be      	lsls	r6, r7
    84fa:	4233      	tst	r3, r6
    84fc:	d01d      	beq.n	853a <spi_nrfx_release+0x92>
	if (value != 0)	{
    84fe:	f1b8 0f00 	cmp.w	r8, #0
    8502:	d027      	beq.n	8554 <spi_nrfx_release+0xac>
	const struct gpio_driver_api *api =
    8504:	68ab      	ldr	r3, [r5, #8]
	return api->port_set_bits_raw(port, pins);
    8506:	68db      	ldr	r3, [r3, #12]
    8508:	4631      	mov	r1, r6
    850a:	4628      	mov	r0, r5
    850c:	4798      	blx	r3
	return sem->count;
    850e:	69a3      	ldr	r3, [r4, #24]
static inline void spi_context_unlock_unconditionally(struct spi_context *ctx)
{
	/* Forcing CS to go to inactive status */
	_spi_context_cs_control(ctx, false, true);

	if (!k_sem_count_get(&ctx->lock)) {
    8510:	b333      	cbz	r3, 8560 <spi_nrfx_release+0xb8>
		return -EBUSY;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);

	return 0;
    8512:	2000      	movs	r0, #0
}
    8514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    8518:	f8df 9060 	ldr.w	r9, [pc, #96]	; 857c <spi_nrfx_release+0xd4>
    851c:	f240 42bb 	movw	r2, #1211	; 0x4bb
    8520:	4649      	mov	r1, r9
    8522:	4815      	ldr	r0, [pc, #84]	; (8578 <spi_nrfx_release+0xd0>)
    8524:	f008 fd80 	bl	11028 <printk>
    8528:	f240 41bb 	movw	r1, #1211	; 0x4bb
    852c:	4648      	mov	r0, r9
    852e:	f008 fe9d 	bl	1126c <assert_post_action>
    8532:	e7d8      	b.n	84e6 <spi_nrfx_release+0x3e>
		value = (value != 0) ? 0 : 1;
    8534:	f04f 0801 	mov.w	r8, #1
    8538:	e7db      	b.n	84f2 <spi_nrfx_release+0x4a>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    853a:	4f10      	ldr	r7, [pc, #64]	; (857c <spi_nrfx_release+0xd4>)
    853c:	f240 4291 	movw	r2, #1169	; 0x491
    8540:	4639      	mov	r1, r7
    8542:	480d      	ldr	r0, [pc, #52]	; (8578 <spi_nrfx_release+0xd0>)
    8544:	f008 fd70 	bl	11028 <printk>
    8548:	f240 4191 	movw	r1, #1169	; 0x491
    854c:	4638      	mov	r0, r7
    854e:	f008 fe8d 	bl	1126c <assert_post_action>
    8552:	e7d4      	b.n	84fe <spi_nrfx_release+0x56>
	const struct gpio_driver_api *api =
    8554:	68ab      	ldr	r3, [r5, #8]
	return api->port_clear_bits_raw(port, pins);
    8556:	691b      	ldr	r3, [r3, #16]
    8558:	4631      	mov	r1, r6
    855a:	4628      	mov	r0, r5
    855c:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
    855e:	e7d6      	b.n	850e <spi_nrfx_release+0x66>
		ctx->owner = NULL;
    8560:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
    8562:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
    8566:	f006 f8ed 	bl	e744 <z_impl_k_sem_give>
}
    856a:	e7d2      	b.n	8512 <spi_nrfx_release+0x6a>
		return -EINVAL;
    856c:	f06f 0015 	mvn.w	r0, #21
    8570:	e7d0      	b.n	8514 <spi_nrfx_release+0x6c>
		return -EBUSY;
    8572:	f06f 000f 	mvn.w	r0, #15
    8576:	e7cd      	b.n	8514 <spi_nrfx_release+0x6c>
    8578:	00015984 	.word	0x00015984
    857c:	00015958 	.word	0x00015958

00008580 <spi_0_init>:
		      &spi_##idx##z_config,				       \
		      POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		       \
		      &spi_nrfx_driver_api)

#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEVICE(0);
    8580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8584:	b085      	sub	sp, #20
    8586:	4604      	mov	r4, r0
    8588:	9003      	str	r0, [sp, #12]
    858a:	2200      	movs	r2, #0
    858c:	2101      	movs	r1, #1
    858e:	2003      	movs	r0, #3
    8590:	f7fd f89a 	bl	56c8 <z_arm_irq_priority_set>
	return dev->data;
    8594:	f8d4 8010 	ldr.w	r8, [r4, #16]
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    8598:	f8d8 a008 	ldr.w	sl, [r8, #8]
    859c:	e05b      	b.n	8656 <spi_0_init+0xd6>
	__ASSERT((flags & GPIO_INT_MASK) == 0,
    859e:	4d8d      	ldr	r5, [pc, #564]	; (87d4 <spi_0_init+0x254>)
    85a0:	f240 22de 	movw	r2, #734	; 0x2de
    85a4:	4629      	mov	r1, r5
    85a6:	488c      	ldr	r0, [pc, #560]	; (87d8 <spi_0_init+0x258>)
    85a8:	f008 fd3e 	bl	11028 <printk>
    85ac:	f240 21de 	movw	r1, #734	; 0x2de
    85b0:	4628      	mov	r0, r5
    85b2:	f008 fe5b 	bl	1126c <assert_post_action>
    85b6:	e06c      	b.n	8692 <spi_0_init+0x112>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    85b8:	4d86      	ldr	r5, [pc, #536]	; (87d4 <spi_0_init+0x254>)
    85ba:	f240 22e1 	movw	r2, #737	; 0x2e1
    85be:	4629      	mov	r1, r5
    85c0:	4885      	ldr	r0, [pc, #532]	; (87d8 <spi_0_init+0x258>)
    85c2:	f008 fd31 	bl	11028 <printk>
    85c6:	f240 21e1 	movw	r1, #737	; 0x2e1
    85ca:	4628      	mov	r0, r5
    85cc:	f008 fe4e 	bl	1126c <assert_post_action>
    85d0:	e063      	b.n	869a <spi_0_init+0x11a>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
    85d2:	4d80      	ldr	r5, [pc, #512]	; (87d4 <spi_0_init+0x254>)
    85d4:	f240 22e5 	movw	r2, #741	; 0x2e5
    85d8:	4629      	mov	r1, r5
    85da:	487f      	ldr	r0, [pc, #508]	; (87d8 <spi_0_init+0x258>)
    85dc:	f008 fd24 	bl	11028 <printk>
    85e0:	f240 21e5 	movw	r1, #741	; 0x2e5
    85e4:	4628      	mov	r0, r5
    85e6:	f008 fe41 	bl	1126c <assert_post_action>
    85ea:	e05b      	b.n	86a4 <spi_0_init+0x124>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    85ec:	4d79      	ldr	r5, [pc, #484]	; (87d4 <spi_0_init+0x254>)
    85ee:	f240 22e9 	movw	r2, #745	; 0x2e9
    85f2:	4629      	mov	r1, r5
    85f4:	4878      	ldr	r0, [pc, #480]	; (87d8 <spi_0_init+0x258>)
    85f6:	f008 fd17 	bl	11028 <printk>
    85fa:	f240 21e9 	movw	r1, #745	; 0x2e9
    85fe:	4628      	mov	r0, r5
    8600:	f008 fe34 	bl	1126c <assert_post_action>
    8604:	e052      	b.n	86ac <spi_0_init+0x12c>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
    8606:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 87d4 <spi_0_init+0x254>
    860a:	f44f 723c 	mov.w	r2, #752	; 0x2f0
    860e:	4649      	mov	r1, r9
    8610:	4871      	ldr	r0, [pc, #452]	; (87d8 <spi_0_init+0x258>)
    8612:	f008 fd09 	bl	11028 <printk>
    8616:	f44f 713c 	mov.w	r1, #752	; 0x2f0
    861a:	4648      	mov	r0, r9
    861c:	f008 fe26 	bl	1126c <assert_post_action>
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    8620:	e049      	b.n	86b6 <spi_0_init+0x136>
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    8622:	f424 5380 	bic.w	r3, r4, #4096	; 0x1000
    8626:	9302      	str	r3, [sp, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    8628:	9b01      	ldr	r3, [sp, #4]
    862a:	681b      	ldr	r3, [r3, #0]
    862c:	2501      	movs	r5, #1
    862e:	fa05 f50b 	lsl.w	r5, r5, fp
    8632:	422b      	tst	r3, r5
    8634:	d047      	beq.n	86c6 <spi_0_init+0x146>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    8636:	f014 0f01 	tst.w	r4, #1
    863a:	d052      	beq.n	86e2 <spi_0_init+0x162>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    863c:	683b      	ldr	r3, [r7, #0]
    863e:	431d      	orrs	r5, r3
    8640:	603d      	str	r5, [r7, #0]
	return api->pin_configure(port, pin, flags);
    8642:	9b00      	ldr	r3, [sp, #0]
    8644:	681b      	ldr	r3, [r3, #0]
    8646:	9a02      	ldr	r2, [sp, #8]
    8648:	4659      	mov	r1, fp
    864a:	4630      	mov	r0, r6
    864c:	4798      	blx	r3
		if (ret < 0) {
    864e:	2800      	cmp	r0, #0
    8650:	db65      	blt.n	871e <spi_0_init+0x19e>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    8652:	f10a 0a08 	add.w	sl, sl, #8
    8656:	f8d8 3008 	ldr.w	r3, [r8, #8]
    865a:	f8d8 200c 	ldr.w	r2, [r8, #12]
    865e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    8662:	459a      	cmp	sl, r3
    8664:	d25a      	bcs.n	871c <spi_0_init+0x19c>
		if (!device_is_ready(cs_gpio->port)) {
    8666:	f8da 0000 	ldr.w	r0, [sl]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    866a:	f00c f8e4 	bl	14836 <z_device_ready>
    866e:	2800      	cmp	r0, #0
    8670:	d03c      	beq.n	86ec <spi_0_init+0x16c>
	return gpio_pin_configure(spec->port,
    8672:	f8da 6000 	ldr.w	r6, [sl]
    8676:	f89a b004 	ldrb.w	fp, [sl, #4]
				  spec->dt_flags | extra_flags);
    867a:	f89a 4005 	ldrb.w	r4, [sl, #5]
	return gpio_pin_configure(spec->port,
    867e:	f444 54b0 	orr.w	r4, r4, #5632	; 0x1600
	const struct gpio_driver_api *api =
    8682:	68b3      	ldr	r3, [r6, #8]
    8684:	9300      	str	r3, [sp, #0]
	const struct gpio_driver_config *const cfg =
    8686:	6873      	ldr	r3, [r6, #4]
    8688:	9301      	str	r3, [sp, #4]
	struct gpio_driver_data *data =
    868a:	6937      	ldr	r7, [r6, #16]
	__ASSERT((flags & GPIO_INT_MASK) == 0,
    868c:	f414 2ffc 	tst.w	r4, #516096	; 0x7e000
    8690:	d185      	bne.n	859e <spi_0_init+0x1e>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    8692:	f004 0330 	and.w	r3, r4, #48	; 0x30
    8696:	2b30      	cmp	r3, #48	; 0x30
    8698:	d08e      	beq.n	85b8 <spi_0_init+0x38>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
    869a:	f240 2302 	movw	r3, #514	; 0x202
    869e:	4023      	ands	r3, r4
    86a0:	2b02      	cmp	r3, #2
    86a2:	d096      	beq.n	85d2 <spi_0_init+0x52>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    86a4:	f004 0306 	and.w	r3, r4, #6
    86a8:	2b04      	cmp	r3, #4
    86aa:	d09f      	beq.n	85ec <spi_0_init+0x6c>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
    86ac:	f414 6540 	ands.w	r5, r4, #3072	; 0xc00
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
    86b0:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
    86b4:	d0a7      	beq.n	8606 <spi_0_init+0x86>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    86b6:	2d00      	cmp	r5, #0
    86b8:	d0b3      	beq.n	8622 <spi_0_init+0xa2>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    86ba:	f014 0f01 	tst.w	r4, #1
    86be:	d0b0      	beq.n	8622 <spi_0_init+0xa2>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    86c0:	f484 6440 	eor.w	r4, r4, #3072	; 0xc00
    86c4:	e7ad      	b.n	8622 <spi_0_init+0xa2>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    86c6:	f8df 910c 	ldr.w	r9, [pc, #268]	; 87d4 <spi_0_init+0x254>
    86ca:	f240 22fd 	movw	r2, #765	; 0x2fd
    86ce:	4649      	mov	r1, r9
    86d0:	4841      	ldr	r0, [pc, #260]	; (87d8 <spi_0_init+0x258>)
    86d2:	f008 fca9 	bl	11028 <printk>
    86d6:	f240 21fd 	movw	r1, #765	; 0x2fd
    86da:	4648      	mov	r0, r9
    86dc:	f008 fdc6 	bl	1126c <assert_post_action>
    86e0:	e7a9      	b.n	8636 <spi_0_init+0xb6>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    86e2:	683b      	ldr	r3, [r7, #0]
    86e4:	ea23 0505 	bic.w	r5, r3, r5
    86e8:	603d      	str	r5, [r7, #0]
    86ea:	e7aa      	b.n	8642 <spi_0_init+0xc2>
    86ec:	4a3b      	ldr	r2, [pc, #236]	; (87dc <spi_0_init+0x25c>)
    86ee:	4b3c      	ldr	r3, [pc, #240]	; (87e0 <spi_0_init+0x260>)
    86f0:	1ad2      	subs	r2, r2, r3
    86f2:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    86f4:	f04f 0300 	mov.w	r3, #0
    86f8:	2101      	movs	r1, #1
    86fa:	f361 0302 	bfi	r3, r1, #0, #3
    86fe:	f36f 03c5 	bfc	r3, #3, #3
    8702:	f362 138f 	bfi	r3, r2, #6, #10
    8706:	f8da 1000 	ldr.w	r1, [sl]
    870a:	f89a 2004 	ldrb.w	r2, [sl, #4]
    870e:	6809      	ldr	r1, [r1, #0]
    8710:	4834      	ldr	r0, [pc, #208]	; (87e4 <spi_0_init+0x264>)
    8712:	f7fc f803 	bl	471c <log_2>
			return -ENODEV;
    8716:	f06f 0012 	mvn.w	r0, #18
    871a:	e000      	b.n	871e <spi_0_init+0x19e>
	return 0;
    871c:	2000      	movs	r0, #0
SPI_NRFX_SPI_DEVICE(0);
    871e:	2800      	cmp	r0, #0
    8720:	db2b      	blt.n	877a <spi_0_init+0x1fa>
	return dev->data;
    8722:	9b03      	ldr	r3, [sp, #12]
    8724:	691c      	ldr	r4, [r3, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    8726:	6823      	ldr	r3, [r4, #0]
    8728:	b323      	cbz	r3, 8774 <spi_0_init+0x1f4>
    872a:	689b      	ldr	r3, [r3, #8]
    872c:	b313      	cbz	r3, 8774 <spi_0_init+0x1f4>
    872e:	681a      	ldr	r2, [r3, #0]
    8730:	b302      	cbz	r2, 8774 <spi_0_init+0x1f4>
			k_busy_wait(ctx->config->cs->delay);
    8732:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
    8734:	f00c f949 	bl	149ca <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    8738:	6823      	ldr	r3, [r4, #0]
    873a:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
    873c:	681d      	ldr	r5, [r3, #0]
    873e:	f893 8004 	ldrb.w	r8, [r3, #4]
	const struct gpio_driver_config *const cfg =
    8742:	686b      	ldr	r3, [r5, #4]
	const struct gpio_driver_data *const data =
    8744:	692e      	ldr	r6, [r5, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    8746:	681b      	ldr	r3, [r3, #0]
    8748:	2701      	movs	r7, #1
    874a:	fa07 f708 	lsl.w	r7, r7, r8
    874e:	423b      	tst	r3, r7
    8750:	d016      	beq.n	8780 <spi_0_init+0x200>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    8752:	6833      	ldr	r3, [r6, #0]
    8754:	421f      	tst	r7, r3
    8756:	d121      	bne.n	879c <spi_0_init+0x21c>
    8758:	2700      	movs	r7, #0
	const struct gpio_driver_config *const cfg =
    875a:	686b      	ldr	r3, [r5, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    875c:	681b      	ldr	r3, [r3, #0]
    875e:	2601      	movs	r6, #1
    8760:	fa06 f608 	lsl.w	r6, r6, r8
    8764:	4233      	tst	r3, r6
    8766:	d01b      	beq.n	87a0 <spi_0_init+0x220>
	if (value != 0)	{
    8768:	b347      	cbz	r7, 87bc <spi_0_init+0x23c>
	const struct gpio_driver_api *api =
    876a:	68ab      	ldr	r3, [r5, #8]
	return api->port_set_bits_raw(port, pins);
    876c:	68db      	ldr	r3, [r3, #12]
    876e:	4631      	mov	r1, r6
    8770:	4628      	mov	r0, r5
    8772:	4798      	blx	r3
    8774:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
    8776:	b33b      	cbz	r3, 87c8 <spi_0_init+0x248>
SPI_NRFX_SPI_DEVICE(0);
    8778:	2000      	movs	r0, #0
    877a:	b005      	add	sp, #20
    877c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    8780:	f8df 9050 	ldr.w	r9, [pc, #80]	; 87d4 <spi_0_init+0x254>
    8784:	f240 42bb 	movw	r2, #1211	; 0x4bb
    8788:	4649      	mov	r1, r9
    878a:	4813      	ldr	r0, [pc, #76]	; (87d8 <spi_0_init+0x258>)
    878c:	f008 fc4c 	bl	11028 <printk>
    8790:	f240 41bb 	movw	r1, #1211	; 0x4bb
    8794:	4648      	mov	r0, r9
    8796:	f008 fd69 	bl	1126c <assert_post_action>
    879a:	e7da      	b.n	8752 <spi_0_init+0x1d2>
		value = (value != 0) ? 0 : 1;
    879c:	2701      	movs	r7, #1
    879e:	e7dc      	b.n	875a <spi_0_init+0x1da>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    87a0:	f8df 8030 	ldr.w	r8, [pc, #48]	; 87d4 <spi_0_init+0x254>
    87a4:	f240 4291 	movw	r2, #1169	; 0x491
    87a8:	4641      	mov	r1, r8
    87aa:	480b      	ldr	r0, [pc, #44]	; (87d8 <spi_0_init+0x258>)
    87ac:	f008 fc3c 	bl	11028 <printk>
    87b0:	f240 4191 	movw	r1, #1169	; 0x491
    87b4:	4640      	mov	r0, r8
    87b6:	f008 fd59 	bl	1126c <assert_post_action>
    87ba:	e7d5      	b.n	8768 <spi_0_init+0x1e8>
	const struct gpio_driver_api *api =
    87bc:	68ab      	ldr	r3, [r5, #8]
	return api->port_clear_bits_raw(port, pins);
    87be:	691b      	ldr	r3, [r3, #16]
    87c0:	4631      	mov	r1, r6
    87c2:	4628      	mov	r0, r5
    87c4:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
    87c6:	e7d5      	b.n	8774 <spi_0_init+0x1f4>
		ctx->owner = NULL;
    87c8:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
    87ca:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
    87ce:	f005 ffb9 	bl	e744 <z_impl_k_sem_give>
}
    87d2:	e7d1      	b.n	8778 <spi_0_init+0x1f8>
    87d4:	00015958 	.word	0x00015958
    87d8:	00015984 	.word	0x00015984
    87dc:	000157cc 	.word	0x000157cc
    87e0:	00015774 	.word	0x00015774
    87e4:	00016930 	.word	0x00016930

000087e8 <transfer_next_chunk>:
{
    87e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    87ec:	b084      	sub	sp, #16
	return dev->data;
    87ee:	6904      	ldr	r4, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    87f0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    87f2:	2a00      	cmp	r2, #0
    87f4:	d063      	beq.n	88be <transfer_next_chunk+0xd6>
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
    87f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
    87f8:	2b00      	cmp	r3, #0
    87fa:	d062      	beq.n	88c2 <transfer_next_chunk+0xda>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    87fc:	4293      	cmp	r3, r2
    87fe:	bf28      	it	cs
    8800:	4613      	movcs	r3, r2
	if (chunk_len > 0) {
    8802:	2b00      	cmp	r3, #0
    8804:	d069      	beq.n	88da <transfer_next_chunk+0xf2>
		dev_data->chunk_len = chunk_len;
    8806:	65a3      	str	r3, [r4, #88]	; 0x58
		xfer.p_tx_buffer = ctx->tx_buf;
    8808:	6c61      	ldr	r1, [r4, #68]	; 0x44
    880a:	9100      	str	r1, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
    880c:	2900      	cmp	r1, #0
    880e:	d05a      	beq.n	88c6 <transfer_next_chunk+0xde>
    8810:	2a00      	cmp	r2, #0
    8812:	d15a      	bne.n	88ca <transfer_next_chunk+0xe2>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    8814:	2a00      	cmp	r2, #0
    8816:	d05a      	beq.n	88ce <transfer_next_chunk+0xe6>
    8818:	461a      	mov	r2, r3
    881a:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    881c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    881e:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    8820:	2a00      	cmp	r2, #0
    8822:	d056      	beq.n	88d2 <transfer_next_chunk+0xea>
    8824:	6d22      	ldr	r2, [r4, #80]	; 0x50
    8826:	2a00      	cmp	r2, #0
    8828:	d155      	bne.n	88d6 <transfer_next_chunk+0xee>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    882a:	b902      	cbnz	r2, 882e <transfer_next_chunk+0x46>
    882c:	2300      	movs	r3, #0
    882e:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
    8830:	2200      	movs	r2, #0
    8832:	4669      	mov	r1, sp
    8834:	6840      	ldr	r0, [r0, #4]
    8836:	f004 ff2b 	bl	d690 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
    883a:	4b3b      	ldr	r3, [pc, #236]	; (8928 <transfer_next_chunk+0x140>)
    883c:	4298      	cmp	r0, r3
    883e:	d03b      	beq.n	88b8 <transfer_next_chunk+0xd0>
		error = -EIO;
    8840:	f06f 0504 	mvn.w	r5, #4
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    8844:	6823      	ldr	r3, [r4, #0]
    8846:	2b00      	cmp	r3, #0
    8848:	d02e      	beq.n	88a8 <transfer_next_chunk+0xc0>
    884a:	689a      	ldr	r2, [r3, #8]
    884c:	b362      	cbz	r2, 88a8 <transfer_next_chunk+0xc0>
    884e:	6811      	ldr	r1, [r2, #0]
    8850:	b351      	cbz	r1, 88a8 <transfer_next_chunk+0xc0>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
    8852:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
    8854:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    8858:	d126      	bne.n	88a8 <transfer_next_chunk+0xc0>
			k_busy_wait(ctx->config->cs->delay);
    885a:	6890      	ldr	r0, [r2, #8]
	z_impl_k_busy_wait(usec_to_wait);
    885c:	f00c f8b5 	bl	149ca <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    8860:	6823      	ldr	r3, [r4, #0]
    8862:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
    8864:	681e      	ldr	r6, [r3, #0]
    8866:	f893 9004 	ldrb.w	r9, [r3, #4]
	const struct gpio_driver_config *const cfg =
    886a:	6873      	ldr	r3, [r6, #4]
	const struct gpio_driver_data *const data =
    886c:	6937      	ldr	r7, [r6, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    886e:	681b      	ldr	r3, [r3, #0]
    8870:	f04f 0801 	mov.w	r8, #1
    8874:	fa08 f809 	lsl.w	r8, r8, r9
    8878:	ea13 0f08 	tst.w	r3, r8
    887c:	d02f      	beq.n	88de <transfer_next_chunk+0xf6>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    887e:	683b      	ldr	r3, [r7, #0]
    8880:	ea18 0f03 	tst.w	r8, r3
    8884:	d139      	bne.n	88fa <transfer_next_chunk+0x112>
    8886:	f04f 0800 	mov.w	r8, #0
	const struct gpio_driver_config *const cfg =
    888a:	6873      	ldr	r3, [r6, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    888c:	681b      	ldr	r3, [r3, #0]
    888e:	2701      	movs	r7, #1
    8890:	fa07 f709 	lsl.w	r7, r7, r9
    8894:	423b      	tst	r3, r7
    8896:	d033      	beq.n	8900 <transfer_next_chunk+0x118>
	if (value != 0)	{
    8898:	f1b8 0f00 	cmp.w	r8, #0
    889c:	d03e      	beq.n	891c <transfer_next_chunk+0x134>
	const struct gpio_driver_api *api =
    889e:	68b3      	ldr	r3, [r6, #8]
	return api->port_set_bits_raw(port, pins);
    88a0:	68db      	ldr	r3, [r3, #12]
    88a2:	4639      	mov	r1, r7
    88a4:	4630      	mov	r0, r6
    88a6:	4798      	blx	r3
	ctx->sync_status = status;
    88a8:	6325      	str	r5, [r4, #48]	; 0x30
	k_sem_give(&ctx->sync);
    88aa:	f104 0020 	add.w	r0, r4, #32
	z_impl_k_sem_give(sem);
    88ae:	f005 ff49 	bl	e744 <z_impl_k_sem_give>
	dev_data->busy = false;
    88b2:	2300      	movs	r3, #0
    88b4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
    88b8:	b004      	add	sp, #16
    88ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return ctx->rx_len;
    88be:	6d23      	ldr	r3, [r4, #80]	; 0x50
    88c0:	e79f      	b.n	8802 <transfer_next_chunk+0x1a>
		return ctx->tx_len;
    88c2:	4613      	mov	r3, r2
    88c4:	e79d      	b.n	8802 <transfer_next_chunk+0x1a>
	return !!(ctx->tx_buf && ctx->tx_len);
    88c6:	2200      	movs	r2, #0
    88c8:	e7a4      	b.n	8814 <transfer_next_chunk+0x2c>
    88ca:	2201      	movs	r2, #1
    88cc:	e7a2      	b.n	8814 <transfer_next_chunk+0x2c>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    88ce:	2200      	movs	r2, #0
    88d0:	e7a3      	b.n	881a <transfer_next_chunk+0x32>
	return !!(ctx->rx_buf && ctx->rx_len);
    88d2:	2200      	movs	r2, #0
    88d4:	e7a9      	b.n	882a <transfer_next_chunk+0x42>
    88d6:	2201      	movs	r2, #1
    88d8:	e7a7      	b.n	882a <transfer_next_chunk+0x42>
	int error = 0;
    88da:	2500      	movs	r5, #0
    88dc:	e7b2      	b.n	8844 <transfer_next_chunk+0x5c>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    88de:	f8df a050 	ldr.w	sl, [pc, #80]	; 8930 <transfer_next_chunk+0x148>
    88e2:	f240 42bb 	movw	r2, #1211	; 0x4bb
    88e6:	4651      	mov	r1, sl
    88e8:	4810      	ldr	r0, [pc, #64]	; (892c <transfer_next_chunk+0x144>)
    88ea:	f008 fb9d 	bl	11028 <printk>
    88ee:	f240 41bb 	movw	r1, #1211	; 0x4bb
    88f2:	4650      	mov	r0, sl
    88f4:	f008 fcba 	bl	1126c <assert_post_action>
    88f8:	e7c1      	b.n	887e <transfer_next_chunk+0x96>
		value = (value != 0) ? 0 : 1;
    88fa:	f04f 0801 	mov.w	r8, #1
    88fe:	e7c4      	b.n	888a <transfer_next_chunk+0xa2>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    8900:	f8df 902c 	ldr.w	r9, [pc, #44]	; 8930 <transfer_next_chunk+0x148>
    8904:	f240 4291 	movw	r2, #1169	; 0x491
    8908:	4649      	mov	r1, r9
    890a:	4808      	ldr	r0, [pc, #32]	; (892c <transfer_next_chunk+0x144>)
    890c:	f008 fb8c 	bl	11028 <printk>
    8910:	f240 4191 	movw	r1, #1169	; 0x491
    8914:	4648      	mov	r0, r9
    8916:	f008 fca9 	bl	1126c <assert_post_action>
    891a:	e7bd      	b.n	8898 <transfer_next_chunk+0xb0>
	const struct gpio_driver_api *api =
    891c:	68b3      	ldr	r3, [r6, #8]
	return api->port_clear_bits_raw(port, pins);
    891e:	691b      	ldr	r3, [r3, #16]
    8920:	4639      	mov	r1, r7
    8922:	4630      	mov	r0, r6
    8924:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
    8926:	e7bf      	b.n	88a8 <transfer_next_chunk+0xc0>
    8928:	0bad0000 	.word	0x0bad0000
    892c:	00015984 	.word	0x00015984
    8930:	00015958 	.word	0x00015958

00008934 <transceive>:
{
    8934:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8938:	4607      	mov	r7, r0
    893a:	460e      	mov	r6, r1
    893c:	4691      	mov	r9, r2
    893e:	4698      	mov	r8, r3
	return dev->data;
    8940:	6904      	ldr	r4, [r0, #16]
	spi_context_lock(&dev_data->ctx, asynchronous, signal, spi_cfg);
    8942:	4625      	mov	r5, r4
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    8944:	888b      	ldrh	r3, [r1, #4]
    8946:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    894a:	d004      	beq.n	8956 <transceive+0x22>
    894c:	69a3      	ldr	r3, [r4, #24]
    894e:	b913      	cbnz	r3, 8956 <transceive+0x22>
		(ctx->owner == spi_cfg)) {
    8950:	6863      	ldr	r3, [r4, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
    8952:	4299      	cmp	r1, r3
    8954:	d008      	beq.n	8968 <transceive+0x34>
	k_sem_take(&ctx->lock, K_FOREVER);
    8956:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_sem_take(sem, timeout);
    895a:	f04f 32ff 	mov.w	r2, #4294967295
    895e:	f04f 33ff 	mov.w	r3, #4294967295
    8962:	f005 ff29 	bl	e7b8 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    8966:	6066      	str	r6, [r4, #4]
	error = configure(dev, spi_cfg);
    8968:	4631      	mov	r1, r6
    896a:	4638      	mov	r0, r7
    896c:	f7ff fc6e 	bl	824c <configure>
	if (error == 0) {
    8970:	4606      	mov	r6, r0
    8972:	b140      	cbz	r0, 8986 <transceive+0x52>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    8974:	6823      	ldr	r3, [r4, #0]
    8976:	889b      	ldrh	r3, [r3, #4]
    8978:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    897c:	f000 80cf 	beq.w	8b1e <transceive+0x1ea>
}
    8980:	4630      	mov	r0, r6
    8982:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dev_data->busy = true;
    8986:	2301      	movs	r3, #1
    8988:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    898c:	f1b9 0f00 	cmp.w	r9, #0
    8990:	d010      	beq.n	89b4 <transceive+0x80>
    8992:	f8d9 3000 	ldr.w	r3, [r9]
    8996:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    8998:	b173      	cbz	r3, 89b8 <transceive+0x84>
    899a:	f8d9 3004 	ldr.w	r3, [r9, #4]
    899e:	63a3      	str	r3, [r4, #56]	; 0x38
	while (*count) {
    89a0:	6bab      	ldr	r3, [r5, #56]	; 0x38
    89a2:	b173      	cbz	r3, 89c2 <transceive+0x8e>
		if (((*current)->len / dfs) != 0) {
    89a4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    89a6:	6851      	ldr	r1, [r2, #4]
    89a8:	b941      	cbnz	r1, 89bc <transceive+0x88>
		++(*current);
    89aa:	3208      	adds	r2, #8
    89ac:	636a      	str	r2, [r5, #52]	; 0x34
		--(*count);
    89ae:	3b01      	subs	r3, #1
    89b0:	63ab      	str	r3, [r5, #56]	; 0x38
    89b2:	e7f5      	b.n	89a0 <transceive+0x6c>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    89b4:	464b      	mov	r3, r9
    89b6:	e7ee      	b.n	8996 <transceive+0x62>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    89b8:	2300      	movs	r3, #0
    89ba:	e7f0      	b.n	899e <transceive+0x6a>
			*buf_len = (*current)->len / dfs;
    89bc:	64a1      	str	r1, [r4, #72]	; 0x48
			return (*current)->buf;
    89be:	6813      	ldr	r3, [r2, #0]
    89c0:	e000      	b.n	89c4 <transceive+0x90>
	*buf_len = 0;
    89c2:	64a3      	str	r3, [r4, #72]	; 0x48
	ctx->tx_buf = (const uint8_t *)
    89c4:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    89c6:	f1b8 0f00 	cmp.w	r8, #0
    89ca:	d010      	beq.n	89ee <transceive+0xba>
    89cc:	f8d8 3000 	ldr.w	r3, [r8]
    89d0:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    89d2:	b173      	cbz	r3, 89f2 <transceive+0xbe>
    89d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    89d8:	6423      	str	r3, [r4, #64]	; 0x40
	while (*count) {
    89da:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    89dc:	b172      	cbz	r2, 89fc <transceive+0xc8>
		if (((*current)->len / dfs) != 0) {
    89de:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    89e0:	6859      	ldr	r1, [r3, #4]
    89e2:	b941      	cbnz	r1, 89f6 <transceive+0xc2>
		++(*current);
    89e4:	3308      	adds	r3, #8
    89e6:	63eb      	str	r3, [r5, #60]	; 0x3c
		--(*count);
    89e8:	3a01      	subs	r2, #1
    89ea:	642a      	str	r2, [r5, #64]	; 0x40
    89ec:	e7f5      	b.n	89da <transceive+0xa6>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    89ee:	4643      	mov	r3, r8
    89f0:	e7ee      	b.n	89d0 <transceive+0x9c>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    89f2:	2300      	movs	r3, #0
    89f4:	e7f0      	b.n	89d8 <transceive+0xa4>
			*buf_len = (*current)->len / dfs;
    89f6:	6521      	str	r1, [r4, #80]	; 0x50
			return (*current)->buf;
    89f8:	681b      	ldr	r3, [r3, #0]
    89fa:	e001      	b.n	8a00 <transceive+0xcc>
	*buf_len = 0;
    89fc:	2300      	movs	r3, #0
    89fe:	6523      	str	r3, [r4, #80]	; 0x50
	ctx->rx_buf = (uint8_t *)
    8a00:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->sync_status = 0;
    8a02:	2300      	movs	r3, #0
    8a04:	6323      	str	r3, [r4, #48]	; 0x30
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    8a06:	6823      	ldr	r3, [r4, #0]
    8a08:	b35b      	cbz	r3, 8a62 <transceive+0x12e>
    8a0a:	689b      	ldr	r3, [r3, #8]
    8a0c:	b34b      	cbz	r3, 8a62 <transceive+0x12e>
    8a0e:	681d      	ldr	r5, [r3, #0]
    8a10:	b33d      	cbz	r5, 8a62 <transceive+0x12e>
	return gpio_pin_set(spec->port, spec->pin, value);
    8a12:	f893 9004 	ldrb.w	r9, [r3, #4]
	const struct gpio_driver_config *const cfg =
    8a16:	686b      	ldr	r3, [r5, #4]
	const struct gpio_driver_data *const data =
    8a18:	f8d5 a010 	ldr.w	sl, [r5, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    8a1c:	681b      	ldr	r3, [r3, #0]
    8a1e:	f04f 0801 	mov.w	r8, #1
    8a22:	fa08 f809 	lsl.w	r8, r8, r9
    8a26:	ea13 0f08 	tst.w	r3, r8
    8a2a:	d043      	beq.n	8ab4 <transceive+0x180>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    8a2c:	f8da 3000 	ldr.w	r3, [sl]
    8a30:	ea18 0f03 	tst.w	r8, r3
    8a34:	d100      	bne.n	8a38 <transceive+0x104>
    8a36:	2601      	movs	r6, #1
	const struct gpio_driver_config *const cfg =
    8a38:	686b      	ldr	r3, [r5, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    8a3a:	681b      	ldr	r3, [r3, #0]
    8a3c:	f04f 0801 	mov.w	r8, #1
    8a40:	fa08 f809 	lsl.w	r8, r8, r9
    8a44:	ea13 0f08 	tst.w	r3, r8
    8a48:	d042      	beq.n	8ad0 <transceive+0x19c>
	if (value != 0)	{
    8a4a:	2e00      	cmp	r6, #0
    8a4c:	d04e      	beq.n	8aec <transceive+0x1b8>
	const struct gpio_driver_api *api =
    8a4e:	68ab      	ldr	r3, [r5, #8]
	return api->port_set_bits_raw(port, pins);
    8a50:	68db      	ldr	r3, [r3, #12]
    8a52:	4641      	mov	r1, r8
    8a54:	4628      	mov	r0, r5
    8a56:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
    8a58:	6823      	ldr	r3, [r4, #0]
    8a5a:	689b      	ldr	r3, [r3, #8]
    8a5c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
    8a5e:	f00b ffb4 	bl	149ca <z_impl_k_busy_wait>
		transfer_next_chunk(dev);
    8a62:	4638      	mov	r0, r7
    8a64:	f7ff fec0 	bl	87e8 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    8a68:	6d23      	ldr	r3, [r4, #80]	; 0x50
    8a6a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    8a6c:	429a      	cmp	r2, r3
    8a6e:	bf38      	it	cc
    8a70:	461a      	movcc	r2, r3
    8a72:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
    8a76:	fb03 f302 	mul.w	r3, r3, r2
			     ctx->config->frequency;
    8a7a:	4625      	mov	r5, r4
    8a7c:	f855 2b20 	ldr.w	r2, [r5], #32
    8a80:	6812      	ldr	r2, [r2, #0]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    8a82:	fbb3 f3f2 	udiv	r3, r3, r2
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    8a86:	33c8      	adds	r3, #200	; 0xc8
    8a88:	0c59      	lsrs	r1, r3, #17
    8a8a:	03d8      	lsls	r0, r3, #15
    8a8c:	f240 36e7 	movw	r6, #999	; 0x3e7
    8a90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8a94:	2300      	movs	r3, #0
    8a96:	1980      	adds	r0, r0, r6
    8a98:	f04f 0600 	mov.w	r6, #0
    8a9c:	eb46 0101 	adc.w	r1, r6, r1
    8aa0:	f7f8 fa98 	bl	fd4 <__aeabi_uldivmod>
    8aa4:	4602      	mov	r2, r0
    8aa6:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    8aa8:	4628      	mov	r0, r5
    8aaa:	f005 fe85 	bl	e7b8 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
    8aae:	bb18      	cbnz	r0, 8af8 <transceive+0x1c4>
	status = ctx->sync_status;
    8ab0:	6b26      	ldr	r6, [r4, #48]	; 0x30
	return status;
    8ab2:	e75f      	b.n	8974 <transceive+0x40>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    8ab4:	f8df b084 	ldr.w	fp, [pc, #132]	; 8b3c <transceive+0x208>
    8ab8:	f240 42bb 	movw	r2, #1211	; 0x4bb
    8abc:	4659      	mov	r1, fp
    8abe:	481b      	ldr	r0, [pc, #108]	; (8b2c <transceive+0x1f8>)
    8ac0:	f008 fab2 	bl	11028 <printk>
    8ac4:	f240 41bb 	movw	r1, #1211	; 0x4bb
    8ac8:	4658      	mov	r0, fp
    8aca:	f008 fbcf 	bl	1126c <assert_post_action>
    8ace:	e7ad      	b.n	8a2c <transceive+0xf8>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    8ad0:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8b3c <transceive+0x208>
    8ad4:	f240 4291 	movw	r2, #1169	; 0x491
    8ad8:	4649      	mov	r1, r9
    8ada:	4814      	ldr	r0, [pc, #80]	; (8b2c <transceive+0x1f8>)
    8adc:	f008 faa4 	bl	11028 <printk>
    8ae0:	f240 4191 	movw	r1, #1169	; 0x491
    8ae4:	4648      	mov	r0, r9
    8ae6:	f008 fbc1 	bl	1126c <assert_post_action>
    8aea:	e7ae      	b.n	8a4a <transceive+0x116>
	const struct gpio_driver_api *api =
    8aec:	68ab      	ldr	r3, [r5, #8]
	return api->port_clear_bits_raw(port, pins);
    8aee:	691b      	ldr	r3, [r3, #16]
    8af0:	4641      	mov	r1, r8
    8af2:	4628      	mov	r0, r5
    8af4:	4798      	blx	r3
    8af6:	e7af      	b.n	8a58 <transceive+0x124>
    8af8:	4b0d      	ldr	r3, [pc, #52]	; (8b30 <transceive+0x1fc>)
    8afa:	4a0e      	ldr	r2, [pc, #56]	; (8b34 <transceive+0x200>)
    8afc:	1a9b      	subs	r3, r3, r2
    8afe:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Timeout waiting for transfer complete");
    8b00:	f04f 0100 	mov.w	r1, #0
    8b04:	2201      	movs	r2, #1
    8b06:	f362 0102 	bfi	r1, r2, #0, #3
    8b0a:	f36f 01c5 	bfc	r1, #3, #3
    8b0e:	f363 118f 	bfi	r1, r3, #6, #10
    8b12:	4809      	ldr	r0, [pc, #36]	; (8b38 <transceive+0x204>)
    8b14:	f7fb fe9e 	bl	4854 <log_0>
		return -ETIMEDOUT;
    8b18:	f06f 0673 	mvn.w	r6, #115	; 0x73
    8b1c:	e72a      	b.n	8974 <transceive+0x40>
		ctx->owner = NULL;
    8b1e:	2300      	movs	r3, #0
    8b20:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
    8b22:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
    8b26:	f005 fe0d 	bl	e744 <z_impl_k_sem_give>
	return error;
    8b2a:	e729      	b.n	8980 <transceive+0x4c>
    8b2c:	00015984 	.word	0x00015984
    8b30:	000157cc 	.word	0x000157cc
    8b34:	00015774 	.word	0x00015774
    8b38:	00016954 	.word	0x00016954
    8b3c:	00015958 	.word	0x00015958

00008b40 <event_handler>:
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    8b40:	7803      	ldrb	r3, [r0, #0]
    8b42:	2b00      	cmp	r3, #0
    8b44:	d16d      	bne.n	8c22 <event_handler+0xe2>
{
    8b46:	b510      	push	{r4, lr}
    8b48:	460c      	mov	r4, r1
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    8b4a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
    8b4c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    8b4e:	b1cb      	cbz	r3, 8b84 <event_handler+0x44>
	if (len > ctx->tx_len) {
    8b50:	429a      	cmp	r2, r3
    8b52:	d807      	bhi.n	8b64 <event_handler+0x24>
	ctx->tx_len -= len;
    8b54:	1a9b      	subs	r3, r3, r2
    8b56:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->tx_len) {
    8b58:	b31b      	cbz	r3, 8ba2 <event_handler+0x62>
	} else if (ctx->tx_buf) {
    8b5a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    8b5c:	b193      	cbz	r3, 8b84 <event_handler+0x44>
		ctx->tx_buf += dfs * len;
    8b5e:	441a      	add	r2, r3
    8b60:	644a      	str	r2, [r1, #68]	; 0x44
    8b62:	e00f      	b.n	8b84 <event_handler+0x44>
    8b64:	4b2f      	ldr	r3, [pc, #188]	; (8c24 <event_handler+0xe4>)
    8b66:	4a30      	ldr	r2, [pc, #192]	; (8c28 <event_handler+0xe8>)
    8b68:	1a9b      	subs	r3, r3, r2
    8b6a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Update exceeds current buffer");
    8b6c:	f04f 0100 	mov.w	r1, #0
    8b70:	2201      	movs	r2, #1
    8b72:	f362 0102 	bfi	r1, r2, #0, #3
    8b76:	f36f 01c5 	bfc	r1, #3, #3
    8b7a:	f363 118f 	bfi	r1, r3, #6, #10
    8b7e:	482b      	ldr	r0, [pc, #172]	; (8c2c <event_handler+0xec>)
    8b80:	f7fb fe68 	bl	4854 <log_0>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    8b84:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
    8b86:	6d23      	ldr	r3, [r4, #80]	; 0x50
    8b88:	2b00      	cmp	r3, #0
    8b8a:	d030      	beq.n	8bee <event_handler+0xae>
	if (len > ctx->rx_len) {
    8b8c:	429a      	cmp	r2, r3
    8b8e:	d81e      	bhi.n	8bce <event_handler+0x8e>
	ctx->rx_len -= len;
    8b90:	1a9b      	subs	r3, r3, r2
    8b92:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
    8b94:	2b00      	cmp	r3, #0
    8b96:	d02e      	beq.n	8bf6 <event_handler+0xb6>
	} else if (ctx->rx_buf) {
    8b98:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    8b9a:	b343      	cbz	r3, 8bee <event_handler+0xae>
		ctx->rx_buf += dfs * len;
    8b9c:	441a      	add	r2, r3
    8b9e:	64e2      	str	r2, [r4, #76]	; 0x4c
    8ba0:	e025      	b.n	8bee <event_handler+0xae>
		++ctx->current_tx;
    8ba2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    8ba4:	3308      	adds	r3, #8
    8ba6:	634b      	str	r3, [r1, #52]	; 0x34
		--ctx->tx_count;
    8ba8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    8baa:	3b01      	subs	r3, #1
    8bac:	638b      	str	r3, [r1, #56]	; 0x38
	while (*count) {
    8bae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8bb0:	b153      	cbz	r3, 8bc8 <event_handler+0x88>
		if (((*current)->len / dfs) != 0) {
    8bb2:	6b62      	ldr	r2, [r4, #52]	; 0x34
    8bb4:	6851      	ldr	r1, [r2, #4]
    8bb6:	b921      	cbnz	r1, 8bc2 <event_handler+0x82>
		++(*current);
    8bb8:	3208      	adds	r2, #8
    8bba:	6362      	str	r2, [r4, #52]	; 0x34
		--(*count);
    8bbc:	3b01      	subs	r3, #1
    8bbe:	63a3      	str	r3, [r4, #56]	; 0x38
    8bc0:	e7f5      	b.n	8bae <event_handler+0x6e>
			*buf_len = (*current)->len / dfs;
    8bc2:	64a1      	str	r1, [r4, #72]	; 0x48
			return (*current)->buf;
    8bc4:	6813      	ldr	r3, [r2, #0]
    8bc6:	e000      	b.n	8bca <event_handler+0x8a>
	*buf_len = 0;
    8bc8:	64a3      	str	r3, [r4, #72]	; 0x48
		ctx->tx_buf = (const uint8_t *)
    8bca:	6463      	str	r3, [r4, #68]	; 0x44
    8bcc:	e7da      	b.n	8b84 <event_handler+0x44>
    8bce:	4b15      	ldr	r3, [pc, #84]	; (8c24 <event_handler+0xe4>)
    8bd0:	4a15      	ldr	r2, [pc, #84]	; (8c28 <event_handler+0xe8>)
    8bd2:	1a9b      	subs	r3, r3, r2
    8bd4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Update exceeds current buffer");
    8bd6:	f04f 0100 	mov.w	r1, #0
    8bda:	2201      	movs	r2, #1
    8bdc:	f362 0102 	bfi	r1, r2, #0, #3
    8be0:	f36f 01c5 	bfc	r1, #3, #3
    8be4:	f363 118f 	bfi	r1, r3, #6, #10
    8be8:	4810      	ldr	r0, [pc, #64]	; (8c2c <event_handler+0xec>)
    8bea:	f7fb fe33 	bl	4854 <log_0>
		transfer_next_chunk(dev_data->dev);
    8bee:	6d60      	ldr	r0, [r4, #84]	; 0x54
    8bf0:	f7ff fdfa 	bl	87e8 <transfer_next_chunk>
}
    8bf4:	bd10      	pop	{r4, pc}
		++ctx->current_rx;
    8bf6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    8bf8:	3308      	adds	r3, #8
    8bfa:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
    8bfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
    8bfe:	3b01      	subs	r3, #1
    8c00:	6423      	str	r3, [r4, #64]	; 0x40
	while (*count) {
    8c02:	6c23      	ldr	r3, [r4, #64]	; 0x40
    8c04:	b153      	cbz	r3, 8c1c <event_handler+0xdc>
		if (((*current)->len / dfs) != 0) {
    8c06:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    8c08:	6851      	ldr	r1, [r2, #4]
    8c0a:	b921      	cbnz	r1, 8c16 <event_handler+0xd6>
		++(*current);
    8c0c:	3208      	adds	r2, #8
    8c0e:	63e2      	str	r2, [r4, #60]	; 0x3c
		--(*count);
    8c10:	3b01      	subs	r3, #1
    8c12:	6423      	str	r3, [r4, #64]	; 0x40
    8c14:	e7f5      	b.n	8c02 <event_handler+0xc2>
			*buf_len = (*current)->len / dfs;
    8c16:	6521      	str	r1, [r4, #80]	; 0x50
			return (*current)->buf;
    8c18:	6813      	ldr	r3, [r2, #0]
    8c1a:	e000      	b.n	8c1e <event_handler+0xde>
	*buf_len = 0;
    8c1c:	6523      	str	r3, [r4, #80]	; 0x50
		ctx->rx_buf = (uint8_t *)
    8c1e:	64e3      	str	r3, [r4, #76]	; 0x4c
    8c20:	e7e5      	b.n	8bee <event_handler+0xae>
    8c22:	4770      	bx	lr
    8c24:	000157cc 	.word	0x000157cc
    8c28:	00015774 	.word	0x00015774
    8c2c:	0001697c 	.word	0x0001697c

00008c30 <spi_1_init>:
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
    8c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8c34:	b085      	sub	sp, #20
    8c36:	4604      	mov	r4, r0
    8c38:	9003      	str	r0, [sp, #12]
    8c3a:	2200      	movs	r2, #0
    8c3c:	2101      	movs	r1, #1
    8c3e:	2004      	movs	r0, #4
    8c40:	f7fc fd42 	bl	56c8 <z_arm_irq_priority_set>
	return dev->data;
    8c44:	f8d4 8010 	ldr.w	r8, [r4, #16]
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    8c48:	f8d8 a008 	ldr.w	sl, [r8, #8]
    8c4c:	e05b      	b.n	8d06 <spi_1_init+0xd6>
	__ASSERT((flags & GPIO_INT_MASK) == 0,
    8c4e:	4d8d      	ldr	r5, [pc, #564]	; (8e84 <spi_1_init+0x254>)
    8c50:	f240 22de 	movw	r2, #734	; 0x2de
    8c54:	4629      	mov	r1, r5
    8c56:	488c      	ldr	r0, [pc, #560]	; (8e88 <spi_1_init+0x258>)
    8c58:	f008 f9e6 	bl	11028 <printk>
    8c5c:	f240 21de 	movw	r1, #734	; 0x2de
    8c60:	4628      	mov	r0, r5
    8c62:	f008 fb03 	bl	1126c <assert_post_action>
    8c66:	e06c      	b.n	8d42 <spi_1_init+0x112>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    8c68:	4d86      	ldr	r5, [pc, #536]	; (8e84 <spi_1_init+0x254>)
    8c6a:	f240 22e1 	movw	r2, #737	; 0x2e1
    8c6e:	4629      	mov	r1, r5
    8c70:	4885      	ldr	r0, [pc, #532]	; (8e88 <spi_1_init+0x258>)
    8c72:	f008 f9d9 	bl	11028 <printk>
    8c76:	f240 21e1 	movw	r1, #737	; 0x2e1
    8c7a:	4628      	mov	r0, r5
    8c7c:	f008 faf6 	bl	1126c <assert_post_action>
    8c80:	e063      	b.n	8d4a <spi_1_init+0x11a>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
    8c82:	4d80      	ldr	r5, [pc, #512]	; (8e84 <spi_1_init+0x254>)
    8c84:	f240 22e5 	movw	r2, #741	; 0x2e5
    8c88:	4629      	mov	r1, r5
    8c8a:	487f      	ldr	r0, [pc, #508]	; (8e88 <spi_1_init+0x258>)
    8c8c:	f008 f9cc 	bl	11028 <printk>
    8c90:	f240 21e5 	movw	r1, #741	; 0x2e5
    8c94:	4628      	mov	r0, r5
    8c96:	f008 fae9 	bl	1126c <assert_post_action>
    8c9a:	e05b      	b.n	8d54 <spi_1_init+0x124>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    8c9c:	4d79      	ldr	r5, [pc, #484]	; (8e84 <spi_1_init+0x254>)
    8c9e:	f240 22e9 	movw	r2, #745	; 0x2e9
    8ca2:	4629      	mov	r1, r5
    8ca4:	4878      	ldr	r0, [pc, #480]	; (8e88 <spi_1_init+0x258>)
    8ca6:	f008 f9bf 	bl	11028 <printk>
    8caa:	f240 21e9 	movw	r1, #745	; 0x2e9
    8cae:	4628      	mov	r0, r5
    8cb0:	f008 fadc 	bl	1126c <assert_post_action>
    8cb4:	e052      	b.n	8d5c <spi_1_init+0x12c>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
    8cb6:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8e84 <spi_1_init+0x254>
    8cba:	f44f 723c 	mov.w	r2, #752	; 0x2f0
    8cbe:	4649      	mov	r1, r9
    8cc0:	4871      	ldr	r0, [pc, #452]	; (8e88 <spi_1_init+0x258>)
    8cc2:	f008 f9b1 	bl	11028 <printk>
    8cc6:	f44f 713c 	mov.w	r1, #752	; 0x2f0
    8cca:	4648      	mov	r0, r9
    8ccc:	f008 face 	bl	1126c <assert_post_action>
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    8cd0:	e049      	b.n	8d66 <spi_1_init+0x136>
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    8cd2:	f424 5380 	bic.w	r3, r4, #4096	; 0x1000
    8cd6:	9302      	str	r3, [sp, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    8cd8:	9b01      	ldr	r3, [sp, #4]
    8cda:	681b      	ldr	r3, [r3, #0]
    8cdc:	2501      	movs	r5, #1
    8cde:	fa05 f50b 	lsl.w	r5, r5, fp
    8ce2:	422b      	tst	r3, r5
    8ce4:	d047      	beq.n	8d76 <spi_1_init+0x146>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    8ce6:	f014 0f01 	tst.w	r4, #1
    8cea:	d052      	beq.n	8d92 <spi_1_init+0x162>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    8cec:	683b      	ldr	r3, [r7, #0]
    8cee:	431d      	orrs	r5, r3
    8cf0:	603d      	str	r5, [r7, #0]
	return api->pin_configure(port, pin, flags);
    8cf2:	9b00      	ldr	r3, [sp, #0]
    8cf4:	681b      	ldr	r3, [r3, #0]
    8cf6:	9a02      	ldr	r2, [sp, #8]
    8cf8:	4659      	mov	r1, fp
    8cfa:	4630      	mov	r0, r6
    8cfc:	4798      	blx	r3
		if (ret < 0) {
    8cfe:	2800      	cmp	r0, #0
    8d00:	db65      	blt.n	8dce <spi_1_init+0x19e>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    8d02:	f10a 0a08 	add.w	sl, sl, #8
    8d06:	f8d8 3008 	ldr.w	r3, [r8, #8]
    8d0a:	f8d8 200c 	ldr.w	r2, [r8, #12]
    8d0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    8d12:	459a      	cmp	sl, r3
    8d14:	d25a      	bcs.n	8dcc <spi_1_init+0x19c>
		if (!device_is_ready(cs_gpio->port)) {
    8d16:	f8da 0000 	ldr.w	r0, [sl]
    8d1a:	f00b fd8c 	bl	14836 <z_device_ready>
    8d1e:	2800      	cmp	r0, #0
    8d20:	d03c      	beq.n	8d9c <spi_1_init+0x16c>
	return gpio_pin_configure(spec->port,
    8d22:	f8da 6000 	ldr.w	r6, [sl]
    8d26:	f89a b004 	ldrb.w	fp, [sl, #4]
				  spec->dt_flags | extra_flags);
    8d2a:	f89a 4005 	ldrb.w	r4, [sl, #5]
	return gpio_pin_configure(spec->port,
    8d2e:	f444 54b0 	orr.w	r4, r4, #5632	; 0x1600
	const struct gpio_driver_api *api =
    8d32:	68b3      	ldr	r3, [r6, #8]
    8d34:	9300      	str	r3, [sp, #0]
	const struct gpio_driver_config *const cfg =
    8d36:	6873      	ldr	r3, [r6, #4]
    8d38:	9301      	str	r3, [sp, #4]
	struct gpio_driver_data *data =
    8d3a:	6937      	ldr	r7, [r6, #16]
	__ASSERT((flags & GPIO_INT_MASK) == 0,
    8d3c:	f414 2ffc 	tst.w	r4, #516096	; 0x7e000
    8d40:	d185      	bne.n	8c4e <spi_1_init+0x1e>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    8d42:	f004 0330 	and.w	r3, r4, #48	; 0x30
    8d46:	2b30      	cmp	r3, #48	; 0x30
    8d48:	d08e      	beq.n	8c68 <spi_1_init+0x38>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
    8d4a:	f240 2302 	movw	r3, #514	; 0x202
    8d4e:	4023      	ands	r3, r4
    8d50:	2b02      	cmp	r3, #2
    8d52:	d096      	beq.n	8c82 <spi_1_init+0x52>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    8d54:	f004 0306 	and.w	r3, r4, #6
    8d58:	2b04      	cmp	r3, #4
    8d5a:	d09f      	beq.n	8c9c <spi_1_init+0x6c>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
    8d5c:	f414 6540 	ands.w	r5, r4, #3072	; 0xc00
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
    8d60:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
    8d64:	d0a7      	beq.n	8cb6 <spi_1_init+0x86>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    8d66:	2d00      	cmp	r5, #0
    8d68:	d0b3      	beq.n	8cd2 <spi_1_init+0xa2>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    8d6a:	f014 0f01 	tst.w	r4, #1
    8d6e:	d0b0      	beq.n	8cd2 <spi_1_init+0xa2>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    8d70:	f484 6440 	eor.w	r4, r4, #3072	; 0xc00
    8d74:	e7ad      	b.n	8cd2 <spi_1_init+0xa2>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    8d76:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8e84 <spi_1_init+0x254>
    8d7a:	f240 22fd 	movw	r2, #765	; 0x2fd
    8d7e:	4649      	mov	r1, r9
    8d80:	4841      	ldr	r0, [pc, #260]	; (8e88 <spi_1_init+0x258>)
    8d82:	f008 f951 	bl	11028 <printk>
    8d86:	f240 21fd 	movw	r1, #765	; 0x2fd
    8d8a:	4648      	mov	r0, r9
    8d8c:	f008 fa6e 	bl	1126c <assert_post_action>
    8d90:	e7a9      	b.n	8ce6 <spi_1_init+0xb6>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    8d92:	683b      	ldr	r3, [r7, #0]
    8d94:	ea23 0505 	bic.w	r5, r3, r5
    8d98:	603d      	str	r5, [r7, #0]
    8d9a:	e7aa      	b.n	8cf2 <spi_1_init+0xc2>
    8d9c:	4a3b      	ldr	r2, [pc, #236]	; (8e8c <spi_1_init+0x25c>)
    8d9e:	4b3c      	ldr	r3, [pc, #240]	; (8e90 <spi_1_init+0x260>)
    8da0:	1ad2      	subs	r2, r2, r3
    8da2:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    8da4:	f04f 0300 	mov.w	r3, #0
    8da8:	2101      	movs	r1, #1
    8daa:	f361 0302 	bfi	r3, r1, #0, #3
    8dae:	f36f 03c5 	bfc	r3, #3, #3
    8db2:	f362 138f 	bfi	r3, r2, #6, #10
    8db6:	f8da 1000 	ldr.w	r1, [sl]
    8dba:	f89a 2004 	ldrb.w	r2, [sl, #4]
    8dbe:	6809      	ldr	r1, [r1, #0]
    8dc0:	4834      	ldr	r0, [pc, #208]	; (8e94 <spi_1_init+0x264>)
    8dc2:	f7fb fcab 	bl	471c <log_2>
			return -ENODEV;
    8dc6:	f06f 0012 	mvn.w	r0, #18
    8dca:	e000      	b.n	8dce <spi_1_init+0x19e>
	return 0;
    8dcc:	2000      	movs	r0, #0
SPI_NRFX_SPI_DEVICE(1);
    8dce:	2800      	cmp	r0, #0
    8dd0:	db2b      	blt.n	8e2a <spi_1_init+0x1fa>
	return dev->data;
    8dd2:	9b03      	ldr	r3, [sp, #12]
    8dd4:	691c      	ldr	r4, [r3, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    8dd6:	6823      	ldr	r3, [r4, #0]
    8dd8:	b323      	cbz	r3, 8e24 <spi_1_init+0x1f4>
    8dda:	689b      	ldr	r3, [r3, #8]
    8ddc:	b313      	cbz	r3, 8e24 <spi_1_init+0x1f4>
    8dde:	681a      	ldr	r2, [r3, #0]
    8de0:	b302      	cbz	r2, 8e24 <spi_1_init+0x1f4>
			k_busy_wait(ctx->config->cs->delay);
    8de2:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
    8de4:	f00b fdf1 	bl	149ca <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    8de8:	6823      	ldr	r3, [r4, #0]
    8dea:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
    8dec:	681d      	ldr	r5, [r3, #0]
    8dee:	f893 8004 	ldrb.w	r8, [r3, #4]
	const struct gpio_driver_config *const cfg =
    8df2:	686b      	ldr	r3, [r5, #4]
	const struct gpio_driver_data *const data =
    8df4:	692e      	ldr	r6, [r5, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    8df6:	681b      	ldr	r3, [r3, #0]
    8df8:	2701      	movs	r7, #1
    8dfa:	fa07 f708 	lsl.w	r7, r7, r8
    8dfe:	423b      	tst	r3, r7
    8e00:	d016      	beq.n	8e30 <spi_1_init+0x200>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    8e02:	6833      	ldr	r3, [r6, #0]
    8e04:	421f      	tst	r7, r3
    8e06:	d121      	bne.n	8e4c <spi_1_init+0x21c>
    8e08:	2700      	movs	r7, #0
	const struct gpio_driver_config *const cfg =
    8e0a:	686b      	ldr	r3, [r5, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    8e0c:	681b      	ldr	r3, [r3, #0]
    8e0e:	2601      	movs	r6, #1
    8e10:	fa06 f608 	lsl.w	r6, r6, r8
    8e14:	4233      	tst	r3, r6
    8e16:	d01b      	beq.n	8e50 <spi_1_init+0x220>
	if (value != 0)	{
    8e18:	b347      	cbz	r7, 8e6c <spi_1_init+0x23c>
	const struct gpio_driver_api *api =
    8e1a:	68ab      	ldr	r3, [r5, #8]
	return api->port_set_bits_raw(port, pins);
    8e1c:	68db      	ldr	r3, [r3, #12]
    8e1e:	4631      	mov	r1, r6
    8e20:	4628      	mov	r0, r5
    8e22:	4798      	blx	r3
    8e24:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
    8e26:	b33b      	cbz	r3, 8e78 <spi_1_init+0x248>
SPI_NRFX_SPI_DEVICE(1);
    8e28:	2000      	movs	r0, #0
    8e2a:	b005      	add	sp, #20
    8e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    8e30:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8e84 <spi_1_init+0x254>
    8e34:	f240 42bb 	movw	r2, #1211	; 0x4bb
    8e38:	4649      	mov	r1, r9
    8e3a:	4813      	ldr	r0, [pc, #76]	; (8e88 <spi_1_init+0x258>)
    8e3c:	f008 f8f4 	bl	11028 <printk>
    8e40:	f240 41bb 	movw	r1, #1211	; 0x4bb
    8e44:	4648      	mov	r0, r9
    8e46:	f008 fa11 	bl	1126c <assert_post_action>
    8e4a:	e7da      	b.n	8e02 <spi_1_init+0x1d2>
		value = (value != 0) ? 0 : 1;
    8e4c:	2701      	movs	r7, #1
    8e4e:	e7dc      	b.n	8e0a <spi_1_init+0x1da>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    8e50:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8e84 <spi_1_init+0x254>
    8e54:	f240 4291 	movw	r2, #1169	; 0x491
    8e58:	4641      	mov	r1, r8
    8e5a:	480b      	ldr	r0, [pc, #44]	; (8e88 <spi_1_init+0x258>)
    8e5c:	f008 f8e4 	bl	11028 <printk>
    8e60:	f240 4191 	movw	r1, #1169	; 0x491
    8e64:	4640      	mov	r0, r8
    8e66:	f008 fa01 	bl	1126c <assert_post_action>
    8e6a:	e7d5      	b.n	8e18 <spi_1_init+0x1e8>
	const struct gpio_driver_api *api =
    8e6c:	68ab      	ldr	r3, [r5, #8]
	return api->port_clear_bits_raw(port, pins);
    8e6e:	691b      	ldr	r3, [r3, #16]
    8e70:	4631      	mov	r1, r6
    8e72:	4628      	mov	r0, r5
    8e74:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
    8e76:	e7d5      	b.n	8e24 <spi_1_init+0x1f4>
		ctx->owner = NULL;
    8e78:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
    8e7a:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
    8e7e:	f005 fc61 	bl	e744 <z_impl_k_sem_give>
}
    8e82:	e7d1      	b.n	8e28 <spi_1_init+0x1f8>
    8e84:	00015958 	.word	0x00015958
    8e88:	00015984 	.word	0x00015984
    8e8c:	000157cc 	.word	0x000157cc
    8e90:	00015774 	.word	0x00015774
    8e94:	00016930 	.word	0x00016930

00008e98 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    8e98:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    8e9c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    8ea0:	4b01      	ldr	r3, [pc, #4]	; (8ea8 <set_comparator+0x10>)
    8ea2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    8ea6:	4770      	bx	lr
    8ea8:	40011000 	.word	0x40011000

00008eac <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    8eac:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    8eb0:	4b01      	ldr	r3, [pc, #4]	; (8eb8 <get_comparator+0xc>)
    8eb2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    8eb6:	4770      	bx	lr
    8eb8:	40011000 	.word	0x40011000

00008ebc <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8ebc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8ec0:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    8ec2:	4a02      	ldr	r2, [pc, #8]	; (8ecc <event_enable+0x10>)
    8ec4:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    8ec8:	4770      	bx	lr
    8eca:	bf00      	nop
    8ecc:	40011000 	.word	0x40011000

00008ed0 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8ed0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8ed4:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    8ed6:	4a02      	ldr	r2, [pc, #8]	; (8ee0 <event_disable+0x10>)
    8ed8:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    8edc:	4770      	bx	lr
    8ede:	bf00      	nop
    8ee0:	40011000 	.word	0x40011000

00008ee4 <counter>:
     return p_reg->COUNTER;
    8ee4:	4b01      	ldr	r3, [pc, #4]	; (8eec <counter+0x8>)
    8ee6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    8eea:	4770      	bx	lr
    8eec:	40011000 	.word	0x40011000

00008ef0 <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    8ef0:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    8ef2:	2301      	movs	r3, #1
    8ef4:	4083      	lsls	r3, r0
    8ef6:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8ef8:	4a10      	ldr	r2, [pc, #64]	; (8f3c <compare_int_lock+0x4c>)
    8efa:	f3bf 8f5b 	dmb	ish
    8efe:	e852 1f00 	ldrex	r1, [r2]
    8f02:	ea01 0c04 	and.w	ip, r1, r4
    8f06:	e842 ce00 	strex	lr, ip, [r2]
    8f0a:	f1be 0f00 	cmp.w	lr, #0
    8f0e:	d1f6      	bne.n	8efe <compare_int_lock+0xe>
    8f10:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8f14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    8f18:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    8f1c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    8f20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    8f24:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    8f28:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8f2c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    8f30:	420b      	tst	r3, r1
}
    8f32:	bf14      	ite	ne
    8f34:	2001      	movne	r0, #1
    8f36:	2000      	moveq	r0, #0
    8f38:	bd10      	pop	{r4, pc}
    8f3a:	bf00      	nop
    8f3c:	20000c50 	.word	0x20000c50

00008f40 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    8f40:	b570      	push	{r4, r5, r6, lr}
    8f42:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    8f44:	f009 fac9 	bl	124da <full_int_lock>
    8f48:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    8f4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8f4e:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    8f50:	4a17      	ldr	r2, [pc, #92]	; (8fb0 <channel_processing_check_and_clear+0x70>)
    8f52:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    8f56:	4213      	tst	r3, r2
    8f58:	d105      	bne.n	8f66 <channel_processing_check_and_clear+0x26>
	bool result = false;
    8f5a:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    8f5c:	4628      	mov	r0, r5
    8f5e:	f009 fac5 	bl	124ec <full_int_unlock>

	return result;
}
    8f62:	4630      	mov	r0, r6
    8f64:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    8f66:	2301      	movs	r3, #1
    8f68:	40a3      	lsls	r3, r4
    8f6a:	43db      	mvns	r3, r3
    8f6c:	4a11      	ldr	r2, [pc, #68]	; (8fb4 <channel_processing_check_and_clear+0x74>)
    8f6e:	f3bf 8f5b 	dmb	ish
    8f72:	e852 1f00 	ldrex	r1, [r2]
    8f76:	ea01 0003 	and.w	r0, r1, r3
    8f7a:	e842 0600 	strex	r6, r0, [r2]
    8f7e:	2e00      	cmp	r6, #0
    8f80:	d1f7      	bne.n	8f72 <channel_processing_check_and_clear+0x32>
    8f82:	f3bf 8f5b 	dmb	ish
    8f86:	b959      	cbnz	r1, 8fa0 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    8f88:	f104 0350 	add.w	r3, r4, #80	; 0x50
    8f8c:	009b      	lsls	r3, r3, #2
    8f8e:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8f90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8f94:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    8f98:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    8f9a:	b113      	cbz	r3, 8fa2 <channel_processing_check_and_clear+0x62>
    8f9c:	2301      	movs	r3, #1
    8f9e:	e000      	b.n	8fa2 <channel_processing_check_and_clear+0x62>
    8fa0:	2301      	movs	r3, #1
		if (result) {
    8fa2:	461e      	mov	r6, r3
    8fa4:	2b00      	cmp	r3, #0
    8fa6:	d0d9      	beq.n	8f5c <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    8fa8:	4620      	mov	r0, r4
    8faa:	f009 fa87 	bl	124bc <event_clear>
    8fae:	e7d5      	b.n	8f5c <channel_processing_check_and_clear+0x1c>
    8fb0:	40011000 	.word	0x40011000
    8fb4:	20000c4c 	.word	0x20000c4c

00008fb8 <compare_int_unlock>:
	if (key) {
    8fb8:	b901      	cbnz	r1, 8fbc <compare_int_unlock+0x4>
}
    8fba:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    8fbc:	2301      	movs	r3, #1
    8fbe:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8fc0:	4a11      	ldr	r2, [pc, #68]	; (9008 <compare_int_unlock+0x50>)
    8fc2:	f3bf 8f5b 	dmb	ish
    8fc6:	e852 1f00 	ldrex	r1, [r2]
    8fca:	4319      	orrs	r1, r3
    8fcc:	e842 1c00 	strex	ip, r1, [r2]
    8fd0:	f1bc 0f00 	cmp.w	ip, #0
    8fd4:	d1f7      	bne.n	8fc6 <compare_int_unlock+0xe>
    8fd6:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8fda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8fde:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    8fe0:	4a0a      	ldr	r2, [pc, #40]	; (900c <compare_int_unlock+0x54>)
    8fe2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8fe6:	f3bf 8f5b 	dmb	ish
    8fea:	4b09      	ldr	r3, [pc, #36]	; (9010 <compare_int_unlock+0x58>)
    8fec:	681b      	ldr	r3, [r3, #0]
    8fee:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    8ff2:	fa23 f000 	lsr.w	r0, r3, r0
    8ff6:	f010 0f01 	tst.w	r0, #1
    8ffa:	d0de      	beq.n	8fba <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8ffc:	4b05      	ldr	r3, [pc, #20]	; (9014 <compare_int_unlock+0x5c>)
    8ffe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    9002:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    9006:	e7d8      	b.n	8fba <compare_int_unlock+0x2>
    9008:	20000c50 	.word	0x20000c50
    900c:	40011000 	.word	0x40011000
    9010:	20000c4c 	.word	0x20000c4c
    9014:	e000e100 	.word	0xe000e100

00009018 <sys_clock_timeout_handler>:
{
    9018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    901a:	4607      	mov	r7, r0
    901c:	4614      	mov	r4, r2
    901e:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    9020:	4610      	mov	r0, r2
    9022:	4619      	mov	r1, r3
    9024:	f009 fa56 	bl	124d4 <absolute_time_to_cc>
    9028:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    902a:	4b15      	ldr	r3, [pc, #84]	; (9080 <sys_clock_timeout_handler+0x68>)
    902c:	681a      	ldr	r2, [r3, #0]
    902e:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    9030:	601c      	str	r4, [r3, #0]
    9032:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    9034:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    9038:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    903c:	d308      	bcc.n	9050 <sys_clock_timeout_handler+0x38>
	return false;
    903e:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    9040:	f006 ff80 	bl	ff44 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    9044:	4638      	mov	r0, r7
    9046:	f7ff ff31 	bl	8eac <get_comparator>
    904a:	42a8      	cmp	r0, r5
    904c:	d00c      	beq.n	9068 <sys_clock_timeout_handler+0x50>
}
    904e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    9050:	4b0c      	ldr	r3, [pc, #48]	; (9084 <sys_clock_timeout_handler+0x6c>)
    9052:	6819      	ldr	r1, [r3, #0]
    9054:	0a0b      	lsrs	r3, r1, #8
    9056:	060a      	lsls	r2, r1, #24
    9058:	1952      	adds	r2, r2, r5
    905a:	f143 0300 	adc.w	r3, r3, #0
    905e:	490a      	ldr	r1, [pc, #40]	; (9088 <sys_clock_timeout_handler+0x70>)
    9060:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    9064:	2401      	movs	r4, #1
    9066:	e7eb      	b.n	9040 <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    9068:	b11c      	cbz	r4, 9072 <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    906a:	4638      	mov	r0, r7
    906c:	f7ff ff26 	bl	8ebc <event_enable>
}
    9070:	e7ed      	b.n	904e <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    9072:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    9076:	4638      	mov	r0, r7
    9078:	f7ff ff0e 	bl	8e98 <set_comparator>
    907c:	e7f5      	b.n	906a <sys_clock_timeout_handler+0x52>
    907e:	bf00      	nop
    9080:	200004e8 	.word	0x200004e8
    9084:	20000c54 	.word	0x20000c54
    9088:	200004d0 	.word	0x200004d0

0000908c <z_nrf_rtc_timer_read>:
{
    908c:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    908e:	4b0d      	ldr	r3, [pc, #52]	; (90c4 <z_nrf_rtc_timer_read+0x38>)
    9090:	681b      	ldr	r3, [r3, #0]
    9092:	0a1d      	lsrs	r5, r3, #8
    9094:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    9096:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    909a:	f7ff ff23 	bl	8ee4 <counter>
    909e:	4603      	mov	r3, r0
	val += cntr;
    90a0:	1820      	adds	r0, r4, r0
    90a2:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    90a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    90aa:	d20a      	bcs.n	90c2 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    90ac:	4b06      	ldr	r3, [pc, #24]	; (90c8 <z_nrf_rtc_timer_read+0x3c>)
    90ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    90b2:	4299      	cmp	r1, r3
    90b4:	bf08      	it	eq
    90b6:	4290      	cmpeq	r0, r2
    90b8:	d203      	bcs.n	90c2 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    90ba:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    90be:	f141 0100 	adc.w	r1, r1, #0
}
    90c2:	bd38      	pop	{r3, r4, r5, pc}
    90c4:	20000c54 	.word	0x20000c54
    90c8:	200004d0 	.word	0x200004d0

000090cc <compare_set_nolocks>:
{
    90cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    90d0:	4606      	mov	r6, r0
    90d2:	4614      	mov	r4, r2
    90d4:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    90d6:	4610      	mov	r0, r2
    90d8:	4619      	mov	r1, r3
    90da:	f009 f9fb 	bl	124d4 <absolute_time_to_cc>
    90de:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    90e0:	f7ff ffd4 	bl	908c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    90e4:	42a9      	cmp	r1, r5
    90e6:	bf08      	it	eq
    90e8:	42a0      	cmpeq	r0, r4
    90ea:	d21e      	bcs.n	912a <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    90ec:	ebb4 0800 	subs.w	r8, r4, r0
    90f0:	eb65 0901 	sbc.w	r9, r5, r1
    90f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    90f8:	2300      	movs	r3, #0
    90fa:	454b      	cmp	r3, r9
    90fc:	bf08      	it	eq
    90fe:	4542      	cmpeq	r2, r8
    9100:	d32e      	bcc.n	9160 <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
    9102:	4b19      	ldr	r3, [pc, #100]	; (9168 <compare_set_nolocks+0x9c>)
    9104:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    9108:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    910c:	42ab      	cmp	r3, r5
    910e:	bf08      	it	eq
    9110:	42a2      	cmpeq	r2, r4
    9112:	d018      	beq.n	9146 <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    9114:	4639      	mov	r1, r7
    9116:	4630      	mov	r0, r6
    9118:	f009 f9ed 	bl	124f6 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    911c:	4639      	mov	r1, r7
    911e:	f009 f9c9 	bl	124b4 <counter_sub>
    9122:	1824      	adds	r4, r4, r0
    9124:	f145 0500 	adc.w	r5, r5, #0
    9128:	e00d      	b.n	9146 <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
    912a:	2301      	movs	r3, #1
    912c:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    912e:	4a0f      	ldr	r2, [pc, #60]	; (916c <compare_set_nolocks+0xa0>)
    9130:	f3bf 8f5b 	dmb	ish
    9134:	e852 1f00 	ldrex	r1, [r2]
    9138:	4319      	orrs	r1, r3
    913a:	e842 1000 	strex	r0, r1, [r2]
    913e:	2800      	cmp	r0, #0
    9140:	d1f8      	bne.n	9134 <compare_set_nolocks+0x68>
    9142:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    9146:	4b08      	ldr	r3, [pc, #32]	; (9168 <compare_set_nolocks+0x9c>)
    9148:	0132      	lsls	r2, r6, #4
    914a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    914e:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    9152:	9908      	ldr	r1, [sp, #32]
    9154:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    9156:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9158:	6073      	str	r3, [r6, #4]
	return ret;
    915a:	2000      	movs	r0, #0
}
    915c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    9160:	f06f 0015 	mvn.w	r0, #21
    9164:	e7fa      	b.n	915c <compare_set_nolocks+0x90>
    9166:	bf00      	nop
    9168:	200004d8 	.word	0x200004d8
    916c:	20000c4c 	.word	0x20000c4c

00009170 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    9170:	b530      	push	{r4, r5, lr}
    9172:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    9174:	2300      	movs	r3, #0
    9176:	4a1e      	ldr	r2, [pc, #120]	; (91f0 <sys_clock_driver_init+0x80>)
    9178:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    917c:	2b00      	cmp	r3, #0
    917e:	dd25      	ble.n	91cc <sys_clock_driver_init+0x5c>
    p_reg->INTENSET = mask;
    9180:	4c1b      	ldr	r4, [pc, #108]	; (91f0 <sys_clock_driver_init+0x80>)
    9182:	2502      	movs	r5, #2
    9184:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9188:	4b1a      	ldr	r3, [pc, #104]	; (91f4 <sys_clock_driver_init+0x84>)
    918a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    918e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    9192:	2200      	movs	r2, #0
    9194:	2101      	movs	r1, #1
    9196:	2011      	movs	r0, #17
    9198:	f7fc fa96 	bl	56c8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    919c:	2011      	movs	r0, #17
    919e:	f7fc fa61 	bl	5664 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    91a2:	2301      	movs	r3, #1
    91a4:	4a14      	ldr	r2, [pc, #80]	; (91f8 <sys_clock_driver_init+0x88>)
    91a6:	6013      	str	r3, [r2, #0]
    91a8:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    91aa:	4a14      	ldr	r2, [pc, #80]	; (91fc <sys_clock_driver_init+0x8c>)
    91ac:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    91ae:	2400      	movs	r4, #0
    91b0:	9401      	str	r4, [sp, #4]
    91b2:	4b13      	ldr	r3, [pc, #76]	; (9200 <sys_clock_driver_init+0x90>)
    91b4:	9300      	str	r3, [sp, #0]
    91b6:	4a13      	ldr	r2, [pc, #76]	; (9204 <sys_clock_driver_init+0x94>)
    91b8:	2300      	movs	r3, #0
    91ba:	4620      	mov	r0, r4
    91bc:	f009 f9d6 	bl	1256c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    91c0:	4628      	mov	r0, r5
    91c2:	f7fe fd8f 	bl	7ce4 <z_nrf_clock_control_lf_on>

	return 0;
}
    91c6:	4620      	mov	r0, r4
    91c8:	b003      	add	sp, #12
    91ca:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    91cc:	4a0e      	ldr	r2, [pc, #56]	; (9208 <sys_clock_driver_init+0x98>)
    91ce:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    91d2:	f04f 30ff 	mov.w	r0, #4294967295
    91d6:	f04f 31ff 	mov.w	r1, #4294967295
    91da:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    91de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    91e2:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    91e4:	4902      	ldr	r1, [pc, #8]	; (91f0 <sys_clock_driver_init+0x80>)
    91e6:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    91ea:	3301      	adds	r3, #1
    91ec:	e7c6      	b.n	917c <sys_clock_driver_init+0xc>
    91ee:	bf00      	nop
    91f0:	40011000 	.word	0x40011000
    91f4:	e000e100 	.word	0xe000e100
    91f8:	40011008 	.word	0x40011008
    91fc:	20000c50 	.word	0x20000c50
    9200:	00009019 	.word	0x00009019
    9204:	007fffff 	.word	0x007fffff
    9208:	200004d8 	.word	0x200004d8

0000920c <process_channel>:
{
    920c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9210:	b082      	sub	sp, #8
    9212:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    9214:	f7ff fe94 	bl	8f40 <channel_processing_check_and_clear>
    9218:	b910      	cbnz	r0, 9220 <process_channel+0x14>
}
    921a:	b002      	add	sp, #8
    921c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    9220:	f7ff ff34 	bl	908c <z_nrf_rtc_timer_read>
    9224:	4606      	mov	r6, r0
    9226:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    9228:	f009 f957 	bl	124da <full_int_lock>
    922c:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    922e:	4b13      	ldr	r3, [pc, #76]	; (927c <process_channel+0x70>)
    9230:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    9234:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    9238:	454f      	cmp	r7, r9
    923a:	bf08      	it	eq
    923c:	4546      	cmpeq	r6, r8
    923e:	d20b      	bcs.n	9258 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    9240:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    9242:	4650      	mov	r0, sl
    9244:	f009 f952 	bl	124ec <full_int_unlock>
		if (handler) {
    9248:	2e00      	cmp	r6, #0
    924a:	d0e6      	beq.n	921a <process_channel+0xe>
			handler(chan, expire_time, user_context);
    924c:	9500      	str	r5, [sp, #0]
    924e:	4642      	mov	r2, r8
    9250:	464b      	mov	r3, r9
    9252:	4620      	mov	r0, r4
    9254:	47b0      	blx	r6
}
    9256:	e7e0      	b.n	921a <process_channel+0xe>
			handler = cc_data[chan].callback;
    9258:	4a08      	ldr	r2, [pc, #32]	; (927c <process_channel+0x70>)
    925a:	0123      	lsls	r3, r4, #4
    925c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    9260:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    9262:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    9264:	2000      	movs	r0, #0
    9266:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    9268:	f04f 32ff 	mov.w	r2, #4294967295
    926c:	f04f 33ff 	mov.w	r3, #4294967295
    9270:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    9274:	4620      	mov	r0, r4
    9276:	f7ff fe2b 	bl	8ed0 <event_disable>
    927a:	e7e2      	b.n	9242 <process_channel+0x36>
    927c:	200004d8 	.word	0x200004d8

00009280 <rtc_nrf_isr>:
{
    9280:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    9282:	4b0d      	ldr	r3, [pc, #52]	; (92b8 <rtc_nrf_isr+0x38>)
    9284:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    9288:	f013 0f02 	tst.w	r3, #2
    928c:	d00a      	beq.n	92a4 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    928e:	4b0b      	ldr	r3, [pc, #44]	; (92bc <rtc_nrf_isr+0x3c>)
    9290:	681b      	ldr	r3, [r3, #0]
    9292:	b13b      	cbz	r3, 92a4 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    9294:	4b09      	ldr	r3, [pc, #36]	; (92bc <rtc_nrf_isr+0x3c>)
    9296:	2200      	movs	r2, #0
    9298:	601a      	str	r2, [r3, #0]
    929a:	681b      	ldr	r3, [r3, #0]
		overflow_cnt++;
    929c:	4a08      	ldr	r2, [pc, #32]	; (92c0 <rtc_nrf_isr+0x40>)
    929e:	6813      	ldr	r3, [r2, #0]
    92a0:	3301      	adds	r3, #1
    92a2:	6013      	str	r3, [r2, #0]
{
    92a4:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    92a6:	2c00      	cmp	r4, #0
    92a8:	dd00      	ble.n	92ac <rtc_nrf_isr+0x2c>
}
    92aa:	bd10      	pop	{r4, pc}
		process_channel(chan);
    92ac:	4620      	mov	r0, r4
    92ae:	f7ff ffad 	bl	920c <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    92b2:	3401      	adds	r4, #1
    92b4:	e7f7      	b.n	92a6 <rtc_nrf_isr+0x26>
    92b6:	bf00      	nop
    92b8:	40011000 	.word	0x40011000
    92bc:	40011104 	.word	0x40011104
    92c0:	20000c54 	.word	0x20000c54

000092c4 <sys_clock_set_timeout>:
{
    92c4:	b510      	push	{r4, lr}
    92c6:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    92c8:	f1b0 3fff 	cmp.w	r0, #4294967295
    92cc:	d007      	beq.n	92de <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    92ce:	1e44      	subs	r4, r0, #1
    92d0:	2c00      	cmp	r4, #0
    92d2:	dd07      	ble.n	92e4 <sys_clock_set_timeout+0x20>
    92d4:	4b11      	ldr	r3, [pc, #68]	; (931c <sys_clock_set_timeout+0x58>)
    92d6:	429c      	cmp	r4, r3
    92d8:	dd05      	ble.n	92e6 <sys_clock_set_timeout+0x22>
    92da:	4c11      	ldr	r4, [pc, #68]	; (9320 <sys_clock_set_timeout+0x5c>)
    92dc:	e003      	b.n	92e6 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    92de:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    92e2:	e7f4      	b.n	92ce <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    92e4:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    92e6:	f7ff fed1 	bl	908c <z_nrf_rtc_timer_read>
    92ea:	4b0e      	ldr	r3, [pc, #56]	; (9324 <sys_clock_set_timeout+0x60>)
    92ec:	e9d3 2300 	ldrd	r2, r3, [r3]
    92f0:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    92f2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    92f6:	d300      	bcc.n	92fa <sys_clock_set_timeout+0x36>
		ticks = 0;
    92f8:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    92fa:	4404      	add	r4, r0
    92fc:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
    92fe:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    9302:	d300      	bcc.n	9306 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    9304:	4c06      	ldr	r4, [pc, #24]	; (9320 <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    9306:	2000      	movs	r0, #0
    9308:	9001      	str	r0, [sp, #4]
    930a:	4907      	ldr	r1, [pc, #28]	; (9328 <sys_clock_set_timeout+0x64>)
    930c:	9100      	str	r1, [sp, #0]
    930e:	1912      	adds	r2, r2, r4
    9310:	f143 0300 	adc.w	r3, r3, #0
    9314:	f009 f92a 	bl	1256c <compare_set>
}
    9318:	b002      	add	sp, #8
    931a:	bd10      	pop	{r4, pc}
    931c:	007ffffe 	.word	0x007ffffe
    9320:	007fffff 	.word	0x007fffff
    9324:	200004e8 	.word	0x200004e8
    9328:	00009019 	.word	0x00009019

0000932c <sys_clock_elapsed>:
{
    932c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    932e:	f7ff fead 	bl	908c <z_nrf_rtc_timer_read>
    9332:	4b02      	ldr	r3, [pc, #8]	; (933c <sys_clock_elapsed+0x10>)
    9334:	681b      	ldr	r3, [r3, #0]
}
    9336:	1ac0      	subs	r0, r0, r3
    9338:	bd08      	pop	{r3, pc}
    933a:	bf00      	nop
    933c:	200004e8 	.word	0x200004e8

00009340 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    9340:	b508      	push	{r3, lr}
	z_impl_log_panic();
    9342:	f7fb fab7 	bl	48b4 <z_impl_log_panic>
    9346:	4b09      	ldr	r3, [pc, #36]	; (936c <k_sys_fatal_error_handler+0x2c>)
    9348:	4a09      	ldr	r2, [pc, #36]	; (9370 <k_sys_fatal_error_handler+0x30>)
    934a:	1a9b      	subs	r3, r3, r2
    934c:	08db      	lsrs	r3, r3, #3
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    934e:	f04f 0100 	mov.w	r1, #0
    9352:	2201      	movs	r2, #1
    9354:	f362 0102 	bfi	r1, r2, #0, #3
    9358:	f36f 01c5 	bfc	r1, #3, #3
    935c:	f363 118f 	bfi	r1, r3, #6, #10
    9360:	4804      	ldr	r0, [pc, #16]	; (9374 <k_sys_fatal_error_handler+0x34>)
    9362:	f7fb fa77 	bl	4854 <log_0>
		sys_arch_reboot(0);
    9366:	2000      	movs	r0, #0
    9368:	f7fd f95c 	bl	6624 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    936c:	0001578c 	.word	0x0001578c
    9370:	00015774 	.word	0x00015774
    9374:	000169fc 	.word	0x000169fc

00009378 <radio_irq_handler>:

	irq_unlock(key);
}

static void radio_irq_handler(void)
{
    9378:	b508      	push	{r3, lr}
	if (NRF_RADIO->EVENTS_READY &&
    937a:	4b19      	ldr	r3, [pc, #100]	; (93e0 <radio_irq_handler+0x68>)
    937c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    9380:	b163      	cbz	r3, 939c <radio_irq_handler+0x24>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_READY_Msk)) {
    9382:	4b17      	ldr	r3, [pc, #92]	; (93e0 <radio_irq_handler+0x68>)
    9384:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_READY &&
    9388:	f013 0f01 	tst.w	r3, #1
    938c:	d006      	beq.n	939c <radio_irq_handler+0x24>
		NRF_RADIO->EVENTS_READY = 0;
    938e:	4b14      	ldr	r3, [pc, #80]	; (93e0 <radio_irq_handler+0x68>)
    9390:	2200      	movs	r2, #0
    9392:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		ESB_SYS_TIMER->TASKS_START;
    9396:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
    939a:	681b      	ldr	r3, [r3, #0]
	}

	if (NRF_RADIO->EVENTS_END &&
    939c:	4b10      	ldr	r3, [pc, #64]	; (93e0 <radio_irq_handler+0x68>)
    939e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    93a2:	b14b      	cbz	r3, 93b8 <radio_irq_handler+0x40>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_END_Msk)) {
    93a4:	4b0e      	ldr	r3, [pc, #56]	; (93e0 <radio_irq_handler+0x68>)
    93a6:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_END &&
    93aa:	f013 0f08 	tst.w	r3, #8
    93ae:	d003      	beq.n	93b8 <radio_irq_handler+0x40>
		NRF_RADIO->EVENTS_END = 0;
    93b0:	4b0b      	ldr	r3, [pc, #44]	; (93e0 <radio_irq_handler+0x68>)
    93b2:	2200      	movs	r2, #0
    93b4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		if (on_radio_end) {
			on_radio_end();
		}
	}

	if (NRF_RADIO->EVENTS_DISABLED &&
    93b8:	4b09      	ldr	r3, [pc, #36]	; (93e0 <radio_irq_handler+0x68>)
    93ba:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    93be:	b16b      	cbz	r3, 93dc <radio_irq_handler+0x64>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_DISABLED_Msk)) {
    93c0:	4b07      	ldr	r3, [pc, #28]	; (93e0 <radio_irq_handler+0x68>)
    93c2:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_DISABLED &&
    93c6:	f013 0f10 	tst.w	r3, #16
    93ca:	d007      	beq.n	93dc <radio_irq_handler+0x64>
		NRF_RADIO->EVENTS_DISABLED = 0;
    93cc:	4b04      	ldr	r3, [pc, #16]	; (93e0 <radio_irq_handler+0x68>)
    93ce:	2200      	movs	r2, #0
    93d0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		/* Call the correct on_radio_disable function, depending on the
		 * current protocol state.
		 */
		if (on_radio_disabled) {
    93d4:	4b03      	ldr	r3, [pc, #12]	; (93e4 <radio_irq_handler+0x6c>)
    93d6:	681b      	ldr	r3, [r3, #0]
    93d8:	b103      	cbz	r3, 93dc <radio_irq_handler+0x64>
			on_radio_disabled();
    93da:	4798      	blx	r3
		}
	}
}
    93dc:	bd08      	pop	{r3, pc}
    93de:	bf00      	nop
    93e0:	40001000 	.word	0x40001000
    93e4:	20000c64 	.word	0x20000c64

000093e8 <get_and_clear_irqs>:
{
    93e8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(interrupts != NULL);
    93ea:	4604      	mov	r4, r0
    93ec:	b188      	cbz	r0, 9412 <get_and_clear_irqs+0x2a>
	__asm__ volatile(
    93ee:	f04f 0320 	mov.w	r3, #32
    93f2:	f3ef 8211 	mrs	r2, BASEPRI
    93f6:	f383 8812 	msr	BASEPRI_MAX, r3
    93fa:	f3bf 8f6f 	isb	sy
	*interrupts = interrupt_flags;
    93fe:	4b0b      	ldr	r3, [pc, #44]	; (942c <get_and_clear_irqs+0x44>)
    9400:	6819      	ldr	r1, [r3, #0]
    9402:	6021      	str	r1, [r4, #0]
	interrupt_flags = 0;
    9404:	2100      	movs	r1, #0
    9406:	6019      	str	r1, [r3, #0]
	__asm__ volatile(
    9408:	f382 8811 	msr	BASEPRI, r2
    940c:	f3bf 8f6f 	isb	sy
}
    9410:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(interrupts != NULL);
    9412:	4d07      	ldr	r5, [pc, #28]	; (9430 <get_and_clear_irqs+0x48>)
    9414:	f240 32a3 	movw	r2, #931	; 0x3a3
    9418:	4629      	mov	r1, r5
    941a:	4806      	ldr	r0, [pc, #24]	; (9434 <get_and_clear_irqs+0x4c>)
    941c:	f007 fe04 	bl	11028 <printk>
    9420:	f240 31a3 	movw	r1, #931	; 0x3a3
    9424:	4628      	mov	r0, r5
    9426:	f007 ff21 	bl	1126c <assert_post_action>
    942a:	e7e0      	b.n	93ee <get_and_clear_irqs+0x6>
    942c:	20000c5c 	.word	0x20000c5c
    9430:	00016a1c 	.word	0x00016a1c
    9434:	00015984 	.word	0x00015984

00009438 <esb_evt_irq_handler>:

static void esb_evt_irq_handler(void)
{
    9438:	b500      	push	{lr}
    943a:	b085      	sub	sp, #20
	uint32_t interrupts;
	struct esb_evt event;

	event.tx_attempts = last_tx_attempts;
    943c:	4b15      	ldr	r3, [pc, #84]	; (9494 <esb_evt_irq_handler+0x5c>)
    943e:	681b      	ldr	r3, [r3, #0]
    9440:	9302      	str	r3, [sp, #8]

	get_and_clear_irqs(&interrupts);
    9442:	a803      	add	r0, sp, #12
    9444:	f7ff ffd0 	bl	93e8 <get_and_clear_irqs>
	if (event_handler != NULL) {
    9448:	4b13      	ldr	r3, [pc, #76]	; (9498 <esb_evt_irq_handler+0x60>)
    944a:	681b      	ldr	r3, [r3, #0]
    944c:	b1f3      	cbz	r3, 948c <esb_evt_irq_handler+0x54>
		if (interrupts & INT_TX_SUCCESS_MSK) {
    944e:	9a03      	ldr	r2, [sp, #12]
    9450:	f012 0f01 	tst.w	r2, #1
    9454:	d004      	beq.n	9460 <esb_evt_irq_handler+0x28>
			event.evt_id = ESB_EVENT_TX_SUCCESS;
    9456:	2200      	movs	r2, #0
    9458:	f88d 2004 	strb.w	r2, [sp, #4]
			event_handler(&event);
    945c:	a801      	add	r0, sp, #4
    945e:	4798      	blx	r3
		}
		if (interrupts & INT_TX_FAILED_MSK) {
    9460:	9b03      	ldr	r3, [sp, #12]
    9462:	f013 0f02 	tst.w	r3, #2
    9466:	d006      	beq.n	9476 <esb_evt_irq_handler+0x3e>
			event.evt_id = ESB_EVENT_TX_FAILED;
    9468:	2301      	movs	r3, #1
    946a:	f88d 3004 	strb.w	r3, [sp, #4]
			event_handler(&event);
    946e:	4b0a      	ldr	r3, [pc, #40]	; (9498 <esb_evt_irq_handler+0x60>)
    9470:	681b      	ldr	r3, [r3, #0]
    9472:	a801      	add	r0, sp, #4
    9474:	4798      	blx	r3
		}
		if (interrupts & INT_RX_DATA_RECEIVED_MSK) {
    9476:	9b03      	ldr	r3, [sp, #12]
    9478:	f013 0f04 	tst.w	r3, #4
    947c:	d006      	beq.n	948c <esb_evt_irq_handler+0x54>
			event.evt_id = ESB_EVENT_RX_RECEIVED;
    947e:	2302      	movs	r3, #2
    9480:	f88d 3004 	strb.w	r3, [sp, #4]
			event_handler(&event);
    9484:	4b04      	ldr	r3, [pc, #16]	; (9498 <esb_evt_irq_handler+0x60>)
    9486:	681b      	ldr	r3, [r3, #0]
    9488:	a801      	add	r0, sp, #4
    948a:	4798      	blx	r3
		}
	}
}
    948c:	b005      	add	sp, #20
    948e:	f85d fb04 	ldr.w	pc, [sp], #4
    9492:	bf00      	nop
    9494:	20000c60 	.word	0x20000c60
    9498:	20000c58 	.word	0x20000c58

0000949c <pick_lfn>:

static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
    949c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    94a0:	4680      	mov	r8, r0
    94a2:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
    94a4:	f101 001a 	add.w	r0, r1, #26
    94a8:	f009 f8a8 	bl	125fc <ld_word>
    94ac:	bb68      	cbnz	r0, 950a <pick_lfn+0x6e>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
    94ae:	7835      	ldrb	r5, [r6, #0]
    94b0:	f025 0540 	bic.w	r5, r5, #64	; 0x40
    94b4:	3d01      	subs	r5, #1
    94b6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    94ba:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
    94be:	2701      	movs	r7, #1
    94c0:	2400      	movs	r4, #0
    94c2:	e004      	b.n	94ce <pick_lfn+0x32>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc != 0) {
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
    94c4:	f828 0015 	strh.w	r0, [r8, r5, lsl #1]
    94c8:	4607      	mov	r7, r0
    94ca:	3501      	adds	r5, #1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
    94cc:	3401      	adds	r4, #1
    94ce:	2c0c      	cmp	r4, #12
    94d0:	d80f      	bhi.n	94f2 <pick_lfn+0x56>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
    94d2:	4b12      	ldr	r3, [pc, #72]	; (951c <pick_lfn+0x80>)
    94d4:	5d18      	ldrb	r0, [r3, r4]
    94d6:	4430      	add	r0, r6
    94d8:	f009 f890 	bl	125fc <ld_word>
		if (wc != 0) {
    94dc:	b11f      	cbz	r7, 94e6 <pick_lfn+0x4a>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
    94de:	2dff      	cmp	r5, #255	; 0xff
    94e0:	d9f0      	bls.n	94c4 <pick_lfn+0x28>
    94e2:	2000      	movs	r0, #0
    94e4:	e012      	b.n	950c <pick_lfn+0x70>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
    94e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    94ea:	4298      	cmp	r0, r3
    94ec:	d0ee      	beq.n	94cc <pick_lfn+0x30>
    94ee:	2000      	movs	r0, #0
    94f0:	e00c      	b.n	950c <pick_lfn+0x70>
		}
	}

	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not terminated */
    94f2:	7833      	ldrb	r3, [r6, #0]
    94f4:	f013 0f40 	tst.w	r3, #64	; 0x40
    94f8:	d00a      	beq.n	9510 <pick_lfn+0x74>
    94fa:	b15f      	cbz	r7, 9514 <pick_lfn+0x78>
		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
    94fc:	2dff      	cmp	r5, #255	; 0xff
    94fe:	d80b      	bhi.n	9518 <pick_lfn+0x7c>
		lfnbuf[i] = 0;
    9500:	2300      	movs	r3, #0
    9502:	f828 3015 	strh.w	r3, [r8, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
    9506:	2001      	movs	r0, #1
    9508:	e000      	b.n	950c <pick_lfn+0x70>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
    950a:	2000      	movs	r0, #0
}
    950c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 1;		/* The part of LFN is valid */
    9510:	2001      	movs	r0, #1
    9512:	e7fb      	b.n	950c <pick_lfn+0x70>
    9514:	2001      	movs	r0, #1
    9516:	e7f9      	b.n	950c <pick_lfn+0x70>
		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
    9518:	2000      	movs	r0, #0
    951a:	e7f7      	b.n	950c <pick_lfn+0x70>
    951c:	00016b48 	.word	0x00016b48

00009520 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
    9520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9524:	4680      	mov	r8, r0
    9526:	460f      	mov	r7, r1
    9528:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
    952a:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    952c:	230f      	movs	r3, #15
    952e:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
    9530:	2400      	movs	r4, #0
    9532:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
    9534:	4621      	mov	r1, r4
    9536:	f107 001a 	add.w	r0, r7, #26
    953a:	f009 f896 	bl	1266a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
    953e:	f109 36ff 	add.w	r6, r9, #4294967295
    9542:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    9546:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
    954a:	4625      	mov	r5, r4
    954c:	e002      	b.n	9554 <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;			/* Padding characters for following items */
	} while (++s < 13);
    954e:	3401      	adds	r4, #1
    9550:	2c0c      	cmp	r4, #12
    9552:	d811      	bhi.n	9578 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
    9554:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9558:	429d      	cmp	r5, r3
    955a:	d002      	beq.n	9562 <put_lfn+0x42>
    955c:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
    9560:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
    9562:	4b0c      	ldr	r3, [pc, #48]	; (9594 <put_lfn+0x74>)
    9564:	5d18      	ldrb	r0, [r3, r4]
    9566:	4629      	mov	r1, r5
    9568:	4438      	add	r0, r7
    956a:	f009 f87e 	bl	1266a <st_word>
		if (wc == 0) wc = 0xFFFF;			/* Padding characters for following items */
    956e:	2d00      	cmp	r5, #0
    9570:	d1ed      	bne.n	954e <put_lfn+0x2e>
    9572:	f64f 75ff 	movw	r5, #65535	; 0xffff
    9576:	e7ea      	b.n	954e <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
    9578:	f64f 73ff 	movw	r3, #65535	; 0xffff
    957c:	429d      	cmp	r5, r3
    957e:	d002      	beq.n	9586 <put_lfn+0x66>
    9580:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
    9584:	b90b      	cbnz	r3, 958a <put_lfn+0x6a>
    9586:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    958a:	f887 9000 	strb.w	r9, [r7]
}
    958e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9592:	bf00      	nop
    9594:	00016b48 	.word	0x00016b48

00009598 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
    9598:	b4f0      	push	{r4, r5, r6, r7}
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
    959a:	6807      	ldr	r7, [r0, #0]
	if (!tp) return vol;	/* Invalid path name? */
    959c:	2f00      	cmp	r7, #0
    959e:	d043      	beq.n	9628 <get_ldnumber+0x90>
    95a0:	4684      	mov	ip, r0
	tt = tp = *path;
    95a2:	463e      	mov	r6, r7
	do tc = *tt++; while (!IsTerminator(tc) && tc != ':');	/* Find a colon in the path */
    95a4:	7833      	ldrb	r3, [r6, #0]
    95a6:	3601      	adds	r6, #1
    95a8:	2b1f      	cmp	r3, #31
    95aa:	d901      	bls.n	95b0 <get_ldnumber+0x18>
    95ac:	2b3a      	cmp	r3, #58	; 0x3a
    95ae:	d1f9      	bne.n	95a4 <get_ldnumber+0xc>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
    95b0:	2b3a      	cmp	r3, #58	; 0x3a
    95b2:	d002      	beq.n	95ba <get_ldnumber+0x22>
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
    95b4:	2000      	movs	r0, #0
}
    95b6:	bcf0      	pop	{r4, r5, r6, r7}
    95b8:	4770      	bx	lr
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
    95ba:	7838      	ldrb	r0, [r7, #0]
    95bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    95c0:	b2db      	uxtb	r3, r3
    95c2:	2b09      	cmp	r3, #9
    95c4:	d80a      	bhi.n	95dc <get_ldnumber+0x44>
    95c6:	1cbb      	adds	r3, r7, #2
    95c8:	42b3      	cmp	r3, r6
    95ca:	d001      	beq.n	95d0 <get_ldnumber+0x38>
    95cc:	2000      	movs	r0, #0
    95ce:	e023      	b.n	9618 <get_ldnumber+0x80>
			i = (int)*tp - '0';	/* Get the LD number */
    95d0:	3830      	subs	r0, #48	; 0x30
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
    95d2:	2807      	cmp	r0, #7
    95d4:	dc25      	bgt.n	9622 <get_ldnumber+0x8a>
			*path = tt;		/* Snip the drive prefix off */
    95d6:	f8cc 6000 	str.w	r6, [ip]
    95da:	e7ec      	b.n	95b6 <get_ldnumber+0x1e>
    95dc:	2000      	movs	r0, #0
    95de:	e01b      	b.n	9618 <get_ldnumber+0x80>
					if (IsLower(tc)) tc -= 0x20;
    95e0:	3a20      	subs	r2, #32
    95e2:	b2d2      	uxtb	r2, r2
				} while (c && (TCHAR)c == tc);
    95e4:	b193      	cbz	r3, 960c <get_ldnumber+0x74>
    95e6:	429a      	cmp	r2, r3
    95e8:	d110      	bne.n	960c <get_ldnumber+0x74>
					c = *sp++; tc = *tp++;
    95ea:	782b      	ldrb	r3, [r5, #0]
    95ec:	3501      	adds	r5, #1
    95ee:	7822      	ldrb	r2, [r4, #0]
    95f0:	3401      	adds	r4, #1
					if (IsLower(c)) c -= 0x20;
    95f2:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    95f6:	b2c9      	uxtb	r1, r1
    95f8:	2919      	cmp	r1, #25
    95fa:	d801      	bhi.n	9600 <get_ldnumber+0x68>
    95fc:	3b20      	subs	r3, #32
    95fe:	b2db      	uxtb	r3, r3
					if (IsLower(tc)) tc -= 0x20;
    9600:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
    9604:	b2c9      	uxtb	r1, r1
    9606:	2919      	cmp	r1, #25
    9608:	d8ec      	bhi.n	95e4 <get_ldnumber+0x4c>
    960a:	e7e9      	b.n	95e0 <get_ldnumber+0x48>
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
    960c:	b90b      	cbnz	r3, 9612 <get_ldnumber+0x7a>
    960e:	42a6      	cmp	r6, r4
    9610:	d0df      	beq.n	95d2 <get_ldnumber+0x3a>
    9612:	3001      	adds	r0, #1
    9614:	2807      	cmp	r0, #7
    9616:	dcdc      	bgt.n	95d2 <get_ldnumber+0x3a>
				sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
    9618:	4b05      	ldr	r3, [pc, #20]	; (9630 <get_ldnumber+0x98>)
    961a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    961e:	463c      	mov	r4, r7
    9620:	e7e3      	b.n	95ea <get_ldnumber+0x52>
	int vol = -1;
    9622:	f04f 30ff 	mov.w	r0, #4294967295
		return vol;
    9626:	e7c6      	b.n	95b6 <get_ldnumber+0x1e>
	if (!tp) return vol;	/* Invalid path name? */
    9628:	f04f 30ff 	mov.w	r0, #4294967295
    962c:	e7c3      	b.n	95b6 <get_ldnumber+0x1e>
    962e:	bf00      	nop
    9630:	00016b58 	.word	0x00016b58

00009634 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
    9634:	b538      	push	{r3, r4, r5, lr}
    9636:	4604      	mov	r4, r0
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    9638:	2300      	movs	r3, #0
    963a:	70c3      	strb	r3, [r0, #3]
    963c:	f04f 33ff 	mov.w	r3, #4294967295
    9640:	6383      	str	r3, [r0, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
    9642:	f009 f8f3 	bl	1282c <move_window>
    9646:	2800      	cmp	r0, #0
    9648:	d168      	bne.n	971c <check_fs+0xe8>
	sign = ld_word(fs->win + BS_55AA);
    964a:	f204 203a 	addw	r0, r4, #570	; 0x23a
    964e:	f008 ffd5 	bl	125fc <ld_word>
    9652:	4605      	mov	r5, r0
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
    9654:	f64a 2355 	movw	r3, #43605	; 0xaa55
    9658:	4298      	cmp	r0, r3
    965a:	d00d      	beq.n	9678 <check_fs+0x44>
#endif
	b = fs->win[BS_JmpBoot];
    965c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
    9660:	2beb      	cmp	r3, #235	; 0xeb
    9662:	d013      	beq.n	968c <check_fs+0x58>
    9664:	2be9      	cmp	r3, #233	; 0xe9
    9666:	d011      	beq.n	968c <check_fs+0x58>
    9668:	2be8      	cmp	r3, #232	; 0xe8
    966a:	d00f      	beq.n	968c <check_fs+0x58>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
				return 0;	/* It can be presumed an FAT VBR */
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
    966c:	f64a 2355 	movw	r3, #43605	; 0xaa55
    9670:	429d      	cmp	r5, r3
    9672:	d051      	beq.n	9718 <check_fs+0xe4>
    9674:	2003      	movs	r0, #3
}
    9676:	bd38      	pop	{r3, r4, r5, pc}
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
    9678:	220b      	movs	r2, #11
    967a:	4929      	ldr	r1, [pc, #164]	; (9720 <check_fs+0xec>)
    967c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    9680:	f00b f9d1 	bl	14a26 <memcmp>
    9684:	2800      	cmp	r0, #0
    9686:	d1e9      	bne.n	965c <check_fs+0x28>
    9688:	2001      	movs	r0, #1
    968a:	e7f4      	b.n	9676 <check_fs+0x42>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
    968c:	f64a 2355 	movw	r3, #43605	; 0xaa55
    9690:	429d      	cmp	r5, r3
    9692:	d037      	beq.n	9704 <check_fs+0xd0>
		w = ld_word(fs->win + BPB_BytsPerSec);
    9694:	f104 0047 	add.w	r0, r4, #71	; 0x47
    9698:	f008 ffb0 	bl	125fc <ld_word>
		b = fs->win[BPB_SecPerClus];
    969c:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
    96a0:	1e43      	subs	r3, r0, #1
    96a2:	4218      	tst	r0, r3
    96a4:	d1e2      	bne.n	966c <check_fs+0x38>
    96a6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    96aa:	d3df      	bcc.n	966c <check_fs+0x38>
    96ac:	d8de      	bhi.n	966c <check_fs+0x38>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
    96ae:	2a00      	cmp	r2, #0
    96b0:	d0dc      	beq.n	966c <check_fs+0x38>
    96b2:	1e53      	subs	r3, r2, #1
    96b4:	421a      	tst	r2, r3
    96b6:	d1d9      	bne.n	966c <check_fs+0x38>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
    96b8:	f104 004a 	add.w	r0, r4, #74	; 0x4a
    96bc:	f008 ff9e 	bl	125fc <ld_word>
    96c0:	2800      	cmp	r0, #0
    96c2:	d0d3      	beq.n	966c <check_fs+0x38>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
    96c4:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
    96c8:	3b01      	subs	r3, #1
    96ca:	2b01      	cmp	r3, #1
    96cc:	d8ce      	bhi.n	966c <check_fs+0x38>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
    96ce:	f104 004d 	add.w	r0, r4, #77	; 0x4d
    96d2:	f008 ff93 	bl	125fc <ld_word>
    96d6:	2800      	cmp	r0, #0
    96d8:	d0c8      	beq.n	966c <check_fs+0x38>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
    96da:	f104 004f 	add.w	r0, r4, #79	; 0x4f
    96de:	f008 ff8d 	bl	125fc <ld_word>
    96e2:	287f      	cmp	r0, #127	; 0x7f
    96e4:	d806      	bhi.n	96f4 <check_fs+0xc0>
    96e6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    96ea:	f008 ff8c 	bl	12606 <ld_dword>
    96ee:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    96f2:	d3bb      	bcc.n	966c <check_fs+0x38>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
    96f4:	f104 0052 	add.w	r0, r4, #82	; 0x52
    96f8:	f008 ff80 	bl	125fc <ld_word>
    96fc:	2800      	cmp	r0, #0
    96fe:	d0b5      	beq.n	966c <check_fs+0x38>
				return 0;	/* It can be presumed an FAT VBR */
    9700:	2000      	movs	r0, #0
    9702:	e7b8      	b.n	9676 <check_fs+0x42>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
    9704:	2208      	movs	r2, #8
    9706:	4907      	ldr	r1, [pc, #28]	; (9724 <check_fs+0xf0>)
    9708:	f104 008e 	add.w	r0, r4, #142	; 0x8e
    970c:	f00b f98b 	bl	14a26 <memcmp>
    9710:	2800      	cmp	r0, #0
    9712:	d1bf      	bne.n	9694 <check_fs+0x60>
			return 0;	/* It is an FAT32 VBR */
    9714:	2000      	movs	r0, #0
    9716:	e7ae      	b.n	9676 <check_fs+0x42>
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
    9718:	2002      	movs	r0, #2
    971a:	e7ac      	b.n	9676 <check_fs+0x42>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
    971c:	2004      	movs	r0, #4
    971e:	e7aa      	b.n	9676 <check_fs+0x42>
    9720:	00016a40 	.word	0x00016a40
    9724:	00016a4c 	.word	0x00016a4c

00009728 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
    9728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    972c:	b083      	sub	sp, #12
    972e:	460d      	mov	r5, r1
    9730:	4616      	mov	r6, r2
	FATFS *fs;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
    9732:	2300      	movs	r3, #0
    9734:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
    9736:	f7ff ff2f 	bl	9598 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    973a:	1e07      	subs	r7, r0, #0
    973c:	f2c0 81f1 	blt.w	9b22 <mount_volume+0x3fa>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
    9740:	4bd0      	ldr	r3, [pc, #832]	; (9a84 <mount_volume+0x35c>)
    9742:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
    9746:	2c00      	cmp	r4, #0
    9748:	f000 81f0 	beq.w	9b2c <mount_volume+0x404>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
    974c:	602c      	str	r4, [r5, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
    974e:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
    9752:	7823      	ldrb	r3, [r4, #0]
    9754:	b173      	cbz	r3, 9774 <mount_volume+0x4c>
		stat = disk_status(fs->pdrv);
    9756:	7860      	ldrb	r0, [r4, #1]
    9758:	f001 ff26 	bl	b5a8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
    975c:	f010 0501 	ands.w	r5, r0, #1
    9760:	d108      	bne.n	9774 <mount_volume+0x4c>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
    9762:	2e00      	cmp	r6, #0
    9764:	f000 81de 	beq.w	9b24 <mount_volume+0x3fc>
    9768:	f010 0f04 	tst.w	r0, #4
    976c:	f000 81da 	beq.w	9b24 <mount_volume+0x3fc>
				return FR_WRITE_PROTECTED;
    9770:	250a      	movs	r5, #10
    9772:	e1d7      	b.n	9b24 <mount_volume+0x3fc>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
    9774:	2300      	movs	r3, #0
    9776:	7023      	strb	r3, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
    9778:	b2f8      	uxtb	r0, r7
    977a:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
    977c:	f001 ff34 	bl	b5e8 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
    9780:	f010 0501 	ands.w	r5, r0, #1
    9784:	f040 81d4 	bne.w	9b30 <mount_volume+0x408>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
    9788:	b11e      	cbz	r6, 9792 <mount_volume+0x6a>
    978a:	f010 0f04 	tst.w	r0, #4
    978e:	f040 81d1 	bne.w	9b34 <mount_volume+0x40c>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the drive */
	fmt = find_volume(fs, LD2PT(vol));
    9792:	2100      	movs	r1, #0
    9794:	4620      	mov	r0, r4
    9796:	f009 f864 	bl	12862 <find_volume>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    979a:	2804      	cmp	r0, #4
    979c:	f000 81cc 	beq.w	9b38 <mount_volume+0x410>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
    97a0:	2801      	cmp	r0, #1
    97a2:	f200 81cb 	bhi.w	9b3c <mount_volume+0x414>
	bsect = fs->winsect;					/* Volume offset */
    97a6:	6ba6      	ldr	r6, [r4, #56]	; 0x38

	/* An FAT volume is found (bsect). Following code initializes the filesystem object */

#if FF_FS_EXFAT
	if (fmt == 1) {
    97a8:	f000 80df 	beq.w	996a <mount_volume+0x242>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
    97ac:	f104 0047 	add.w	r0, r4, #71	; 0x47
    97b0:	f008 ff24 	bl	125fc <ld_word>
    97b4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    97b8:	f040 81dc 	bne.w	9b74 <mount_volume+0x44c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
    97bc:	f104 0052 	add.w	r0, r4, #82	; 0x52
    97c0:	f008 ff1c 	bl	125fc <ld_word>
    97c4:	4607      	mov	r7, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
    97c6:	b920      	cbnz	r0, 97d2 <mount_volume+0xaa>
    97c8:	f104 0060 	add.w	r0, r4, #96	; 0x60
    97cc:	f008 ff1b 	bl	12606 <ld_dword>
    97d0:	4607      	mov	r7, r0
		fs->fsize = fasize;
    97d2:	6227      	str	r7, [r4, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
    97d4:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
    97d8:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
    97da:	1e53      	subs	r3, r2, #1
    97dc:	b2db      	uxtb	r3, r3
    97de:	2b01      	cmp	r3, #1
    97e0:	f200 81ca 	bhi.w	9b78 <mount_volume+0x450>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
    97e4:	fb07 f802 	mul.w	r8, r7, r2

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
    97e8:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
    97ec:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    97f0:	f1b9 0f00 	cmp.w	r9, #0
    97f4:	f000 81c2 	beq.w	9b7c <mount_volume+0x454>
    97f8:	f109 33ff 	add.w	r3, r9, #4294967295
    97fc:	ea19 0f03 	tst.w	r9, r3
    9800:	f040 81be 	bne.w	9b80 <mount_volume+0x458>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
    9804:	f104 004d 	add.w	r0, r4, #77	; 0x4d
    9808:	f008 fef8 	bl	125fc <ld_word>
    980c:	4682      	mov	sl, r0
    980e:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    9810:	f010 0f0f 	tst.w	r0, #15
    9814:	f040 81b6 	bne.w	9b84 <mount_volume+0x45c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
    9818:	f104 004f 	add.w	r0, r4, #79	; 0x4f
    981c:	f008 feee 	bl	125fc <ld_word>
    9820:	4683      	mov	fp, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
    9822:	b920      	cbnz	r0, 982e <mount_volume+0x106>
    9824:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    9828:	f008 feed 	bl	12606 <ld_dword>
    982c:	4683      	mov	fp, r0

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
    982e:	f104 004a 	add.w	r0, r4, #74	; 0x4a
    9832:	f008 fee3 	bl	125fc <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
    9836:	4602      	mov	r2, r0
    9838:	2800      	cmp	r0, #0
    983a:	f000 81a5 	beq.w	9b88 <mount_volume+0x460>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
    983e:	eb00 0308 	add.w	r3, r0, r8
    9842:	eb03 131a 	add.w	r3, r3, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
    9846:	459b      	cmp	fp, r3
    9848:	f0c0 81a0 	bcc.w	9b8c <mount_volume+0x464>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
    984c:	ebab 0b03 	sub.w	fp, fp, r3
    9850:	fbbb f1f9 	udiv	r1, fp, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    9854:	45cb      	cmp	fp, r9
    9856:	f0c0 819b 	bcc.w	9b90 <mount_volume+0x468>
		fmt = 0;
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
    985a:	488b      	ldr	r0, [pc, #556]	; (9a88 <mount_volume+0x360>)
    985c:	4281      	cmp	r1, r0
    985e:	f240 80d4 	bls.w	9a0a <mount_volume+0x2e2>
		fmt = 0;
    9862:	f04f 0b00 	mov.w	fp, #0
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
    9866:	f64f 70f5 	movw	r0, #65525	; 0xfff5
    986a:	4281      	cmp	r1, r0
    986c:	d801      	bhi.n	9872 <mount_volume+0x14a>
    986e:	f04f 0b02 	mov.w	fp, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
    9872:	f640 70f5 	movw	r0, #4085	; 0xff5
    9876:	4281      	cmp	r1, r0
    9878:	f240 80ca 	bls.w	9a10 <mount_volume+0x2e8>
		if (fmt == 0) return FR_NO_FILESYSTEM;
    987c:	f1bb 0f00 	cmp.w	fp, #0
    9880:	f040 80c8 	bne.w	9a14 <mount_volume+0x2ec>
    9884:	250d      	movs	r5, #13
    9886:	e14d      	b.n	9b24 <mount_volume+0x3fc>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
    9888:	3301      	adds	r3, #1
    988a:	2b3f      	cmp	r3, #63	; 0x3f
    988c:	d804      	bhi.n	9898 <mount_volume+0x170>
    988e:	18e2      	adds	r2, r4, r3
    9890:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
    9894:	2a00      	cmp	r2, #0
    9896:	d0f7      	beq.n	9888 <mount_volume+0x160>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
    9898:	2b3f      	cmp	r3, #63	; 0x3f
    989a:	f240 8151 	bls.w	9b40 <mount_volume+0x418>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
    989e:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
    98a2:	f008 feab 	bl	125fc <ld_word>
    98a6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    98aa:	f040 814b 	bne.w	9b44 <mount_volume+0x41c>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
    98ae:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    98b2:	2b09      	cmp	r3, #9
    98b4:	f040 8148 	bne.w	9b48 <mount_volume+0x420>
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
    98b8:	f104 0084 	add.w	r0, r4, #132	; 0x84
    98bc:	f008 feae 	bl	1261c <ld_qword>
    98c0:	eb10 0806 	adds.w	r8, r0, r6
    98c4:	f141 0900 	adc.w	r9, r1, #0
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */
    98c8:	f1b9 0f01 	cmp.w	r9, #1
    98cc:	bf08      	it	eq
    98ce:	f1b8 0f00 	cmpeq.w	r8, #0
    98d2:	f080 813b 	bcs.w	9b4c <mount_volume+0x424>
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
    98d6:	f104 0090 	add.w	r0, r4, #144	; 0x90
    98da:	f008 fe94 	bl	12606 <ld_dword>
    98de:	6220      	str	r0, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
    98e0:	f894 b0aa 	ldrb.w	fp, [r4, #170]	; 0xaa
    98e4:	f884 b002 	strb.w	fp, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
    98e8:	f1bb 0f01 	cmp.w	fp, #1
    98ec:	f040 8130 	bne.w	9b50 <mount_volume+0x428>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
    98f0:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
    98f4:	f04f 0a01 	mov.w	sl, #1
    98f8:	fa0a fa03 	lsl.w	sl, sl, r3
    98fc:	fa1f fa8a 	uxth.w	sl, sl
    9900:	f8a4 a00a 	strh.w	sl, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768 sectors) */
    9904:	f1ba 0f00 	cmp.w	sl, #0
    9908:	f000 8124 	beq.w	9b54 <mount_volume+0x42c>
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
    990c:	f104 0098 	add.w	r0, r4, #152	; 0x98
    9910:	f008 fe79 	bl	12606 <ld_dword>
    9914:	4607      	mov	r7, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
    9916:	4b5d      	ldr	r3, [pc, #372]	; (9a8c <mount_volume+0x364>)
    9918:	4298      	cmp	r0, r3
    991a:	f200 811d 	bhi.w	9b58 <mount_volume+0x430>
		fs->n_fatent = nclst + 2;
    991e:	1c83      	adds	r3, r0, #2
    9920:	61e3      	str	r3, [r4, #28]
		fs->volbase = bsect;
    9922:	6266      	str	r6, [r4, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
    9924:	f104 0094 	add.w	r0, r4, #148	; 0x94
    9928:	f008 fe6d 	bl	12606 <ld_dword>
    992c:	1983      	adds	r3, r0, r6
    992e:	9301      	str	r3, [sp, #4]
    9930:	6323      	str	r3, [r4, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
    9932:	f104 008c 	add.w	r0, r4, #140	; 0x8c
    9936:	f008 fe66 	bl	12606 <ld_dword>
    993a:	4406      	add	r6, r0
    993c:	62a6      	str	r6, [r4, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
    993e:	fb07 f20a 	mul.w	r2, r7, sl
    9942:	2300      	movs	r3, #0
    9944:	4611      	mov	r1, r2
    9946:	461a      	mov	r2, r3
    9948:	9b01      	ldr	r3, [sp, #4]
    994a:	18c9      	adds	r1, r1, r3
    994c:	f142 0200 	adc.w	r2, r2, #0
    9950:	4591      	cmp	r9, r2
    9952:	bf08      	it	eq
    9954:	4588      	cmpeq	r8, r1
    9956:	f0c0 8101 	bcc.w	9b5c <mount_volume+0x434>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
    995a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    995e:	f008 fe52 	bl	12606 <ld_dword>
    9962:	62e0      	str	r0, [r4, #44]	; 0x2c
		so = i = 0;
    9964:	2600      	movs	r6, #0
    9966:	4637      	mov	r7, r6
    9968:	e009      	b.n	997e <mount_volume+0x256>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
    996a:	230b      	movs	r3, #11
    996c:	e78d      	b.n	988a <mount_volume+0x162>
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
    996e:	19a3      	adds	r3, r4, r6
    9970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    9974:	2b81      	cmp	r3, #129	; 0x81
    9976:	d015      	beq.n	99a4 <mount_volume+0x27c>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
    9978:	3620      	adds	r6, #32
    997a:	f3c6 0608 	ubfx	r6, r6, #0, #9
			if (i == 0) {
    997e:	2e00      	cmp	r6, #0
    9980:	d1f5      	bne.n	996e <mount_volume+0x246>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
    9982:	8963      	ldrh	r3, [r4, #10]
    9984:	42bb      	cmp	r3, r7
    9986:	f240 80eb 	bls.w	9b60 <mount_volume+0x438>
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
    998a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    998c:	4620      	mov	r0, r4
    998e:	f008 fe91 	bl	126b4 <clst2sect>
    9992:	19c1      	adds	r1, r0, r7
    9994:	4620      	mov	r0, r4
    9996:	f008 ff49 	bl	1282c <move_window>
    999a:	2800      	cmp	r0, #0
    999c:	f040 80e2 	bne.w	9b64 <mount_volume+0x43c>
				so++;
    99a0:	3701      	adds	r7, #1
    99a2:	e7e4      	b.n	996e <mount_volume+0x246>
		bcl = ld_dword(fs->win + i + 20);				/* Bitmap cluster */
    99a4:	f104 073c 	add.w	r7, r4, #60	; 0x3c
    99a8:	f106 0014 	add.w	r0, r6, #20
    99ac:	4438      	add	r0, r7
    99ae:	f008 fe2a 	bl	12606 <ld_dword>
    99b2:	4606      	mov	r6, r0
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
    99b4:	2801      	cmp	r0, #1
    99b6:	f240 80d7 	bls.w	9b68 <mount_volume+0x440>
    99ba:	69e3      	ldr	r3, [r4, #28]
    99bc:	4283      	cmp	r3, r0
    99be:	f240 80d5 	bls.w	9b6c <mount_volume+0x444>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
    99c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
    99c4:	8963      	ldrh	r3, [r4, #10]
    99c6:	1e81      	subs	r1, r0, #2
    99c8:	fb01 2303 	mla	r3, r1, r3, r2
    99cc:	6363      	str	r3, [r4, #52]	; 0x34
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
    99ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    99d0:	eb01 11d6 	add.w	r1, r1, r6, lsr #7
    99d4:	4620      	mov	r0, r4
    99d6:	f008 ff29 	bl	1282c <move_window>
    99da:	2800      	cmp	r0, #0
    99dc:	f040 80c8 	bne.w	9b70 <mount_volume+0x448>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
    99e0:	f006 007f 	and.w	r0, r6, #127	; 0x7f
    99e4:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    99e8:	f008 fe0d 	bl	12606 <ld_dword>
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
    99ec:	f1b0 3fff 	cmp.w	r0, #4294967295
    99f0:	d004      	beq.n	99fc <mount_volume+0x2d4>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented? */
    99f2:	3601      	adds	r6, #1
    99f4:	42b0      	cmp	r0, r6
    99f6:	d0ea      	beq.n	99ce <mount_volume+0x2a6>
    99f8:	250d      	movs	r5, #13
    99fa:	e093      	b.n	9b24 <mount_volume+0x3fc>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
    99fc:	f04f 33ff 	mov.w	r3, #4294967295
    9a00:	61a3      	str	r3, [r4, #24]
    9a02:	6163      	str	r3, [r4, #20]
		fmt = FS_EXFAT;			/* FAT sub-type */
    9a04:	f04f 0b04 	mov.w	fp, #4
    9a08:	e02e      	b.n	9a68 <mount_volume+0x340>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
    9a0a:	f04f 0b03 	mov.w	fp, #3
    9a0e:	e72a      	b.n	9866 <mount_volume+0x13e>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
    9a10:	f04f 0b01 	mov.w	fp, #1

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    9a14:	f101 0902 	add.w	r9, r1, #2
    9a18:	f8c4 901c 	str.w	r9, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
    9a1c:	6266      	str	r6, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    9a1e:	4432      	add	r2, r6
    9a20:	62a2      	str	r2, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
    9a22:	4433      	add	r3, r6
    9a24:	6323      	str	r3, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
    9a26:	f1bb 0f03 	cmp.w	fp, #3
    9a2a:	d037      	beq.n	9a9c <mount_volume+0x374>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    9a2c:	f1ba 0f00 	cmp.w	sl, #0
    9a30:	f000 80b4 	beq.w	9b9c <mount_volume+0x474>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
    9a34:	4442      	add	r2, r8
    9a36:	62e2      	str	r2, [r4, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    9a38:	f1bb 0f02 	cmp.w	fp, #2
    9a3c:	d03f      	beq.n	9abe <mount_volume+0x396>
    9a3e:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    9a42:	f009 0901 	and.w	r9, r9, #1
    9a46:	eb09 0953 	add.w	r9, r9, r3, lsr #1
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    9a4a:	f209 13ff 	addw	r3, r9, #511	; 0x1ff
    9a4e:	ebb7 2f53 	cmp.w	r7, r3, lsr #9
    9a52:	f0c0 80a5 	bcc.w	9ba0 <mount_volume+0x478>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
    9a56:	f04f 33ff 	mov.w	r3, #4294967295
    9a5a:	61a3      	str	r3, [r4, #24]
    9a5c:	6163      	str	r3, [r4, #20]
		fs->fsi_flag = 0x80;
    9a5e:	2380      	movs	r3, #128	; 0x80
    9a60:	7123      	strb	r3, [r4, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
    9a62:	f1bb 0f03 	cmp.w	fp, #3
    9a66:	d02d      	beq.n	9ac4 <mount_volume+0x39c>
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
    9a68:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* Volume mount ID */
    9a6c:	4a08      	ldr	r2, [pc, #32]	; (9a90 <mount_volume+0x368>)
    9a6e:	8813      	ldrh	r3, [r2, #0]
    9a70:	3301      	adds	r3, #1
    9a72:	b29b      	uxth	r3, r3
    9a74:	8013      	strh	r3, [r2, #0]
    9a76:	80e3      	strh	r3, [r4, #6]
#if FF_USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
    9a78:	4b06      	ldr	r3, [pc, #24]	; (9a94 <mount_volume+0x36c>)
    9a7a:	60e3      	str	r3, [r4, #12]
#if FF_FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
    9a7c:	4b06      	ldr	r3, [pc, #24]	; (9a98 <mount_volume+0x370>)
    9a7e:	6123      	str	r3, [r4, #16]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
    9a80:	e050      	b.n	9b24 <mount_volume+0x3fc>
    9a82:	bf00      	nop
    9a84:	20000ec8 	.word	0x20000ec8
    9a88:	0ffffff5 	.word	0x0ffffff5
    9a8c:	7ffffffd 	.word	0x7ffffffd
    9a90:	20001654 	.word	0x20001654
    9a94:	20000ee8 	.word	0x20000ee8
    9a98:	20000c68 	.word	0x20000c68
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
    9a9c:	f104 0066 	add.w	r0, r4, #102	; 0x66
    9aa0:	f008 fdac 	bl	125fc <ld_word>
    9aa4:	2800      	cmp	r0, #0
    9aa6:	d175      	bne.n	9b94 <mount_volume+0x46c>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
    9aa8:	f1ba 0f00 	cmp.w	sl, #0
    9aac:	d174      	bne.n	9b98 <mount_volume+0x470>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
    9aae:	f104 0068 	add.w	r0, r4, #104	; 0x68
    9ab2:	f008 fda8 	bl	12606 <ld_dword>
    9ab6:	62e0      	str	r0, [r4, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
    9ab8:	ea4f 0989 	mov.w	r9, r9, lsl #2
    9abc:	e7c5      	b.n	9a4a <mount_volume+0x322>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    9abe:	ea4f 0949 	mov.w	r9, r9, lsl #1
    9ac2:	e7c2      	b.n	9a4a <mount_volume+0x322>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
    9ac4:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    9ac8:	f008 fd98 	bl	125fc <ld_word>
    9acc:	2801      	cmp	r0, #1
    9ace:	d1cb      	bne.n	9a68 <mount_volume+0x340>
			&& move_window(fs, bsect + 1) == FR_OK)
    9ad0:	1c71      	adds	r1, r6, #1
    9ad2:	4620      	mov	r0, r4
    9ad4:	f008 feaa 	bl	1282c <move_window>
    9ad8:	2800      	cmp	r0, #0
    9ada:	d1c5      	bne.n	9a68 <mount_volume+0x340>
			fs->fsi_flag = 0;
    9adc:	2300      	movs	r3, #0
    9ade:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
    9ae0:	f204 203a 	addw	r0, r4, #570	; 0x23a
    9ae4:	f008 fd8a 	bl	125fc <ld_word>
    9ae8:	f64a 2355 	movw	r3, #43605	; 0xaa55
    9aec:	4298      	cmp	r0, r3
    9aee:	d1bb      	bne.n	9a68 <mount_volume+0x340>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
    9af0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    9af4:	f008 fd87 	bl	12606 <ld_dword>
    9af8:	4b2a      	ldr	r3, [pc, #168]	; (9ba4 <mount_volume+0x47c>)
    9afa:	4298      	cmp	r0, r3
    9afc:	d1b4      	bne.n	9a68 <mount_volume+0x340>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
    9afe:	f504 7008 	add.w	r0, r4, #544	; 0x220
    9b02:	f008 fd80 	bl	12606 <ld_dword>
    9b06:	4b28      	ldr	r3, [pc, #160]	; (9ba8 <mount_volume+0x480>)
    9b08:	4298      	cmp	r0, r3
    9b0a:	d1ad      	bne.n	9a68 <mount_volume+0x340>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
    9b0c:	f504 7009 	add.w	r0, r4, #548	; 0x224
    9b10:	f008 fd79 	bl	12606 <ld_dword>
    9b14:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
    9b16:	f504 700a 	add.w	r0, r4, #552	; 0x228
    9b1a:	f008 fd74 	bl	12606 <ld_dword>
    9b1e:	6160      	str	r0, [r4, #20]
    9b20:	e7a2      	b.n	9a68 <mount_volume+0x340>
	if (vol < 0) return FR_INVALID_DRIVE;
    9b22:	250b      	movs	r5, #11
}
    9b24:	4628      	mov	r0, r5
    9b26:	b003      	add	sp, #12
    9b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
    9b2c:	250c      	movs	r5, #12
    9b2e:	e7f9      	b.n	9b24 <mount_volume+0x3fc>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    9b30:	2503      	movs	r5, #3
    9b32:	e7f7      	b.n	9b24 <mount_volume+0x3fc>
		return FR_WRITE_PROTECTED;
    9b34:	250a      	movs	r5, #10
    9b36:	e7f5      	b.n	9b24 <mount_volume+0x3fc>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    9b38:	2501      	movs	r5, #1
    9b3a:	e7f3      	b.n	9b24 <mount_volume+0x3fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
    9b3c:	250d      	movs	r5, #13
    9b3e:	e7f1      	b.n	9b24 <mount_volume+0x3fc>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
    9b40:	250d      	movs	r5, #13
    9b42:	e7ef      	b.n	9b24 <mount_volume+0x3fc>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
    9b44:	250d      	movs	r5, #13
    9b46:	e7ed      	b.n	9b24 <mount_volume+0x3fc>
			return FR_NO_FILESYSTEM;
    9b48:	250d      	movs	r5, #13
    9b4a:	e7eb      	b.n	9b24 <mount_volume+0x3fc>
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */
    9b4c:	250d      	movs	r5, #13
    9b4e:	e7e9      	b.n	9b24 <mount_volume+0x3fc>
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
    9b50:	250d      	movs	r5, #13
    9b52:	e7e7      	b.n	9b24 <mount_volume+0x3fc>
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768 sectors) */
    9b54:	250d      	movs	r5, #13
    9b56:	e7e5      	b.n	9b24 <mount_volume+0x3fc>
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
    9b58:	250d      	movs	r5, #13
    9b5a:	e7e3      	b.n	9b24 <mount_volume+0x3fc>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
    9b5c:	250d      	movs	r5, #13
    9b5e:	e7e1      	b.n	9b24 <mount_volume+0x3fc>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
    9b60:	250d      	movs	r5, #13
    9b62:	e7df      	b.n	9b24 <mount_volume+0x3fc>
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
    9b64:	465d      	mov	r5, fp
    9b66:	e7dd      	b.n	9b24 <mount_volume+0x3fc>
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
    9b68:	250d      	movs	r5, #13
    9b6a:	e7db      	b.n	9b24 <mount_volume+0x3fc>
    9b6c:	250d      	movs	r5, #13
    9b6e:	e7d9      	b.n	9b24 <mount_volume+0x3fc>
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
    9b70:	465d      	mov	r5, fp
    9b72:	e7d7      	b.n	9b24 <mount_volume+0x3fc>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
    9b74:	250d      	movs	r5, #13
    9b76:	e7d5      	b.n	9b24 <mount_volume+0x3fc>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
    9b78:	250d      	movs	r5, #13
    9b7a:	e7d3      	b.n	9b24 <mount_volume+0x3fc>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    9b7c:	250d      	movs	r5, #13
    9b7e:	e7d1      	b.n	9b24 <mount_volume+0x3fc>
    9b80:	250d      	movs	r5, #13
    9b82:	e7cf      	b.n	9b24 <mount_volume+0x3fc>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    9b84:	250d      	movs	r5, #13
    9b86:	e7cd      	b.n	9b24 <mount_volume+0x3fc>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
    9b88:	250d      	movs	r5, #13
    9b8a:	e7cb      	b.n	9b24 <mount_volume+0x3fc>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
    9b8c:	250d      	movs	r5, #13
    9b8e:	e7c9      	b.n	9b24 <mount_volume+0x3fc>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    9b90:	250d      	movs	r5, #13
    9b92:	e7c7      	b.n	9b24 <mount_volume+0x3fc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
    9b94:	250d      	movs	r5, #13
    9b96:	e7c5      	b.n	9b24 <mount_volume+0x3fc>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
    9b98:	250d      	movs	r5, #13
    9b9a:	e7c3      	b.n	9b24 <mount_volume+0x3fc>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    9b9c:	250d      	movs	r5, #13
    9b9e:	e7c1      	b.n	9b24 <mount_volume+0x3fc>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    9ba0:	250d      	movs	r5, #13
    9ba2:	e7bf      	b.n	9b24 <mount_volume+0x3fc>
    9ba4:	41615252 	.word	0x41615252
    9ba8:	61417272 	.word	0x61417272

00009bac <create_name>:
{
    9bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9bb0:	b085      	sub	sp, #20
    9bb2:	4607      	mov	r7, r0
    9bb4:	4689      	mov	r9, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
    9bb6:	680b      	ldr	r3, [r1, #0]
    9bb8:	9303      	str	r3, [sp, #12]
    9bba:	6803      	ldr	r3, [r0, #0]
    9bbc:	68dd      	ldr	r5, [r3, #12]
    9bbe:	2400      	movs	r4, #0
    9bc0:	e00e      	b.n	9be0 <create_name+0x34>
		wc = (WCHAR)uc;
    9bc2:	b286      	uxth	r6, r0
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
    9bc4:	2e1f      	cmp	r6, #31
    9bc6:	d922      	bls.n	9c0e <create_name+0x62>
    9bc8:	2e2f      	cmp	r6, #47	; 0x2f
    9bca:	d020      	beq.n	9c0e <create_name+0x62>
    9bcc:	2e5c      	cmp	r6, #92	; 0x5c
    9bce:	d01e      	beq.n	9c0e <create_name+0x62>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
    9bd0:	2e7f      	cmp	r6, #127	; 0x7f
    9bd2:	d914      	bls.n	9bfe <create_name+0x52>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
    9bd4:	2cfe      	cmp	r4, #254	; 0xfe
    9bd6:	f200 8108 	bhi.w	9dea <create_name+0x23e>
		lfn[di++] = wc;				/* Store the Unicode character */
    9bda:	f825 6014 	strh.w	r6, [r5, r4, lsl #1]
    9bde:	3401      	adds	r4, #1
		uc = tchar2uni(&p);			/* Get a character */
    9be0:	a803      	add	r0, sp, #12
    9be2:	f009 fc88 	bl	134f6 <tchar2uni>
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
    9be6:	f1b0 3fff 	cmp.w	r0, #4294967295
    9bea:	f000 80fc 	beq.w	9de6 <create_name+0x23a>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
    9bee:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    9bf2:	d3e6      	bcc.n	9bc2 <create_name+0x16>
    9bf4:	0c03      	lsrs	r3, r0, #16
    9bf6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    9bfa:	3401      	adds	r4, #1
    9bfc:	e7e1      	b.n	9bc2 <create_name+0x16>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
    9bfe:	4631      	mov	r1, r6
    9c00:	487b      	ldr	r0, [pc, #492]	; (9df0 <create_name+0x244>)
    9c02:	f00b f83f 	bl	14c84 <strchr>
    9c06:	2800      	cmp	r0, #0
    9c08:	d0e4      	beq.n	9bd4 <create_name+0x28>
    9c0a:	2006      	movs	r0, #6
    9c0c:	e096      	b.n	9d3c <create_name+0x190>
	if (wc < ' ') {				/* Stopped at end of the path? */
    9c0e:	2e1f      	cmp	r6, #31
    9c10:	d807      	bhi.n	9c22 <create_name+0x76>
		cf = NS_LAST;			/* Last segment */
    9c12:	f04f 0804 	mov.w	r8, #4
	*path = p;					/* Return pointer to the next segment */
    9c16:	9b03      	ldr	r3, [sp, #12]
    9c18:	f8c9 3000 	str.w	r3, [r9]
	while (di) {					/* Snip off trailing spaces and dots if exist */
    9c1c:	e010      	b.n	9c40 <create_name+0x94>
		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
    9c1e:	3301      	adds	r3, #1
    9c20:	9303      	str	r3, [sp, #12]
    9c22:	9b03      	ldr	r3, [sp, #12]
    9c24:	781a      	ldrb	r2, [r3, #0]
    9c26:	2a2f      	cmp	r2, #47	; 0x2f
    9c28:	d0f9      	beq.n	9c1e <create_name+0x72>
    9c2a:	2a5c      	cmp	r2, #92	; 0x5c
    9c2c:	d0f7      	beq.n	9c1e <create_name+0x72>
		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
    9c2e:	2a1f      	cmp	r2, #31
    9c30:	d902      	bls.n	9c38 <create_name+0x8c>
		cf = 0;					/* Next segment may follow */
    9c32:	f04f 0800 	mov.w	r8, #0
    9c36:	e7ee      	b.n	9c16 <create_name+0x6a>
		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
    9c38:	f04f 0804 	mov.w	r8, #4
    9c3c:	e7eb      	b.n	9c16 <create_name+0x6a>
		di--;
    9c3e:	3c01      	subs	r4, #1
	while (di) {					/* Snip off trailing spaces and dots if exist */
    9c40:	b144      	cbz	r4, 9c54 <create_name+0xa8>
		wc = lfn[di - 1];
    9c42:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
    9c46:	3b01      	subs	r3, #1
    9c48:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (wc != ' ' && wc != '.') break;
    9c4c:	2b20      	cmp	r3, #32
    9c4e:	d0f6      	beq.n	9c3e <create_name+0x92>
    9c50:	2b2e      	cmp	r3, #46	; 0x2e
    9c52:	d0f4      	beq.n	9c3e <create_name+0x92>
	lfn[di] = 0;							/* LFN is created into the working buffer */
    9c54:	2300      	movs	r3, #0
    9c56:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
    9c5a:	b914      	cbnz	r4, 9c62 <create_name+0xb6>
    9c5c:	2006      	movs	r0, #6
    9c5e:	e06d      	b.n	9d3c <create_name+0x190>
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
    9c60:	3301      	adds	r3, #1
    9c62:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
    9c66:	2a20      	cmp	r2, #32
    9c68:	d0fa      	beq.n	9c60 <create_name+0xb4>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
    9c6a:	b90b      	cbnz	r3, 9c70 <create_name+0xc4>
    9c6c:	2a2e      	cmp	r2, #46	; 0x2e
    9c6e:	d101      	bne.n	9c74 <create_name+0xc8>
    9c70:	f048 0803 	orr.w	r8, r8, #3
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
    9c74:	b144      	cbz	r4, 9c88 <create_name+0xdc>
    9c76:	f104 4200 	add.w	r2, r4, #2147483648	; 0x80000000
    9c7a:	3a01      	subs	r2, #1
    9c7c:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
    9c80:	2a2e      	cmp	r2, #46	; 0x2e
    9c82:	d001      	beq.n	9c88 <create_name+0xdc>
    9c84:	3c01      	subs	r4, #1
    9c86:	e7f5      	b.n	9c74 <create_name+0xc8>
    9c88:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
    9c8c:	643a      	str	r2, [r7, #64]	; 0x40
    9c8e:	647a      	str	r2, [r7, #68]	; 0x44
    9c90:	f8c7 2047 	str.w	r2, [r7, #71]	; 0x47
    9c94:	f04f 0b08 	mov.w	fp, #8
    9c98:	2200      	movs	r2, #0
    9c9a:	9201      	str	r2, [sp, #4]
    9c9c:	4692      	mov	sl, r2
		wc = lfn[si++];					/* Get an LFN character */
    9c9e:	f103 0901 	add.w	r9, r3, #1
    9ca2:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
		if (wc == 0) break;				/* Break on end of the LFN */
    9ca6:	b346      	cbz	r6, 9cfa <create_name+0x14e>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
    9ca8:	2e20      	cmp	r6, #32
    9caa:	d019      	beq.n	9ce0 <create_name+0x134>
    9cac:	2e2e      	cmp	r6, #46	; 0x2e
    9cae:	d015      	beq.n	9cdc <create_name+0x130>
		if (i >= ni || si == di) {		/* End of field? */
    9cb0:	9b01      	ldr	r3, [sp, #4]
    9cb2:	455b      	cmp	r3, fp
    9cb4:	d218      	bcs.n	9ce8 <create_name+0x13c>
    9cb6:	454c      	cmp	r4, r9
    9cb8:	d016      	beq.n	9ce8 <create_name+0x13c>
		if (wc >= 0x80) {	/* Is this an extended character? */
    9cba:	2e7f      	cmp	r6, #127	; 0x7f
    9cbc:	d84e      	bhi.n	9d5c <create_name+0x1b0>
		if (wc >= 0x100) {				/* Is this a DBC? */
    9cbe:	2eff      	cmp	r6, #255	; 0xff
    9cc0:	d962      	bls.n	9d88 <create_name+0x1dc>
			if (i >= ni - 1) {			/* Field overflow? */
    9cc2:	f10b 33ff 	add.w	r3, fp, #4294967295
    9cc6:	9a01      	ldr	r2, [sp, #4]
    9cc8:	4293      	cmp	r3, r2
    9cca:	d957      	bls.n	9d7c <create_name+0x1d0>
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
    9ccc:	9901      	ldr	r1, [sp, #4]
    9cce:	1c4b      	adds	r3, r1, #1
    9cd0:	f3c6 2207 	ubfx	r2, r6, #8, #8
    9cd4:	1879      	adds	r1, r7, r1
    9cd6:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
    9cda:	e05a      	b.n	9d92 <create_name+0x1e6>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
    9cdc:	454c      	cmp	r4, r9
    9cde:	d0e7      	beq.n	9cb0 <create_name+0x104>
			cf |= NS_LOSS | NS_LFN;
    9ce0:	f048 0803 	orr.w	r8, r8, #3
		wc = lfn[si++];					/* Get an LFN character */
    9ce4:	464b      	mov	r3, r9
			continue;
    9ce6:	e7da      	b.n	9c9e <create_name+0xf2>
			if (ni == 11) {				/* Name extension overflow? */
    9ce8:	f1bb 0f0b 	cmp.w	fp, #11
    9cec:	d029      	beq.n	9d42 <create_name+0x196>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
    9cee:	454c      	cmp	r4, r9
    9cf0:	d001      	beq.n	9cf6 <create_name+0x14a>
    9cf2:	f048 0803 	orr.w	r8, r8, #3
			if (si > di) break;						/* No name extension? */
    9cf6:	454c      	cmp	r4, r9
    9cf8:	d226      	bcs.n	9d48 <create_name+0x19c>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    9cfa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    9cfe:	2be5      	cmp	r3, #229	; 0xe5
    9d00:	d068      	beq.n	9dd4 <create_name+0x228>
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
    9d02:	f1bb 0f08 	cmp.w	fp, #8
    9d06:	d069      	beq.n	9ddc <create_name+0x230>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
    9d08:	f00a 030c 	and.w	r3, sl, #12
    9d0c:	2b0c      	cmp	r3, #12
    9d0e:	d003      	beq.n	9d18 <create_name+0x16c>
    9d10:	f00a 0303 	and.w	r3, sl, #3
    9d14:	2b03      	cmp	r3, #3
    9d16:	d101      	bne.n	9d1c <create_name+0x170>
    9d18:	f048 0802 	orr.w	r8, r8, #2
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
    9d1c:	f018 0f02 	tst.w	r8, #2
    9d20:	d109      	bne.n	9d36 <create_name+0x18a>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
    9d22:	f01a 0f01 	tst.w	sl, #1
    9d26:	d001      	beq.n	9d2c <create_name+0x180>
    9d28:	f048 0810 	orr.w	r8, r8, #16
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
    9d2c:	f01a 0f04 	tst.w	sl, #4
    9d30:	d001      	beq.n	9d36 <create_name+0x18a>
    9d32:	f048 0808 	orr.w	r8, r8, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
    9d36:	f887 804b 	strb.w	r8, [r7, #75]	; 0x4b
	return FR_OK;
    9d3a:	2000      	movs	r0, #0
}
    9d3c:	b005      	add	sp, #20
    9d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN;
    9d42:	f048 0803 	orr.w	r8, r8, #3
				break;
    9d46:	e7d8      	b.n	9cfa <create_name+0x14e>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
    9d48:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
    9d4c:	fa5f fa8a 	uxtb.w	sl, sl
    9d50:	4623      	mov	r3, r4
    9d52:	f04f 0b0b 	mov.w	fp, #11
    9d56:	2208      	movs	r2, #8
    9d58:	9201      	str	r2, [sp, #4]
			continue;
    9d5a:	e7a0      	b.n	9c9e <create_name+0xf2>
			cf |= NS_LFN;	/* LFN entry needs to be created */
    9d5c:	f048 0802 	orr.w	r8, r8, #2
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
    9d60:	f240 11b5 	movw	r1, #437	; 0x1b5
    9d64:	4630      	mov	r0, r6
    9d66:	f001 fd0b 	bl	b780 <ff_uni2oem>
    9d6a:	4606      	mov	r6, r0
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
    9d6c:	f010 0f80 	tst.w	r0, #128	; 0x80
    9d70:	d0a5      	beq.n	9cbe <create_name+0x112>
    9d72:	f000 067f 	and.w	r6, r0, #127	; 0x7f
    9d76:	4b1f      	ldr	r3, [pc, #124]	; (9df4 <create_name+0x248>)
    9d78:	5d9e      	ldrb	r6, [r3, r6]
    9d7a:	e7a0      	b.n	9cbe <create_name+0x112>
				cf |= NS_LOSS | NS_LFN;
    9d7c:	f048 0803 	orr.w	r8, r8, #3
		wc = lfn[si++];					/* Get an LFN character */
    9d80:	464b      	mov	r3, r9
				i = ni; continue;		/* Next field */
    9d82:	f8cd b004 	str.w	fp, [sp, #4]
    9d86:	e78a      	b.n	9c9e <create_name+0xf2>
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
    9d88:	b956      	cbnz	r6, 9da0 <create_name+0x1f4>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    9d8a:	f048 0803 	orr.w	r8, r8, #3
    9d8e:	9b01      	ldr	r3, [sp, #4]
    9d90:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)wc;
    9d92:	1c5a      	adds	r2, r3, #1
    9d94:	9201      	str	r2, [sp, #4]
    9d96:	443b      	add	r3, r7
    9d98:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
		wc = lfn[si++];					/* Get an LFN character */
    9d9c:	464b      	mov	r3, r9
    9d9e:	e77e      	b.n	9c9e <create_name+0xf2>
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
    9da0:	4631      	mov	r1, r6
    9da2:	4815      	ldr	r0, [pc, #84]	; (9df8 <create_name+0x24c>)
    9da4:	f00a ff6e 	bl	14c84 <strchr>
    9da8:	2800      	cmp	r0, #0
    9daa:	d1ee      	bne.n	9d8a <create_name+0x1de>
				if (IsUpper(wc)) {		/* ASCII upper case? */
    9dac:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
    9db0:	b29b      	uxth	r3, r3
    9db2:	2b19      	cmp	r3, #25
    9db4:	d801      	bhi.n	9dba <create_name+0x20e>
					b |= 2;
    9db6:	f04a 0a02 	orr.w	sl, sl, #2
				if (IsLower(wc)) {		/* ASCII lower case? */
    9dba:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
    9dbe:	b29b      	uxth	r3, r3
    9dc0:	2b19      	cmp	r3, #25
    9dc2:	d805      	bhi.n	9dd0 <create_name+0x224>
					b |= 1; wc -= 0x20;
    9dc4:	f04a 0a01 	orr.w	sl, sl, #1
    9dc8:	3e20      	subs	r6, #32
    9dca:	b2b6      	uxth	r6, r6
    9dcc:	9b01      	ldr	r3, [sp, #4]
    9dce:	e7e0      	b.n	9d92 <create_name+0x1e6>
    9dd0:	9b01      	ldr	r3, [sp, #4]
    9dd2:	e7de      	b.n	9d92 <create_name+0x1e6>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    9dd4:	2305      	movs	r3, #5
    9dd6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    9dda:	e792      	b.n	9d02 <create_name+0x156>
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
    9ddc:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
    9de0:	fa5f fa8a 	uxtb.w	sl, sl
    9de4:	e790      	b.n	9d08 <create_name+0x15c>
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
    9de6:	2006      	movs	r0, #6
    9de8:	e7a8      	b.n	9d3c <create_name+0x190>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
    9dea:	2006      	movs	r0, #6
    9dec:	e7a6      	b.n	9d3c <create_name+0x190>
    9dee:	bf00      	nop
    9df0:	00016a58 	.word	0x00016a58
    9df4:	00016ac8 	.word	0x00016ac8
    9df8:	00016a64 	.word	0x00016a64

00009dfc <cmp_lfn>:
{
    9dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9e00:	4681      	mov	r9, r0
    9e02:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
    9e04:	f101 001a 	add.w	r0, r1, #26
    9e08:	f008 fbf8 	bl	125fc <ld_word>
    9e0c:	bbc8      	cbnz	r0, 9e82 <cmp_lfn+0x86>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
    9e0e:	783e      	ldrb	r6, [r7, #0]
    9e10:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    9e14:	3e01      	subs	r6, #1
    9e16:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    9e1a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
    9e1e:	f04f 0801 	mov.w	r8, #1
    9e22:	2500      	movs	r5, #0
    9e24:	e006      	b.n	9e34 <cmp_lfn+0x38>
				return 0;					/* Not matched */
    9e26:	2000      	movs	r0, #0
    9e28:	e02c      	b.n	9e84 <cmp_lfn+0x88>
			if (uc != 0xFFFF) return 0;		/* Check filler */
    9e2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9e2e:	4298      	cmp	r0, r3
    9e30:	d12a      	bne.n	9e88 <cmp_lfn+0x8c>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
    9e32:	3501      	adds	r5, #1
    9e34:	2d0c      	cmp	r5, #12
    9e36:	d818      	bhi.n	9e6a <cmp_lfn+0x6e>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
    9e38:	4b17      	ldr	r3, [pc, #92]	; (9e98 <cmp_lfn+0x9c>)
    9e3a:	5d58      	ldrb	r0, [r3, r5]
    9e3c:	4438      	add	r0, r7
    9e3e:	f008 fbdd 	bl	125fc <ld_word>
    9e42:	4604      	mov	r4, r0
		if (wc != 0) {
    9e44:	f1b8 0f00 	cmp.w	r8, #0
    9e48:	d0ef      	beq.n	9e2a <cmp_lfn+0x2e>
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
    9e4a:	2eff      	cmp	r6, #255	; 0xff
    9e4c:	d8eb      	bhi.n	9e26 <cmp_lfn+0x2a>
    9e4e:	f001 fccd 	bl	b7ec <ff_wtoupper>
    9e52:	4680      	mov	r8, r0
    9e54:	f106 0a01 	add.w	sl, r6, #1
    9e58:	f839 0016 	ldrh.w	r0, [r9, r6, lsl #1]
    9e5c:	f001 fcc6 	bl	b7ec <ff_wtoupper>
    9e60:	4580      	cmp	r8, r0
    9e62:	d1e0      	bne.n	9e26 <cmp_lfn+0x2a>
			wc = uc;
    9e64:	46a0      	mov	r8, r4
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
    9e66:	4656      	mov	r6, sl
    9e68:	e7e3      	b.n	9e32 <cmp_lfn+0x36>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
    9e6a:	783b      	ldrb	r3, [r7, #0]
    9e6c:	f013 0f40 	tst.w	r3, #64	; 0x40
    9e70:	d00c      	beq.n	9e8c <cmp_lfn+0x90>
    9e72:	f1b8 0f00 	cmp.w	r8, #0
    9e76:	d00b      	beq.n	9e90 <cmp_lfn+0x94>
    9e78:	f839 3016 	ldrh.w	r3, [r9, r6, lsl #1]
    9e7c:	b953      	cbnz	r3, 9e94 <cmp_lfn+0x98>
	return 1;		/* The part of LFN matched */
    9e7e:	2001      	movs	r0, #1
    9e80:	e000      	b.n	9e84 <cmp_lfn+0x88>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
    9e82:	2000      	movs	r0, #0
}
    9e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (uc != 0xFFFF) return 0;		/* Check filler */
    9e88:	2000      	movs	r0, #0
    9e8a:	e7fb      	b.n	9e84 <cmp_lfn+0x88>
	return 1;		/* The part of LFN matched */
    9e8c:	2001      	movs	r0, #1
    9e8e:	e7f9      	b.n	9e84 <cmp_lfn+0x88>
    9e90:	2001      	movs	r0, #1
    9e92:	e7f7      	b.n	9e84 <cmp_lfn+0x88>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
    9e94:	2000      	movs	r0, #0
    9e96:	e7f5      	b.n	9e84 <cmp_lfn+0x88>
    9e98:	00016b48 	.word	0x00016b48

00009e9c <load_xdir>:
{
    9e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ea0:	4604      	mov	r4, r0
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
    9ea2:	6800      	ldr	r0, [r0, #0]
    9ea4:	6906      	ldr	r6, [r0, #16]
	res = move_window(dp->obj.fs, dp->sect);
    9ea6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    9ea8:	f008 fcc0 	bl	1282c <move_window>
	if (res != FR_OK) return res;
    9eac:	4605      	mov	r5, r0
    9eae:	2800      	cmp	r0, #0
    9eb0:	f040 8095 	bne.w	9fde <load_xdir+0x142>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
    9eb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    9eb6:	781a      	ldrb	r2, [r3, #0]
    9eb8:	2a85      	cmp	r2, #133	; 0x85
    9eba:	f040 808f 	bne.w	9fdc <load_xdir+0x140>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    9ebe:	681d      	ldr	r5, [r3, #0]
    9ec0:	6858      	ldr	r0, [r3, #4]
    9ec2:	6899      	ldr	r1, [r3, #8]
    9ec4:	68da      	ldr	r2, [r3, #12]
    9ec6:	6035      	str	r5, [r6, #0]
    9ec8:	6070      	str	r0, [r6, #4]
    9eca:	60b1      	str	r1, [r6, #8]
    9ecc:	60f2      	str	r2, [r6, #12]
    9ece:	691d      	ldr	r5, [r3, #16]
    9ed0:	6958      	ldr	r0, [r3, #20]
    9ed2:	6999      	ldr	r1, [r3, #24]
    9ed4:	69da      	ldr	r2, [r3, #28]
    9ed6:	6135      	str	r5, [r6, #16]
    9ed8:	6170      	str	r0, [r6, #20]
    9eda:	61b1      	str	r1, [r6, #24]
    9edc:	61f2      	str	r2, [r6, #28]
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
    9ede:	7877      	ldrb	r7, [r6, #1]
    9ee0:	3701      	adds	r7, #1
    9ee2:	017f      	lsls	r7, r7, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
    9ee4:	f1a7 0360 	sub.w	r3, r7, #96	; 0x60
    9ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9eec:	d87a      	bhi.n	9fe4 <load_xdir+0x148>
	res = dir_next(dp, 0);
    9eee:	2100      	movs	r1, #0
    9ef0:	4620      	mov	r0, r4
    9ef2:	f009 f90b 	bl	1310c <dir_next>
    9ef6:	4605      	mov	r5, r0
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
    9ef8:	2804      	cmp	r0, #4
    9efa:	d029      	beq.n	9f50 <load_xdir+0xb4>
	if (res != FR_OK) return res;
    9efc:	2800      	cmp	r0, #0
    9efe:	d16e      	bne.n	9fde <load_xdir+0x142>
	res = move_window(dp->obj.fs, dp->sect);
    9f00:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    9f02:	6820      	ldr	r0, [r4, #0]
    9f04:	f008 fc92 	bl	1282c <move_window>
	if (res != FR_OK) return res;
    9f08:	4605      	mov	r5, r0
    9f0a:	2800      	cmp	r0, #0
    9f0c:	d167      	bne.n	9fde <load_xdir+0x142>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
    9f0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    9f10:	781a      	ldrb	r2, [r3, #0]
    9f12:	2ac0      	cmp	r2, #192	; 0xc0
    9f14:	d168      	bne.n	9fe8 <load_xdir+0x14c>
    9f16:	681d      	ldr	r5, [r3, #0]
    9f18:	6858      	ldr	r0, [r3, #4]
    9f1a:	6899      	ldr	r1, [r3, #8]
    9f1c:	68da      	ldr	r2, [r3, #12]
    9f1e:	6235      	str	r5, [r6, #32]
    9f20:	6270      	str	r0, [r6, #36]	; 0x24
    9f22:	62b1      	str	r1, [r6, #40]	; 0x28
    9f24:	62f2      	str	r2, [r6, #44]	; 0x2c
    9f26:	691d      	ldr	r5, [r3, #16]
    9f28:	6958      	ldr	r0, [r3, #20]
    9f2a:	6999      	ldr	r1, [r3, #24]
    9f2c:	69da      	ldr	r2, [r3, #28]
    9f2e:	6335      	str	r5, [r6, #48]	; 0x30
    9f30:	6370      	str	r0, [r6, #52]	; 0x34
    9f32:	63b1      	str	r1, [r6, #56]	; 0x38
    9f34:	63f2      	str	r2, [r6, #60]	; 0x3c
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
    9f36:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    9f3a:	332c      	adds	r3, #44	; 0x2c
    9f3c:	4a2d      	ldr	r2, [pc, #180]	; (9ff4 <load_xdir+0x158>)
    9f3e:	fba2 2303 	umull	r2, r3, r2, r3
    9f42:	08db      	lsrs	r3, r3, #3
    9f44:	ebb7 1f43 	cmp.w	r7, r3, lsl #5
    9f48:	d350      	bcc.n	9fec <load_xdir+0x150>
	i = 2 * SZDIRE;	/* Name offset to load */
    9f4a:	f04f 0840 	mov.w	r8, #64	; 0x40
    9f4e:	e007      	b.n	9f60 <load_xdir+0xc4>
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
    9f50:	2502      	movs	r5, #2
	if (res != FR_OK) return res;
    9f52:	e044      	b.n	9fde <load_xdir+0x142>
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
    9f54:	2502      	movs	r5, #2
		if (res != FR_OK) return res;
    9f56:	e042      	b.n	9fde <load_xdir+0x142>
	} while ((i += SZDIRE) < sz_ent);
    9f58:	f108 0820 	add.w	r8, r8, #32
    9f5c:	4547      	cmp	r7, r8
    9f5e:	d92f      	bls.n	9fc0 <load_xdir+0x124>
		res = dir_next(dp, 0);
    9f60:	2100      	movs	r1, #0
    9f62:	4620      	mov	r0, r4
    9f64:	f009 f8d2 	bl	1310c <dir_next>
    9f68:	4605      	mov	r5, r0
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
    9f6a:	2804      	cmp	r0, #4
    9f6c:	d0f2      	beq.n	9f54 <load_xdir+0xb8>
		if (res != FR_OK) return res;
    9f6e:	bbb0      	cbnz	r0, 9fde <load_xdir+0x142>
		res = move_window(dp->obj.fs, dp->sect);
    9f70:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    9f72:	6820      	ldr	r0, [r4, #0]
    9f74:	f008 fc5a 	bl	1282c <move_window>
		if (res != FR_OK) return res;
    9f78:	4605      	mov	r5, r0
    9f7a:	bb80      	cbnz	r0, 9fde <load_xdir+0x142>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
    9f7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    9f7e:	781a      	ldrb	r2, [r3, #0]
    9f80:	2ac1      	cmp	r2, #193	; 0xc1
    9f82:	d135      	bne.n	9ff0 <load_xdir+0x154>
		if (i < MAXDIRB(FF_MAX_LFN)) memcpy(dirb + i, dp->dir, SZDIRE);
    9f84:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
    9f88:	d2e6      	bcs.n	9f58 <load_xdir+0xbc>
    9f8a:	eb06 0208 	add.w	r2, r6, r8
    9f8e:	f8d3 e000 	ldr.w	lr, [r3]
    9f92:	f8d3 c004 	ldr.w	ip, [r3, #4]
    9f96:	6898      	ldr	r0, [r3, #8]
    9f98:	68d9      	ldr	r1, [r3, #12]
    9f9a:	f846 e008 	str.w	lr, [r6, r8]
    9f9e:	f8c2 c004 	str.w	ip, [r2, #4]
    9fa2:	6090      	str	r0, [r2, #8]
    9fa4:	60d1      	str	r1, [r2, #12]
    9fa6:	f8d3 e010 	ldr.w	lr, [r3, #16]
    9faa:	f8d3 c014 	ldr.w	ip, [r3, #20]
    9fae:	6998      	ldr	r0, [r3, #24]
    9fb0:	69d9      	ldr	r1, [r3, #28]
    9fb2:	f8c2 e010 	str.w	lr, [r2, #16]
    9fb6:	f8c2 c014 	str.w	ip, [r2, #20]
    9fba:	6190      	str	r0, [r2, #24]
    9fbc:	61d1      	str	r1, [r2, #28]
    9fbe:	e7cb      	b.n	9f58 <load_xdir+0xbc>
	if (i <= MAXDIRB(FF_MAX_LFN)) {
    9fc0:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
    9fc4:	d80b      	bhi.n	9fde <load_xdir+0x142>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
    9fc6:	4630      	mov	r0, r6
    9fc8:	f008 fbb7 	bl	1273a <xdir_sum>
    9fcc:	4604      	mov	r4, r0
    9fce:	1cb0      	adds	r0, r6, #2
    9fd0:	f008 fb14 	bl	125fc <ld_word>
    9fd4:	4284      	cmp	r4, r0
    9fd6:	d002      	beq.n	9fde <load_xdir+0x142>
    9fd8:	2502      	movs	r5, #2
    9fda:	e000      	b.n	9fde <load_xdir+0x142>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
    9fdc:	2502      	movs	r5, #2
}
    9fde:	4628      	mov	r0, r5
    9fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
    9fe4:	2502      	movs	r5, #2
    9fe6:	e7fa      	b.n	9fde <load_xdir+0x142>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
    9fe8:	2502      	movs	r5, #2
    9fea:	e7f8      	b.n	9fde <load_xdir+0x142>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
    9fec:	2502      	movs	r5, #2
    9fee:	e7f6      	b.n	9fde <load_xdir+0x142>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
    9ff0:	2502      	movs	r5, #2
    9ff2:	e7f4      	b.n	9fde <load_xdir+0x142>
    9ff4:	88888889 	.word	0x88888889

00009ff8 <dir_register>:
{
    9ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ffc:	b098      	sub	sp, #96	; 0x60
	FATFS *fs = dp->obj.fs;
    9ffe:	6806      	ldr	r6, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
    a000:	f890 704b 	ldrb.w	r7, [r0, #75]	; 0x4b
    a004:	f017 0fa0 	tst.w	r7, #160	; 0xa0
    a008:	f040 80ed 	bne.w	a1e6 <dir_register+0x1ee>
    a00c:	4605      	mov	r5, r0
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
    a00e:	2400      	movs	r4, #0
    a010:	e000      	b.n	a014 <dir_register+0x1c>
    a012:	3401      	adds	r4, #1
    a014:	68f3      	ldr	r3, [r6, #12]
    a016:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    a01a:	2b00      	cmp	r3, #0
    a01c:	d1f9      	bne.n	a012 <dir_register+0x1a>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
    a01e:	7833      	ldrb	r3, [r6, #0]
    a020:	2b04      	cmp	r3, #4
    a022:	d01e      	beq.n	a062 <dir_register+0x6a>
	memcpy(sn, dp->fn, 12);
    a024:	ab15      	add	r3, sp, #84	; 0x54
    a026:	462a      	mov	r2, r5
    a028:	f852 0f40 	ldr.w	r0, [r2, #64]!
    a02c:	6851      	ldr	r1, [r2, #4]
    a02e:	6892      	ldr	r2, [r2, #8]
    a030:	c307      	stmia	r3!, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    a032:	f017 0f01 	tst.w	r7, #1
    a036:	d073      	beq.n	a120 <dir_register+0x128>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
    a038:	2340      	movs	r3, #64	; 0x40
    a03a:	f885 304b 	strb.w	r3, [r5, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
    a03e:	2701      	movs	r7, #1
    a040:	2f63      	cmp	r7, #99	; 0x63
    a042:	d864      	bhi.n	a10e <dir_register+0x116>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
    a044:	463b      	mov	r3, r7
    a046:	68f2      	ldr	r2, [r6, #12]
    a048:	a915      	add	r1, sp, #84	; 0x54
    a04a:	f105 0040 	add.w	r0, r5, #64	; 0x40
    a04e:	f009 fc7d 	bl	1394c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
    a052:	4628      	mov	r0, r5
    a054:	f009 fb4b 	bl	136ee <dir_find>
			if (res != FR_OK) break;
    a058:	4680      	mov	r8, r0
    a05a:	2800      	cmp	r0, #0
    a05c:	d157      	bne.n	a10e <dir_register+0x116>
		for (n = 1; n < 100; n++) {
    a05e:	3701      	adds	r7, #1
    a060:	e7ee      	b.n	a040 <dir_register+0x48>
		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
    a062:	340e      	adds	r4, #14
    a064:	4b64      	ldr	r3, [pc, #400]	; (a1f8 <dir_register+0x200>)
    a066:	fba3 3404 	umull	r3, r4, r3, r4
    a06a:	08e4      	lsrs	r4, r4, #3
		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
    a06c:	1ca1      	adds	r1, r4, #2
    a06e:	4628      	mov	r0, r5
    a070:	f009 f8ba 	bl	131e8 <dir_alloc>
		if (res != FR_OK) return res;
    a074:	4680      	mov	r8, r0
    a076:	2800      	cmp	r0, #0
    a078:	d168      	bne.n	a14c <dir_register+0x154>
		dp->blk_ofs = dp->dptr - SZDIRE * (n_ent - 1);	/* Set the allocated entry block offset */
    a07a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    a07c:	3401      	adds	r4, #1
    a07e:	eba3 1444 	sub.w	r4, r3, r4, lsl #5
    a082:	64ec      	str	r4, [r5, #76]	; 0x4c
		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
    a084:	79eb      	ldrb	r3, [r5, #7]
    a086:	f013 0f04 	tst.w	r3, #4
    a08a:	d013      	beq.n	a0b4 <dir_register+0xbc>
			dp->obj.stat &= ~4;
    a08c:	f023 0304 	bic.w	r3, r3, #4
    a090:	71eb      	strb	r3, [r5, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
    a092:	4628      	mov	r0, r5
    a094:	f008 fd49 	bl	12b2a <fill_first_frag>
			if (res != FR_OK) return res;
    a098:	b108      	cbz	r0, a09e <dir_register+0xa6>
    a09a:	4680      	mov	r8, r0
    a09c:	e056      	b.n	a14c <dir_register+0x154>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
    a09e:	f04f 32ff 	mov.w	r2, #4294967295
    a0a2:	6b69      	ldr	r1, [r5, #52]	; 0x34
    a0a4:	4628      	mov	r0, r5
    a0a6:	f008 fd28 	bl	12afa <fill_last_frag>
			if (res != FR_OK) return res;
    a0aa:	2800      	cmp	r0, #0
    a0ac:	f040 809e 	bne.w	a1ec <dir_register+0x1f4>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
    a0b0:	68ab      	ldr	r3, [r5, #8]
    a0b2:	b923      	cbnz	r3, a0be <dir_register+0xc6>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
    a0b4:	68f1      	ldr	r1, [r6, #12]
    a0b6:	6930      	ldr	r0, [r6, #16]
    a0b8:	f009 fa63 	bl	13582 <create_xdir>
		return FR_OK;
    a0bc:	e046      	b.n	a14c <dir_register+0x154>
				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
    a0be:	4629      	mov	r1, r5
    a0c0:	4668      	mov	r0, sp
    a0c2:	f009 fc29 	bl	13918 <load_obj_xdir>
				if (res != FR_OK) return res;
    a0c6:	4603      	mov	r3, r0
    a0c8:	b108      	cbz	r0, a0ce <dir_register+0xd6>
    a0ca:	4698      	mov	r8, r3
    a0cc:	e03e      	b.n	a14c <dir_register+0x154>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
    a0ce:	8971      	ldrh	r1, [r6, #10]
    a0d0:	0249      	lsls	r1, r1, #9
    a0d2:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    a0d6:	1852      	adds	r2, r2, r1
    a0d8:	f143 0300 	adc.w	r3, r3, #0
    a0dc:	e9c5 2304 	strd	r2, r3, [r5, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
    a0e0:	6930      	ldr	r0, [r6, #16]
    a0e2:	3038      	adds	r0, #56	; 0x38
    a0e4:	f008 facf 	bl	12686 <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
    a0e8:	6930      	ldr	r0, [r6, #16]
    a0ea:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    a0ee:	3028      	adds	r0, #40	; 0x28
    a0f0:	f008 fac9 	bl	12686 <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;		/* Update the allocation status */
    a0f4:	79eb      	ldrb	r3, [r5, #7]
    a0f6:	6932      	ldr	r2, [r6, #16]
    a0f8:	f043 0301 	orr.w	r3, r3, #1
    a0fc:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
				res = store_xdir(&dj);				/* Store the object status */
    a100:	4668      	mov	r0, sp
    a102:	f009 fc82 	bl	13a0a <store_xdir>
				if (res != FR_OK) return res;
    a106:	4603      	mov	r3, r0
    a108:	2800      	cmp	r0, #0
    a10a:	d0d3      	beq.n	a0b4 <dir_register+0xbc>
    a10c:	e7dd      	b.n	a0ca <dir_register+0xd2>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    a10e:	2f64      	cmp	r7, #100	; 0x64
    a110:	d06e      	beq.n	a1f0 <dir_register+0x1f8>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    a112:	f1b8 0f04 	cmp.w	r8, #4
    a116:	d119      	bne.n	a14c <dir_register+0x154>
		dp->fn[NSFLAG] = sn[NSFLAG];
    a118:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
    a11c:	f885 304b 	strb.w	r3, [r5, #75]	; 0x4b
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
    a120:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
    a124:	f013 0f02 	tst.w	r3, #2
    a128:	d014      	beq.n	a154 <dir_register+0x15c>
    a12a:	340c      	adds	r4, #12
    a12c:	4b33      	ldr	r3, [pc, #204]	; (a1fc <dir_register+0x204>)
    a12e:	fba3 3404 	umull	r3, r4, r3, r4
    a132:	08a4      	lsrs	r4, r4, #2
    a134:	3401      	adds	r4, #1
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
    a136:	4621      	mov	r1, r4
    a138:	4628      	mov	r0, r5
    a13a:	f009 f855 	bl	131e8 <dir_alloc>
	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
    a13e:	4680      	mov	r8, r0
    a140:	b908      	cbnz	r0, a146 <dir_register+0x14e>
    a142:	3c01      	subs	r4, #1
    a144:	d108      	bne.n	a158 <dir_register+0x160>
	if (res == FR_OK) {
    a146:	f1b8 0f00 	cmp.w	r8, #0
    a14a:	d02c      	beq.n	a1a6 <dir_register+0x1ae>
}
    a14c:	4640      	mov	r0, r8
    a14e:	b018      	add	sp, #96	; 0x60
    a150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
    a154:	2401      	movs	r4, #1
    a156:	e7ee      	b.n	a136 <dir_register+0x13e>
		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
    a158:	6b29      	ldr	r1, [r5, #48]	; 0x30
    a15a:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
    a15e:	4628      	mov	r0, r5
    a160:	f008 fdb3 	bl	12cca <dir_sdi>
		if (res == FR_OK) {
    a164:	4680      	mov	r8, r0
    a166:	2800      	cmp	r0, #0
    a168:	d1ed      	bne.n	a146 <dir_register+0x14e>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
    a16a:	f105 0040 	add.w	r0, r5, #64	; 0x40
    a16e:	f008 fad3 	bl	12718 <sum_sfn>
    a172:	4607      	mov	r7, r0
				res = move_window(fs, dp->sect);
    a174:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    a176:	4630      	mov	r0, r6
    a178:	f008 fb58 	bl	1282c <move_window>
				if (res != FR_OK) break;
    a17c:	4680      	mov	r8, r0
    a17e:	2800      	cmp	r0, #0
    a180:	d1e1      	bne.n	a146 <dir_register+0x14e>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
    a182:	463b      	mov	r3, r7
    a184:	b2e2      	uxtb	r2, r4
    a186:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    a188:	68f0      	ldr	r0, [r6, #12]
    a18a:	f7ff f9c9 	bl	9520 <put_lfn>
				fs->wflag = 1;
    a18e:	2301      	movs	r3, #1
    a190:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
    a192:	2100      	movs	r1, #0
    a194:	4628      	mov	r0, r5
    a196:	f008 ffb9 	bl	1310c <dir_next>
			} while (res == FR_OK && --n_ent);
    a19a:	4680      	mov	r8, r0
    a19c:	2800      	cmp	r0, #0
    a19e:	d1d2      	bne.n	a146 <dir_register+0x14e>
    a1a0:	3c01      	subs	r4, #1
    a1a2:	d1e7      	bne.n	a174 <dir_register+0x17c>
    a1a4:	e7cf      	b.n	a146 <dir_register+0x14e>
		res = move_window(fs, dp->sect);
    a1a6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    a1a8:	4630      	mov	r0, r6
    a1aa:	f008 fb3f 	bl	1282c <move_window>
		if (res == FR_OK) {
    a1ae:	4680      	mov	r8, r0
    a1b0:	2800      	cmp	r0, #0
    a1b2:	d1cb      	bne.n	a14c <dir_register+0x154>
__ssp_bos_icheck3(memset, void *, int)
    a1b4:	2220      	movs	r2, #32
    a1b6:	2100      	movs	r1, #0
    a1b8:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    a1ba:	f00a fc50 	bl	14a5e <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
    a1be:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    a1c0:	462b      	mov	r3, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    a1c2:	f853 0f40 	ldr.w	r0, [r3, #64]!
    a1c6:	6859      	ldr	r1, [r3, #4]
    a1c8:	6010      	str	r0, [r2, #0]
    a1ca:	6051      	str	r1, [r2, #4]
    a1cc:	8919      	ldrh	r1, [r3, #8]
    a1ce:	7a9b      	ldrb	r3, [r3, #10]
    a1d0:	8111      	strh	r1, [r2, #8]
    a1d2:	7293      	strb	r3, [r2, #10]
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
    a1d4:	f895 304b 	ldrb.w	r3, [r5, #75]	; 0x4b
    a1d8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    a1da:	f003 0318 	and.w	r3, r3, #24
    a1de:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
    a1e0:	2301      	movs	r3, #1
    a1e2:	70f3      	strb	r3, [r6, #3]
    a1e4:	e7b2      	b.n	a14c <dir_register+0x154>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
    a1e6:	f04f 0806 	mov.w	r8, #6
    a1ea:	e7af      	b.n	a14c <dir_register+0x154>
			if (res != FR_OK) return res;
    a1ec:	4680      	mov	r8, r0
    a1ee:	e7ad      	b.n	a14c <dir_register+0x154>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    a1f0:	f04f 0807 	mov.w	r8, #7
    a1f4:	e7aa      	b.n	a14c <dir_register+0x154>
    a1f6:	bf00      	nop
    a1f8:	88888889 	.word	0x88888889
    a1fc:	4ec4ec4f 	.word	0x4ec4ec4f

0000a200 <sync_fs>:
{
    a200:	b570      	push	{r4, r5, r6, lr}
    a202:	4604      	mov	r4, r0
	res = sync_window(fs);
    a204:	f008 faee 	bl	127e4 <sync_window>
	if (res == FR_OK) {
    a208:	4605      	mov	r5, r0
    a20a:	b948      	cbnz	r0, a220 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
    a20c:	7823      	ldrb	r3, [r4, #0]
    a20e:	2b03      	cmp	r3, #3
    a210:	d008      	beq.n	a224 <sync_fs+0x24>
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
    a212:	2200      	movs	r2, #0
    a214:	4611      	mov	r1, r2
    a216:	7860      	ldrb	r0, [r4, #1]
    a218:	f001 fa56 	bl	b6c8 <disk_ioctl>
    a21c:	b100      	cbz	r0, a220 <sync_fs+0x20>
    a21e:	2501      	movs	r5, #1
}
    a220:	4628      	mov	r0, r5
    a222:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
    a224:	7923      	ldrb	r3, [r4, #4]
    a226:	2b01      	cmp	r3, #1
    a228:	d1f3      	bne.n	a212 <sync_fs+0x12>
			memset(fs->win, 0, sizeof fs->win);
    a22a:	f104 063c 	add.w	r6, r4, #60	; 0x3c
__ssp_bos_icheck3(memset, void *, int)
    a22e:	f44f 7200 	mov.w	r2, #512	; 0x200
    a232:	2100      	movs	r1, #0
    a234:	4630      	mov	r0, r6
    a236:	f00a fc12 	bl	14a5e <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
    a23a:	f64a 2155 	movw	r1, #43605	; 0xaa55
    a23e:	f204 203a 	addw	r0, r4, #570	; 0x23a
    a242:	f008 fa12 	bl	1266a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
    a246:	490f      	ldr	r1, [pc, #60]	; (a284 <sync_fs+0x84>)
    a248:	4630      	mov	r0, r6
    a24a:	f008 fa12 	bl	12672 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
    a24e:	490e      	ldr	r1, [pc, #56]	; (a288 <sync_fs+0x88>)
    a250:	f504 7008 	add.w	r0, r4, #544	; 0x220
    a254:	f008 fa0d 	bl	12672 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
    a258:	69a1      	ldr	r1, [r4, #24]
    a25a:	f504 7009 	add.w	r0, r4, #548	; 0x224
    a25e:	f008 fa08 	bl	12672 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
    a262:	6961      	ldr	r1, [r4, #20]
    a264:	f504 700a 	add.w	r0, r4, #552	; 0x228
    a268:	f008 fa03 	bl	12672 <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
    a26c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    a26e:	3201      	adds	r2, #1
    a270:	63a2      	str	r2, [r4, #56]	; 0x38
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
    a272:	2301      	movs	r3, #1
    a274:	4631      	mov	r1, r6
    a276:	7860      	ldrb	r0, [r4, #1]
    a278:	f001 f9fe 	bl	b678 <disk_write>
			fs->fsi_flag = 0;
    a27c:	2300      	movs	r3, #0
    a27e:	7123      	strb	r3, [r4, #4]
    a280:	e7c7      	b.n	a212 <sync_fs+0x12>
    a282:	bf00      	nop
    a284:	41615252 	.word	0x41615252
    a288:	61417272 	.word	0x61417272

0000a28c <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	BYTE sys,			/* System ID (for only MBR, temp setting) */
	BYTE* buf			/* Working buffer for a sector */
)
{
    a28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a290:	b085      	sub	sp, #20
    a292:	9001      	str	r0, [sp, #4]
    a294:	468b      	mov	fp, r1
    a296:	9200      	str	r2, [sp, #0]
    a298:	469a      	mov	sl, r3
	DWORD sz_drv32, nxt_alloc32, sz_part32;
	BYTE *pte;
	BYTE hd, n_hd, sc, n_sc;

	/* Get physical drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
    a29a:	aa03      	add	r2, sp, #12
    a29c:	2101      	movs	r1, #1
    a29e:	f001 fa13 	bl	b6c8 <disk_ioctl>
    a2a2:	2800      	cmp	r0, #0
    a2a4:	f040 8088 	bne.w	a3b8 <create_partition+0x12c>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{	/* Create partitions in MBR format */
		sz_drv32 = (DWORD)sz_drv;
    a2a8:	f8dd 800c 	ldr.w	r8, [sp, #12]
		n_sc = N_SEC_TRACK;				/* Determine drive CHS without any consideration of the drive geometry */
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
    a2ac:	2408      	movs	r4, #8
    a2ae:	b144      	cbz	r4, a2c2 <create_partition+0x36>
    a2b0:	fbb8 f2f4 	udiv	r2, r8, r4
    a2b4:	f64f 433e 	movw	r3, #64574	; 0xfc3e
    a2b8:	429a      	cmp	r2, r3
    a2ba:	d902      	bls.n	a2c2 <create_partition+0x36>
    a2bc:	0064      	lsls	r4, r4, #1
    a2be:	b2e4      	uxtb	r4, r4
    a2c0:	e7f5      	b.n	a2ae <create_partition+0x22>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
    a2c2:	b904      	cbnz	r4, a2c6 <create_partition+0x3a>
    a2c4:	24ff      	movs	r4, #255	; 0xff
    a2c6:	f44f 7200 	mov.w	r2, #512	; 0x200
    a2ca:	2100      	movs	r1, #0
    a2cc:	4650      	mov	r0, sl
    a2ce:	f00a fbc6 	bl	14a5e <memset>

		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
		pte = buf + MBR_Table;	/* Partition table in the MBR */
    a2d2:	f50a 76df 	add.w	r6, sl, #446	; 0x1be
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
    a2d6:	253f      	movs	r5, #63	; 0x3f
    a2d8:	f04f 0900 	mov.w	r9, #0
    a2dc:	e045      	b.n	a36a <create_partition+0xde>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
    a2de:	4647      	mov	r7, r8
    a2e0:	e054      	b.n	a38c <create_partition+0x100>
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
    a2e2:	eba8 0705 	sub.w	r7, r8, r5
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
    a2e6:	2f00      	cmp	r7, #0
    a2e8:	d056      	beq.n	a398 <create_partition+0x10c>

			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
    a2ea:	4629      	mov	r1, r5
    a2ec:	f106 0008 	add.w	r0, r6, #8
    a2f0:	f008 f9bf 	bl	12672 <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
    a2f4:	4639      	mov	r1, r7
    a2f6:	f106 000c 	add.w	r0, r6, #12
    a2fa:	f008 f9ba 	bl	12672 <st_dword>
			pte[PTE_System] = sys;					/* System type */
    a2fe:	9b00      	ldr	r3, [sp, #0]
    a300:	7133      	strb	r3, [r6, #4]

			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
    a302:	4a2f      	ldr	r2, [pc, #188]	; (a3c0 <create_partition+0x134>)
    a304:	fba2 1305 	umull	r1, r3, r2, r5
    a308:	1ae9      	subs	r1, r5, r3
    a30a:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    a30e:	095b      	lsrs	r3, r3, #5
    a310:	fbb3 f1f4 	udiv	r1, r3, r4
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
    a314:	fb04 3011 	mls	r0, r4, r1, r3
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
    a318:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
    a31c:	1aeb      	subs	r3, r5, r3
    a31e:	b2db      	uxtb	r3, r3
    a320:	3301      	adds	r3, #1
    a322:	b2db      	uxtb	r3, r3
			pte[PTE_StHead] = hd;
    a324:	7070      	strb	r0, [r6, #1]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
    a326:	0888      	lsrs	r0, r1, #2
    a328:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    a32c:	4303      	orrs	r3, r0
    a32e:	70b3      	strb	r3, [r6, #2]
			pte[PTE_StCyl] = (BYTE)cy;
    a330:	70f1      	strb	r1, [r6, #3]

			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
    a332:	443d      	add	r5, r7
    a334:	1e6b      	subs	r3, r5, #1
    a336:	fba2 1203 	umull	r1, r2, r2, r3
    a33a:	1a99      	subs	r1, r3, r2
    a33c:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    a340:	0952      	lsrs	r2, r2, #5
    a342:	fbb2 f1f4 	udiv	r1, r2, r4
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
    a346:	fb04 2011 	mls	r0, r4, r1, r2
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
    a34a:	ebc2 1282 	rsb	r2, r2, r2, lsl #6
    a34e:	1a9a      	subs	r2, r3, r2
    a350:	b2d2      	uxtb	r2, r2
    a352:	3201      	adds	r2, #1
    a354:	b2d2      	uxtb	r2, r2
			pte[PTE_EdHead] = hd;
    a356:	7170      	strb	r0, [r6, #5]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
    a358:	088b      	lsrs	r3, r1, #2
    a35a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a35e:	431a      	orrs	r2, r3
    a360:	71b2      	strb	r2, [r6, #6]
			pte[PTE_EdCyl] = (BYTE)cy;
    a362:	71f1      	strb	r1, [r6, #7]

			pte += SZ_PTE;		/* Next entry */
    a364:	3610      	adds	r6, #16
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
    a366:	f109 0901 	add.w	r9, r9, #1
    a36a:	f1b9 0f03 	cmp.w	r9, #3
    a36e:	d813      	bhi.n	a398 <create_partition+0x10c>
    a370:	b195      	cbz	r5, a398 <create_partition+0x10c>
    a372:	4545      	cmp	r5, r8
    a374:	d210      	bcs.n	a398 <create_partition+0x10c>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
    a376:	f85b 7029 	ldr.w	r7, [fp, r9, lsl #2]
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
    a37a:	2f64      	cmp	r7, #100	; 0x64
    a37c:	d806      	bhi.n	a38c <create_partition+0x100>
    a37e:	d0ae      	beq.n	a2de <create_partition+0x52>
    a380:	4b10      	ldr	r3, [pc, #64]	; (a3c4 <create_partition+0x138>)
    a382:	fba3 2308 	umull	r2, r3, r3, r8
    a386:	095b      	lsrs	r3, r3, #5
    a388:	fb03 f707 	mul.w	r7, r3, r7
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
    a38c:	19eb      	adds	r3, r5, r7
    a38e:	4543      	cmp	r3, r8
    a390:	d8a7      	bhi.n	a2e2 <create_partition+0x56>
    a392:	42ab      	cmp	r3, r5
    a394:	d2a7      	bcs.n	a2e6 <create_partition+0x5a>
    a396:	e7a4      	b.n	a2e2 <create_partition+0x56>
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
    a398:	f64a 2155 	movw	r1, #43605	; 0xaa55
    a39c:	f50a 70ff 	add.w	r0, sl, #510	; 0x1fe
    a3a0:	f008 f963 	bl	1266a <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
    a3a4:	2301      	movs	r3, #1
    a3a6:	2200      	movs	r2, #0
    a3a8:	4651      	mov	r1, sl
    a3aa:	9801      	ldr	r0, [sp, #4]
    a3ac:	f001 f964 	bl	b678 <disk_write>
    a3b0:	b920      	cbnz	r0, a3bc <create_partition+0x130>
	}

	return FR_OK;
}
    a3b2:	b005      	add	sp, #20
    a3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
    a3b8:	2001      	movs	r0, #1
    a3ba:	e7fa      	b.n	a3b2 <create_partition+0x126>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
    a3bc:	2001      	movs	r0, #1
    a3be:	e7f8      	b.n	a3b2 <create_partition+0x126>
    a3c0:	04104105 	.word	0x04104105
    a3c4:	51eb851f 	.word	0x51eb851f

0000a3c8 <f_mount>:
{
    a3c8:	b510      	push	{r4, lr}
    a3ca:	b084      	sub	sp, #16
    a3cc:	9001      	str	r0, [sp, #4]
    a3ce:	9100      	str	r1, [sp, #0]
    a3d0:	4614      	mov	r4, r2
	const TCHAR *rp = path;
    a3d2:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
    a3d4:	a803      	add	r0, sp, #12
    a3d6:	f7ff f8df 	bl	9598 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    a3da:	2800      	cmp	r0, #0
    a3dc:	db17      	blt.n	a40e <f_mount+0x46>
	cfs = FatFs[vol];					/* Pointer to fs object */
    a3de:	4b0d      	ldr	r3, [pc, #52]	; (a414 <f_mount+0x4c>)
    a3e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	if (cfs) {
    a3e4:	b10b      	cbz	r3, a3ea <f_mount+0x22>
		cfs->fs_type = 0;				/* Clear old fs object */
    a3e6:	2200      	movs	r2, #0
    a3e8:	701a      	strb	r2, [r3, #0]
	if (fs) {
    a3ea:	9b01      	ldr	r3, [sp, #4]
    a3ec:	b10b      	cbz	r3, a3f2 <f_mount+0x2a>
		fs->fs_type = 0;				/* Clear new fs object */
    a3ee:	2200      	movs	r2, #0
    a3f0:	701a      	strb	r2, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
    a3f2:	4b08      	ldr	r3, [pc, #32]	; (a414 <f_mount+0x4c>)
    a3f4:	9a01      	ldr	r2, [sp, #4]
    a3f6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
    a3fa:	b914      	cbnz	r4, a402 <f_mount+0x3a>
    a3fc:	4620      	mov	r0, r4
}
    a3fe:	b004      	add	sp, #16
    a400:	bd10      	pop	{r4, pc}
	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
    a402:	2200      	movs	r2, #0
    a404:	a901      	add	r1, sp, #4
    a406:	4668      	mov	r0, sp
    a408:	f7ff f98e 	bl	9728 <mount_volume>
	LEAVE_FF(fs, res);
    a40c:	e7f7      	b.n	a3fe <f_mount+0x36>
	if (vol < 0) return FR_INVALID_DRIVE;
    a40e:	200b      	movs	r0, #11
    a410:	e7f5      	b.n	a3fe <f_mount+0x36>
    a412:	bf00      	nop
    a414:	20000ec8 	.word	0x20000ec8

0000a418 <f_open>:
{
    a418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a41c:	b098      	sub	sp, #96	; 0x60
    a41e:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
    a420:	2800      	cmp	r0, #0
    a422:	f000 8152 	beq.w	a6ca <f_open+0x2b2>
    a426:	4615      	mov	r5, r2
    a428:	4682      	mov	sl, r0
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
    a42a:	f002 063f 	and.w	r6, r2, #63	; 0x3f
	res = mount_volume(&path, &fs, mode);
    a42e:	4632      	mov	r2, r6
    a430:	a903      	add	r1, sp, #12
    a432:	a801      	add	r0, sp, #4
    a434:	f7ff f978 	bl	9728 <mount_volume>
	if (res == FR_OK) {
    a438:	4604      	mov	r4, r0
    a43a:	b138      	cbz	r0, a44c <f_open+0x34>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
    a43c:	b114      	cbz	r4, a444 <f_open+0x2c>
    a43e:	2300      	movs	r3, #0
    a440:	f8ca 3000 	str.w	r3, [sl]
}
    a444:	4620      	mov	r0, r4
    a446:	b018      	add	sp, #96	; 0x60
    a448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
    a44c:	9b03      	ldr	r3, [sp, #12]
    a44e:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
    a450:	9901      	ldr	r1, [sp, #4]
    a452:	a804      	add	r0, sp, #16
    a454:	f009 fa06 	bl	13864 <follow_path>
		if (res == FR_OK) {
    a458:	4604      	mov	r4, r0
    a45a:	b918      	cbnz	r0, a464 <f_open+0x4c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
    a45c:	f99d 305b 	ldrsb.w	r3, [sp, #91]	; 0x5b
    a460:	2b00      	cmp	r3, #0
    a462:	db4c      	blt.n	a4fe <f_open+0xe6>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    a464:	f015 0f1c 	tst.w	r5, #28
    a468:	f000 8096 	beq.w	a598 <f_open+0x180>
			if (res != FR_OK) {					/* No file, create new */
    a46c:	2c00      	cmp	r4, #0
    a46e:	d04d      	beq.n	a50c <f_open+0xf4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
    a470:	2c04      	cmp	r4, #4
    a472:	d046      	beq.n	a502 <f_open+0xea>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    a474:	f046 0608 	orr.w	r6, r6, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
    a478:	2c00      	cmp	r4, #0
    a47a:	f040 809c 	bne.w	a5b6 <f_open+0x19e>
    a47e:	f016 0f08 	tst.w	r6, #8
    a482:	f000 8098 	beq.w	a5b6 <f_open+0x19e>
				if (fs->fs_type == FS_EXFAT) {
    a486:	9803      	ldr	r0, [sp, #12]
    a488:	7803      	ldrb	r3, [r0, #0]
    a48a:	2b04      	cmp	r3, #4
    a48c:	d048      	beq.n	a520 <f_open+0x108>
					st_dword(dj.dir + DIR_CrtTime, tm);
    a48e:	4d90      	ldr	r5, [pc, #576]	; (a6d0 <f_open+0x2b8>)
    a490:	4629      	mov	r1, r5
    a492:	9813      	ldr	r0, [sp, #76]	; 0x4c
    a494:	300e      	adds	r0, #14
    a496:	f008 f8ec 	bl	12672 <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
    a49a:	4629      	mov	r1, r5
    a49c:	9813      	ldr	r0, [sp, #76]	; 0x4c
    a49e:	3016      	adds	r0, #22
    a4a0:	f008 f8e7 	bl	12672 <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
    a4a4:	9f03      	ldr	r7, [sp, #12]
    a4a6:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
    a4aa:	4641      	mov	r1, r8
    a4ac:	4638      	mov	r0, r7
    a4ae:	f008 f90d 	bl	126cc <ld_clust>
    a4b2:	4605      	mov	r5, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
    a4b4:	2320      	movs	r3, #32
    a4b6:	f888 300b 	strb.w	r3, [r8, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
    a4ba:	2200      	movs	r2, #0
    a4bc:	9913      	ldr	r1, [sp, #76]	; 0x4c
    a4be:	4638      	mov	r0, r7
    a4c0:	f008 f917 	bl	126f2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
    a4c4:	2100      	movs	r1, #0
    a4c6:	9813      	ldr	r0, [sp, #76]	; 0x4c
    a4c8:	301c      	adds	r0, #28
    a4ca:	f008 f8d2 	bl	12672 <st_dword>
					fs->wflag = 1;
    a4ce:	9b03      	ldr	r3, [sp, #12]
    a4d0:	2201      	movs	r2, #1
    a4d2:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
    a4d4:	2d00      	cmp	r5, #0
    a4d6:	d06e      	beq.n	a5b6 <f_open+0x19e>
						sc = fs->winsect;
    a4d8:	9b03      	ldr	r3, [sp, #12]
    a4da:	6b9f      	ldr	r7, [r3, #56]	; 0x38
						res = remove_chain(&dj.obj, cl, 0);
    a4dc:	2200      	movs	r2, #0
    a4de:	4629      	mov	r1, r5
    a4e0:	a804      	add	r0, sp, #16
    a4e2:	f008 fd3d 	bl	12f60 <remove_chain>
						if (res == FR_OK) {
    a4e6:	4604      	mov	r4, r0
    a4e8:	2800      	cmp	r0, #0
    a4ea:	d164      	bne.n	a5b6 <f_open+0x19e>
							res = move_window(fs, sc);
    a4ec:	4639      	mov	r1, r7
    a4ee:	9803      	ldr	r0, [sp, #12]
    a4f0:	f008 f99c 	bl	1282c <move_window>
    a4f4:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
    a4f6:	3d01      	subs	r5, #1
    a4f8:	9b03      	ldr	r3, [sp, #12]
    a4fa:	615d      	str	r5, [r3, #20]
    a4fc:	e05b      	b.n	a5b6 <f_open+0x19e>
				res = FR_INVALID_NAME;
    a4fe:	2406      	movs	r4, #6
    a500:	e7b0      	b.n	a464 <f_open+0x4c>
					res = dir_register(&dj);
    a502:	a804      	add	r0, sp, #16
    a504:	f7ff fd78 	bl	9ff8 <dir_register>
    a508:	4604      	mov	r4, r0
    a50a:	e7b3      	b.n	a474 <f_open+0x5c>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    a50c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a510:	f013 0f11 	tst.w	r3, #17
    a514:	d14e      	bne.n	a5b4 <f_open+0x19c>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    a516:	f015 0f04 	tst.w	r5, #4
    a51a:	d0ad      	beq.n	a478 <f_open+0x60>
    a51c:	2408      	movs	r4, #8
    a51e:	e04a      	b.n	a5b6 <f_open+0x19e>
					fp->obj.fs = fs;
    a520:	f8ca 0000 	str.w	r0, [sl]
					init_alloc_info(fs, &fp->obj);
    a524:	4651      	mov	r1, sl
    a526:	f008 f923 	bl	12770 <init_alloc_info>
					memset(fs->dirbuf + 2, 0, 30);	/* Clear 85 entry except for NumSec */
    a52a:	9b03      	ldr	r3, [sp, #12]
    a52c:	6918      	ldr	r0, [r3, #16]
    a52e:	221e      	movs	r2, #30
    a530:	2100      	movs	r1, #0
    a532:	3002      	adds	r0, #2
    a534:	f00a fa93 	bl	14a5e <memset>
					memset(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
    a538:	9903      	ldr	r1, [sp, #12]
    a53a:	690a      	ldr	r2, [r1, #16]
    a53c:	2300      	movs	r3, #0
    a53e:	f8c2 3026 	str.w	r3, [r2, #38]	; 0x26
    a542:	f8c2 302a 	str.w	r3, [r2, #42]	; 0x2a
    a546:	f8c2 302e 	str.w	r3, [r2, #46]	; 0x2e
    a54a:	f8c2 3032 	str.w	r3, [r2, #50]	; 0x32
    a54e:	f8c2 3036 	str.w	r3, [r2, #54]	; 0x36
    a552:	f8c2 303a 	str.w	r3, [r2, #58]	; 0x3a
    a556:	87d3      	strh	r3, [r2, #62]	; 0x3e
					fs->dirbuf[XDIR_Attr] = AM_ARC;
    a558:	690b      	ldr	r3, [r1, #16]
    a55a:	2220      	movs	r2, #32
    a55c:	711a      	strb	r2, [r3, #4]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
    a55e:	6908      	ldr	r0, [r1, #16]
    a560:	495b      	ldr	r1, [pc, #364]	; (a6d0 <f_open+0x2b8>)
    a562:	3008      	adds	r0, #8
    a564:	f008 f885 	bl	12672 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 1;
    a568:	9b03      	ldr	r3, [sp, #12]
    a56a:	691b      	ldr	r3, [r3, #16]
    a56c:	2201      	movs	r2, #1
    a56e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					res = store_xdir(&dj);
    a572:	a804      	add	r0, sp, #16
    a574:	f009 fa49 	bl	13a0a <store_xdir>
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
    a578:	4604      	mov	r4, r0
    a57a:	b9e0      	cbnz	r0, a5b6 <f_open+0x19e>
    a57c:	f8da 1008 	ldr.w	r1, [sl, #8]
    a580:	b1c9      	cbz	r1, a5b6 <f_open+0x19e>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
    a582:	2200      	movs	r2, #0
    a584:	4650      	mov	r0, sl
    a586:	f008 fceb 	bl	12f60 <remove_chain>
    a58a:	4604      	mov	r4, r0
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
    a58c:	f8da 3008 	ldr.w	r3, [sl, #8]
    a590:	3b01      	subs	r3, #1
    a592:	9a03      	ldr	r2, [sp, #12]
    a594:	6153      	str	r3, [r2, #20]
    a596:	e00e      	b.n	a5b6 <f_open+0x19e>
			if (res == FR_OK) {					/* Is the object exsiting? */
    a598:	b96c      	cbnz	r4, a5b6 <f_open+0x19e>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
    a59a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a59e:	f013 0f10 	tst.w	r3, #16
    a5a2:	d14d      	bne.n	a640 <f_open+0x228>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
    a5a4:	f015 0f02 	tst.w	r5, #2
    a5a8:	d005      	beq.n	a5b6 <f_open+0x19e>
    a5aa:	f013 0f01 	tst.w	r3, #1
    a5ae:	d002      	beq.n	a5b6 <f_open+0x19e>
						res = FR_DENIED;
    a5b0:	2407      	movs	r4, #7
    a5b2:	e00d      	b.n	a5d0 <f_open+0x1b8>
					res = FR_DENIED;
    a5b4:	2407      	movs	r4, #7
		if (res == FR_OK) {
    a5b6:	b95c      	cbnz	r4, a5d0 <f_open+0x1b8>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
    a5b8:	f016 0f08 	tst.w	r6, #8
    a5bc:	d001      	beq.n	a5c2 <f_open+0x1aa>
    a5be:	f046 0640 	orr.w	r6, r6, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
    a5c2:	9b03      	ldr	r3, [sp, #12]
    a5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a5c6:	f8ca 3048 	str.w	r3, [sl, #72]	; 0x48
			fp->dir_ptr = dj.dir;
    a5ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a5cc:	f8ca 304c 	str.w	r3, [sl, #76]	; 0x4c
		if (res == FR_OK) {
    a5d0:	2c00      	cmp	r4, #0
    a5d2:	f47f af33 	bne.w	a43c <f_open+0x24>
			if (fs->fs_type == FS_EXFAT) {
    a5d6:	9803      	ldr	r0, [sp, #12]
    a5d8:	7803      	ldrb	r3, [r0, #0]
    a5da:	2b04      	cmp	r3, #4
    a5dc:	d032      	beq.n	a644 <f_open+0x22c>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
    a5de:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    a5e0:	4629      	mov	r1, r5
    a5e2:	f008 f873 	bl	126cc <ld_clust>
    a5e6:	f8ca 0008 	str.w	r0, [sl, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
    a5ea:	f105 001c 	add.w	r0, r5, #28
    a5ee:	f008 f80a 	bl	12606 <ld_dword>
    a5f2:	f8ca 0010 	str.w	r0, [sl, #16]
    a5f6:	2300      	movs	r3, #0
    a5f8:	f8ca 3014 	str.w	r3, [sl, #20]
			fp->obj.fs = fs;	/* Validate the file object */
    a5fc:	9b03      	ldr	r3, [sp, #12]
    a5fe:	f8ca 3000 	str.w	r3, [sl]
			fp->obj.id = fs->id;
    a602:	88da      	ldrh	r2, [r3, #6]
    a604:	f8aa 2004 	strh.w	r2, [sl, #4]
			fp->flag = mode;	/* Set file access mode */
    a608:	f88a 6030 	strb.w	r6, [sl, #48]	; 0x30
			fp->err = 0;		/* Clear error flag */
    a60c:	2200      	movs	r2, #0
    a60e:	f88a 2031 	strb.w	r2, [sl, #49]	; 0x31
			fp->sect = 0;		/* Invalidate current data sector */
    a612:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
			fp->fptr = 0;		/* Set file pointer top of the file */
    a616:	2000      	movs	r0, #0
    a618:	2100      	movs	r1, #0
    a61a:	e9ca 010e 	strd	r0, r1, [sl, #56]	; 0x38
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
    a61e:	f016 0f20 	tst.w	r6, #32
    a622:	f43f af0b 	beq.w	a43c <f_open+0x24>
    a626:	e9da 6704 	ldrd	r6, r7, [sl, #16]
    a62a:	ea56 0207 	orrs.w	r2, r6, r7
    a62e:	f43f af05 	beq.w	a43c <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
    a632:	e9ca 670e 	strd	r6, r7, [sl, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
    a636:	895d      	ldrh	r5, [r3, #10]
    a638:	026d      	lsls	r5, r5, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
    a63a:	f8da 1008 	ldr.w	r1, [sl, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    a63e:	e01a      	b.n	a676 <f_open+0x25e>
					res = FR_NO_FILE;
    a640:	2404      	movs	r4, #4
    a642:	e7c5      	b.n	a5d0 <f_open+0x1b8>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
    a644:	9b06      	ldr	r3, [sp, #24]
    a646:	f8ca 3020 	str.w	r3, [sl, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
    a64a:	9b08      	ldr	r3, [sp, #32]
    a64c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    a650:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a654:	4313      	orrs	r3, r2
    a656:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
    a65a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a65c:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
				init_alloc_info(fs, &fp->obj);
    a660:	4651      	mov	r1, sl
    a662:	f008 f885 	bl	12770 <init_alloc_info>
    a666:	e7c9      	b.n	a5fc <f_open+0x1e4>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    a668:	f1b1 3fff 	cmp.w	r1, #4294967295
    a66c:	d013      	beq.n	a696 <f_open+0x27e>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    a66e:	ebb6 0608 	subs.w	r6, r6, r8
    a672:	eb67 0709 	sbc.w	r7, r7, r9
    a676:	b984      	cbnz	r4, a69a <f_open+0x282>
    a678:	46a8      	mov	r8, r5
    a67a:	f04f 0900 	mov.w	r9, #0
    a67e:	45b9      	cmp	r9, r7
    a680:	bf08      	it	eq
    a682:	42b5      	cmpeq	r5, r6
    a684:	d209      	bcs.n	a69a <f_open+0x282>
					clst = get_fat(&fp->obj, clst);
    a686:	4650      	mov	r0, sl
    a688:	f008 fa68 	bl	12b5c <get_fat>
    a68c:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
    a68e:	2801      	cmp	r0, #1
    a690:	d8ea      	bhi.n	a668 <f_open+0x250>
    a692:	2402      	movs	r4, #2
    a694:	e7e8      	b.n	a668 <f_open+0x250>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    a696:	2401      	movs	r4, #1
    a698:	e7e9      	b.n	a66e <f_open+0x256>
				fp->clust = clst;
    a69a:	f8ca 1040 	str.w	r1, [sl, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
    a69e:	2c00      	cmp	r4, #0
    a6a0:	f47f aecc 	bne.w	a43c <f_open+0x24>
    a6a4:	f3c6 0208 	ubfx	r2, r6, #0, #9
    a6a8:	2300      	movs	r3, #0
    a6aa:	4313      	orrs	r3, r2
    a6ac:	f43f aec6 	beq.w	a43c <f_open+0x24>
					sc = clst2sect(fs, clst);
    a6b0:	9803      	ldr	r0, [sp, #12]
    a6b2:	f007 ffff 	bl	126b4 <clst2sect>
					if (sc == 0) {
    a6b6:	b130      	cbz	r0, a6c6 <f_open+0x2ae>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
    a6b8:	0a73      	lsrs	r3, r6, #9
    a6ba:	ea43 53c7 	orr.w	r3, r3, r7, lsl #23
    a6be:	4403      	add	r3, r0
    a6c0:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
    a6c4:	e6ba      	b.n	a43c <f_open+0x24>
						res = FR_INT_ERR;
    a6c6:	2402      	movs	r4, #2
    a6c8:	e6b9      	b.n	a43e <f_open+0x26>
	if (!fp) return FR_INVALID_OBJECT;
    a6ca:	2409      	movs	r4, #9
    a6cc:	e6ba      	b.n	a444 <f_open+0x2c>
    a6ce:	bf00      	nop
    a6d0:	50210000 	.word	0x50210000

0000a6d4 <f_sync>:
{
    a6d4:	b530      	push	{r4, r5, lr}
    a6d6:	b097      	sub	sp, #92	; 0x5c
    a6d8:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
    a6da:	a915      	add	r1, sp, #84	; 0x54
    a6dc:	f008 f85f 	bl	1279e <validate>
	if (res == FR_OK) {
    a6e0:	b968      	cbnz	r0, a6fe <f_sync+0x2a>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
    a6e2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    a6e6:	f013 0f40 	tst.w	r3, #64	; 0x40
    a6ea:	d008      	beq.n	a6fe <f_sync+0x2a>
			if (fs->fs_type == FS_EXFAT) {
    a6ec:	9815      	ldr	r0, [sp, #84]	; 0x54
    a6ee:	7803      	ldrb	r3, [r0, #0]
    a6f0:	2b04      	cmp	r3, #4
    a6f2:	d006      	beq.n	a702 <f_sync+0x2e>
				res = move_window(fs, fp->dir_sect);
    a6f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    a6f6:	f008 f899 	bl	1282c <move_window>
				if (res == FR_OK) {
    a6fa:	2800      	cmp	r0, #0
    a6fc:	d051      	beq.n	a7a2 <f_sync+0xce>
}
    a6fe:	b017      	add	sp, #92	; 0x5c
    a700:	bd30      	pop	{r4, r5, pc}
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
    a702:	4620      	mov	r0, r4
    a704:	f008 fa11 	bl	12b2a <fill_first_frag>
				if (res == FR_OK) {
    a708:	2800      	cmp	r0, #0
    a70a:	d043      	beq.n	a794 <f_sync+0xc0>
				if (res == FR_OK) {
    a70c:	2800      	cmp	r0, #0
    a70e:	d1f6      	bne.n	a6fe <f_sync+0x2a>
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
    a710:	4621      	mov	r1, r4
    a712:	4668      	mov	r0, sp
    a714:	f009 f900 	bl	13918 <load_obj_xdir>
					if (res == FR_OK) {
    a718:	2800      	cmp	r0, #0
    a71a:	d1f0      	bne.n	a6fe <f_sync+0x2a>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
    a71c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a71e:	6919      	ldr	r1, [r3, #16]
    a720:	790a      	ldrb	r2, [r1, #4]
    a722:	f042 0220 	orr.w	r2, r2, #32
    a726:	710a      	strb	r2, [r1, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
    a728:	79e2      	ldrb	r2, [r4, #7]
    a72a:	6919      	ldr	r1, [r3, #16]
    a72c:	f042 0201 	orr.w	r2, r2, #1
    a730:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
    a734:	6918      	ldr	r0, [r3, #16]
    a736:	68a1      	ldr	r1, [r4, #8]
    a738:	3034      	adds	r0, #52	; 0x34
    a73a:	f007 ff9a 	bl	12672 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
    a73e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a740:	6918      	ldr	r0, [r3, #16]
    a742:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    a746:	3038      	adds	r0, #56	; 0x38
    a748:	f007 ff9d 	bl	12686 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
    a74c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a74e:	6918      	ldr	r0, [r3, #16]
    a750:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    a754:	3028      	adds	r0, #40	; 0x28
    a756:	f007 ff96 	bl	12686 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
    a75a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a75c:	6918      	ldr	r0, [r3, #16]
    a75e:	4924      	ldr	r1, [pc, #144]	; (a7f0 <f_sync+0x11c>)
    a760:	300c      	adds	r0, #12
    a762:	f007 ff86 	bl	12672 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
    a766:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a768:	691a      	ldr	r2, [r3, #16]
    a76a:	2100      	movs	r1, #0
    a76c:	7551      	strb	r1, [r2, #21]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
    a76e:	6918      	ldr	r0, [r3, #16]
    a770:	3010      	adds	r0, #16
    a772:	f007 ff7e 	bl	12672 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
    a776:	4668      	mov	r0, sp
    a778:	f009 f947 	bl	13a0a <store_xdir>
						if (res == FR_OK) {
    a77c:	2800      	cmp	r0, #0
    a77e:	d1be      	bne.n	a6fe <f_sync+0x2a>
							res = sync_fs(fs);
    a780:	9815      	ldr	r0, [sp, #84]	; 0x54
    a782:	f7ff fd3d 	bl	a200 <sync_fs>
							fp->flag &= (BYTE)~FA_MODIFIED;
    a786:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    a78a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    a78e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
					FREE_NAMBUF();
    a792:	e7b4      	b.n	a6fe <f_sync+0x2a>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
    a794:	f04f 32ff 	mov.w	r2, #4294967295
    a798:	6c21      	ldr	r1, [r4, #64]	; 0x40
    a79a:	4620      	mov	r0, r4
    a79c:	f008 f9ad 	bl	12afa <fill_last_frag>
    a7a0:	e7b4      	b.n	a70c <f_sync+0x38>
					dir = fp->dir_ptr;
    a7a2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
    a7a4:	7aeb      	ldrb	r3, [r5, #11]
    a7a6:	f043 0320 	orr.w	r3, r3, #32
    a7aa:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
    a7ac:	68a2      	ldr	r2, [r4, #8]
    a7ae:	4629      	mov	r1, r5
    a7b0:	6820      	ldr	r0, [r4, #0]
    a7b2:	f007 ff9e 	bl	126f2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
    a7b6:	6921      	ldr	r1, [r4, #16]
    a7b8:	f105 001c 	add.w	r0, r5, #28
    a7bc:	f007 ff59 	bl	12672 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
    a7c0:	490b      	ldr	r1, [pc, #44]	; (a7f0 <f_sync+0x11c>)
    a7c2:	f105 0016 	add.w	r0, r5, #22
    a7c6:	f007 ff54 	bl	12672 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
    a7ca:	2100      	movs	r1, #0
    a7cc:	f105 0012 	add.w	r0, r5, #18
    a7d0:	f007 ff4b 	bl	1266a <st_word>
					fs->wflag = 1;
    a7d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a7d6:	2201      	movs	r2, #1
    a7d8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
    a7da:	9815      	ldr	r0, [sp, #84]	; 0x54
    a7dc:	f7ff fd10 	bl	a200 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
    a7e0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    a7e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    a7e8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    a7ec:	e787      	b.n	a6fe <f_sync+0x2a>
    a7ee:	bf00      	nop
    a7f0:	50210000 	.word	0x50210000

0000a7f4 <f_mkdir>:
{
    a7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a7f6:	b0a5      	sub	sp, #148	; 0x94
    a7f8:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    a7fa:	2202      	movs	r2, #2
    a7fc:	a903      	add	r1, sp, #12
    a7fe:	a801      	add	r0, sp, #4
    a800:	f7fe ff92 	bl	9728 <mount_volume>
	if (res == FR_OK) {
    a804:	4604      	mov	r4, r0
    a806:	b110      	cbz	r0, a80e <f_mkdir+0x1a>
}
    a808:	4620      	mov	r0, r4
    a80a:	b025      	add	sp, #148	; 0x94
    a80c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dj.obj.fs = fs;
    a80e:	9b03      	ldr	r3, [sp, #12]
    a810:	9310      	str	r3, [sp, #64]	; 0x40
		res = follow_path(&dj, path);			/* Follow the file path */
    a812:	9901      	ldr	r1, [sp, #4]
    a814:	a810      	add	r0, sp, #64	; 0x40
    a816:	f009 f825 	bl	13864 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    a81a:	2800      	cmp	r0, #0
    a81c:	f000 80a4 	beq.w	a968 <f_mkdir+0x174>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
    a820:	2804      	cmp	r0, #4
    a822:	d001      	beq.n	a828 <f_mkdir+0x34>
		res = follow_path(&dj, path);			/* Follow the file path */
    a824:	4604      	mov	r4, r0
    a826:	e7ef      	b.n	a808 <f_mkdir+0x14>
			sobj.fs = fs;						/* New object id to create a new chain */
    a828:	9b03      	ldr	r3, [sp, #12]
    a82a:	9304      	str	r3, [sp, #16]
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    a82c:	2100      	movs	r1, #0
    a82e:	a804      	add	r0, sp, #16
    a830:	f008 faab 	bl	12d8a <create_chain>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    a834:	4605      	mov	r5, r0
    a836:	b900      	cbnz	r0, a83a <f_mkdir+0x46>
    a838:	2407      	movs	r4, #7
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    a83a:	2d01      	cmp	r5, #1
    a83c:	d021      	beq.n	a882 <f_mkdir+0x8e>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    a83e:	f1b5 3fff 	cmp.w	r5, #4294967295
    a842:	d063      	beq.n	a90c <f_mkdir+0x118>
			if (res == FR_OK) {
    a844:	b1fc      	cbz	r4, a886 <f_mkdir+0x92>
			if (res == FR_OK) {
    a846:	2c00      	cmp	r4, #0
    a848:	f040 8088 	bne.w	a95c <f_mkdir+0x168>
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
    a84c:	9b03      	ldr	r3, [sp, #12]
    a84e:	781a      	ldrb	r2, [r3, #0]
    a850:	2a04      	cmp	r2, #4
    a852:	d05d      	beq.n	a910 <f_mkdir+0x11c>
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    a854:	4945      	ldr	r1, [pc, #276]	; (a96c <f_mkdir+0x178>)
    a856:	981f      	ldr	r0, [sp, #124]	; 0x7c
    a858:	3016      	adds	r0, #22
    a85a:	f007 ff0a 	bl	12672 <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    a85e:	462a      	mov	r2, r5
    a860:	991f      	ldr	r1, [sp, #124]	; 0x7c
    a862:	9803      	ldr	r0, [sp, #12]
    a864:	f007 ff45 	bl	126f2 <st_clust>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    a868:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    a86a:	2210      	movs	r2, #16
    a86c:	72da      	strb	r2, [r3, #11]
					fs->wflag = 1;
    a86e:	9b03      	ldr	r3, [sp, #12]
    a870:	2201      	movs	r2, #1
    a872:	70da      	strb	r2, [r3, #3]
				if (res == FR_OK) {
    a874:	2c00      	cmp	r4, #0
    a876:	d1c7      	bne.n	a808 <f_mkdir+0x14>
					res = sync_fs(fs);
    a878:	9803      	ldr	r0, [sp, #12]
    a87a:	f7ff fcc1 	bl	a200 <sync_fs>
    a87e:	4604      	mov	r4, r0
    a880:	e7c2      	b.n	a808 <f_mkdir+0x14>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    a882:	2402      	movs	r4, #2
    a884:	e7db      	b.n	a83e <f_mkdir+0x4a>
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    a886:	4629      	mov	r1, r5
    a888:	9803      	ldr	r0, [sp, #12]
    a88a:	f008 fc17 	bl	130bc <dir_clear>
				if (res == FR_OK) {
    a88e:	4604      	mov	r4, r0
    a890:	2800      	cmp	r0, #0
    a892:	d1d8      	bne.n	a846 <f_mkdir+0x52>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
    a894:	9803      	ldr	r0, [sp, #12]
    a896:	7803      	ldrb	r3, [r0, #0]
    a898:	2b04      	cmp	r3, #4
    a89a:	d032      	beq.n	a902 <f_mkdir+0x10e>
    a89c:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
    a8a0:	63c3      	str	r3, [r0, #60]	; 0x3c
    a8a2:	6403      	str	r3, [r0, #64]	; 0x40
    a8a4:	f8c0 3043 	str.w	r3, [r0, #67]	; 0x43
						fs->win[DIR_Name] = '.';
    a8a8:	262e      	movs	r6, #46	; 0x2e
    a8aa:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
						fs->win[DIR_Attr] = AM_DIR;
    a8ae:	2310      	movs	r3, #16
    a8b0:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
						st_dword(fs->win + DIR_ModTime, tm);
    a8b4:	492d      	ldr	r1, [pc, #180]	; (a96c <f_mkdir+0x178>)
    a8b6:	3052      	adds	r0, #82	; 0x52
    a8b8:	f007 fedb 	bl	12672 <st_dword>
						st_clust(fs, fs->win, dcl);
    a8bc:	9803      	ldr	r0, [sp, #12]
    a8be:	462a      	mov	r2, r5
    a8c0:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    a8c4:	f007 ff15 	bl	126f2 <st_clust>
						memcpy(fs->win + SZDIRE, fs->win, SZDIRE);	/* Create ".." entry */
    a8c8:	9803      	ldr	r0, [sp, #12]
    a8ca:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    a8cc:	f853 7f3c 	ldr.w	r7, [r3, #60]!
    a8d0:	685c      	ldr	r4, [r3, #4]
    a8d2:	6899      	ldr	r1, [r3, #8]
    a8d4:	68da      	ldr	r2, [r3, #12]
    a8d6:	65c7      	str	r7, [r0, #92]	; 0x5c
    a8d8:	6604      	str	r4, [r0, #96]	; 0x60
    a8da:	6641      	str	r1, [r0, #100]	; 0x64
    a8dc:	6682      	str	r2, [r0, #104]	; 0x68
    a8de:	691f      	ldr	r7, [r3, #16]
    a8e0:	695c      	ldr	r4, [r3, #20]
    a8e2:	6999      	ldr	r1, [r3, #24]
    a8e4:	69da      	ldr	r2, [r3, #28]
    a8e6:	66c7      	str	r7, [r0, #108]	; 0x6c
    a8e8:	6704      	str	r4, [r0, #112]	; 0x70
    a8ea:	6741      	str	r1, [r0, #116]	; 0x74
    a8ec:	6782      	str	r2, [r0, #120]	; 0x78
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    a8ee:	f880 605d 	strb.w	r6, [r0, #93]	; 0x5d
						st_clust(fs, fs->win + SZDIRE, pcl);
    a8f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    a8f4:	f100 015c 	add.w	r1, r0, #92	; 0x5c
    a8f8:	f007 fefb 	bl	126f2 <st_clust>
						fs->wflag = 1;
    a8fc:	9b03      	ldr	r3, [sp, #12]
    a8fe:	2201      	movs	r2, #1
    a900:	70da      	strb	r2, [r3, #3]
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    a902:	a810      	add	r0, sp, #64	; 0x40
    a904:	f7ff fb78 	bl	9ff8 <dir_register>
    a908:	4604      	mov	r4, r0
    a90a:	e79c      	b.n	a846 <f_mkdir+0x52>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    a90c:	2401      	movs	r4, #1
    a90e:	e79a      	b.n	a846 <f_mkdir+0x52>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
    a910:	6918      	ldr	r0, [r3, #16]
    a912:	4916      	ldr	r1, [pc, #88]	; (a96c <f_mkdir+0x178>)
    a914:	300c      	adds	r0, #12
    a916:	f007 feac 	bl	12672 <st_dword>
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
    a91a:	9b03      	ldr	r3, [sp, #12]
    a91c:	6918      	ldr	r0, [r3, #16]
    a91e:	4629      	mov	r1, r5
    a920:	3034      	adds	r0, #52	; 0x34
    a922:	f007 fea6 	bl	12672 <st_dword>
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)fs->csize * SS(fs));	/* Directory size needs to be valid */
    a926:	9b03      	ldr	r3, [sp, #12]
    a928:	6918      	ldr	r0, [r3, #16]
    a92a:	8959      	ldrh	r1, [r3, #10]
    a92c:	0249      	lsls	r1, r1, #9
    a92e:	3038      	adds	r0, #56	; 0x38
    a930:	f007 fe9f 	bl	12672 <st_dword>
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)fs->csize * SS(fs));
    a934:	9b03      	ldr	r3, [sp, #12]
    a936:	6918      	ldr	r0, [r3, #16]
    a938:	8959      	ldrh	r1, [r3, #10]
    a93a:	0249      	lsls	r1, r1, #9
    a93c:	3028      	adds	r0, #40	; 0x28
    a93e:	f007 fe98 	bl	12672 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag */
    a942:	9b03      	ldr	r3, [sp, #12]
    a944:	691a      	ldr	r2, [r3, #16]
    a946:	2103      	movs	r1, #3
    a948:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
    a94c:	691b      	ldr	r3, [r3, #16]
    a94e:	2210      	movs	r2, #16
    a950:	711a      	strb	r2, [r3, #4]
					res = store_xdir(&dj);
    a952:	a810      	add	r0, sp, #64	; 0x40
    a954:	f009 f859 	bl	13a0a <store_xdir>
    a958:	4604      	mov	r4, r0
    a95a:	e78b      	b.n	a874 <f_mkdir+0x80>
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    a95c:	2200      	movs	r2, #0
    a95e:	4629      	mov	r1, r5
    a960:	a804      	add	r0, sp, #16
    a962:	f008 fafd 	bl	12f60 <remove_chain>
    a966:	e74f      	b.n	a808 <f_mkdir+0x14>
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    a968:	2408      	movs	r4, #8
    a96a:	e74d      	b.n	a808 <f_mkdir+0x14>
    a96c:	50210000 	.word	0x50210000

0000a970 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
    a970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a974:	b09d      	sub	sp, #116	; 0x74
    a976:	9013      	str	r0, [sp, #76]	; 0x4c
    a978:	460d      	mov	r5, r1
    a97a:	4693      	mov	fp, r2
    a97c:	461c      	mov	r4, r3
	DSTATUS ds;
	FRESULT fr;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
    a97e:	a813      	add	r0, sp, #76	; 0x4c
    a980:	f7fe fe0a 	bl	9598 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    a984:	2800      	cmp	r0, #0
    a986:	f2c0 85e1 	blt.w	b54c <f_mkfs+0xbdc>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
    a98a:	4bbd      	ldr	r3, [pc, #756]	; (ac80 <f_mkfs+0x310>)
    a98c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    a990:	b10b      	cbz	r3, a996 <f_mkfs+0x26>
    a992:	2200      	movs	r2, #0
    a994:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);			/* Physical drive */
    a996:	fa5f fa80 	uxtb.w	sl, r0
	ipart = LD2PT(vol);			/* Partition (0:create as new, 1..:get from partition table) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
    a99a:	b35d      	cbz	r5, a9f4 <f_mkfs+0x84>

	/* Get physical drive status (sz_drv, sz_blk, ss) */
	ds = disk_initialize(pdrv);
    a99c:	4650      	mov	r0, sl
    a99e:	f000 fe23 	bl	b5e8 <disk_initialize>
	if (ds & STA_NOINIT) return FR_NOT_READY;
    a9a2:	f010 0f01 	tst.w	r0, #1
    a9a6:	f040 85d3 	bne.w	b550 <f_mkfs+0xbe0>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
    a9aa:	f010 0f04 	tst.w	r0, #4
    a9ae:	f040 85d3 	bne.w	b558 <f_mkfs+0xbe8>
	sz_blk = opt->align;
    a9b2:	686b      	ldr	r3, [r5, #4]
    a9b4:	931b      	str	r3, [sp, #108]	; 0x6c
	if (sz_blk == 0 && disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK) sz_blk = 1;
    a9b6:	b1fb      	cbz	r3, a9f8 <f_mkfs+0x88>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;
    a9b8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    a9ba:	1e53      	subs	r3, r2, #1
    a9bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a9c0:	d201      	bcs.n	a9c6 <f_mkfs+0x56>
    a9c2:	421a      	tst	r2, r3
    a9c4:	d001      	beq.n	a9ca <f_mkfs+0x5a>
    a9c6:	2301      	movs	r3, #1
    a9c8:	931b      	str	r3, [sp, #108]	; 0x6c
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = FF_MAX_SS;
#endif
	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
    a9ca:	f895 9000 	ldrb.w	r9, [r5]
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
    a9ce:	786e      	ldrb	r6, [r5, #1]
    a9d0:	1e73      	subs	r3, r6, #1
    a9d2:	b2db      	uxtb	r3, r3
    a9d4:	2b01      	cmp	r3, #1
    a9d6:	d900      	bls.n	a9da <f_mkfs+0x6a>
    a9d8:	2601      	movs	r6, #1
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
    a9da:	f8d5 8008 	ldr.w	r8, [r5, #8]
    a9de:	f108 33ff 	add.w	r3, r8, #4294967295
    a9e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a9e6:	d211      	bcs.n	aa0c <f_mkfs+0x9c>
    a9e8:	f018 0f0f 	tst.w	r8, #15
    a9ec:	d010      	beq.n	aa10 <f_mkfs+0xa0>
    a9ee:	f44f 7800 	mov.w	r8, #512	; 0x200
    a9f2:	e00d      	b.n	aa10 <f_mkfs+0xa0>
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
    a9f4:	4da3      	ldr	r5, [pc, #652]	; (ac84 <f_mkfs+0x314>)
    a9f6:	e7d1      	b.n	a99c <f_mkfs+0x2c>
	if (sz_blk == 0 && disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK) sz_blk = 1;
    a9f8:	aa1b      	add	r2, sp, #108	; 0x6c
    a9fa:	2103      	movs	r1, #3
    a9fc:	4650      	mov	r0, sl
    a9fe:	f000 fe63 	bl	b6c8 <disk_ioctl>
    aa02:	2800      	cmp	r0, #0
    aa04:	d0d8      	beq.n	a9b8 <f_mkfs+0x48>
    aa06:	2301      	movs	r3, #1
    aa08:	931b      	str	r3, [sp, #108]	; 0x6c
    aa0a:	e7d5      	b.n	a9b8 <f_mkfs+0x48>
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
    aa0c:	f44f 7800 	mov.w	r8, #512	; 0x200
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
    aa10:	68ed      	ldr	r5, [r5, #12]
    aa12:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    aa16:	d804      	bhi.n	aa22 <f_mkfs+0xb2>
    aa18:	1e6b      	subs	r3, r5, #1
    aa1a:	421d      	tst	r5, r3
    aa1c:	d002      	beq.n	aa24 <f_mkfs+0xb4>
    aa1e:	2500      	movs	r5, #0
    aa20:	e000      	b.n	aa24 <f_mkfs+0xb4>
    aa22:	2500      	movs	r5, #0
	sz_au /= ss;	/* Byte --> Sector */
    aa24:	0a6b      	lsrs	r3, r5, #9
    aa26:	9301      	str	r3, [sp, #4]

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
    aa28:	0a63      	lsrs	r3, r4, #9
    aa2a:	9303      	str	r3, [sp, #12]
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
    aa2c:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    aa30:	f0c0 8594 	bcc.w	b55c <f_mkfs+0xbec>
	buf = (BYTE*)work;		/* Working buffer */
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
    aa34:	f1bb 0f00 	cmp.w	fp, #0
    aa38:	f000 8592 	beq.w	b560 <f_mkfs+0xbf0>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
    aa3c:	2300      	movs	r3, #0
    aa3e:	931a      	str	r3, [sp, #104]	; 0x68
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    aa40:	aa1a      	add	r2, sp, #104	; 0x68
    aa42:	2101      	movs	r1, #1
    aa44:	4650      	mov	r0, sl
    aa46:	f000 fe3f 	bl	b6c8 <disk_ioctl>
    aa4a:	2800      	cmp	r0, #0
    aa4c:	f040 858a 	bne.w	b564 <f_mkfs+0xbf4>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
    aa50:	f019 0308 	ands.w	r3, r9, #8
    aa54:	9306      	str	r3, [sp, #24]
    aa56:	d108      	bne.n	aa6a <f_mkfs+0xfa>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
    aa58:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    aa5a:	2b3f      	cmp	r3, #63	; 0x3f
    aa5c:	f240 80a5 	bls.w	abaa <f_mkfs+0x23a>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
    aa60:	3b3f      	subs	r3, #63	; 0x3f
    aa62:	931a      	str	r3, [sp, #104]	; 0x68
    aa64:	233f      	movs	r3, #63	; 0x3f
    aa66:	9302      	str	r3, [sp, #8]
    aa68:	e001      	b.n	aa6e <f_mkfs+0xfe>
	b_vol = sz_vol = 0;
    aa6a:	2300      	movs	r3, #0
    aa6c:	9302      	str	r3, [sp, #8]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
    aa6e:	991a      	ldr	r1, [sp, #104]	; 0x68
    aa70:	297f      	cmp	r1, #127	; 0x7f
    aa72:	f240 8579 	bls.w	b568 <f_mkfs+0xbf8>

	/* Now start to create an FAT volume at b_vol and sz_vol */

	do {	/* Pre-determine the FAT type */
		if (FF_FS_EXFAT && (fsopt & FM_EXFAT)) {	/* exFAT possible? */
    aa76:	f019 0f04 	tst.w	r9, #4
    aa7a:	d00c      	beq.n	aa96 <f_mkfs+0x126>
			if ((fsopt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || sz_au > 128) {	/* exFAT only, vol >= 64MS or sz_au > 128S ? */
    aa7c:	f009 0307 	and.w	r3, r9, #7
    aa80:	9304      	str	r3, [sp, #16]
    aa82:	2b04      	cmp	r3, #4
    aa84:	d019      	beq.n	aaba <f_mkfs+0x14a>
    aa86:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
    aa8a:	f080 8091 	bcs.w	abb0 <f_mkfs+0x240>
    aa8e:	f5b5 3f81 	cmp.w	r5, #66048	; 0x10200
    aa92:	f080 8090 	bcs.w	abb6 <f_mkfs+0x246>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
    aa96:	f5b5 3f81 	cmp.w	r5, #66048	; 0x10200
    aa9a:	d301      	bcc.n	aaa0 <f_mkfs+0x130>
    aa9c:	2380      	movs	r3, #128	; 0x80
    aa9e:	9301      	str	r3, [sp, #4]
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
    aaa0:	f019 0f02 	tst.w	r9, #2
    aaa4:	d003      	beq.n	aaae <f_mkfs+0x13e>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
    aaa6:	f019 0f01 	tst.w	r9, #1
    aaaa:	f000 8087 	beq.w	abbc <f_mkfs+0x24c>
				fsty = FS_FAT32; break;
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
    aaae:	f019 0f01 	tst.w	r9, #1
    aab2:	f000 855b 	beq.w	b56c <f_mkfs+0xbfc>
		fsty = FS_FAT16;
    aab6:	2302      	movs	r3, #2
    aab8:	9304      	str	r3, [sp, #16]
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
    aaba:	f101 43a0 	add.w	r3, r1, #1342177280	; 0x50000000
    aabe:	f503 1304 	add.w	r3, r3, #2162688	; 0x210000
    aac2:	9307      	str	r3, [sp, #28]

#if FF_FS_EXFAT
	if (fsty == FS_EXFAT) {	/* Create an exFAT volume */
    aac4:	9b04      	ldr	r3, [sp, #16]
    aac6:	2b04      	cmp	r3, #4
    aac8:	d07b      	beq.n	abc2 <f_mkfs+0x252>
    aaca:	f8cd a014 	str.w	sl, [sp, #20]
    aace:	f8cd b020 	str.w	fp, [sp, #32]
    aad2:	f8dd b004 	ldr.w	fp, [sp, #4]
    aad6:	9401      	str	r4, [sp, #4]
    aad8:	9c04      	ldr	r4, [sp, #16]
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
    aada:	2c03      	cmp	r4, #3
    aadc:	f000 8338 	beq.w	b150 <f_mkfs+0x7e0>
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
    aae0:	f1bb 0f00 	cmp.w	fp, #0
    aae4:	f000 8357 	beq.w	b196 <f_mkfs+0x826>
    aae8:	465f      	mov	r7, fp
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
				}
				n_clst = (DWORD)sz_vol / pau;
    aaea:	fbb1 f3f7 	udiv	r3, r1, r7
				if (n_clst > MAX_FAT12) {
    aaee:	f640 72f5 	movw	r2, #4085	; 0xff5
    aaf2:	4293      	cmp	r3, r2
    aaf4:	f240 835e 	bls.w	b1b4 <f_mkfs+0x844>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
    aaf8:	1c9d      	adds	r5, r3, #2
    aafa:	006d      	lsls	r5, r5, #1
				} else {
					fsty = FS_FAT12;
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
    aafc:	f205 15ff 	addw	r5, r5, #511	; 0x1ff
    ab00:	0a6d      	lsrs	r5, r5, #9
				sz_rsv = 1;						/* Number of reserved sectors */
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
    ab02:	f3c8 1e16 	ubfx	lr, r8, #4, #23
				sz_rsv = 1;						/* Number of reserved sectors */
    ab06:	2001      	movs	r0, #1
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
    ab08:	9b02      	ldr	r3, [sp, #8]
    ab0a:	eb03 0c00 	add.w	ip, r3, r0
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
    ab0e:	fb06 c205 	mla	r2, r6, r5, ip
    ab12:	4472      	add	r2, lr

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
    ab14:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
    ab18:	eb0a 0302 	add.w	r3, sl, r2
    ab1c:	3b01      	subs	r3, #1
    ab1e:	f1ca 0a00 	rsb	sl, sl, #0
    ab22:	ea03 030a 	and.w	r3, r3, sl
    ab26:	1a9b      	subs	r3, r3, r2
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
    ab28:	2c03      	cmp	r4, #3
    ab2a:	f000 834a 	beq.w	b1c2 <f_mkfs+0x852>
				sz_rsv += n; b_fat += n;
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
    ab2e:	fbb3 faf6 	udiv	sl, r3, r6
    ab32:	fb06 3a1a 	mls	sl, r6, sl, r3
    ab36:	f1ba 0f00 	cmp.w	sl, #0
    ab3a:	d003      	beq.n	ab44 <f_mkfs+0x1d4>
					n--; sz_rsv++; b_fat++;
    ab3c:	3b01      	subs	r3, #1
    ab3e:	3001      	adds	r0, #1
    ab40:	f10c 0c01 	add.w	ip, ip, #1
				}
				sz_fat += n / n_fat;
    ab44:	fbb3 f3f6 	udiv	r3, r3, r6
    ab48:	441d      	add	r5, r3
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
    ab4a:	eb02 1207 	add.w	r2, r2, r7, lsl #4
    ab4e:	9b02      	ldr	r3, [sp, #8]
    ab50:	1ad2      	subs	r2, r2, r3
    ab52:	4291      	cmp	r1, r2
    ab54:	f0c0 850e 	bcc.w	b574 <f_mkfs+0xc04>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
    ab58:	1a0b      	subs	r3, r1, r0
    ab5a:	fb06 3315 	mls	r3, r6, r5, r3
    ab5e:	eba3 030e 	sub.w	r3, r3, lr
    ab62:	fbb3 f3f7 	udiv	r3, r3, r7
			if (fsty == FS_FAT32) {
    ab66:	2c03      	cmp	r4, #3
    ab68:	f000 832e 	beq.w	b1c8 <f_mkfs+0x858>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
					LEAVE_MKFS(FR_MKFS_ABORTED);
				}
			}
			if (fsty == FS_FAT16) {
    ab6c:	2c02      	cmp	r4, #2
    ab6e:	f040 8353 	bne.w	b218 <f_mkfs+0x8a8>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
    ab72:	f64f 72f5 	movw	r2, #65525	; 0xfff5
    ab76:	4293      	cmp	r3, r2
    ab78:	f240 8336 	bls.w	b1e8 <f_mkfs+0x878>
					if (sz_au == 0 && (pau * 2) <= 64) {
    ab7c:	f1bb 0f00 	cmp.w	fp, #0
    ab80:	d103      	bne.n	ab8a <f_mkfs+0x21a>
    ab82:	007b      	lsls	r3, r7, #1
    ab84:	2b40      	cmp	r3, #64	; 0x40
    ab86:	f240 82e0 	bls.w	b14a <f_mkfs+0x7da>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
					}
					if ((fsopt & FM_FAT32)) {
    ab8a:	f019 0f02 	tst.w	r9, #2
    ab8e:	f040 82de 	bne.w	b14e <f_mkfs+0x7de>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
    ab92:	f1bb 0f00 	cmp.w	fp, #0
    ab96:	f040 84f1 	bne.w	b57c <f_mkfs+0xc0c>
    ab9a:	ea4f 0b47 	mov.w	fp, r7, lsl #1
    ab9e:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
    aba2:	d99a      	bls.n	aada <f_mkfs+0x16a>
					LEAVE_MKFS(FR_MKFS_ABORTED);
    aba4:	200e      	movs	r0, #14
    aba6:	f000 bcd4 	b.w	b552 <f_mkfs+0xbe2>
	b_vol = sz_vol = 0;
    abaa:	2300      	movs	r3, #0
    abac:	9302      	str	r3, [sp, #8]
    abae:	e75e      	b.n	aa6e <f_mkfs+0xfe>
				fsty = FS_EXFAT; break;
    abb0:	2304      	movs	r3, #4
    abb2:	9304      	str	r3, [sp, #16]
    abb4:	e781      	b.n	aaba <f_mkfs+0x14a>
    abb6:	2304      	movs	r3, #4
    abb8:	9304      	str	r3, [sp, #16]
    abba:	e77e      	b.n	aaba <f_mkfs+0x14a>
				fsty = FS_FAT32; break;
    abbc:	2303      	movs	r3, #3
    abbe:	9304      	str	r3, [sp, #16]
    abc0:	e77b      	b.n	aaba <f_mkfs+0x14a>
		if (sz_vol < 0x1000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume for exFAT? */
    abc2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    abc6:	f0c0 82a8 	bcc.w	b11a <f_mkfs+0x7aa>
		if (sz_au == 0) {	/* AU auto-selection */
    abca:	9b01      	ldr	r3, [sp, #4]
    abcc:	b953      	cbnz	r3, abe4 <f_mkfs+0x274>
			if (sz_vol >= 0x80000) sz_au = 64;		/* >= 512Ks */
    abce:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
    abd2:	d249      	bcs.n	ac68 <f_mkfs+0x2f8>
			sz_au = 8;
    abd4:	2308      	movs	r3, #8
    abd6:	9301      	str	r3, [sp, #4]
			if (sz_vol >= 0x4000000) sz_au = 256;	/* >= 64Ms */
    abd8:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
    abdc:	d302      	bcc.n	abe4 <f_mkfs+0x274>
    abde:	f44f 7380 	mov.w	r3, #256	; 0x100
    abe2:	9301      	str	r3, [sp, #4]
		b_fat = b_vol + 32;										/* FAT start at offset 32 */
    abe4:	9802      	ldr	r0, [sp, #8]
    abe6:	f100 0220 	add.w	r2, r0, #32
    abea:	920c      	str	r2, [sp, #48]	; 0x30
		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 4 + ss - 1) / ss;	/* Number of FAT sectors */
    abec:	9d01      	ldr	r5, [sp, #4]
    abee:	fbb1 f3f5 	udiv	r3, r1, r5
    abf2:	3302      	adds	r3, #2
    abf4:	009b      	lsls	r3, r3, #2
    abf6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
    abfa:	0a5e      	lsrs	r6, r3, #9
    abfc:	960b      	str	r6, [sp, #44]	; 0x2c
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase block boundary */
    abfe:	eb02 2353 	add.w	r3, r2, r3, lsr #9
    ac02:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    ac04:	4413      	add	r3, r2
    ac06:	3b01      	subs	r3, #1
    ac08:	4252      	negs	r2, r2
    ac0a:	401a      	ands	r2, r3
    ac0c:	920a      	str	r2, [sp, #40]	; 0x28
		if (b_data - b_vol >= sz_vol / 2) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
    ac0e:	1a13      	subs	r3, r2, r0
    ac10:	930d      	str	r3, [sp, #52]	; 0x34
    ac12:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    ac16:	f080 8282 	bcs.w	b11e <f_mkfs+0x7ae>
		n_clst = (DWORD)(sz_vol - (b_data - b_vol)) / sz_au;	/* Number of clusters */
    ac1a:	1a83      	subs	r3, r0, r2
    ac1c:	4419      	add	r1, r3
    ac1e:	fbb1 f1f5 	udiv	r1, r1, r5
    ac22:	910e      	str	r1, [sp, #56]	; 0x38
		if (n_clst <16) LEAVE_MKFS(FR_MKFS_ABORTED);			/* Too few clusters? */
    ac24:	290f      	cmp	r1, #15
    ac26:	f240 827c 	bls.w	b122 <f_mkfs+0x7b2>
		if (n_clst > MAX_EXFAT) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters? */
    ac2a:	4b17      	ldr	r3, [pc, #92]	; (ac88 <f_mkfs+0x318>)
    ac2c:	4299      	cmp	r1, r3
    ac2e:	f200 827a 	bhi.w	b126 <f_mkfs+0x7b6>
		szb_bit = (n_clst + 7) / 8;								/* Size of allocation bitmap */
    ac32:	1dcb      	adds	r3, r1, #7
    ac34:	08d9      	lsrs	r1, r3, #3
    ac36:	9110      	str	r1, [sp, #64]	; 0x40
		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */
    ac38:	0269      	lsls	r1, r5, #9
    ac3a:	9111      	str	r1, [sp, #68]	; 0x44
    ac3c:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
    ac40:	3b01      	subs	r3, #1
    ac42:	fbb3 f3f1 	udiv	r3, r3, r1
    ac46:	930f      	str	r3, [sp, #60]	; 0x3c
    ac48:	9315      	str	r3, [sp, #84]	; 0x54
		sect = b_data + sz_au * clen[0];	/* Table start sector */
    ac4a:	fb05 2303 	mla	r3, r5, r3, r2
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
    ac4e:	f04f 0800 	mov.w	r8, #0
    ac52:	46c1      	mov	r9, r8
    ac54:	4647      	mov	r7, r8
		sum = 0;							/* Table checksum to be stored in the 82 entry */
    ac56:	f8cd 8014 	str.w	r8, [sp, #20]
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
    ac5a:	4646      	mov	r6, r8
    ac5c:	4645      	mov	r5, r8
    ac5e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    ac62:	469a      	mov	sl, r3
    ac64:	9408      	str	r4, [sp, #32]
    ac66:	e042      	b.n	acee <f_mkfs+0x37e>
			if (sz_vol >= 0x80000) sz_au = 64;		/* >= 512Ks */
    ac68:	2340      	movs	r3, #64	; 0x40
    ac6a:	9301      	str	r3, [sp, #4]
    ac6c:	e7b4      	b.n	abd8 <f_mkfs+0x268>
				ch = (WCHAR)ff_wtoupper(si);	/* Get an up-case char */
    ac6e:	4638      	mov	r0, r7
    ac70:	f000 fdbc 	bl	b7ec <ff_wtoupper>
    ac74:	b284      	uxth	r4, r0
				if (ch != si) {
    ac76:	42a7      	cmp	r7, r4
    ac78:	d01f      	beq.n	acba <f_mkfs+0x34a>
					si++; break;		/* Store the up-case char if exist */
    ac7a:	3701      	adds	r7, #1
    ac7c:	b2bf      	uxth	r7, r7
    ac7e:	e03f      	b.n	ad00 <f_mkfs+0x390>
    ac80:	20000ec8 	.word	0x20000ec8
    ac84:	00016b98 	.word	0x00016b98
    ac88:	7ffffffd 	.word	0x7ffffffd
				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get run length of no-case block */
    ac8c:	f109 0901 	add.w	r9, r9, #1
    ac90:	eb07 0409 	add.w	r4, r7, r9
    ac94:	b2a4      	uxth	r4, r4
    ac96:	b124      	cbz	r4, aca2 <f_mkfs+0x332>
    ac98:	4620      	mov	r0, r4
    ac9a:	f000 fda7 	bl	b7ec <ff_wtoupper>
    ac9e:	4284      	cmp	r4, r0
    aca0:	d0f4      	beq.n	ac8c <f_mkfs+0x31c>
				if (j >= 128) {
    aca2:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
    aca6:	d80b      	bhi.n	acc0 <f_mkfs+0x350>
				st = 1;			/* Do not compress short run */
    aca8:	2501      	movs	r5, #1
				ch = si++;		/* Fill the short run */
    acaa:	1c7b      	adds	r3, r7, #1
    acac:	b29b      	uxth	r3, r3
				if (--j == 0) st = 0;
    acae:	f1b9 0901 	subs.w	r9, r9, #1
    acb2:	d009      	beq.n	acc8 <f_mkfs+0x358>
				ch = si++;		/* Fill the short run */
    acb4:	463c      	mov	r4, r7
    acb6:	461f      	mov	r7, r3
    acb8:	e022      	b.n	ad00 <f_mkfs+0x390>
				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get run length of no-case block */
    acba:	f04f 0901 	mov.w	r9, #1
    acbe:	e7e7      	b.n	ac90 <f_mkfs+0x320>
					ch = 0xFFFF; st = 2; break;	/* Compress the no-case block if run is >= 128 chars */
    acc0:	2502      	movs	r5, #2
    acc2:	f64f 74ff 	movw	r4, #65535	; 0xffff
    acc6:	e01b      	b.n	ad00 <f_mkfs+0x390>
				if (--j == 0) st = 0;
    acc8:	464d      	mov	r5, r9
				ch = si++;		/* Fill the short run */
    acca:	463c      	mov	r4, r7
    accc:	461f      	mov	r7, r3
    acce:	e017      	b.n	ad00 <f_mkfs+0x390>
				n = (i + ss - 1) / ss;
    acd0:	f206 2601 	addw	r6, r6, #513	; 0x201
    acd4:	0a76      	lsrs	r6, r6, #9
				if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    acd6:	4633      	mov	r3, r6
    acd8:	4652      	mov	r2, sl
    acda:	4659      	mov	r1, fp
    acdc:	9809      	ldr	r0, [sp, #36]	; 0x24
    acde:	f000 fccb 	bl	b678 <disk_write>
    ace2:	2800      	cmp	r0, #0
    ace4:	f040 8221 	bne.w	b12a <f_mkfs+0x7ba>
				sect += n; i = 0;
    ace8:	44b2      	add	sl, r6
    acea:	2600      	movs	r6, #0
		} while (si);
    acec:	b32f      	cbz	r7, ad3a <f_mkfs+0x3ca>
			switch (st) {
    acee:	2d00      	cmp	r5, #0
    acf0:	d0bd      	beq.n	ac6e <f_mkfs+0x2fe>
    acf2:	2d01      	cmp	r5, #1
    acf4:	d0d9      	beq.n	acaa <f_mkfs+0x33a>
				ch = (WCHAR)j; si += (WCHAR)j;	/* Number of chars to skip */
    acf6:	fa1f f489 	uxth.w	r4, r9
    acfa:	4427      	add	r7, r4
    acfc:	b2bf      	uxth	r7, r7
				st = 0;
    acfe:	2500      	movs	r5, #0
			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);	/* Put it into the write buffer */
    ad00:	b2e0      	uxtb	r0, r4
    ad02:	f80b 0006 	strb.w	r0, [fp, r6]
    ad06:	9905      	ldr	r1, [sp, #20]
    ad08:	f007 fd2f 	bl	1276a <xsum32>
    ad0c:	4601      	mov	r1, r0
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
    ad0e:	1c73      	adds	r3, r6, #1
    ad10:	f3c4 2007 	ubfx	r0, r4, #8, #8
    ad14:	f80b 0003 	strb.w	r0, [fp, r3]
    ad18:	f007 fd27 	bl	1276a <xsum32>
    ad1c:	9005      	str	r0, [sp, #20]
			i += 2; szb_case += 2;
    ad1e:	1cb2      	adds	r2, r6, #2
    ad20:	f108 0802 	add.w	r8, r8, #2
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
    ad24:	2f00      	cmp	r7, #0
    ad26:	d0d3      	beq.n	acd0 <f_mkfs+0x360>
    ad28:	9b08      	ldr	r3, [sp, #32]
    ad2a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    ad2e:	f023 0301 	bic.w	r3, r3, #1
    ad32:	4293      	cmp	r3, r2
    ad34:	d0cc      	beq.n	acd0 <f_mkfs+0x360>
			i += 2; szb_case += 2;
    ad36:	4616      	mov	r6, r2
    ad38:	e7d8      	b.n	acec <f_mkfs+0x37c>
    ad3a:	4643      	mov	r3, r8
    ad3c:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
    ad40:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    ad44:	9c08      	ldr	r4, [sp, #32]
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
    ad46:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ad48:	18d3      	adds	r3, r2, r3
    ad4a:	3b01      	subs	r3, #1
    ad4c:	fbb3 f3f2 	udiv	r3, r3, r2
    ad50:	9316      	str	r3, [sp, #88]	; 0x58
		clen[2] = 1;	/* Number of root dir clusters */
    ad52:	2201      	movs	r2, #1
    ad54:	9217      	str	r2, [sp, #92]	; 0x5c
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
    ad56:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ad58:	f202 19ff 	addw	r9, r2, #511	; 0x1ff
    ad5c:	ea4f 2959 	mov.w	r9, r9, lsr #9
		nbit = clen[0] + clen[1] + clen[2];				/* Number of clusters in-use by system (bitmap, up-case and root-dir) */
    ad60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ad62:	18d3      	adds	r3, r2, r3
    ad64:	9311      	str	r3, [sp, #68]	; 0x44
    ad66:	1c5d      	adds	r5, r3, #1
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
    ad68:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    ad6a:	9e03      	ldr	r6, [sp, #12]
    ad6c:	e010      	b.n	ad90 <f_mkfs+0x420>
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
    ad6e:	46c8      	mov	r8, r9
    ad70:	45b1      	cmp	r9, r6
    ad72:	bf28      	it	cs
    ad74:	46b0      	movcs	r8, r6
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    ad76:	4643      	mov	r3, r8
    ad78:	463a      	mov	r2, r7
    ad7a:	4659      	mov	r1, fp
    ad7c:	4650      	mov	r0, sl
    ad7e:	f000 fc7b 	bl	b678 <disk_write>
    ad82:	2800      	cmp	r0, #0
    ad84:	f040 81d3 	bne.w	b12e <f_mkfs+0x7be>
			sect += n; nsect -= n;
    ad88:	4447      	add	r7, r8
		} while (nsect);
    ad8a:	ebb9 0908 	subs.w	r9, r9, r8
    ad8e:	d01f      	beq.n	add0 <f_mkfs+0x460>
__ssp_bos_icheck3(memset, void *, int)
    ad90:	f424 72ff 	bic.w	r2, r4, #510	; 0x1fe
    ad94:	f022 0201 	bic.w	r2, r2, #1
    ad98:	2100      	movs	r1, #0
    ad9a:	4658      	mov	r0, fp
    ad9c:	f009 fe5f 	bl	14a5e <memset>
    ada0:	2300      	movs	r3, #0
			for (i = 0; nbit != 0 && i / 8 < sz_buf * ss; buf[i / 8] |= 1 << (i % 8), i++, nbit--) ;	/* Mark used clusters */
    ada2:	2d00      	cmp	r5, #0
    ada4:	d0e3      	beq.n	ad6e <f_mkfs+0x3fe>
    ada6:	08d8      	lsrs	r0, r3, #3
    ada8:	f424 72ff 	bic.w	r2, r4, #510	; 0x1fe
    adac:	f022 0201 	bic.w	r2, r2, #1
    adb0:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
    adb4:	d9db      	bls.n	ad6e <f_mkfs+0x3fe>
    adb6:	f003 0107 	and.w	r1, r3, #7
    adba:	2201      	movs	r2, #1
    adbc:	fa02 f101 	lsl.w	r1, r2, r1
    adc0:	f81b 2000 	ldrb.w	r2, [fp, r0]
    adc4:	430a      	orrs	r2, r1
    adc6:	f80b 2000 	strb.w	r2, [fp, r0]
    adca:	3301      	adds	r3, #1
    adcc:	3d01      	subs	r5, #1
    adce:	e7e8      	b.n	ada2 <f_mkfs+0x432>
		j = nbit = clu = 0;
    add0:	464f      	mov	r7, r9
    add2:	46c8      	mov	r8, r9
    add4:	464d      	mov	r5, r9
		sect = b_fat; nsect = sz_fat;	/* Start of FAT and number of FAT sectors */
    add6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    add8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    addc:	4699      	mov	r9, r3
    adde:	f8cd a020 	str.w	sl, [sp, #32]
    ade2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    ade6:	e048      	b.n	ae7a <f_mkfs+0x50a>
				st_dword(buf + i, 0xFFFFFFF8); i += 4; clu++;
    ade8:	f06f 0107 	mvn.w	r1, #7
    adec:	4658      	mov	r0, fp
    adee:	f007 fc40 	bl	12672 <st_dword>
				st_dword(buf + i, 0xFFFFFFFF); i += 4; clu++;
    adf2:	f04f 31ff 	mov.w	r1, #4294967295
    adf6:	f10b 0004 	add.w	r0, fp, #4
    adfa:	f007 fc3a 	bl	12672 <st_dword>
    adfe:	f108 0802 	add.w	r8, r8, #2
    ae02:	2608      	movs	r6, #8
    ae04:	e016      	b.n	ae34 <f_mkfs+0x4c4>
					st_dword(buf + i, (nbit > 1) ? clu + 1 : 0xFFFFFFFF);
    ae06:	eb0b 0006 	add.w	r0, fp, r6
    ae0a:	2d01      	cmp	r5, #1
    ae0c:	d908      	bls.n	ae20 <f_mkfs+0x4b0>
    ae0e:	f108 0101 	add.w	r1, r8, #1
    ae12:	f007 fc2e 	bl	12672 <st_dword>
					i += 4; clu++; nbit--;
    ae16:	3604      	adds	r6, #4
    ae18:	f108 0801 	add.w	r8, r8, #1
    ae1c:	3d01      	subs	r5, #1
    ae1e:	e009      	b.n	ae34 <f_mkfs+0x4c4>
					st_dword(buf + i, (nbit > 1) ? clu + 1 : 0xFFFFFFFF);
    ae20:	f04f 31ff 	mov.w	r1, #4294967295
    ae24:	e7f5      	b.n	ae12 <f_mkfs+0x4a2>
			} while (nbit != 0 && i < sz_buf * ss);
    ae26:	b1bd      	cbz	r5, ae58 <f_mkfs+0x4e8>
    ae28:	f424 73ff 	bic.w	r3, r4, #510	; 0x1fe
    ae2c:	f023 0301 	bic.w	r3, r3, #1
    ae30:	42b3      	cmp	r3, r6
    ae32:	d911      	bls.n	ae58 <f_mkfs+0x4e8>
				while (nbit != 0 && i < sz_buf * ss) {	/* Create a chain */
    ae34:	b12d      	cbz	r5, ae42 <f_mkfs+0x4d2>
    ae36:	f424 73ff 	bic.w	r3, r4, #510	; 0x1fe
    ae3a:	f023 0301 	bic.w	r3, r3, #1
    ae3e:	42b3      	cmp	r3, r6
    ae40:	d8e1      	bhi.n	ae06 <f_mkfs+0x496>
				if (nbit == 0 && j < 3) nbit = clen[j++];	/* Get next chain length */
    ae42:	2d00      	cmp	r5, #0
    ae44:	d1ef      	bne.n	ae26 <f_mkfs+0x4b6>
    ae46:	2f02      	cmp	r7, #2
    ae48:	d8ed      	bhi.n	ae26 <f_mkfs+0x4b6>
    ae4a:	ab1c      	add	r3, sp, #112	; 0x70
    ae4c:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    ae50:	f853 5c1c 	ldr.w	r5, [r3, #-28]
    ae54:	3701      	adds	r7, #1
    ae56:	e7e6      	b.n	ae26 <f_mkfs+0x4b6>
			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
    ae58:	9b03      	ldr	r3, [sp, #12]
    ae5a:	454b      	cmp	r3, r9
    ae5c:	bf28      	it	cs
    ae5e:	464b      	movcs	r3, r9
    ae60:	461e      	mov	r6, r3
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    ae62:	4652      	mov	r2, sl
    ae64:	4659      	mov	r1, fp
    ae66:	9808      	ldr	r0, [sp, #32]
    ae68:	f000 fc06 	bl	b678 <disk_write>
    ae6c:	2800      	cmp	r0, #0
    ae6e:	f040 8160 	bne.w	b132 <f_mkfs+0x7c2>
			sect += n; nsect -= n;
    ae72:	44b2      	add	sl, r6
		} while (nsect);
    ae74:	ebb9 0906 	subs.w	r9, r9, r6
    ae78:	d00c      	beq.n	ae94 <f_mkfs+0x524>
    ae7a:	f424 72ff 	bic.w	r2, r4, #510	; 0x1fe
    ae7e:	f022 0201 	bic.w	r2, r2, #1
    ae82:	2100      	movs	r1, #0
    ae84:	4658      	mov	r0, fp
    ae86:	f009 fdea 	bl	14a5e <memset>
			if (clu == 0) {	/* Initialize FAT [0] and FAT[1] */
    ae8a:	f1b8 0f00 	cmp.w	r8, #0
    ae8e:	d0ab      	beq.n	ade8 <f_mkfs+0x478>
			memset(buf, 0, sz_buf * ss); i = 0;	/* Clear work area and reset write offset */
    ae90:	9e09      	ldr	r6, [sp, #36]	; 0x24
    ae92:	e7cf      	b.n	ae34 <f_mkfs+0x4c4>
    ae94:	f8dd a020 	ldr.w	sl, [sp, #32]
    ae98:	f424 72ff 	bic.w	r2, r4, #510	; 0x1fe
    ae9c:	f022 0201 	bic.w	r2, r2, #1
    aea0:	2100      	movs	r1, #0
    aea2:	4658      	mov	r0, fp
    aea4:	f009 fddb 	bl	14a5e <memset>
		buf[SZDIRE * 0 + 0] = ET_VLABEL;				/* Volume label entry (no label) */
    aea8:	2383      	movs	r3, #131	; 0x83
    aeaa:	f88b 3000 	strb.w	r3, [fp]
		buf[SZDIRE * 1 + 0] = ET_BITMAP;				/* Bitmap entry */
    aeae:	2381      	movs	r3, #129	; 0x81
    aeb0:	f88b 3020 	strb.w	r3, [fp, #32]
		st_dword(buf + SZDIRE * 1 + 20, 2);				/*  cluster */
    aeb4:	2102      	movs	r1, #2
    aeb6:	f10b 0034 	add.w	r0, fp, #52	; 0x34
    aeba:	f007 fbda 	bl	12672 <st_dword>
		st_dword(buf + SZDIRE * 1 + 24, szb_bit);		/*  size */
    aebe:	9910      	ldr	r1, [sp, #64]	; 0x40
    aec0:	f10b 0038 	add.w	r0, fp, #56	; 0x38
    aec4:	f007 fbd5 	bl	12672 <st_dword>
		buf[SZDIRE * 2 + 0] = ET_UPCASE;				/* Up-case table entry */
    aec8:	2382      	movs	r3, #130	; 0x82
    aeca:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
		st_dword(buf + SZDIRE * 2 + 4, sum);			/*  sum */
    aece:	9905      	ldr	r1, [sp, #20]
    aed0:	f10b 0044 	add.w	r0, fp, #68	; 0x44
    aed4:	f007 fbcd 	bl	12672 <st_dword>
		st_dword(buf + SZDIRE * 2 + 20, 2 + clen[0]);	/*  cluster */
    aed8:	f10b 0054 	add.w	r0, fp, #84	; 0x54
    aedc:	9005      	str	r0, [sp, #20]
    aede:	990f      	ldr	r1, [sp, #60]	; 0x3c
    aee0:	3102      	adds	r1, #2
    aee2:	f007 fbc6 	bl	12672 <st_dword>
		st_dword(buf + SZDIRE * 2 + 24, szb_case);		/*  size */
    aee6:	f10b 0358 	add.w	r3, fp, #88	; 0x58
    aeea:	9308      	str	r3, [sp, #32]
    aeec:	9912      	ldr	r1, [sp, #72]	; 0x48
    aeee:	4618      	mov	r0, r3
    aef0:	f007 fbbf 	bl	12672 <st_dword>
		sect = b_data + sz_au * (clen[0] + clen[1]); nsect = sz_au;	/* Start of the root directory and number of sectors */
    aef4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    aef6:	4618      	mov	r0, r3
    aef8:	9b01      	ldr	r3, [sp, #4]
    aefa:	990a      	ldr	r1, [sp, #40]	; 0x28
    aefc:	fb03 1400 	mla	r4, r3, r0, r1
    af00:	4699      	mov	r9, r3
    af02:	9e03      	ldr	r6, [sp, #12]
			n = (nsect > sz_buf) ? sz_buf : nsect;
    af04:	464d      	mov	r5, r9
    af06:	45b1      	cmp	r9, r6
    af08:	bf28      	it	cs
    af0a:	4635      	movcs	r5, r6
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    af0c:	462b      	mov	r3, r5
    af0e:	4622      	mov	r2, r4
    af10:	4659      	mov	r1, fp
    af12:	4650      	mov	r0, sl
    af14:	f000 fbb0 	bl	b678 <disk_write>
    af18:	2800      	cmp	r0, #0
    af1a:	f040 810c 	bne.w	b136 <f_mkfs+0x7c6>
    af1e:	f44f 7200 	mov.w	r2, #512	; 0x200
    af22:	2100      	movs	r1, #0
    af24:	4658      	mov	r0, fp
    af26:	f009 fd9a 	bl	14a5e <memset>
			sect += n; nsect -= n;
    af2a:	442c      	add	r4, r5
		} while (nsect);
    af2c:	ebb9 0905 	subs.w	r9, r9, r5
    af30:	d1e8      	bne.n	af04 <f_mkfs+0x594>
		sect = b_vol;
    af32:	f8dd 8008 	ldr.w	r8, [sp, #8]
		for (n = 0; n < 2; n++) {
    af36:	f1b9 0f01 	cmp.w	r9, #1
    af3a:	f200 82db 	bhi.w	b4f4 <f_mkfs+0xb84>
    af3e:	f44f 7400 	mov.w	r4, #512	; 0x200
    af42:	4622      	mov	r2, r4
    af44:	2100      	movs	r1, #0
    af46:	4658      	mov	r0, fp
    af48:	f009 fd89 	bl	14a5e <memset>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    af4c:	4bae      	ldr	r3, [pc, #696]	; (b208 <f_mkfs+0x898>)
    af4e:	cb03      	ldmia	r3!, {r0, r1}
    af50:	f8cb 0000 	str.w	r0, [fp]
    af54:	f8cb 1004 	str.w	r1, [fp, #4]
    af58:	881a      	ldrh	r2, [r3, #0]
    af5a:	789b      	ldrb	r3, [r3, #2]
    af5c:	f8ab 2008 	strh.w	r2, [fp, #8]
    af60:	f88b 300a 	strb.w	r3, [fp, #10]
			st_qword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
    af64:	2500      	movs	r5, #0
    af66:	9a02      	ldr	r2, [sp, #8]
    af68:	462b      	mov	r3, r5
    af6a:	f10b 0040 	add.w	r0, fp, #64	; 0x40
    af6e:	f007 fb8a 	bl	12686 <st_qword>
			st_qword(buf + BPB_TotSecEx, sz_vol);					/* Volume size [sector] */
    af72:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    af74:	462b      	mov	r3, r5
    af76:	f10b 0048 	add.w	r0, fp, #72	; 0x48
    af7a:	f007 fb84 	bl	12686 <st_qword>
			st_dword(buf + BPB_FatOfsEx, (DWORD)(b_fat - b_vol));	/* FAT offset [sector] */
    af7e:	2120      	movs	r1, #32
    af80:	f10b 0050 	add.w	r0, fp, #80	; 0x50
    af84:	f007 fb75 	bl	12672 <st_dword>
			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
    af88:	990b      	ldr	r1, [sp, #44]	; 0x2c
    af8a:	9805      	ldr	r0, [sp, #20]
    af8c:	f007 fb71 	bl	12672 <st_dword>
			st_dword(buf + BPB_DataOfsEx, (DWORD)(b_data - b_vol));	/* Data offset [sector] */
    af90:	990d      	ldr	r1, [sp, #52]	; 0x34
    af92:	9808      	ldr	r0, [sp, #32]
    af94:	f007 fb6d 	bl	12672 <st_dword>
			st_dword(buf + BPB_NumClusEx, n_clst);					/* Number of clusters */
    af98:	990e      	ldr	r1, [sp, #56]	; 0x38
    af9a:	f10b 005c 	add.w	r0, fp, #92	; 0x5c
    af9e:	f007 fb68 	bl	12672 <st_dword>
			st_dword(buf + BPB_RootClusEx, 2 + clen[0] + clen[1]);	/* Root dir cluster # */
    afa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    afa4:	1c99      	adds	r1, r3, #2
    afa6:	f10b 0060 	add.w	r0, fp, #96	; 0x60
    afaa:	f007 fb62 	bl	12672 <st_dword>
			st_dword(buf + BPB_VolIDEx, vsn);						/* VSN */
    afae:	9907      	ldr	r1, [sp, #28]
    afb0:	f10b 0064 	add.w	r0, fp, #100	; 0x64
    afb4:	f007 fb5d 	bl	12672 <st_dword>
			st_word(buf + BPB_FSVerEx, 0x100);						/* Filesystem version (1.00) */
    afb8:	f44f 7180 	mov.w	r1, #256	; 0x100
    afbc:	f10b 0068 	add.w	r0, fp, #104	; 0x68
    afc0:	f007 fb53 	bl	1266a <st_word>
			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;	/* Log2 of sector size [byte] */
    afc4:	f88b 506c 	strb.w	r5, [fp, #108]	; 0x6c
    afc8:	4623      	mov	r3, r4
    afca:	e004      	b.n	afd6 <f_mkfs+0x666>
    afcc:	f89b 206c 	ldrb.w	r2, [fp, #108]	; 0x6c
    afd0:	3201      	adds	r2, #1
    afd2:	f88b 206c 	strb.w	r2, [fp, #108]	; 0x6c
    afd6:	085b      	lsrs	r3, r3, #1
    afd8:	d1f8      	bne.n	afcc <f_mkfs+0x65c>
			for (buf[BPB_SecPerClusEx] = 0, i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
    afda:	2300      	movs	r3, #0
    afdc:	f88b 306d 	strb.w	r3, [fp, #109]	; 0x6d
    afe0:	9e01      	ldr	r6, [sp, #4]
    afe2:	e004      	b.n	afee <f_mkfs+0x67e>
    afe4:	f89b 306d 	ldrb.w	r3, [fp, #109]	; 0x6d
    afe8:	3301      	adds	r3, #1
    afea:	f88b 306d 	strb.w	r3, [fp, #109]	; 0x6d
    afee:	0876      	lsrs	r6, r6, #1
    aff0:	d1f8      	bne.n	afe4 <f_mkfs+0x674>
			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
    aff2:	2301      	movs	r3, #1
    aff4:	f88b 306e 	strb.w	r3, [fp, #110]	; 0x6e
			buf[BPB_DrvNumEx] = 0x80;				/* Drive number (for int13) */
    aff8:	2380      	movs	r3, #128	; 0x80
    affa:	f88b 306f 	strb.w	r3, [fp, #111]	; 0x6f
			st_word(buf + BS_BootCodeEx, 0xFEEB);	/* Boot code (x86) */
    affe:	f64f 61eb 	movw	r1, #65259	; 0xfeeb
    b002:	f10b 0078 	add.w	r0, fp, #120	; 0x78
    b006:	f007 fb30 	bl	1266a <st_word>
			st_word(buf + BS_55AA, 0xAA55);			/* Signature (placed here regardless of sector size) */
    b00a:	f50b 75ff 	add.w	r5, fp, #510	; 0x1fe
    b00e:	f64a 2155 	movw	r1, #43605	; 0xaa55
    b012:	4628      	mov	r0, r5
    b014:	f007 fb29 	bl	1266a <st_word>
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
    b018:	4637      	mov	r7, r6
    b01a:	4631      	mov	r1, r6
    b01c:	e004      	b.n	b028 <f_mkfs+0x6b8>
				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], sum);
    b01e:	f1a7 036a 	sub.w	r3, r7, #106	; 0x6a
    b022:	2b01      	cmp	r3, #1
    b024:	d81c      	bhi.n	b060 <f_mkfs+0x6f0>
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
    b026:	3701      	adds	r7, #1
    b028:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    b02c:	d3f7      	bcc.n	b01e <f_mkfs+0x6ae>
    b02e:	460c      	mov	r4, r1
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    b030:	f108 0701 	add.w	r7, r8, #1
    b034:	2301      	movs	r3, #1
    b036:	4642      	mov	r2, r8
    b038:	4659      	mov	r1, fp
    b03a:	4650      	mov	r0, sl
    b03c:	f000 fb1c 	bl	b678 <disk_write>
    b040:	2800      	cmp	r0, #0
    b042:	d17a      	bne.n	b13a <f_mkfs+0x7ca>
__ssp_bos_icheck3(memset, void *, int)
    b044:	f44f 7200 	mov.w	r2, #512	; 0x200
    b048:	2100      	movs	r1, #0
    b04a:	4658      	mov	r0, fp
    b04c:	f009 fd07 	bl	14a5e <memset>
			st_word(buf + ss - 2, 0xAA55);	/* Signature (placed at end of sector) */
    b050:	f64a 2155 	movw	r1, #43605	; 0xaa55
    b054:	4628      	mov	r0, r5
    b056:	f007 fb08 	bl	1266a <st_word>
			for (j = 1; j < 9; j++) {
    b05a:	f04f 0801 	mov.w	r8, #1
    b05e:	e014      	b.n	b08a <f_mkfs+0x71a>
				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], sum);
    b060:	2f70      	cmp	r7, #112	; 0x70
    b062:	d0e0      	beq.n	b026 <f_mkfs+0x6b6>
    b064:	f81b 0007 	ldrb.w	r0, [fp, r7]
    b068:	f007 fb7f 	bl	1276a <xsum32>
    b06c:	4601      	mov	r1, r0
    b06e:	e7da      	b.n	b026 <f_mkfs+0x6b6>
    b070:	460c      	mov	r4, r1
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    b072:	1c7d      	adds	r5, r7, #1
    b074:	2301      	movs	r3, #1
    b076:	463a      	mov	r2, r7
    b078:	4659      	mov	r1, fp
    b07a:	4650      	mov	r0, sl
    b07c:	f000 fafc 	bl	b678 <disk_write>
    b080:	2800      	cmp	r0, #0
    b082:	d15c      	bne.n	b13e <f_mkfs+0x7ce>
			for (j = 1; j < 9; j++) {
    b084:	f108 0801 	add.w	r8, r8, #1
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    b088:	462f      	mov	r7, r5
			for (j = 1; j < 9; j++) {
    b08a:	f1b8 0f08 	cmp.w	r8, #8
    b08e:	d80c      	bhi.n	b0aa <f_mkfs+0x73a>
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
    b090:	4633      	mov	r3, r6
    b092:	4621      	mov	r1, r4
    b094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    b098:	d2ea      	bcs.n	b070 <f_mkfs+0x700>
    b09a:	1c5d      	adds	r5, r3, #1
    b09c:	f81b 0003 	ldrb.w	r0, [fp, r3]
    b0a0:	f007 fb63 	bl	1276a <xsum32>
    b0a4:	4601      	mov	r1, r0
    b0a6:	462b      	mov	r3, r5
    b0a8:	e7f4      	b.n	b094 <f_mkfs+0x724>
    b0aa:	f44f 7200 	mov.w	r2, #512	; 0x200
    b0ae:	2100      	movs	r1, #0
    b0b0:	4658      	mov	r0, fp
    b0b2:	f009 fcd4 	bl	14a5e <memset>
    b0b6:	e00b      	b.n	b0d0 <f_mkfs+0x760>
    b0b8:	460c      	mov	r4, r1
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    b0ba:	1c7d      	adds	r5, r7, #1
    b0bc:	2301      	movs	r3, #1
    b0be:	463a      	mov	r2, r7
    b0c0:	4659      	mov	r1, fp
    b0c2:	4650      	mov	r0, sl
    b0c4:	f000 fad8 	bl	b678 <disk_write>
    b0c8:	bbd8      	cbnz	r0, b142 <f_mkfs+0x7d2>
			for ( ; j < 11; j++) {
    b0ca:	f108 0801 	add.w	r8, r8, #1
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    b0ce:	462f      	mov	r7, r5
			for ( ; j < 11; j++) {
    b0d0:	f1b8 0f0a 	cmp.w	r8, #10
    b0d4:	d812      	bhi.n	b0fc <f_mkfs+0x78c>
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
    b0d6:	4633      	mov	r3, r6
    b0d8:	4621      	mov	r1, r4
    b0da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    b0de:	d2eb      	bcs.n	b0b8 <f_mkfs+0x748>
    b0e0:	1c5d      	adds	r5, r3, #1
    b0e2:	f81b 0003 	ldrb.w	r0, [fp, r3]
    b0e6:	f007 fb40 	bl	1276a <xsum32>
    b0ea:	4601      	mov	r1, r0
    b0ec:	462b      	mov	r3, r5
    b0ee:	e7f4      	b.n	b0da <f_mkfs+0x76a>
			for (i = 0; i < ss; i += 4) st_dword(buf + i, sum);		/* Fill with checksum value */
    b0f0:	4621      	mov	r1, r4
    b0f2:	eb0b 0006 	add.w	r0, fp, r6
    b0f6:	f007 fabc 	bl	12672 <st_dword>
    b0fa:	3604      	adds	r6, #4
    b0fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    b100:	d3f6      	bcc.n	b0f0 <f_mkfs+0x780>
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    b102:	f107 0801 	add.w	r8, r7, #1
    b106:	2301      	movs	r3, #1
    b108:	463a      	mov	r2, r7
    b10a:	4659      	mov	r1, fp
    b10c:	4650      	mov	r0, sl
    b10e:	f000 fab3 	bl	b678 <disk_write>
    b112:	b9c0      	cbnz	r0, b146 <f_mkfs+0x7d6>
		for (n = 0; n < 2; n++) {
    b114:	f109 0901 	add.w	r9, r9, #1
    b118:	e70d      	b.n	af36 <f_mkfs+0x5c6>
		if (sz_vol < 0x1000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume for exFAT? */
    b11a:	200e      	movs	r0, #14
    b11c:	e219      	b.n	b552 <f_mkfs+0xbe2>
		if (b_data - b_vol >= sz_vol / 2) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
    b11e:	200e      	movs	r0, #14
    b120:	e217      	b.n	b552 <f_mkfs+0xbe2>
		if (n_clst <16) LEAVE_MKFS(FR_MKFS_ABORTED);			/* Too few clusters? */
    b122:	200e      	movs	r0, #14
    b124:	e215      	b.n	b552 <f_mkfs+0xbe2>
		if (n_clst > MAX_EXFAT) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters? */
    b126:	200e      	movs	r0, #14
    b128:	e213      	b.n	b552 <f_mkfs+0xbe2>
				if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    b12a:	2001      	movs	r0, #1
    b12c:	e211      	b.n	b552 <f_mkfs+0xbe2>
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    b12e:	2001      	movs	r0, #1
    b130:	e20f      	b.n	b552 <f_mkfs+0xbe2>
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    b132:	2001      	movs	r0, #1
    b134:	e20d      	b.n	b552 <f_mkfs+0xbe2>
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    b136:	2001      	movs	r0, #1
    b138:	e20b      	b.n	b552 <f_mkfs+0xbe2>
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    b13a:	2001      	movs	r0, #1
    b13c:	e209      	b.n	b552 <f_mkfs+0xbe2>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    b13e:	2001      	movs	r0, #1
    b140:	e207      	b.n	b552 <f_mkfs+0xbe2>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    b142:	2001      	movs	r0, #1
    b144:	e205      	b.n	b552 <f_mkfs+0xbe2>
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    b146:	2001      	movs	r0, #1
    b148:	e203      	b.n	b552 <f_mkfs+0xbe2>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
    b14a:	469b      	mov	fp, r3
    b14c:	e4c5      	b.n	aada <f_mkfs+0x16a>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
    b14e:	2403      	movs	r4, #3
				if (pau == 0) {	/* AU auto-selection */
    b150:	f1bb 0f00 	cmp.w	fp, #0
    b154:	d012      	beq.n	b17c <f_mkfs+0x80c>
    b156:	465f      	mov	r7, fp
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
    b158:	fbb1 f3f7 	udiv	r3, r1, r7
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
    b15c:	1c9d      	adds	r5, r3, #2
    b15e:	00ad      	lsls	r5, r5, #2
    b160:	f205 15ff 	addw	r5, r5, #511	; 0x1ff
    b164:	0a6d      	lsrs	r5, r5, #9
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
    b166:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
    b16a:	3bf6      	subs	r3, #246	; 0xf6
    b16c:	4a27      	ldr	r2, [pc, #156]	; (b20c <f_mkfs+0x89c>)
    b16e:	4293      	cmp	r3, r2
    b170:	f200 81fe 	bhi.w	b570 <f_mkfs+0xc00>
				sz_dir = 0;		/* No static directory */
    b174:	f04f 0e00 	mov.w	lr, #0
				sz_rsv = 32;	/* Number of reserved sectors */
    b178:	2020      	movs	r0, #32
    b17a:	e4c5      	b.n	ab08 <f_mkfs+0x198>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
    b17c:	0c48      	lsrs	r0, r1, #17
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
    b17e:	465a      	mov	r2, fp
    b180:	2701      	movs	r7, #1
    b182:	4b23      	ldr	r3, [pc, #140]	; (b210 <f_mkfs+0x8a0>)
    b184:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    b188:	2b00      	cmp	r3, #0
    b18a:	d0e5      	beq.n	b158 <f_mkfs+0x7e8>
    b18c:	4283      	cmp	r3, r0
    b18e:	d8e3      	bhi.n	b158 <f_mkfs+0x7e8>
    b190:	3201      	adds	r2, #1
    b192:	007f      	lsls	r7, r7, #1
    b194:	e7f5      	b.n	b182 <f_mkfs+0x812>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
    b196:	0b08      	lsrs	r0, r1, #12
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
    b198:	465a      	mov	r2, fp
    b19a:	2701      	movs	r7, #1
    b19c:	e001      	b.n	b1a2 <f_mkfs+0x832>
    b19e:	3201      	adds	r2, #1
    b1a0:	007f      	lsls	r7, r7, #1
    b1a2:	4b1c      	ldr	r3, [pc, #112]	; (b214 <f_mkfs+0x8a4>)
    b1a4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    b1a8:	2b00      	cmp	r3, #0
    b1aa:	f43f ac9e 	beq.w	aaea <f_mkfs+0x17a>
    b1ae:	4283      	cmp	r3, r0
    b1b0:	d9f5      	bls.n	b19e <f_mkfs+0x82e>
    b1b2:	e49a      	b.n	aaea <f_mkfs+0x17a>
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
    b1b4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    b1b8:	3501      	adds	r5, #1
    b1ba:	086d      	lsrs	r5, r5, #1
    b1bc:	3503      	adds	r5, #3
					fsty = FS_FAT12;
    b1be:	2401      	movs	r4, #1
    b1c0:	e49c      	b.n	aafc <f_mkfs+0x18c>
				sz_rsv += n; b_fat += n;
    b1c2:	4418      	add	r0, r3
    b1c4:	449c      	add	ip, r3
    b1c6:	e4c0      	b.n	ab4a <f_mkfs+0x1da>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
    b1c8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
    b1cc:	4293      	cmp	r3, r2
    b1ce:	f63f accd 	bhi.w	ab6c <f_mkfs+0x1fc>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
    b1d2:	f1bb 0f00 	cmp.w	fp, #0
    b1d6:	f040 81cf 	bne.w	b578 <f_mkfs+0xc08>
    b1da:	ea4f 0b57 	mov.w	fp, r7, lsr #1
    b1de:	2f01      	cmp	r7, #1
    b1e0:	f63f ac7b 	bhi.w	aada <f_mkfs+0x16a>
					LEAVE_MKFS(FR_MKFS_ABORTED);
    b1e4:	200e      	movs	r0, #14
    b1e6:	e1b4      	b.n	b552 <f_mkfs+0xbe2>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
    b1e8:	f640 72f5 	movw	r2, #4085	; 0xff5
    b1ec:	4293      	cmp	r3, r2
    b1ee:	d813      	bhi.n	b218 <f_mkfs+0x8a8>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
    b1f0:	f1bb 0f00 	cmp.w	fp, #0
    b1f4:	f040 81c4 	bne.w	b580 <f_mkfs+0xc10>
    b1f8:	ea4f 0b47 	mov.w	fp, r7, lsl #1
    b1fc:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
    b200:	f67f ac6b 	bls.w	aada <f_mkfs+0x16a>
					LEAVE_MKFS(FR_MKFS_ABORTED);
    b204:	200e      	movs	r0, #14
    b206:	e1a4      	b.n	b552 <f_mkfs+0xbe2>
    b208:	00016a40 	.word	0x00016a40
    b20c:	0ffeffff 	.word	0x0ffeffff
    b210:	00016b88 	.word	0x00016b88
    b214:	00016b78 	.word	0x00016b78
    b218:	4622      	mov	r2, r4
    b21a:	9404      	str	r4, [sp, #16]
    b21c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    b220:	900a      	str	r0, [sp, #40]	; 0x28
    b222:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    b226:	f8dd a014 	ldr.w	sl, [sp, #20]
    b22a:	9305      	str	r3, [sp, #20]
    b22c:	f8dd b020 	ldr.w	fp, [sp, #32]
    b230:	9c01      	ldr	r4, [sp, #4]
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
    b232:	2a01      	cmp	r2, #1
    b234:	f000 80bb 	beq.w	b3ae <f_mkfs+0xa3e>
    b238:	f44f 7900 	mov.w	r9, #512	; 0x200
    b23c:	464a      	mov	r2, r9
    b23e:	2100      	movs	r1, #0
    b240:	4658      	mov	r0, fp
    b242:	f009 fc0c 	bl	14a5e <memset>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    b246:	4bcf      	ldr	r3, [pc, #828]	; (b584 <f_mkfs+0xc14>)
    b248:	cb03      	ldmia	r3!, {r0, r1}
    b24a:	f8cb 0000 	str.w	r0, [fp]
    b24e:	f8cb 1004 	str.w	r1, [fp, #4]
    b252:	881a      	ldrh	r2, [r3, #0]
    b254:	789b      	ldrb	r3, [r3, #2]
    b256:	f8ab 2008 	strh.w	r2, [fp, #8]
    b25a:	f88b 300a 	strb.w	r3, [fp, #10]
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		memset(buf, 0, ss);
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
    b25e:	4649      	mov	r1, r9
    b260:	f10b 000b 	add.w	r0, fp, #11
    b264:	f007 fa01 	bl	1266a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
    b268:	f88b 700d 	strb.w	r7, [fp, #13]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
    b26c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
    b270:	f10b 000e 	add.w	r0, fp, #14
    b274:	f007 f9f9 	bl	1266a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
    b278:	f88b 6010 	strb.w	r6, [fp, #16]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
    b27c:	f10b 0011 	add.w	r0, fp, #17
    b280:	9b04      	ldr	r3, [sp, #16]
    b282:	2b03      	cmp	r3, #3
    b284:	f000 809b 	beq.w	b3be <f_mkfs+0xa4e>
    b288:	fa1f f188 	uxth.w	r1, r8
    b28c:	f007 f9ed 	bl	1266a <st_word>
		if (sz_vol < 0x10000) {
    b290:	991a      	ldr	r1, [sp, #104]	; 0x68
    b292:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    b296:	f080 8094 	bcs.w	b3c2 <f_mkfs+0xa52>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
    b29a:	b289      	uxth	r1, r1
    b29c:	f10b 0013 	add.w	r0, fp, #19
    b2a0:	f007 f9e3 	bl	1266a <st_word>
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
    b2a4:	23f8      	movs	r3, #248	; 0xf8
    b2a6:	f88b 3015 	strb.w	r3, [fp, #21]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
    b2aa:	213f      	movs	r1, #63	; 0x3f
    b2ac:	f10b 0018 	add.w	r0, fp, #24
    b2b0:	f007 f9db 	bl	1266a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
    b2b4:	21ff      	movs	r1, #255	; 0xff
    b2b6:	f10b 001a 	add.w	r0, fp, #26
    b2ba:	f007 f9d6 	bl	1266a <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
    b2be:	9902      	ldr	r1, [sp, #8]
    b2c0:	f10b 001c 	add.w	r0, fp, #28
    b2c4:	f007 f9d5 	bl	12672 <st_dword>
		if (fsty == FS_FAT32) {
    b2c8:	9b04      	ldr	r3, [sp, #16]
    b2ca:	2b03      	cmp	r3, #3
    b2cc:	d07e      	beq.n	b3cc <f_mkfs+0xa5c>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
    b2ce:	9907      	ldr	r1, [sp, #28]
    b2d0:	f10b 0027 	add.w	r0, fp, #39	; 0x27
    b2d4:	f007 f9cd 	bl	12672 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
    b2d8:	b2a9      	uxth	r1, r5
    b2da:	f10b 0016 	add.w	r0, fp, #22
    b2de:	f007 f9c4 	bl	1266a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
    b2e2:	2380      	movs	r3, #128	; 0x80
    b2e4:	f88b 3024 	strb.w	r3, [fp, #36]	; 0x24
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
    b2e8:	2329      	movs	r3, #41	; 0x29
    b2ea:	f88b 3026 	strb.w	r3, [fp, #38]	; 0x26
    b2ee:	f8df c2a4 	ldr.w	ip, [pc, #676]	; b594 <f_mkfs+0xc24>
    b2f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    b2f6:	f8cb 002b 	str.w	r0, [fp, #43]	; 0x2b
    b2fa:	f8cb 102f 	str.w	r1, [fp, #47]	; 0x2f
    b2fe:	f8cb 2033 	str.w	r2, [fp, #51]	; 0x33
    b302:	f8cb 3037 	str.w	r3, [fp, #55]	; 0x37
    b306:	f8bc 2000 	ldrh.w	r2, [ip]
    b30a:	f89c 3002 	ldrb.w	r3, [ip, #2]
    b30e:	f8ab 203b 	strh.w	r2, [fp, #59]	; 0x3b
    b312:	f88b 303d 	strb.w	r3, [fp, #61]	; 0x3d
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
    b316:	f50b 78ff 	add.w	r8, fp, #510	; 0x1fe
    b31a:	f64a 2155 	movw	r1, #43605	; 0xaa55
    b31e:	4640      	mov	r0, r8
    b320:	f007 f9a3 	bl	1266a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
    b324:	2301      	movs	r3, #1
    b326:	9a02      	ldr	r2, [sp, #8]
    b328:	4659      	mov	r1, fp
    b32a:	4650      	mov	r0, sl
    b32c:	f000 f9a4 	bl	b678 <disk_write>
    b330:	2800      	cmp	r0, #0
    b332:	f040 8133 	bne.w	b59c <f_mkfs+0xc2c>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
    b336:	9b04      	ldr	r3, [sp, #16]
    b338:	2b03      	cmp	r3, #3
    b33a:	d07b      	beq.n	b434 <f_mkfs+0xac4>
__ssp_bos_icheck3(memset, void *, int)
    b33c:	f424 72ff 	bic.w	r2, r4, #510	; 0x1fe
    b340:	f022 0201 	bic.w	r2, r2, #1
    b344:	2100      	movs	r1, #0
    b346:	4658      	mov	r0, fp
    b348:	f009 fb89 	bl	14a5e <memset>
    b34c:	f04f 0900 	mov.w	r9, #0
    b350:	9702      	str	r7, [sp, #8]
    b352:	9f09      	ldr	r7, [sp, #36]	; 0x24
    b354:	9501      	str	r5, [sp, #4]
    b356:	f8dd 800c 	ldr.w	r8, [sp, #12]
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
		sect = b_fat;		/* FAT start sector */
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
    b35a:	45b1      	cmp	r9, r6
    b35c:	f080 80b3 	bcs.w	b4c6 <f_mkfs+0xb56>
			if (fsty == FS_FAT32) {
    b360:	9b04      	ldr	r3, [sp, #16]
    b362:	2b03      	cmp	r3, #3
    b364:	f000 809b 	beq.w	b49e <f_mkfs+0xb2e>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
    b368:	9b04      	ldr	r3, [sp, #16]
    b36a:	2b01      	cmp	r3, #1
    b36c:	f000 80a9 	beq.w	b4c2 <f_mkfs+0xb52>
    b370:	f06f 0107 	mvn.w	r1, #7
    b374:	4658      	mov	r0, fp
    b376:	f007 f97c 	bl	12672 <st_dword>
    b37a:	9d01      	ldr	r5, [sp, #4]
			}
			nsect = sz_fat;		/* Number of FAT sectors */
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
    b37c:	462c      	mov	r4, r5
    b37e:	4545      	cmp	r5, r8
    b380:	bf28      	it	cs
    b382:	4644      	movcs	r4, r8
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    b384:	4623      	mov	r3, r4
    b386:	463a      	mov	r2, r7
    b388:	4659      	mov	r1, fp
    b38a:	4650      	mov	r0, sl
    b38c:	f000 f974 	bl	b678 <disk_write>
    b390:	2800      	cmp	r0, #0
    b392:	f040 8105 	bne.w	b5a0 <f_mkfs+0xc30>
    b396:	f44f 7200 	mov.w	r2, #512	; 0x200
    b39a:	2100      	movs	r1, #0
    b39c:	4658      	mov	r0, fp
    b39e:	f009 fb5e 	bl	14a5e <memset>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
				sect += n; nsect -= n;
    b3a2:	4427      	add	r7, r4
			} while (nsect);
    b3a4:	1b2d      	subs	r5, r5, r4
    b3a6:	d1e9      	bne.n	b37c <f_mkfs+0xa0c>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
    b3a8:	f109 0901 	add.w	r9, r9, #1
    b3ac:	e7d5      	b.n	b35a <f_mkfs+0x9ea>
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
    b3ae:	f640 73f5 	movw	r3, #4085	; 0xff5
    b3b2:	9a05      	ldr	r2, [sp, #20]
    b3b4:	429a      	cmp	r2, r3
    b3b6:	f67f af3f 	bls.w	b238 <f_mkfs+0x8c8>
    b3ba:	200e      	movs	r0, #14
    b3bc:	e0c9      	b.n	b552 <f_mkfs+0xbe2>
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
    b3be:	2100      	movs	r1, #0
    b3c0:	e764      	b.n	b28c <f_mkfs+0x91c>
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
    b3c2:	f10b 0020 	add.w	r0, fp, #32
    b3c6:	f007 f954 	bl	12672 <st_dword>
    b3ca:	e76b      	b.n	b2a4 <f_mkfs+0x934>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
    b3cc:	9907      	ldr	r1, [sp, #28]
    b3ce:	f10b 0043 	add.w	r0, fp, #67	; 0x43
    b3d2:	f007 f94e 	bl	12672 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
    b3d6:	4629      	mov	r1, r5
    b3d8:	f10b 0024 	add.w	r0, fp, #36	; 0x24
    b3dc:	f007 f949 	bl	12672 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
    b3e0:	2102      	movs	r1, #2
    b3e2:	f10b 002c 	add.w	r0, fp, #44	; 0x2c
    b3e6:	f007 f944 	bl	12672 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
    b3ea:	2101      	movs	r1, #1
    b3ec:	f10b 0030 	add.w	r0, fp, #48	; 0x30
    b3f0:	f007 f93b 	bl	1266a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
    b3f4:	2106      	movs	r1, #6
    b3f6:	f10b 0032 	add.w	r0, fp, #50	; 0x32
    b3fa:	f007 f936 	bl	1266a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
    b3fe:	2380      	movs	r3, #128	; 0x80
    b400:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
    b404:	2329      	movs	r3, #41	; 0x29
    b406:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    b40a:	f8df c18c 	ldr.w	ip, [pc, #396]	; b598 <f_mkfs+0xc28>
    b40e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    b412:	f8cb 0047 	str.w	r0, [fp, #71]	; 0x47
    b416:	f8cb 104b 	str.w	r1, [fp, #75]	; 0x4b
    b41a:	f8cb 204f 	str.w	r2, [fp, #79]	; 0x4f
    b41e:	f8cb 3053 	str.w	r3, [fp, #83]	; 0x53
    b422:	f8bc 2000 	ldrh.w	r2, [ip]
    b426:	f89c 3002 	ldrb.w	r3, [ip, #2]
    b42a:	f8ab 2057 	strh.w	r2, [fp, #87]	; 0x57
    b42e:	f88b 3059 	strb.w	r3, [fp, #89]	; 0x59
    b432:	e770      	b.n	b316 <f_mkfs+0x9a6>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
    b434:	2301      	movs	r3, #1
    b436:	9a02      	ldr	r2, [sp, #8]
    b438:	3206      	adds	r2, #6
    b43a:	4659      	mov	r1, fp
    b43c:	4650      	mov	r0, sl
    b43e:	f000 f91b 	bl	b678 <disk_write>
__ssp_bos_icheck3(memset, void *, int)
    b442:	f44f 7200 	mov.w	r2, #512	; 0x200
    b446:	2100      	movs	r1, #0
    b448:	4658      	mov	r0, fp
    b44a:	f009 fb08 	bl	14a5e <memset>
			st_dword(buf + FSI_LeadSig, 0x41615252);
    b44e:	494e      	ldr	r1, [pc, #312]	; (b588 <f_mkfs+0xc18>)
    b450:	4658      	mov	r0, fp
    b452:	f007 f90e 	bl	12672 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
    b456:	494d      	ldr	r1, [pc, #308]	; (b58c <f_mkfs+0xc1c>)
    b458:	f50b 70f2 	add.w	r0, fp, #484	; 0x1e4
    b45c:	f007 f909 	bl	12672 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
    b460:	9b05      	ldr	r3, [sp, #20]
    b462:	1e59      	subs	r1, r3, #1
    b464:	f50b 70f4 	add.w	r0, fp, #488	; 0x1e8
    b468:	f007 f903 	bl	12672 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
    b46c:	2102      	movs	r1, #2
    b46e:	f50b 70f6 	add.w	r0, fp, #492	; 0x1ec
    b472:	f007 f8fe 	bl	12672 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
    b476:	f64a 2155 	movw	r1, #43605	; 0xaa55
    b47a:	4640      	mov	r0, r8
    b47c:	f007 f8f5 	bl	1266a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
    b480:	2301      	movs	r3, #1
    b482:	9a02      	ldr	r2, [sp, #8]
    b484:	3207      	adds	r2, #7
    b486:	4659      	mov	r1, fp
    b488:	4650      	mov	r0, sl
    b48a:	f000 f8f5 	bl	b678 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
    b48e:	2301      	movs	r3, #1
    b490:	9a02      	ldr	r2, [sp, #8]
    b492:	441a      	add	r2, r3
    b494:	4659      	mov	r1, fp
    b496:	4650      	mov	r0, sl
    b498:	f000 f8ee 	bl	b678 <disk_write>
    b49c:	e74e      	b.n	b33c <f_mkfs+0x9cc>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
    b49e:	f06f 0107 	mvn.w	r1, #7
    b4a2:	4658      	mov	r0, fp
    b4a4:	f007 f8e5 	bl	12672 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
    b4a8:	f04f 31ff 	mov.w	r1, #4294967295
    b4ac:	f10b 0004 	add.w	r0, fp, #4
    b4b0:	f007 f8df 	bl	12672 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
    b4b4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
    b4b8:	f10b 0008 	add.w	r0, fp, #8
    b4bc:	f007 f8d9 	bl	12672 <st_dword>
    b4c0:	e75b      	b.n	b37a <f_mkfs+0xa0a>
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
    b4c2:	4933      	ldr	r1, [pc, #204]	; (b590 <f_mkfs+0xc20>)
    b4c4:	e756      	b.n	b374 <f_mkfs+0xa04>
    b4c6:	9709      	str	r7, [sp, #36]	; 0x24
    b4c8:	9f02      	ldr	r7, [sp, #8]
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
    b4ca:	9b04      	ldr	r3, [sp, #16]
    b4cc:	2b03      	cmp	r3, #3
    b4ce:	d01e      	beq.n	b50e <f_mkfs+0xb9e>
    b4d0:	9e09      	ldr	r6, [sp, #36]	; 0x24
    b4d2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b4d4:	9f03      	ldr	r7, [sp, #12]
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
    b4d6:	462c      	mov	r4, r5
    b4d8:	42bd      	cmp	r5, r7
    b4da:	bf28      	it	cs
    b4dc:	463c      	movcs	r4, r7
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    b4de:	4623      	mov	r3, r4
    b4e0:	4632      	mov	r2, r6
    b4e2:	4659      	mov	r1, fp
    b4e4:	4650      	mov	r0, sl
    b4e6:	f000 f8c7 	bl	b678 <disk_write>
    b4ea:	2800      	cmp	r0, #0
    b4ec:	d15a      	bne.n	b5a4 <f_mkfs+0xc34>
			sect += n; nsect -= n;
    b4ee:	4426      	add	r6, r4
		} while (nsect);
    b4f0:	1b2d      	subs	r5, r5, r4
    b4f2:	d1f0      	bne.n	b4d6 <f_mkfs+0xb66>
	}

	/* A FAT volume has been created here */

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
    b4f4:	9a04      	ldr	r2, [sp, #16]
    b4f6:	2a04      	cmp	r2, #4
    b4f8:	d00f      	beq.n	b51a <f_mkfs+0xbaa>
		sys = 0x07;			/* exFAT */
	} else {
		if (fsty == FS_FAT32) {
    b4fa:	2a03      	cmp	r2, #3
    b4fc:	d022      	beq.n	b544 <f_mkfs+0xbd4>
			sys = 0x0C;		/* FAT32X */
		} else {
			if (sz_vol >= 0x10000) {
    b4fe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    b500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    b504:	d220      	bcs.n	b548 <f_mkfs+0xbd8>
				sys = 0x06;	/* FAT12/16 (large) */
			} else {
				sys = (fsty == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 : FAT12 */
    b506:	2a02      	cmp	r2, #2
    b508:	d005      	beq.n	b516 <f_mkfs+0xba6>
    b50a:	2201      	movs	r2, #1
    b50c:	e006      	b.n	b51c <f_mkfs+0xbac>
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
    b50e:	463d      	mov	r5, r7
    b510:	9e09      	ldr	r6, [sp, #36]	; 0x24
    b512:	9f03      	ldr	r7, [sp, #12]
    b514:	e7df      	b.n	b4d6 <f_mkfs+0xb66>
				sys = (fsty == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 : FAT12 */
    b516:	2204      	movs	r2, #4
    b518:	e000      	b.n	b51c <f_mkfs+0xbac>
		sys = 0x07;			/* exFAT */
    b51a:	2207      	movs	r2, #7
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD */
    b51c:	9b06      	ldr	r3, [sp, #24]
    b51e:	b94b      	cbnz	r3, b534 <f_mkfs+0xbc4>
			lba[0] = sz_vol; lba[1] = 0;
    b520:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    b522:	9318      	str	r3, [sp, #96]	; 0x60
    b524:	2300      	movs	r3, #0
    b526:	9319      	str	r3, [sp, #100]	; 0x64
			fr = create_partition(pdrv, lba, sys, buf);
    b528:	465b      	mov	r3, fp
    b52a:	a918      	add	r1, sp, #96	; 0x60
    b52c:	4650      	mov	r0, sl
    b52e:	f7fe fead 	bl	a28c <create_partition>
			if (fr != FR_OK) LEAVE_MKFS(fr);
    b532:	b970      	cbnz	r0, b552 <f_mkfs+0xbe2>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    b534:	2200      	movs	r2, #0
    b536:	4611      	mov	r1, r2
    b538:	4650      	mov	r0, sl
    b53a:	f000 f8c5 	bl	b6c8 <disk_ioctl>
    b53e:	b140      	cbz	r0, b552 <f_mkfs+0xbe2>
    b540:	2001      	movs	r0, #1
    b542:	e006      	b.n	b552 <f_mkfs+0xbe2>
			sys = 0x0C;		/* FAT32X */
    b544:	220c      	movs	r2, #12
    b546:	e7e9      	b.n	b51c <f_mkfs+0xbac>
				sys = 0x06;	/* FAT12/16 (large) */
    b548:	2206      	movs	r2, #6
    b54a:	e7e7      	b.n	b51c <f_mkfs+0xbac>
	if (vol < 0) return FR_INVALID_DRIVE;
    b54c:	200b      	movs	r0, #11
    b54e:	e000      	b.n	b552 <f_mkfs+0xbe2>
	if (ds & STA_NOINIT) return FR_NOT_READY;
    b550:	2003      	movs	r0, #3

	LEAVE_MKFS(FR_OK);
}
    b552:	b01d      	add	sp, #116	; 0x74
    b554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
    b558:	200a      	movs	r0, #10
    b55a:	e7fa      	b.n	b552 <f_mkfs+0xbe2>
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
    b55c:	2011      	movs	r0, #17
    b55e:	e7f8      	b.n	b552 <f_mkfs+0xbe2>
	if (!buf) return FR_NOT_ENOUGH_CORE;
    b560:	2011      	movs	r0, #17
    b562:	e7f6      	b.n	b552 <f_mkfs+0xbe2>
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    b564:	2001      	movs	r0, #1
    b566:	e7f4      	b.n	b552 <f_mkfs+0xbe2>
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
    b568:	200e      	movs	r0, #14
    b56a:	e7f2      	b.n	b552 <f_mkfs+0xbe2>
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
    b56c:	2013      	movs	r0, #19
    b56e:	e7f0      	b.n	b552 <f_mkfs+0xbe2>
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
    b570:	200e      	movs	r0, #14
    b572:	e7ee      	b.n	b552 <f_mkfs+0xbe2>
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
    b574:	200e      	movs	r0, #14
    b576:	e7ec      	b.n	b552 <f_mkfs+0xbe2>
					LEAVE_MKFS(FR_MKFS_ABORTED);
    b578:	200e      	movs	r0, #14
    b57a:	e7ea      	b.n	b552 <f_mkfs+0xbe2>
					LEAVE_MKFS(FR_MKFS_ABORTED);
    b57c:	200e      	movs	r0, #14
    b57e:	e7e8      	b.n	b552 <f_mkfs+0xbe2>
					LEAVE_MKFS(FR_MKFS_ABORTED);
    b580:	200e      	movs	r0, #14
    b582:	e7e6      	b.n	b552 <f_mkfs+0xbe2>
    b584:	00016a6c 	.word	0x00016a6c
    b588:	41615252 	.word	0x41615252
    b58c:	61417272 	.word	0x61417272
    b590:	00fffff8 	.word	0x00fffff8
    b594:	00016a8c 	.word	0x00016a8c
    b598:	00016a78 	.word	0x00016a78
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
    b59c:	2001      	movs	r0, #1
    b59e:	e7d8      	b.n	b552 <f_mkfs+0xbe2>
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    b5a0:	2001      	movs	r0, #1
    b5a2:	e7d6      	b.n	b552 <f_mkfs+0xbe2>
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    b5a4:	2001      	movs	r0, #1
    b5a6:	e7d4      	b.n	b552 <f_mkfs+0xbe2>

0000b5a8 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Drive Status                                                      */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE pdrv)
{
    b5a8:	b538      	push	{r3, r4, r5, lr}
    b5aa:	4604      	mov	r4, r0
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");
    b5ac:	2807      	cmp	r0, #7
    b5ae:	d807      	bhi.n	b5c0 <disk_status+0x18>

	if (disk_access_status(pdrv_str[pdrv]) != 0) {
    b5b0:	4b0a      	ldr	r3, [pc, #40]	; (b5dc <disk_status+0x34>)
    b5b2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    b5b6:	f006 f9bd 	bl	11934 <disk_access_status>
    b5ba:	b160      	cbz	r0, b5d6 <disk_status+0x2e>
		return STA_NOINIT;
    b5bc:	2001      	movs	r0, #1
	} else {
		return RES_OK;
	}
}
    b5be:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");
    b5c0:	4d07      	ldr	r5, [pc, #28]	; (b5e0 <disk_status+0x38>)
    b5c2:	2229      	movs	r2, #41	; 0x29
    b5c4:	4629      	mov	r1, r5
    b5c6:	4807      	ldr	r0, [pc, #28]	; (b5e4 <disk_status+0x3c>)
    b5c8:	f005 fd2e 	bl	11028 <printk>
    b5cc:	2129      	movs	r1, #41	; 0x29
    b5ce:	4628      	mov	r0, r5
    b5d0:	f005 fe4c 	bl	1126c <assert_post_action>
    b5d4:	e7ec      	b.n	b5b0 <disk_status+0x8>
		return RES_OK;
    b5d6:	2000      	movs	r0, #0
    b5d8:	e7f1      	b.n	b5be <disk_status+0x16>
    b5da:	bf00      	nop
    b5dc:	00016bd4 	.word	0x00016bd4
    b5e0:	00016ba8 	.word	0x00016ba8
    b5e4:	00015984 	.word	0x00015984

0000b5e8 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize a Drive                                                    */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE pdrv)
{
    b5e8:	b538      	push	{r3, r4, r5, lr}
    b5ea:	4604      	mov	r4, r0
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");
    b5ec:	2807      	cmp	r0, #7
    b5ee:	d807      	bhi.n	b600 <disk_initialize+0x18>

	if (disk_access_init(pdrv_str[pdrv]) != 0) {
    b5f0:	4b0a      	ldr	r3, [pc, #40]	; (b61c <disk_initialize+0x34>)
    b5f2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    b5f6:	f006 f98a 	bl	1190e <disk_access_init>
    b5fa:	b160      	cbz	r0, b616 <disk_initialize+0x2e>
		return STA_NOINIT;
    b5fc:	2001      	movs	r0, #1
	} else {
		return RES_OK;
	}
}
    b5fe:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");
    b600:	4d07      	ldr	r5, [pc, #28]	; (b620 <disk_initialize+0x38>)
    b602:	2238      	movs	r2, #56	; 0x38
    b604:	4629      	mov	r1, r5
    b606:	4807      	ldr	r0, [pc, #28]	; (b624 <disk_initialize+0x3c>)
    b608:	f005 fd0e 	bl	11028 <printk>
    b60c:	2138      	movs	r1, #56	; 0x38
    b60e:	4628      	mov	r0, r5
    b610:	f005 fe2c 	bl	1126c <assert_post_action>
    b614:	e7ec      	b.n	b5f0 <disk_initialize+0x8>
		return RES_OK;
    b616:	2000      	movs	r0, #0
    b618:	e7f1      	b.n	b5fe <disk_initialize+0x16>
    b61a:	bf00      	nop
    b61c:	00016bd4 	.word	0x00016bd4
    b620:	00016ba8 	.word	0x00016ba8
    b624:	00015984 	.word	0x00015984

0000b628 <disk_read>:
/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
    b628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b62c:	4604      	mov	r4, r0
    b62e:	460d      	mov	r5, r1
    b630:	4616      	mov	r6, r2
    b632:	461f      	mov	r7, r3
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");
    b634:	2807      	cmp	r0, #7
    b636:	d80b      	bhi.n	b650 <disk_read+0x28>

	if (disk_access_read(pdrv_str[pdrv], buff, sector, count) != 0) {
    b638:	463b      	mov	r3, r7
    b63a:	4632      	mov	r2, r6
    b63c:	4629      	mov	r1, r5
    b63e:	480b      	ldr	r0, [pc, #44]	; (b66c <disk_read+0x44>)
    b640:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    b644:	f006 f989 	bl	1195a <disk_access_read>
    b648:	b170      	cbz	r0, b668 <disk_read+0x40>
		return RES_ERROR;
    b64a:	2001      	movs	r0, #1
	} else {
		return RES_OK;
	}

}
    b64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");
    b650:	f8df 8020 	ldr.w	r8, [pc, #32]	; b674 <disk_read+0x4c>
    b654:	2247      	movs	r2, #71	; 0x47
    b656:	4641      	mov	r1, r8
    b658:	4805      	ldr	r0, [pc, #20]	; (b670 <disk_read+0x48>)
    b65a:	f005 fce5 	bl	11028 <printk>
    b65e:	2147      	movs	r1, #71	; 0x47
    b660:	4640      	mov	r0, r8
    b662:	f005 fe03 	bl	1126c <assert_post_action>
    b666:	e7e7      	b.n	b638 <disk_read+0x10>
		return RES_OK;
    b668:	2000      	movs	r0, #0
    b66a:	e7ef      	b.n	b64c <disk_read+0x24>
    b66c:	00016bd4 	.word	0x00016bd4
    b670:	00015984 	.word	0x00015984
    b674:	00016ba8 	.word	0x00016ba8

0000b678 <disk_write>:

/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/
DRESULT disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
    b678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b67c:	4604      	mov	r4, r0
    b67e:	460d      	mov	r5, r1
    b680:	4616      	mov	r6, r2
    b682:	461f      	mov	r7, r3
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");
    b684:	2807      	cmp	r0, #7
    b686:	d80b      	bhi.n	b6a0 <disk_write+0x28>

	if(disk_access_write(pdrv_str[pdrv], buff, sector, count) != 0) {
    b688:	463b      	mov	r3, r7
    b68a:	4632      	mov	r2, r6
    b68c:	4629      	mov	r1, r5
    b68e:	480b      	ldr	r0, [pc, #44]	; (b6bc <disk_write+0x44>)
    b690:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    b694:	f006 f97f 	bl	11996 <disk_access_write>
    b698:	b170      	cbz	r0, b6b8 <disk_write+0x40>
		return RES_ERROR;
    b69a:	2001      	movs	r0, #1
	} else {
		return RES_OK;
	}
}
    b69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");
    b6a0:	f8df 8020 	ldr.w	r8, [pc, #32]	; b6c4 <disk_write+0x4c>
    b6a4:	2256      	movs	r2, #86	; 0x56
    b6a6:	4641      	mov	r1, r8
    b6a8:	4805      	ldr	r0, [pc, #20]	; (b6c0 <disk_write+0x48>)
    b6aa:	f005 fcbd 	bl	11028 <printk>
    b6ae:	2156      	movs	r1, #86	; 0x56
    b6b0:	4640      	mov	r0, r8
    b6b2:	f005 fddb 	bl	1126c <assert_post_action>
    b6b6:	e7e7      	b.n	b688 <disk_write+0x10>
		return RES_OK;
    b6b8:	2000      	movs	r0, #0
    b6ba:	e7ef      	b.n	b69c <disk_write+0x24>
    b6bc:	00016bd4 	.word	0x00016bd4
    b6c0:	00015984 	.word	0x00015984
    b6c4:	00016ba8 	.word	0x00016ba8

0000b6c8 <disk_ioctl>:
/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE pdrv, BYTE cmd, void *buff)
{
    b6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b6ca:	b083      	sub	sp, #12
    b6cc:	4605      	mov	r5, r0
    b6ce:	460c      	mov	r4, r1
    b6d0:	4616      	mov	r6, r2
	int ret = RES_OK;
	uint32_t sector_size = 0;
    b6d2:	2300      	movs	r3, #0
    b6d4:	9301      	str	r3, [sp, #4]

	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");
    b6d6:	2807      	cmp	r0, #7
    b6d8:	d805      	bhi.n	b6e6 <disk_ioctl+0x1e>

	switch (cmd) {
    b6da:	2c03      	cmp	r4, #3
    b6dc:	d843      	bhi.n	b766 <disk_ioctl+0x9e>
    b6de:	e8df f004 	tbb	[pc, r4]
    b6e2:	190d      	.short	0x190d
    b6e4:	3625      	.short	0x3625
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");
    b6e6:	4f23      	ldr	r7, [pc, #140]	; (b774 <disk_ioctl+0xac>)
    b6e8:	2268      	movs	r2, #104	; 0x68
    b6ea:	4639      	mov	r1, r7
    b6ec:	4822      	ldr	r0, [pc, #136]	; (b778 <disk_ioctl+0xb0>)
    b6ee:	f005 fc9b 	bl	11028 <printk>
    b6f2:	2168      	movs	r1, #104	; 0x68
    b6f4:	4638      	mov	r0, r7
    b6f6:	f005 fdb9 	bl	1126c <assert_post_action>
    b6fa:	e7ee      	b.n	b6da <disk_ioctl+0x12>
	case CTRL_SYNC:
		if(disk_access_ioctl(pdrv_str[pdrv],
    b6fc:	4632      	mov	r2, r6
    b6fe:	2105      	movs	r1, #5
    b700:	4b1e      	ldr	r3, [pc, #120]	; (b77c <disk_ioctl+0xb4>)
    b702:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    b706:	f006 f964 	bl	119d2 <disk_access_ioctl>
    b70a:	4603      	mov	r3, r0
    b70c:	bb68      	cbnz	r0, b76a <disk_ioctl+0xa2>
	default:
		ret = RES_PARERR;
		break;
	}
	return ret;
}
    b70e:	b2d8      	uxtb	r0, r3
    b710:	b003      	add	sp, #12
    b712:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (disk_access_ioctl(pdrv_str[pdrv],
    b714:	4632      	mov	r2, r6
    b716:	2101      	movs	r1, #1
    b718:	4b18      	ldr	r3, [pc, #96]	; (b77c <disk_ioctl+0xb4>)
    b71a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    b71e:	f006 f958 	bl	119d2 <disk_access_ioctl>
    b722:	4603      	mov	r3, r0
    b724:	2800      	cmp	r0, #0
    b726:	d0f2      	beq.n	b70e <disk_ioctl+0x46>
			ret = RES_ERROR;
    b728:	2301      	movs	r3, #1
    b72a:	e7f0      	b.n	b70e <disk_ioctl+0x46>
		if ((disk_access_ioctl(pdrv_str[pdrv],
    b72c:	aa01      	add	r2, sp, #4
    b72e:	2102      	movs	r1, #2
    b730:	4b12      	ldr	r3, [pc, #72]	; (b77c <disk_ioctl+0xb4>)
    b732:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    b736:	f006 f94c 	bl	119d2 <disk_access_ioctl>
    b73a:	4603      	mov	r3, r0
    b73c:	b9b8      	cbnz	r0, b76e <disk_ioctl+0xa6>
			(sector_size == (uint16_t)sector_size)) {
    b73e:	9a01      	ldr	r2, [sp, #4]
    b740:	b291      	uxth	r1, r2
				DISK_IOCTL_GET_SECTOR_SIZE, &sector_size) == 0) &&
    b742:	428a      	cmp	r2, r1
    b744:	d001      	beq.n	b74a <disk_ioctl+0x82>
			ret = RES_ERROR;
    b746:	2301      	movs	r3, #1
    b748:	e7e1      	b.n	b70e <disk_ioctl+0x46>
			*(uint16_t *)buff = (uint16_t)sector_size;
    b74a:	8031      	strh	r1, [r6, #0]
    b74c:	e7df      	b.n	b70e <disk_ioctl+0x46>
		if (disk_access_ioctl(pdrv_str[pdrv],
    b74e:	4632      	mov	r2, r6
    b750:	2104      	movs	r1, #4
    b752:	4b0a      	ldr	r3, [pc, #40]	; (b77c <disk_ioctl+0xb4>)
    b754:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    b758:	f006 f93b 	bl	119d2 <disk_access_ioctl>
    b75c:	4603      	mov	r3, r0
    b75e:	2800      	cmp	r0, #0
    b760:	d0d5      	beq.n	b70e <disk_ioctl+0x46>
			ret = RES_ERROR;
    b762:	2301      	movs	r3, #1
    b764:	e7d3      	b.n	b70e <disk_ioctl+0x46>
    b766:	2304      	movs	r3, #4
    b768:	e7d1      	b.n	b70e <disk_ioctl+0x46>
			ret = RES_ERROR;
    b76a:	2301      	movs	r3, #1
    b76c:	e7cf      	b.n	b70e <disk_ioctl+0x46>
			ret = RES_ERROR;
    b76e:	2301      	movs	r3, #1
    b770:	e7cd      	b.n	b70e <disk_ioctl+0x46>
    b772:	bf00      	nop
    b774:	00016ba8 	.word	0x00016ba8
    b778:	00015984 	.word	0x00015984
    b77c:	00016bd4 	.word	0x00016bd4

0000b780 <ff_uni2oem>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    b780:	287f      	cmp	r0, #127	; 0x7f
    b782:	d801      	bhi.n	b788 <ff_uni2oem+0x8>
		c = (WCHAR)uni;
    b784:	b280      	uxth	r0, r0
    b786:	4770      	bx	lr

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    b788:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    b78c:	d214      	bcs.n	b7b8 <ff_uni2oem+0x38>
    b78e:	f240 13b5 	movw	r3, #437	; 0x1b5
    b792:	4299      	cmp	r1, r3
    b794:	d00e      	beq.n	b7b4 <ff_uni2oem+0x34>
	WCHAR c = 0;
    b796:	2000      	movs	r0, #0
    b798:	4770      	bx	lr
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    b79a:	3301      	adds	r3, #1
    b79c:	b29b      	uxth	r3, r3
    b79e:	2b7f      	cmp	r3, #127	; 0x7f
    b7a0:	d804      	bhi.n	b7ac <ff_uni2oem+0x2c>
    b7a2:	4a06      	ldr	r2, [pc, #24]	; (b7bc <ff_uni2oem+0x3c>)
    b7a4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    b7a8:	4282      	cmp	r2, r0
    b7aa:	d1f6      	bne.n	b79a <ff_uni2oem+0x1a>
			c = (c + 0x80) & 0xFF;
    b7ac:	f103 0080 	add.w	r0, r3, #128	; 0x80
    b7b0:	b2c0      	uxtb	r0, r0
    b7b2:	4770      	bx	lr
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    b7b4:	2300      	movs	r3, #0
    b7b6:	e7f2      	b.n	b79e <ff_uni2oem+0x1e>
	WCHAR c = 0;
    b7b8:	2000      	movs	r0, #0
		}
	}

	return c;
}
    b7ba:	4770      	bx	lr
    b7bc:	00016ea4 	.word	0x00016ea4

0000b7c0 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    b7c0:	287f      	cmp	r0, #127	; 0x7f
    b7c2:	d90f      	bls.n	b7e4 <ff_oem2uni+0x24>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    b7c4:	f240 13b5 	movw	r3, #437	; 0x1b5
    b7c8:	4299      	cmp	r1, r3
    b7ca:	d001      	beq.n	b7d0 <ff_oem2uni+0x10>
	WCHAR c = 0;
    b7cc:	2000      	movs	r0, #0
    b7ce:	4770      	bx	lr
			if (oem < 0x100) c = p[oem - 0x80];
    b7d0:	28ff      	cmp	r0, #255	; 0xff
    b7d2:	d806      	bhi.n	b7e2 <ff_oem2uni+0x22>
    b7d4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    b7d8:	3880      	subs	r0, #128	; 0x80
    b7da:	4b03      	ldr	r3, [pc, #12]	; (b7e8 <ff_oem2uni+0x28>)
    b7dc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    b7e0:	4770      	bx	lr
	WCHAR c = 0;
    b7e2:	2000      	movs	r0, #0
		}
	}

	return c;
}
    b7e4:	4770      	bx	lr
    b7e6:	bf00      	nop
    b7e8:	00016ea4 	.word	0x00016ea4

0000b7ec <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    b7ec:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    b7f0:	d245      	bcs.n	b87e <ff_wtoupper+0x92>
{
    b7f2:	b4f0      	push	{r4, r5, r6, r7}
		uc = (WORD)uni;
    b7f4:	b287      	uxth	r7, r0
		p = uc < 0x1000 ? cvt1 : cvt2;
    b7f6:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
    b7fa:	d201      	bcs.n	b800 <ff_wtoupper+0x14>
    b7fc:	4b20      	ldr	r3, [pc, #128]	; (b880 <ff_wtoupper+0x94>)
    b7fe:	e002      	b.n	b806 <ff_wtoupper+0x1a>
    b800:	4b20      	ldr	r3, [pc, #128]	; (b884 <ff_wtoupper+0x98>)
    b802:	e000      	b.n	b806 <ff_wtoupper+0x1a>
		for (;;) {
			bc = *p++;								/* Get the block base */
			if (bc == 0 || uc < bc) break;			/* Not matched? */
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    b804:	4633      	mov	r3, r6
			bc = *p++;								/* Get the block base */
    b806:	881a      	ldrh	r2, [r3, #0]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    b808:	b1d2      	cbz	r2, b840 <ff_wtoupper+0x54>
    b80a:	4297      	cmp	r7, r2
    b80c:	d318      	bcc.n	b840 <ff_wtoupper+0x54>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    b80e:	1d1e      	adds	r6, r3, #4
    b810:	885b      	ldrh	r3, [r3, #2]
    b812:	0a19      	lsrs	r1, r3, #8
    b814:	b2db      	uxtb	r3, r3
			if (uc < bc + nc) {	/* In the block? */
    b816:	b284      	uxth	r4, r0
    b818:	189d      	adds	r5, r3, r2
    b81a:	42ac      	cmp	r4, r5
    b81c:	db04      	blt.n	b828 <ff_wtoupper+0x3c>
				case 7: uc -= 80; break;			/* Shift -80 */
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    b81e:	2900      	cmp	r1, #0
    b820:	d1f0      	bne.n	b804 <ff_wtoupper+0x18>
    b822:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    b826:	e7ee      	b.n	b806 <ff_wtoupper+0x1a>
				switch (cmd) {
    b828:	2908      	cmp	r1, #8
    b82a:	d809      	bhi.n	b840 <ff_wtoupper+0x54>
    b82c:	e8df f001 	tbb	[pc, r1]
    b830:	14110b05 	.word	0x14110b05
    b834:	201d1a17 	.word	0x201d1a17
    b838:	23          	.byte	0x23
    b839:	00          	.byte	0x00
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    b83a:	1aa4      	subs	r4, r4, r2
    b83c:	f836 7014 	ldrh.w	r7, [r6, r4, lsl #1]
		}
		uni = uc;
    b840:	4638      	mov	r0, r7
	}

	return uni;
}
    b842:	bcf0      	pop	{r4, r5, r6, r7}
    b844:	4770      	bx	lr
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    b846:	1abb      	subs	r3, r7, r2
    b848:	f003 0301 	and.w	r3, r3, #1
    b84c:	1ac0      	subs	r0, r0, r3
    b84e:	b287      	uxth	r7, r0
    b850:	e7f6      	b.n	b840 <ff_wtoupper+0x54>
				case 2: uc -= 16; break;			/* Shift -16 */
    b852:	3810      	subs	r0, #16
    b854:	b287      	uxth	r7, r0
    b856:	e7f3      	b.n	b840 <ff_wtoupper+0x54>
				case 3:	uc -= 32; break;			/* Shift -32 */
    b858:	3820      	subs	r0, #32
    b85a:	b287      	uxth	r7, r0
    b85c:	e7f0      	b.n	b840 <ff_wtoupper+0x54>
				case 4:	uc -= 48; break;			/* Shift -48 */
    b85e:	3830      	subs	r0, #48	; 0x30
    b860:	b287      	uxth	r7, r0
    b862:	e7ed      	b.n	b840 <ff_wtoupper+0x54>
				case 5:	uc -= 26; break;			/* Shift -26 */
    b864:	381a      	subs	r0, #26
    b866:	b287      	uxth	r7, r0
    b868:	e7ea      	b.n	b840 <ff_wtoupper+0x54>
				case 6:	uc += 8; break;				/* Shift +8 */
    b86a:	3008      	adds	r0, #8
    b86c:	b287      	uxth	r7, r0
    b86e:	e7e7      	b.n	b840 <ff_wtoupper+0x54>
				case 7: uc -= 80; break;			/* Shift -80 */
    b870:	3850      	subs	r0, #80	; 0x50
    b872:	b287      	uxth	r7, r0
    b874:	e7e4      	b.n	b840 <ff_wtoupper+0x54>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    b876:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
    b87a:	b287      	uxth	r7, r0
    b87c:	e7e0      	b.n	b840 <ff_wtoupper+0x54>
}
    b87e:	4770      	bx	lr
    b880:	00016bf4 	.word	0x00016bf4
    b884:	00016de8 	.word	0x00016de8

0000b888 <nrf52_errata_12>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    b888:	4b06      	ldr	r3, [pc, #24]	; (b8a4 <nrf52_errata_12+0x1c>)
    b88a:	681b      	ldr	r3, [r3, #0]
    b88c:	f1b3 3fff 	cmp.w	r3, #4294967295
    b890:	d003      	beq.n	b89a <nrf52_errata_12+0x12>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    b892:	2b06      	cmp	r3, #6
    b894:	d004      	beq.n	b8a0 <nrf52_errata_12+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    b896:	2000      	movs	r0, #0
    b898:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    b89a:	4b03      	ldr	r3, [pc, #12]	; (b8a8 <nrf52_errata_12+0x20>)
    b89c:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    b89e:	e7f8      	b.n	b892 <nrf52_errata_12+0xa>
                        return true;
    b8a0:	2001      	movs	r0, #1
    #endif
}
    b8a2:	4770      	bx	lr
    b8a4:	10000130 	.word	0x10000130
    b8a8:	f0000fe0 	.word	0xf0000fe0

0000b8ac <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    b8ac:	4b09      	ldr	r3, [pc, #36]	; (b8d4 <nrf52_errata_16+0x28>)
    b8ae:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    b8b0:	3308      	adds	r3, #8
    b8b2:	681b      	ldr	r3, [r3, #0]
    b8b4:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    b8b8:	2a06      	cmp	r2, #6
    b8ba:	d001      	beq.n	b8c0 <nrf52_errata_16+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    b8bc:	2000      	movs	r0, #0
    b8be:	4770      	bx	lr
                switch(var2)
    b8c0:	3b03      	subs	r3, #3
    b8c2:	2b00      	cmp	r3, #0
    b8c4:	d804      	bhi.n	b8d0 <nrf52_errata_16+0x24>
    b8c6:	e8df f003 	tbb	[pc, r3]
    b8ca:	01          	.byte	0x01
    b8cb:	00          	.byte	0x00
            if (var1 == 0x06)
    b8cc:	2001      	movs	r0, #1
    b8ce:	4770      	bx	lr
                        return false;
    b8d0:	2000      	movs	r0, #0
    #endif
}
    b8d2:	4770      	bx	lr
    b8d4:	f0000fe0 	.word	0xf0000fe0

0000b8d8 <nrf52_errata_31>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    b8d8:	4b06      	ldr	r3, [pc, #24]	; (b8f4 <nrf52_errata_31+0x1c>)
    b8da:	681b      	ldr	r3, [r3, #0]
    b8dc:	f1b3 3fff 	cmp.w	r3, #4294967295
    b8e0:	d003      	beq.n	b8ea <nrf52_errata_31+0x12>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    b8e2:	2b06      	cmp	r3, #6
    b8e4:	d004      	beq.n	b8f0 <nrf52_errata_31+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    b8e6:	2000      	movs	r0, #0
    b8e8:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    b8ea:	4b03      	ldr	r3, [pc, #12]	; (b8f8 <nrf52_errata_31+0x20>)
    b8ec:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    b8ee:	e7f8      	b.n	b8e2 <nrf52_errata_31+0xa>
                        return true;
    b8f0:	2001      	movs	r0, #1
    #endif
}
    b8f2:	4770      	bx	lr
    b8f4:	10000130 	.word	0x10000130
    b8f8:	f0000fe0 	.word	0xf0000fe0

0000b8fc <nrf52_errata_32>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    b8fc:	4b09      	ldr	r3, [pc, #36]	; (b924 <nrf52_errata_32+0x28>)
    b8fe:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    b900:	3308      	adds	r3, #8
    b902:	681b      	ldr	r3, [r3, #0]
    b904:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    b908:	2a06      	cmp	r2, #6
    b90a:	d001      	beq.n	b910 <nrf52_errata_32+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    b90c:	2000      	movs	r0, #0
    b90e:	4770      	bx	lr
                switch(var2)
    b910:	3b03      	subs	r3, #3
    b912:	2b00      	cmp	r3, #0
    b914:	d804      	bhi.n	b920 <nrf52_errata_32+0x24>
    b916:	e8df f003 	tbb	[pc, r3]
    b91a:	01          	.byte	0x01
    b91b:	00          	.byte	0x00
            if (var1 == 0x06)
    b91c:	2001      	movs	r0, #1
    b91e:	4770      	bx	lr
                        return false;
    b920:	2000      	movs	r0, #0
    #endif
}
    b922:	4770      	bx	lr
    b924:	f0000fe0 	.word	0xf0000fe0

0000b928 <nrf52_errata_36>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    b928:	4b06      	ldr	r3, [pc, #24]	; (b944 <nrf52_errata_36+0x1c>)
    b92a:	681b      	ldr	r3, [r3, #0]
    b92c:	f1b3 3fff 	cmp.w	r3, #4294967295
    b930:	d003      	beq.n	b93a <nrf52_errata_36+0x12>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    b932:	2b06      	cmp	r3, #6
    b934:	d004      	beq.n	b940 <nrf52_errata_36+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    b936:	2000      	movs	r0, #0
    b938:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    b93a:	4b03      	ldr	r3, [pc, #12]	; (b948 <nrf52_errata_36+0x20>)
    b93c:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    b93e:	e7f8      	b.n	b932 <nrf52_errata_36+0xa>
                        return true;
    b940:	2001      	movs	r0, #1
    #endif
}
    b942:	4770      	bx	lr
    b944:	10000130 	.word	0x10000130
    b948:	f0000fe0 	.word	0xf0000fe0

0000b94c <nrf52_errata_37>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    b94c:	4b09      	ldr	r3, [pc, #36]	; (b974 <nrf52_errata_37+0x28>)
    b94e:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    b950:	3308      	adds	r3, #8
    b952:	681b      	ldr	r3, [r3, #0]
    b954:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    b958:	2a06      	cmp	r2, #6
    b95a:	d001      	beq.n	b960 <nrf52_errata_37+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    b95c:	2000      	movs	r0, #0
    b95e:	4770      	bx	lr
                switch(var2)
    b960:	3b03      	subs	r3, #3
    b962:	2b00      	cmp	r3, #0
    b964:	d804      	bhi.n	b970 <nrf52_errata_37+0x24>
    b966:	e8df f003 	tbb	[pc, r3]
    b96a:	01          	.byte	0x01
    b96b:	00          	.byte	0x00
            if (var1 == 0x06)
    b96c:	2001      	movs	r0, #1
    b96e:	4770      	bx	lr
                        return false;
    b970:	2000      	movs	r0, #0
    #endif
}
    b972:	4770      	bx	lr
    b974:	f0000fe0 	.word	0xf0000fe0

0000b978 <nrf52_errata_57>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    b978:	4b09      	ldr	r3, [pc, #36]	; (b9a0 <nrf52_errata_57+0x28>)
    b97a:	781a      	ldrb	r2, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    b97c:	3308      	adds	r3, #8
    b97e:	681b      	ldr	r3, [r3, #0]
    b980:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    b984:	2a06      	cmp	r2, #6
    b986:	d001      	beq.n	b98c <nrf52_errata_57+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    b988:	2000      	movs	r0, #0
    b98a:	4770      	bx	lr
                switch(var2)
    b98c:	3b03      	subs	r3, #3
    b98e:	2b00      	cmp	r3, #0
    b990:	d804      	bhi.n	b99c <nrf52_errata_57+0x24>
    b992:	e8df f003 	tbb	[pc, r3]
    b996:	01          	.byte	0x01
    b997:	00          	.byte	0x00
            if (var1 == 0x06)
    b998:	2001      	movs	r0, #1
    b99a:	4770      	bx	lr
                        return false;
    b99c:	2000      	movs	r0, #0
    #endif
}
    b99e:	4770      	bx	lr
    b9a0:	f0000fe0 	.word	0xf0000fe0

0000b9a4 <nrf52_errata_66>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    b9a4:	4b0d      	ldr	r3, [pc, #52]	; (b9dc <nrf52_errata_66+0x38>)
    b9a6:	681a      	ldr	r2, [r3, #0]
    b9a8:	f1b2 3fff 	cmp.w	r2, #4294967295
    b9ac:	d005      	beq.n	b9ba <nrf52_errata_66+0x16>
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    b9ae:	4b0c      	ldr	r3, [pc, #48]	; (b9e0 <nrf52_errata_66+0x3c>)
    b9b0:	681b      	ldr	r3, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    b9b2:	2a06      	cmp	r2, #6
    b9b4:	d008      	beq.n	b9c8 <nrf52_errata_66+0x24>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    b9b6:	2000      	movs	r0, #0
    b9b8:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    b9ba:	4b0a      	ldr	r3, [pc, #40]	; (b9e4 <nrf52_errata_66+0x40>)
    b9bc:	781a      	ldrb	r2, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    b9be:	3308      	adds	r3, #8
    b9c0:	681b      	ldr	r3, [r3, #0]
    b9c2:	f3c3 1303 	ubfx	r3, r3, #4, #4
    b9c6:	e7f4      	b.n	b9b2 <nrf52_errata_66+0xe>
                switch(var2)
    b9c8:	3b03      	subs	r3, #3
    b9ca:	2b01      	cmp	r3, #1
    b9cc:	d804      	bhi.n	b9d8 <nrf52_errata_66+0x34>
    b9ce:	e8df f003 	tbb	[pc, r3]
    b9d2:	0101      	.short	0x0101
            if (var1 == 0x06)
    b9d4:	2000      	movs	r0, #0
    b9d6:	4770      	bx	lr
                        return true;
    b9d8:	2001      	movs	r0, #1
    #endif
}
    b9da:	4770      	bx	lr
    b9dc:	10000130 	.word	0x10000130
    b9e0:	10000134 	.word	0x10000134
    b9e4:	f0000fe0 	.word	0xf0000fe0

0000b9e8 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    b9e8:	4b06      	ldr	r3, [pc, #24]	; (ba04 <nrf52_errata_108+0x1c>)
    b9ea:	681b      	ldr	r3, [r3, #0]
    b9ec:	f1b3 3fff 	cmp.w	r3, #4294967295
    b9f0:	d003      	beq.n	b9fa <nrf52_errata_108+0x12>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    b9f2:	2b06      	cmp	r3, #6
    b9f4:	d004      	beq.n	ba00 <nrf52_errata_108+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    b9f6:	2000      	movs	r0, #0
    b9f8:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    b9fa:	4b03      	ldr	r3, [pc, #12]	; (ba08 <nrf52_errata_108+0x20>)
    b9fc:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    b9fe:	e7f8      	b.n	b9f2 <nrf52_errata_108+0xa>
                        return true;
    ba00:	2001      	movs	r0, #1
    #endif
}
    ba02:	4770      	bx	lr
    ba04:	10000130 	.word	0x10000130
    ba08:	f0000fe0 	.word	0xf0000fe0

0000ba0c <nrf52_errata_136>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    ba0c:	4b06      	ldr	r3, [pc, #24]	; (ba28 <nrf52_errata_136+0x1c>)
    ba0e:	681b      	ldr	r3, [r3, #0]
    ba10:	f1b3 3fff 	cmp.w	r3, #4294967295
    ba14:	d003      	beq.n	ba1e <nrf52_errata_136+0x12>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    ba16:	2b06      	cmp	r3, #6
    ba18:	d004      	beq.n	ba24 <nrf52_errata_136+0x18>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    ba1a:	2000      	movs	r0, #0
    ba1c:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    ba1e:	4b03      	ldr	r3, [pc, #12]	; (ba2c <nrf52_errata_136+0x20>)
    ba20:	781b      	ldrb	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    ba22:	e7f8      	b.n	ba16 <nrf52_errata_136+0xa>
                        return true;
    ba24:	2001      	movs	r0, #1
    #endif
}
    ba26:	4770      	bx	lr
    ba28:	10000130 	.word	0x10000130
    ba2c:	f0000fe0 	.word	0xf0000fe0

0000ba30 <nrf52_errata_182>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ba30:	4b08      	ldr	r3, [pc, #32]	; (ba54 <nrf52_errata_182+0x24>)
    ba32:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    ba34:	4a08      	ldr	r2, [pc, #32]	; (ba58 <nrf52_errata_182+0x28>)
    ba36:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    ba38:	2b06      	cmp	r3, #6
    ba3a:	d001      	beq.n	ba40 <nrf52_errata_182+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    ba3c:	2000      	movs	r0, #0
    ba3e:	4770      	bx	lr
                switch(var2)
    ba40:	2a05      	cmp	r2, #5
    ba42:	d803      	bhi.n	ba4c <nrf52_errata_182+0x1c>
    ba44:	2a03      	cmp	r2, #3
    ba46:	d303      	bcc.n	ba50 <nrf52_errata_182+0x20>
    ba48:	2000      	movs	r0, #0
    ba4a:	4770      	bx	lr
                        return true;
    ba4c:	2001      	movs	r0, #1
    ba4e:	4770      	bx	lr
                        return true;
    ba50:	2001      	movs	r0, #1
    #endif
}
    ba52:	4770      	bx	lr
    ba54:	10000130 	.word	0x10000130
    ba58:	10000134 	.word	0x10000134

0000ba5c <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ba5c:	4b08      	ldr	r3, [pc, #32]	; (ba80 <nrf52_configuration_249+0x24>)
    ba5e:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    ba60:	4a08      	ldr	r2, [pc, #32]	; (ba84 <nrf52_configuration_249+0x28>)
    ba62:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    ba64:	2b06      	cmp	r3, #6
    ba66:	d001      	beq.n	ba6c <nrf52_configuration_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    ba68:	2000      	movs	r0, #0
    ba6a:	4770      	bx	lr
                switch(var2)
    ba6c:	2a06      	cmp	r2, #6
    ba6e:	d803      	bhi.n	ba78 <nrf52_configuration_249+0x1c>
    ba70:	2a03      	cmp	r2, #3
    ba72:	d303      	bcc.n	ba7c <nrf52_configuration_249+0x20>
    ba74:	2000      	movs	r0, #0
    ba76:	4770      	bx	lr
                        return true;
    ba78:	2001      	movs	r0, #1
    ba7a:	4770      	bx	lr
                        return true;
    ba7c:	2001      	movs	r0, #1
    #endif
}
    ba7e:	4770      	bx	lr
    ba80:	10000130 	.word	0x10000130
    ba84:	10000134 	.word	0x10000134

0000ba88 <SystemCoreClockUpdate>:
    nvmc_wait();
}

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    ba88:	4b01      	ldr	r3, [pc, #4]	; (ba90 <SystemCoreClockUpdate+0x8>)
    ba8a:	4a02      	ldr	r2, [pc, #8]	; (ba94 <SystemCoreClockUpdate+0xc>)
    ba8c:	601a      	str	r2, [r3, #0]
}
    ba8e:	4770      	bx	lr
    ba90:	20000124 	.word	0x20000124
    ba94:	03d09000 	.word	0x03d09000

0000ba98 <SystemInit>:

void SystemInit(void)
{
    ba98:	b508      	push	{r3, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    ba9a:	f7ff fef5 	bl	b888 <nrf52_errata_12>
    ba9e:	b128      	cbz	r0, baac <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    baa0:	4b5b      	ldr	r3, [pc, #364]	; (bc10 <SystemInit+0x178>)
    baa2:	681b      	ldr	r3, [r3, #0]
    baa4:	f3c3 2304 	ubfx	r3, r3, #8, #5
    baa8:	4a5a      	ldr	r2, [pc, #360]	; (bc14 <SystemInit+0x17c>)
    baaa:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    baac:	f7ff fefe 	bl	b8ac <nrf52_errata_16>
    bab0:	b110      	cbz	r0, bab8 <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    bab2:	4b59      	ldr	r3, [pc, #356]	; (bc18 <SystemInit+0x180>)
    bab4:	4a59      	ldr	r2, [pc, #356]	; (bc1c <SystemInit+0x184>)
    bab6:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    bab8:	f7ff ff0e 	bl	b8d8 <nrf52_errata_31>
    babc:	b128      	cbz	r0, baca <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    babe:	4b58      	ldr	r3, [pc, #352]	; (bc20 <SystemInit+0x188>)
    bac0:	681b      	ldr	r3, [r3, #0]
    bac2:	f3c3 3342 	ubfx	r3, r3, #13, #3
    bac6:	4a57      	ldr	r2, [pc, #348]	; (bc24 <SystemInit+0x18c>)
    bac8:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    baca:	f7ff ff17 	bl	b8fc <nrf52_errata_32>
    bace:	b120      	cbz	r0, bada <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    bad0:	4a55      	ldr	r2, [pc, #340]	; (bc28 <SystemInit+0x190>)
    bad2:	68d3      	ldr	r3, [r2, #12]
    bad4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    bad8:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    bada:	f7ff ff25 	bl	b928 <nrf52_errata_36>
    bade:	b140      	cbz	r0, baf2 <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
    bae0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bae4:	2200      	movs	r2, #0
    bae6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    baea:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    baee:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    baf2:	f7ff ff2b 	bl	b94c <nrf52_errata_37>
    baf6:	b110      	cbz	r0, bafe <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    baf8:	4b4c      	ldr	r3, [pc, #304]	; (bc2c <SystemInit+0x194>)
    bafa:	2203      	movs	r2, #3
    bafc:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    bafe:	f7ff ff3b 	bl	b978 <nrf52_errata_57>
    bb02:	b158      	cbz	r0, bb1c <SystemInit+0x84>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    bb04:	4b4a      	ldr	r3, [pc, #296]	; (bc30 <SystemInit+0x198>)
    bb06:	2205      	movs	r2, #5
    bb08:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    bb0a:	3378      	adds	r3, #120	; 0x78
    bb0c:	2201      	movs	r2, #1
    bb0e:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    bb10:	3b70      	subs	r3, #112	; 0x70
    bb12:	2200      	movs	r2, #0
    bb14:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    bb16:	3b04      	subs	r3, #4
    bb18:	223f      	movs	r2, #63	; 0x3f
    bb1a:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    bb1c:	f7ff ff42 	bl	b9a4 <nrf52_errata_66>
    bb20:	2800      	cmp	r0, #0
    bb22:	d046      	beq.n	bbb2 <SystemInit+0x11a>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    bb24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    bb28:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    bb2c:	4b41      	ldr	r3, [pc, #260]	; (bc34 <SystemInit+0x19c>)
    bb2e:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    bb32:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    bb36:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    bb3a:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    bb3e:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    bb42:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    bb46:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    bb4a:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    bb4e:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    bb52:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    bb56:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    bb5a:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    bb5e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    bb62:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    bb66:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    bb6a:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    bb6e:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    bb72:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    bb76:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    bb7a:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    bb7e:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    bb82:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    bb86:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    bb8a:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    bb8e:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    bb92:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    bb96:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    bb9a:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    bb9e:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    bba2:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    bba6:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    bbaa:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    bbae:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    bbb2:	f7ff ff19 	bl	b9e8 <nrf52_errata_108>
    bbb6:	b128      	cbz	r0, bbc4 <SystemInit+0x12c>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    bbb8:	4b1f      	ldr	r3, [pc, #124]	; (bc38 <SystemInit+0x1a0>)
    bbba:	681b      	ldr	r3, [r3, #0]
    bbbc:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    bbc0:	4a1e      	ldr	r2, [pc, #120]	; (bc3c <SystemInit+0x1a4>)
    bbc2:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    bbc4:	f7ff ff22 	bl	ba0c <nrf52_errata_136>
    bbc8:	b160      	cbz	r0, bbe4 <SystemInit+0x14c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    bbca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bbce:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    bbd2:	f013 0f01 	tst.w	r3, #1
    bbd6:	d005      	beq.n	bbe4 <SystemInit+0x14c>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    bbd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bbdc:	f06f 0201 	mvn.w	r2, #1
    bbe0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    bbe4:	f7ff ff24 	bl	ba30 <nrf52_errata_182>
    bbe8:	b120      	cbz	r0, bbf4 <SystemInit+0x15c>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    bbea:	4a15      	ldr	r2, [pc, #84]	; (bc40 <SystemInit+0x1a8>)
    bbec:	6813      	ldr	r3, [r2, #0]
    bbee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    bbf2:	6013      	str	r3, [r2, #0]
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    bbf4:	f7ff ff32 	bl	ba5c <nrf52_configuration_249>
    bbf8:	b138      	cbz	r0, bc0a <SystemInit+0x172>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    bbfa:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    bbfe:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    bc02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bc06:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    bc0a:	f7ff ff3d 	bl	ba88 <SystemCoreClockUpdate>
}
    bc0e:	bd08      	pop	{r3, pc}
    bc10:	10000324 	.word	0x10000324
    bc14:	40013540 	.word	0x40013540
    bc18:	4007c074 	.word	0x4007c074
    bc1c:	baadf00d 	.word	0xbaadf00d
    bc20:	10000244 	.word	0x10000244
    bc24:	4000053c 	.word	0x4000053c
    bc28:	e000edf0 	.word	0xe000edf0
    bc2c:	400005a0 	.word	0x400005a0
    bc30:	40005610 	.word	0x40005610
    bc34:	4000c000 	.word	0x4000c000
    bc38:	10000258 	.word	0x10000258
    bc3c:	40000ee4 	.word	0x40000ee4
    bc40:	4000173c 	.word	0x4000173c

0000bc44 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    bc44:	b430      	push	{r4, r5}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    bc46:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    bc48:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
    bc4c:	f1d3 031f 	rsbs	r3, r3, #31
    bc50:	d415      	bmi.n	bc7e <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    bc52:	2201      	movs	r2, #1
    bc54:	409a      	lsls	r2, r3
    bc56:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    bc5a:	f3bf 8f5b 	dmb	ish
    bc5e:	e850 5f00 	ldrex	r5, [r0]
    bc62:	42a5      	cmp	r5, r4
    bc64:	d104      	bne.n	bc70 <nrfx_flag32_alloc+0x2c>
    bc66:	e840 2c00 	strex	ip, r2, [r0]
    bc6a:	f1bc 0f00 	cmp.w	ip, #0
    bc6e:	d1f6      	bne.n	bc5e <nrfx_flag32_alloc+0x1a>
    bc70:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    bc74:	d1e7      	bne.n	bc46 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    bc76:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
    bc78:	4802      	ldr	r0, [pc, #8]	; (bc84 <nrfx_flag32_alloc+0x40>)
}
    bc7a:	bc30      	pop	{r4, r5}
    bc7c:	4770      	bx	lr
            return NRFX_ERROR_NO_MEM;
    bc7e:	4802      	ldr	r0, [pc, #8]	; (bc88 <nrfx_flag32_alloc+0x44>)
    bc80:	e7fb      	b.n	bc7a <nrfx_flag32_alloc+0x36>
    bc82:	bf00      	nop
    bc84:	0bad0000 	.word	0x0bad0000
    bc88:	0bad0002 	.word	0x0bad0002

0000bc8c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    bc8c:	b410      	push	{r4}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    bc8e:	6803      	ldr	r3, [r0, #0]
    bc90:	460c      	mov	r4, r1
    bc92:	fa23 f101 	lsr.w	r1, r3, r1
    bc96:	f011 0f01 	tst.w	r1, #1
    bc9a:	d114      	bne.n	bcc6 <nrfx_flag32_free+0x3a>
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    bc9c:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    bc9e:	2301      	movs	r3, #1
    bca0:	40a3      	lsls	r3, r4
    bca2:	4313      	orrs	r3, r2
    bca4:	f3bf 8f5b 	dmb	ish
    bca8:	e850 1f00 	ldrex	r1, [r0]
    bcac:	4291      	cmp	r1, r2
    bcae:	d104      	bne.n	bcba <nrfx_flag32_free+0x2e>
    bcb0:	e840 3c00 	strex	ip, r3, [r0]
    bcb4:	f1bc 0f00 	cmp.w	ip, #0
    bcb8:	d1f6      	bne.n	bca8 <nrfx_flag32_free+0x1c>
    bcba:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    bcbe:	d1ed      	bne.n	bc9c <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    bcc0:	4802      	ldr	r0, [pc, #8]	; (bccc <nrfx_flag32_free+0x40>)
}
    bcc2:	bc10      	pop	{r4}
    bcc4:	4770      	bx	lr
        return NRFX_ERROR_INVALID_PARAM;
    bcc6:	4802      	ldr	r0, [pc, #8]	; (bcd0 <nrfx_flag32_free+0x44>)
    bcc8:	e7fb      	b.n	bcc2 <nrfx_flag32_free+0x36>
    bcca:	bf00      	nop
    bccc:	0bad0000 	.word	0x0bad0000
    bcd0:	0bad0004 	.word	0x0bad0004

0000bcd4 <nrfx_clock_anomaly_132>:
    uint32_t core_debug;
    uint32_t dwt_ctrl;

    // Preserve DEMCR register to do not influence into its configuration. Enable the trace and
    // debug blocks. It is required to read and write data to DWT block.
    core_debug = CoreDebug->DEMCR;
    bcd4:	4b0b      	ldr	r3, [pc, #44]	; (bd04 <nrfx_clock_anomaly_132+0x30>)
    bcd6:	68d9      	ldr	r1, [r3, #12]
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    bcd8:	f041 7280 	orr.w	r2, r1, #16777216	; 0x1000000
    bcdc:	60da      	str	r2, [r3, #12]

    // Preserve CTRL register in DWT block to do not influence into its configuration. Make sure
    // that cycle counter is enabled.
    dwt_ctrl = DWT->CTRL;
    bcde:	4b0a      	ldr	r3, [pc, #40]	; (bd08 <nrfx_clock_anomaly_132+0x34>)
    bce0:	6818      	ldr	r0, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    bce2:	f040 0201 	orr.w	r2, r0, #1
    bce6:	601a      	str	r2, [r3, #0]

    // Store start value of cycle counter.
    cyccnt_inital = DWT->CYCCNT;
    bce8:	685a      	ldr	r2, [r3, #4]

    // Delay required time.
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    bcea:	4b07      	ldr	r3, [pc, #28]	; (bd08 <nrfx_clock_anomaly_132+0x34>)
    bcec:	685b      	ldr	r3, [r3, #4]
    bcee:	1a9b      	subs	r3, r3, r2
    bcf0:	f5b3 5f0a 	cmp.w	r3, #8832	; 0x2280
    bcf4:	d3f9      	bcc.n	bcea <nrfx_clock_anomaly_132+0x16>
    {}

    // Restore preserved registers.
    DWT->CTRL = dwt_ctrl;
    bcf6:	4b04      	ldr	r3, [pc, #16]	; (bd08 <nrfx_clock_anomaly_132+0x34>)
    bcf8:	6018      	str	r0, [r3, #0]
    CoreDebug->DEMCR = core_debug;
    bcfa:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
    bcfe:	33f0      	adds	r3, #240	; 0xf0
    bd00:	60d9      	str	r1, [r3, #12]
}
    bd02:	4770      	bx	lr
    bd04:	e000edf0 	.word	0xe000edf0
    bd08:	e0001000 	.word	0xe0001000

0000bd0c <nrfx_clock_init>:
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    bd0c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(event_handler);
    bd0e:	4604      	mov	r4, r0
    bd10:	b150      	cbz	r0, bd28 <nrfx_clock_init+0x1c>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    bd12:	4b0c      	ldr	r3, [pc, #48]	; (bd44 <nrfx_clock_init+0x38>)
    bd14:	791b      	ldrb	r3, [r3, #4]
    bd16:	b993      	cbnz	r3, bd3e <nrfx_clock_init+0x32>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    bd18:	4b0a      	ldr	r3, [pc, #40]	; (bd44 <nrfx_clock_init+0x38>)
    bd1a:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    bd1c:	2201      	movs	r2, #1
    bd1e:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    bd20:	2200      	movs	r2, #0
    bd22:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    bd24:	4808      	ldr	r0, [pc, #32]	; (bd48 <nrfx_clock_init+0x3c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    bd26:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(event_handler);
    bd28:	4d08      	ldr	r5, [pc, #32]	; (bd4c <nrfx_clock_init+0x40>)
    bd2a:	22bd      	movs	r2, #189	; 0xbd
    bd2c:	4629      	mov	r1, r5
    bd2e:	4808      	ldr	r0, [pc, #32]	; (bd50 <nrfx_clock_init+0x44>)
    bd30:	f005 f97a 	bl	11028 <printk>
    bd34:	21bd      	movs	r1, #189	; 0xbd
    bd36:	4628      	mov	r0, r5
    bd38:	f005 fa98 	bl	1126c <assert_post_action>
    bd3c:	e7e9      	b.n	bd12 <nrfx_clock_init+0x6>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    bd3e:	4805      	ldr	r0, [pc, #20]	; (bd54 <nrfx_clock_init+0x48>)
    return err_code;
    bd40:	e7f1      	b.n	bd26 <nrfx_clock_init+0x1a>
    bd42:	bf00      	nop
    bd44:	200010e8 	.word	0x200010e8
    bd48:	0bad0000 	.word	0x0bad0000
    bd4c:	00016fa4 	.word	0x00016fa4
    bd50:	00015984 	.word	0x00015984
    bd54:	0bad000c 	.word	0x0bad000c

0000bd58 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    bd58:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    bd5a:	4b0b      	ldr	r3, [pc, #44]	; (bd88 <nrfx_clock_enable+0x30>)
    bd5c:	791b      	ldrb	r3, [r3, #4]
    bd5e:	b123      	cbz	r3, bd6a <nrfx_clock_enable+0x12>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    bd60:	2000      	movs	r0, #0
    bd62:	f7f9 fca3 	bl	56ac <arch_irq_is_enabled>
    bd66:	b158      	cbz	r0, bd80 <nrfx_clock_enable+0x28>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    bd68:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    bd6a:	4c08      	ldr	r4, [pc, #32]	; (bd8c <nrfx_clock_enable+0x34>)
    bd6c:	22d6      	movs	r2, #214	; 0xd6
    bd6e:	4621      	mov	r1, r4
    bd70:	4807      	ldr	r0, [pc, #28]	; (bd90 <nrfx_clock_enable+0x38>)
    bd72:	f005 f959 	bl	11028 <printk>
    bd76:	21d6      	movs	r1, #214	; 0xd6
    bd78:	4620      	mov	r0, r4
    bd7a:	f005 fa77 	bl	1126c <assert_post_action>
    bd7e:	e7ef      	b.n	bd60 <nrfx_clock_enable+0x8>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    bd80:	f7f9 fc70 	bl	5664 <arch_irq_enable>
}
    bd84:	e7f0      	b.n	bd68 <nrfx_clock_enable+0x10>
    bd86:	bf00      	nop
    bd88:	200010e8 	.word	0x200010e8
    bd8c:	00016fa4 	.word	0x00016fa4
    bd90:	00015984 	.word	0x00015984

0000bd94 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    bd94:	b538      	push	{r3, r4, r5, lr}
    bd96:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    bd98:	4b2a      	ldr	r3, [pc, #168]	; (be44 <nrfx_clock_start+0xb0>)
    bd9a:	791b      	ldrb	r3, [r3, #4]
    bd9c:	b17b      	cbz	r3, bdbe <nrfx_clock_start+0x2a>
    switch (domain)
    bd9e:	b1dc      	cbz	r4, bdd8 <nrfx_clock_start+0x44>
    bda0:	2c01      	cmp	r4, #1
    bda2:	d044      	beq.n	be2e <nrfx_clock_start+0x9a>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    bda4:	4c28      	ldr	r4, [pc, #160]	; (be48 <nrfx_clock_start+0xb4>)
    bda6:	f44f 72a2 	mov.w	r2, #324	; 0x144
    bdaa:	4621      	mov	r1, r4
    bdac:	4827      	ldr	r0, [pc, #156]	; (be4c <nrfx_clock_start+0xb8>)
    bdae:	f005 f93b 	bl	11028 <printk>
    bdb2:	f44f 71a2 	mov.w	r1, #324	; 0x144
    bdb6:	4620      	mov	r0, r4
    bdb8:	f005 fa58 	bl	1126c <assert_post_action>
            break;
    }
}
    bdbc:	e02e      	b.n	be1c <nrfx_clock_start+0x88>
    NRFX_ASSERT(m_clock_cb.module_initialized);
    bdbe:	4d22      	ldr	r5, [pc, #136]	; (be48 <nrfx_clock_start+0xb4>)
    bdc0:	f44f 7289 	mov.w	r2, #274	; 0x112
    bdc4:	4629      	mov	r1, r5
    bdc6:	4821      	ldr	r0, [pc, #132]	; (be4c <nrfx_clock_start+0xb8>)
    bdc8:	f005 f92e 	bl	11028 <printk>
    bdcc:	f44f 7189 	mov.w	r1, #274	; 0x112
    bdd0:	4628      	mov	r0, r5
    bdd2:	f005 fa4b 	bl	1126c <assert_post_action>
    bdd6:	e7e2      	b.n	bd9e <nrfx_clock_start+0xa>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    bdd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    bddc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    bde0:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    bde4:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    bde8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    bdec:	d117      	bne.n	be1e <nrfx_clock_start+0x8a>
    return false;
    bdee:	2200      	movs	r2, #0
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    bdf0:	b10a      	cbz	r2, bdf6 <nrfx_clock_start+0x62>
    bdf2:	2b01      	cmp	r3, #1
    bdf4:	d015      	beq.n	be22 <nrfx_clock_start+0x8e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    bdf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bdfa:	2200      	movs	r2, #0
    bdfc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    be00:	4b13      	ldr	r3, [pc, #76]	; (be50 <nrfx_clock_start+0xbc>)
    be02:	2200      	movs	r2, #0
    be04:	601a      	str	r2, [r3, #0]
    be06:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    be08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    be0c:	2202      	movs	r2, #2
    be0e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            nrfx_clock_anomaly_132();
    be12:	f7ff ff5f 	bl	bcd4 <nrfx_clock_anomaly_132>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    be16:	4b0f      	ldr	r3, [pc, #60]	; (be54 <nrfx_clock_start+0xc0>)
    be18:	2201      	movs	r2, #1
    be1a:	601a      	str	r2, [r3, #0]
}
    be1c:	bd38      	pop	{r3, r4, r5, pc}
                return true;
    be1e:	2201      	movs	r2, #1
    be20:	e7e6      	b.n	bdf0 <nrfx_clock_start+0x5c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    be22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    be26:	2201      	movs	r2, #1
    be28:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    be2c:	e7e8      	b.n	be00 <nrfx_clock_start+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    be2e:	4b0a      	ldr	r3, [pc, #40]	; (be58 <nrfx_clock_start+0xc4>)
    be30:	2200      	movs	r2, #0
    be32:	601a      	str	r2, [r3, #0]
    be34:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    be36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    be3a:	2201      	movs	r2, #1
    be3c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    be40:	601a      	str	r2, [r3, #0]
}
    be42:	e7eb      	b.n	be1c <nrfx_clock_start+0x88>
    be44:	200010e8 	.word	0x200010e8
    be48:	00016fa4 	.word	0x00016fa4
    be4c:	00015984 	.word	0x00015984
    be50:	40000104 	.word	0x40000104
    be54:	40000008 	.word	0x40000008
    be58:	40000100 	.word	0x40000100

0000be5c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    be5c:	b570      	push	{r4, r5, r6, lr}
    be5e:	b082      	sub	sp, #8
    be60:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    be62:	4b5c      	ldr	r3, [pc, #368]	; (bfd4 <nrfx_clock_stop+0x178>)
    be64:	791b      	ldrb	r3, [r3, #4]
    be66:	b17b      	cbz	r3, be88 <nrfx_clock_stop+0x2c>
    switch (domain)
    be68:	b1dc      	cbz	r4, bea2 <nrfx_clock_stop+0x46>
    be6a:	2c01      	cmp	r4, #1
    be6c:	d02b      	beq.n	bec6 <nrfx_clock_stop+0x6a>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    be6e:	4c5a      	ldr	r4, [pc, #360]	; (bfd8 <nrfx_clock_stop+0x17c>)
    be70:	f240 1267 	movw	r2, #359	; 0x167
    be74:	4621      	mov	r1, r4
    be76:	4859      	ldr	r0, [pc, #356]	; (bfdc <nrfx_clock_stop+0x180>)
    be78:	f005 f8d6 	bl	11028 <printk>
    be7c:	f240 1167 	movw	r1, #359	; 0x167
    be80:	4620      	mov	r0, r4
    be82:	f005 f9f3 	bl	1126c <assert_post_action>
            return;
    be86:	e09e      	b.n	bfc6 <nrfx_clock_stop+0x16a>
    NRFX_ASSERT(m_clock_cb.module_initialized);
    be88:	4d53      	ldr	r5, [pc, #332]	; (bfd8 <nrfx_clock_stop+0x17c>)
    be8a:	f240 124b 	movw	r2, #331	; 0x14b
    be8e:	4629      	mov	r1, r5
    be90:	4852      	ldr	r0, [pc, #328]	; (bfdc <nrfx_clock_stop+0x180>)
    be92:	f005 f8c9 	bl	11028 <printk>
    be96:	f240 114b 	movw	r1, #331	; 0x14b
    be9a:	4628      	mov	r0, r5
    be9c:	f005 f9e6 	bl	1126c <assert_post_action>
    bea0:	e7e2      	b.n	be68 <nrfx_clock_stop+0xc>
    p_reg->INTENCLR = mask;
    bea2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bea6:	2202      	movs	r2, #2
    bea8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    beac:	f503 7382 	add.w	r3, r3, #260	; 0x104
    beb0:	2200      	movs	r2, #0
    beb2:	601a      	str	r2, [r3, #0]
    beb4:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    beb6:	4b4a      	ldr	r3, [pc, #296]	; (bfe0 <nrfx_clock_stop+0x184>)
    beb8:	2201      	movs	r2, #1
    beba:	601a      	str	r2, [r3, #0]
    }

    bool stopped;
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    bebc:	2c01      	cmp	r4, #1
    bebe:	d00f      	beq.n	bee0 <nrfx_clock_stop+0x84>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    bec0:	f242 7510 	movw	r5, #10000	; 0x2710
    bec4:	e05e      	b.n	bf84 <nrfx_clock_stop+0x128>
    p_reg->INTENCLR = mask;
    bec6:	2301      	movs	r3, #1
    bec8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    becc:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bed0:	f502 7280 	add.w	r2, r2, #256	; 0x100
    bed4:	2100      	movs	r1, #0
    bed6:	6011      	str	r1, [r2, #0]
    bed8:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    beda:	4a42      	ldr	r2, [pc, #264]	; (bfe4 <nrfx_clock_stop+0x188>)
    bedc:	6013      	str	r3, [r2, #0]
}
    bede:	e7ed      	b.n	bebc <nrfx_clock_stop+0x60>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    bee0:	2301      	movs	r3, #1
    bee2:	f88d 3007 	strb.w	r3, [sp, #7]
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    bee6:	f242 7510 	movw	r5, #10000	; 0x2710
    beea:	e018      	b.n	bf1e <nrfx_clock_stop+0xc2>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    beec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    bef0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    bef4:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    bef8:	f8cd 3007 	str.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    befc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    bf00:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    bf04:	d12c      	bne.n	bf60 <nrfx_clock_stop+0x104>
    return false;
    bf06:	2300      	movs	r3, #0
    bf08:	2b00      	cmp	r3, #0
    bf0a:	d05a      	beq.n	bfc2 <nrfx_clock_stop+0x166>
    bf0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bf10:	2b01      	cmp	r3, #1
    bf12:	d156      	bne.n	bfc2 <nrfx_clock_stop+0x166>
    bf14:	2001      	movs	r0, #1
    bf16:	f008 fbb2 	bl	1467e <nrfx_busy_wait>
    bf1a:	3d01      	subs	r5, #1
    bf1c:	d051      	beq.n	bfc2 <nrfx_clock_stop+0x166>
    switch (domain)
    bf1e:	2c00      	cmp	r4, #0
    bf20:	d0e4      	beq.n	beec <nrfx_clock_stop+0x90>
    bf22:	2c01      	cmp	r4, #1
    bf24:	d00d      	beq.n	bf42 <nrfx_clock_stop+0xe6>
            NRFX_ASSERT(0);
    bf26:	4e30      	ldr	r6, [pc, #192]	; (bfe8 <nrfx_clock_stop+0x18c>)
    bf28:	f44f 724f 	mov.w	r2, #828	; 0x33c
    bf2c:	4631      	mov	r1, r6
    bf2e:	482b      	ldr	r0, [pc, #172]	; (bfdc <nrfx_clock_stop+0x180>)
    bf30:	f005 f87a 	bl	11028 <printk>
    bf34:	f44f 714f 	mov.w	r1, #828	; 0x33c
    bf38:	4630      	mov	r0, r6
    bf3a:	f005 f997 	bl	1126c <assert_post_action>
            return false;
    bf3e:	2300      	movs	r3, #0
    bf40:	e7e2      	b.n	bf08 <nrfx_clock_stop+0xac>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    bf42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    bf46:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    bf4a:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    bf4e:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    bf52:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    bf56:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    bf5a:	d103      	bne.n	bf64 <nrfx_clock_stop+0x108>
    return false;
    bf5c:	2300      	movs	r3, #0
    bf5e:	e7d3      	b.n	bf08 <nrfx_clock_stop+0xac>
                return true;
    bf60:	2301      	movs	r3, #1
    bf62:	e7d1      	b.n	bf08 <nrfx_clock_stop+0xac>
                return true;
    bf64:	2301      	movs	r3, #1
    bf66:	e7cf      	b.n	bf08 <nrfx_clock_stop+0xac>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    bf68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bf6c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    bf70:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    bf74:	d121      	bne.n	bfba <nrfx_clock_stop+0x15e>
    return false;
    bf76:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    bf78:	b31b      	cbz	r3, bfc2 <nrfx_clock_stop+0x166>
    bf7a:	2001      	movs	r0, #1
    bf7c:	f008 fb7f 	bl	1467e <nrfx_busy_wait>
    bf80:	3d01      	subs	r5, #1
    bf82:	d01e      	beq.n	bfc2 <nrfx_clock_stop+0x166>
    switch (domain)
    bf84:	2c00      	cmp	r4, #0
    bf86:	d0ef      	beq.n	bf68 <nrfx_clock_stop+0x10c>
    bf88:	2c01      	cmp	r4, #1
    bf8a:	d00d      	beq.n	bfa8 <nrfx_clock_stop+0x14c>
            NRFX_ASSERT(0);
    bf8c:	4e16      	ldr	r6, [pc, #88]	; (bfe8 <nrfx_clock_stop+0x18c>)
    bf8e:	f44f 724f 	mov.w	r2, #828	; 0x33c
    bf92:	4631      	mov	r1, r6
    bf94:	4811      	ldr	r0, [pc, #68]	; (bfdc <nrfx_clock_stop+0x180>)
    bf96:	f005 f847 	bl	11028 <printk>
    bf9a:	f44f 714f 	mov.w	r1, #828	; 0x33c
    bf9e:	4630      	mov	r0, r6
    bfa0:	f005 f964 	bl	1126c <assert_post_action>
            return false;
    bfa4:	2300      	movs	r3, #0
    bfa6:	e7e7      	b.n	bf78 <nrfx_clock_stop+0x11c>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    bfa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bfac:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    bfb0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    bfb4:	d103      	bne.n	bfbe <nrfx_clock_stop+0x162>
    return false;
    bfb6:	2300      	movs	r3, #0
    bfb8:	e7de      	b.n	bf78 <nrfx_clock_stop+0x11c>
                return true;
    bfba:	2301      	movs	r3, #1
    bfbc:	e7dc      	b.n	bf78 <nrfx_clock_stop+0x11c>
                return true;
    bfbe:	2301      	movs	r3, #1
    bfc0:	e7da      	b.n	bf78 <nrfx_clock_stop+0x11c>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    bfc2:	2c01      	cmp	r4, #1
    bfc4:	d001      	beq.n	bfca <nrfx_clock_stop+0x16e>
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    bfc6:	b002      	add	sp, #8
    bfc8:	bd70      	pop	{r4, r5, r6, pc}
            m_clock_cb.hfclk_started = false;
    bfca:	4b02      	ldr	r3, [pc, #8]	; (bfd4 <nrfx_clock_stop+0x178>)
    bfcc:	2200      	movs	r2, #0
    bfce:	715a      	strb	r2, [r3, #5]
    bfd0:	e7f9      	b.n	bfc6 <nrfx_clock_stop+0x16a>
    bfd2:	bf00      	nop
    bfd4:	200010e8 	.word	0x200010e8
    bfd8:	00016fa4 	.word	0x00016fa4
    bfdc:	00015984 	.word	0x00015984
    bfe0:	4000000c 	.word	0x4000000c
    bfe4:	40000004 	.word	0x40000004
    bfe8:	00016fe4 	.word	0x00016fe4

0000bfec <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    bfec:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    bfee:	4b1b      	ldr	r3, [pc, #108]	; (c05c <nrfx_power_clock_irq_handler+0x70>)
    bff0:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    bff2:	b183      	cbz	r3, c016 <nrfx_power_clock_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bff4:	4b19      	ldr	r3, [pc, #100]	; (c05c <nrfx_power_clock_irq_handler+0x70>)
    bff6:	2200      	movs	r2, #0
    bff8:	601a      	str	r2, [r3, #0]
    bffa:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    bffc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c000:	2201      	movs	r2, #1
    c002:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    c006:	4b16      	ldr	r3, [pc, #88]	; (c060 <nrfx_power_clock_irq_handler+0x74>)
    c008:	795b      	ldrb	r3, [r3, #5]
    c00a:	b923      	cbnz	r3, c016 <nrfx_power_clock_irq_handler+0x2a>
        {
            m_clock_cb.hfclk_started = true;
    c00c:	4b14      	ldr	r3, [pc, #80]	; (c060 <nrfx_power_clock_irq_handler+0x74>)
    c00e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    c010:	681b      	ldr	r3, [r3, #0]
    c012:	2000      	movs	r0, #0
    c014:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    c016:	4b13      	ldr	r3, [pc, #76]	; (c064 <nrfx_power_clock_irq_handler+0x78>)
    c018:	681b      	ldr	r3, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    c01a:	b903      	cbnz	r3, c01e <nrfx_power_clock_irq_handler+0x32>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    c01c:	bd08      	pop	{r3, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c01e:	4b11      	ldr	r3, [pc, #68]	; (c064 <nrfx_power_clock_irq_handler+0x78>)
    c020:	2200      	movs	r2, #0
    c022:	601a      	str	r2, [r3, #0]
    c024:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    c026:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c02a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    c02e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    c032:	f012 0f03 	tst.w	r2, #3
    c036:	d107      	bne.n	c048 <nrfx_power_clock_irq_handler+0x5c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    c038:	2301      	movs	r3, #1
    c03a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    c03e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c042:	3208      	adds	r2, #8
    c044:	6013      	str	r3, [r2, #0]
}
    c046:	e7e9      	b.n	c01c <nrfx_power_clock_irq_handler+0x30>
    p_reg->INTENCLR = mask;
    c048:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c04c:	2202      	movs	r2, #2
    c04e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    c052:	4b03      	ldr	r3, [pc, #12]	; (c060 <nrfx_power_clock_irq_handler+0x74>)
    c054:	681b      	ldr	r3, [r3, #0]
    c056:	2001      	movs	r0, #1
    c058:	4798      	blx	r3
}
    c05a:	e7df      	b.n	c01c <nrfx_power_clock_irq_handler+0x30>
    c05c:	40000100 	.word	0x40000100
    c060:	200010e8 	.word	0x200010e8
    c064:	40000104 	.word	0x40000104

0000c068 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    c068:	3008      	adds	r0, #8
    c06a:	4b03      	ldr	r3, [pc, #12]	; (c078 <pin_in_use+0x10>)
    c06c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    c070:	f000 0001 	and.w	r0, r0, #1
    c074:	4770      	bx	lr
    c076:	bf00      	nop
    c078:	20000128 	.word	0x20000128

0000c07c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    c07c:	3008      	adds	r0, #8
    c07e:	4b03      	ldr	r3, [pc, #12]	; (c08c <pin_in_use_by_te+0x10>)
    c080:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    c084:	f3c0 1040 	ubfx	r0, r0, #5, #1
    c088:	4770      	bx	lr
    c08a:	bf00      	nop
    c08c:	20000128 	.word	0x20000128

0000c090 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    c090:	3008      	adds	r0, #8
    c092:	4b04      	ldr	r3, [pc, #16]	; (c0a4 <pin_has_trigger+0x14>)
    c094:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    c098:	f010 001c 	ands.w	r0, r0, #28
    c09c:	bf18      	it	ne
    c09e:	2001      	movne	r0, #1
    c0a0:	4770      	bx	lr
    c0a2:	bf00      	nop
    c0a4:	20000128 	.word	0x20000128

0000c0a8 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    c0a8:	3008      	adds	r0, #8
    c0aa:	4b03      	ldr	r3, [pc, #12]	; (c0b8 <pin_is_output+0x10>)
    c0ac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    c0b0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    c0b4:	4770      	bx	lr
    c0b6:	bf00      	nop
    c0b8:	20000128 	.word	0x20000128

0000c0bc <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    c0bc:	3008      	adds	r0, #8
    c0be:	4b02      	ldr	r3, [pc, #8]	; (c0c8 <pin_te_get+0xc>)
    c0c0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    c0c4:	0b40      	lsrs	r0, r0, #13
    c0c6:	4770      	bx	lr
    c0c8:	20000128 	.word	0x20000128

0000c0cc <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    c0cc:	2200      	movs	r2, #0
    c0ce:	e004      	b.n	c0da <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    c0d0:	f04f 33ff 	mov.w	r3, #4294967295
    c0d4:	4283      	cmp	r3, r0
    c0d6:	d00f      	beq.n	c0f8 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    c0d8:	3201      	adds	r2, #1
    c0da:	2a1f      	cmp	r2, #31
    c0dc:	d80a      	bhi.n	c0f4 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    c0de:	f102 0308 	add.w	r3, r2, #8
    c0e2:	4906      	ldr	r1, [pc, #24]	; (c0fc <handler_in_use+0x30>)
    c0e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    c0e8:	f413 7f80 	tst.w	r3, #256	; 0x100
    c0ec:	d0f0      	beq.n	c0d0 <handler_in_use+0x4>
    c0ee:	f3c3 2343 	ubfx	r3, r3, #9, #4
    c0f2:	e7ef      	b.n	c0d4 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    c0f4:	2000      	movs	r0, #0
    c0f6:	4770      	bx	lr
            return true;
    c0f8:	2001      	movs	r0, #1
}
    c0fa:	4770      	bx	lr
    c0fc:	20000128 	.word	0x20000128

0000c100 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    c100:	2300      	movs	r3, #0
    c102:	b113      	cbz	r3, c10a <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    c104:	f04f 30ff 	mov.w	r0, #4294967295
}
    c108:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    c10a:	4a07      	ldr	r2, [pc, #28]	; (c128 <find_handler+0x28>)
    c10c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    c110:	4282      	cmp	r2, r0
    c112:	d001      	beq.n	c118 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    c114:	3301      	adds	r3, #1
    c116:	e7f4      	b.n	c102 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    c118:	4a03      	ldr	r2, [pc, #12]	; (c128 <find_handler+0x28>)
    c11a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    c11e:	6852      	ldr	r2, [r2, #4]
    c120:	428a      	cmp	r2, r1
    c122:	d1f7      	bne.n	c114 <find_handler+0x14>
            return i;
    c124:	4618      	mov	r0, r3
    c126:	4770      	bx	lr
    c128:	20000128 	.word	0x20000128

0000c12c <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    c12c:	3008      	adds	r0, #8
    c12e:	4b06      	ldr	r3, [pc, #24]	; (c148 <channel_handler_get+0x1c>)
    c130:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    c134:	f410 7f80 	tst.w	r0, #256	; 0x100
    c138:	d004      	beq.n	c144 <channel_handler_get+0x18>
    c13a:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    c13e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    c142:	4770      	bx	lr
        return NULL;
    c144:	2000      	movs	r0, #0
}
    c146:	4770      	bx	lr
    c148:	20000128 	.word	0x20000128

0000c14c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    c14c:	b570      	push	{r4, r5, r6, lr}
    c14e:	4604      	mov	r4, r0
    c150:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    c152:	f7ff ffeb 	bl	c12c <channel_handler_get>

    if (handler)
    c156:	b120      	cbz	r0, c162 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    c158:	6806      	ldr	r6, [r0, #0]
    c15a:	6842      	ldr	r2, [r0, #4]
    c15c:	4629      	mov	r1, r5
    c15e:	4620      	mov	r0, r4
    c160:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    c162:	4b04      	ldr	r3, [pc, #16]	; (c174 <call_handler+0x28>)
    c164:	689b      	ldr	r3, [r3, #8]
    c166:	b123      	cbz	r3, c172 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    c168:	4a02      	ldr	r2, [pc, #8]	; (c174 <call_handler+0x28>)
    c16a:	68d2      	ldr	r2, [r2, #12]
    c16c:	4629      	mov	r1, r5
    c16e:	4620      	mov	r0, r4
    c170:	4798      	blx	r3
    }
}
    c172:	bd70      	pop	{r4, r5, r6, pc}
    c174:	20000128 	.word	0x20000128

0000c178 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    c178:	f100 0208 	add.w	r2, r0, #8
    c17c:	4b16      	ldr	r3, [pc, #88]	; (c1d8 <release_handler+0x60>)
    c17e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    c182:	f413 7f80 	tst.w	r3, #256	; 0x100
    c186:	d025      	beq.n	c1d4 <release_handler+0x5c>
{
    c188:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    c18a:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    c18e:	4610      	mov	r0, r2
    c190:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    c194:	4a10      	ldr	r2, [pc, #64]	; (c1d8 <release_handler+0x60>)
    c196:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    c19a:	4620      	mov	r0, r4
    c19c:	f7ff ff96 	bl	c0cc <handler_in_use>
    c1a0:	b100      	cbz	r0, c1a4 <release_handler+0x2c>
}
    c1a2:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    c1a4:	480c      	ldr	r0, [pc, #48]	; (c1d8 <release_handler+0x60>)
    c1a6:	2300      	movs	r3, #0
    c1a8:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    c1ac:	4621      	mov	r1, r4
    c1ae:	3054      	adds	r0, #84	; 0x54
    c1b0:	f7ff fd6c 	bl	bc8c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    c1b4:	4b09      	ldr	r3, [pc, #36]	; (c1dc <release_handler+0x64>)
    c1b6:	4298      	cmp	r0, r3
    c1b8:	d0f3      	beq.n	c1a2 <release_handler+0x2a>
    c1ba:	4c09      	ldr	r4, [pc, #36]	; (c1e0 <release_handler+0x68>)
    c1bc:	f44f 7299 	mov.w	r2, #306	; 0x132
    c1c0:	4621      	mov	r1, r4
    c1c2:	4808      	ldr	r0, [pc, #32]	; (c1e4 <release_handler+0x6c>)
    c1c4:	f004 ff30 	bl	11028 <printk>
    c1c8:	f44f 7199 	mov.w	r1, #306	; 0x132
    c1cc:	4620      	mov	r0, r4
    c1ce:	f005 f84d 	bl	1126c <assert_post_action>
    c1d2:	e7e6      	b.n	c1a2 <release_handler+0x2a>
    c1d4:	4770      	bx	lr
    c1d6:	bf00      	nop
    c1d8:	20000128 	.word	0x20000128
    c1dc:	0bad0000 	.word	0x0bad0000
    c1e0:	00017018 	.word	0x00017018
    c1e4:	00015984 	.word	0x00015984

0000c1e8 <pin_handler_trigger_uninit>:
{
    c1e8:	b510      	push	{r4, lr}
    c1ea:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    c1ec:	f7ff ff46 	bl	c07c <pin_in_use_by_te>
    c1f0:	b140      	cbz	r0, c204 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    c1f2:	4620      	mov	r0, r4
    c1f4:	f7ff ff62 	bl	c0bc <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    c1f8:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    c1fc:	4b06      	ldr	r3, [pc, #24]	; (c218 <pin_handler_trigger_uninit+0x30>)
    c1fe:	2200      	movs	r2, #0
    c200:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    c204:	4620      	mov	r0, r4
    c206:	f7ff ffb7 	bl	c178 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    c20a:	3408      	adds	r4, #8
    c20c:	4b03      	ldr	r3, [pc, #12]	; (c21c <pin_handler_trigger_uninit+0x34>)
    c20e:	2200      	movs	r2, #0
    c210:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    c214:	bd10      	pop	{r4, pc}
    c216:	bf00      	nop
    c218:	40006000 	.word	0x40006000
    c21c:	20000128 	.word	0x20000128

0000c220 <pin_handler_set>:
{
    c220:	b570      	push	{r4, r5, r6, lr}
    c222:	b082      	sub	sp, #8
    c224:	4606      	mov	r6, r0
    c226:	460c      	mov	r4, r1
    c228:	4615      	mov	r5, r2
    release_handler(pin);
    c22a:	f7ff ffa5 	bl	c178 <release_handler>
    if (!handler)
    c22e:	b324      	cbz	r4, c27a <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    c230:	4629      	mov	r1, r5
    c232:	4620      	mov	r0, r4
    c234:	f7ff ff64 	bl	c100 <find_handler>
    if (handler_id < 0)
    c238:	1e03      	subs	r3, r0, #0
    c23a:	db13      	blt.n	c264 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    c23c:	4a10      	ldr	r2, [pc, #64]	; (c280 <pin_handler_set+0x60>)
    c23e:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    c242:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    c246:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    c248:	025b      	lsls	r3, r3, #9
    c24a:	b29b      	uxth	r3, r3
    c24c:	f106 0008 	add.w	r0, r6, #8
    c250:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    c254:	430b      	orrs	r3, r1
    c256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    c25a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    c25e:	4809      	ldr	r0, [pc, #36]	; (c284 <pin_handler_set+0x64>)
}
    c260:	b002      	add	sp, #8
    c262:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    c264:	f10d 0107 	add.w	r1, sp, #7
    c268:	4807      	ldr	r0, [pc, #28]	; (c288 <pin_handler_set+0x68>)
    c26a:	f7ff fceb 	bl	bc44 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    c26e:	4b05      	ldr	r3, [pc, #20]	; (c284 <pin_handler_set+0x64>)
    c270:	4298      	cmp	r0, r3
    c272:	d1f5      	bne.n	c260 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    c274:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c278:	e7e0      	b.n	c23c <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    c27a:	4802      	ldr	r0, [pc, #8]	; (c284 <pin_handler_set+0x64>)
    c27c:	e7f0      	b.n	c260 <pin_handler_set+0x40>
    c27e:	bf00      	nop
    c280:	20000128 	.word	0x20000128
    c284:	0bad0000 	.word	0x0bad0000
    c288:	2000017c 	.word	0x2000017c

0000c28c <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    c28c:	b538      	push	{r3, r4, r5, lr}
    c28e:	4604      	mov	r4, r0
    while (mask)
    c290:	b1cc      	cbz	r4, c2c6 <gpiote_evt_handle+0x3a>
    {
        uint32_t ch = NRF_CTZ(mask);
    c292:	fa94 f3a4 	rbit	r3, r4
    c296:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    c29a:	2201      	movs	r2, #1
    c29c:	409a      	lsls	r2, r3
    c29e:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    c2a2:	4a09      	ldr	r2, [pc, #36]	; (c2c8 <gpiote_evt_handle+0x3c>)
    c2a4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    c2a8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    c2ac:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    c2b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    c2b4:	f3c0 4001 	ubfx	r0, r0, #16, #2
    c2b8:	f008 f9fb 	bl	146b2 <gpiote_polarity_to_trigger>
    c2bc:	4601      	mov	r1, r0
    c2be:	4628      	mov	r0, r5
    c2c0:	f7ff ff44 	bl	c14c <call_handler>
    c2c4:	e7e4      	b.n	c290 <gpiote_evt_handle+0x4>
    }
}
    c2c6:	bd38      	pop	{r3, r4, r5, pc}
    c2c8:	40006000 	.word	0x40006000

0000c2cc <next_sense_cond_call_handler>:
{
    c2cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c2d0:	4604      	mov	r4, r0
    c2d2:	460d      	mov	r5, r1
    c2d4:	4616      	mov	r6, r2
    if (is_level(trigger))
    c2d6:	4608      	mov	r0, r1
    c2d8:	f008 f9ed 	bl	146b6 <is_level>
    c2dc:	bb58      	cbnz	r0, c336 <next_sense_cond_call_handler+0x6a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    c2de:	2e02      	cmp	r6, #2
    c2e0:	f000 80cc 	beq.w	c47c <next_sense_cond_call_handler+0x1b0>
    c2e4:	f04f 0802 	mov.w	r8, #2
    switch (port)
    c2e8:	0963      	lsrs	r3, r4, #5
    c2ea:	f000 80ca 	beq.w	c482 <next_sense_cond_call_handler+0x1b6>
    uint32_t mask = 0;
    c2ee:	2300      	movs	r3, #0
    pin_number &= 0x1F;
    c2f0:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    c2f4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    c2f6:	f013 0f01 	tst.w	r3, #1
    c2fa:	f000 80c5 	beq.w	c488 <next_sense_cond_call_handler+0x1bc>
    *p_pin = pin_number & 0x1F;
    c2fe:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    c302:	0963      	lsrs	r3, r4, #5
    c304:	f040 80cd 	bne.w	c4a2 <next_sense_cond_call_handler+0x1d6>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    c308:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    c30c:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
    c310:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    c314:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    c318:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    c31c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    c320:	2d03      	cmp	r5, #3
    c322:	f000 80cf 	beq.w	c4c4 <next_sense_cond_call_handler+0x1f8>
    c326:	2e02      	cmp	r6, #2
    c328:	f000 80c9 	beq.w	c4be <next_sense_cond_call_handler+0x1f2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    c32c:	2e03      	cmp	r6, #3
    c32e:	f000 80ce 	beq.w	c4ce <next_sense_cond_call_handler+0x202>
}
    c332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        call_handler(pin, trigger);
    c336:	4629      	mov	r1, r5
    c338:	4620      	mov	r0, r4
    c33a:	f7ff ff07 	bl	c14c <call_handler>
    switch (port)
    c33e:	0963      	lsrs	r3, r4, #5
    c340:	d045      	beq.n	c3ce <next_sense_cond_call_handler+0x102>
    uint32_t mask = 0;
    c342:	2300      	movs	r3, #0
    pin_number &= 0x1F;
    c344:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    c348:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    c34a:	f013 0f01 	tst.w	r3, #1
    c34e:	d041      	beq.n	c3d4 <next_sense_cond_call_handler+0x108>
    *p_pin = pin_number & 0x1F;
    c350:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    c354:	0963      	lsrs	r3, r4, #5
    c356:	d14a      	bne.n	c3ee <next_sense_cond_call_handler+0x122>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    c358:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    c35c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    c360:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    c364:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    c368:	429e      	cmp	r6, r3
    c36a:	d1e2      	bne.n	c332 <next_sense_cond_call_handler+0x66>
    switch (port)
    c36c:	0963      	lsrs	r3, r4, #5
    c36e:	d04b      	beq.n	c408 <next_sense_cond_call_handler+0x13c>
    uint32_t mask = 0;
    c370:	2300      	movs	r3, #0
    pin_number &= 0x1F;
    c372:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    c376:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    c378:	f013 0f01 	tst.w	r3, #1
    c37c:	d047      	beq.n	c40e <next_sense_cond_call_handler+0x142>
    *p_pin = pin_number & 0x1F;
    c37e:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    c382:	0963      	lsrs	r3, r4, #5
    c384:	d150      	bne.n	c428 <next_sense_cond_call_handler+0x15c>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    c386:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    c38a:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    c38e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    c392:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    c396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    switch (port)
    c39a:	0963      	lsrs	r3, r4, #5
    c39c:	d051      	beq.n	c442 <next_sense_cond_call_handler+0x176>
    uint32_t mask = 0;
    c39e:	2300      	movs	r3, #0
    pin_number &= 0x1F;
    c3a0:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    c3a4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    c3a6:	f013 0f01 	tst.w	r3, #1
    c3aa:	d04d      	beq.n	c448 <next_sense_cond_call_handler+0x17c>
    *p_pin = pin_number & 0x1F;
    c3ac:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    c3b0:	0963      	lsrs	r3, r4, #5
    c3b2:	d156      	bne.n	c462 <next_sense_cond_call_handler+0x196>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    c3b4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    c3b8:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    c3bc:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    c3c0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    c3c4:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    c3c8:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
}
    c3cc:	e7b1      	b.n	c332 <next_sense_cond_call_handler+0x66>
            mask = P0_FEATURE_PINS_PRESENT;
    c3ce:	f04f 33ff 	mov.w	r3, #4294967295
    c3d2:	e7b7      	b.n	c344 <next_sense_cond_call_handler+0x78>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    c3d4:	4d40      	ldr	r5, [pc, #256]	; (c4d8 <next_sense_cond_call_handler+0x20c>)
    c3d6:	f240 2229 	movw	r2, #553	; 0x229
    c3da:	4629      	mov	r1, r5
    c3dc:	483f      	ldr	r0, [pc, #252]	; (c4dc <next_sense_cond_call_handler+0x210>)
    c3de:	f004 fe23 	bl	11028 <printk>
    c3e2:	f240 2129 	movw	r1, #553	; 0x229
    c3e6:	4628      	mov	r0, r5
    c3e8:	f004 ff40 	bl	1126c <assert_post_action>
    c3ec:	e7b0      	b.n	c350 <next_sense_cond_call_handler+0x84>
            NRFX_ASSERT(0);
    c3ee:	4f3a      	ldr	r7, [pc, #232]	; (c4d8 <next_sense_cond_call_handler+0x20c>)
    c3f0:	f240 222e 	movw	r2, #558	; 0x22e
    c3f4:	4639      	mov	r1, r7
    c3f6:	4839      	ldr	r0, [pc, #228]	; (c4dc <next_sense_cond_call_handler+0x210>)
    c3f8:	f004 fe16 	bl	11028 <printk>
    c3fc:	f240 212e 	movw	r1, #558	; 0x22e
    c400:	4638      	mov	r0, r7
    c402:	f004 ff33 	bl	1126c <assert_post_action>
    c406:	e7a7      	b.n	c358 <next_sense_cond_call_handler+0x8c>
            mask = P0_FEATURE_PINS_PRESENT;
    c408:	f04f 33ff 	mov.w	r3, #4294967295
    c40c:	e7b1      	b.n	c372 <next_sense_cond_call_handler+0xa6>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    c40e:	4d32      	ldr	r5, [pc, #200]	; (c4d8 <next_sense_cond_call_handler+0x20c>)
    c410:	f240 2229 	movw	r2, #553	; 0x229
    c414:	4629      	mov	r1, r5
    c416:	4831      	ldr	r0, [pc, #196]	; (c4dc <next_sense_cond_call_handler+0x210>)
    c418:	f004 fe06 	bl	11028 <printk>
    c41c:	f240 2129 	movw	r1, #553	; 0x229
    c420:	4628      	mov	r0, r5
    c422:	f004 ff23 	bl	1126c <assert_post_action>
    c426:	e7aa      	b.n	c37e <next_sense_cond_call_handler+0xb2>
            NRFX_ASSERT(0);
    c428:	4f2b      	ldr	r7, [pc, #172]	; (c4d8 <next_sense_cond_call_handler+0x20c>)
    c42a:	f240 222e 	movw	r2, #558	; 0x22e
    c42e:	4639      	mov	r1, r7
    c430:	482a      	ldr	r0, [pc, #168]	; (c4dc <next_sense_cond_call_handler+0x210>)
    c432:	f004 fdf9 	bl	11028 <printk>
    c436:	f240 212e 	movw	r1, #558	; 0x22e
    c43a:	4638      	mov	r0, r7
    c43c:	f004 ff16 	bl	1126c <assert_post_action>
    c440:	e7a1      	b.n	c386 <next_sense_cond_call_handler+0xba>
            mask = P0_FEATURE_PINS_PRESENT;
    c442:	f04f 33ff 	mov.w	r3, #4294967295
    c446:	e7ab      	b.n	c3a0 <next_sense_cond_call_handler+0xd4>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    c448:	4d23      	ldr	r5, [pc, #140]	; (c4d8 <next_sense_cond_call_handler+0x20c>)
    c44a:	f240 2229 	movw	r2, #553	; 0x229
    c44e:	4629      	mov	r1, r5
    c450:	4822      	ldr	r0, [pc, #136]	; (c4dc <next_sense_cond_call_handler+0x210>)
    c452:	f004 fde9 	bl	11028 <printk>
    c456:	f240 2129 	movw	r1, #553	; 0x229
    c45a:	4628      	mov	r0, r5
    c45c:	f004 ff06 	bl	1126c <assert_post_action>
    c460:	e7a4      	b.n	c3ac <next_sense_cond_call_handler+0xe0>
            NRFX_ASSERT(0);
    c462:	4c1d      	ldr	r4, [pc, #116]	; (c4d8 <next_sense_cond_call_handler+0x20c>)
    c464:	f240 222e 	movw	r2, #558	; 0x22e
    c468:	4621      	mov	r1, r4
    c46a:	481c      	ldr	r0, [pc, #112]	; (c4dc <next_sense_cond_call_handler+0x210>)
    c46c:	f004 fddc 	bl	11028 <printk>
    c470:	f240 212e 	movw	r1, #558	; 0x22e
    c474:	4620      	mov	r0, r4
    c476:	f004 fef9 	bl	1126c <assert_post_action>
    c47a:	e79b      	b.n	c3b4 <next_sense_cond_call_handler+0xe8>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    c47c:	f04f 0803 	mov.w	r8, #3
    c480:	e732      	b.n	c2e8 <next_sense_cond_call_handler+0x1c>
            mask = P0_FEATURE_PINS_PRESENT;
    c482:	f04f 33ff 	mov.w	r3, #4294967295
    c486:	e733      	b.n	c2f0 <next_sense_cond_call_handler+0x24>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    c488:	4f13      	ldr	r7, [pc, #76]	; (c4d8 <next_sense_cond_call_handler+0x20c>)
    c48a:	f240 2229 	movw	r2, #553	; 0x229
    c48e:	4639      	mov	r1, r7
    c490:	4812      	ldr	r0, [pc, #72]	; (c4dc <next_sense_cond_call_handler+0x210>)
    c492:	f004 fdc9 	bl	11028 <printk>
    c496:	f240 2129 	movw	r1, #553	; 0x229
    c49a:	4638      	mov	r0, r7
    c49c:	f004 fee6 	bl	1126c <assert_post_action>
    c4a0:	e72d      	b.n	c2fe <next_sense_cond_call_handler+0x32>
            NRFX_ASSERT(0);
    c4a2:	f8df 9034 	ldr.w	r9, [pc, #52]	; c4d8 <next_sense_cond_call_handler+0x20c>
    c4a6:	f240 222e 	movw	r2, #558	; 0x22e
    c4aa:	4649      	mov	r1, r9
    c4ac:	480b      	ldr	r0, [pc, #44]	; (c4dc <next_sense_cond_call_handler+0x210>)
    c4ae:	f004 fdbb 	bl	11028 <printk>
    c4b2:	f240 212e 	movw	r1, #558	; 0x22e
    c4b6:	4648      	mov	r0, r9
    c4b8:	f004 fed8 	bl	1126c <assert_post_action>
    c4bc:	e724      	b.n	c308 <next_sense_cond_call_handler+0x3c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    c4be:	2d01      	cmp	r5, #1
    c4c0:	f47f af34 	bne.w	c32c <next_sense_cond_call_handler+0x60>
            call_handler(pin, trigger);
    c4c4:	4629      	mov	r1, r5
    c4c6:	4620      	mov	r0, r4
    c4c8:	f7ff fe40 	bl	c14c <call_handler>
}
    c4cc:	e731      	b.n	c332 <next_sense_cond_call_handler+0x66>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    c4ce:	2d02      	cmp	r5, #2
    c4d0:	f47f af2f 	bne.w	c332 <next_sense_cond_call_handler+0x66>
    c4d4:	e7f6      	b.n	c4c4 <next_sense_cond_call_handler+0x1f8>
    c4d6:	bf00      	nop
    c4d8:	000167dc 	.word	0x000167dc
    c4dc:	00015984 	.word	0x00015984

0000c4e0 <port_event_handle>:
{
    c4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c4e4:	b082      	sub	sp, #8
    for (i = start_port; i < (start_port + length); i++)
    c4e6:	2300      	movs	r3, #0
    c4e8:	a801      	add	r0, sp, #4
    c4ea:	e008      	b.n	c4fe <port_event_handle+0x1e>
        *p_masks = gpio_regs[i]->LATCH;
    c4ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    c4f0:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    c4f4:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    c4f8:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    c4fc:	3301      	adds	r3, #1
    c4fe:	2b00      	cmp	r3, #0
    c500:	d0f4      	beq.n	c4ec <port_event_handle+0xc>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    c502:	2500      	movs	r5, #0
    c504:	2d00      	cmp	r5, #0
    c506:	d03b      	beq.n	c580 <port_event_handle+0xa0>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    c508:	4b49      	ldr	r3, [pc, #292]	; (c630 <port_event_handle+0x150>)
    c50a:	2200      	movs	r2, #0
    c50c:	601a      	str	r2, [r3, #0]
    c50e:	681b      	ldr	r3, [r3, #0]
    } while (latch_pending_read_and_check(latch));
    c510:	a801      	add	r0, sp, #4
    c512:	f008 f8d5 	bl	146c0 <latch_pending_read_and_check>
    c516:	2800      	cmp	r0, #0
    c518:	d1f3      	bne.n	c502 <port_event_handle+0x22>
}
    c51a:	b002      	add	sp, #8
    c51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            mask = P0_FEATURE_PINS_PRESENT;
    c520:	f04f 33ff 	mov.w	r3, #4294967295
    c524:	e04e      	b.n	c5c4 <port_event_handle+0xe4>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    c526:	4f43      	ldr	r7, [pc, #268]	; (c634 <port_event_handle+0x154>)
    c528:	f240 2229 	movw	r2, #553	; 0x229
    c52c:	4639      	mov	r1, r7
    c52e:	4842      	ldr	r0, [pc, #264]	; (c638 <port_event_handle+0x158>)
    c530:	f004 fd7a 	bl	11028 <printk>
    c534:	f240 2129 	movw	r1, #553	; 0x229
    c538:	4638      	mov	r0, r7
    c53a:	f004 fe97 	bl	1126c <assert_post_action>
    c53e:	e047      	b.n	c5d0 <port_event_handle+0xf0>
            NRFX_ASSERT(0);
    c540:	f8df 80f0 	ldr.w	r8, [pc, #240]	; c634 <port_event_handle+0x154>
    c544:	f240 222e 	movw	r2, #558	; 0x22e
    c548:	4641      	mov	r1, r8
    c54a:	483b      	ldr	r0, [pc, #236]	; (c638 <port_event_handle+0x158>)
    c54c:	f004 fd6c 	bl	11028 <printk>
    c550:	f240 212e 	movw	r1, #558	; 0x22e
    c554:	4640      	mov	r0, r8
    c556:	f004 fe89 	bl	1126c <assert_post_action>
    c55a:	e03d      	b.n	c5d8 <port_event_handle+0xf8>
            mask = P0_FEATURE_PINS_PRESENT;
    c55c:	f04f 33ff 	mov.w	r3, #4294967295
    pin_number &= 0x1F;
    c560:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    c564:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    c566:	f013 0f01 	tst.w	r3, #1
    c56a:	d045      	beq.n	c5f8 <port_event_handle+0x118>
    *p_pin = pin_number & 0x1F;
    c56c:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    c570:	0963      	lsrs	r3, r4, #5
    c572:	d14e      	bne.n	c612 <port_event_handle+0x132>
    reg->LATCH = (1 << pin_number);
    c574:	2301      	movs	r3, #1
    c576:	40b3      	lsls	r3, r6
    c578:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    c57c:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
            while (latch[i])
    c580:	ab02      	add	r3, sp, #8
    c582:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    c586:	f853 4c04 	ldr.w	r4, [r3, #-4]
    c58a:	2c00      	cmp	r4, #0
    c58c:	d04e      	beq.n	c62c <port_event_handle+0x14c>
                uint32_t pin = NRF_CTZ(latch[i]);
    c58e:	fa94 f4a4 	rbit	r4, r4
    c592:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    c596:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    c59a:	f104 0208 	add.w	r2, r4, #8
    c59e:	4b27      	ldr	r3, [pc, #156]	; (c63c <port_event_handle+0x15c>)
    c5a0:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
    c5a4:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    c5a8:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    c5aa:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    c5ae:	a801      	add	r0, sp, #4
    c5b0:	2301      	movs	r3, #1
    c5b2:	fa03 f202 	lsl.w	r2, r3, r2
    c5b6:	5c43      	ldrb	r3, [r0, r1]
    c5b8:	ea23 0302 	bic.w	r3, r3, r2
    c5bc:	5443      	strb	r3, [r0, r1]
    switch (port)
    c5be:	0963      	lsrs	r3, r4, #5
    c5c0:	d0ae      	beq.n	c520 <port_event_handle+0x40>
    uint32_t mask = 0;
    c5c2:	462b      	mov	r3, r5
    pin_number &= 0x1F;
    c5c4:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    c5c8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    c5ca:	f013 0f01 	tst.w	r3, #1
    c5ce:	d0aa      	beq.n	c526 <port_event_handle+0x46>
    *p_pin = pin_number & 0x1F;
    c5d0:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    c5d4:	0963      	lsrs	r3, r4, #5
    c5d6:	d1b3      	bne.n	c540 <port_event_handle+0x60>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    c5d8:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    c5dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    c5e0:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    c5e4:	f3c2 4201 	ubfx	r2, r2, #16, #2
    c5e8:	4631      	mov	r1, r6
    c5ea:	4620      	mov	r0, r4
    c5ec:	f7ff fe6e 	bl	c2cc <next_sense_cond_call_handler>
    switch (port)
    c5f0:	0963      	lsrs	r3, r4, #5
    c5f2:	d0b3      	beq.n	c55c <port_event_handle+0x7c>
    uint32_t mask = 0;
    c5f4:	462b      	mov	r3, r5
    c5f6:	e7b3      	b.n	c560 <port_event_handle+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    c5f8:	4e0e      	ldr	r6, [pc, #56]	; (c634 <port_event_handle+0x154>)
    c5fa:	f240 2229 	movw	r2, #553	; 0x229
    c5fe:	4631      	mov	r1, r6
    c600:	480d      	ldr	r0, [pc, #52]	; (c638 <port_event_handle+0x158>)
    c602:	f004 fd11 	bl	11028 <printk>
    c606:	f240 2129 	movw	r1, #553	; 0x229
    c60a:	4630      	mov	r0, r6
    c60c:	f004 fe2e 	bl	1126c <assert_post_action>
    c610:	e7ac      	b.n	c56c <port_event_handle+0x8c>
            NRFX_ASSERT(0);
    c612:	4c08      	ldr	r4, [pc, #32]	; (c634 <port_event_handle+0x154>)
    c614:	f240 222e 	movw	r2, #558	; 0x22e
    c618:	4621      	mov	r1, r4
    c61a:	4807      	ldr	r0, [pc, #28]	; (c638 <port_event_handle+0x158>)
    c61c:	f004 fd04 	bl	11028 <printk>
    c620:	f240 212e 	movw	r1, #558	; 0x22e
    c624:	4620      	mov	r0, r4
    c626:	f004 fe21 	bl	1126c <assert_post_action>
    c62a:	e7a3      	b.n	c574 <port_event_handle+0x94>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    c62c:	3501      	adds	r5, #1
    c62e:	e769      	b.n	c504 <port_event_handle+0x24>
    c630:	4000617c 	.word	0x4000617c
    c634:	000167dc 	.word	0x000167dc
    c638:	00015984 	.word	0x00015984
    c63c:	20000128 	.word	0x20000128

0000c640 <nrfx_gpiote_input_configure>:
{
    c640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c644:	4604      	mov	r4, r0
    c646:	4615      	mov	r5, r2
    c648:	461e      	mov	r6, r3
    if (p_input_config)
    c64a:	2900      	cmp	r1, #0
    c64c:	d039      	beq.n	c6c2 <nrfx_gpiote_input_configure+0x82>
    c64e:	4688      	mov	r8, r1
        if (pin_is_task_output(pin))
    c650:	f008 f819 	bl	14686 <pin_is_task_output>
    c654:	2800      	cmp	r0, #0
    c656:	f040 80c2 	bne.w	c7de <nrfx_gpiote_input_configure+0x19e>
    switch (port)
    c65a:	0963      	lsrs	r3, r4, #5
    c65c:	d054      	beq.n	c708 <nrfx_gpiote_input_configure+0xc8>
    uint32_t mask = 0;
    c65e:	2300      	movs	r3, #0
    pin_number &= 0x1F;
    c660:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    c664:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    c666:	f013 0f01 	tst.w	r3, #1
    c66a:	d050      	beq.n	c70e <nrfx_gpiote_input_configure+0xce>
    *p_pin = pin_number & 0x1F;
    c66c:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    c670:	0963      	lsrs	r3, r4, #5
    c672:	d159      	bne.n	c728 <nrfx_gpiote_input_configure+0xe8>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    c674:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    c678:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    c67c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    c680:	f1b8 0f00 	cmp.w	r8, #0
    c684:	d05e      	beq.n	c744 <nrfx_gpiote_input_configure+0x104>
    c686:	220c      	movs	r2, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    c688:	f042 0203 	orr.w	r2, r2, #3
    cnf &= ~to_update;
    c68c:	ea23 0302 	bic.w	r3, r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    c690:	f1b8 0f00 	cmp.w	r8, #0
    c694:	d058      	beq.n	c748 <nrfx_gpiote_input_configure+0x108>
    c696:	f898 2000 	ldrb.w	r2, [r8]
    c69a:	0092      	lsls	r2, r2, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    c69c:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
    c69e:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    c6a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    c6a6:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    c6aa:	4a51      	ldr	r2, [pc, #324]	; (c7f0 <nrfx_gpiote_input_configure+0x1b0>)
    c6ac:	f104 0108 	add.w	r1, r4, #8
    c6b0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    c6b4:	f023 0302 	bic.w	r3, r3, #2
    c6b8:	b29b      	uxth	r3, r3
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    c6ba:	f043 0301 	orr.w	r3, r3, #1
    c6be:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    c6c2:	b1c5      	cbz	r5, c6f6 <nrfx_gpiote_input_configure+0xb6>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    c6c4:	f895 8000 	ldrb.w	r8, [r5]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    c6c8:	f8d5 9004 	ldr.w	r9, [r5, #4]
        if (pin_is_output(pin))
    c6cc:	4620      	mov	r0, r4
    c6ce:	f7ff fceb 	bl	c0a8 <pin_is_output>
    c6d2:	2800      	cmp	r0, #0
    c6d4:	d03a      	beq.n	c74c <nrfx_gpiote_input_configure+0x10c>
            if (use_evt)
    c6d6:	f1b9 0f00 	cmp.w	r9, #0
    c6da:	f040 8082 	bne.w	c7e2 <nrfx_gpiote_input_configure+0x1a2>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    c6de:	4b44      	ldr	r3, [pc, #272]	; (c7f0 <nrfx_gpiote_input_configure+0x1b0>)
    c6e0:	f104 0208 	add.w	r2, r4, #8
    c6e4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
    c6e8:	f020 001c 	bic.w	r0, r0, #28
    c6ec:	b280      	uxth	r0, r0
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    c6ee:	ea40 0088 	orr.w	r0, r0, r8, lsl #2
    c6f2:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
    if (p_handler_config)
    c6f6:	2e00      	cmp	r6, #0
    c6f8:	d077      	beq.n	c7ea <nrfx_gpiote_input_configure+0x1aa>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    c6fa:	6872      	ldr	r2, [r6, #4]
    c6fc:	6831      	ldr	r1, [r6, #0]
    c6fe:	4620      	mov	r0, r4
    c700:	f7ff fd8e 	bl	c220 <pin_handler_set>
}
    c704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            mask = P0_FEATURE_PINS_PRESENT;
    c708:	f04f 33ff 	mov.w	r3, #4294967295
    c70c:	e7a8      	b.n	c660 <nrfx_gpiote_input_configure+0x20>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    c70e:	4f39      	ldr	r7, [pc, #228]	; (c7f4 <nrfx_gpiote_input_configure+0x1b4>)
    c710:	f240 2229 	movw	r2, #553	; 0x229
    c714:	4639      	mov	r1, r7
    c716:	4838      	ldr	r0, [pc, #224]	; (c7f8 <nrfx_gpiote_input_configure+0x1b8>)
    c718:	f004 fc86 	bl	11028 <printk>
    c71c:	f240 2129 	movw	r1, #553	; 0x229
    c720:	4638      	mov	r0, r7
    c722:	f004 fda3 	bl	1126c <assert_post_action>
    c726:	e7a1      	b.n	c66c <nrfx_gpiote_input_configure+0x2c>
            NRFX_ASSERT(0);
    c728:	f8df 90c8 	ldr.w	r9, [pc, #200]	; c7f4 <nrfx_gpiote_input_configure+0x1b4>
    c72c:	f240 222e 	movw	r2, #558	; 0x22e
    c730:	4649      	mov	r1, r9
    c732:	4831      	ldr	r0, [pc, #196]	; (c7f8 <nrfx_gpiote_input_configure+0x1b8>)
    c734:	f004 fc78 	bl	11028 <printk>
    c738:	f240 212e 	movw	r1, #558	; 0x22e
    c73c:	4648      	mov	r0, r9
    c73e:	f004 fd95 	bl	1126c <assert_post_action>
    c742:	e797      	b.n	c674 <nrfx_gpiote_input_configure+0x34>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    c744:	2200      	movs	r2, #0
    c746:	e79f      	b.n	c688 <nrfx_gpiote_input_configure+0x48>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    c748:	2200      	movs	r2, #0
    c74a:	e7a7      	b.n	c69c <nrfx_gpiote_input_configure+0x5c>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    c74c:	4b28      	ldr	r3, [pc, #160]	; (c7f0 <nrfx_gpiote_input_configure+0x1b0>)
    c74e:	f104 0208 	add.w	r2, r4, #8
    c752:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
    c756:	f027 0720 	bic.w	r7, r7, #32
    c75a:	04ff      	lsls	r7, r7, #19
    c75c:	0cff      	lsrs	r7, r7, #19
    c75e:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
            if (use_evt)
    c762:	f1b9 0f00 	cmp.w	r9, #0
    c766:	d0ba      	beq.n	c6de <nrfx_gpiote_input_configure+0x9e>
                if (!edge)
    c768:	f1b8 0f03 	cmp.w	r8, #3
    c76c:	d83b      	bhi.n	c7e6 <nrfx_gpiote_input_configure+0x1a6>
                uint8_t ch = *p_trigger_config->p_in_channel;
    c76e:	686b      	ldr	r3, [r5, #4]
    c770:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    c772:	f1b8 0f00 	cmp.w	r8, #0
    c776:	d106      	bne.n	c786 <nrfx_gpiote_input_configure+0x146>
    p_reg->CONFIG[idx] = 0;
    c778:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    c77c:	4b1f      	ldr	r3, [pc, #124]	; (c7fc <nrfx_gpiote_input_configure+0x1bc>)
    c77e:	2200      	movs	r2, #0
    c780:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    c784:	e7ab      	b.n	c6de <nrfx_gpiote_input_configure+0x9e>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    c786:	4640      	mov	r0, r8
    c788:	f007 ff94 	bl	146b4 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    c78c:	4b1b      	ldr	r3, [pc, #108]	; (c7fc <nrfx_gpiote_input_configure+0x1bc>)
    c78e:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    c792:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    c796:	f021 0103 	bic.w	r1, r1, #3
    c79a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    c79e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    c7a2:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
    c7a6:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    c7aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    c7ae:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    c7b2:	0221      	lsls	r1, r4, #8
    c7b4:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    c7b8:	0400      	lsls	r0, r0, #16
    c7ba:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    c7be:	4301      	orrs	r1, r0
    c7c0:	ea4c 0101 	orr.w	r1, ip, r1
    c7c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    c7c8:	036d      	lsls	r5, r5, #13
    c7ca:	b2ad      	uxth	r5, r5
    c7cc:	f104 0308 	add.w	r3, r4, #8
    c7d0:	432f      	orrs	r7, r5
    c7d2:	f047 0720 	orr.w	r7, r7, #32
    c7d6:	4a06      	ldr	r2, [pc, #24]	; (c7f0 <nrfx_gpiote_input_configure+0x1b0>)
    c7d8:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
    c7dc:	e77f      	b.n	c6de <nrfx_gpiote_input_configure+0x9e>
            return NRFX_ERROR_INVALID_PARAM;
    c7de:	4808      	ldr	r0, [pc, #32]	; (c800 <nrfx_gpiote_input_configure+0x1c0>)
    c7e0:	e790      	b.n	c704 <nrfx_gpiote_input_configure+0xc4>
                return NRFX_ERROR_INVALID_PARAM;
    c7e2:	4807      	ldr	r0, [pc, #28]	; (c800 <nrfx_gpiote_input_configure+0x1c0>)
    c7e4:	e78e      	b.n	c704 <nrfx_gpiote_input_configure+0xc4>
                    return NRFX_ERROR_INVALID_PARAM;
    c7e6:	4806      	ldr	r0, [pc, #24]	; (c800 <nrfx_gpiote_input_configure+0x1c0>)
    c7e8:	e78c      	b.n	c704 <nrfx_gpiote_input_configure+0xc4>
        err = NRFX_SUCCESS;
    c7ea:	4806      	ldr	r0, [pc, #24]	; (c804 <nrfx_gpiote_input_configure+0x1c4>)
    c7ec:	e78a      	b.n	c704 <nrfx_gpiote_input_configure+0xc4>
    c7ee:	bf00      	nop
    c7f0:	20000128 	.word	0x20000128
    c7f4:	000167dc 	.word	0x000167dc
    c7f8:	00015984 	.word	0x00015984
    c7fc:	40006000 	.word	0x40006000
    c800:	0bad0004 	.word	0x0bad0004
    c804:	0bad0000 	.word	0x0bad0000

0000c808 <nrfx_gpiote_output_configure>:
{
    c808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c80c:	4604      	mov	r4, r0
    c80e:	4615      	mov	r5, r2
    if (p_config)
    c810:	2900      	cmp	r1, #0
    c812:	d064      	beq.n	c8de <nrfx_gpiote_output_configure+0xd6>
    c814:	460f      	mov	r7, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    c816:	f007 ff45 	bl	146a4 <pin_is_input>
    c81a:	b128      	cbz	r0, c828 <nrfx_gpiote_output_configure+0x20>
    c81c:	4620      	mov	r0, r4
    c81e:	f7ff fc2d 	bl	c07c <pin_in_use_by_te>
    c822:	2800      	cmp	r0, #0
    c824:	f040 80c9 	bne.w	c9ba <nrfx_gpiote_output_configure+0x1b2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    c828:	4620      	mov	r0, r4
    c82a:	f7ff fc31 	bl	c090 <pin_has_trigger>
    c82e:	b118      	cbz	r0, c838 <nrfx_gpiote_output_configure+0x30>
    c830:	787b      	ldrb	r3, [r7, #1]
    c832:	2b01      	cmp	r3, #1
    c834:	f000 80c3 	beq.w	c9be <nrfx_gpiote_output_configure+0x1b6>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    c838:	f107 0901 	add.w	r9, r7, #1
    c83c:	f107 0802 	add.w	r8, r7, #2
    switch (port)
    c840:	0963      	lsrs	r3, r4, #5
    c842:	f000 8090 	beq.w	c966 <nrfx_gpiote_output_configure+0x15e>
    uint32_t mask = 0;
    c846:	2300      	movs	r3, #0
    pin_number &= 0x1F;
    c848:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    c84c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    c84e:	f013 0f01 	tst.w	r3, #1
    c852:	f000 808b 	beq.w	c96c <nrfx_gpiote_output_configure+0x164>
    *p_pin = pin_number & 0x1F;
    c856:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    c85a:	0963      	lsrs	r3, r4, #5
    c85c:	f040 8093 	bne.w	c986 <nrfx_gpiote_output_configure+0x17e>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    c860:	f506 73e0 	add.w	r3, r6, #448	; 0x1c0
    c864:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    c868:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    c86c:	f1b9 0f00 	cmp.w	r9, #0
    c870:	f000 8097 	beq.w	c9a2 <nrfx_gpiote_output_configure+0x19a>
    c874:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    c876:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    c87a:	f1b8 0f00 	cmp.w	r8, #0
    c87e:	f000 8092 	beq.w	c9a6 <nrfx_gpiote_output_configure+0x19e>
    c882:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    c884:	430b      	orrs	r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    c886:	2f00      	cmp	r7, #0
    c888:	f000 808f 	beq.w	c9aa <nrfx_gpiote_output_configure+0x1a2>
    c88c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    c890:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    c892:	ea22 0203 	bic.w	r2, r2, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    c896:	f1b9 0f00 	cmp.w	r9, #0
    c89a:	f000 8088 	beq.w	c9ae <nrfx_gpiote_output_configure+0x1a6>
    c89e:	787b      	ldrb	r3, [r7, #1]
    c8a0:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    c8a2:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    c8a6:	f1b8 0f00 	cmp.w	r8, #0
    c8aa:	f000 8082 	beq.w	c9b2 <nrfx_gpiote_output_configure+0x1aa>
    c8ae:	78b9      	ldrb	r1, [r7, #2]
    c8b0:	0089      	lsls	r1, r1, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    c8b2:	430b      	orrs	r3, r1
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    c8b4:	2f00      	cmp	r7, #0
    c8b6:	d07e      	beq.n	c9b6 <nrfx_gpiote_output_configure+0x1ae>
    c8b8:	7839      	ldrb	r1, [r7, #0]
    c8ba:	0209      	lsls	r1, r1, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    c8bc:	430b      	orrs	r3, r1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    c8be:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
    c8c0:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    c8c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    c8c8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    c8cc:	4a40      	ldr	r2, [pc, #256]	; (c9d0 <nrfx_gpiote_output_configure+0x1c8>)
    c8ce:	f104 0108 	add.w	r1, r4, #8
    c8d2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    c8d6:	f043 0303 	orr.w	r3, r3, #3
    c8da:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    c8de:	2d00      	cmp	r5, #0
    c8e0:	d06f      	beq.n	c9c2 <nrfx_gpiote_output_configure+0x1ba>
        if (pin_is_input(pin))
    c8e2:	4620      	mov	r0, r4
    c8e4:	f007 fede 	bl	146a4 <pin_is_input>
    c8e8:	2800      	cmp	r0, #0
    c8ea:	d16d      	bne.n	c9c8 <nrfx_gpiote_output_configure+0x1c0>
        uint32_t ch = p_task_config->task_ch;
    c8ec:	782a      	ldrb	r2, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    c8ee:	f502 71a2 	add.w	r1, r2, #324	; 0x144
    c8f2:	4b38      	ldr	r3, [pc, #224]	; (c9d4 <nrfx_gpiote_output_configure+0x1cc>)
    c8f4:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    c8f8:	4935      	ldr	r1, [pc, #212]	; (c9d0 <nrfx_gpiote_output_configure+0x1c8>)
    c8fa:	f104 0008 	add.w	r0, r4, #8
    c8fe:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
    c902:	f023 0320 	bic.w	r3, r3, #32
    c906:	04db      	lsls	r3, r3, #19
    c908:	0cdb      	lsrs	r3, r3, #19
    c90a:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    c90e:	7869      	ldrb	r1, [r5, #1]
    c910:	2900      	cmp	r1, #0
    c912:	d05b      	beq.n	c9cc <nrfx_gpiote_output_configure+0x1c4>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    c914:	f895 c002 	ldrb.w	ip, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    c918:	4d2e      	ldr	r5, [pc, #184]	; (c9d4 <nrfx_gpiote_output_configure+0x1cc>)
    c91a:	f502 76a2 	add.w	r6, r2, #324	; 0x144
    c91e:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
    c922:	f420 1098 	bic.w	r0, r0, #1245184	; 0x130000
    c926:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
    c92a:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    c92e:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
    c932:	0220      	lsls	r0, r4, #8
    c934:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    c938:	0409      	lsls	r1, r1, #16
    c93a:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    c93e:	4301      	orrs	r1, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    c940:	ea4f 500c 	mov.w	r0, ip, lsl #20
    c944:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    c948:	4301      	orrs	r1, r0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    c94a:	4339      	orrs	r1, r7
    c94c:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    c950:	0352      	lsls	r2, r2, #13
    c952:	b292      	uxth	r2, r2
    c954:	3408      	adds	r4, #8
    c956:	431a      	orrs	r2, r3
    c958:	f042 0220 	orr.w	r2, r2, #32
    c95c:	4b1c      	ldr	r3, [pc, #112]	; (c9d0 <nrfx_gpiote_output_configure+0x1c8>)
    c95e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    return NRFX_SUCCESS;
    c962:	481d      	ldr	r0, [pc, #116]	; (c9d8 <nrfx_gpiote_output_configure+0x1d0>)
    c964:	e02e      	b.n	c9c4 <nrfx_gpiote_output_configure+0x1bc>
            mask = P0_FEATURE_PINS_PRESENT;
    c966:	f04f 33ff 	mov.w	r3, #4294967295
    c96a:	e76d      	b.n	c848 <nrfx_gpiote_output_configure+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    c96c:	4e1b      	ldr	r6, [pc, #108]	; (c9dc <nrfx_gpiote_output_configure+0x1d4>)
    c96e:	f240 2229 	movw	r2, #553	; 0x229
    c972:	4631      	mov	r1, r6
    c974:	481a      	ldr	r0, [pc, #104]	; (c9e0 <nrfx_gpiote_output_configure+0x1d8>)
    c976:	f004 fb57 	bl	11028 <printk>
    c97a:	f240 2129 	movw	r1, #553	; 0x229
    c97e:	4630      	mov	r0, r6
    c980:	f004 fc74 	bl	1126c <assert_post_action>
    c984:	e767      	b.n	c856 <nrfx_gpiote_output_configure+0x4e>
            NRFX_ASSERT(0);
    c986:	f8df a054 	ldr.w	sl, [pc, #84]	; c9dc <nrfx_gpiote_output_configure+0x1d4>
    c98a:	f240 222e 	movw	r2, #558	; 0x22e
    c98e:	4651      	mov	r1, sl
    c990:	4813      	ldr	r0, [pc, #76]	; (c9e0 <nrfx_gpiote_output_configure+0x1d8>)
    c992:	f004 fb49 	bl	11028 <printk>
    c996:	f240 212e 	movw	r1, #558	; 0x22e
    c99a:	4650      	mov	r0, sl
    c99c:	f004 fc66 	bl	1126c <assert_post_action>
    c9a0:	e75e      	b.n	c860 <nrfx_gpiote_output_configure+0x58>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    c9a2:	2300      	movs	r3, #0
    c9a4:	e767      	b.n	c876 <nrfx_gpiote_output_configure+0x6e>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    c9a6:	2100      	movs	r1, #0
    c9a8:	e76c      	b.n	c884 <nrfx_gpiote_output_configure+0x7c>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    c9aa:	2100      	movs	r1, #0
    c9ac:	e770      	b.n	c890 <nrfx_gpiote_output_configure+0x88>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    c9ae:	2300      	movs	r3, #0
    c9b0:	e777      	b.n	c8a2 <nrfx_gpiote_output_configure+0x9a>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    c9b2:	2100      	movs	r1, #0
    c9b4:	e77d      	b.n	c8b2 <nrfx_gpiote_output_configure+0xaa>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    c9b6:	2100      	movs	r1, #0
    c9b8:	e780      	b.n	c8bc <nrfx_gpiote_output_configure+0xb4>
    c9ba:	480a      	ldr	r0, [pc, #40]	; (c9e4 <nrfx_gpiote_output_configure+0x1dc>)
    c9bc:	e002      	b.n	c9c4 <nrfx_gpiote_output_configure+0x1bc>
    c9be:	4809      	ldr	r0, [pc, #36]	; (c9e4 <nrfx_gpiote_output_configure+0x1dc>)
    c9c0:	e000      	b.n	c9c4 <nrfx_gpiote_output_configure+0x1bc>
    c9c2:	4805      	ldr	r0, [pc, #20]	; (c9d8 <nrfx_gpiote_output_configure+0x1d0>)
}
    c9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return NRFX_ERROR_INVALID_PARAM;
    c9c8:	4806      	ldr	r0, [pc, #24]	; (c9e4 <nrfx_gpiote_output_configure+0x1dc>)
    c9ca:	e7fb      	b.n	c9c4 <nrfx_gpiote_output_configure+0x1bc>
    return NRFX_SUCCESS;
    c9cc:	4802      	ldr	r0, [pc, #8]	; (c9d8 <nrfx_gpiote_output_configure+0x1d0>)
    c9ce:	e7f9      	b.n	c9c4 <nrfx_gpiote_output_configure+0x1bc>
    c9d0:	20000128 	.word	0x20000128
    c9d4:	40006000 	.word	0x40006000
    c9d8:	0bad0000 	.word	0x0bad0000
    c9dc:	000167dc 	.word	0x000167dc
    c9e0:	00015984 	.word	0x00015984
    c9e4:	0bad0004 	.word	0x0bad0004

0000c9e8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    c9e8:	4b01      	ldr	r3, [pc, #4]	; (c9f0 <nrfx_gpiote_global_callback_set+0x8>)
    c9ea:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    c9ec:	60d9      	str	r1, [r3, #12]
}
    c9ee:	4770      	bx	lr
    c9f0:	20000128 	.word	0x20000128

0000c9f4 <nrfx_gpiote_channel_get>:
{
    c9f4:	b570      	push	{r4, r5, r6, lr}
    c9f6:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    c9f8:	460d      	mov	r5, r1
    c9fa:	b159      	cbz	r1, ca14 <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
    c9fc:	4620      	mov	r0, r4
    c9fe:	f7ff fb3d 	bl	c07c <pin_in_use_by_te>
    ca02:	b1a0      	cbz	r0, ca2e <nrfx_gpiote_channel_get+0x3a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    ca04:	3408      	adds	r4, #8
    ca06:	4b0b      	ldr	r3, [pc, #44]	; (ca34 <nrfx_gpiote_channel_get+0x40>)
    ca08:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    ca0c:	0b5b      	lsrs	r3, r3, #13
    ca0e:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    ca10:	4809      	ldr	r0, [pc, #36]	; (ca38 <nrfx_gpiote_channel_get+0x44>)
}
    ca12:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
    ca14:	4e09      	ldr	r6, [pc, #36]	; (ca3c <nrfx_gpiote_channel_get+0x48>)
    ca16:	f240 2235 	movw	r2, #565	; 0x235
    ca1a:	4631      	mov	r1, r6
    ca1c:	4808      	ldr	r0, [pc, #32]	; (ca40 <nrfx_gpiote_channel_get+0x4c>)
    ca1e:	f004 fb03 	bl	11028 <printk>
    ca22:	f240 2135 	movw	r1, #565	; 0x235
    ca26:	4630      	mov	r0, r6
    ca28:	f004 fc20 	bl	1126c <assert_post_action>
    ca2c:	e7e6      	b.n	c9fc <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
    ca2e:	4805      	ldr	r0, [pc, #20]	; (ca44 <nrfx_gpiote_channel_get+0x50>)
    ca30:	e7ef      	b.n	ca12 <nrfx_gpiote_channel_get+0x1e>
    ca32:	bf00      	nop
    ca34:	20000128 	.word	0x20000128
    ca38:	0bad0000 	.word	0x0bad0000
    ca3c:	00017018 	.word	0x00017018
    ca40:	00015984 	.word	0x00015984
    ca44:	0bad0004 	.word	0x0bad0004

0000ca48 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    ca48:	4b0f      	ldr	r3, [pc, #60]	; (ca88 <nrfx_gpiote_init+0x40>)
    ca4a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    ca4e:	b10b      	cbz	r3, ca54 <nrfx_gpiote_init+0xc>
        return err_code;
    ca50:	480e      	ldr	r0, [pc, #56]	; (ca8c <nrfx_gpiote_init+0x44>)
}
    ca52:	4770      	bx	lr
{
    ca54:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    ca56:	4c0c      	ldr	r4, [pc, #48]	; (ca88 <nrfx_gpiote_init+0x40>)
    ca58:	2240      	movs	r2, #64	; 0x40
    ca5a:	2100      	movs	r1, #0
    ca5c:	f104 0010 	add.w	r0, r4, #16
    ca60:	f007 fffd 	bl	14a5e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    ca64:	2006      	movs	r0, #6
    ca66:	f7f8 fdfd 	bl	5664 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    ca6a:	4b09      	ldr	r3, [pc, #36]	; (ca90 <nrfx_gpiote_init+0x48>)
    ca6c:	2200      	movs	r2, #0
    ca6e:	601a      	str	r2, [r3, #0]
    ca70:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    ca72:	4b08      	ldr	r3, [pc, #32]	; (ca94 <nrfx_gpiote_init+0x4c>)
    ca74:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    ca78:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    ca7c:	2301      	movs	r3, #1
    ca7e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    ca82:	6563      	str	r3, [r4, #84]	; 0x54
    return err_code;
    ca84:	4804      	ldr	r0, [pc, #16]	; (ca98 <nrfx_gpiote_init+0x50>)
}
    ca86:	bd10      	pop	{r4, pc}
    ca88:	20000128 	.word	0x20000128
    ca8c:	0bad0005 	.word	0x0bad0005
    ca90:	4000617c 	.word	0x4000617c
    ca94:	40006000 	.word	0x40006000
    ca98:	0bad0000 	.word	0x0bad0000

0000ca9c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    ca9c:	4b03      	ldr	r3, [pc, #12]	; (caac <nrfx_gpiote_is_init+0x10>)
    ca9e:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    caa2:	3800      	subs	r0, #0
    caa4:	bf18      	it	ne
    caa6:	2001      	movne	r0, #1
    caa8:	4770      	bx	lr
    caaa:	bf00      	nop
    caac:	20000128 	.word	0x20000128

0000cab0 <nrfx_gpiote_channel_free>:
{
    cab0:	b508      	push	{r3, lr}
    cab2:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    cab4:	4801      	ldr	r0, [pc, #4]	; (cabc <nrfx_gpiote_channel_free+0xc>)
    cab6:	f7ff f8e9 	bl	bc8c <nrfx_flag32_free>
}
    caba:	bd08      	pop	{r3, pc}
    cabc:	20000178 	.word	0x20000178

0000cac0 <nrfx_gpiote_channel_alloc>:
{
    cac0:	b508      	push	{r3, lr}
    cac2:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    cac4:	4801      	ldr	r0, [pc, #4]	; (cacc <nrfx_gpiote_channel_alloc+0xc>)
    cac6:	f7ff f8bd 	bl	bc44 <nrfx_flag32_alloc>
}
    caca:	bd08      	pop	{r3, pc}
    cacc:	20000178 	.word	0x20000178

0000cad0 <nrfx_gpiote_trigger_enable>:
{
    cad0:	b570      	push	{r4, r5, r6, lr}
    cad2:	4604      	mov	r4, r0
    cad4:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    cad6:	f7ff fadb 	bl	c090 <pin_has_trigger>
    cada:	b1b8      	cbz	r0, cb0c <nrfx_gpiote_trigger_enable+0x3c>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    cadc:	4620      	mov	r0, r4
    cade:	f7ff facd 	bl	c07c <pin_in_use_by_te>
    cae2:	b118      	cbz	r0, caec <nrfx_gpiote_trigger_enable+0x1c>
    cae4:	4620      	mov	r0, r4
    cae6:	f007 fddd 	bl	146a4 <pin_is_input>
    caea:	b9e0      	cbnz	r0, cb26 <nrfx_gpiote_trigger_enable+0x56>
        NRFX_ASSERT(int_enable);
    caec:	2d00      	cmp	r5, #0
    caee:	d049      	beq.n	cb84 <nrfx_gpiote_trigger_enable+0xb4>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    caf0:	f104 0308 	add.w	r3, r4, #8
    caf4:	4a61      	ldr	r2, [pc, #388]	; (cc7c <nrfx_gpiote_trigger_enable+0x1ac>)
    caf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    cafa:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    cafe:	2b04      	cmp	r3, #4
    cb00:	f000 8081 	beq.w	cc06 <nrfx_gpiote_trigger_enable+0x136>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    cb04:	2b05      	cmp	r3, #5
    cb06:	d14a      	bne.n	cb9e <nrfx_gpiote_trigger_enable+0xce>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    cb08:	2602      	movs	r6, #2
    cb0a:	e07d      	b.n	cc08 <nrfx_gpiote_trigger_enable+0x138>
    NRFX_ASSERT(pin_has_trigger(pin));
    cb0c:	4e5c      	ldr	r6, [pc, #368]	; (cc80 <nrfx_gpiote_trigger_enable+0x1b0>)
    cb0e:	f240 32df 	movw	r2, #991	; 0x3df
    cb12:	4631      	mov	r1, r6
    cb14:	485b      	ldr	r0, [pc, #364]	; (cc84 <nrfx_gpiote_trigger_enable+0x1b4>)
    cb16:	f004 fa87 	bl	11028 <printk>
    cb1a:	f240 31df 	movw	r1, #991	; 0x3df
    cb1e:	4630      	mov	r0, r6
    cb20:	f004 fba4 	bl	1126c <assert_post_action>
    cb24:	e7da      	b.n	cadc <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
    cb26:	4620      	mov	r0, r4
    cb28:	f7ff fac8 	bl	c0bc <pin_te_get>
    cb2c:	4604      	mov	r4, r0
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    cb2e:	2807      	cmp	r0, #7
    cb30:	d81b      	bhi.n	cb6a <nrfx_gpiote_trigger_enable+0x9a>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    cb32:	00a3      	lsls	r3, r4, #2
    cb34:	f503 7380 	add.w	r3, r3, #256	; 0x100
    cb38:	b29b      	uxth	r3, r3
    return ((uint32_t)p_reg + event);
    cb3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    cb3e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    cb42:	2200      	movs	r2, #0
    cb44:	601a      	str	r2, [r3, #0]
    cb46:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    cb48:	4a4f      	ldr	r2, [pc, #316]	; (cc88 <nrfx_gpiote_trigger_enable+0x1b8>)
    cb4a:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    cb4e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    cb52:	f043 0301 	orr.w	r3, r3, #1
    cb56:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    cb5a:	2d00      	cmp	r5, #0
    cb5c:	d06d      	beq.n	cc3a <nrfx_gpiote_trigger_enable+0x16a>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    cb5e:	2001      	movs	r0, #1
    cb60:	fa00 f404 	lsl.w	r4, r0, r4
    p_reg->INTENSET = mask;
    cb64:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
}
    cb68:	e067      	b.n	cc3a <nrfx_gpiote_trigger_enable+0x16a>
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    cb6a:	4e48      	ldr	r6, [pc, #288]	; (cc8c <nrfx_gpiote_trigger_enable+0x1bc>)
    cb6c:	f44f 7223 	mov.w	r2, #652	; 0x28c
    cb70:	4631      	mov	r1, r6
    cb72:	4844      	ldr	r0, [pc, #272]	; (cc84 <nrfx_gpiote_trigger_enable+0x1b4>)
    cb74:	f004 fa58 	bl	11028 <printk>
    cb78:	f44f 7123 	mov.w	r1, #652	; 0x28c
    cb7c:	4630      	mov	r0, r6
    cb7e:	f004 fb75 	bl	1126c <assert_post_action>
    cb82:	e7d6      	b.n	cb32 <nrfx_gpiote_trigger_enable+0x62>
        NRFX_ASSERT(int_enable);
    cb84:	4d3e      	ldr	r5, [pc, #248]	; (cc80 <nrfx_gpiote_trigger_enable+0x1b0>)
    cb86:	f240 32ee 	movw	r2, #1006	; 0x3ee
    cb8a:	4629      	mov	r1, r5
    cb8c:	483d      	ldr	r0, [pc, #244]	; (cc84 <nrfx_gpiote_trigger_enable+0x1b4>)
    cb8e:	f004 fa4b 	bl	11028 <printk>
    cb92:	f240 31ee 	movw	r1, #1006	; 0x3ee
    cb96:	4628      	mov	r0, r5
    cb98:	f004 fb68 	bl	1126c <assert_post_action>
    cb9c:	e7a8      	b.n	caf0 <nrfx_gpiote_trigger_enable+0x20>
    switch (port)
    cb9e:	0963      	lsrs	r3, r4, #5
    cba0:	d014      	beq.n	cbcc <nrfx_gpiote_trigger_enable+0xfc>
    uint32_t mask = 0;
    cba2:	2300      	movs	r3, #0
    pin_number &= 0x1F;
    cba4:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    cba8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    cbaa:	f013 0f01 	tst.w	r3, #1
    cbae:	d010      	beq.n	cbd2 <nrfx_gpiote_trigger_enable+0x102>
    *p_pin = pin_number & 0x1F;
    cbb0:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    cbb4:	0963      	lsrs	r3, r4, #5
    cbb6:	d119      	bne.n	cbec <nrfx_gpiote_trigger_enable+0x11c>
    return p_reg->IN;
    cbb8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    cbbc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    cbc0:	40eb      	lsrs	r3, r5
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    cbc2:	f013 0f01 	tst.w	r3, #1
    cbc6:	d039      	beq.n	cc3c <nrfx_gpiote_trigger_enable+0x16c>
    cbc8:	2603      	movs	r6, #3
    cbca:	e01d      	b.n	cc08 <nrfx_gpiote_trigger_enable+0x138>
            mask = P0_FEATURE_PINS_PRESENT;
    cbcc:	f04f 33ff 	mov.w	r3, #4294967295
    cbd0:	e7e8      	b.n	cba4 <nrfx_gpiote_trigger_enable+0xd4>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    cbd2:	4d2f      	ldr	r5, [pc, #188]	; (cc90 <nrfx_gpiote_trigger_enable+0x1c0>)
    cbd4:	f240 2229 	movw	r2, #553	; 0x229
    cbd8:	4629      	mov	r1, r5
    cbda:	482a      	ldr	r0, [pc, #168]	; (cc84 <nrfx_gpiote_trigger_enable+0x1b4>)
    cbdc:	f004 fa24 	bl	11028 <printk>
    cbe0:	f240 2129 	movw	r1, #553	; 0x229
    cbe4:	4628      	mov	r0, r5
    cbe6:	f004 fb41 	bl	1126c <assert_post_action>
    cbea:	e7e1      	b.n	cbb0 <nrfx_gpiote_trigger_enable+0xe0>
            NRFX_ASSERT(0);
    cbec:	4e28      	ldr	r6, [pc, #160]	; (cc90 <nrfx_gpiote_trigger_enable+0x1c0>)
    cbee:	f240 222e 	movw	r2, #558	; 0x22e
    cbf2:	4631      	mov	r1, r6
    cbf4:	4823      	ldr	r0, [pc, #140]	; (cc84 <nrfx_gpiote_trigger_enable+0x1b4>)
    cbf6:	f004 fa17 	bl	11028 <printk>
    cbfa:	f240 212e 	movw	r1, #558	; 0x22e
    cbfe:	4630      	mov	r0, r6
    cc00:	f004 fb34 	bl	1126c <assert_post_action>
    cc04:	e7d8      	b.n	cbb8 <nrfx_gpiote_trigger_enable+0xe8>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    cc06:	2603      	movs	r6, #3
    switch (port)
    cc08:	0963      	lsrs	r3, r4, #5
    cc0a:	d019      	beq.n	cc40 <nrfx_gpiote_trigger_enable+0x170>
    uint32_t mask = 0;
    cc0c:	2300      	movs	r3, #0
    pin_number &= 0x1F;
    cc0e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    cc12:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    cc14:	f013 0f01 	tst.w	r3, #1
    cc18:	d015      	beq.n	cc46 <nrfx_gpiote_trigger_enable+0x176>
    *p_pin = pin_number & 0x1F;
    cc1a:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    cc1e:	0963      	lsrs	r3, r4, #5
    cc20:	d11e      	bne.n	cc60 <nrfx_gpiote_trigger_enable+0x190>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    cc22:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cc26:	f505 72e0 	add.w	r2, r5, #448	; 0x1c0
    cc2a:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    cc2e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    cc32:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    cc36:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    cc3a:	bd70      	pop	{r4, r5, r6, pc}
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    cc3c:	2602      	movs	r6, #2
    cc3e:	e7e3      	b.n	cc08 <nrfx_gpiote_trigger_enable+0x138>
            mask = P0_FEATURE_PINS_PRESENT;
    cc40:	f04f 33ff 	mov.w	r3, #4294967295
    cc44:	e7e3      	b.n	cc0e <nrfx_gpiote_trigger_enable+0x13e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    cc46:	4d12      	ldr	r5, [pc, #72]	; (cc90 <nrfx_gpiote_trigger_enable+0x1c0>)
    cc48:	f240 2229 	movw	r2, #553	; 0x229
    cc4c:	4629      	mov	r1, r5
    cc4e:	480d      	ldr	r0, [pc, #52]	; (cc84 <nrfx_gpiote_trigger_enable+0x1b4>)
    cc50:	f004 f9ea 	bl	11028 <printk>
    cc54:	f240 2129 	movw	r1, #553	; 0x229
    cc58:	4628      	mov	r0, r5
    cc5a:	f004 fb07 	bl	1126c <assert_post_action>
    cc5e:	e7dc      	b.n	cc1a <nrfx_gpiote_trigger_enable+0x14a>
            NRFX_ASSERT(0);
    cc60:	4c0b      	ldr	r4, [pc, #44]	; (cc90 <nrfx_gpiote_trigger_enable+0x1c0>)
    cc62:	f240 222e 	movw	r2, #558	; 0x22e
    cc66:	4621      	mov	r1, r4
    cc68:	4806      	ldr	r0, [pc, #24]	; (cc84 <nrfx_gpiote_trigger_enable+0x1b4>)
    cc6a:	f004 f9dd 	bl	11028 <printk>
    cc6e:	f240 212e 	movw	r1, #558	; 0x22e
    cc72:	4620      	mov	r0, r4
    cc74:	f004 fafa 	bl	1126c <assert_post_action>
    cc78:	e7d3      	b.n	cc22 <nrfx_gpiote_trigger_enable+0x152>
    cc7a:	bf00      	nop
    cc7c:	20000128 	.word	0x20000128
    cc80:	00017018 	.word	0x00017018
    cc84:	00015984 	.word	0x00015984
    cc88:	40006000 	.word	0x40006000
    cc8c:	00017058 	.word	0x00017058
    cc90:	000167dc 	.word	0x000167dc

0000cc94 <nrfx_gpiote_trigger_disable>:
{
    cc94:	b538      	push	{r3, r4, r5, lr}
    cc96:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    cc98:	f7ff f9f0 	bl	c07c <pin_in_use_by_te>
    cc9c:	b1a0      	cbz	r0, ccc8 <nrfx_gpiote_trigger_disable+0x34>
    cc9e:	4620      	mov	r0, r4
    cca0:	f007 fd00 	bl	146a4 <pin_is_input>
    cca4:	b180      	cbz	r0, ccc8 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    cca6:	4620      	mov	r0, r4
    cca8:	f7ff fa08 	bl	c0bc <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    ccac:	2201      	movs	r2, #1
    ccae:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    ccb0:	4b20      	ldr	r3, [pc, #128]	; (cd34 <nrfx_gpiote_trigger_disable+0xa0>)
    ccb2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    ccb6:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    ccba:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    ccbe:	f022 0203 	bic.w	r2, r2, #3
    ccc2:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    ccc6:	e016      	b.n	ccf6 <nrfx_gpiote_trigger_disable+0x62>
    switch (port)
    ccc8:	0963      	lsrs	r3, r4, #5
    ccca:	d015      	beq.n	ccf8 <nrfx_gpiote_trigger_disable+0x64>
    uint32_t mask = 0;
    cccc:	2300      	movs	r3, #0
    pin_number &= 0x1F;
    ccce:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    ccd2:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    ccd4:	f013 0f01 	tst.w	r3, #1
    ccd8:	d011      	beq.n	ccfe <nrfx_gpiote_trigger_disable+0x6a>
    *p_pin = pin_number & 0x1F;
    ccda:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    ccde:	0963      	lsrs	r3, r4, #5
    cce0:	d11a      	bne.n	cd18 <nrfx_gpiote_trigger_disable+0x84>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    cce2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cce6:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    ccea:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    ccee:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    ccf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ccf6:	bd38      	pop	{r3, r4, r5, pc}
            mask = P0_FEATURE_PINS_PRESENT;
    ccf8:	f04f 33ff 	mov.w	r3, #4294967295
    ccfc:	e7e7      	b.n	ccce <nrfx_gpiote_trigger_disable+0x3a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    ccfe:	4d0e      	ldr	r5, [pc, #56]	; (cd38 <nrfx_gpiote_trigger_disable+0xa4>)
    cd00:	f240 2229 	movw	r2, #553	; 0x229
    cd04:	4629      	mov	r1, r5
    cd06:	480d      	ldr	r0, [pc, #52]	; (cd3c <nrfx_gpiote_trigger_disable+0xa8>)
    cd08:	f004 f98e 	bl	11028 <printk>
    cd0c:	f240 2129 	movw	r1, #553	; 0x229
    cd10:	4628      	mov	r0, r5
    cd12:	f004 faab 	bl	1126c <assert_post_action>
    cd16:	e7e0      	b.n	ccda <nrfx_gpiote_trigger_disable+0x46>
            NRFX_ASSERT(0);
    cd18:	4c07      	ldr	r4, [pc, #28]	; (cd38 <nrfx_gpiote_trigger_disable+0xa4>)
    cd1a:	f240 222e 	movw	r2, #558	; 0x22e
    cd1e:	4621      	mov	r1, r4
    cd20:	4806      	ldr	r0, [pc, #24]	; (cd3c <nrfx_gpiote_trigger_disable+0xa8>)
    cd22:	f004 f981 	bl	11028 <printk>
    cd26:	f240 212e 	movw	r1, #558	; 0x22e
    cd2a:	4620      	mov	r0, r4
    cd2c:	f004 fa9e 	bl	1126c <assert_post_action>
    cd30:	e7d7      	b.n	cce2 <nrfx_gpiote_trigger_disable+0x4e>
    cd32:	bf00      	nop
    cd34:	40006000 	.word	0x40006000
    cd38:	000167dc 	.word	0x000167dc
    cd3c:	00015984 	.word	0x00015984

0000cd40 <nrfx_gpiote_pin_uninit>:
{
    cd40:	b538      	push	{r3, r4, r5, lr}
    cd42:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    cd44:	f7ff f990 	bl	c068 <pin_in_use>
    cd48:	b908      	cbnz	r0, cd4e <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    cd4a:	481d      	ldr	r0, [pc, #116]	; (cdc0 <nrfx_gpiote_pin_uninit+0x80>)
}
    cd4c:	bd38      	pop	{r3, r4, r5, pc}
    nrfx_gpiote_trigger_disable(pin);
    cd4e:	4620      	mov	r0, r4
    cd50:	f7ff ffa0 	bl	cc94 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    cd54:	4620      	mov	r0, r4
    cd56:	f7ff fa47 	bl	c1e8 <pin_handler_trigger_uninit>
    switch (port)
    cd5a:	0963      	lsrs	r3, r4, #5
    cd5c:	d013      	beq.n	cd86 <nrfx_gpiote_pin_uninit+0x46>
    uint32_t mask = 0;
    cd5e:	2300      	movs	r3, #0
    pin_number &= 0x1F;
    cd60:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    cd64:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    cd66:	f013 0f01 	tst.w	r3, #1
    cd6a:	d00f      	beq.n	cd8c <nrfx_gpiote_pin_uninit+0x4c>
    *p_pin = pin_number & 0x1F;
    cd6c:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    cd70:	0963      	lsrs	r3, r4, #5
    cd72:	d118      	bne.n	cda6 <nrfx_gpiote_pin_uninit+0x66>
    reg->PIN_CNF[pin_number] = cnf;
    cd74:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    cd78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    cd7c:	2202      	movs	r2, #2
    cd7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    return NRFX_SUCCESS;
    cd82:	4810      	ldr	r0, [pc, #64]	; (cdc4 <nrfx_gpiote_pin_uninit+0x84>)
    cd84:	e7e2      	b.n	cd4c <nrfx_gpiote_pin_uninit+0xc>
            mask = P0_FEATURE_PINS_PRESENT;
    cd86:	f04f 33ff 	mov.w	r3, #4294967295
    cd8a:	e7e9      	b.n	cd60 <nrfx_gpiote_pin_uninit+0x20>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    cd8c:	4d0e      	ldr	r5, [pc, #56]	; (cdc8 <nrfx_gpiote_pin_uninit+0x88>)
    cd8e:	f240 2229 	movw	r2, #553	; 0x229
    cd92:	4629      	mov	r1, r5
    cd94:	480d      	ldr	r0, [pc, #52]	; (cdcc <nrfx_gpiote_pin_uninit+0x8c>)
    cd96:	f004 f947 	bl	11028 <printk>
    cd9a:	f240 2129 	movw	r1, #553	; 0x229
    cd9e:	4628      	mov	r0, r5
    cda0:	f004 fa64 	bl	1126c <assert_post_action>
    cda4:	e7e2      	b.n	cd6c <nrfx_gpiote_pin_uninit+0x2c>
            NRFX_ASSERT(0);
    cda6:	4c08      	ldr	r4, [pc, #32]	; (cdc8 <nrfx_gpiote_pin_uninit+0x88>)
    cda8:	f240 222e 	movw	r2, #558	; 0x22e
    cdac:	4621      	mov	r1, r4
    cdae:	4807      	ldr	r0, [pc, #28]	; (cdcc <nrfx_gpiote_pin_uninit+0x8c>)
    cdb0:	f004 f93a 	bl	11028 <printk>
    cdb4:	f240 212e 	movw	r1, #558	; 0x22e
    cdb8:	4620      	mov	r0, r4
    cdba:	f004 fa57 	bl	1126c <assert_post_action>
    cdbe:	e7d9      	b.n	cd74 <nrfx_gpiote_pin_uninit+0x34>
    cdc0:	0bad0004 	.word	0x0bad0004
    cdc4:	0bad0000 	.word	0x0bad0000
    cdc8:	000167dc 	.word	0x000167dc
    cdcc:	00015984 	.word	0x00015984

0000cdd0 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    cdd0:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    cdd2:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    cdd4:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    cdd8:	2100      	movs	r1, #0
    uint32_t status = 0;
    cdda:	460d      	mov	r5, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    cddc:	e003      	b.n	cde6 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    cdde:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    cde0:	3304      	adds	r3, #4
    cde2:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    cde4:	3101      	adds	r1, #1
    cde6:	2907      	cmp	r1, #7
    cde8:	d814      	bhi.n	ce14 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    cdea:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    cdee:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    cdf2:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    cdf4:	2a00      	cmp	r2, #0
    cdf6:	d0f2      	beq.n	cdde <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    cdf8:	4a0b      	ldr	r2, [pc, #44]	; (ce28 <nrfx_gpiote_irq_handler+0x58>)
    cdfa:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    cdfe:	4210      	tst	r0, r2
    ce00:	d0ed      	beq.n	cdde <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    ce02:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    ce06:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    ce0a:	2400      	movs	r4, #0
    ce0c:	6014      	str	r4, [r2, #0]
    ce0e:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    ce10:	4305      	orrs	r5, r0
    ce12:	e7e4      	b.n	cdde <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ce14:	4b05      	ldr	r3, [pc, #20]	; (ce2c <nrfx_gpiote_irq_handler+0x5c>)
    ce16:	681b      	ldr	r3, [r3, #0]
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    ce18:	b91b      	cbnz	r3, ce22 <nrfx_gpiote_irq_handler+0x52>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    ce1a:	4628      	mov	r0, r5
    ce1c:	f7ff fa36 	bl	c28c <gpiote_evt_handle>
}
    ce20:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    ce22:	f7ff fb5d 	bl	c4e0 <port_event_handle>
    ce26:	e7f8      	b.n	ce1a <nrfx_gpiote_irq_handler+0x4a>
    ce28:	40006000 	.word	0x40006000
    ce2c:	4000617c 	.word	0x4000617c

0000ce30 <finish_transfer>:

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
}

static void finish_transfer(spi_control_block_t * p_cb)
{
    ce30:	b570      	push	{r4, r5, r6, lr}
    ce32:	4604      	mov	r4, r0
    // If Slave Select signal is used, this is the time to deactivate it.
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    ce34:	7f85      	ldrb	r5, [r0, #30]
    ce36:	2dff      	cmp	r5, #255	; 0xff
    ce38:	d108      	bne.n	ce4c <finish_transfer+0x1c>
        nrf_gpio_pin_write(p_cb->ss_pin, 1);
    }

    // By clearing this flag before calling the handler we allow subsequent
    // transfers to be started directly from the handler function.
    p_cb->transfer_in_progress = false;
    ce3a:	2300      	movs	r3, #0
    ce3c:	7763      	strb	r3, [r4, #29]

    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
    ce3e:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    ce40:	4620      	mov	r0, r4
    ce42:	f850 3b08 	ldr.w	r3, [r0], #8
    ce46:	6861      	ldr	r1, [r4, #4]
    ce48:	4798      	blx	r3
}
    ce4a:	bd70      	pop	{r4, r5, r6, pc}
    switch (port)
    ce4c:	096b      	lsrs	r3, r5, #5
    ce4e:	d011      	beq.n	ce74 <finish_transfer+0x44>
    uint32_t mask = 0;
    ce50:	2300      	movs	r3, #0
    pin_number &= 0x1F;
    ce52:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    ce56:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    ce58:	f013 0f01 	tst.w	r3, #1
    ce5c:	d00d      	beq.n	ce7a <finish_transfer+0x4a>
    *p_pin = pin_number & 0x1F;
    ce5e:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    ce62:	096b      	lsrs	r3, r5, #5
    ce64:	d116      	bne.n	ce94 <finish_transfer+0x64>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    ce66:	2301      	movs	r3, #1
    ce68:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    ce6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    ce6e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    ce72:	e7e2      	b.n	ce3a <finish_transfer+0xa>
            mask = P0_FEATURE_PINS_PRESENT;
    ce74:	f04f 33ff 	mov.w	r3, #4294967295
    ce78:	e7eb      	b.n	ce52 <finish_transfer+0x22>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    ce7a:	4e0d      	ldr	r6, [pc, #52]	; (ceb0 <finish_transfer+0x80>)
    ce7c:	f240 2229 	movw	r2, #553	; 0x229
    ce80:	4631      	mov	r1, r6
    ce82:	480c      	ldr	r0, [pc, #48]	; (ceb4 <finish_transfer+0x84>)
    ce84:	f004 f8d0 	bl	11028 <printk>
    ce88:	f240 2129 	movw	r1, #553	; 0x229
    ce8c:	4630      	mov	r0, r6
    ce8e:	f004 f9ed 	bl	1126c <assert_post_action>
    ce92:	e7e4      	b.n	ce5e <finish_transfer+0x2e>
            NRFX_ASSERT(0);
    ce94:	4d06      	ldr	r5, [pc, #24]	; (ceb0 <finish_transfer+0x80>)
    ce96:	f240 222e 	movw	r2, #558	; 0x22e
    ce9a:	4629      	mov	r1, r5
    ce9c:	4805      	ldr	r0, [pc, #20]	; (ceb4 <finish_transfer+0x84>)
    ce9e:	f004 f8c3 	bl	11028 <printk>
    cea2:	f240 212e 	movw	r1, #558	; 0x22e
    cea6:	4628      	mov	r0, r5
    cea8:	f004 f9e0 	bl	1126c <assert_post_action>
    ceac:	e7db      	b.n	ce66 <finish_transfer+0x36>
    ceae:	bf00      	nop
    ceb0:	000167dc 	.word	0x000167dc
    ceb4:	00015984 	.word	0x00015984

0000ceb8 <irq_handler>:
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    p_cb->abort = true;
}

static void irq_handler(NRF_SPI_Type * p_spi, spi_control_block_t * p_cb)
{
    ceb8:	b570      	push	{r4, r5, r6, lr}
    ceba:	4604      	mov	r4, r0
    cebc:	460d      	mov	r5, r1
    NRFX_ASSERT(p_cb->handler);
    cebe:	680b      	ldr	r3, [r1, #0]
    cec0:	b153      	cbz	r3, ced8 <irq_handler+0x20>
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_spi_event_clear(NRF_SPI_Type *  p_reg,
                                           nrf_spi_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cec2:	2300      	movs	r3, #0
    cec4:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    cec8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108

    nrf_spi_event_clear(p_spi, NRF_SPI_EVENT_READY);
    NRFX_LOG_DEBUG("Event: NRF_SPI_EVENT_READY.");

    if (!transfer_byte(p_spi, p_cb))
    cecc:	4629      	mov	r1, r5
    cece:	4620      	mov	r0, r4
    ced0:	f007 fc10 	bl	146f4 <transfer_byte>
    ced4:	b168      	cbz	r0, cef2 <irq_handler+0x3a>
    {
        finish_transfer(p_cb);
    }
}
    ced6:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_cb->handler);
    ced8:	4e08      	ldr	r6, [pc, #32]	; (cefc <irq_handler+0x44>)
    ceda:	f240 129b 	movw	r2, #411	; 0x19b
    cede:	4631      	mov	r1, r6
    cee0:	4807      	ldr	r0, [pc, #28]	; (cf00 <irq_handler+0x48>)
    cee2:	f004 f8a1 	bl	11028 <printk>
    cee6:	f240 119b 	movw	r1, #411	; 0x19b
    ceea:	4630      	mov	r0, r6
    ceec:	f004 f9be 	bl	1126c <assert_post_action>
    cef0:	e7e7      	b.n	cec2 <irq_handler+0xa>
        finish_transfer(p_cb);
    cef2:	4628      	mov	r0, r5
    cef4:	f7ff ff9c 	bl	ce30 <finish_transfer>
}
    cef8:	e7ed      	b.n	ced6 <irq_handler+0x1e>
    cefa:	bf00      	nop
    cefc:	00017090 	.word	0x00017090
    cf00:	00015984 	.word	0x00015984

0000cf04 <spi_xfer>:
{
    cf04:	b538      	push	{r3, r4, r5, lr}
    cf06:	4604      	mov	r4, r0
    cf08:	460d      	mov	r5, r1
    p_cb->bytes_transferred = 0;
    cf0a:	2300      	movs	r3, #0
    cf0c:	620b      	str	r3, [r1, #32]
}

NRF_STATIC_INLINE void nrf_spi_int_disable(NRF_SPI_Type * p_reg,
                                           uint32_t       mask)
{
    p_reg->INTENCLR = mask;
    cf0e:	2104      	movs	r1, #4
    cf10:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cf14:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    cf18:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
    cf1c:	6853      	ldr	r3, [r2, #4]
    nrf_spi_txd_set(p_spi,
    cf1e:	b183      	cbz	r3, cf42 <spi_xfer+0x3e>
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
    cf20:	6813      	ldr	r3, [r2, #0]
    nrf_spi_txd_set(p_spi,
    cf22:	781b      	ldrb	r3, [r3, #0]
#endif
}

NRF_STATIC_INLINE void nrf_spi_txd_set(NRF_SPI_Type * p_reg, uint8_t data)
{
    p_reg->TXD = data;
    cf24:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
    cf28:	6853      	ldr	r3, [r2, #4]
    cf2a:	2b01      	cmp	r3, #1
    cf2c:	d90b      	bls.n	cf46 <spi_xfer+0x42>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
    cf2e:	6813      	ldr	r3, [r2, #0]
    cf30:	785b      	ldrb	r3, [r3, #1]
    cf32:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_cb->handler)
    cf36:	682b      	ldr	r3, [r5, #0]
    cf38:	b163      	cbz	r3, cf54 <spi_xfer+0x50>
    p_reg->INTENSET = mask;
    cf3a:	2304      	movs	r3, #4
    cf3c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    cf40:	bd38      	pop	{r3, r4, r5, pc}
    nrf_spi_txd_set(p_spi,
    cf42:	7feb      	ldrb	r3, [r5, #31]
    cf44:	e7ee      	b.n	cf24 <spi_xfer+0x20>
    else if (p_xfer_desc->rx_length > 1)
    cf46:	68d3      	ldr	r3, [r2, #12]
    cf48:	2b01      	cmp	r3, #1
    cf4a:	d9f4      	bls.n	cf36 <spi_xfer+0x32>
        nrf_spi_txd_set(p_spi, p_cb->orc);
    cf4c:	7feb      	ldrb	r3, [r5, #31]
    p_reg->TXD = data;
    cf4e:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
}
    cf52:	e7f0      	b.n	cf36 <spi_xfer+0x32>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    cf54:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
    cf58:	2b00      	cmp	r3, #0
    cf5a:	d0fb      	beq.n	cf54 <spi_xfer+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cf5c:	2300      	movs	r3, #0
    cf5e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    cf62:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
    cf66:	4629      	mov	r1, r5
    cf68:	4620      	mov	r0, r4
    cf6a:	f007 fbc3 	bl	146f4 <transfer_byte>
    cf6e:	2800      	cmp	r0, #0
    cf70:	d1f0      	bne.n	cf54 <spi_xfer+0x50>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    cf72:	7fac      	ldrb	r4, [r5, #30]
    cf74:	2cff      	cmp	r4, #255	; 0xff
    cf76:	d0e3      	beq.n	cf40 <spi_xfer+0x3c>
    switch (port)
    cf78:	0963      	lsrs	r3, r4, #5
    cf7a:	d011      	beq.n	cfa0 <spi_xfer+0x9c>
    uint32_t mask = 0;
    cf7c:	2300      	movs	r3, #0
    pin_number &= 0x1F;
    cf7e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    cf82:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    cf84:	f013 0f01 	tst.w	r3, #1
    cf88:	d00d      	beq.n	cfa6 <spi_xfer+0xa2>
    *p_pin = pin_number & 0x1F;
    cf8a:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    cf8e:	0963      	lsrs	r3, r4, #5
    cf90:	d116      	bne.n	cfc0 <spi_xfer+0xbc>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    cf92:	2301      	movs	r3, #1
    cf94:	40ab      	lsls	r3, r5
    p_reg->OUTSET = set_mask;
    cf96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    cf9a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    cf9e:	e7cf      	b.n	cf40 <spi_xfer+0x3c>
            mask = P0_FEATURE_PINS_PRESENT;
    cfa0:	f04f 33ff 	mov.w	r3, #4294967295
    cfa4:	e7eb      	b.n	cf7e <spi_xfer+0x7a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    cfa6:	4d0d      	ldr	r5, [pc, #52]	; (cfdc <spi_xfer+0xd8>)
    cfa8:	f240 2229 	movw	r2, #553	; 0x229
    cfac:	4629      	mov	r1, r5
    cfae:	480c      	ldr	r0, [pc, #48]	; (cfe0 <spi_xfer+0xdc>)
    cfb0:	f004 f83a 	bl	11028 <printk>
    cfb4:	f240 2129 	movw	r1, #553	; 0x229
    cfb8:	4628      	mov	r0, r5
    cfba:	f004 f957 	bl	1126c <assert_post_action>
    cfbe:	e7e4      	b.n	cf8a <spi_xfer+0x86>
            NRFX_ASSERT(0);
    cfc0:	4c06      	ldr	r4, [pc, #24]	; (cfdc <spi_xfer+0xd8>)
    cfc2:	f240 222e 	movw	r2, #558	; 0x22e
    cfc6:	4621      	mov	r1, r4
    cfc8:	4805      	ldr	r0, [pc, #20]	; (cfe0 <spi_xfer+0xdc>)
    cfca:	f004 f82d 	bl	11028 <printk>
    cfce:	f240 212e 	movw	r1, #558	; 0x22e
    cfd2:	4620      	mov	r0, r4
    cfd4:	f004 f94a 	bl	1126c <assert_post_action>
    cfd8:	e7db      	b.n	cf92 <spi_xfer+0x8e>
    cfda:	bf00      	nop
    cfdc:	000167dc 	.word	0x000167dc
    cfe0:	00015984 	.word	0x00015984

0000cfe4 <configure_pins>:
{
    cfe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cfe8:	4605      	mov	r5, r0
    cfea:	460c      	mov	r4, r1
    if (!p_config->skip_gpio_cfg)
    cfec:	7bcb      	ldrb	r3, [r1, #15]
    cfee:	b19b      	cbz	r3, d018 <configure_pins+0x34>
    if (!p_config->skip_psel_cfg)
    cff0:	7c23      	ldrb	r3, [r4, #16]
    cff2:	b97b      	cbnz	r3, d014 <configure_pins+0x30>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    cff4:	7863      	ldrb	r3, [r4, #1]
                            : NRF_SPI_PIN_NOT_CONNECTED;
    cff6:	2bff      	cmp	r3, #255	; 0xff
    cff8:	f000 81b6 	beq.w	d368 <configure_pins+0x384>
    cffc:	461a      	mov	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    cffe:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPI_PIN_NOT_CONNECTED;
    d000:	2bff      	cmp	r3, #255	; 0xff
    d002:	f000 81b4 	beq.w	d36e <configure_pins+0x38a>
        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    d006:	7821      	ldrb	r1, [r4, #0]
    p_reg->PSELSCK  = sck_pin;
    d008:	f8c5 1508 	str.w	r1, [r5, #1288]	; 0x508
    p_reg->PSELMOSI = mosi_pin;
    d00c:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSELMISO = miso_pin;
    d010:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
}
    d014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_write(p_config->sck_pin,
    d018:	780e      	ldrb	r6, [r1, #0]
                           p_config->mode <= NRF_SPI_MODE_1 ? 0 : 1);
    d01a:	7b0b      	ldrb	r3, [r1, #12]
        nrf_gpio_pin_write(p_config->sck_pin,
    d01c:	2b01      	cmp	r3, #1
    d01e:	bf94      	ite	ls
    d020:	2300      	movls	r3, #0
    d022:	2301      	movhi	r3, #1
    if (value == 0)
    d024:	2b00      	cmp	r3, #0
    d026:	d17f      	bne.n	d128 <configure_pins+0x144>
    switch (port)
    d028:	0972      	lsrs	r2, r6, #5
    d02a:	d101      	bne.n	d030 <configure_pins+0x4c>
            mask = P0_FEATURE_PINS_PRESENT;
    d02c:	f04f 33ff 	mov.w	r3, #4294967295
    pin_number &= 0x1F;
    d030:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
    d034:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d036:	f013 0f01 	tst.w	r3, #1
    d03a:	d05b      	beq.n	d0f4 <configure_pins+0x110>
    *p_pin = pin_number & 0x1F;
    d03c:	f006 071f 	and.w	r7, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    d040:	0973      	lsrs	r3, r6, #5
    d042:	d164      	bne.n	d10e <configure_pins+0x12a>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    d044:	2301      	movs	r3, #1
    d046:	40bb      	lsls	r3, r7
    p_reg->OUTCLR = clr_mask;
    d048:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    d04c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
        nrf_gpio_cfg(p_config->sck_pin,
    d050:	7826      	ldrb	r6, [r4, #0]
    switch (port)
    d052:	0973      	lsrs	r3, r6, #5
    d054:	f000 8099 	beq.w	d18a <configure_pins+0x1a6>
    uint32_t mask = 0;
    d058:	2300      	movs	r3, #0
    pin_number &= 0x1F;
    d05a:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
    d05e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d060:	f013 0f01 	tst.w	r3, #1
    d064:	f000 8094 	beq.w	d190 <configure_pins+0x1ac>
    *p_pin = pin_number & 0x1F;
    d068:	f006 071f 	and.w	r7, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    d06c:	0973      	lsrs	r3, r6, #5
    d06e:	f040 809c 	bne.w	d1aa <configure_pins+0x1c6>
    reg->PIN_CNF[pin_number] = cnf;
    d072:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    d076:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    d07a:	2201      	movs	r2, #1
    d07c:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    d080:	7866      	ldrb	r6, [r4, #1]
    d082:	2eff      	cmp	r6, #255	; 0xff
    d084:	f040 809e 	bne.w	d1c4 <configure_pins+0x1e0>
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    d088:	78a6      	ldrb	r6, [r4, #2]
    d08a:	2eff      	cmp	r6, #255	; 0xff
    d08c:	f040 80fd 	bne.w	d28a <configure_pins+0x2a6>
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
    d090:	78e6      	ldrb	r6, [r4, #3]
    d092:	2eff      	cmp	r6, #255	; 0xff
    d094:	d0ac      	beq.n	cff0 <configure_pins+0xc>
    switch (port)
    d096:	0973      	lsrs	r3, r6, #5
    d098:	f000 812c 	beq.w	d2f4 <configure_pins+0x310>
    uint32_t mask = 0;
    d09c:	2300      	movs	r3, #0
    pin_number &= 0x1F;
    d09e:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
    d0a2:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d0a4:	f013 0f01 	tst.w	r3, #1
    d0a8:	f000 8127 	beq.w	d2fa <configure_pins+0x316>
    *p_pin = pin_number & 0x1F;
    d0ac:	f006 071f 	and.w	r7, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    d0b0:	0973      	lsrs	r3, r6, #5
    d0b2:	f040 812f 	bne.w	d314 <configure_pins+0x330>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    d0b6:	2301      	movs	r3, #1
    d0b8:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
    d0ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    d0be:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            nrf_gpio_cfg_output(p_config->ss_pin);
    d0c2:	78e6      	ldrb	r6, [r4, #3]
    switch (port)
    d0c4:	0973      	lsrs	r3, r6, #5
    d0c6:	f000 8132 	beq.w	d32e <configure_pins+0x34a>
    uint32_t mask = 0;
    d0ca:	2300      	movs	r3, #0
    pin_number &= 0x1F;
    d0cc:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
    d0d0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d0d2:	f013 0f01 	tst.w	r3, #1
    d0d6:	f000 812d 	beq.w	d334 <configure_pins+0x350>
    *p_pin = pin_number & 0x1F;
    d0da:	f006 071f 	and.w	r7, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    d0de:	0973      	lsrs	r3, r6, #5
    d0e0:	f040 8135 	bne.w	d34e <configure_pins+0x36a>
    reg->PIN_CNF[pin_number] = cnf;
    d0e4:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    d0e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    d0ec:	2203      	movs	r2, #3
    d0ee:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
}
    d0f2:	e77d      	b.n	cff0 <configure_pins+0xc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d0f4:	4f9f      	ldr	r7, [pc, #636]	; (d374 <configure_pins+0x390>)
    d0f6:	f240 2229 	movw	r2, #553	; 0x229
    d0fa:	4639      	mov	r1, r7
    d0fc:	489e      	ldr	r0, [pc, #632]	; (d378 <configure_pins+0x394>)
    d0fe:	f003 ff93 	bl	11028 <printk>
    d102:	f240 2129 	movw	r1, #553	; 0x229
    d106:	4638      	mov	r0, r7
    d108:	f004 f8b0 	bl	1126c <assert_post_action>
    d10c:	e796      	b.n	d03c <configure_pins+0x58>
            NRFX_ASSERT(0);
    d10e:	4e99      	ldr	r6, [pc, #612]	; (d374 <configure_pins+0x390>)
    d110:	f240 222e 	movw	r2, #558	; 0x22e
    d114:	4631      	mov	r1, r6
    d116:	4898      	ldr	r0, [pc, #608]	; (d378 <configure_pins+0x394>)
    d118:	f003 ff86 	bl	11028 <printk>
    d11c:	f240 212e 	movw	r1, #558	; 0x22e
    d120:	4630      	mov	r0, r6
    d122:	f004 f8a3 	bl	1126c <assert_post_action>
    d126:	e78d      	b.n	d044 <configure_pins+0x60>
    switch (port)
    d128:	0973      	lsrs	r3, r6, #5
    d12a:	d011      	beq.n	d150 <configure_pins+0x16c>
    uint32_t mask = 0;
    d12c:	2300      	movs	r3, #0
    pin_number &= 0x1F;
    d12e:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
    d132:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d134:	f013 0f01 	tst.w	r3, #1
    d138:	d00d      	beq.n	d156 <configure_pins+0x172>
    *p_pin = pin_number & 0x1F;
    d13a:	f006 071f 	and.w	r7, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    d13e:	0973      	lsrs	r3, r6, #5
    d140:	d116      	bne.n	d170 <configure_pins+0x18c>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    d142:	2301      	movs	r3, #1
    d144:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
    d146:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    d14a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    d14e:	e77f      	b.n	d050 <configure_pins+0x6c>
            mask = P0_FEATURE_PINS_PRESENT;
    d150:	f04f 33ff 	mov.w	r3, #4294967295
    d154:	e7eb      	b.n	d12e <configure_pins+0x14a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d156:	4f87      	ldr	r7, [pc, #540]	; (d374 <configure_pins+0x390>)
    d158:	f240 2229 	movw	r2, #553	; 0x229
    d15c:	4639      	mov	r1, r7
    d15e:	4886      	ldr	r0, [pc, #536]	; (d378 <configure_pins+0x394>)
    d160:	f003 ff62 	bl	11028 <printk>
    d164:	f240 2129 	movw	r1, #553	; 0x229
    d168:	4638      	mov	r0, r7
    d16a:	f004 f87f 	bl	1126c <assert_post_action>
    d16e:	e7e4      	b.n	d13a <configure_pins+0x156>
            NRFX_ASSERT(0);
    d170:	4e80      	ldr	r6, [pc, #512]	; (d374 <configure_pins+0x390>)
    d172:	f240 222e 	movw	r2, #558	; 0x22e
    d176:	4631      	mov	r1, r6
    d178:	487f      	ldr	r0, [pc, #508]	; (d378 <configure_pins+0x394>)
    d17a:	f003 ff55 	bl	11028 <printk>
    d17e:	f240 212e 	movw	r1, #558	; 0x22e
    d182:	4630      	mov	r0, r6
    d184:	f004 f872 	bl	1126c <assert_post_action>
    d188:	e7db      	b.n	d142 <configure_pins+0x15e>
            mask = P0_FEATURE_PINS_PRESENT;
    d18a:	f04f 33ff 	mov.w	r3, #4294967295
    d18e:	e764      	b.n	d05a <configure_pins+0x76>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d190:	4f78      	ldr	r7, [pc, #480]	; (d374 <configure_pins+0x390>)
    d192:	f240 2229 	movw	r2, #553	; 0x229
    d196:	4639      	mov	r1, r7
    d198:	4877      	ldr	r0, [pc, #476]	; (d378 <configure_pins+0x394>)
    d19a:	f003 ff45 	bl	11028 <printk>
    d19e:	f240 2129 	movw	r1, #553	; 0x229
    d1a2:	4638      	mov	r0, r7
    d1a4:	f004 f862 	bl	1126c <assert_post_action>
    d1a8:	e75e      	b.n	d068 <configure_pins+0x84>
            NRFX_ASSERT(0);
    d1aa:	4e72      	ldr	r6, [pc, #456]	; (d374 <configure_pins+0x390>)
    d1ac:	f240 222e 	movw	r2, #558	; 0x22e
    d1b0:	4631      	mov	r1, r6
    d1b2:	4871      	ldr	r0, [pc, #452]	; (d378 <configure_pins+0x394>)
    d1b4:	f003 ff38 	bl	11028 <printk>
    d1b8:	f240 212e 	movw	r1, #558	; 0x22e
    d1bc:	4630      	mov	r0, r6
    d1be:	f004 f855 	bl	1126c <assert_post_action>
    d1c2:	e756      	b.n	d072 <configure_pins+0x8e>
    switch (port)
    d1c4:	0973      	lsrs	r3, r6, #5
    d1c6:	d026      	beq.n	d216 <configure_pins+0x232>
    uint32_t mask = 0;
    d1c8:	2300      	movs	r3, #0
    pin_number &= 0x1F;
    d1ca:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
    d1ce:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d1d0:	f013 0f01 	tst.w	r3, #1
    d1d4:	d022      	beq.n	d21c <configure_pins+0x238>
    *p_pin = pin_number & 0x1F;
    d1d6:	f006 071f 	and.w	r7, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    d1da:	0973      	lsrs	r3, r6, #5
    d1dc:	d12b      	bne.n	d236 <configure_pins+0x252>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    d1de:	2301      	movs	r3, #1
    d1e0:	40bb      	lsls	r3, r7
    p_reg->OUTCLR = clr_mask;
    d1e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    d1e6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
            nrf_gpio_cfg_output(p_config->mosi_pin);
    d1ea:	7866      	ldrb	r6, [r4, #1]
    switch (port)
    d1ec:	0973      	lsrs	r3, r6, #5
    d1ee:	d02f      	beq.n	d250 <configure_pins+0x26c>
    uint32_t mask = 0;
    d1f0:	2300      	movs	r3, #0
    pin_number &= 0x1F;
    d1f2:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
    d1f6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d1f8:	f013 0f01 	tst.w	r3, #1
    d1fc:	d02b      	beq.n	d256 <configure_pins+0x272>
    *p_pin = pin_number & 0x1F;
    d1fe:	f006 071f 	and.w	r7, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    d202:	0973      	lsrs	r3, r6, #5
    d204:	d134      	bne.n	d270 <configure_pins+0x28c>
    reg->PIN_CNF[pin_number] = cnf;
    d206:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    d20a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    d20e:	2203      	movs	r2, #3
    d210:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
}
    d214:	e738      	b.n	d088 <configure_pins+0xa4>
            mask = P0_FEATURE_PINS_PRESENT;
    d216:	f04f 33ff 	mov.w	r3, #4294967295
    d21a:	e7d6      	b.n	d1ca <configure_pins+0x1e6>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d21c:	4f55      	ldr	r7, [pc, #340]	; (d374 <configure_pins+0x390>)
    d21e:	f240 2229 	movw	r2, #553	; 0x229
    d222:	4639      	mov	r1, r7
    d224:	4854      	ldr	r0, [pc, #336]	; (d378 <configure_pins+0x394>)
    d226:	f003 feff 	bl	11028 <printk>
    d22a:	f240 2129 	movw	r1, #553	; 0x229
    d22e:	4638      	mov	r0, r7
    d230:	f004 f81c 	bl	1126c <assert_post_action>
    d234:	e7cf      	b.n	d1d6 <configure_pins+0x1f2>
            NRFX_ASSERT(0);
    d236:	4e4f      	ldr	r6, [pc, #316]	; (d374 <configure_pins+0x390>)
    d238:	f240 222e 	movw	r2, #558	; 0x22e
    d23c:	4631      	mov	r1, r6
    d23e:	484e      	ldr	r0, [pc, #312]	; (d378 <configure_pins+0x394>)
    d240:	f003 fef2 	bl	11028 <printk>
    d244:	f240 212e 	movw	r1, #558	; 0x22e
    d248:	4630      	mov	r0, r6
    d24a:	f004 f80f 	bl	1126c <assert_post_action>
    d24e:	e7c6      	b.n	d1de <configure_pins+0x1fa>
            mask = P0_FEATURE_PINS_PRESENT;
    d250:	f04f 33ff 	mov.w	r3, #4294967295
    d254:	e7cd      	b.n	d1f2 <configure_pins+0x20e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d256:	4f47      	ldr	r7, [pc, #284]	; (d374 <configure_pins+0x390>)
    d258:	f240 2229 	movw	r2, #553	; 0x229
    d25c:	4639      	mov	r1, r7
    d25e:	4846      	ldr	r0, [pc, #280]	; (d378 <configure_pins+0x394>)
    d260:	f003 fee2 	bl	11028 <printk>
    d264:	f240 2129 	movw	r1, #553	; 0x229
    d268:	4638      	mov	r0, r7
    d26a:	f003 ffff 	bl	1126c <assert_post_action>
    d26e:	e7c6      	b.n	d1fe <configure_pins+0x21a>
            NRFX_ASSERT(0);
    d270:	4e40      	ldr	r6, [pc, #256]	; (d374 <configure_pins+0x390>)
    d272:	f240 222e 	movw	r2, #558	; 0x22e
    d276:	4631      	mov	r1, r6
    d278:	483f      	ldr	r0, [pc, #252]	; (d378 <configure_pins+0x394>)
    d27a:	f003 fed5 	bl	11028 <printk>
    d27e:	f240 212e 	movw	r1, #558	; 0x22e
    d282:	4630      	mov	r0, r6
    d284:	f003 fff2 	bl	1126c <assert_post_action>
    d288:	e7bd      	b.n	d206 <configure_pins+0x222>
            nrf_gpio_cfg_input(p_config->miso_pin, p_config->miso_pull);
    d28a:	f894 800e 	ldrb.w	r8, [r4, #14]
    switch (port)
    d28e:	0973      	lsrs	r3, r6, #5
    d290:	d013      	beq.n	d2ba <configure_pins+0x2d6>
    uint32_t mask = 0;
    d292:	2300      	movs	r3, #0
    pin_number &= 0x1F;
    d294:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
    d298:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d29a:	f013 0f01 	tst.w	r3, #1
    d29e:	d00f      	beq.n	d2c0 <configure_pins+0x2dc>
    *p_pin = pin_number & 0x1F;
    d2a0:	f006 071f 	and.w	r7, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    d2a4:	0973      	lsrs	r3, r6, #5
    d2a6:	d118      	bne.n	d2da <configure_pins+0x2f6>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    d2a8:	ea4f 0388 	mov.w	r3, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    d2ac:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    d2b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    d2b4:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
}
    d2b8:	e6ea      	b.n	d090 <configure_pins+0xac>
            mask = P0_FEATURE_PINS_PRESENT;
    d2ba:	f04f 33ff 	mov.w	r3, #4294967295
    d2be:	e7e9      	b.n	d294 <configure_pins+0x2b0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d2c0:	4f2c      	ldr	r7, [pc, #176]	; (d374 <configure_pins+0x390>)
    d2c2:	f240 2229 	movw	r2, #553	; 0x229
    d2c6:	4639      	mov	r1, r7
    d2c8:	482b      	ldr	r0, [pc, #172]	; (d378 <configure_pins+0x394>)
    d2ca:	f003 fead 	bl	11028 <printk>
    d2ce:	f240 2129 	movw	r1, #553	; 0x229
    d2d2:	4638      	mov	r0, r7
    d2d4:	f003 ffca 	bl	1126c <assert_post_action>
    d2d8:	e7e2      	b.n	d2a0 <configure_pins+0x2bc>
            NRFX_ASSERT(0);
    d2da:	4e26      	ldr	r6, [pc, #152]	; (d374 <configure_pins+0x390>)
    d2dc:	f240 222e 	movw	r2, #558	; 0x22e
    d2e0:	4631      	mov	r1, r6
    d2e2:	4825      	ldr	r0, [pc, #148]	; (d378 <configure_pins+0x394>)
    d2e4:	f003 fea0 	bl	11028 <printk>
    d2e8:	f240 212e 	movw	r1, #558	; 0x22e
    d2ec:	4630      	mov	r0, r6
    d2ee:	f003 ffbd 	bl	1126c <assert_post_action>
    d2f2:	e7d9      	b.n	d2a8 <configure_pins+0x2c4>
            mask = P0_FEATURE_PINS_PRESENT;
    d2f4:	f04f 33ff 	mov.w	r3, #4294967295
    d2f8:	e6d1      	b.n	d09e <configure_pins+0xba>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d2fa:	4f1e      	ldr	r7, [pc, #120]	; (d374 <configure_pins+0x390>)
    d2fc:	f240 2229 	movw	r2, #553	; 0x229
    d300:	4639      	mov	r1, r7
    d302:	481d      	ldr	r0, [pc, #116]	; (d378 <configure_pins+0x394>)
    d304:	f003 fe90 	bl	11028 <printk>
    d308:	f240 2129 	movw	r1, #553	; 0x229
    d30c:	4638      	mov	r0, r7
    d30e:	f003 ffad 	bl	1126c <assert_post_action>
    d312:	e6cb      	b.n	d0ac <configure_pins+0xc8>
            NRFX_ASSERT(0);
    d314:	4e17      	ldr	r6, [pc, #92]	; (d374 <configure_pins+0x390>)
    d316:	f240 222e 	movw	r2, #558	; 0x22e
    d31a:	4631      	mov	r1, r6
    d31c:	4816      	ldr	r0, [pc, #88]	; (d378 <configure_pins+0x394>)
    d31e:	f003 fe83 	bl	11028 <printk>
    d322:	f240 212e 	movw	r1, #558	; 0x22e
    d326:	4630      	mov	r0, r6
    d328:	f003 ffa0 	bl	1126c <assert_post_action>
    d32c:	e6c3      	b.n	d0b6 <configure_pins+0xd2>
            mask = P0_FEATURE_PINS_PRESENT;
    d32e:	f04f 33ff 	mov.w	r3, #4294967295
    d332:	e6cb      	b.n	d0cc <configure_pins+0xe8>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d334:	4f0f      	ldr	r7, [pc, #60]	; (d374 <configure_pins+0x390>)
    d336:	f240 2229 	movw	r2, #553	; 0x229
    d33a:	4639      	mov	r1, r7
    d33c:	480e      	ldr	r0, [pc, #56]	; (d378 <configure_pins+0x394>)
    d33e:	f003 fe73 	bl	11028 <printk>
    d342:	f240 2129 	movw	r1, #553	; 0x229
    d346:	4638      	mov	r0, r7
    d348:	f003 ff90 	bl	1126c <assert_post_action>
    d34c:	e6c5      	b.n	d0da <configure_pins+0xf6>
            NRFX_ASSERT(0);
    d34e:	4e09      	ldr	r6, [pc, #36]	; (d374 <configure_pins+0x390>)
    d350:	f240 222e 	movw	r2, #558	; 0x22e
    d354:	4631      	mov	r1, r6
    d356:	4808      	ldr	r0, [pc, #32]	; (d378 <configure_pins+0x394>)
    d358:	f003 fe66 	bl	11028 <printk>
    d35c:	f240 212e 	movw	r1, #558	; 0x22e
    d360:	4630      	mov	r0, r6
    d362:	f003 ff83 	bl	1126c <assert_post_action>
    d366:	e6bd      	b.n	d0e4 <configure_pins+0x100>
                            : NRF_SPI_PIN_NOT_CONNECTED;
    d368:	f04f 32ff 	mov.w	r2, #4294967295
    d36c:	e647      	b.n	cffe <configure_pins+0x1a>
                            : NRF_SPI_PIN_NOT_CONNECTED;
    d36e:	f04f 33ff 	mov.w	r3, #4294967295
    d372:	e648      	b.n	d006 <configure_pins+0x22>
    d374:	000167dc 	.word	0x000167dc
    d378:	00015984 	.word	0x00015984

0000d37c <nrfx_spi_init>:
{
    d37c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d380:	4605      	mov	r5, r0
    d382:	4690      	mov	r8, r2
    d384:	461f      	mov	r7, r3
    NRFX_ASSERT(p_config);
    d386:	460e      	mov	r6, r1
    d388:	b161      	cbz	r1, d3a4 <nrfx_spi_init+0x28>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    d38a:	792c      	ldrb	r4, [r5, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    d38c:	f8d5 9000 	ldr.w	r9, [r5]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    d390:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    d394:	492b      	ldr	r1, [pc, #172]	; (d444 <nrfx_spi_init+0xc8>)
    d396:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    d39a:	7f0b      	ldrb	r3, [r1, #28]
    d39c:	b16b      	cbz	r3, d3ba <nrfx_spi_init+0x3e>
        return err_code;
    d39e:	482a      	ldr	r0, [pc, #168]	; (d448 <nrfx_spi_init+0xcc>)
}
    d3a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    NRFX_ASSERT(p_config);
    d3a4:	4c29      	ldr	r4, [pc, #164]	; (d44c <nrfx_spi_init+0xd0>)
    d3a6:	227c      	movs	r2, #124	; 0x7c
    d3a8:	4621      	mov	r1, r4
    d3aa:	4829      	ldr	r0, [pc, #164]	; (d450 <nrfx_spi_init+0xd4>)
    d3ac:	f003 fe3c 	bl	11028 <printk>
    d3b0:	217c      	movs	r1, #124	; 0x7c
    d3b2:	4620      	mov	r0, r4
    d3b4:	f003 ff5a 	bl	1126c <assert_post_action>
    d3b8:	e7e7      	b.n	d38a <nrfx_spi_init+0xe>
    p_cb->handler = handler;
    d3ba:	4a22      	ldr	r2, [pc, #136]	; (d444 <nrfx_spi_init+0xc8>)
    d3bc:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    d3c0:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
    d3c4:	f842 8031 	str.w	r8, [r2, r1, lsl #3]
    p_cb->p_context = p_context;
    d3c8:	605f      	str	r7, [r3, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    d3ca:	7bf2      	ldrb	r2, [r6, #15]
    d3cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
    d3d0:	78f2      	ldrb	r2, [r6, #3]
    d3d2:	779a      	strb	r2, [r3, #30]
    p_cb->orc = p_config->orc;
    d3d4:	7972      	ldrb	r2, [r6, #5]
    d3d6:	77da      	strb	r2, [r3, #31]
    configure_pins(p_spi, p_config);
    d3d8:	4631      	mov	r1, r6
    d3da:	4648      	mov	r0, r9
    d3dc:	f7ff fe02 	bl	cfe4 <configure_pins>
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    d3e0:	68b3      	ldr	r3, [r6, #8]
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    d3e2:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
    d3e6:	7b32      	ldrb	r2, [r6, #12]
    d3e8:	7b73      	ldrb	r3, [r6, #13]
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    d3ea:	3b00      	subs	r3, #0
    d3ec:	bf18      	it	ne
    d3ee:	2301      	movne	r3, #1
    switch (spi_mode)
    d3f0:	2a02      	cmp	r2, #2
    d3f2:	d021      	beq.n	d438 <nrfx_spi_init+0xbc>
    d3f4:	2a03      	cmp	r2, #3
    d3f6:	d022      	beq.n	d43e <nrfx_spi_init+0xc2>
    d3f8:	2a01      	cmp	r2, #1
    d3fa:	d01a      	beq.n	d432 <nrfx_spi_init+0xb6>
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    d3fc:	f8c9 3554 	str.w	r3, [r9, #1364]	; 0x554
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    d400:	2301      	movs	r3, #1
    d402:	f8c9 3500 	str.w	r3, [r9, #1280]	; 0x500
    if (p_cb->handler)
    d406:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    d40a:	4a0e      	ldr	r2, [pc, #56]	; (d444 <nrfx_spi_init+0xc8>)
    d40c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    d410:	b123      	cbz	r3, d41c <nrfx_spi_init+0xa0>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    d412:	6828      	ldr	r0, [r5, #0]
    d414:	f340 3007 	sbfx	r0, r0, #12, #8
    d418:	f7f8 f924 	bl	5664 <arch_irq_enable>
    p_cb->transfer_in_progress = false;
    d41c:	4b09      	ldr	r3, [pc, #36]	; (d444 <nrfx_spi_init+0xc8>)
    d41e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    d422:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    d426:	2100      	movs	r1, #0
    d428:	7751      	strb	r1, [r2, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    d42a:	2301      	movs	r3, #1
    d42c:	7713      	strb	r3, [r2, #28]
    return err_code;
    d42e:	4809      	ldr	r0, [pc, #36]	; (d454 <nrfx_spi_init+0xd8>)
    d430:	e7b6      	b.n	d3a0 <nrfx_spi_init+0x24>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    d432:	f043 0302 	orr.w	r3, r3, #2
        break;
    d436:	e7e1      	b.n	d3fc <nrfx_spi_init+0x80>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    d438:	f043 0304 	orr.w	r3, r3, #4
        break;
    d43c:	e7de      	b.n	d3fc <nrfx_spi_init+0x80>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    d43e:	f043 0306 	orr.w	r3, r3, #6
        break;
    d442:	e7db      	b.n	d3fc <nrfx_spi_init+0x80>
    d444:	200010f0 	.word	0x200010f0
    d448:	0bad0005 	.word	0x0bad0005
    d44c:	00017090 	.word	0x00017090
    d450:	00015984 	.word	0x00015984
    d454:	0bad0000 	.word	0x0bad0000

0000d458 <nrfx_spi_uninit>:
{
    d458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d45a:	4605      	mov	r5, r0
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    d45c:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    d45e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    d462:	4b87      	ldr	r3, [pc, #540]	; (d680 <nrfx_spi_uninit+0x228>)
    d464:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    d468:	7f1b      	ldrb	r3, [r3, #28]
    d46a:	b303      	cbz	r3, d4ae <nrfx_spi_uninit+0x56>
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    d46c:	682d      	ldr	r5, [r5, #0]
    if (p_cb->handler)
    d46e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    d472:	4a83      	ldr	r2, [pc, #524]	; (d680 <nrfx_spi_uninit+0x228>)
    d474:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    d478:	b133      	cbz	r3, d488 <nrfx_spi_uninit+0x30>
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    d47a:	f345 3007 	sbfx	r0, r5, #12, #8
    d47e:	f7f8 f901 	bl	5684 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    d482:	2304      	movs	r3, #4
    d484:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
    d488:	2300      	movs	r3, #0
    d48a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    if (!p_cb->skip_gpio_cfg)
    d48e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    d492:	4a7b      	ldr	r2, [pc, #492]	; (d680 <nrfx_spi_uninit+0x228>)
    d494:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    d498:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    d49c:	b193      	cbz	r3, d4c4 <nrfx_spi_uninit+0x6c>
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    d49e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    d4a2:	4b77      	ldr	r3, [pc, #476]	; (d680 <nrfx_spi_uninit+0x228>)
    d4a4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    d4a8:	2300      	movs	r3, #0
    d4aa:	7723      	strb	r3, [r4, #28]
}
    d4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    d4ae:	4e75      	ldr	r6, [pc, #468]	; (d684 <nrfx_spi_uninit+0x22c>)
    d4b0:	22c1      	movs	r2, #193	; 0xc1
    d4b2:	4631      	mov	r1, r6
    d4b4:	4874      	ldr	r0, [pc, #464]	; (d688 <nrfx_spi_uninit+0x230>)
    d4b6:	f003 fdb7 	bl	11028 <printk>
    d4ba:	21c1      	movs	r1, #193	; 0xc1
    d4bc:	4630      	mov	r0, r6
    d4be:	f003 fed5 	bl	1126c <assert_post_action>
    d4c2:	e7d3      	b.n	d46c <nrfx_spi_uninit+0x14>
    return p_reg->PSELSCK;
    d4c4:	f8d5 6508 	ldr.w	r6, [r5, #1288]	; 0x508
    switch (port)
    d4c8:	0973      	lsrs	r3, r6, #5
    d4ca:	d03b      	beq.n	d544 <nrfx_spi_uninit+0xec>
    uint32_t mask = 0;
    d4cc:	2300      	movs	r3, #0
    pin_number &= 0x1F;
    d4ce:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
    d4d2:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d4d4:	f013 0f01 	tst.w	r3, #1
    d4d8:	d037      	beq.n	d54a <nrfx_spi_uninit+0xf2>
    *p_pin = pin_number & 0x1F;
    d4da:	f006 071f 	and.w	r7, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    d4de:	0973      	lsrs	r3, r6, #5
    d4e0:	d140      	bne.n	d564 <nrfx_spi_uninit+0x10c>
    reg->PIN_CNF[pin_number] = cnf;
    d4e2:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    d4e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    d4ea:	2202      	movs	r2, #2
    d4ec:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
    return p_reg->PSELMISO;
    d4f0:	f8d5 6510 	ldr.w	r6, [r5, #1296]	; 0x510
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
    d4f4:	f1b6 3fff 	cmp.w	r6, #4294967295
    d4f8:	d141      	bne.n	d57e <nrfx_spi_uninit+0x126>
    return p_reg->PSELMOSI;
    d4fa:	f8d5 550c 	ldr.w	r5, [r5, #1292]	; 0x50c
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
    d4fe:	f1b5 3fff 	cmp.w	r5, #4294967295
    d502:	d16e      	bne.n	d5e2 <nrfx_spi_uninit+0x18a>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    d504:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    d508:	4a5d      	ldr	r2, [pc, #372]	; (d680 <nrfx_spi_uninit+0x228>)
    d50a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    d50e:	7f9d      	ldrb	r5, [r3, #30]
    d510:	2dff      	cmp	r5, #255	; 0xff
    d512:	d0c4      	beq.n	d49e <nrfx_spi_uninit+0x46>
    switch (port)
    d514:	096b      	lsrs	r3, r5, #5
    d516:	f000 8096 	beq.w	d646 <nrfx_spi_uninit+0x1ee>
    uint32_t mask = 0;
    d51a:	2300      	movs	r3, #0
    pin_number &= 0x1F;
    d51c:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    d520:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d522:	f013 0f01 	tst.w	r3, #1
    d526:	f000 8091 	beq.w	d64c <nrfx_spi_uninit+0x1f4>
    *p_pin = pin_number & 0x1F;
    d52a:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    d52e:	096b      	lsrs	r3, r5, #5
    d530:	f040 8099 	bne.w	d666 <nrfx_spi_uninit+0x20e>
    reg->PIN_CNF[pin_number] = cnf;
    d534:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    d538:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    d53c:	2202      	movs	r2, #2
    d53e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
    d542:	e7ac      	b.n	d49e <nrfx_spi_uninit+0x46>
            mask = P0_FEATURE_PINS_PRESENT;
    d544:	f04f 33ff 	mov.w	r3, #4294967295
    d548:	e7c1      	b.n	d4ce <nrfx_spi_uninit+0x76>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d54a:	4f50      	ldr	r7, [pc, #320]	; (d68c <nrfx_spi_uninit+0x234>)
    d54c:	f240 2229 	movw	r2, #553	; 0x229
    d550:	4639      	mov	r1, r7
    d552:	484d      	ldr	r0, [pc, #308]	; (d688 <nrfx_spi_uninit+0x230>)
    d554:	f003 fd68 	bl	11028 <printk>
    d558:	f240 2129 	movw	r1, #553	; 0x229
    d55c:	4638      	mov	r0, r7
    d55e:	f003 fe85 	bl	1126c <assert_post_action>
    d562:	e7ba      	b.n	d4da <nrfx_spi_uninit+0x82>
            NRFX_ASSERT(0);
    d564:	4e49      	ldr	r6, [pc, #292]	; (d68c <nrfx_spi_uninit+0x234>)
    d566:	f240 222e 	movw	r2, #558	; 0x22e
    d56a:	4631      	mov	r1, r6
    d56c:	4846      	ldr	r0, [pc, #280]	; (d688 <nrfx_spi_uninit+0x230>)
    d56e:	f003 fd5b 	bl	11028 <printk>
    d572:	f240 212e 	movw	r1, #558	; 0x22e
    d576:	4630      	mov	r0, r6
    d578:	f003 fe78 	bl	1126c <assert_post_action>
    d57c:	e7b1      	b.n	d4e2 <nrfx_spi_uninit+0x8a>
    switch (port)
    d57e:	0973      	lsrs	r3, r6, #5
    d580:	d012      	beq.n	d5a8 <nrfx_spi_uninit+0x150>
    uint32_t mask = 0;
    d582:	2300      	movs	r3, #0
    pin_number &= 0x1F;
    d584:	f006 021f 	and.w	r2, r6, #31
    return (mask & (1UL << pin_number)) ? true : false;
    d588:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d58a:	f013 0f01 	tst.w	r3, #1
    d58e:	d00e      	beq.n	d5ae <nrfx_spi_uninit+0x156>
    *p_pin = pin_number & 0x1F;
    d590:	f006 071f 	and.w	r7, r6, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    d594:	0973      	lsrs	r3, r6, #5
    d596:	d117      	bne.n	d5c8 <nrfx_spi_uninit+0x170>
    reg->PIN_CNF[pin_number] = cnf;
    d598:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    d59c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    d5a0:	2202      	movs	r2, #2
    d5a2:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
}
    d5a6:	e7a8      	b.n	d4fa <nrfx_spi_uninit+0xa2>
            mask = P0_FEATURE_PINS_PRESENT;
    d5a8:	f04f 33ff 	mov.w	r3, #4294967295
    d5ac:	e7ea      	b.n	d584 <nrfx_spi_uninit+0x12c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d5ae:	4f37      	ldr	r7, [pc, #220]	; (d68c <nrfx_spi_uninit+0x234>)
    d5b0:	f240 2229 	movw	r2, #553	; 0x229
    d5b4:	4639      	mov	r1, r7
    d5b6:	4834      	ldr	r0, [pc, #208]	; (d688 <nrfx_spi_uninit+0x230>)
    d5b8:	f003 fd36 	bl	11028 <printk>
    d5bc:	f240 2129 	movw	r1, #553	; 0x229
    d5c0:	4638      	mov	r0, r7
    d5c2:	f003 fe53 	bl	1126c <assert_post_action>
    d5c6:	e7e3      	b.n	d590 <nrfx_spi_uninit+0x138>
            NRFX_ASSERT(0);
    d5c8:	4e30      	ldr	r6, [pc, #192]	; (d68c <nrfx_spi_uninit+0x234>)
    d5ca:	f240 222e 	movw	r2, #558	; 0x22e
    d5ce:	4631      	mov	r1, r6
    d5d0:	482d      	ldr	r0, [pc, #180]	; (d688 <nrfx_spi_uninit+0x230>)
    d5d2:	f003 fd29 	bl	11028 <printk>
    d5d6:	f240 212e 	movw	r1, #558	; 0x22e
    d5da:	4630      	mov	r0, r6
    d5dc:	f003 fe46 	bl	1126c <assert_post_action>
    d5e0:	e7da      	b.n	d598 <nrfx_spi_uninit+0x140>
    switch (port)
    d5e2:	096b      	lsrs	r3, r5, #5
    d5e4:	d012      	beq.n	d60c <nrfx_spi_uninit+0x1b4>
    uint32_t mask = 0;
    d5e6:	2300      	movs	r3, #0
    pin_number &= 0x1F;
    d5e8:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    d5ec:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d5ee:	f013 0f01 	tst.w	r3, #1
    d5f2:	d00e      	beq.n	d612 <nrfx_spi_uninit+0x1ba>
    *p_pin = pin_number & 0x1F;
    d5f4:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    d5f8:	096b      	lsrs	r3, r5, #5
    d5fa:	d117      	bne.n	d62c <nrfx_spi_uninit+0x1d4>
    reg->PIN_CNF[pin_number] = cnf;
    d5fc:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    d600:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    d604:	2202      	movs	r2, #2
    d606:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
    d60a:	e77b      	b.n	d504 <nrfx_spi_uninit+0xac>
            mask = P0_FEATURE_PINS_PRESENT;
    d60c:	f04f 33ff 	mov.w	r3, #4294967295
    d610:	e7ea      	b.n	d5e8 <nrfx_spi_uninit+0x190>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d612:	4e1e      	ldr	r6, [pc, #120]	; (d68c <nrfx_spi_uninit+0x234>)
    d614:	f240 2229 	movw	r2, #553	; 0x229
    d618:	4631      	mov	r1, r6
    d61a:	481b      	ldr	r0, [pc, #108]	; (d688 <nrfx_spi_uninit+0x230>)
    d61c:	f003 fd04 	bl	11028 <printk>
    d620:	f240 2129 	movw	r1, #553	; 0x229
    d624:	4630      	mov	r0, r6
    d626:	f003 fe21 	bl	1126c <assert_post_action>
    d62a:	e7e3      	b.n	d5f4 <nrfx_spi_uninit+0x19c>
            NRFX_ASSERT(0);
    d62c:	4d17      	ldr	r5, [pc, #92]	; (d68c <nrfx_spi_uninit+0x234>)
    d62e:	f240 222e 	movw	r2, #558	; 0x22e
    d632:	4629      	mov	r1, r5
    d634:	4814      	ldr	r0, [pc, #80]	; (d688 <nrfx_spi_uninit+0x230>)
    d636:	f003 fcf7 	bl	11028 <printk>
    d63a:	f240 212e 	movw	r1, #558	; 0x22e
    d63e:	4628      	mov	r0, r5
    d640:	f003 fe14 	bl	1126c <assert_post_action>
    d644:	e7da      	b.n	d5fc <nrfx_spi_uninit+0x1a4>
            mask = P0_FEATURE_PINS_PRESENT;
    d646:	f04f 33ff 	mov.w	r3, #4294967295
    d64a:	e767      	b.n	d51c <nrfx_spi_uninit+0xc4>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d64c:	4e0f      	ldr	r6, [pc, #60]	; (d68c <nrfx_spi_uninit+0x234>)
    d64e:	f240 2229 	movw	r2, #553	; 0x229
    d652:	4631      	mov	r1, r6
    d654:	480c      	ldr	r0, [pc, #48]	; (d688 <nrfx_spi_uninit+0x230>)
    d656:	f003 fce7 	bl	11028 <printk>
    d65a:	f240 2129 	movw	r1, #553	; 0x229
    d65e:	4630      	mov	r0, r6
    d660:	f003 fe04 	bl	1126c <assert_post_action>
    d664:	e761      	b.n	d52a <nrfx_spi_uninit+0xd2>
            NRFX_ASSERT(0);
    d666:	4d09      	ldr	r5, [pc, #36]	; (d68c <nrfx_spi_uninit+0x234>)
    d668:	f240 222e 	movw	r2, #558	; 0x22e
    d66c:	4629      	mov	r1, r5
    d66e:	4806      	ldr	r0, [pc, #24]	; (d688 <nrfx_spi_uninit+0x230>)
    d670:	f003 fcda 	bl	11028 <printk>
    d674:	f240 212e 	movw	r1, #558	; 0x22e
    d678:	4628      	mov	r0, r5
    d67a:	f003 fdf7 	bl	1126c <assert_post_action>
    d67e:	e759      	b.n	d534 <nrfx_spi_uninit+0xdc>
    d680:	200010f0 	.word	0x200010f0
    d684:	00017090 	.word	0x00017090
    d688:	00015984 	.word	0x00015984
    d68c:	000167dc 	.word	0x000167dc

0000d690 <nrfx_spi_xfer>:
{
    d690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d694:	4606      	mov	r6, r0
    d696:	460d      	mov	r5, r1
    d698:	4690      	mov	r8, r2
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    d69a:	7904      	ldrb	r4, [r0, #4]
    d69c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    d6a0:	4f57      	ldr	r7, [pc, #348]	; (d800 <nrfx_spi_xfer+0x170>)
    d6a2:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    d6a6:	7f3b      	ldrb	r3, [r7, #28]
    d6a8:	2b00      	cmp	r3, #0
    d6aa:	d039      	beq.n	d720 <nrfx_spi_xfer+0x90>
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    d6ac:	682b      	ldr	r3, [r5, #0]
    d6ae:	2b00      	cmp	r3, #0
    d6b0:	d044      	beq.n	d73c <nrfx_spi_xfer+0xac>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
    d6b2:	68ab      	ldr	r3, [r5, #8]
    d6b4:	2b00      	cmp	r3, #0
    d6b6:	d052      	beq.n	d75e <nrfx_spi_xfer+0xce>
    if (p_cb->transfer_in_progress)
    d6b8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    d6bc:	4950      	ldr	r1, [pc, #320]	; (d800 <nrfx_spi_xfer+0x170>)
    d6be:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    d6c2:	7f5b      	ldrb	r3, [r3, #29]
    d6c4:	2b00      	cmp	r3, #0
    d6c6:	f040 8098 	bne.w	d7fa <nrfx_spi_xfer+0x16a>
        if (p_cb->handler)
    d6ca:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    d6ce:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    d6d2:	b12b      	cbz	r3, d6e0 <nrfx_spi_xfer+0x50>
            p_cb->transfer_in_progress = true;
    d6d4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    d6d8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    d6dc:	2201      	movs	r2, #1
    d6de:	775a      	strb	r2, [r3, #29]
    p_cb->evt.xfer_desc = *p_xfer_desc;
    d6e0:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    d6e4:	4b46      	ldr	r3, [pc, #280]	; (d800 <nrfx_spi_xfer+0x170>)
    d6e6:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
    d6ea:	f10c 0e0c 	add.w	lr, ip, #12
    d6ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    d6f2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    p_cb->abort = false;
    d6f6:	2300      	movs	r3, #0
    d6f8:	f88c 3024 	strb.w	r3, [ip, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    d6fc:	f89c 901e 	ldrb.w	r9, [ip, #30]
    d700:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    d704:	d13c      	bne.n	d780 <nrfx_spi_xfer+0xf0>
    if (flags)
    d706:	f1b8 0f00 	cmp.w	r8, #0
    d70a:	d06f      	beq.n	d7ec <nrfx_spi_xfer+0x15c>
        p_cb->transfer_in_progress = false;
    d70c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    d710:	4b3b      	ldr	r3, [pc, #236]	; (d800 <nrfx_spi_xfer+0x170>)
    d712:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    d716:	2300      	movs	r3, #0
    d718:	7763      	strb	r3, [r4, #29]
        err_code = NRFX_ERROR_NOT_SUPPORTED;
    d71a:	483a      	ldr	r0, [pc, #232]	; (d804 <nrfx_spi_xfer+0x174>)
}
    d71c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    d720:	f8df 90f0 	ldr.w	r9, [pc, #240]	; d814 <nrfx_spi_xfer+0x184>
    d724:	f44f 72b3 	mov.w	r2, #358	; 0x166
    d728:	4649      	mov	r1, r9
    d72a:	4837      	ldr	r0, [pc, #220]	; (d808 <nrfx_spi_xfer+0x178>)
    d72c:	f003 fc7c 	bl	11028 <printk>
    d730:	f44f 71b3 	mov.w	r1, #358	; 0x166
    d734:	4648      	mov	r0, r9
    d736:	f003 fd99 	bl	1126c <assert_post_action>
    d73a:	e7b7      	b.n	d6ac <nrfx_spi_xfer+0x1c>
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    d73c:	686b      	ldr	r3, [r5, #4]
    d73e:	2b00      	cmp	r3, #0
    d740:	d0b7      	beq.n	d6b2 <nrfx_spi_xfer+0x22>
    d742:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d814 <nrfx_spi_xfer+0x184>
    d746:	f240 1267 	movw	r2, #359	; 0x167
    d74a:	4649      	mov	r1, r9
    d74c:	482e      	ldr	r0, [pc, #184]	; (d808 <nrfx_spi_xfer+0x178>)
    d74e:	f003 fc6b 	bl	11028 <printk>
    d752:	f240 1167 	movw	r1, #359	; 0x167
    d756:	4648      	mov	r0, r9
    d758:	f003 fd88 	bl	1126c <assert_post_action>
    d75c:	e7a9      	b.n	d6b2 <nrfx_spi_xfer+0x22>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
    d75e:	68eb      	ldr	r3, [r5, #12]
    d760:	2b00      	cmp	r3, #0
    d762:	d0a9      	beq.n	d6b8 <nrfx_spi_xfer+0x28>
    d764:	f8df 90ac 	ldr.w	r9, [pc, #172]	; d814 <nrfx_spi_xfer+0x184>
    d768:	f44f 72b4 	mov.w	r2, #360	; 0x168
    d76c:	4649      	mov	r1, r9
    d76e:	4826      	ldr	r0, [pc, #152]	; (d808 <nrfx_spi_xfer+0x178>)
    d770:	f003 fc5a 	bl	11028 <printk>
    d774:	f44f 71b4 	mov.w	r1, #360	; 0x168
    d778:	4648      	mov	r0, r9
    d77a:	f003 fd77 	bl	1126c <assert_post_action>
    d77e:	e79b      	b.n	d6b8 <nrfx_spi_xfer+0x28>
    switch (port)
    d780:	ea5f 1359 	movs.w	r3, r9, lsr #5
    d784:	d013      	beq.n	d7ae <nrfx_spi_xfer+0x11e>
    uint32_t mask = 0;
    d786:	2300      	movs	r3, #0
    pin_number &= 0x1F;
    d788:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    d78c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d78e:	f013 0f01 	tst.w	r3, #1
    d792:	d00f      	beq.n	d7b4 <nrfx_spi_xfer+0x124>
    *p_pin = pin_number & 0x1F;
    d794:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    d798:	ea5f 1359 	movs.w	r3, r9, lsr #5
    d79c:	d118      	bne.n	d7d0 <nrfx_spi_xfer+0x140>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    d79e:	2301      	movs	r3, #1
    d7a0:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    d7a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    d7a8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    d7ac:	e7ab      	b.n	d706 <nrfx_spi_xfer+0x76>
            mask = P0_FEATURE_PINS_PRESENT;
    d7ae:	f04f 33ff 	mov.w	r3, #4294967295
    d7b2:	e7e9      	b.n	d788 <nrfx_spi_xfer+0xf8>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d7b4:	f8df a060 	ldr.w	sl, [pc, #96]	; d818 <nrfx_spi_xfer+0x188>
    d7b8:	f240 2229 	movw	r2, #553	; 0x229
    d7bc:	4651      	mov	r1, sl
    d7be:	4812      	ldr	r0, [pc, #72]	; (d808 <nrfx_spi_xfer+0x178>)
    d7c0:	f003 fc32 	bl	11028 <printk>
    d7c4:	f240 2129 	movw	r1, #553	; 0x229
    d7c8:	4650      	mov	r0, sl
    d7ca:	f003 fd4f 	bl	1126c <assert_post_action>
    d7ce:	e7e1      	b.n	d794 <nrfx_spi_xfer+0x104>
            NRFX_ASSERT(0);
    d7d0:	f8df 9044 	ldr.w	r9, [pc, #68]	; d818 <nrfx_spi_xfer+0x188>
    d7d4:	f240 222e 	movw	r2, #558	; 0x22e
    d7d8:	4649      	mov	r1, r9
    d7da:	480b      	ldr	r0, [pc, #44]	; (d808 <nrfx_spi_xfer+0x178>)
    d7dc:	f003 fc24 	bl	11028 <printk>
    d7e0:	f240 212e 	movw	r1, #558	; 0x22e
    d7e4:	4648      	mov	r0, r9
    d7e6:	f003 fd41 	bl	1126c <assert_post_action>
    d7ea:	e7d8      	b.n	d79e <nrfx_spi_xfer+0x10e>
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
    d7ec:	462a      	mov	r2, r5
    d7ee:	4639      	mov	r1, r7
    d7f0:	6830      	ldr	r0, [r6, #0]
    d7f2:	f7ff fb87 	bl	cf04 <spi_xfer>
    nrfx_err_t err_code = NRFX_SUCCESS;
    d7f6:	4805      	ldr	r0, [pc, #20]	; (d80c <nrfx_spi_xfer+0x17c>)
    d7f8:	e790      	b.n	d71c <nrfx_spi_xfer+0x8c>
        return err_code;
    d7fa:	4805      	ldr	r0, [pc, #20]	; (d810 <nrfx_spi_xfer+0x180>)
    d7fc:	e78e      	b.n	d71c <nrfx_spi_xfer+0x8c>
    d7fe:	bf00      	nop
    d800:	200010f0 	.word	0x200010f0
    d804:	0bad0003 	.word	0x0bad0003
    d808:	00015984 	.word	0x00015984
    d80c:	0bad0000 	.word	0x0bad0000
    d810:	0bad000b 	.word	0x0bad000b
    d814:	00017090 	.word	0x00017090
    d818:	000167dc 	.word	0x000167dc

0000d81c <nrfx_spi_0_irq_handler>:

#if NRFX_CHECK(NRFX_SPI0_ENABLED)
void nrfx_spi_0_irq_handler(void)
{
    d81c:	b508      	push	{r3, lr}
    irq_handler(NRF_SPI0, &m_cb[NRFX_SPI0_INST_IDX]);
    d81e:	4902      	ldr	r1, [pc, #8]	; (d828 <nrfx_spi_0_irq_handler+0xc>)
    d820:	4802      	ldr	r0, [pc, #8]	; (d82c <nrfx_spi_0_irq_handler+0x10>)
    d822:	f7ff fb49 	bl	ceb8 <irq_handler>
}
    d826:	bd08      	pop	{r3, pc}
    d828:	200010f0 	.word	0x200010f0
    d82c:	40003000 	.word	0x40003000

0000d830 <nrfx_spi_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
    d830:	b508      	push	{r3, lr}
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
    d832:	4903      	ldr	r1, [pc, #12]	; (d840 <nrfx_spi_1_irq_handler+0x10>)
    d834:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    d838:	f7ff fb3e 	bl	ceb8 <irq_handler>
}
    d83c:	bd08      	pop	{r3, pc}
    d83e:	bf00      	nop
    d840:	20001118 	.word	0x20001118

0000d844 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    d844:	4b11      	ldr	r3, [pc, #68]	; (d88c <_DoInit+0x48>)
    d846:	2203      	movs	r2, #3
    d848:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    d84a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    d84c:	4910      	ldr	r1, [pc, #64]	; (d890 <_DoInit+0x4c>)
    d84e:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    d850:	4a10      	ldr	r2, [pc, #64]	; (d894 <_DoInit+0x50>)
    d852:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    d854:	f44f 6280 	mov.w	r2, #1024	; 0x400
    d858:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    d85a:	2200      	movs	r2, #0
    d85c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    d85e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d860:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    d862:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    d864:	490c      	ldr	r1, [pc, #48]	; (d898 <_DoInit+0x54>)
    d866:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    d868:	2110      	movs	r1, #16
    d86a:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    d86c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    d86e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d870:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    d872:	4a0a      	ldr	r2, [pc, #40]	; (d89c <_DoInit+0x58>)
    d874:	6810      	ldr	r0, [r2, #0]
    d876:	f8c3 0007 	str.w	r0, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    d87a:	4a09      	ldr	r2, [pc, #36]	; (d8a0 <_DoInit+0x5c>)
    d87c:	e892 0003 	ldmia.w	r2, {r0, r1}
    d880:	6018      	str	r0, [r3, #0]
    d882:	8099      	strh	r1, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    d884:	2220      	movs	r2, #32
    d886:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    d888:	4770      	bx	lr
    d88a:	bf00      	nop
    d88c:	20001140 	.word	0x20001140
    d890:	000170cc 	.word	0x000170cc
    d894:	200011f8 	.word	0x200011f8
    d898:	200011e8 	.word	0x200011e8
    d89c:	000170d8 	.word	0x000170d8
    d8a0:	000170dc 	.word	0x000170dc

0000d8a4 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d8a8:	4604      	mov	r4, r0
    d8aa:	460e      	mov	r6, r1
    d8ac:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    d8ae:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    d8b2:	4a2d      	ldr	r2, [pc, #180]	; (d968 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    d8b4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    d8b8:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    d8ba:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    d8bc:	42bb      	cmp	r3, r7
    d8be:	d84b      	bhi.n	d958 <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    d8c0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    d8c4:	4928      	ldr	r1, [pc, #160]	; (d968 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    d8c6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    d8ca:	f8d2 8020 	ldr.w	r8, [r2, #32]
    d8ce:	eba8 0907 	sub.w	r9, r8, r7
    d8d2:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    d8d6:	4295      	cmp	r5, r2
    d8d8:	d904      	bls.n	d8e4 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    d8da:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    d8dc:	429d      	cmp	r5, r3
    d8de:	d917      	bls.n	d910 <SEGGER_RTT_WriteSkipNoLock+0x6c>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    d8e0:	2000      	movs	r0, #0
    d8e2:	e03e      	b.n	d962 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    d8e4:	f8df 8080 	ldr.w	r8, [pc, #128]	; d968 <SEGGER_RTT_WriteSkipNoLock+0xc4>
    d8e8:	1c63      	adds	r3, r4, #1
    d8ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d8ee:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    d8f2:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    d8f4:	462a      	mov	r2, r5
    d8f6:	4631      	mov	r1, r6
    d8f8:	4438      	add	r0, r7
    d8fa:	f007 f8a2 	bl	14a42 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    d8fe:	443d      	add	r5, r7
    d900:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    d904:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
    d908:	f8c8 5024 	str.w	r5, [r8, #36]	; 0x24
      return 1;
    d90c:	2001      	movs	r0, #1
    d90e:	e028      	b.n	d962 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    d910:	1c43      	adds	r3, r0, #1
    d912:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d916:	4a14      	ldr	r2, [pc, #80]	; (d968 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    d918:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    d91c:	6858      	ldr	r0, [r3, #4]
    d91e:	464a      	mov	r2, r9
    d920:	4631      	mov	r1, r6
    d922:	4438      	add	r0, r7
    d924:	f007 f88d 	bl	14a42 <memcpy>
      NumBytes -= Rem;
    d928:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    d92c:	197f      	adds	r7, r7, r5
    d92e:	d00b      	beq.n	d948 <SEGGER_RTT_WriteSkipNoLock+0xa4>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    d930:	1c63      	adds	r3, r4, #1
    d932:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d936:	4a0c      	ldr	r2, [pc, #48]	; (d968 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    d938:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    d93c:	463a      	mov	r2, r7
    d93e:	eb06 0109 	add.w	r1, r6, r9
    d942:	6858      	ldr	r0, [r3, #4]
    d944:	f007 f87d 	bl	14a42 <memcpy>
      pRing->WrOff = NumBytes;
    d948:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    d94c:	4b06      	ldr	r3, [pc, #24]	; (d968 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    d94e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    d952:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    d954:	2001      	movs	r0, #1
    d956:	e004      	b.n	d962 <SEGGER_RTT_WriteSkipNoLock+0xbe>
    Avail = RdOff - WrOff - 1u;
    d958:	1bdb      	subs	r3, r3, r7
    d95a:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    d95c:	42ab      	cmp	r3, r5
    d95e:	d2c1      	bcs.n	d8e4 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    d960:	2000      	movs	r0, #0
}
    d962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d966:	bf00      	nop
    d968:	20001140 	.word	0x20001140

0000d96c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d96e:	460f      	mov	r7, r1
    d970:	4616      	mov	r6, r2
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    d972:	4b18      	ldr	r3, [pc, #96]	; (d9d4 <SEGGER_RTT_WriteNoLock+0x68>)
    d974:	1c45      	adds	r5, r0, #1
    d976:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    d97a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    d97e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    d982:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    d986:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    d988:	2c01      	cmp	r4, #1
    d98a:	d011      	beq.n	d9b0 <SEGGER_RTT_WriteNoLock+0x44>
    d98c:	2c02      	cmp	r4, #2
    d98e:	d01c      	beq.n	d9ca <SEGGER_RTT_WriteNoLock+0x5e>
    d990:	b114      	cbz	r4, d998 <SEGGER_RTT_WriteNoLock+0x2c>
    d992:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
    d994:	4620      	mov	r0, r4
    d996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    d998:	4628      	mov	r0, r5
    d99a:	f006 fee6 	bl	1476a <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    d99e:	4286      	cmp	r6, r0
    d9a0:	d8f8      	bhi.n	d994 <SEGGER_RTT_WriteNoLock+0x28>
      _WriteNoCheck(pRing, pData, NumBytes);
    d9a2:	4632      	mov	r2, r6
    d9a4:	4639      	mov	r1, r7
    d9a6:	4628      	mov	r0, r5
    d9a8:	f006 feeb 	bl	14782 <_WriteNoCheck>
      Status = NumBytes;
    d9ac:	4634      	mov	r4, r6
    d9ae:	e7f1      	b.n	d994 <SEGGER_RTT_WriteNoLock+0x28>
    Avail = _GetAvailWriteSpace(pRing);
    d9b0:	4628      	mov	r0, r5
    d9b2:	f006 feda 	bl	1476a <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    d9b6:	4634      	mov	r4, r6
    d9b8:	4286      	cmp	r6, r0
    d9ba:	bf28      	it	cs
    d9bc:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    d9be:	4622      	mov	r2, r4
    d9c0:	4639      	mov	r1, r7
    d9c2:	4628      	mov	r0, r5
    d9c4:	f006 fedd 	bl	14782 <_WriteNoCheck>
    break;
    d9c8:	e7e4      	b.n	d994 <SEGGER_RTT_WriteNoLock+0x28>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    d9ca:	4628      	mov	r0, r5
    d9cc:	f006 fefb 	bl	147c6 <_WriteBlocking>
    d9d0:	4604      	mov	r4, r0
    break;
    d9d2:	e7df      	b.n	d994 <SEGGER_RTT_WriteNoLock+0x28>
    d9d4:	20001140 	.word	0x20001140

0000d9d8 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    d9d8:	4b06      	ldr	r3, [pc, #24]	; (d9f4 <SEGGER_RTT_HasDataUp+0x1c>)
    d9da:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    d9de:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    d9e2:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    d9e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    d9e8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    d9ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    d9ee:	1a80      	subs	r0, r0, r2
    d9f0:	4770      	bx	lr
    d9f2:	bf00      	nop
    d9f4:	20001140 	.word	0x20001140

0000d9f8 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    d9f8:	4b03      	ldr	r3, [pc, #12]	; (da08 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    d9fa:	4a04      	ldr	r2, [pc, #16]	; (da0c <z_device_state_init+0x14>)
    d9fc:	4293      	cmp	r3, r2
    d9fe:	d201      	bcs.n	da04 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
    da00:	3318      	adds	r3, #24
    da02:	e7fa      	b.n	d9fa <z_device_state_init+0x2>
	}
}
    da04:	4770      	bx	lr
    da06:	bf00      	nop
    da08:	000155c4 	.word	0x000155c4
    da0c:	0001563c 	.word	0x0001563c

0000da10 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    da10:	b570      	push	{r4, r5, r6, lr}
    da12:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    da14:	4b11      	ldr	r3, [pc, #68]	; (da5c <z_sys_init_run_level+0x4c>)
    da16:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    da1a:	e009      	b.n	da30 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    da1c:	4240      	negs	r0, r0
    da1e:	e017      	b.n	da50 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    da20:	68eb      	ldr	r3, [r5, #12]
    da22:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    da24:	68ea      	ldr	r2, [r5, #12]
    da26:	7853      	ldrb	r3, [r2, #1]
    da28:	f043 0301 	orr.w	r3, r3, #1
    da2c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    da2e:	3408      	adds	r4, #8
    da30:	1c73      	adds	r3, r6, #1
    da32:	4a0a      	ldr	r2, [pc, #40]	; (da5c <z_sys_init_run_level+0x4c>)
    da34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da38:	42a3      	cmp	r3, r4
    da3a:	d90d      	bls.n	da58 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    da3c:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    da3e:	6823      	ldr	r3, [r4, #0]
    da40:	4628      	mov	r0, r5
    da42:	4798      	blx	r3
		if (dev != NULL) {
    da44:	2d00      	cmp	r5, #0
    da46:	d0f2      	beq.n	da2e <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    da48:	2800      	cmp	r0, #0
    da4a:	d0eb      	beq.n	da24 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    da4c:	2800      	cmp	r0, #0
    da4e:	dbe5      	blt.n	da1c <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    da50:	28ff      	cmp	r0, #255	; 0xff
    da52:	dde5      	ble.n	da20 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    da54:	20ff      	movs	r0, #255	; 0xff
    da56:	e7e3      	b.n	da20 <z_sys_init_run_level+0x10>
		}
	}
}
    da58:	bd70      	pop	{r4, r5, r6, pc}
    da5a:	bf00      	nop
    da5c:	000170e4 	.word	0x000170e4

0000da60 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    da60:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    da62:	4605      	mov	r5, r0
    da64:	b328      	cbz	r0, dab2 <z_impl_device_get_binding+0x52>
    da66:	7803      	ldrb	r3, [r0, #0]
    da68:	b32b      	cbz	r3, dab6 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    da6a:	4c14      	ldr	r4, [pc, #80]	; (dabc <z_impl_device_get_binding+0x5c>)
    da6c:	e000      	b.n	da70 <z_impl_device_get_binding+0x10>
    da6e:	3418      	adds	r4, #24
    da70:	4b13      	ldr	r3, [pc, #76]	; (dac0 <z_impl_device_get_binding+0x60>)
    da72:	429c      	cmp	r4, r3
    da74:	d008      	beq.n	da88 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
    da76:	4620      	mov	r0, r4
    da78:	f006 fedd 	bl	14836 <z_device_ready>
    da7c:	2800      	cmp	r0, #0
    da7e:	d0f6      	beq.n	da6e <z_impl_device_get_binding+0xe>
    da80:	6823      	ldr	r3, [r4, #0]
    da82:	42ab      	cmp	r3, r5
    da84:	d1f3      	bne.n	da6e <z_impl_device_get_binding+0xe>
    da86:	e012      	b.n	daae <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    da88:	4c0c      	ldr	r4, [pc, #48]	; (dabc <z_impl_device_get_binding+0x5c>)
    da8a:	e000      	b.n	da8e <z_impl_device_get_binding+0x2e>
    da8c:	3418      	adds	r4, #24
    da8e:	4b0c      	ldr	r3, [pc, #48]	; (dac0 <z_impl_device_get_binding+0x60>)
    da90:	429c      	cmp	r4, r3
    da92:	d00b      	beq.n	daac <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    da94:	4620      	mov	r0, r4
    da96:	f006 fece 	bl	14836 <z_device_ready>
    da9a:	2800      	cmp	r0, #0
    da9c:	d0f6      	beq.n	da8c <z_impl_device_get_binding+0x2c>
    da9e:	6821      	ldr	r1, [r4, #0]
    daa0:	4628      	mov	r0, r5
    daa2:	f7f3 fc4f 	bl	1344 <strcmp>
    daa6:	2800      	cmp	r0, #0
    daa8:	d1f0      	bne.n	da8c <z_impl_device_get_binding+0x2c>
    daaa:	e000      	b.n	daae <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
    daac:	2400      	movs	r4, #0
}
    daae:	4620      	mov	r0, r4
    dab0:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    dab2:	4604      	mov	r4, r0
    dab4:	e7fb      	b.n	daae <z_impl_device_get_binding+0x4e>
    dab6:	2400      	movs	r4, #0
    dab8:	e7f9      	b.n	daae <z_impl_device_get_binding+0x4e>
    daba:	bf00      	nop
    dabc:	000155c4 	.word	0x000155c4
    dac0:	0001563c 	.word	0x0001563c

0000dac4 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    dac4:	2804      	cmp	r0, #4
    dac6:	d80c      	bhi.n	dae2 <reason_to_str+0x1e>
    dac8:	e8df f000 	tbb	[pc, r0]
    dacc:	07050d03 	.word	0x07050d03
    dad0:	09          	.byte	0x09
    dad1:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    dad2:	4806      	ldr	r0, [pc, #24]	; (daec <reason_to_str+0x28>)
    dad4:	4770      	bx	lr
		return "Stack overflow";
    dad6:	4806      	ldr	r0, [pc, #24]	; (daf0 <reason_to_str+0x2c>)
    dad8:	4770      	bx	lr
		return "Kernel oops";
    dada:	4806      	ldr	r0, [pc, #24]	; (daf4 <reason_to_str+0x30>)
    dadc:	4770      	bx	lr
		return "Kernel panic";
    dade:	4806      	ldr	r0, [pc, #24]	; (daf8 <reason_to_str+0x34>)
    dae0:	4770      	bx	lr
	default:
		return "Unknown error";
    dae2:	4806      	ldr	r0, [pc, #24]	; (dafc <reason_to_str+0x38>)
    dae4:	4770      	bx	lr
		return "Unhandled interrupt";
    dae6:	4806      	ldr	r0, [pc, #24]	; (db00 <reason_to_str+0x3c>)
	}
}
    dae8:	4770      	bx	lr
    daea:	bf00      	nop
    daec:	0001714c 	.word	0x0001714c
    daf0:	00017120 	.word	0x00017120
    daf4:	00017130 	.word	0x00017130
    daf8:	0001713c 	.word	0x0001713c
    dafc:	000170fc 	.word	0x000170fc
    db00:	0001710c 	.word	0x0001710c

0000db04 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    db04:	b130      	cbz	r0, db14 <thread_name_get+0x10>
{
    db06:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    db08:	f006 fee0 	bl	148cc <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    db0c:	b120      	cbz	r0, db18 <thread_name_get+0x14>
    db0e:	7803      	ldrb	r3, [r0, #0]
    db10:	b123      	cbz	r3, db1c <thread_name_get+0x18>
}
    db12:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    db14:	4802      	ldr	r0, [pc, #8]	; (db20 <thread_name_get+0x1c>)
}
    db16:	4770      	bx	lr
		thread_name = "unknown";
    db18:	4801      	ldr	r0, [pc, #4]	; (db20 <thread_name_get+0x1c>)
    db1a:	e7fa      	b.n	db12 <thread_name_get+0xe>
    db1c:	4800      	ldr	r0, [pc, #0]	; (db20 <thread_name_get+0x1c>)
	return thread_name;
    db1e:	e7f8      	b.n	db12 <thread_name_get+0xe>
    db20:	0001715c 	.word	0x0001715c

0000db24 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    db24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db28:	b082      	sub	sp, #8
    db2a:	4604      	mov	r4, r0
    db2c:	460e      	mov	r6, r1
	__asm__ volatile(
    db2e:	f04f 0320 	mov.w	r3, #32
    db32:	f3ef 8711 	mrs	r7, BASEPRI
    db36:	f383 8812 	msr	BASEPRI_MAX, r3
    db3a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    db3e:	f001 ff5b 	bl	f9f8 <z_impl_z_current_get>
    db42:	4605      	mov	r5, r0
    db44:	4b30      	ldr	r3, [pc, #192]	; (dc08 <z_fatal_error+0xe4>)
    db46:	4a31      	ldr	r2, [pc, #196]	; (dc0c <z_fatal_error+0xe8>)
    db48:	1a9b      	subs	r3, r3, r2
    db4a:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    db4c:	f04f 0800 	mov.w	r8, #0
    db50:	2201      	movs	r2, #1
    db52:	f362 0802 	bfi	r8, r2, #0, #3
    db56:	f36f 08c5 	bfc	r8, #3, #3
    db5a:	f363 188f 	bfi	r8, r3, #6, #10
    db5e:	4620      	mov	r0, r4
    db60:	f7ff ffb0 	bl	dac4 <reason_to_str>
    db64:	4602      	mov	r2, r0
    db66:	f8ad 8000 	strh.w	r8, [sp]
    db6a:	2300      	movs	r3, #0
    db6c:	4621      	mov	r1, r4
    db6e:	4828      	ldr	r0, [pc, #160]	; (dc10 <z_fatal_error+0xec>)
    db70:	f7f6 fe32 	bl	47d8 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    db74:	b11e      	cbz	r6, db7e <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    db76:	69f3      	ldr	r3, [r6, #28]
    db78:	f3c3 0308 	ubfx	r3, r3, #0, #9
    db7c:	bb3b      	cbnz	r3, dbce <z_fatal_error+0xaa>
    db7e:	4b22      	ldr	r3, [pc, #136]	; (dc08 <z_fatal_error+0xe4>)
    db80:	4a22      	ldr	r2, [pc, #136]	; (dc0c <z_fatal_error+0xe8>)
    db82:	1a9b      	subs	r3, r3, r2
    db84:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    db86:	f04f 0800 	mov.w	r8, #0
    db8a:	2201      	movs	r2, #1
    db8c:	f362 0802 	bfi	r8, r2, #0, #3
    db90:	f36f 08c5 	bfc	r8, #3, #3
    db94:	f363 188f 	bfi	r8, r3, #6, #10
    db98:	4628      	mov	r0, r5
    db9a:	f7ff ffb3 	bl	db04 <thread_name_get>
    db9e:	f7f6 fbf9 	bl	4394 <z_log_strdup>
    dba2:	4602      	mov	r2, r0
    dba4:	4643      	mov	r3, r8
    dba6:	4629      	mov	r1, r5
    dba8:	481a      	ldr	r0, [pc, #104]	; (dc14 <z_fatal_error+0xf0>)
    dbaa:	f7f6 fdb7 	bl	471c <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    dbae:	4631      	mov	r1, r6
    dbb0:	4620      	mov	r0, r4
    dbb2:	f7fb fbc5 	bl	9340 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    dbb6:	2c04      	cmp	r4, #4
    dbb8:	d01a      	beq.n	dbf0 <z_fatal_error+0xcc>
	__asm__ volatile(
    dbba:	f387 8811 	msr	BASEPRI, r7
    dbbe:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    dbc2:	4628      	mov	r0, r5
    dbc4:	f7f8 fb58 	bl	6278 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    dbc8:	b002      	add	sp, #8
    dbca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dbce:	4b0e      	ldr	r3, [pc, #56]	; (dc08 <z_fatal_error+0xe4>)
    dbd0:	4a0e      	ldr	r2, [pc, #56]	; (dc0c <z_fatal_error+0xe8>)
    dbd2:	1a9b      	subs	r3, r3, r2
    dbd4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
    dbd6:	f04f 0100 	mov.w	r1, #0
    dbda:	2201      	movs	r2, #1
    dbdc:	f362 0102 	bfi	r1, r2, #0, #3
    dbe0:	f36f 01c5 	bfc	r1, #3, #3
    dbe4:	f363 118f 	bfi	r1, r3, #6, #10
    dbe8:	480b      	ldr	r0, [pc, #44]	; (dc18 <z_fatal_error+0xf4>)
    dbea:	f7f6 fe33 	bl	4854 <log_0>
    dbee:	e7c6      	b.n	db7e <z_fatal_error+0x5a>
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    dbf0:	4c0a      	ldr	r4, [pc, #40]	; (dc1c <z_fatal_error+0xf8>)
    dbf2:	228f      	movs	r2, #143	; 0x8f
    dbf4:	4621      	mov	r1, r4
    dbf6:	480a      	ldr	r0, [pc, #40]	; (dc20 <z_fatal_error+0xfc>)
    dbf8:	f003 fa16 	bl	11028 <printk>
    dbfc:	218f      	movs	r1, #143	; 0x8f
    dbfe:	4620      	mov	r0, r4
    dc00:	f003 fb34 	bl	1126c <assert_post_action>
    dc04:	e7d9      	b.n	dbba <z_fatal_error+0x96>
    dc06:	bf00      	nop
    dc08:	000157ac 	.word	0x000157ac
    dc0c:	00015774 	.word	0x00015774
    dc10:	00017164 	.word	0x00017164
    dc14:	000171b0 	.word	0x000171b0
    dc18:	0001718c 	.word	0x0001718c
    dc1c:	000171c8 	.word	0x000171c8
    dc20:	00015984 	.word	0x00015984

0000dc24 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    dc24:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc26:	b089      	sub	sp, #36	; 0x24
    dc28:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    dc2a:	4b15      	ldr	r3, [pc, #84]	; (dc80 <init_idle_thread+0x5c>)
    dc2c:	25b0      	movs	r5, #176	; 0xb0
    dc2e:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    dc32:	4b14      	ldr	r3, [pc, #80]	; (dc84 <init_idle_thread+0x60>)
    dc34:	f44f 76b0 	mov.w	r6, #352	; 0x160
    dc38:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    dc3c:	af06      	add	r7, sp, #24
    dc3e:	4603      	mov	r3, r0
    dc40:	4a11      	ldr	r2, [pc, #68]	; (dc88 <init_idle_thread+0x64>)
    dc42:	2108      	movs	r1, #8
    dc44:	4638      	mov	r0, r7
    dc46:	f003 f9fd 	bl	11044 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    dc4a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    dc4e:	480f      	ldr	r0, [pc, #60]	; (dc8c <init_idle_thread+0x68>)
    dc50:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    dc54:	9705      	str	r7, [sp, #20]
    dc56:	2301      	movs	r3, #1
    dc58:	9304      	str	r3, [sp, #16]
    dc5a:	230f      	movs	r3, #15
    dc5c:	9303      	str	r3, [sp, #12]
    dc5e:	2300      	movs	r3, #0
    dc60:	9302      	str	r3, [sp, #8]
    dc62:	9301      	str	r3, [sp, #4]
    dc64:	9400      	str	r4, [sp, #0]
    dc66:	4b0a      	ldr	r3, [pc, #40]	; (dc90 <init_idle_thread+0x6c>)
    dc68:	f44f 72a0 	mov.w	r2, #320	; 0x140
    dc6c:	4631      	mov	r1, r6
    dc6e:	4628      	mov	r0, r5
    dc70:	f000 fa40 	bl	e0f4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    dc74:	7b6b      	ldrb	r3, [r5, #13]
    dc76:	f023 0304 	bic.w	r3, r3, #4
    dc7a:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    dc7c:	b009      	add	sp, #36	; 0x24
    dc7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc80:	200004f0 	.word	0x200004f0
    dc84:	200029c0 	.word	0x200029c0
    dc88:	000171ec 	.word	0x000171ec
    dc8c:	200015f8 	.word	0x200015f8
    dc90:	0000e3ad 	.word	0x0000e3ad

0000dc94 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    dc94:	b570      	push	{r4, r5, r6, lr}
    dc96:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    dc98:	f001 fd2e 	bl	f6f8 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    dc9c:	4d1b      	ldr	r5, [pc, #108]	; (dd0c <prepare_multithreading+0x78>)
    dc9e:	4b1c      	ldr	r3, [pc, #112]	; (dd10 <prepare_multithreading+0x7c>)
    dca0:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    dca2:	4b1c      	ldr	r3, [pc, #112]	; (dd14 <prepare_multithreading+0x80>)
    dca4:	9305      	str	r3, [sp, #20]
    dca6:	2301      	movs	r3, #1
    dca8:	9304      	str	r3, [sp, #16]
    dcaa:	2400      	movs	r4, #0
    dcac:	9403      	str	r4, [sp, #12]
    dcae:	9402      	str	r4, [sp, #8]
    dcb0:	9401      	str	r4, [sp, #4]
    dcb2:	9400      	str	r4, [sp, #0]
    dcb4:	4b18      	ldr	r3, [pc, #96]	; (dd18 <prepare_multithreading+0x84>)
    dcb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    dcba:	4918      	ldr	r1, [pc, #96]	; (dd1c <prepare_multithreading+0x88>)
    dcbc:	4628      	mov	r0, r5
    dcbe:	f000 fa19 	bl	e0f4 <z_setup_new_thread>
    dcc2:	4606      	mov	r6, r0
    dcc4:	7b6b      	ldrb	r3, [r5, #13]
    dcc6:	f023 0304 	bic.w	r3, r3, #4
    dcca:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    dccc:	4628      	mov	r0, r5
    dcce:	f001 f8f7 	bl	eec0 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    dcd2:	2c00      	cmp	r4, #0
    dcd4:	dd02      	ble.n	dcdc <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    dcd6:	4630      	mov	r0, r6
    dcd8:	b006      	add	sp, #24
    dcda:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    dcdc:	4620      	mov	r0, r4
    dcde:	f7ff ffa1 	bl	dc24 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    dce2:	4b0f      	ldr	r3, [pc, #60]	; (dd20 <prepare_multithreading+0x8c>)
    dce4:	22b0      	movs	r2, #176	; 0xb0
    dce6:	fb02 3204 	mla	r2, r2, r4, r3
    dcea:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    dcee:	4b08      	ldr	r3, [pc, #32]	; (dd10 <prepare_multithreading+0x7c>)
    dcf0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    dcf4:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    dcf6:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    dcf8:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    dcfc:	4a09      	ldr	r2, [pc, #36]	; (dd24 <prepare_multithreading+0x90>)
    dcfe:	eb02 1241 	add.w	r2, r2, r1, lsl #5
    dd02:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
    dd06:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    dd08:	3401      	adds	r4, #1
    dd0a:	e7e2      	b.n	dcd2 <prepare_multithreading+0x3e>
    dd0c:	200005a0 	.word	0x200005a0
    dd10:	200015f8 	.word	0x200015f8
    dd14:	000171f8 	.word	0x000171f8
    dd18:	0000dd29 	.word	0x0000dd29
    dd1c:	200019a0 	.word	0x200019a0
    dd20:	200004f0 	.word	0x200004f0
    dd24:	20002b20 	.word	0x20002b20

0000dd28 <bg_thread_main>:
{
    dd28:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    dd2a:	4b0a      	ldr	r3, [pc, #40]	; (dd54 <bg_thread_main+0x2c>)
    dd2c:	2201      	movs	r2, #1
    dd2e:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    dd30:	2002      	movs	r0, #2
    dd32:	f7ff fe6d 	bl	da10 <z_sys_init_run_level>
	boot_banner();
    dd36:	f002 fb0f 	bl	10358 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    dd3a:	2003      	movs	r0, #3
    dd3c:	f7ff fe68 	bl	da10 <z_sys_init_run_level>
	z_init_static_threads();
    dd40:	f000 fac2 	bl	e2c8 <z_init_static_threads>
	main();
    dd44:	f7f4 fa46 	bl	21d4 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    dd48:	4a03      	ldr	r2, [pc, #12]	; (dd58 <bg_thread_main+0x30>)
    dd4a:	7b13      	ldrb	r3, [r2, #12]
    dd4c:	f023 0301 	bic.w	r3, r3, #1
    dd50:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    dd52:	bd08      	pop	{r3, pc}
    dd54:	2000165d 	.word	0x2000165d
    dd58:	200005a0 	.word	0x200005a0

0000dd5c <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    dd5c:	b508      	push	{r3, lr}
    dd5e:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    dd60:	4a01      	ldr	r2, [pc, #4]	; (dd68 <switch_to_main_thread+0xc>)
    dd62:	4802      	ldr	r0, [pc, #8]	; (dd6c <switch_to_main_thread+0x10>)
    dd64:	f7f7 fdb2 	bl	58cc <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    dd68:	0000dd29 	.word	0x0000dd29
    dd6c:	200005a0 	.word	0x200005a0

0000dd70 <z_bss_zero>:
{
    dd70:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    dd72:	4803      	ldr	r0, [pc, #12]	; (dd80 <z_bss_zero+0x10>)
__ssp_bos_icheck3(memset, void *, int)
    dd74:	4a03      	ldr	r2, [pc, #12]	; (dd84 <z_bss_zero+0x14>)
    dd76:	1a12      	subs	r2, r2, r0
    dd78:	2100      	movs	r1, #0
    dd7a:	f006 fe70 	bl	14a5e <memset>
}
    dd7e:	bd08      	pop	{r3, pc}
    dd80:	200003e8 	.word	0x200003e8
    dd84:	20001664 	.word	0x20001664

0000dd88 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    dd88:	b500      	push	{lr}
    dd8a:	b0ad      	sub	sp, #180	; 0xb4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    dd8c:	f7f6 fa3a 	bl	4204 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    dd90:	4b1c      	ldr	r3, [pc, #112]	; (de04 <z_cstart+0x7c>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    dd92:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    dd96:	4c1c      	ldr	r4, [pc, #112]	; (de08 <z_cstart+0x80>)
    dd98:	6963      	ldr	r3, [r4, #20]
    dd9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    dd9e:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dda0:	23e0      	movs	r3, #224	; 0xe0
    dda2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    dda6:	2500      	movs	r5, #0
    dda8:	77e5      	strb	r5, [r4, #31]
    ddaa:	7625      	strb	r5, [r4, #24]
    ddac:	7665      	strb	r5, [r4, #25]
    ddae:	76a5      	strb	r5, [r4, #26]
    ddb0:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    ddb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ddb6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    ddba:	6263      	str	r3, [r4, #36]	; 0x24
    ddbc:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    ddc0:	f7f8 f9ca 	bl	6158 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    ddc4:	f7f7 fbe2 	bl	558c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    ddc8:	f04f 33ff 	mov.w	r3, #4294967295
    ddcc:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    ddce:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    ddd0:	f7f8 fb5e 	bl	6490 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    ddd4:	f7f8 fa66 	bl	62a4 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    ddd8:	2401      	movs	r4, #1
    ddda:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    ddde:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    dde2:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    dde4:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    dde6:	4b09      	ldr	r3, [pc, #36]	; (de0c <z_cstart+0x84>)
    dde8:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    ddec:	f7ff fe04 	bl	d9f8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    ddf0:	4628      	mov	r0, r5
    ddf2:	f7ff fe0d 	bl	da10 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    ddf6:	4620      	mov	r0, r4
    ddf8:	f7ff fe0a 	bl	da10 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    ddfc:	f7ff ff4a 	bl	dc94 <prepare_multithreading>
    de00:	f7ff ffac 	bl	dd5c <switch_to_main_thread>
    de04:	20003340 	.word	0x20003340
    de08:	e000ed00 	.word	0xe000ed00
    de0c:	200015f8 	.word	0x200015f8

0000de10 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    de10:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    de12:	4c0e      	ldr	r4, [pc, #56]	; (de4c <init_mem_slab_module+0x3c>)
	int rc = 0;
    de14:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    de16:	e012      	b.n	de3e <init_mem_slab_module+0x2e>
    de18:	4e0d      	ldr	r6, [pc, #52]	; (de50 <init_mem_slab_module+0x40>)
    de1a:	223c      	movs	r2, #60	; 0x3c
    de1c:	4631      	mov	r1, r6
    de1e:	480d      	ldr	r0, [pc, #52]	; (de54 <init_mem_slab_module+0x44>)
    de20:	f003 f902 	bl	11028 <printk>
    de24:	213c      	movs	r1, #60	; 0x3c
    de26:	4630      	mov	r0, r6
    de28:	f003 fa20 	bl	1126c <assert_post_action>
    de2c:	4b0a      	ldr	r3, [pc, #40]	; (de58 <init_mem_slab_module+0x48>)
    de2e:	429c      	cmp	r4, r3
    de30:	d209      	bcs.n	de46 <init_mem_slab_module+0x36>
		rc = create_free_list(slab);
    de32:	4620      	mov	r0, r4
    de34:	f006 fd0c 	bl	14850 <create_free_list>
		if (rc < 0) {
    de38:	1e05      	subs	r5, r0, #0
    de3a:	db04      	blt.n	de46 <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    de3c:	3420      	adds	r4, #32
    de3e:	4b06      	ldr	r3, [pc, #24]	; (de58 <init_mem_slab_module+0x48>)
    de40:	429c      	cmp	r4, r3
    de42:	d9f3      	bls.n	de2c <init_mem_slab_module+0x1c>
    de44:	e7e8      	b.n	de18 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    de46:	4628      	mov	r0, r5
    de48:	bd70      	pop	{r4, r5, r6, pc}
    de4a:	bf00      	nop
    de4c:	20000370 	.word	0x20000370
    de50:	00017204 	.word	0x00017204
    de54:	00015984 	.word	0x00015984
    de58:	200003b0 	.word	0x200003b0

0000de5c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    de5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    de60:	b082      	sub	sp, #8
    de62:	4604      	mov	r4, r0
    de64:	460e      	mov	r6, r1
    de66:	4690      	mov	r8, r2
    de68:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    de6a:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    de6e:	f04f 0320 	mov.w	r3, #32
    de72:	f3ef 8711 	mrs	r7, BASEPRI
    de76:	f383 8812 	msr	BASEPRI_MAX, r3
    de7a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    de7e:	4628      	mov	r0, r5
    de80:	f000 f8c8 	bl	e014 <z_spin_lock_valid>
    de84:	b1c0      	cbz	r0, deb8 <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
    de86:	4628      	mov	r0, r5
    de88:	f000 f8e4 	bl	e054 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    de8c:	69a3      	ldr	r3, [r4, #24]
    de8e:	b1fb      	cbz	r3, ded0 <k_mem_slab_alloc+0x74>
		/* take a free block */
		*mem = slab->free_list;
    de90:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    de92:	69a3      	ldr	r3, [r4, #24]
    de94:	681b      	ldr	r3, [r3, #0]
    de96:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    de98:	69e3      	ldr	r3, [r4, #28]
    de9a:	3301      	adds	r3, #1
    de9c:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    de9e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dea0:	4628      	mov	r0, r5
    dea2:	f000 f8c7 	bl	e034 <z_spin_unlock_valid>
    dea6:	b350      	cbz	r0, defe <k_mem_slab_alloc+0xa2>
	__asm__ volatile(
    dea8:	f387 8811 	msr	BASEPRI, r7
    deac:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    deb0:	4620      	mov	r0, r4
    deb2:	b002      	add	sp, #8
    deb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    deb8:	f8df a060 	ldr.w	sl, [pc, #96]	; df1c <k_mem_slab_alloc+0xc0>
    debc:	2281      	movs	r2, #129	; 0x81
    debe:	4651      	mov	r1, sl
    dec0:	4814      	ldr	r0, [pc, #80]	; (df14 <k_mem_slab_alloc+0xb8>)
    dec2:	f003 f8b1 	bl	11028 <printk>
    dec6:	2181      	movs	r1, #129	; 0x81
    dec8:	4650      	mov	r0, sl
    deca:	f003 f9cf 	bl	1126c <assert_post_action>
    dece:	e7da      	b.n	de86 <k_mem_slab_alloc+0x2a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    ded0:	ea58 0309 	orrs.w	r3, r8, r9
    ded4:	d104      	bne.n	dee0 <k_mem_slab_alloc+0x84>
		*mem = NULL;
    ded6:	2300      	movs	r3, #0
    ded8:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    deda:	f06f 040b 	mvn.w	r4, #11
    dede:	e7df      	b.n	dea0 <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    dee0:	e9cd 8900 	strd	r8, r9, [sp]
    dee4:	4622      	mov	r2, r4
    dee6:	4639      	mov	r1, r7
    dee8:	4628      	mov	r0, r5
    deea:	f001 f975 	bl	f1d8 <z_pend_curr>
		if (result == 0) {
    deee:	4604      	mov	r4, r0
    def0:	2800      	cmp	r0, #0
    def2:	d1dd      	bne.n	deb0 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    def4:	4b08      	ldr	r3, [pc, #32]	; (df18 <k_mem_slab_alloc+0xbc>)
    def6:	689b      	ldr	r3, [r3, #8]
    def8:	695b      	ldr	r3, [r3, #20]
    defa:	6033      	str	r3, [r6, #0]
		return result;
    defc:	e7d8      	b.n	deb0 <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    defe:	4d07      	ldr	r5, [pc, #28]	; (df1c <k_mem_slab_alloc+0xc0>)
    df00:	22ac      	movs	r2, #172	; 0xac
    df02:	4629      	mov	r1, r5
    df04:	4803      	ldr	r0, [pc, #12]	; (df14 <k_mem_slab_alloc+0xb8>)
    df06:	f003 f88f 	bl	11028 <printk>
    df0a:	21ac      	movs	r1, #172	; 0xac
    df0c:	4628      	mov	r0, r5
    df0e:	f003 f9ad 	bl	1126c <assert_post_action>
    df12:	e7c9      	b.n	dea8 <k_mem_slab_alloc+0x4c>
    df14:	00015984 	.word	0x00015984
    df18:	200015f8 	.word	0x200015f8
    df1c:	00015bc8 	.word	0x00015bc8

0000df20 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    df20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df24:	4604      	mov	r4, r0
    df26:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    df28:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    df2c:	f04f 0320 	mov.w	r3, #32
    df30:	f3ef 8711 	mrs	r7, BASEPRI
    df34:	f383 8812 	msr	BASEPRI_MAX, r3
    df38:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    df3c:	4630      	mov	r0, r6
    df3e:	f000 f869 	bl	e014 <z_spin_lock_valid>
    df42:	b1b0      	cbz	r0, df72 <k_mem_slab_free+0x52>
	z_spin_lock_set_owner(l);
    df44:	4630      	mov	r0, r6
    df46:	f000 f885 	bl	e054 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    df4a:	69a3      	ldr	r3, [r4, #24]
    df4c:	b1eb      	cbz	r3, df8a <k_mem_slab_free+0x6a>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    df4e:	682b      	ldr	r3, [r5, #0]
    df50:	69a2      	ldr	r2, [r4, #24]
    df52:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    df54:	682b      	ldr	r3, [r5, #0]
    df56:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    df58:	69e3      	ldr	r3, [r4, #28]
    df5a:	3b01      	subs	r3, #1
    df5c:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    df5e:	4630      	mov	r0, r6
    df60:	f000 f868 	bl	e034 <z_spin_unlock_valid>
    df64:	b310      	cbz	r0, dfac <k_mem_slab_free+0x8c>
	__asm__ volatile(
    df66:	f387 8811 	msr	BASEPRI, r7
    df6a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    df6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    df72:	f8df 8054 	ldr.w	r8, [pc, #84]	; dfc8 <k_mem_slab_free+0xa8>
    df76:	2281      	movs	r2, #129	; 0x81
    df78:	4641      	mov	r1, r8
    df7a:	4812      	ldr	r0, [pc, #72]	; (dfc4 <k_mem_slab_free+0xa4>)
    df7c:	f003 f854 	bl	11028 <printk>
    df80:	2181      	movs	r1, #129	; 0x81
    df82:	4640      	mov	r0, r8
    df84:	f003 f972 	bl	1126c <assert_post_action>
    df88:	e7dc      	b.n	df44 <k_mem_slab_free+0x24>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    df8a:	4620      	mov	r0, r4
    df8c:	f001 fb62 	bl	f654 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    df90:	2800      	cmp	r0, #0
    df92:	d0dc      	beq.n	df4e <k_mem_slab_free+0x2e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    df94:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    df96:	2100      	movs	r1, #0
    df98:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    df9c:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    df9e:	f000 ff8f 	bl	eec0 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    dfa2:	4639      	mov	r1, r7
    dfa4:	4630      	mov	r0, r6
    dfa6:	f000 fd65 	bl	ea74 <z_reschedule>
			return;
    dfaa:	e7e0      	b.n	df6e <k_mem_slab_free+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dfac:	4c06      	ldr	r4, [pc, #24]	; (dfc8 <k_mem_slab_free+0xa8>)
    dfae:	22ac      	movs	r2, #172	; 0xac
    dfb0:	4621      	mov	r1, r4
    dfb2:	4804      	ldr	r0, [pc, #16]	; (dfc4 <k_mem_slab_free+0xa4>)
    dfb4:	f003 f838 	bl	11028 <printk>
    dfb8:	21ac      	movs	r1, #172	; 0xac
    dfba:	4620      	mov	r0, r4
    dfbc:	f003 f956 	bl	1126c <assert_post_action>
    dfc0:	e7d1      	b.n	df66 <k_mem_slab_free+0x46>
    dfc2:	bf00      	nop
    dfc4:	00015984 	.word	0x00015984
    dfc8:	00015bc8 	.word	0x00015bc8

0000dfcc <z_impl_k_thread_name_set>:
	k_spin_unlock(&z_thread_monitor_lock, key);
}
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    dfcc:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    dfce:	4604      	mov	r4, r0
    dfd0:	b140      	cbz	r0, dfe4 <z_impl_k_thread_name_set+0x18>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    dfd2:	2220      	movs	r2, #32
    dfd4:	f104 0074 	add.w	r0, r4, #116	; 0x74
    dfd8:	f006 fe7b 	bl	14cd2 <strncpy>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    dfdc:	2000      	movs	r0, #0
    dfde:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    dfe2:	bd10      	pop	{r4, pc}
		thread = _current;
    dfe4:	4b01      	ldr	r3, [pc, #4]	; (dfec <z_impl_k_thread_name_set+0x20>)
    dfe6:	689c      	ldr	r4, [r3, #8]
    dfe8:	e7f3      	b.n	dfd2 <z_impl_k_thread_name_set+0x6>
    dfea:	bf00      	nop
    dfec:	200015f8 	.word	0x200015f8

0000dff0 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    dff0:	b538      	push	{r3, r4, r5, lr}
    dff2:	4614      	mov	r4, r2
    dff4:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    dff6:	ea54 0305 	orrs.w	r3, r4, r5
    dffa:	d102      	bne.n	e002 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    dffc:	f006 fc68 	bl	148d0 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    e000:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    e002:	462b      	mov	r3, r5
    e004:	4902      	ldr	r1, [pc, #8]	; (e010 <schedule_new_thread+0x20>)
    e006:	3018      	adds	r0, #24
    e008:	f001 fddc 	bl	fbc4 <z_add_timeout>
    e00c:	e7f8      	b.n	e000 <schedule_new_thread+0x10>
    e00e:	bf00      	nop
    e010:	0000efd5 	.word	0x0000efd5

0000e014 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    e014:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
    e016:	b13b      	cbz	r3, e028 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    e018:	f003 0303 	and.w	r3, r3, #3
    e01c:	4a04      	ldr	r2, [pc, #16]	; (e030 <z_spin_lock_valid+0x1c>)
    e01e:	7d12      	ldrb	r2, [r2, #20]
    e020:	4293      	cmp	r3, r2
    e022:	d003      	beq.n	e02c <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
    e024:	2001      	movs	r0, #1
    e026:	4770      	bx	lr
    e028:	2001      	movs	r0, #1
    e02a:	4770      	bx	lr
			return false;
    e02c:	2000      	movs	r0, #0
}
    e02e:	4770      	bx	lr
    e030:	200015f8 	.word	0x200015f8

0000e034 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    e034:	6801      	ldr	r1, [r0, #0]
    e036:	4a06      	ldr	r2, [pc, #24]	; (e050 <z_spin_unlock_valid+0x1c>)
    e038:	7d13      	ldrb	r3, [r2, #20]
    e03a:	6892      	ldr	r2, [r2, #8]
    e03c:	4313      	orrs	r3, r2
    e03e:	4299      	cmp	r1, r3
    e040:	d103      	bne.n	e04a <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
    e042:	2300      	movs	r3, #0
    e044:	6003      	str	r3, [r0, #0]
	return true;
    e046:	2001      	movs	r0, #1
    e048:	4770      	bx	lr
		return false;
    e04a:	2000      	movs	r0, #0
}
    e04c:	4770      	bx	lr
    e04e:	bf00      	nop
    e050:	200015f8 	.word	0x200015f8

0000e054 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    e054:	4a02      	ldr	r2, [pc, #8]	; (e060 <z_spin_lock_set_owner+0xc>)
    e056:	7d13      	ldrb	r3, [r2, #20]
    e058:	6892      	ldr	r2, [r2, #8]
    e05a:	4313      	orrs	r3, r2
    e05c:	6003      	str	r3, [r0, #0]
}
    e05e:	4770      	bx	lr
    e060:	200015f8 	.word	0x200015f8

0000e064 <z_thread_monitor_exit>:
{
    e064:	b570      	push	{r4, r5, r6, lr}
    e066:	4604      	mov	r4, r0
	__asm__ volatile(
    e068:	f04f 0320 	mov.w	r3, #32
    e06c:	f3ef 8511 	mrs	r5, BASEPRI
    e070:	f383 8812 	msr	BASEPRI_MAX, r3
    e074:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e078:	481a      	ldr	r0, [pc, #104]	; (e0e4 <z_thread_monitor_exit+0x80>)
    e07a:	f7ff ffcb 	bl	e014 <z_spin_lock_valid>
    e07e:	b150      	cbz	r0, e096 <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
    e080:	4818      	ldr	r0, [pc, #96]	; (e0e4 <z_thread_monitor_exit+0x80>)
    e082:	f7ff ffe7 	bl	e054 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
    e086:	4b18      	ldr	r3, [pc, #96]	; (e0e8 <z_thread_monitor_exit+0x84>)
    e088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e08a:	42a3      	cmp	r3, r4
    e08c:	d10f      	bne.n	e0ae <z_thread_monitor_exit+0x4a>
		_kernel.threads = _kernel.threads->next_thread;
    e08e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    e090:	4b15      	ldr	r3, [pc, #84]	; (e0e8 <z_thread_monitor_exit+0x84>)
    e092:	629a      	str	r2, [r3, #40]	; 0x28
    e094:	e012      	b.n	e0bc <z_thread_monitor_exit+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e096:	4e15      	ldr	r6, [pc, #84]	; (e0ec <z_thread_monitor_exit+0x88>)
    e098:	2281      	movs	r2, #129	; 0x81
    e09a:	4631      	mov	r1, r6
    e09c:	4814      	ldr	r0, [pc, #80]	; (e0f0 <z_thread_monitor_exit+0x8c>)
    e09e:	f002 ffc3 	bl	11028 <printk>
    e0a2:	2181      	movs	r1, #129	; 0x81
    e0a4:	4630      	mov	r0, r6
    e0a6:	f003 f8e1 	bl	1126c <assert_post_action>
    e0aa:	e7e9      	b.n	e080 <z_thread_monitor_exit+0x1c>
			prev_thread = prev_thread->next_thread;
    e0ac:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    e0ae:	b113      	cbz	r3, e0b6 <z_thread_monitor_exit+0x52>
			(thread != prev_thread->next_thread)) {
    e0b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    e0b2:	42a2      	cmp	r2, r4
    e0b4:	d1fa      	bne.n	e0ac <z_thread_monitor_exit+0x48>
		if (prev_thread != NULL) {
    e0b6:	b10b      	cbz	r3, e0bc <z_thread_monitor_exit+0x58>
			prev_thread->next_thread = thread->next_thread;
    e0b8:	6f22      	ldr	r2, [r4, #112]	; 0x70
    e0ba:	671a      	str	r2, [r3, #112]	; 0x70
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e0bc:	4809      	ldr	r0, [pc, #36]	; (e0e4 <z_thread_monitor_exit+0x80>)
    e0be:	f7ff ffb9 	bl	e034 <z_spin_unlock_valid>
    e0c2:	b120      	cbz	r0, e0ce <z_thread_monitor_exit+0x6a>
	__asm__ volatile(
    e0c4:	f385 8811 	msr	BASEPRI, r5
    e0c8:	f3bf 8f6f 	isb	sy
}
    e0cc:	bd70      	pop	{r4, r5, r6, pc}
    e0ce:	4c07      	ldr	r4, [pc, #28]	; (e0ec <z_thread_monitor_exit+0x88>)
    e0d0:	22ac      	movs	r2, #172	; 0xac
    e0d2:	4621      	mov	r1, r4
    e0d4:	4806      	ldr	r0, [pc, #24]	; (e0f0 <z_thread_monitor_exit+0x8c>)
    e0d6:	f002 ffa7 	bl	11028 <printk>
    e0da:	21ac      	movs	r1, #172	; 0xac
    e0dc:	4620      	mov	r0, r4
    e0de:	f003 f8c5 	bl	1126c <assert_post_action>
    e0e2:	e7ef      	b.n	e0c4 <z_thread_monitor_exit+0x60>
    e0e4:	20001624 	.word	0x20001624
    e0e8:	200015f8 	.word	0x200015f8
    e0ec:	00015bc8 	.word	0x00015bc8
    e0f0:	00015984 	.word	0x00015984

0000e0f4 <z_setup_new_thread>:
{
    e0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e0f8:	b085      	sub	sp, #20
    e0fa:	4604      	mov	r4, r0
    e0fc:	460e      	mov	r6, r1
    e0fe:	4617      	mov	r7, r2
    e100:	461d      	mov	r5, r3
    e102:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    e106:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    e10a:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
    e10e:	f1b8 0f0f 	cmp.w	r8, #15
    e112:	d05d      	beq.n	e1d0 <z_setup_new_thread+0xdc>
    e114:	f108 0310 	add.w	r3, r8, #16
    e118:	2b1e      	cmp	r3, #30
    e11a:	d85d      	bhi.n	e1d8 <z_setup_new_thread+0xe4>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    e11c:	f104 0358 	add.w	r3, r4, #88	; 0x58
	list->head = (sys_dnode_t *)list;
    e120:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    e122:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    e124:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e126:	2204      	movs	r2, #4
    e128:	4641      	mov	r1, r8
    e12a:	4620      	mov	r0, r4
    e12c:	f006 fbd4 	bl	148d8 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    e130:	463a      	mov	r2, r7
    e132:	4631      	mov	r1, r6
    e134:	4620      	mov	r0, r4
    e136:	f006 fbb1 	bl	1489c <setup_thread_stack>
    e13a:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    e13c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e13e:	9302      	str	r3, [sp, #8]
    e140:	f8cd a004 	str.w	sl, [sp, #4]
    e144:	f8cd b000 	str.w	fp, [sp]
    e148:	462b      	mov	r3, r5
    e14a:	4602      	mov	r2, r0
    e14c:	4631      	mov	r1, r6
    e14e:	4620      	mov	r0, r4
    e150:	f7f7 fb6c 	bl	582c <arch_new_thread>
	new_thread->init_data = NULL;
    e154:	2300      	movs	r3, #0
    e156:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
    e158:	6625      	str	r5, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    e15a:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    e15e:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    e162:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e164:	66e3      	str	r3, [r4, #108]	; 0x6c
	__asm__ volatile(
    e166:	f04f 0320 	mov.w	r3, #32
    e16a:	f3ef 8611 	mrs	r6, BASEPRI
    e16e:	f383 8812 	msr	BASEPRI_MAX, r3
    e172:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e176:	482e      	ldr	r0, [pc, #184]	; (e230 <z_setup_new_thread+0x13c>)
    e178:	f7ff ff4c 	bl	e014 <z_spin_lock_valid>
    e17c:	2800      	cmp	r0, #0
    e17e:	d039      	beq.n	e1f4 <z_setup_new_thread+0x100>
	z_spin_lock_set_owner(l);
    e180:	4d2b      	ldr	r5, [pc, #172]	; (e230 <z_setup_new_thread+0x13c>)
    e182:	4628      	mov	r0, r5
    e184:	f7ff ff66 	bl	e054 <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
    e188:	4b2a      	ldr	r3, [pc, #168]	; (e234 <z_setup_new_thread+0x140>)
    e18a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e18c:	6722      	str	r2, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    e18e:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e190:	4628      	mov	r0, r5
    e192:	f7ff ff4f 	bl	e034 <z_spin_unlock_valid>
    e196:	2800      	cmp	r0, #0
    e198:	d037      	beq.n	e20a <z_setup_new_thread+0x116>
	__asm__ volatile(
    e19a:	f386 8811 	msr	BASEPRI, r6
    e19e:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    e1a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e1a4:	2b00      	cmp	r3, #0
    e1a6:	d03b      	beq.n	e220 <z_setup_new_thread+0x12c>
    e1a8:	221f      	movs	r2, #31
    e1aa:	4619      	mov	r1, r3
    e1ac:	f104 0074 	add.w	r0, r4, #116	; 0x74
    e1b0:	f006 fd8f 	bl	14cd2 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    e1b4:	2300      	movs	r3, #0
    e1b6:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
	if (!_current) {
    e1ba:	4b1e      	ldr	r3, [pc, #120]	; (e234 <z_setup_new_thread+0x140>)
    e1bc:	689b      	ldr	r3, [r3, #8]
    e1be:	b39b      	cbz	r3, e228 <z_setup_new_thread+0x134>
	new_thread->resource_pool = _current->resource_pool;
    e1c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    e1c4:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
    e1c8:	4638      	mov	r0, r7
    e1ca:	b005      	add	sp, #20
    e1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    e1d0:	4b19      	ldr	r3, [pc, #100]	; (e238 <z_setup_new_thread+0x144>)
    e1d2:	429d      	cmp	r5, r3
    e1d4:	d19e      	bne.n	e114 <z_setup_new_thread+0x20>
    e1d6:	e7a1      	b.n	e11c <z_setup_new_thread+0x28>
    e1d8:	f8df 9068 	ldr.w	r9, [pc, #104]	; e244 <z_setup_new_thread+0x150>
    e1dc:	f240 12ff 	movw	r2, #511	; 0x1ff
    e1e0:	4649      	mov	r1, r9
    e1e2:	4816      	ldr	r0, [pc, #88]	; (e23c <z_setup_new_thread+0x148>)
    e1e4:	f002 ff20 	bl	11028 <printk>
    e1e8:	f240 11ff 	movw	r1, #511	; 0x1ff
    e1ec:	4648      	mov	r0, r9
    e1ee:	f003 f83d 	bl	1126c <assert_post_action>
    e1f2:	e793      	b.n	e11c <z_setup_new_thread+0x28>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e1f4:	4d12      	ldr	r5, [pc, #72]	; (e240 <z_setup_new_thread+0x14c>)
    e1f6:	2281      	movs	r2, #129	; 0x81
    e1f8:	4629      	mov	r1, r5
    e1fa:	4810      	ldr	r0, [pc, #64]	; (e23c <z_setup_new_thread+0x148>)
    e1fc:	f002 ff14 	bl	11028 <printk>
    e200:	2181      	movs	r1, #129	; 0x81
    e202:	4628      	mov	r0, r5
    e204:	f003 f832 	bl	1126c <assert_post_action>
    e208:	e7ba      	b.n	e180 <z_setup_new_thread+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e20a:	4d0d      	ldr	r5, [pc, #52]	; (e240 <z_setup_new_thread+0x14c>)
    e20c:	22ac      	movs	r2, #172	; 0xac
    e20e:	4629      	mov	r1, r5
    e210:	480a      	ldr	r0, [pc, #40]	; (e23c <z_setup_new_thread+0x148>)
    e212:	f002 ff09 	bl	11028 <printk>
    e216:	21ac      	movs	r1, #172	; 0xac
    e218:	4628      	mov	r0, r5
    e21a:	f003 f827 	bl	1126c <assert_post_action>
    e21e:	e7bc      	b.n	e19a <z_setup_new_thread+0xa6>
		new_thread->name[0] = '\0';
    e220:	2300      	movs	r3, #0
    e222:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    e226:	e7c8      	b.n	e1ba <z_setup_new_thread+0xc6>
		new_thread->resource_pool = NULL;
    e228:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    e22c:	e7cc      	b.n	e1c8 <z_setup_new_thread+0xd4>
    e22e:	bf00      	nop
    e230:	20001624 	.word	0x20001624
    e234:	200015f8 	.word	0x200015f8
    e238:	0000e3ad 	.word	0x0000e3ad
    e23c:	00015984 	.word	0x00015984
    e240:	00015bc8 	.word	0x00015bc8
    e244:	0001722c 	.word	0x0001722c

0000e248 <z_impl_k_thread_create>:
{
    e248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e24c:	b086      	sub	sp, #24
    e24e:	4604      	mov	r4, r0
    e250:	460d      	mov	r5, r1
    e252:	4616      	mov	r6, r2
    e254:	461f      	mov	r7, r3
    e256:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e25a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    e25e:	b9db      	cbnz	r3, e298 <z_impl_k_thread_create+0x50>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    e260:	2300      	movs	r3, #0
    e262:	9305      	str	r3, [sp, #20]
    e264:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e266:	9304      	str	r3, [sp, #16]
    e268:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e26a:	9303      	str	r3, [sp, #12]
    e26c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e26e:	9302      	str	r3, [sp, #8]
    e270:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e272:	9301      	str	r3, [sp, #4]
    e274:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e276:	9300      	str	r3, [sp, #0]
    e278:	463b      	mov	r3, r7
    e27a:	4632      	mov	r2, r6
    e27c:	4629      	mov	r1, r5
    e27e:	4620      	mov	r0, r4
    e280:	f7ff ff38 	bl	e0f4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    e284:	f1b9 3fff 	cmp.w	r9, #4294967295
    e288:	bf08      	it	eq
    e28a:	f1b8 3fff 	cmpeq.w	r8, #4294967295
    e28e:	d111      	bne.n	e2b4 <z_impl_k_thread_create+0x6c>
}
    e290:	4620      	mov	r0, r4
    e292:	b006      	add	sp, #24
    e294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    e298:	f8df a028 	ldr.w	sl, [pc, #40]	; e2c4 <z_impl_k_thread_create+0x7c>
    e29c:	f44f 721a 	mov.w	r2, #616	; 0x268
    e2a0:	4651      	mov	r1, sl
    e2a2:	4807      	ldr	r0, [pc, #28]	; (e2c0 <z_impl_k_thread_create+0x78>)
    e2a4:	f002 fec0 	bl	11028 <printk>
    e2a8:	f44f 711a 	mov.w	r1, #616	; 0x268
    e2ac:	4650      	mov	r0, sl
    e2ae:	f002 ffdd 	bl	1126c <assert_post_action>
    e2b2:	e7d5      	b.n	e260 <z_impl_k_thread_create+0x18>
		schedule_new_thread(new_thread, delay);
    e2b4:	4642      	mov	r2, r8
    e2b6:	464b      	mov	r3, r9
    e2b8:	4620      	mov	r0, r4
    e2ba:	f7ff fe99 	bl	dff0 <schedule_new_thread>
    e2be:	e7e7      	b.n	e290 <z_impl_k_thread_create+0x48>
    e2c0:	00015984 	.word	0x00015984
    e2c4:	0001722c 	.word	0x0001722c

0000e2c8 <z_init_static_threads>:
{
    e2c8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    e2cc:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    e2ce:	4c33      	ldr	r4, [pc, #204]	; (e39c <z_init_static_threads+0xd4>)
    e2d0:	e023      	b.n	e31a <z_init_static_threads+0x52>
    e2d2:	4d33      	ldr	r5, [pc, #204]	; (e3a0 <z_init_static_threads+0xd8>)
    e2d4:	f240 22cf 	movw	r2, #719	; 0x2cf
    e2d8:	4629      	mov	r1, r5
    e2da:	4832      	ldr	r0, [pc, #200]	; (e3a4 <z_init_static_threads+0xdc>)
    e2dc:	f002 fea4 	bl	11028 <printk>
    e2e0:	f240 21cf 	movw	r1, #719	; 0x2cf
    e2e4:	4628      	mov	r0, r5
    e2e6:	f002 ffc1 	bl	1126c <assert_post_action>
    e2ea:	4b2f      	ldr	r3, [pc, #188]	; (e3a8 <z_init_static_threads+0xe0>)
    e2ec:	429c      	cmp	r4, r3
    e2ee:	d218      	bcs.n	e322 <z_init_static_threads+0x5a>
		z_setup_new_thread(
    e2f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e2f2:	9305      	str	r3, [sp, #20]
    e2f4:	6a23      	ldr	r3, [r4, #32]
    e2f6:	9304      	str	r3, [sp, #16]
    e2f8:	69e3      	ldr	r3, [r4, #28]
    e2fa:	9303      	str	r3, [sp, #12]
    e2fc:	69a3      	ldr	r3, [r4, #24]
    e2fe:	9302      	str	r3, [sp, #8]
    e300:	6963      	ldr	r3, [r4, #20]
    e302:	9301      	str	r3, [sp, #4]
    e304:	6923      	ldr	r3, [r4, #16]
    e306:	9300      	str	r3, [sp, #0]
    e308:	68e3      	ldr	r3, [r4, #12]
    e30a:	68a2      	ldr	r2, [r4, #8]
    e30c:	6861      	ldr	r1, [r4, #4]
    e30e:	6820      	ldr	r0, [r4, #0]
    e310:	f7ff fef0 	bl	e0f4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    e314:	6823      	ldr	r3, [r4, #0]
    e316:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    e318:	3430      	adds	r4, #48	; 0x30
    e31a:	4b23      	ldr	r3, [pc, #140]	; (e3a8 <z_init_static_threads+0xe0>)
    e31c:	429c      	cmp	r4, r3
    e31e:	d9e4      	bls.n	e2ea <z_init_static_threads+0x22>
    e320:	e7d7      	b.n	e2d2 <z_init_static_threads+0xa>
	k_sched_lock();
    e322:	f000 fbe3 	bl	eaec <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    e326:	4c1d      	ldr	r4, [pc, #116]	; (e39c <z_init_static_threads+0xd4>)
    e328:	e01b      	b.n	e362 <z_init_static_threads+0x9a>
			schedule_new_thread(thread_data->init_thread,
    e32a:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    e32c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e330:	ea4f 79e3 	mov.w	r9, r3, asr #31
    e334:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    e338:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    e33c:	03d8      	lsls	r0, r3, #15
    e33e:	f240 35e7 	movw	r5, #999	; 0x3e7
    e342:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e346:	2300      	movs	r3, #0
    e348:	1940      	adds	r0, r0, r5
    e34a:	f04f 0500 	mov.w	r5, #0
    e34e:	eb45 0101 	adc.w	r1, r5, r1
    e352:	f7f2 fe3f 	bl	fd4 <__aeabi_uldivmod>
    e356:	4602      	mov	r2, r0
    e358:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    e35a:	4630      	mov	r0, r6
    e35c:	f7ff fe48 	bl	dff0 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    e360:	3430      	adds	r4, #48	; 0x30
    e362:	4b11      	ldr	r3, [pc, #68]	; (e3a8 <z_init_static_threads+0xe0>)
    e364:	429c      	cmp	r4, r3
    e366:	d807      	bhi.n	e378 <z_init_static_threads+0xb0>
    e368:	4b0f      	ldr	r3, [pc, #60]	; (e3a8 <z_init_static_threads+0xe0>)
    e36a:	429c      	cmp	r4, r3
    e36c:	d211      	bcs.n	e392 <z_init_static_threads+0xca>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    e36e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e370:	f1b3 3fff 	cmp.w	r3, #4294967295
    e374:	d0f4      	beq.n	e360 <z_init_static_threads+0x98>
    e376:	e7d8      	b.n	e32a <z_init_static_threads+0x62>
	_FOREACH_STATIC_THREAD(thread_data) {
    e378:	4d09      	ldr	r5, [pc, #36]	; (e3a0 <z_init_static_threads+0xd8>)
    e37a:	f240 22ee 	movw	r2, #750	; 0x2ee
    e37e:	4629      	mov	r1, r5
    e380:	4808      	ldr	r0, [pc, #32]	; (e3a4 <z_init_static_threads+0xdc>)
    e382:	f002 fe51 	bl	11028 <printk>
    e386:	f240 21ee 	movw	r1, #750	; 0x2ee
    e38a:	4628      	mov	r0, r5
    e38c:	f002 ff6e 	bl	1126c <assert_post_action>
    e390:	e7ea      	b.n	e368 <z_init_static_threads+0xa0>
	k_sched_unlock();
    e392:	f001 f84f 	bl	f434 <k_sched_unlock>
}
    e396:	b006      	add	sp, #24
    e398:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    e39c:	20000370 	.word	0x20000370
    e3a0:	0001722c 	.word	0x0001722c
    e3a4:	00015984 	.word	0x00015984
    e3a8:	20000370 	.word	0x20000370

0000e3ac <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    e3ac:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    e3ae:	4b12      	ldr	r3, [pc, #72]	; (e3f8 <idle+0x4c>)
    e3b0:	689b      	ldr	r3, [r3, #8]
    e3b2:	f993 300e 	ldrsb.w	r3, [r3, #14]
    e3b6:	2b00      	cmp	r3, #0
    e3b8:	da0c      	bge.n	e3d4 <idle+0x28>
    e3ba:	4c10      	ldr	r4, [pc, #64]	; (e3fc <idle+0x50>)
    e3bc:	2227      	movs	r2, #39	; 0x27
    e3be:	4621      	mov	r1, r4
    e3c0:	480f      	ldr	r0, [pc, #60]	; (e400 <idle+0x54>)
    e3c2:	f002 fe31 	bl	11028 <printk>
    e3c6:	2127      	movs	r1, #39	; 0x27
    e3c8:	4620      	mov	r0, r4
    e3ca:	f002 ff4f 	bl	1126c <assert_post_action>
    e3ce:	e001      	b.n	e3d4 <idle+0x28>
	arch_cpu_idle();
    e3d0:	f7f7 f8e2 	bl	5598 <arch_cpu_idle>
	__asm__ volatile(
    e3d4:	f04f 0220 	mov.w	r2, #32
    e3d8:	f3ef 8311 	mrs	r3, BASEPRI
    e3dc:	f382 8812 	msr	BASEPRI_MAX, r2
    e3e0:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    e3e4:	f001 fd1a 	bl	fe1c <z_get_next_timeout_expiry>
    e3e8:	4b03      	ldr	r3, [pc, #12]	; (e3f8 <idle+0x4c>)
    e3ea:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    e3ec:	f7f6 ffe8 	bl	53c0 <pm_system_suspend>
    e3f0:	2800      	cmp	r0, #0
    e3f2:	d1ef      	bne.n	e3d4 <idle+0x28>
    e3f4:	e7ec      	b.n	e3d0 <idle+0x24>
    e3f6:	bf00      	nop
    e3f8:	200015f8 	.word	0x200015f8
    e3fc:	00017250 	.word	0x00017250
    e400:	00015984 	.word	0x00015984

0000e404 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    e404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e408:	b083      	sub	sp, #12
    e40a:	4604      	mov	r4, r0
    e40c:	4616      	mov	r6, r2
    e40e:	461d      	mov	r5, r3
    e410:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    e414:	2900      	cmp	r1, #0
    e416:	d12a      	bne.n	e46e <z_impl_k_mutex_lock+0x6a>
    e418:	f04f 0320 	mov.w	r3, #32
    e41c:	f3ef 8711 	mrs	r7, BASEPRI
    e420:	f383 8812 	msr	BASEPRI_MAX, r3
    e424:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e428:	486c      	ldr	r0, [pc, #432]	; (e5dc <z_impl_k_mutex_lock+0x1d8>)
    e42a:	f7ff fdf3 	bl	e014 <z_spin_lock_valid>
    e42e:	b348      	cbz	r0, e484 <z_impl_k_mutex_lock+0x80>
	z_spin_lock_set_owner(l);
    e430:	486a      	ldr	r0, [pc, #424]	; (e5dc <z_impl_k_mutex_lock+0x1d8>)
    e432:	f7ff fe0f 	bl	e054 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    e436:	68e1      	ldr	r1, [r4, #12]
    e438:	2900      	cmp	r1, #0
    e43a:	d12f      	bne.n	e49c <z_impl_k_mutex_lock+0x98>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    e43c:	2900      	cmp	r1, #0
    e43e:	d174      	bne.n	e52a <z_impl_k_mutex_lock+0x126>
    e440:	4b67      	ldr	r3, [pc, #412]	; (e5e0 <z_impl_k_mutex_lock+0x1dc>)
    e442:	689b      	ldr	r3, [r3, #8]
    e444:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    e448:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    e44a:	3101      	adds	r1, #1
    e44c:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    e44e:	4b64      	ldr	r3, [pc, #400]	; (e5e0 <z_impl_k_mutex_lock+0x1dc>)
    e450:	689b      	ldr	r3, [r3, #8]
    e452:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e454:	4861      	ldr	r0, [pc, #388]	; (e5dc <z_impl_k_mutex_lock+0x1d8>)
    e456:	f7ff fded 	bl	e034 <z_spin_unlock_valid>
    e45a:	2800      	cmp	r0, #0
    e45c:	d067      	beq.n	e52e <z_impl_k_mutex_lock+0x12a>
	__asm__ volatile(
    e45e:	f387 8811 	msr	BASEPRI, r7
    e462:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    e466:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    e468:	b003      	add	sp, #12
    e46a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    e46e:	4f5d      	ldr	r7, [pc, #372]	; (e5e4 <z_impl_k_mutex_lock+0x1e0>)
    e470:	2265      	movs	r2, #101	; 0x65
    e472:	4639      	mov	r1, r7
    e474:	485c      	ldr	r0, [pc, #368]	; (e5e8 <z_impl_k_mutex_lock+0x1e4>)
    e476:	f002 fdd7 	bl	11028 <printk>
    e47a:	2165      	movs	r1, #101	; 0x65
    e47c:	4638      	mov	r0, r7
    e47e:	f002 fef5 	bl	1126c <assert_post_action>
    e482:	e7c9      	b.n	e418 <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e484:	f8df 8164 	ldr.w	r8, [pc, #356]	; e5ec <z_impl_k_mutex_lock+0x1e8>
    e488:	2281      	movs	r2, #129	; 0x81
    e48a:	4641      	mov	r1, r8
    e48c:	4856      	ldr	r0, [pc, #344]	; (e5e8 <z_impl_k_mutex_lock+0x1e4>)
    e48e:	f002 fdcb 	bl	11028 <printk>
    e492:	2181      	movs	r1, #129	; 0x81
    e494:	4640      	mov	r0, r8
    e496:	f002 fee9 	bl	1126c <assert_post_action>
    e49a:	e7c9      	b.n	e430 <z_impl_k_mutex_lock+0x2c>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    e49c:	68a2      	ldr	r2, [r4, #8]
    e49e:	4b50      	ldr	r3, [pc, #320]	; (e5e0 <z_impl_k_mutex_lock+0x1dc>)
    e4a0:	689b      	ldr	r3, [r3, #8]
    e4a2:	429a      	cmp	r2, r3
    e4a4:	d0ca      	beq.n	e43c <z_impl_k_mutex_lock+0x38>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    e4a6:	ea55 0106 	orrs.w	r1, r5, r6
    e4aa:	bf0c      	ite	eq
    e4ac:	f04f 0801 	moveq.w	r8, #1
    e4b0:	f04f 0800 	movne.w	r8, #0
    e4b4:	d046      	beq.n	e544 <z_impl_k_mutex_lock+0x140>
					    mutex->owner->base.prio);
    e4b6:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    e4ba:	4649      	mov	r1, r9
    e4bc:	f993 000e 	ldrsb.w	r0, [r3, #14]
    e4c0:	f006 fa1b 	bl	148fa <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    e4c4:	4581      	cmp	r9, r0
    e4c6:	dc53      	bgt.n	e570 <z_impl_k_mutex_lock+0x16c>
	bool resched = false;
    e4c8:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    e4cc:	9600      	str	r6, [sp, #0]
    e4ce:	9501      	str	r5, [sp, #4]
    e4d0:	4622      	mov	r2, r4
    e4d2:	4639      	mov	r1, r7
    e4d4:	4841      	ldr	r0, [pc, #260]	; (e5dc <z_impl_k_mutex_lock+0x1d8>)
    e4d6:	f000 fe7f 	bl	f1d8 <z_pend_curr>
	if (got_mutex == 0) {
    e4da:	2800      	cmp	r0, #0
    e4dc:	d0c4      	beq.n	e468 <z_impl_k_mutex_lock+0x64>
	__asm__ volatile(
    e4de:	f04f 0320 	mov.w	r3, #32
    e4e2:	f3ef 8511 	mrs	r5, BASEPRI
    e4e6:	f383 8812 	msr	BASEPRI_MAX, r3
    e4ea:	f3bf 8f6f 	isb	sy
    e4ee:	483b      	ldr	r0, [pc, #236]	; (e5dc <z_impl_k_mutex_lock+0x1d8>)
    e4f0:	f7ff fd90 	bl	e014 <z_spin_lock_valid>
    e4f4:	2800      	cmp	r0, #0
    e4f6:	d041      	beq.n	e57c <z_impl_k_mutex_lock+0x178>
	z_spin_lock_set_owner(l);
    e4f8:	4838      	ldr	r0, [pc, #224]	; (e5dc <z_impl_k_mutex_lock+0x1d8>)
    e4fa:	f7ff fdab 	bl	e054 <z_spin_lock_set_owner>
	return list->head == list;
    e4fe:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e500:	429c      	cmp	r4, r3
    e502:	d046      	beq.n	e592 <z_impl_k_mutex_lock+0x18e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    e504:	2b00      	cmp	r3, #0
    e506:	d044      	beq.n	e592 <z_impl_k_mutex_lock+0x18e>
    e508:	6921      	ldr	r1, [r4, #16]
    e50a:	f993 000e 	ldrsb.w	r0, [r3, #14]
    e50e:	f006 f9f4 	bl	148fa <new_prio_for_inheritance>
    e512:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    e514:	4620      	mov	r0, r4
    e516:	f006 f9fb 	bl	14910 <adjust_owner_prio>
    e51a:	2800      	cmp	r0, #0
    e51c:	d13b      	bne.n	e596 <z_impl_k_mutex_lock+0x192>
    e51e:	f1b9 0f00 	cmp.w	r9, #0
    e522:	d03a      	beq.n	e59a <z_impl_k_mutex_lock+0x196>
    e524:	f04f 0801 	mov.w	r8, #1
    e528:	e037      	b.n	e59a <z_impl_k_mutex_lock+0x196>
					_current->base.prio :
    e52a:	6923      	ldr	r3, [r4, #16]
    e52c:	e78c      	b.n	e448 <z_impl_k_mutex_lock+0x44>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e52e:	4c2f      	ldr	r4, [pc, #188]	; (e5ec <z_impl_k_mutex_lock+0x1e8>)
    e530:	22ac      	movs	r2, #172	; 0xac
    e532:	4621      	mov	r1, r4
    e534:	482c      	ldr	r0, [pc, #176]	; (e5e8 <z_impl_k_mutex_lock+0x1e4>)
    e536:	f002 fd77 	bl	11028 <printk>
    e53a:	21ac      	movs	r1, #172	; 0xac
    e53c:	4620      	mov	r0, r4
    e53e:	f002 fe95 	bl	1126c <assert_post_action>
    e542:	e78c      	b.n	e45e <z_impl_k_mutex_lock+0x5a>
    e544:	4825      	ldr	r0, [pc, #148]	; (e5dc <z_impl_k_mutex_lock+0x1d8>)
    e546:	f7ff fd75 	bl	e034 <z_spin_unlock_valid>
    e54a:	b130      	cbz	r0, e55a <z_impl_k_mutex_lock+0x156>
	__asm__ volatile(
    e54c:	f387 8811 	msr	BASEPRI, r7
    e550:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    e554:	f06f 000f 	mvn.w	r0, #15
    e558:	e786      	b.n	e468 <z_impl_k_mutex_lock+0x64>
    e55a:	4c24      	ldr	r4, [pc, #144]	; (e5ec <z_impl_k_mutex_lock+0x1e8>)
    e55c:	22ac      	movs	r2, #172	; 0xac
    e55e:	4621      	mov	r1, r4
    e560:	4821      	ldr	r0, [pc, #132]	; (e5e8 <z_impl_k_mutex_lock+0x1e4>)
    e562:	f002 fd61 	bl	11028 <printk>
    e566:	21ac      	movs	r1, #172	; 0xac
    e568:	4620      	mov	r0, r4
    e56a:	f002 fe7f 	bl	1126c <assert_post_action>
    e56e:	e7ed      	b.n	e54c <z_impl_k_mutex_lock+0x148>
		resched = adjust_owner_prio(mutex, new_prio);
    e570:	4601      	mov	r1, r0
    e572:	4620      	mov	r0, r4
    e574:	f006 f9cc 	bl	14910 <adjust_owner_prio>
    e578:	4681      	mov	r9, r0
    e57a:	e7a7      	b.n	e4cc <z_impl_k_mutex_lock+0xc8>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e57c:	4e1b      	ldr	r6, [pc, #108]	; (e5ec <z_impl_k_mutex_lock+0x1e8>)
    e57e:	2281      	movs	r2, #129	; 0x81
    e580:	4631      	mov	r1, r6
    e582:	4819      	ldr	r0, [pc, #100]	; (e5e8 <z_impl_k_mutex_lock+0x1e4>)
    e584:	f002 fd50 	bl	11028 <printk>
    e588:	2181      	movs	r1, #129	; 0x81
    e58a:	4630      	mov	r0, r6
    e58c:	f002 fe6e 	bl	1126c <assert_post_action>
    e590:	e7b2      	b.n	e4f8 <z_impl_k_mutex_lock+0xf4>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    e592:	6921      	ldr	r1, [r4, #16]
    e594:	e7be      	b.n	e514 <z_impl_k_mutex_lock+0x110>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    e596:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    e59a:	f1b8 0f00 	cmp.w	r8, #0
    e59e:	d006      	beq.n	e5ae <z_impl_k_mutex_lock+0x1aa>
		z_reschedule(&lock, key);
    e5a0:	4629      	mov	r1, r5
    e5a2:	480e      	ldr	r0, [pc, #56]	; (e5dc <z_impl_k_mutex_lock+0x1d8>)
    e5a4:	f000 fa66 	bl	ea74 <z_reschedule>
	return -EAGAIN;
    e5a8:	f06f 000a 	mvn.w	r0, #10
    e5ac:	e75c      	b.n	e468 <z_impl_k_mutex_lock+0x64>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e5ae:	480b      	ldr	r0, [pc, #44]	; (e5dc <z_impl_k_mutex_lock+0x1d8>)
    e5b0:	f7ff fd40 	bl	e034 <z_spin_unlock_valid>
    e5b4:	b130      	cbz	r0, e5c4 <z_impl_k_mutex_lock+0x1c0>
    e5b6:	f385 8811 	msr	BASEPRI, r5
    e5ba:	f3bf 8f6f 	isb	sy
    e5be:	f06f 000a 	mvn.w	r0, #10
    e5c2:	e751      	b.n	e468 <z_impl_k_mutex_lock+0x64>
    e5c4:	4c09      	ldr	r4, [pc, #36]	; (e5ec <z_impl_k_mutex_lock+0x1e8>)
    e5c6:	22ac      	movs	r2, #172	; 0xac
    e5c8:	4621      	mov	r1, r4
    e5ca:	4807      	ldr	r0, [pc, #28]	; (e5e8 <z_impl_k_mutex_lock+0x1e4>)
    e5cc:	f002 fd2c 	bl	11028 <printk>
    e5d0:	21ac      	movs	r1, #172	; 0xac
    e5d2:	4620      	mov	r0, r4
    e5d4:	f002 fe4a 	bl	1126c <assert_post_action>
    e5d8:	e7ed      	b.n	e5b6 <z_impl_k_mutex_lock+0x1b2>
    e5da:	bf00      	nop
    e5dc:	20001628 	.word	0x20001628
    e5e0:	200015f8 	.word	0x200015f8
    e5e4:	00017274 	.word	0x00017274
    e5e8:	00015984 	.word	0x00015984
    e5ec:	00015bc8 	.word	0x00015bc8

0000e5f0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    e5f0:	b570      	push	{r4, r5, r6, lr}
    e5f2:	4604      	mov	r4, r0
    e5f4:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    e5f8:	bb03      	cbnz	r3, e63c <z_impl_k_mutex_unlock+0x4c>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    e5fa:	68a3      	ldr	r3, [r4, #8]
    e5fc:	2b00      	cmp	r3, #0
    e5fe:	f000 808f 	beq.w	e720 <z_impl_k_mutex_unlock+0x130>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    e602:	4a4a      	ldr	r2, [pc, #296]	; (e72c <z_impl_k_mutex_unlock+0x13c>)
    e604:	6892      	ldr	r2, [r2, #8]
    e606:	4293      	cmp	r3, r2
    e608:	f040 808d 	bne.w	e726 <z_impl_k_mutex_unlock+0x136>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    e60c:	68e3      	ldr	r3, [r4, #12]
    e60e:	b303      	cbz	r3, e652 <z_impl_k_mutex_unlock+0x62>
    e610:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    e614:	bb43      	cbnz	r3, e668 <z_impl_k_mutex_unlock+0x78>
	__ASSERT(_current->base.sched_locked != 1U, "");
    e616:	4b45      	ldr	r3, [pc, #276]	; (e72c <z_impl_k_mutex_unlock+0x13c>)
    e618:	689b      	ldr	r3, [r3, #8]
    e61a:	7bdb      	ldrb	r3, [r3, #15]
    e61c:	2b01      	cmp	r3, #1
    e61e:	d02e      	beq.n	e67e <z_impl_k_mutex_unlock+0x8e>

	--_current->base.sched_locked;
    e620:	4b42      	ldr	r3, [pc, #264]	; (e72c <z_impl_k_mutex_unlock+0x13c>)
    e622:	689a      	ldr	r2, [r3, #8]
    e624:	7bd3      	ldrb	r3, [r2, #15]
    e626:	3b01      	subs	r3, #1
    e628:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    e62a:	68e3      	ldr	r3, [r4, #12]
    e62c:	2b01      	cmp	r3, #1
    e62e:	d931      	bls.n	e694 <z_impl_k_mutex_unlock+0xa4>
		mutex->lock_count--;
    e630:	3b01      	subs	r3, #1
    e632:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    e634:	f000 fefe 	bl	f434 <k_sched_unlock>

	return 0;
    e638:	2000      	movs	r0, #0
}
    e63a:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    e63c:	4d3c      	ldr	r5, [pc, #240]	; (e730 <z_impl_k_mutex_unlock+0x140>)
    e63e:	22c7      	movs	r2, #199	; 0xc7
    e640:	4629      	mov	r1, r5
    e642:	483c      	ldr	r0, [pc, #240]	; (e734 <z_impl_k_mutex_unlock+0x144>)
    e644:	f002 fcf0 	bl	11028 <printk>
    e648:	21c7      	movs	r1, #199	; 0xc7
    e64a:	4628      	mov	r0, r5
    e64c:	f002 fe0e 	bl	1126c <assert_post_action>
    e650:	e7d3      	b.n	e5fa <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    e652:	4d37      	ldr	r5, [pc, #220]	; (e730 <z_impl_k_mutex_unlock+0x140>)
    e654:	22df      	movs	r2, #223	; 0xdf
    e656:	4629      	mov	r1, r5
    e658:	4836      	ldr	r0, [pc, #216]	; (e734 <z_impl_k_mutex_unlock+0x144>)
    e65a:	f002 fce5 	bl	11028 <printk>
    e65e:	21df      	movs	r1, #223	; 0xdf
    e660:	4628      	mov	r0, r5
    e662:	f002 fe03 	bl	1126c <assert_post_action>
    e666:	e7d3      	b.n	e610 <z_impl_k_mutex_unlock+0x20>
	__ASSERT(!arch_is_in_isr(), "");
    e668:	4d33      	ldr	r5, [pc, #204]	; (e738 <z_impl_k_mutex_unlock+0x148>)
    e66a:	22fd      	movs	r2, #253	; 0xfd
    e66c:	4629      	mov	r1, r5
    e66e:	4831      	ldr	r0, [pc, #196]	; (e734 <z_impl_k_mutex_unlock+0x144>)
    e670:	f002 fcda 	bl	11028 <printk>
    e674:	21fd      	movs	r1, #253	; 0xfd
    e676:	4628      	mov	r0, r5
    e678:	f002 fdf8 	bl	1126c <assert_post_action>
    e67c:	e7cb      	b.n	e616 <z_impl_k_mutex_unlock+0x26>
	__ASSERT(_current->base.sched_locked != 1U, "");
    e67e:	4d2e      	ldr	r5, [pc, #184]	; (e738 <z_impl_k_mutex_unlock+0x148>)
    e680:	22fe      	movs	r2, #254	; 0xfe
    e682:	4629      	mov	r1, r5
    e684:	482b      	ldr	r0, [pc, #172]	; (e734 <z_impl_k_mutex_unlock+0x144>)
    e686:	f002 fccf 	bl	11028 <printk>
    e68a:	21fe      	movs	r1, #254	; 0xfe
    e68c:	4628      	mov	r0, r5
    e68e:	f002 fded 	bl	1126c <assert_post_action>
    e692:	e7c5      	b.n	e620 <z_impl_k_mutex_unlock+0x30>
	__asm__ volatile(
    e694:	f04f 0320 	mov.w	r3, #32
    e698:	f3ef 8511 	mrs	r5, BASEPRI
    e69c:	f383 8812 	msr	BASEPRI_MAX, r3
    e6a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e6a4:	4825      	ldr	r0, [pc, #148]	; (e73c <z_impl_k_mutex_unlock+0x14c>)
    e6a6:	f7ff fcb5 	bl	e014 <z_spin_lock_valid>
    e6aa:	b1c0      	cbz	r0, e6de <z_impl_k_mutex_unlock+0xee>
	z_spin_lock_set_owner(l);
    e6ac:	4823      	ldr	r0, [pc, #140]	; (e73c <z_impl_k_mutex_unlock+0x14c>)
    e6ae:	f7ff fcd1 	bl	e054 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    e6b2:	6921      	ldr	r1, [r4, #16]
    e6b4:	4620      	mov	r0, r4
    e6b6:	f006 f92b 	bl	14910 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    e6ba:	4620      	mov	r0, r4
    e6bc:	f000 ffca 	bl	f654 <z_unpend_first_thread>
	mutex->owner = new_owner;
    e6c0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    e6c2:	b1b8      	cbz	r0, e6f4 <z_impl_k_mutex_unlock+0x104>
		mutex->owner_orig_prio = new_owner->base.prio;
    e6c4:	f990 300e 	ldrsb.w	r3, [r0, #14]
    e6c8:	6123      	str	r3, [r4, #16]
    e6ca:	2300      	movs	r3, #0
    e6cc:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    e6d0:	f000 fbf6 	bl	eec0 <z_ready_thread>
		z_reschedule(&lock, key);
    e6d4:	4629      	mov	r1, r5
    e6d6:	4819      	ldr	r0, [pc, #100]	; (e73c <z_impl_k_mutex_unlock+0x14c>)
    e6d8:	f000 f9cc 	bl	ea74 <z_reschedule>
    e6dc:	e7aa      	b.n	e634 <z_impl_k_mutex_unlock+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e6de:	4e18      	ldr	r6, [pc, #96]	; (e740 <z_impl_k_mutex_unlock+0x150>)
    e6e0:	2281      	movs	r2, #129	; 0x81
    e6e2:	4631      	mov	r1, r6
    e6e4:	4813      	ldr	r0, [pc, #76]	; (e734 <z_impl_k_mutex_unlock+0x144>)
    e6e6:	f002 fc9f 	bl	11028 <printk>
    e6ea:	2181      	movs	r1, #129	; 0x81
    e6ec:	4630      	mov	r0, r6
    e6ee:	f002 fdbd 	bl	1126c <assert_post_action>
    e6f2:	e7db      	b.n	e6ac <z_impl_k_mutex_unlock+0xbc>
		mutex->lock_count = 0U;
    e6f4:	2300      	movs	r3, #0
    e6f6:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e6f8:	4810      	ldr	r0, [pc, #64]	; (e73c <z_impl_k_mutex_unlock+0x14c>)
    e6fa:	f7ff fc9b 	bl	e034 <z_spin_unlock_valid>
    e6fe:	b120      	cbz	r0, e70a <z_impl_k_mutex_unlock+0x11a>
	__asm__ volatile(
    e700:	f385 8811 	msr	BASEPRI, r5
    e704:	f3bf 8f6f 	isb	sy
    e708:	e794      	b.n	e634 <z_impl_k_mutex_unlock+0x44>
    e70a:	4c0d      	ldr	r4, [pc, #52]	; (e740 <z_impl_k_mutex_unlock+0x150>)
    e70c:	22ac      	movs	r2, #172	; 0xac
    e70e:	4621      	mov	r1, r4
    e710:	4808      	ldr	r0, [pc, #32]	; (e734 <z_impl_k_mutex_unlock+0x144>)
    e712:	f002 fc89 	bl	11028 <printk>
    e716:	21ac      	movs	r1, #172	; 0xac
    e718:	4620      	mov	r0, r4
    e71a:	f002 fda7 	bl	1126c <assert_post_action>
    e71e:	e7ef      	b.n	e700 <z_impl_k_mutex_unlock+0x110>
		return -EINVAL;
    e720:	f06f 0015 	mvn.w	r0, #21
    e724:	e789      	b.n	e63a <z_impl_k_mutex_unlock+0x4a>
		return -EPERM;
    e726:	f04f 30ff 	mov.w	r0, #4294967295
    e72a:	e786      	b.n	e63a <z_impl_k_mutex_unlock+0x4a>
    e72c:	200015f8 	.word	0x200015f8
    e730:	00017274 	.word	0x00017274
    e734:	00015984 	.word	0x00015984
    e738:	00017298 	.word	0x00017298
    e73c:	20001628 	.word	0x20001628
    e740:	00015bc8 	.word	0x00015bc8

0000e744 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    e744:	b570      	push	{r4, r5, r6, lr}
    e746:	4604      	mov	r4, r0
	__asm__ volatile(
    e748:	f04f 0320 	mov.w	r3, #32
    e74c:	f3ef 8511 	mrs	r5, BASEPRI
    e750:	f383 8812 	msr	BASEPRI_MAX, r3
    e754:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e758:	4814      	ldr	r0, [pc, #80]	; (e7ac <z_impl_k_sem_give+0x68>)
    e75a:	f7ff fc5b 	bl	e014 <z_spin_lock_valid>
    e75e:	b180      	cbz	r0, e782 <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
    e760:	4812      	ldr	r0, [pc, #72]	; (e7ac <z_impl_k_sem_give+0x68>)
    e762:	f7ff fc77 	bl	e054 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    e766:	4620      	mov	r0, r4
    e768:	f000 ff74 	bl	f654 <z_unpend_first_thread>

	if (thread != NULL) {
    e76c:	b1a0      	cbz	r0, e798 <z_impl_k_sem_give+0x54>
    e76e:	2200      	movs	r2, #0
    e770:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    e774:	f000 fba4 	bl	eec0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    e778:	4629      	mov	r1, r5
    e77a:	480c      	ldr	r0, [pc, #48]	; (e7ac <z_impl_k_sem_give+0x68>)
    e77c:	f000 f97a 	bl	ea74 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    e780:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e782:	4e0b      	ldr	r6, [pc, #44]	; (e7b0 <z_impl_k_sem_give+0x6c>)
    e784:	2281      	movs	r2, #129	; 0x81
    e786:	4631      	mov	r1, r6
    e788:	480a      	ldr	r0, [pc, #40]	; (e7b4 <z_impl_k_sem_give+0x70>)
    e78a:	f002 fc4d 	bl	11028 <printk>
    e78e:	2181      	movs	r1, #129	; 0x81
    e790:	4630      	mov	r0, r6
    e792:	f002 fd6b 	bl	1126c <assert_post_action>
    e796:	e7e3      	b.n	e760 <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    e798:	68a3      	ldr	r3, [r4, #8]
    e79a:	68e2      	ldr	r2, [r4, #12]
    e79c:	4293      	cmp	r3, r2
    e79e:	d003      	beq.n	e7a8 <z_impl_k_sem_give+0x64>
    e7a0:	2201      	movs	r2, #1
    e7a2:	4413      	add	r3, r2
    e7a4:	60a3      	str	r3, [r4, #8]
}
    e7a6:	e7e7      	b.n	e778 <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    e7a8:	2200      	movs	r2, #0
    e7aa:	e7fa      	b.n	e7a2 <z_impl_k_sem_give+0x5e>
    e7ac:	2000162c 	.word	0x2000162c
    e7b0:	00015bc8 	.word	0x00015bc8
    e7b4:	00015984 	.word	0x00015984

0000e7b8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    e7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e7bc:	b082      	sub	sp, #8
    e7be:	4604      	mov	r4, r0
    e7c0:	4616      	mov	r6, r2
    e7c2:	461f      	mov	r7, r3
    e7c4:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    e7c8:	b113      	cbz	r3, e7d0 <z_impl_k_sem_take+0x18>
    e7ca:	ea56 0307 	orrs.w	r3, r6, r7
    e7ce:	d11e      	bne.n	e80e <z_impl_k_sem_take+0x56>
    e7d0:	f04f 0320 	mov.w	r3, #32
    e7d4:	f3ef 8511 	mrs	r5, BASEPRI
    e7d8:	f383 8812 	msr	BASEPRI_MAX, r3
    e7dc:	f3bf 8f6f 	isb	sy
    e7e0:	482c      	ldr	r0, [pc, #176]	; (e894 <z_impl_k_sem_take+0xdc>)
    e7e2:	f7ff fc17 	bl	e014 <z_spin_lock_valid>
    e7e6:	b1e8      	cbz	r0, e824 <z_impl_k_sem_take+0x6c>
	z_spin_lock_set_owner(l);
    e7e8:	482a      	ldr	r0, [pc, #168]	; (e894 <z_impl_k_sem_take+0xdc>)
    e7ea:	f7ff fc33 	bl	e054 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    e7ee:	68a3      	ldr	r3, [r4, #8]
    e7f0:	b37b      	cbz	r3, e852 <z_impl_k_sem_take+0x9a>
		sem->count--;
    e7f2:	3b01      	subs	r3, #1
    e7f4:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e7f6:	4827      	ldr	r0, [pc, #156]	; (e894 <z_impl_k_sem_take+0xdc>)
    e7f8:	f7ff fc1c 	bl	e034 <z_spin_unlock_valid>
    e7fc:	b1f0      	cbz	r0, e83c <z_impl_k_sem_take+0x84>
	__asm__ volatile(
    e7fe:	f385 8811 	msr	BASEPRI, r5
    e802:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    e806:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    e808:	b002      	add	sp, #8
    e80a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
    e80e:	4d22      	ldr	r5, [pc, #136]	; (e898 <z_impl_k_sem_take+0xe0>)
    e810:	2279      	movs	r2, #121	; 0x79
    e812:	4629      	mov	r1, r5
    e814:	4821      	ldr	r0, [pc, #132]	; (e89c <z_impl_k_sem_take+0xe4>)
    e816:	f002 fc07 	bl	11028 <printk>
    e81a:	2179      	movs	r1, #121	; 0x79
    e81c:	4628      	mov	r0, r5
    e81e:	f002 fd25 	bl	1126c <assert_post_action>
    e822:	e7d5      	b.n	e7d0 <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e824:	f8df 8078 	ldr.w	r8, [pc, #120]	; e8a0 <z_impl_k_sem_take+0xe8>
    e828:	2281      	movs	r2, #129	; 0x81
    e82a:	4641      	mov	r1, r8
    e82c:	481b      	ldr	r0, [pc, #108]	; (e89c <z_impl_k_sem_take+0xe4>)
    e82e:	f002 fbfb 	bl	11028 <printk>
    e832:	2181      	movs	r1, #129	; 0x81
    e834:	4640      	mov	r0, r8
    e836:	f002 fd19 	bl	1126c <assert_post_action>
    e83a:	e7d5      	b.n	e7e8 <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e83c:	4c18      	ldr	r4, [pc, #96]	; (e8a0 <z_impl_k_sem_take+0xe8>)
    e83e:	22ac      	movs	r2, #172	; 0xac
    e840:	4621      	mov	r1, r4
    e842:	4816      	ldr	r0, [pc, #88]	; (e89c <z_impl_k_sem_take+0xe4>)
    e844:	f002 fbf0 	bl	11028 <printk>
    e848:	21ac      	movs	r1, #172	; 0xac
    e84a:	4620      	mov	r0, r4
    e84c:	f002 fd0e 	bl	1126c <assert_post_action>
    e850:	e7d5      	b.n	e7fe <z_impl_k_sem_take+0x46>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    e852:	ea56 0307 	orrs.w	r3, r6, r7
    e856:	d007      	beq.n	e868 <z_impl_k_sem_take+0xb0>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    e858:	e9cd 6700 	strd	r6, r7, [sp]
    e85c:	4622      	mov	r2, r4
    e85e:	4629      	mov	r1, r5
    e860:	480c      	ldr	r0, [pc, #48]	; (e894 <z_impl_k_sem_take+0xdc>)
    e862:	f000 fcb9 	bl	f1d8 <z_pend_curr>
	return ret;
    e866:	e7cf      	b.n	e808 <z_impl_k_sem_take+0x50>
    e868:	480a      	ldr	r0, [pc, #40]	; (e894 <z_impl_k_sem_take+0xdc>)
    e86a:	f7ff fbe3 	bl	e034 <z_spin_unlock_valid>
    e86e:	b130      	cbz	r0, e87e <z_impl_k_sem_take+0xc6>
    e870:	f385 8811 	msr	BASEPRI, r5
    e874:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    e878:	f06f 000f 	mvn.w	r0, #15
    e87c:	e7c4      	b.n	e808 <z_impl_k_sem_take+0x50>
    e87e:	4c08      	ldr	r4, [pc, #32]	; (e8a0 <z_impl_k_sem_take+0xe8>)
    e880:	22ac      	movs	r2, #172	; 0xac
    e882:	4621      	mov	r1, r4
    e884:	4805      	ldr	r0, [pc, #20]	; (e89c <z_impl_k_sem_take+0xe4>)
    e886:	f002 fbcf 	bl	11028 <printk>
    e88a:	21ac      	movs	r1, #172	; 0xac
    e88c:	4620      	mov	r0, r4
    e88e:	f002 fced 	bl	1126c <assert_post_action>
    e892:	e7ed      	b.n	e870 <z_impl_k_sem_take+0xb8>
    e894:	2000162c 	.word	0x2000162c
    e898:	000172c4 	.word	0x000172c4
    e89c:	00015984 	.word	0x00015984
    e8a0:	00015bc8 	.word	0x00015bc8

0000e8a4 <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
    e8a4:	b538      	push	{r3, r4, r5, lr}
    e8a6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    e8a8:	6883      	ldr	r3, [r0, #8]
    e8aa:	b10b      	cbz	r3, e8b0 <pended_on_thread+0xc>

	return thread->base.pended_on;
}
    e8ac:	68a0      	ldr	r0, [r4, #8]
    e8ae:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
    e8b0:	4d06      	ldr	r5, [pc, #24]	; (e8cc <pended_on_thread+0x28>)
    e8b2:	f240 2283 	movw	r2, #643	; 0x283
    e8b6:	4629      	mov	r1, r5
    e8b8:	4805      	ldr	r0, [pc, #20]	; (e8d0 <pended_on_thread+0x2c>)
    e8ba:	f002 fbb5 	bl	11028 <printk>
    e8be:	f240 2183 	movw	r1, #643	; 0x283
    e8c2:	4628      	mov	r0, r5
    e8c4:	f002 fcd2 	bl	1126c <assert_post_action>
    e8c8:	e7f0      	b.n	e8ac <pended_on_thread+0x8>
    e8ca:	bf00      	nop
    e8cc:	000172e4 	.word	0x000172e4
    e8d0:	00015984 	.word	0x00015984

0000e8d4 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    e8d4:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
    e8da:	bf08      	it	eq
    e8dc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    e8e0:	d100      	bne.n	e8e4 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
    e8e2:	bd38      	pop	{r3, r4, r5, pc}
    e8e4:	4902      	ldr	r1, [pc, #8]	; (e8f0 <add_thread_timeout+0x1c>)
    e8e6:	3018      	adds	r0, #24
    e8e8:	f001 f96c 	bl	fbc4 <z_add_timeout>
    e8ec:	e7f9      	b.n	e8e2 <add_thread_timeout+0xe>
    e8ee:	bf00      	nop
    e8f0:	0000efd5 	.word	0x0000efd5

0000e8f4 <z_reset_time_slice>:
{
    e8f4:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    e8f6:	4b08      	ldr	r3, [pc, #32]	; (e918 <z_reset_time_slice+0x24>)
    e8f8:	681b      	ldr	r3, [r3, #0]
    e8fa:	b903      	cbnz	r3, e8fe <z_reset_time_slice+0xa>
}
    e8fc:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    e8fe:	f7fa fd15 	bl	932c <sys_clock_elapsed>
    e902:	4603      	mov	r3, r0
    e904:	4a04      	ldr	r2, [pc, #16]	; (e918 <z_reset_time_slice+0x24>)
    e906:	6810      	ldr	r0, [r2, #0]
    e908:	4403      	add	r3, r0
    e90a:	4a04      	ldr	r2, [pc, #16]	; (e91c <z_reset_time_slice+0x28>)
    e90c:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    e90e:	2100      	movs	r1, #0
    e910:	f001 fac4 	bl	fe9c <z_set_timeout_expiry>
}
    e914:	e7f2      	b.n	e8fc <z_reset_time_slice+0x8>
    e916:	bf00      	nop
    e918:	2000163c 	.word	0x2000163c
    e91c:	200015f8 	.word	0x200015f8

0000e920 <k_sched_time_slice_set>:
{
    e920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e924:	4606      	mov	r6, r0
    e926:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    e928:	2400      	movs	r4, #0
	__asm__ volatile(
    e92a:	f04f 0320 	mov.w	r3, #32
    e92e:	f3ef 8711 	mrs	r7, BASEPRI
    e932:	f383 8812 	msr	BASEPRI_MAX, r3
    e936:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e93a:	4824      	ldr	r0, [pc, #144]	; (e9cc <k_sched_time_slice_set+0xac>)
    e93c:	f7ff fb6a 	bl	e014 <z_spin_lock_valid>
    e940:	b118      	cbz	r0, e94a <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
    e942:	4822      	ldr	r0, [pc, #136]	; (e9cc <k_sched_time_slice_set+0xac>)
    e944:	f7ff fb86 	bl	e054 <z_spin_lock_set_owner>
	return k;
    e948:	e018      	b.n	e97c <k_sched_time_slice_set+0x5c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e94a:	4d21      	ldr	r5, [pc, #132]	; (e9d0 <k_sched_time_slice_set+0xb0>)
    e94c:	2281      	movs	r2, #129	; 0x81
    e94e:	4629      	mov	r1, r5
    e950:	4820      	ldr	r0, [pc, #128]	; (e9d4 <k_sched_time_slice_set+0xb4>)
    e952:	f002 fb69 	bl	11028 <printk>
    e956:	2181      	movs	r1, #129	; 0x81
    e958:	4628      	mov	r0, r5
    e95a:	f002 fc87 	bl	1126c <assert_post_action>
    e95e:	e7f0      	b.n	e942 <k_sched_time_slice_set+0x22>
		slice_max_prio = prio;
    e960:	4b1d      	ldr	r3, [pc, #116]	; (e9d8 <k_sched_time_slice_set+0xb8>)
    e962:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
    e966:	f7ff ffc5 	bl	e8f4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e96a:	4818      	ldr	r0, [pc, #96]	; (e9cc <k_sched_time_slice_set+0xac>)
    e96c:	f7ff fb62 	bl	e034 <z_spin_unlock_valid>
    e970:	b1f8      	cbz	r0, e9b2 <k_sched_time_slice_set+0x92>
	__asm__ volatile(
    e972:	f387 8811 	msr	BASEPRI, r7
    e976:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e97a:	2401      	movs	r4, #1
    e97c:	bb24      	cbnz	r4, e9c8 <k_sched_time_slice_set+0xa8>
		_current_cpu->slice_ticks = 0;
    e97e:	2300      	movs	r3, #0
    e980:	4a16      	ldr	r2, [pc, #88]	; (e9dc <k_sched_time_slice_set+0xbc>)
    e982:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    e984:	0c75      	lsrs	r5, r6, #17
    e986:	03f4      	lsls	r4, r6, #15
    e988:	f240 30e7 	movw	r0, #999	; 0x3e7
    e98c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e990:	2300      	movs	r3, #0
    e992:	1820      	adds	r0, r4, r0
    e994:	f04f 0100 	mov.w	r1, #0
    e998:	eb45 0101 	adc.w	r1, r5, r1
    e99c:	f7f2 fb1a 	bl	fd4 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    e9a0:	4b0f      	ldr	r3, [pc, #60]	; (e9e0 <k_sched_time_slice_set+0xc0>)
    e9a2:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    e9a4:	2e00      	cmp	r6, #0
    e9a6:	dddb      	ble.n	e960 <k_sched_time_slice_set+0x40>
			slice_time = MAX(2, slice_time);
    e9a8:	2802      	cmp	r0, #2
    e9aa:	bfb8      	it	lt
    e9ac:	2002      	movlt	r0, #2
    e9ae:	6018      	str	r0, [r3, #0]
    e9b0:	e7d6      	b.n	e960 <k_sched_time_slice_set+0x40>
    e9b2:	4c07      	ldr	r4, [pc, #28]	; (e9d0 <k_sched_time_slice_set+0xb0>)
    e9b4:	22ac      	movs	r2, #172	; 0xac
    e9b6:	4621      	mov	r1, r4
    e9b8:	4806      	ldr	r0, [pc, #24]	; (e9d4 <k_sched_time_slice_set+0xb4>)
    e9ba:	f002 fb35 	bl	11028 <printk>
    e9be:	21ac      	movs	r1, #172	; 0xac
    e9c0:	4620      	mov	r0, r4
    e9c2:	f002 fc53 	bl	1126c <assert_post_action>
    e9c6:	e7d4      	b.n	e972 <k_sched_time_slice_set+0x52>
}
    e9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e9cc:	20001634 	.word	0x20001634
    e9d0:	00015bc8 	.word	0x00015bc8
    e9d4:	00015984 	.word	0x00015984
    e9d8:	20001638 	.word	0x20001638
    e9dc:	200015f8 	.word	0x200015f8
    e9e0:	2000163c 	.word	0x2000163c

0000e9e4 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    e9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e9e6:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    e9e8:	2500      	movs	r5, #0
	__asm__ volatile(
    e9ea:	f04f 0320 	mov.w	r3, #32
    e9ee:	f3ef 8611 	mrs	r6, BASEPRI
    e9f2:	f383 8812 	msr	BASEPRI_MAX, r3
    e9f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e9fa:	481b      	ldr	r0, [pc, #108]	; (ea68 <z_unpend_thread_no_timeout+0x84>)
    e9fc:	f7ff fb0a 	bl	e014 <z_spin_lock_valid>
    ea00:	b118      	cbz	r0, ea0a <z_unpend_thread_no_timeout+0x26>
	z_spin_lock_set_owner(l);
    ea02:	4819      	ldr	r0, [pc, #100]	; (ea68 <z_unpend_thread_no_timeout+0x84>)
    ea04:	f7ff fb26 	bl	e054 <z_spin_lock_set_owner>
	return k;
    ea08:	e019      	b.n	ea3e <z_unpend_thread_no_timeout+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ea0a:	4f18      	ldr	r7, [pc, #96]	; (ea6c <z_unpend_thread_no_timeout+0x88>)
    ea0c:	2281      	movs	r2, #129	; 0x81
    ea0e:	4639      	mov	r1, r7
    ea10:	4817      	ldr	r0, [pc, #92]	; (ea70 <z_unpend_thread_no_timeout+0x8c>)
    ea12:	f002 fb09 	bl	11028 <printk>
    ea16:	2181      	movs	r1, #129	; 0x81
    ea18:	4638      	mov	r0, r7
    ea1a:	f002 fc27 	bl	1126c <assert_post_action>
    ea1e:	e7f0      	b.n	ea02 <z_unpend_thread_no_timeout+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ea20:	4d12      	ldr	r5, [pc, #72]	; (ea6c <z_unpend_thread_no_timeout+0x88>)
    ea22:	22ac      	movs	r2, #172	; 0xac
    ea24:	4629      	mov	r1, r5
    ea26:	4812      	ldr	r0, [pc, #72]	; (ea70 <z_unpend_thread_no_timeout+0x8c>)
    ea28:	f002 fafe 	bl	11028 <printk>
    ea2c:	21ac      	movs	r1, #172	; 0xac
    ea2e:	4628      	mov	r0, r5
    ea30:	f002 fc1c 	bl	1126c <assert_post_action>
	__asm__ volatile(
    ea34:	f386 8811 	msr	BASEPRI, r6
    ea38:	f3bf 8f6f 	isb	sy
    ea3c:	2501      	movs	r5, #1
    ea3e:	b98d      	cbnz	r5, ea64 <z_unpend_thread_no_timeout+0x80>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    ea40:	4620      	mov	r0, r4
    ea42:	f7ff ff2f 	bl	e8a4 <pended_on_thread>
    ea46:	4621      	mov	r1, r4
    ea48:	f000 f8b2 	bl	ebb0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    ea4c:	7b63      	ldrb	r3, [r4, #13]
    ea4e:	f023 0302 	bic.w	r3, r3, #2
    ea52:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    ea54:	2300      	movs	r3, #0
    ea56:	60a3      	str	r3, [r4, #8]
    ea58:	4803      	ldr	r0, [pc, #12]	; (ea68 <z_unpend_thread_no_timeout+0x84>)
    ea5a:	f7ff faeb 	bl	e034 <z_spin_unlock_valid>
    ea5e:	2800      	cmp	r0, #0
    ea60:	d1e8      	bne.n	ea34 <z_unpend_thread_no_timeout+0x50>
    ea62:	e7dd      	b.n	ea20 <z_unpend_thread_no_timeout+0x3c>
		unpend_thread_no_timeout(thread);
	}
}
    ea64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ea66:	bf00      	nop
    ea68:	20001634 	.word	0x20001634
    ea6c:	00015bc8 	.word	0x00015bc8
    ea70:	00015984 	.word	0x00015984

0000ea74 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    ea74:	b538      	push	{r3, r4, r5, lr}
	if (resched(key.key) && need_swap()) {
    ea76:	460c      	mov	r4, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    ea78:	b921      	cbnz	r1, ea84 <z_reschedule+0x10>
    ea7a:	f3ef 8305 	mrs	r3, IPSR
    ea7e:	b913      	cbnz	r3, ea86 <z_reschedule+0x12>
    ea80:	2101      	movs	r1, #1
    ea82:	e000      	b.n	ea86 <z_reschedule+0x12>
    ea84:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    ea86:	f011 0f01 	tst.w	r1, #1
    ea8a:	d016      	beq.n	eaba <z_reschedule+0x46>
	new_thread = _kernel.ready_q.cache;
    ea8c:	4b14      	ldr	r3, [pc, #80]	; (eae0 <z_reschedule+0x6c>)
    ea8e:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    ea90:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    ea92:	429a      	cmp	r2, r3
    ea94:	d011      	beq.n	eaba <z_reschedule+0x46>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ea96:	f7ff facd 	bl	e034 <z_spin_unlock_valid>
    ea9a:	b118      	cbz	r0, eaa4 <z_reschedule+0x30>
	ret = arch_swap(key);
    ea9c:	4620      	mov	r0, r4
    ea9e:	f7f6 fe6d 	bl	577c <arch_swap>
		z_swap(lock, key);
    eaa2:	e011      	b.n	eac8 <z_reschedule+0x54>
    eaa4:	4d0f      	ldr	r5, [pc, #60]	; (eae4 <z_reschedule+0x70>)
    eaa6:	22c3      	movs	r2, #195	; 0xc3
    eaa8:	4629      	mov	r1, r5
    eaaa:	480f      	ldr	r0, [pc, #60]	; (eae8 <z_reschedule+0x74>)
    eaac:	f002 fabc 	bl	11028 <printk>
    eab0:	21c3      	movs	r1, #195	; 0xc3
    eab2:	4628      	mov	r0, r5
    eab4:	f002 fbda 	bl	1126c <assert_post_action>
    eab8:	e7f0      	b.n	ea9c <z_reschedule+0x28>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    eaba:	f7ff fabb 	bl	e034 <z_spin_unlock_valid>
    eabe:	b120      	cbz	r0, eaca <z_reschedule+0x56>
    eac0:	f384 8811 	msr	BASEPRI, r4
    eac4:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    eac8:	bd38      	pop	{r3, r4, r5, pc}
    eaca:	4d06      	ldr	r5, [pc, #24]	; (eae4 <z_reschedule+0x70>)
    eacc:	22ac      	movs	r2, #172	; 0xac
    eace:	4629      	mov	r1, r5
    ead0:	4805      	ldr	r0, [pc, #20]	; (eae8 <z_reschedule+0x74>)
    ead2:	f002 faa9 	bl	11028 <printk>
    ead6:	21ac      	movs	r1, #172	; 0xac
    ead8:	4628      	mov	r0, r5
    eada:	f002 fbc7 	bl	1126c <assert_post_action>
    eade:	e7ef      	b.n	eac0 <z_reschedule+0x4c>
    eae0:	200015f8 	.word	0x200015f8
    eae4:	00015bc8 	.word	0x00015bc8
    eae8:	00015984 	.word	0x00015984

0000eaec <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    eaec:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    eaee:	2400      	movs	r4, #0
	__asm__ volatile(
    eaf0:	f04f 0320 	mov.w	r3, #32
    eaf4:	f3ef 8511 	mrs	r5, BASEPRI
    eaf8:	f383 8812 	msr	BASEPRI_MAX, r3
    eafc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    eb00:	4826      	ldr	r0, [pc, #152]	; (eb9c <k_sched_lock+0xb0>)
    eb02:	f7ff fa87 	bl	e014 <z_spin_lock_valid>
    eb06:	b118      	cbz	r0, eb10 <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
    eb08:	4824      	ldr	r0, [pc, #144]	; (eb9c <k_sched_lock+0xb0>)
    eb0a:	f7ff faa3 	bl	e054 <z_spin_lock_set_owner>
	return k;
    eb0e:	e02f      	b.n	eb70 <k_sched_lock+0x84>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    eb10:	4e23      	ldr	r6, [pc, #140]	; (eba0 <k_sched_lock+0xb4>)
    eb12:	2281      	movs	r2, #129	; 0x81
    eb14:	4631      	mov	r1, r6
    eb16:	4823      	ldr	r0, [pc, #140]	; (eba4 <k_sched_lock+0xb8>)
    eb18:	f002 fa86 	bl	11028 <printk>
    eb1c:	2181      	movs	r1, #129	; 0x81
    eb1e:	4630      	mov	r0, r6
    eb20:	f002 fba4 	bl	1126c <assert_post_action>
    eb24:	e7f0      	b.n	eb08 <k_sched_lock+0x1c>
	__ASSERT(!arch_is_in_isr(), "");
    eb26:	4c20      	ldr	r4, [pc, #128]	; (eba8 <k_sched_lock+0xbc>)
    eb28:	22fd      	movs	r2, #253	; 0xfd
    eb2a:	4621      	mov	r1, r4
    eb2c:	481d      	ldr	r0, [pc, #116]	; (eba4 <k_sched_lock+0xb8>)
    eb2e:	f002 fa7b 	bl	11028 <printk>
    eb32:	21fd      	movs	r1, #253	; 0xfd
    eb34:	4620      	mov	r0, r4
    eb36:	f002 fb99 	bl	1126c <assert_post_action>
    eb3a:	e01e      	b.n	eb7a <k_sched_lock+0x8e>
	__ASSERT(_current->base.sched_locked != 1U, "");
    eb3c:	4c1a      	ldr	r4, [pc, #104]	; (eba8 <k_sched_lock+0xbc>)
    eb3e:	22fe      	movs	r2, #254	; 0xfe
    eb40:	4621      	mov	r1, r4
    eb42:	4818      	ldr	r0, [pc, #96]	; (eba4 <k_sched_lock+0xb8>)
    eb44:	f002 fa70 	bl	11028 <printk>
    eb48:	21fe      	movs	r1, #254	; 0xfe
    eb4a:	4620      	mov	r0, r4
    eb4c:	f002 fb8e 	bl	1126c <assert_post_action>
    eb50:	e018      	b.n	eb84 <k_sched_lock+0x98>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    eb52:	4c13      	ldr	r4, [pc, #76]	; (eba0 <k_sched_lock+0xb4>)
    eb54:	22ac      	movs	r2, #172	; 0xac
    eb56:	4621      	mov	r1, r4
    eb58:	4812      	ldr	r0, [pc, #72]	; (eba4 <k_sched_lock+0xb8>)
    eb5a:	f002 fa65 	bl	11028 <printk>
    eb5e:	21ac      	movs	r1, #172	; 0xac
    eb60:	4620      	mov	r0, r4
    eb62:	f002 fb83 	bl	1126c <assert_post_action>
	__asm__ volatile(
    eb66:	f385 8811 	msr	BASEPRI, r5
    eb6a:	f3bf 8f6f 	isb	sy
    eb6e:	2401      	movs	r4, #1
    eb70:	b99c      	cbnz	r4, eb9a <k_sched_lock+0xae>
    eb72:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    eb76:	2b00      	cmp	r3, #0
    eb78:	d1d5      	bne.n	eb26 <k_sched_lock+0x3a>
	__ASSERT(_current->base.sched_locked != 1U, "");
    eb7a:	4b0c      	ldr	r3, [pc, #48]	; (ebac <k_sched_lock+0xc0>)
    eb7c:	689b      	ldr	r3, [r3, #8]
    eb7e:	7bdb      	ldrb	r3, [r3, #15]
    eb80:	2b01      	cmp	r3, #1
    eb82:	d0db      	beq.n	eb3c <k_sched_lock+0x50>
	--_current->base.sched_locked;
    eb84:	4b09      	ldr	r3, [pc, #36]	; (ebac <k_sched_lock+0xc0>)
    eb86:	689a      	ldr	r2, [r3, #8]
    eb88:	7bd3      	ldrb	r3, [r2, #15]
    eb8a:	3b01      	subs	r3, #1
    eb8c:	73d3      	strb	r3, [r2, #15]
    eb8e:	4803      	ldr	r0, [pc, #12]	; (eb9c <k_sched_lock+0xb0>)
    eb90:	f7ff fa50 	bl	e034 <z_spin_unlock_valid>
    eb94:	2800      	cmp	r0, #0
    eb96:	d1e6      	bne.n	eb66 <k_sched_lock+0x7a>
    eb98:	e7db      	b.n	eb52 <k_sched_lock+0x66>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    eb9a:	bd70      	pop	{r4, r5, r6, pc}
    eb9c:	20001634 	.word	0x20001634
    eba0:	00015bc8 	.word	0x00015bc8
    eba4:	00015984 	.word	0x00015984
    eba8:	00017298 	.word	0x00017298
    ebac:	200015f8 	.word	0x200015f8

0000ebb0 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    ebb0:	b538      	push	{r3, r4, r5, lr}
    ebb2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    ebb4:	4b0b      	ldr	r3, [pc, #44]	; (ebe4 <z_priq_dumb_remove+0x34>)
    ebb6:	4299      	cmp	r1, r3
    ebb8:	d007      	beq.n	ebca <z_priq_dumb_remove+0x1a>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    ebba:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    ebbc:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
    ebbe:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    ebc0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    ebc2:	2300      	movs	r3, #0
    ebc4:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    ebc6:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    ebc8:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    ebca:	4d07      	ldr	r5, [pc, #28]	; (ebe8 <z_priq_dumb_remove+0x38>)
    ebcc:	f240 32e7 	movw	r2, #999	; 0x3e7
    ebd0:	4629      	mov	r1, r5
    ebd2:	4806      	ldr	r0, [pc, #24]	; (ebec <z_priq_dumb_remove+0x3c>)
    ebd4:	f002 fa28 	bl	11028 <printk>
    ebd8:	f240 31e7 	movw	r1, #999	; 0x3e7
    ebdc:	4628      	mov	r0, r5
    ebde:	f002 fb45 	bl	1126c <assert_post_action>
    ebe2:	e7ea      	b.n	ebba <z_priq_dumb_remove+0xa>
    ebe4:	200004f0 	.word	0x200004f0
    ebe8:	000172e4 	.word	0x000172e4
    ebec:	00015984 	.word	0x00015984

0000ebf0 <update_cache>:
{
    ebf0:	b538      	push	{r3, r4, r5, lr}
    ebf2:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    ebf4:	4816      	ldr	r0, [pc, #88]	; (ec50 <update_cache+0x60>)
    ebf6:	f005 febe 	bl	14976 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    ebfa:	4605      	mov	r5, r0
    ebfc:	b188      	cbz	r0, ec22 <update_cache+0x32>
	if (preempt_ok != 0) {
    ebfe:	b9f4      	cbnz	r4, ec3e <update_cache+0x4e>
	__ASSERT(_current != NULL, "");
    ec00:	4b14      	ldr	r3, [pc, #80]	; (ec54 <update_cache+0x64>)
    ec02:	689b      	ldr	r3, [r3, #8]
    ec04:	b183      	cbz	r3, ec28 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    ec06:	4b13      	ldr	r3, [pc, #76]	; (ec54 <update_cache+0x64>)
    ec08:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    ec0a:	7b5a      	ldrb	r2, [r3, #13]
    ec0c:	f012 0f1f 	tst.w	r2, #31
    ec10:	d115      	bne.n	ec3e <update_cache+0x4e>
	return node->next != NULL;
    ec12:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    ec14:	b99a      	cbnz	r2, ec3e <update_cache+0x4e>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    ec16:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    ec18:	2a7f      	cmp	r2, #127	; 0x7f
    ec1a:	d910      	bls.n	ec3e <update_cache+0x4e>
		_kernel.ready_q.cache = _current;
    ec1c:	4a0d      	ldr	r2, [pc, #52]	; (ec54 <update_cache+0x64>)
    ec1e:	61d3      	str	r3, [r2, #28]
    ec20:	e015      	b.n	ec4e <update_cache+0x5e>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    ec22:	4b0c      	ldr	r3, [pc, #48]	; (ec54 <update_cache+0x64>)
    ec24:	68dd      	ldr	r5, [r3, #12]
    ec26:	e7ea      	b.n	ebfe <update_cache+0xe>
	__ASSERT(_current != NULL, "");
    ec28:	4c0b      	ldr	r4, [pc, #44]	; (ec58 <update_cache+0x68>)
    ec2a:	2289      	movs	r2, #137	; 0x89
    ec2c:	4621      	mov	r1, r4
    ec2e:	480b      	ldr	r0, [pc, #44]	; (ec5c <update_cache+0x6c>)
    ec30:	f002 f9fa 	bl	11028 <printk>
    ec34:	2189      	movs	r1, #137	; 0x89
    ec36:	4620      	mov	r0, r4
    ec38:	f002 fb18 	bl	1126c <assert_post_action>
    ec3c:	e7e3      	b.n	ec06 <update_cache+0x16>
		if (thread != _current) {
    ec3e:	4b05      	ldr	r3, [pc, #20]	; (ec54 <update_cache+0x64>)
    ec40:	689b      	ldr	r3, [r3, #8]
    ec42:	42ab      	cmp	r3, r5
    ec44:	d001      	beq.n	ec4a <update_cache+0x5a>
			z_reset_time_slice();
    ec46:	f7ff fe55 	bl	e8f4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    ec4a:	4b02      	ldr	r3, [pc, #8]	; (ec54 <update_cache+0x64>)
    ec4c:	61dd      	str	r5, [r3, #28]
}
    ec4e:	bd38      	pop	{r3, r4, r5, pc}
    ec50:	20001618 	.word	0x20001618
    ec54:	200015f8 	.word	0x200015f8
    ec58:	000172e4 	.word	0x000172e4
    ec5c:	00015984 	.word	0x00015984

0000ec60 <move_thread_to_end_of_prio_q>:
{
    ec60:	b538      	push	{r3, r4, r5, lr}
    ec62:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    ec64:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    ec66:	f990 300d 	ldrsb.w	r3, [r0, #13]
    ec6a:	2b00      	cmp	r3, #0
    ec6c:	db2b      	blt.n	ecc6 <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
    ec6e:	7b6b      	ldrb	r3, [r5, #13]
    ec70:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ec74:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    ec76:	4b21      	ldr	r3, [pc, #132]	; (ecfc <move_thread_to_end_of_prio_q+0x9c>)
    ec78:	429d      	cmp	r5, r3
    ec7a:	d02c      	beq.n	ecd6 <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
    ec7c:	4b20      	ldr	r3, [pc, #128]	; (ed00 <move_thread_to_end_of_prio_q+0xa0>)
    ec7e:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ec82:	429c      	cmp	r4, r3
    ec84:	d038      	beq.n	ecf8 <move_thread_to_end_of_prio_q+0x98>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ec86:	b16c      	cbz	r4, eca4 <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
    ec88:	4621      	mov	r1, r4
    ec8a:	4628      	mov	r0, r5
    ec8c:	f005 fe54 	bl	14938 <z_sched_prio_cmp>
    ec90:	2800      	cmp	r0, #0
    ec92:	dc2b      	bgt.n	ecec <move_thread_to_end_of_prio_q+0x8c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    ec94:	b134      	cbz	r4, eca4 <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
    ec96:	4b1a      	ldr	r3, [pc, #104]	; (ed00 <move_thread_to_end_of_prio_q+0xa0>)
    ec98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ec9a:	429c      	cmp	r4, r3
    ec9c:	d002      	beq.n	eca4 <move_thread_to_end_of_prio_q+0x44>
    ec9e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    eca0:	2c00      	cmp	r4, #0
    eca2:	d1f0      	bne.n	ec86 <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
    eca4:	4b16      	ldr	r3, [pc, #88]	; (ed00 <move_thread_to_end_of_prio_q+0xa0>)
    eca6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    eca8:	f103 0120 	add.w	r1, r3, #32
    ecac:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    ecae:	606a      	str	r2, [r5, #4]
	tail->next = node;
    ecb0:	6015      	str	r5, [r2, #0]
	list->tail = node;
    ecb2:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    ecb4:	4b12      	ldr	r3, [pc, #72]	; (ed00 <move_thread_to_end_of_prio_q+0xa0>)
    ecb6:	6898      	ldr	r0, [r3, #8]
    ecb8:	42a8      	cmp	r0, r5
    ecba:	bf14      	ite	ne
    ecbc:	2000      	movne	r0, #0
    ecbe:	2001      	moveq	r0, #1
    ecc0:	f7ff ff96 	bl	ebf0 <update_cache>
}
    ecc4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ecc6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    ecca:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    eccc:	4601      	mov	r1, r0
    ecce:	480d      	ldr	r0, [pc, #52]	; (ed04 <move_thread_to_end_of_prio_q+0xa4>)
    ecd0:	f7ff ff6e 	bl	ebb0 <z_priq_dumb_remove>
}
    ecd4:	e7cb      	b.n	ec6e <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    ecd6:	4c0c      	ldr	r4, [pc, #48]	; (ed08 <move_thread_to_end_of_prio_q+0xa8>)
    ecd8:	22ba      	movs	r2, #186	; 0xba
    ecda:	4621      	mov	r1, r4
    ecdc:	480b      	ldr	r0, [pc, #44]	; (ed0c <move_thread_to_end_of_prio_q+0xac>)
    ecde:	f002 f9a3 	bl	11028 <printk>
    ece2:	21ba      	movs	r1, #186	; 0xba
    ece4:	4620      	mov	r0, r4
    ece6:	f002 fac1 	bl	1126c <assert_post_action>
    ecea:	e7c7      	b.n	ec7c <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
    ecec:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    ecee:	606b      	str	r3, [r5, #4]
	node->next = successor;
    ecf0:	602c      	str	r4, [r5, #0]
	prev->next = node;
    ecf2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    ecf4:	6065      	str	r5, [r4, #4]
}
    ecf6:	e7dd      	b.n	ecb4 <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ecf8:	2400      	movs	r4, #0
    ecfa:	e7c4      	b.n	ec86 <move_thread_to_end_of_prio_q+0x26>
    ecfc:	200004f0 	.word	0x200004f0
    ed00:	200015f8 	.word	0x200015f8
    ed04:	20001618 	.word	0x20001618
    ed08:	000172e4 	.word	0x000172e4
    ed0c:	00015984 	.word	0x00015984

0000ed10 <z_time_slice>:
{
    ed10:	b570      	push	{r4, r5, r6, lr}
    ed12:	4604      	mov	r4, r0
	__asm__ volatile(
    ed14:	f04f 0320 	mov.w	r3, #32
    ed18:	f3ef 8511 	mrs	r5, BASEPRI
    ed1c:	f383 8812 	msr	BASEPRI_MAX, r3
    ed20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ed24:	4834      	ldr	r0, [pc, #208]	; (edf8 <z_time_slice+0xe8>)
    ed26:	f7ff f975 	bl	e014 <z_spin_lock_valid>
    ed2a:	b338      	cbz	r0, ed7c <z_time_slice+0x6c>
	z_spin_lock_set_owner(l);
    ed2c:	4832      	ldr	r0, [pc, #200]	; (edf8 <z_time_slice+0xe8>)
    ed2e:	f7ff f991 	bl	e054 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    ed32:	4b32      	ldr	r3, [pc, #200]	; (edfc <z_time_slice+0xec>)
    ed34:	689b      	ldr	r3, [r3, #8]
    ed36:	4a32      	ldr	r2, [pc, #200]	; (ee00 <z_time_slice+0xf0>)
    ed38:	6812      	ldr	r2, [r2, #0]
    ed3a:	4293      	cmp	r3, r2
    ed3c:	d029      	beq.n	ed92 <z_time_slice+0x82>
	pending_current = NULL;
    ed3e:	4a30      	ldr	r2, [pc, #192]	; (ee00 <z_time_slice+0xf0>)
    ed40:	2100      	movs	r1, #0
    ed42:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    ed44:	4a2f      	ldr	r2, [pc, #188]	; (ee04 <z_time_slice+0xf4>)
    ed46:	6812      	ldr	r2, [r2, #0]
    ed48:	2a00      	cmp	r2, #0
    ed4a:	d03e      	beq.n	edca <z_time_slice+0xba>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    ed4c:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    ed4e:	2a7f      	cmp	r2, #127	; 0x7f
    ed50:	d83b      	bhi.n	edca <z_time_slice+0xba>
	uint8_t state = thread->base.thread_state;
    ed52:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    ed54:	f012 0f1f 	tst.w	r2, #31
    ed58:	d137      	bne.n	edca <z_time_slice+0xba>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    ed5a:	f993 100e 	ldrsb.w	r1, [r3, #14]
    ed5e:	4a2a      	ldr	r2, [pc, #168]	; (ee08 <z_time_slice+0xf8>)
    ed60:	6812      	ldr	r2, [r2, #0]
    ed62:	4291      	cmp	r1, r2
    ed64:	db31      	blt.n	edca <z_time_slice+0xba>
		&& !z_is_idle_thread_object(thread);
    ed66:	4a29      	ldr	r2, [pc, #164]	; (ee0c <z_time_slice+0xfc>)
    ed68:	4293      	cmp	r3, r2
    ed6a:	d02e      	beq.n	edca <z_time_slice+0xba>
		if (ticks >= _current_cpu->slice_ticks) {
    ed6c:	4a23      	ldr	r2, [pc, #140]	; (edfc <z_time_slice+0xec>)
    ed6e:	6910      	ldr	r0, [r2, #16]
    ed70:	42a0      	cmp	r0, r4
    ed72:	dd24      	ble.n	edbe <z_time_slice+0xae>
			_current_cpu->slice_ticks -= ticks;
    ed74:	1b00      	subs	r0, r0, r4
    ed76:	4b21      	ldr	r3, [pc, #132]	; (edfc <z_time_slice+0xec>)
    ed78:	6118      	str	r0, [r3, #16]
    ed7a:	e029      	b.n	edd0 <z_time_slice+0xc0>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ed7c:	4e24      	ldr	r6, [pc, #144]	; (ee10 <z_time_slice+0x100>)
    ed7e:	2281      	movs	r2, #129	; 0x81
    ed80:	4631      	mov	r1, r6
    ed82:	4824      	ldr	r0, [pc, #144]	; (ee14 <z_time_slice+0x104>)
    ed84:	f002 f950 	bl	11028 <printk>
    ed88:	2181      	movs	r1, #129	; 0x81
    ed8a:	4630      	mov	r0, r6
    ed8c:	f002 fa6e 	bl	1126c <assert_post_action>
    ed90:	e7cc      	b.n	ed2c <z_time_slice+0x1c>
		z_reset_time_slice();
    ed92:	f7ff fdaf 	bl	e8f4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ed96:	4818      	ldr	r0, [pc, #96]	; (edf8 <z_time_slice+0xe8>)
    ed98:	f7ff f94c 	bl	e034 <z_spin_unlock_valid>
    ed9c:	b120      	cbz	r0, eda8 <z_time_slice+0x98>
	__asm__ volatile(
    ed9e:	f385 8811 	msr	BASEPRI, r5
    eda2:	f3bf 8f6f 	isb	sy
		return;
    eda6:	e01b      	b.n	ede0 <z_time_slice+0xd0>
    eda8:	4c19      	ldr	r4, [pc, #100]	; (ee10 <z_time_slice+0x100>)
    edaa:	22ac      	movs	r2, #172	; 0xac
    edac:	4621      	mov	r1, r4
    edae:	4819      	ldr	r0, [pc, #100]	; (ee14 <z_time_slice+0x104>)
    edb0:	f002 f93a 	bl	11028 <printk>
    edb4:	21ac      	movs	r1, #172	; 0xac
    edb6:	4620      	mov	r0, r4
    edb8:	f002 fa58 	bl	1126c <assert_post_action>
    edbc:	e7ef      	b.n	ed9e <z_time_slice+0x8e>
			move_thread_to_end_of_prio_q(_current);
    edbe:	4618      	mov	r0, r3
    edc0:	f7ff ff4e 	bl	ec60 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    edc4:	f7ff fd96 	bl	e8f4 <z_reset_time_slice>
    edc8:	e002      	b.n	edd0 <z_time_slice+0xc0>
		_current_cpu->slice_ticks = 0;
    edca:	4b0c      	ldr	r3, [pc, #48]	; (edfc <z_time_slice+0xec>)
    edcc:	2200      	movs	r2, #0
    edce:	611a      	str	r2, [r3, #16]
    edd0:	4809      	ldr	r0, [pc, #36]	; (edf8 <z_time_slice+0xe8>)
    edd2:	f7ff f92f 	bl	e034 <z_spin_unlock_valid>
    edd6:	b120      	cbz	r0, ede2 <z_time_slice+0xd2>
    edd8:	f385 8811 	msr	BASEPRI, r5
    eddc:	f3bf 8f6f 	isb	sy
}
    ede0:	bd70      	pop	{r4, r5, r6, pc}
    ede2:	4c0b      	ldr	r4, [pc, #44]	; (ee10 <z_time_slice+0x100>)
    ede4:	22ac      	movs	r2, #172	; 0xac
    ede6:	4621      	mov	r1, r4
    ede8:	480a      	ldr	r0, [pc, #40]	; (ee14 <z_time_slice+0x104>)
    edea:	f002 f91d 	bl	11028 <printk>
    edee:	21ac      	movs	r1, #172	; 0xac
    edf0:	4620      	mov	r0, r4
    edf2:	f002 fa3b 	bl	1126c <assert_post_action>
    edf6:	e7ef      	b.n	edd8 <z_time_slice+0xc8>
    edf8:	20001634 	.word	0x20001634
    edfc:	200015f8 	.word	0x200015f8
    ee00:	20001630 	.word	0x20001630
    ee04:	2000163c 	.word	0x2000163c
    ee08:	20001638 	.word	0x20001638
    ee0c:	200004f0 	.word	0x200004f0
    ee10:	00015bc8 	.word	0x00015bc8
    ee14:	00015984 	.word	0x00015984

0000ee18 <ready_thread>:
{
    ee18:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    ee1a:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    ee1c:	f990 200d 	ldrsb.w	r2, [r0, #13]
    ee20:	2a00      	cmp	r2, #0
    ee22:	db30      	blt.n	ee86 <ready_thread+0x6e>
    ee24:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    ee26:	f013 0f1f 	tst.w	r3, #31
    ee2a:	d105      	bne.n	ee38 <ready_thread+0x20>
	return node->next != NULL;
    ee2c:	6982      	ldr	r2, [r0, #24]
    ee2e:	b10a      	cbz	r2, ee34 <ready_thread+0x1c>
    ee30:	2200      	movs	r2, #0
    ee32:	e002      	b.n	ee3a <ready_thread+0x22>
    ee34:	2201      	movs	r2, #1
    ee36:	e000      	b.n	ee3a <ready_thread+0x22>
    ee38:	2200      	movs	r2, #0
    ee3a:	b322      	cbz	r2, ee86 <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
    ee3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ee40:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    ee42:	4b1b      	ldr	r3, [pc, #108]	; (eeb0 <ready_thread+0x98>)
    ee44:	429c      	cmp	r4, r3
    ee46:	d01f      	beq.n	ee88 <ready_thread+0x70>
	return list->head == list;
    ee48:	4b1a      	ldr	r3, [pc, #104]	; (eeb4 <ready_thread+0x9c>)
    ee4a:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ee4e:	429d      	cmp	r5, r3
    ee50:	d02b      	beq.n	eeaa <ready_thread+0x92>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ee52:	b16d      	cbz	r5, ee70 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    ee54:	4629      	mov	r1, r5
    ee56:	4620      	mov	r0, r4
    ee58:	f005 fd6e 	bl	14938 <z_sched_prio_cmp>
    ee5c:	2800      	cmp	r0, #0
    ee5e:	dc1e      	bgt.n	ee9e <ready_thread+0x86>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    ee60:	b135      	cbz	r5, ee70 <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
    ee62:	4b14      	ldr	r3, [pc, #80]	; (eeb4 <ready_thread+0x9c>)
    ee64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ee66:	429d      	cmp	r5, r3
    ee68:	d002      	beq.n	ee70 <ready_thread+0x58>
    ee6a:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ee6c:	2d00      	cmp	r5, #0
    ee6e:	d1f0      	bne.n	ee52 <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
    ee70:	4b10      	ldr	r3, [pc, #64]	; (eeb4 <ready_thread+0x9c>)
    ee72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    ee74:	f103 0120 	add.w	r1, r3, #32
    ee78:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    ee7a:	6062      	str	r2, [r4, #4]
	tail->next = node;
    ee7c:	6014      	str	r4, [r2, #0]
	list->tail = node;
    ee7e:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    ee80:	2000      	movs	r0, #0
    ee82:	f7ff feb5 	bl	ebf0 <update_cache>
}
    ee86:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    ee88:	4d0b      	ldr	r5, [pc, #44]	; (eeb8 <ready_thread+0xa0>)
    ee8a:	22ba      	movs	r2, #186	; 0xba
    ee8c:	4629      	mov	r1, r5
    ee8e:	480b      	ldr	r0, [pc, #44]	; (eebc <ready_thread+0xa4>)
    ee90:	f002 f8ca 	bl	11028 <printk>
    ee94:	21ba      	movs	r1, #186	; 0xba
    ee96:	4628      	mov	r0, r5
    ee98:	f002 f9e8 	bl	1126c <assert_post_action>
    ee9c:	e7d4      	b.n	ee48 <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
    ee9e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    eea0:	6063      	str	r3, [r4, #4]
	node->next = successor;
    eea2:	6025      	str	r5, [r4, #0]
	prev->next = node;
    eea4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    eea6:	606c      	str	r4, [r5, #4]
}
    eea8:	e7ea      	b.n	ee80 <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    eeaa:	2500      	movs	r5, #0
    eeac:	e7d1      	b.n	ee52 <ready_thread+0x3a>
    eeae:	bf00      	nop
    eeb0:	200004f0 	.word	0x200004f0
    eeb4:	200015f8 	.word	0x200015f8
    eeb8:	000172e4 	.word	0x000172e4
    eebc:	00015984 	.word	0x00015984

0000eec0 <z_ready_thread>:
{
    eec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eec2:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    eec4:	2400      	movs	r4, #0
	__asm__ volatile(
    eec6:	f04f 0320 	mov.w	r3, #32
    eeca:	f3ef 8611 	mrs	r6, BASEPRI
    eece:	f383 8812 	msr	BASEPRI_MAX, r3
    eed2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    eed6:	4819      	ldr	r0, [pc, #100]	; (ef3c <z_ready_thread+0x7c>)
    eed8:	f7ff f89c 	bl	e014 <z_spin_lock_valid>
    eedc:	b118      	cbz	r0, eee6 <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
    eede:	4817      	ldr	r0, [pc, #92]	; (ef3c <z_ready_thread+0x7c>)
    eee0:	f7ff f8b8 	bl	e054 <z_spin_lock_set_owner>
	return k;
    eee4:	e01d      	b.n	ef22 <z_ready_thread+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    eee6:	4f16      	ldr	r7, [pc, #88]	; (ef40 <z_ready_thread+0x80>)
    eee8:	2281      	movs	r2, #129	; 0x81
    eeea:	4639      	mov	r1, r7
    eeec:	4815      	ldr	r0, [pc, #84]	; (ef44 <z_ready_thread+0x84>)
    eeee:	f002 f89b 	bl	11028 <printk>
    eef2:	2181      	movs	r1, #129	; 0x81
    eef4:	4638      	mov	r0, r7
    eef6:	f002 f9b9 	bl	1126c <assert_post_action>
    eefa:	e7f0      	b.n	eede <z_ready_thread+0x1e>
			ready_thread(thread);
    eefc:	4628      	mov	r0, r5
    eefe:	f7ff ff8b 	bl	ee18 <ready_thread>
    ef02:	e014      	b.n	ef2e <z_ready_thread+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ef04:	4c0e      	ldr	r4, [pc, #56]	; (ef40 <z_ready_thread+0x80>)
    ef06:	22ac      	movs	r2, #172	; 0xac
    ef08:	4621      	mov	r1, r4
    ef0a:	480e      	ldr	r0, [pc, #56]	; (ef44 <z_ready_thread+0x84>)
    ef0c:	f002 f88c 	bl	11028 <printk>
    ef10:	21ac      	movs	r1, #172	; 0xac
    ef12:	4620      	mov	r0, r4
    ef14:	f002 f9aa 	bl	1126c <assert_post_action>
	__asm__ volatile(
    ef18:	f386 8811 	msr	BASEPRI, r6
    ef1c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    ef20:	2401      	movs	r4, #1
    ef22:	b954      	cbnz	r4, ef3a <z_ready_thread+0x7a>
		if (!thread_active_elsewhere(thread)) {
    ef24:	4628      	mov	r0, r5
    ef26:	f005 fd05 	bl	14934 <thread_active_elsewhere>
    ef2a:	2800      	cmp	r0, #0
    ef2c:	d0e6      	beq.n	eefc <z_ready_thread+0x3c>
    ef2e:	4803      	ldr	r0, [pc, #12]	; (ef3c <z_ready_thread+0x7c>)
    ef30:	f7ff f880 	bl	e034 <z_spin_unlock_valid>
    ef34:	2800      	cmp	r0, #0
    ef36:	d1ef      	bne.n	ef18 <z_ready_thread+0x58>
    ef38:	e7e4      	b.n	ef04 <z_ready_thread+0x44>
}
    ef3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ef3c:	20001634 	.word	0x20001634
    ef40:	00015bc8 	.word	0x00015bc8
    ef44:	00015984 	.word	0x00015984

0000ef48 <z_sched_start>:
{
    ef48:	b570      	push	{r4, r5, r6, lr}
    ef4a:	4604      	mov	r4, r0
	__asm__ volatile(
    ef4c:	f04f 0320 	mov.w	r3, #32
    ef50:	f3ef 8511 	mrs	r5, BASEPRI
    ef54:	f383 8812 	msr	BASEPRI_MAX, r3
    ef58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ef5c:	481a      	ldr	r0, [pc, #104]	; (efc8 <z_sched_start+0x80>)
    ef5e:	f7ff f859 	bl	e014 <z_spin_lock_valid>
    ef62:	b188      	cbz	r0, ef88 <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
    ef64:	4818      	ldr	r0, [pc, #96]	; (efc8 <z_sched_start+0x80>)
    ef66:	f7ff f875 	bl	e054 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    ef6a:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    ef6c:	f013 0f04 	tst.w	r3, #4
    ef70:	d015      	beq.n	ef9e <z_sched_start+0x56>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ef72:	f023 0304 	bic.w	r3, r3, #4
    ef76:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
    ef78:	4620      	mov	r0, r4
    ef7a:	f7ff ff4d 	bl	ee18 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    ef7e:	4629      	mov	r1, r5
    ef80:	4811      	ldr	r0, [pc, #68]	; (efc8 <z_sched_start+0x80>)
    ef82:	f7ff fd77 	bl	ea74 <z_reschedule>
}
    ef86:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ef88:	4e10      	ldr	r6, [pc, #64]	; (efcc <z_sched_start+0x84>)
    ef8a:	2281      	movs	r2, #129	; 0x81
    ef8c:	4631      	mov	r1, r6
    ef8e:	4810      	ldr	r0, [pc, #64]	; (efd0 <z_sched_start+0x88>)
    ef90:	f002 f84a 	bl	11028 <printk>
    ef94:	2181      	movs	r1, #129	; 0x81
    ef96:	4630      	mov	r0, r6
    ef98:	f002 f968 	bl	1126c <assert_post_action>
    ef9c:	e7e2      	b.n	ef64 <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ef9e:	480a      	ldr	r0, [pc, #40]	; (efc8 <z_sched_start+0x80>)
    efa0:	f7ff f848 	bl	e034 <z_spin_unlock_valid>
    efa4:	b120      	cbz	r0, efb0 <z_sched_start+0x68>
	__asm__ volatile(
    efa6:	f385 8811 	msr	BASEPRI, r5
    efaa:	f3bf 8f6f 	isb	sy
		return;
    efae:	e7ea      	b.n	ef86 <z_sched_start+0x3e>
    efb0:	4c06      	ldr	r4, [pc, #24]	; (efcc <z_sched_start+0x84>)
    efb2:	22ac      	movs	r2, #172	; 0xac
    efb4:	4621      	mov	r1, r4
    efb6:	4806      	ldr	r0, [pc, #24]	; (efd0 <z_sched_start+0x88>)
    efb8:	f002 f836 	bl	11028 <printk>
    efbc:	21ac      	movs	r1, #172	; 0xac
    efbe:	4620      	mov	r0, r4
    efc0:	f002 f954 	bl	1126c <assert_post_action>
    efc4:	e7ef      	b.n	efa6 <z_sched_start+0x5e>
    efc6:	bf00      	nop
    efc8:	20001634 	.word	0x20001634
    efcc:	00015bc8 	.word	0x00015bc8
    efd0:	00015984 	.word	0x00015984

0000efd4 <z_thread_timeout>:
{
    efd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    efd8:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    efda:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    efde:	2500      	movs	r5, #0
	__asm__ volatile(
    efe0:	f04f 0320 	mov.w	r3, #32
    efe4:	f3ef 8711 	mrs	r7, BASEPRI
    efe8:	f383 8812 	msr	BASEPRI_MAX, r3
    efec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    eff0:	4824      	ldr	r0, [pc, #144]	; (f084 <z_thread_timeout+0xb0>)
    eff2:	f7ff f80f 	bl	e014 <z_spin_lock_valid>
    eff6:	b118      	cbz	r0, f000 <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
    eff8:	4822      	ldr	r0, [pc, #136]	; (f084 <z_thread_timeout+0xb0>)
    effa:	f7ff f82b 	bl	e054 <z_spin_lock_set_owner>
	return k;
    effe:	e029      	b.n	f054 <z_thread_timeout+0x80>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f000:	f8df 8088 	ldr.w	r8, [pc, #136]	; f08c <z_thread_timeout+0xb8>
    f004:	2281      	movs	r2, #129	; 0x81
    f006:	4641      	mov	r1, r8
    f008:	481f      	ldr	r0, [pc, #124]	; (f088 <z_thread_timeout+0xb4>)
    f00a:	f002 f80d 	bl	11028 <printk>
    f00e:	2181      	movs	r1, #129	; 0x81
    f010:	4640      	mov	r0, r8
    f012:	f002 f92b 	bl	1126c <assert_post_action>
    f016:	e7ef      	b.n	eff8 <z_thread_timeout+0x24>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    f018:	4630      	mov	r0, r6
    f01a:	f7ff fc43 	bl	e8a4 <pended_on_thread>
    f01e:	4631      	mov	r1, r6
    f020:	f7ff fdc6 	bl	ebb0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    f024:	7b73      	ldrb	r3, [r6, #13]
    f026:	f023 0302 	bic.w	r3, r3, #2
    f02a:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
    f02c:	2300      	movs	r3, #0
    f02e:	60b3      	str	r3, [r6, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f030:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    f034:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
    f038:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    f03c:	4630      	mov	r0, r6
    f03e:	f7ff feeb 	bl	ee18 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f042:	4810      	ldr	r0, [pc, #64]	; (f084 <z_thread_timeout+0xb0>)
    f044:	f7fe fff6 	bl	e034 <z_spin_unlock_valid>
    f048:	b178      	cbz	r0, f06a <z_thread_timeout+0x96>
	__asm__ volatile(
    f04a:	f387 8811 	msr	BASEPRI, r7
    f04e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    f052:	2501      	movs	r5, #1
    f054:	b9a5      	cbnz	r5, f080 <z_thread_timeout+0xac>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    f056:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    f05a:	f013 0f28 	tst.w	r3, #40	; 0x28
    f05e:	d1f0      	bne.n	f042 <z_thread_timeout+0x6e>
			if (thread->base.pended_on != NULL) {
    f060:	f854 3c10 	ldr.w	r3, [r4, #-16]
    f064:	2b00      	cmp	r3, #0
    f066:	d1d7      	bne.n	f018 <z_thread_timeout+0x44>
    f068:	e7e2      	b.n	f030 <z_thread_timeout+0x5c>
    f06a:	4d08      	ldr	r5, [pc, #32]	; (f08c <z_thread_timeout+0xb8>)
    f06c:	22ac      	movs	r2, #172	; 0xac
    f06e:	4629      	mov	r1, r5
    f070:	4805      	ldr	r0, [pc, #20]	; (f088 <z_thread_timeout+0xb4>)
    f072:	f001 ffd9 	bl	11028 <printk>
    f076:	21ac      	movs	r1, #172	; 0xac
    f078:	4628      	mov	r0, r5
    f07a:	f002 f8f7 	bl	1126c <assert_post_action>
    f07e:	e7e4      	b.n	f04a <z_thread_timeout+0x76>
}
    f080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f084:	20001634 	.word	0x20001634
    f088:	00015984 	.word	0x00015984
    f08c:	00015bc8 	.word	0x00015bc8

0000f090 <unready_thread>:
{
    f090:	b510      	push	{r4, lr}
    f092:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    f094:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    f096:	f990 300d 	ldrsb.w	r3, [r0, #13]
    f09a:	2b00      	cmp	r3, #0
    f09c:	db08      	blt.n	f0b0 <unready_thread+0x20>
	update_cache(thread == _current);
    f09e:	4b08      	ldr	r3, [pc, #32]	; (f0c0 <unready_thread+0x30>)
    f0a0:	6898      	ldr	r0, [r3, #8]
    f0a2:	42a0      	cmp	r0, r4
    f0a4:	bf14      	ite	ne
    f0a6:	2000      	movne	r0, #0
    f0a8:	2001      	moveq	r0, #1
    f0aa:	f7ff fda1 	bl	ebf0 <update_cache>
}
    f0ae:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f0b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    f0b4:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    f0b6:	4601      	mov	r1, r0
    f0b8:	4802      	ldr	r0, [pc, #8]	; (f0c4 <unready_thread+0x34>)
    f0ba:	f7ff fd79 	bl	ebb0 <z_priq_dumb_remove>
}
    f0be:	e7ee      	b.n	f09e <unready_thread+0xe>
    f0c0:	200015f8 	.word	0x200015f8
    f0c4:	20001618 	.word	0x20001618

0000f0c8 <add_to_waitq_locked>:
{
    f0c8:	b570      	push	{r4, r5, r6, lr}
    f0ca:	4605      	mov	r5, r0
    f0cc:	460e      	mov	r6, r1
	unready_thread(thread);
    f0ce:	f7ff ffdf 	bl	f090 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    f0d2:	7b6b      	ldrb	r3, [r5, #13]
    f0d4:	f043 0302 	orr.w	r3, r3, #2
    f0d8:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    f0da:	b1ce      	cbz	r6, f110 <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
    f0dc:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    f0de:	4b16      	ldr	r3, [pc, #88]	; (f138 <add_to_waitq_locked+0x70>)
    f0e0:	429d      	cmp	r5, r3
    f0e2:	d016      	beq.n	f112 <add_to_waitq_locked+0x4a>
	return list->head == list;
    f0e4:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f0e6:	42a6      	cmp	r6, r4
    f0e8:	d024      	beq.n	f134 <add_to_waitq_locked+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f0ea:	b164      	cbz	r4, f106 <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    f0ec:	4621      	mov	r1, r4
    f0ee:	4628      	mov	r0, r5
    f0f0:	f005 fc22 	bl	14938 <z_sched_prio_cmp>
    f0f4:	2800      	cmp	r0, #0
    f0f6:	dc17      	bgt.n	f128 <add_to_waitq_locked+0x60>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    f0f8:	b12c      	cbz	r4, f106 <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
    f0fa:	6873      	ldr	r3, [r6, #4]
    f0fc:	429c      	cmp	r4, r3
    f0fe:	d002      	beq.n	f106 <add_to_waitq_locked+0x3e>
    f100:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f102:	2c00      	cmp	r4, #0
    f104:	d1f1      	bne.n	f0ea <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    f106:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    f108:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    f10a:	606b      	str	r3, [r5, #4]
	tail->next = node;
    f10c:	601d      	str	r5, [r3, #0]
	list->tail = node;
    f10e:	6075      	str	r5, [r6, #4]
}
    f110:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    f112:	4c0a      	ldr	r4, [pc, #40]	; (f13c <add_to_waitq_locked+0x74>)
    f114:	22ba      	movs	r2, #186	; 0xba
    f116:	4621      	mov	r1, r4
    f118:	4809      	ldr	r0, [pc, #36]	; (f140 <add_to_waitq_locked+0x78>)
    f11a:	f001 ff85 	bl	11028 <printk>
    f11e:	21ba      	movs	r1, #186	; 0xba
    f120:	4620      	mov	r0, r4
    f122:	f002 f8a3 	bl	1126c <assert_post_action>
    f126:	e7dd      	b.n	f0e4 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
    f128:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    f12a:	606b      	str	r3, [r5, #4]
	node->next = successor;
    f12c:	602c      	str	r4, [r5, #0]
	prev->next = node;
    f12e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    f130:	6065      	str	r5, [r4, #4]
}
    f132:	e7ed      	b.n	f110 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f134:	2400      	movs	r4, #0
    f136:	e7d8      	b.n	f0ea <add_to_waitq_locked+0x22>
    f138:	200004f0 	.word	0x200004f0
    f13c:	000172e4 	.word	0x000172e4
    f140:	00015984 	.word	0x00015984

0000f144 <pend>:
{
    f144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f148:	4605      	mov	r5, r0
    f14a:	460f      	mov	r7, r1
    f14c:	4691      	mov	r9, r2
    f14e:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    f150:	2400      	movs	r4, #0
	__asm__ volatile(
    f152:	f04f 0320 	mov.w	r3, #32
    f156:	f3ef 8611 	mrs	r6, BASEPRI
    f15a:	f383 8812 	msr	BASEPRI_MAX, r3
    f15e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f162:	481a      	ldr	r0, [pc, #104]	; (f1cc <pend+0x88>)
    f164:	f7fe ff56 	bl	e014 <z_spin_lock_valid>
    f168:	b118      	cbz	r0, f172 <pend+0x2e>
	z_spin_lock_set_owner(l);
    f16a:	4818      	ldr	r0, [pc, #96]	; (f1cc <pend+0x88>)
    f16c:	f7fe ff72 	bl	e054 <z_spin_lock_set_owner>
	return k;
    f170:	e01a      	b.n	f1a8 <pend+0x64>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f172:	f8df a060 	ldr.w	sl, [pc, #96]	; f1d4 <pend+0x90>
    f176:	2281      	movs	r2, #129	; 0x81
    f178:	4651      	mov	r1, sl
    f17a:	4815      	ldr	r0, [pc, #84]	; (f1d0 <pend+0x8c>)
    f17c:	f001 ff54 	bl	11028 <printk>
    f180:	2181      	movs	r1, #129	; 0x81
    f182:	4650      	mov	r0, sl
    f184:	f002 f872 	bl	1126c <assert_post_action>
    f188:	e7ef      	b.n	f16a <pend+0x26>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f18a:	4c12      	ldr	r4, [pc, #72]	; (f1d4 <pend+0x90>)
    f18c:	22ac      	movs	r2, #172	; 0xac
    f18e:	4621      	mov	r1, r4
    f190:	480f      	ldr	r0, [pc, #60]	; (f1d0 <pend+0x8c>)
    f192:	f001 ff49 	bl	11028 <printk>
    f196:	21ac      	movs	r1, #172	; 0xac
    f198:	4620      	mov	r0, r4
    f19a:	f002 f867 	bl	1126c <assert_post_action>
	__asm__ volatile(
    f19e:	f386 8811 	msr	BASEPRI, r6
    f1a2:	f3bf 8f6f 	isb	sy
    f1a6:	2401      	movs	r4, #1
    f1a8:	b94c      	cbnz	r4, f1be <pend+0x7a>
		add_to_waitq_locked(thread, wait_q);
    f1aa:	4639      	mov	r1, r7
    f1ac:	4628      	mov	r0, r5
    f1ae:	f7ff ff8b 	bl	f0c8 <add_to_waitq_locked>
    f1b2:	4806      	ldr	r0, [pc, #24]	; (f1cc <pend+0x88>)
    f1b4:	f7fe ff3e 	bl	e034 <z_spin_unlock_valid>
    f1b8:	2800      	cmp	r0, #0
    f1ba:	d1f0      	bne.n	f19e <pend+0x5a>
    f1bc:	e7e5      	b.n	f18a <pend+0x46>
	add_thread_timeout(thread, timeout);
    f1be:	464a      	mov	r2, r9
    f1c0:	4643      	mov	r3, r8
    f1c2:	4628      	mov	r0, r5
    f1c4:	f7ff fb86 	bl	e8d4 <add_thread_timeout>
}
    f1c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f1cc:	20001634 	.word	0x20001634
    f1d0:	00015984 	.word	0x00015984
    f1d4:	00015bc8 	.word	0x00015bc8

0000f1d8 <z_pend_curr>:
{
    f1d8:	b538      	push	{r3, r4, r5, lr}
    f1da:	4605      	mov	r5, r0
    f1dc:	460c      	mov	r4, r1
    f1de:	4611      	mov	r1, r2
	pending_current = _current;
    f1e0:	4b0d      	ldr	r3, [pc, #52]	; (f218 <z_pend_curr+0x40>)
    f1e2:	6898      	ldr	r0, [r3, #8]
    f1e4:	4b0d      	ldr	r3, [pc, #52]	; (f21c <z_pend_curr+0x44>)
    f1e6:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    f1e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    f1ec:	f7ff ffaa 	bl	f144 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f1f0:	4628      	mov	r0, r5
    f1f2:	f7fe ff1f 	bl	e034 <z_spin_unlock_valid>
    f1f6:	b118      	cbz	r0, f200 <z_pend_curr+0x28>
    f1f8:	4620      	mov	r0, r4
    f1fa:	f7f6 fabf 	bl	577c <arch_swap>
}
    f1fe:	bd38      	pop	{r3, r4, r5, pc}
    f200:	4d07      	ldr	r5, [pc, #28]	; (f220 <z_pend_curr+0x48>)
    f202:	22c3      	movs	r2, #195	; 0xc3
    f204:	4629      	mov	r1, r5
    f206:	4807      	ldr	r0, [pc, #28]	; (f224 <z_pend_curr+0x4c>)
    f208:	f001 ff0e 	bl	11028 <printk>
    f20c:	21c3      	movs	r1, #195	; 0xc3
    f20e:	4628      	mov	r0, r5
    f210:	f002 f82c 	bl	1126c <assert_post_action>
    f214:	e7f0      	b.n	f1f8 <z_pend_curr+0x20>
    f216:	bf00      	nop
    f218:	200015f8 	.word	0x200015f8
    f21c:	20001630 	.word	0x20001630
    f220:	00015bc8 	.word	0x00015bc8
    f224:	00015984 	.word	0x00015984

0000f228 <z_set_prio>:
{
    f228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f22c:	4604      	mov	r4, r0
    f22e:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    f230:	2500      	movs	r5, #0
	__asm__ volatile(
    f232:	f04f 0320 	mov.w	r3, #32
    f236:	f3ef 8611 	mrs	r6, BASEPRI
    f23a:	f383 8812 	msr	BASEPRI_MAX, r3
    f23e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f242:	4840      	ldr	r0, [pc, #256]	; (f344 <z_set_prio+0x11c>)
    f244:	f7fe fee6 	bl	e014 <z_spin_lock_valid>
    f248:	b128      	cbz	r0, f256 <z_set_prio+0x2e>
	z_spin_lock_set_owner(l);
    f24a:	483e      	ldr	r0, [pc, #248]	; (f344 <z_set_prio+0x11c>)
    f24c:	f7fe ff02 	bl	e054 <z_spin_lock_set_owner>
	bool need_sched = 0;
    f250:	f04f 0800 	mov.w	r8, #0
	return k;
    f254:	e019      	b.n	f28a <z_set_prio+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f256:	f8df 8104 	ldr.w	r8, [pc, #260]	; f35c <z_set_prio+0x134>
    f25a:	2281      	movs	r2, #129	; 0x81
    f25c:	4641      	mov	r1, r8
    f25e:	483a      	ldr	r0, [pc, #232]	; (f348 <z_set_prio+0x120>)
    f260:	f001 fee2 	bl	11028 <printk>
    f264:	2181      	movs	r1, #129	; 0x81
    f266:	4640      	mov	r0, r8
    f268:	f002 f800 	bl	1126c <assert_post_action>
    f26c:	e7ed      	b.n	f24a <z_set_prio+0x22>
		if (need_sched) {
    f26e:	f013 0801 	ands.w	r8, r3, #1
    f272:	d116      	bne.n	f2a2 <z_set_prio+0x7a>
			thread->base.prio = prio;
    f274:	73a7      	strb	r7, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f276:	4833      	ldr	r0, [pc, #204]	; (f344 <z_set_prio+0x11c>)
    f278:	f7fe fedc 	bl	e034 <z_spin_unlock_valid>
    f27c:	2800      	cmp	r0, #0
    f27e:	d052      	beq.n	f326 <z_set_prio+0xfe>
	__asm__ volatile(
    f280:	f386 8811 	msr	BASEPRI, r6
    f284:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    f288:	2501      	movs	r5, #1
    f28a:	462b      	mov	r3, r5
    f28c:	2d00      	cmp	r5, #0
    f28e:	d155      	bne.n	f33c <z_set_prio+0x114>
	uint8_t state = thread->base.thread_state;
    f290:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    f292:	f012 0f1f 	tst.w	r2, #31
    f296:	d1ea      	bne.n	f26e <z_set_prio+0x46>
	return node->next != NULL;
    f298:	69a1      	ldr	r1, [r4, #24]
    f29a:	2900      	cmp	r1, #0
    f29c:	d1e7      	bne.n	f26e <z_set_prio+0x46>
    f29e:	2301      	movs	r3, #1
    f2a0:	e7e5      	b.n	f26e <z_set_prio+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f2a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    f2a6:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    f2a8:	4621      	mov	r1, r4
    f2aa:	4828      	ldr	r0, [pc, #160]	; (f34c <z_set_prio+0x124>)
    f2ac:	f7ff fc80 	bl	ebb0 <z_priq_dumb_remove>
				thread->base.prio = prio;
    f2b0:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    f2b2:	7b63      	ldrb	r3, [r4, #13]
    f2b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f2b8:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    f2ba:	4b25      	ldr	r3, [pc, #148]	; (f350 <z_set_prio+0x128>)
    f2bc:	429c      	cmp	r4, r3
    f2be:	d01f      	beq.n	f300 <z_set_prio+0xd8>
	return list->head == list;
    f2c0:	4b24      	ldr	r3, [pc, #144]	; (f354 <z_set_prio+0x12c>)
    f2c2:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f2c6:	429d      	cmp	r5, r3
    f2c8:	d02b      	beq.n	f322 <z_set_prio+0xfa>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f2ca:	b16d      	cbz	r5, f2e8 <z_set_prio+0xc0>
		if (z_sched_prio_cmp(thread, t) > 0) {
    f2cc:	4629      	mov	r1, r5
    f2ce:	4620      	mov	r0, r4
    f2d0:	f005 fb32 	bl	14938 <z_sched_prio_cmp>
    f2d4:	2800      	cmp	r0, #0
    f2d6:	dc1e      	bgt.n	f316 <z_set_prio+0xee>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    f2d8:	b135      	cbz	r5, f2e8 <z_set_prio+0xc0>
	return (node == list->tail) ? NULL : node->next;
    f2da:	4b1e      	ldr	r3, [pc, #120]	; (f354 <z_set_prio+0x12c>)
    f2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f2de:	429d      	cmp	r5, r3
    f2e0:	d002      	beq.n	f2e8 <z_set_prio+0xc0>
    f2e2:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f2e4:	2d00      	cmp	r5, #0
    f2e6:	d1f0      	bne.n	f2ca <z_set_prio+0xa2>
	sys_dnode_t *const tail = list->tail;
    f2e8:	4b1a      	ldr	r3, [pc, #104]	; (f354 <z_set_prio+0x12c>)
    f2ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    f2ec:	f103 0120 	add.w	r1, r3, #32
    f2f0:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    f2f2:	6062      	str	r2, [r4, #4]
	tail->next = node;
    f2f4:	6014      	str	r4, [r2, #0]
	list->tail = node;
    f2f6:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    f2f8:	2001      	movs	r0, #1
    f2fa:	f7ff fc79 	bl	ebf0 <update_cache>
    f2fe:	e7ba      	b.n	f276 <z_set_prio+0x4e>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    f300:	4d15      	ldr	r5, [pc, #84]	; (f358 <z_set_prio+0x130>)
    f302:	22ba      	movs	r2, #186	; 0xba
    f304:	4629      	mov	r1, r5
    f306:	4810      	ldr	r0, [pc, #64]	; (f348 <z_set_prio+0x120>)
    f308:	f001 fe8e 	bl	11028 <printk>
    f30c:	21ba      	movs	r1, #186	; 0xba
    f30e:	4628      	mov	r0, r5
    f310:	f001 ffac 	bl	1126c <assert_post_action>
    f314:	e7d4      	b.n	f2c0 <z_set_prio+0x98>
	sys_dnode_t *const prev = successor->prev;
    f316:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    f318:	6063      	str	r3, [r4, #4]
	node->next = successor;
    f31a:	6025      	str	r5, [r4, #0]
	prev->next = node;
    f31c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    f31e:	606c      	str	r4, [r5, #4]
}
    f320:	e7ea      	b.n	f2f8 <z_set_prio+0xd0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f322:	2500      	movs	r5, #0
    f324:	e7d1      	b.n	f2ca <z_set_prio+0xa2>
    f326:	4d0d      	ldr	r5, [pc, #52]	; (f35c <z_set_prio+0x134>)
    f328:	22ac      	movs	r2, #172	; 0xac
    f32a:	4629      	mov	r1, r5
    f32c:	4806      	ldr	r0, [pc, #24]	; (f348 <z_set_prio+0x120>)
    f32e:	f001 fe7b 	bl	11028 <printk>
    f332:	21ac      	movs	r1, #172	; 0xac
    f334:	4628      	mov	r0, r5
    f336:	f001 ff99 	bl	1126c <assert_post_action>
    f33a:	e7a1      	b.n	f280 <z_set_prio+0x58>
}
    f33c:	4640      	mov	r0, r8
    f33e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f342:	bf00      	nop
    f344:	20001634 	.word	0x20001634
    f348:	00015984 	.word	0x00015984
    f34c:	20001618 	.word	0x20001618
    f350:	200004f0 	.word	0x200004f0
    f354:	200015f8 	.word	0x200015f8
    f358:	000172e4 	.word	0x000172e4
    f35c:	00015bc8 	.word	0x00015bc8

0000f360 <z_impl_k_thread_suspend>:
{
    f360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f362:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    f364:	3018      	adds	r0, #24
    f366:	f000 fd11 	bl	fd8c <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    f36a:	2500      	movs	r5, #0
	__asm__ volatile(
    f36c:	f04f 0320 	mov.w	r3, #32
    f370:	f3ef 8611 	mrs	r6, BASEPRI
    f374:	f383 8812 	msr	BASEPRI_MAX, r3
    f378:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f37c:	4828      	ldr	r0, [pc, #160]	; (f420 <z_impl_k_thread_suspend+0xc0>)
    f37e:	f7fe fe49 	bl	e014 <z_spin_lock_valid>
    f382:	b118      	cbz	r0, f38c <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
    f384:	4826      	ldr	r0, [pc, #152]	; (f420 <z_impl_k_thread_suspend+0xc0>)
    f386:	f7fe fe65 	bl	e054 <z_spin_lock_set_owner>
	return k;
    f38a:	e021      	b.n	f3d0 <z_impl_k_thread_suspend+0x70>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f38c:	4f25      	ldr	r7, [pc, #148]	; (f424 <z_impl_k_thread_suspend+0xc4>)
    f38e:	2281      	movs	r2, #129	; 0x81
    f390:	4639      	mov	r1, r7
    f392:	4825      	ldr	r0, [pc, #148]	; (f428 <z_impl_k_thread_suspend+0xc8>)
    f394:	f001 fe48 	bl	11028 <printk>
    f398:	2181      	movs	r1, #129	; 0x81
    f39a:	4638      	mov	r0, r7
    f39c:	f001 ff66 	bl	1126c <assert_post_action>
    f3a0:	e7f0      	b.n	f384 <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f3a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    f3a6:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    f3a8:	4621      	mov	r1, r4
    f3aa:	4820      	ldr	r0, [pc, #128]	; (f42c <z_impl_k_thread_suspend+0xcc>)
    f3ac:	f7ff fc00 	bl	ebb0 <z_priq_dumb_remove>
}
    f3b0:	e014      	b.n	f3dc <z_impl_k_thread_suspend+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f3b2:	4d1c      	ldr	r5, [pc, #112]	; (f424 <z_impl_k_thread_suspend+0xc4>)
    f3b4:	22ac      	movs	r2, #172	; 0xac
    f3b6:	4629      	mov	r1, r5
    f3b8:	481b      	ldr	r0, [pc, #108]	; (f428 <z_impl_k_thread_suspend+0xc8>)
    f3ba:	f001 fe35 	bl	11028 <printk>
    f3be:	21ac      	movs	r1, #172	; 0xac
    f3c0:	4628      	mov	r0, r5
    f3c2:	f001 ff53 	bl	1126c <assert_post_action>
	__asm__ volatile(
    f3c6:	f386 8811 	msr	BASEPRI, r6
    f3ca:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    f3ce:	2501      	movs	r5, #1
    f3d0:	b9b5      	cbnz	r5, f400 <z_impl_k_thread_suspend+0xa0>
	return (thread->base.thread_state & state) != 0U;
    f3d2:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    f3d4:	f994 300d 	ldrsb.w	r3, [r4, #13]
    f3d8:	2b00      	cmp	r3, #0
    f3da:	dbe2      	blt.n	f3a2 <z_impl_k_thread_suspend+0x42>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    f3dc:	7b63      	ldrb	r3, [r4, #13]
    f3de:	f043 0310 	orr.w	r3, r3, #16
    f3e2:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    f3e4:	4b12      	ldr	r3, [pc, #72]	; (f430 <z_impl_k_thread_suspend+0xd0>)
    f3e6:	6898      	ldr	r0, [r3, #8]
    f3e8:	42a0      	cmp	r0, r4
    f3ea:	bf14      	ite	ne
    f3ec:	2000      	movne	r0, #0
    f3ee:	2001      	moveq	r0, #1
    f3f0:	f7ff fbfe 	bl	ebf0 <update_cache>
    f3f4:	480a      	ldr	r0, [pc, #40]	; (f420 <z_impl_k_thread_suspend+0xc0>)
    f3f6:	f7fe fe1d 	bl	e034 <z_spin_unlock_valid>
    f3fa:	2800      	cmp	r0, #0
    f3fc:	d1e3      	bne.n	f3c6 <z_impl_k_thread_suspend+0x66>
    f3fe:	e7d8      	b.n	f3b2 <z_impl_k_thread_suspend+0x52>
	if (thread == _current) {
    f400:	4b0b      	ldr	r3, [pc, #44]	; (f430 <z_impl_k_thread_suspend+0xd0>)
    f402:	689b      	ldr	r3, [r3, #8]
    f404:	42a3      	cmp	r3, r4
    f406:	d000      	beq.n	f40a <z_impl_k_thread_suspend+0xaa>
}
    f408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    f40a:	f04f 0320 	mov.w	r3, #32
    f40e:	f3ef 8011 	mrs	r0, BASEPRI
    f412:	f383 8812 	msr	BASEPRI_MAX, r3
    f416:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    f41a:	f005 fa97 	bl	1494c <z_reschedule_irqlock>
    f41e:	e7f3      	b.n	f408 <z_impl_k_thread_suspend+0xa8>
    f420:	20001634 	.word	0x20001634
    f424:	00015bc8 	.word	0x00015bc8
    f428:	00015984 	.word	0x00015984
    f42c:	20001618 	.word	0x20001618
    f430:	200015f8 	.word	0x200015f8

0000f434 <k_sched_unlock>:
{
    f434:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    f436:	2400      	movs	r4, #0
    f438:	f04f 0320 	mov.w	r3, #32
    f43c:	f3ef 8511 	mrs	r5, BASEPRI
    f440:	f383 8812 	msr	BASEPRI_MAX, r3
    f444:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f448:	482f      	ldr	r0, [pc, #188]	; (f508 <k_sched_unlock+0xd4>)
    f44a:	f7fe fde3 	bl	e014 <z_spin_lock_valid>
    f44e:	b118      	cbz	r0, f458 <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
    f450:	482d      	ldr	r0, [pc, #180]	; (f508 <k_sched_unlock+0xd4>)
    f452:	f7fe fdff 	bl	e054 <z_spin_lock_set_owner>
	return k;
    f456:	e033      	b.n	f4c0 <k_sched_unlock+0x8c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f458:	4e2c      	ldr	r6, [pc, #176]	; (f50c <k_sched_unlock+0xd8>)
    f45a:	2281      	movs	r2, #129	; 0x81
    f45c:	4631      	mov	r1, r6
    f45e:	482c      	ldr	r0, [pc, #176]	; (f510 <k_sched_unlock+0xdc>)
    f460:	f001 fde2 	bl	11028 <printk>
    f464:	2181      	movs	r1, #129	; 0x81
    f466:	4630      	mov	r0, r6
    f468:	f001 ff00 	bl	1126c <assert_post_action>
    f46c:	e7f0      	b.n	f450 <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
    f46e:	4c29      	ldr	r4, [pc, #164]	; (f514 <k_sched_unlock+0xe0>)
    f470:	f240 3285 	movw	r2, #901	; 0x385
    f474:	4621      	mov	r1, r4
    f476:	4826      	ldr	r0, [pc, #152]	; (f510 <k_sched_unlock+0xdc>)
    f478:	f001 fdd6 	bl	11028 <printk>
    f47c:	f240 3185 	movw	r1, #901	; 0x385
    f480:	4620      	mov	r0, r4
    f482:	f001 fef3 	bl	1126c <assert_post_action>
    f486:	e021      	b.n	f4cc <k_sched_unlock+0x98>
		__ASSERT(!arch_is_in_isr(), "");
    f488:	4c22      	ldr	r4, [pc, #136]	; (f514 <k_sched_unlock+0xe0>)
    f48a:	f240 3286 	movw	r2, #902	; 0x386
    f48e:	4621      	mov	r1, r4
    f490:	481f      	ldr	r0, [pc, #124]	; (f510 <k_sched_unlock+0xdc>)
    f492:	f001 fdc9 	bl	11028 <printk>
    f496:	f240 3186 	movw	r1, #902	; 0x386
    f49a:	4620      	mov	r0, r4
    f49c:	f001 fee6 	bl	1126c <assert_post_action>
    f4a0:	e018      	b.n	f4d4 <k_sched_unlock+0xa0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f4a2:	4c1a      	ldr	r4, [pc, #104]	; (f50c <k_sched_unlock+0xd8>)
    f4a4:	22ac      	movs	r2, #172	; 0xac
    f4a6:	4621      	mov	r1, r4
    f4a8:	4819      	ldr	r0, [pc, #100]	; (f510 <k_sched_unlock+0xdc>)
    f4aa:	f001 fdbd 	bl	11028 <printk>
    f4ae:	21ac      	movs	r1, #172	; 0xac
    f4b0:	4620      	mov	r0, r4
    f4b2:	f001 fedb 	bl	1126c <assert_post_action>
	__asm__ volatile(
    f4b6:	f385 8811 	msr	BASEPRI, r5
    f4ba:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    f4be:	2401      	movs	r4, #1
    f4c0:	b9b4      	cbnz	r4, f4f0 <k_sched_unlock+0xbc>
		__ASSERT(_current->base.sched_locked != 0U, "");
    f4c2:	4b15      	ldr	r3, [pc, #84]	; (f518 <k_sched_unlock+0xe4>)
    f4c4:	689b      	ldr	r3, [r3, #8]
    f4c6:	7bdb      	ldrb	r3, [r3, #15]
    f4c8:	2b00      	cmp	r3, #0
    f4ca:	d0d0      	beq.n	f46e <k_sched_unlock+0x3a>
    f4cc:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    f4d0:	2b00      	cmp	r3, #0
    f4d2:	d1d9      	bne.n	f488 <k_sched_unlock+0x54>
		++_current->base.sched_locked;
    f4d4:	4b10      	ldr	r3, [pc, #64]	; (f518 <k_sched_unlock+0xe4>)
    f4d6:	689a      	ldr	r2, [r3, #8]
    f4d8:	7bd3      	ldrb	r3, [r2, #15]
    f4da:	3301      	adds	r3, #1
    f4dc:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    f4de:	2000      	movs	r0, #0
    f4e0:	f7ff fb86 	bl	ebf0 <update_cache>
    f4e4:	4808      	ldr	r0, [pc, #32]	; (f508 <k_sched_unlock+0xd4>)
    f4e6:	f7fe fda5 	bl	e034 <z_spin_unlock_valid>
    f4ea:	2800      	cmp	r0, #0
    f4ec:	d1e3      	bne.n	f4b6 <k_sched_unlock+0x82>
    f4ee:	e7d8      	b.n	f4a2 <k_sched_unlock+0x6e>
	__asm__ volatile(
    f4f0:	f04f 0320 	mov.w	r3, #32
    f4f4:	f3ef 8011 	mrs	r0, BASEPRI
    f4f8:	f383 8812 	msr	BASEPRI_MAX, r3
    f4fc:	f3bf 8f6f 	isb	sy
    f500:	f005 fa24 	bl	1494c <z_reschedule_irqlock>
}
    f504:	bd70      	pop	{r4, r5, r6, pc}
    f506:	bf00      	nop
    f508:	20001634 	.word	0x20001634
    f50c:	00015bc8 	.word	0x00015bc8
    f510:	00015984 	.word	0x00015984
    f514:	000172e4 	.word	0x000172e4
    f518:	200015f8 	.word	0x200015f8

0000f51c <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    f51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    f51e:	7b43      	ldrb	r3, [r0, #13]
    f520:	f013 0f08 	tst.w	r3, #8
    f524:	d145      	bne.n	f5b2 <end_thread+0x96>
    f526:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    f528:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
    f52c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    f530:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    f532:	f013 0f80 	tst.w	r3, #128	; 0x80
    f536:	d114      	bne.n	f562 <end_thread+0x46>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    f538:	68ab      	ldr	r3, [r5, #8]
    f53a:	b15b      	cbz	r3, f554 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    f53c:	4628      	mov	r0, r5
    f53e:	f7ff f9b1 	bl	e8a4 <pended_on_thread>
    f542:	4629      	mov	r1, r5
    f544:	f7ff fb34 	bl	ebb0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    f548:	7b6b      	ldrb	r3, [r5, #13]
    f54a:	f023 0302 	bic.w	r3, r3, #2
    f54e:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    f550:	2300      	movs	r3, #0
    f552:	60ab      	str	r3, [r5, #8]
    f554:	f105 0018 	add.w	r0, r5, #24
    f558:	f000 fc18 	bl	fd8c <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    f55c:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    f560:	e01c      	b.n	f59c <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f566:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    f568:	4601      	mov	r1, r0
    f56a:	4812      	ldr	r0, [pc, #72]	; (f5b4 <end_thread+0x98>)
    f56c:	f7ff fb20 	bl	ebb0 <z_priq_dumb_remove>
}
    f570:	e7e2      	b.n	f538 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    f572:	4620      	mov	r0, r4
    f574:	f7ff f996 	bl	e8a4 <pended_on_thread>
    f578:	4621      	mov	r1, r4
    f57a:	f7ff fb19 	bl	ebb0 <z_priq_dumb_remove>
    f57e:	7b63      	ldrb	r3, [r4, #13]
    f580:	f023 0302 	bic.w	r3, r3, #2
    f584:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    f586:	2600      	movs	r6, #0
    f588:	60a6      	str	r6, [r4, #8]
    f58a:	f104 0018 	add.w	r0, r4, #24
    f58e:	f000 fbfd 	bl	fd8c <z_abort_timeout>
    f592:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    f596:	4620      	mov	r0, r4
    f598:	f7ff fc3e 	bl	ee18 <ready_thread>
	return list->head == list;
    f59c:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f59e:	42bc      	cmp	r4, r7
    f5a0:	d001      	beq.n	f5a6 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    f5a2:	2c00      	cmp	r4, #0
    f5a4:	d1e5      	bne.n	f572 <end_thread+0x56>
		update_cache(1);
    f5a6:	2001      	movs	r0, #1
    f5a8:	f7ff fb22 	bl	ebf0 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    f5ac:	4628      	mov	r0, r5
    f5ae:	f7fe fd59 	bl	e064 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    f5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f5b4:	20001618 	.word	0x20001618

0000f5b8 <z_unpend1_no_timeout>:
{
    f5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f5ba:	4607      	mov	r7, r0
	LOCKED(&sched_spinlock) {
    f5bc:	2500      	movs	r5, #0
    f5be:	f04f 0320 	mov.w	r3, #32
    f5c2:	f3ef 8611 	mrs	r6, BASEPRI
    f5c6:	f383 8812 	msr	BASEPRI_MAX, r3
    f5ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f5ce:	481e      	ldr	r0, [pc, #120]	; (f648 <z_unpend1_no_timeout+0x90>)
    f5d0:	f7fe fd20 	bl	e014 <z_spin_lock_valid>
    f5d4:	b120      	cbz	r0, f5e0 <z_unpend1_no_timeout+0x28>
	z_spin_lock_set_owner(l);
    f5d6:	481c      	ldr	r0, [pc, #112]	; (f648 <z_unpend1_no_timeout+0x90>)
    f5d8:	f7fe fd3c 	bl	e054 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    f5dc:	2400      	movs	r4, #0
	return k;
    f5de:	e01e      	b.n	f61e <z_unpend1_no_timeout+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f5e0:	4c1a      	ldr	r4, [pc, #104]	; (f64c <z_unpend1_no_timeout+0x94>)
    f5e2:	2281      	movs	r2, #129	; 0x81
    f5e4:	4621      	mov	r1, r4
    f5e6:	481a      	ldr	r0, [pc, #104]	; (f650 <z_unpend1_no_timeout+0x98>)
    f5e8:	f001 fd1e 	bl	11028 <printk>
    f5ec:	2181      	movs	r1, #129	; 0x81
    f5ee:	4620      	mov	r0, r4
    f5f0:	f001 fe3c 	bl	1126c <assert_post_action>
    f5f4:	e7ef      	b.n	f5d6 <z_unpend1_no_timeout+0x1e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    f5f6:	f7ff f955 	bl	e8a4 <pended_on_thread>
    f5fa:	4621      	mov	r1, r4
    f5fc:	f7ff fad8 	bl	ebb0 <z_priq_dumb_remove>
    f600:	7b63      	ldrb	r3, [r4, #13]
    f602:	f023 0302 	bic.w	r3, r3, #2
    f606:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    f608:	2300      	movs	r3, #0
    f60a:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f60c:	480e      	ldr	r0, [pc, #56]	; (f648 <z_unpend1_no_timeout+0x90>)
    f60e:	f7fe fd11 	bl	e034 <z_spin_unlock_valid>
    f612:	b160      	cbz	r0, f62e <z_unpend1_no_timeout+0x76>
	__asm__ volatile(
    f614:	f386 8811 	msr	BASEPRI, r6
    f618:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    f61c:	2501      	movs	r5, #1
    f61e:	b98d      	cbnz	r5, f644 <z_unpend1_no_timeout+0x8c>
		thread = _priq_wait_best(&wait_q->waitq);
    f620:	4638      	mov	r0, r7
    f622:	f005 f9a8 	bl	14976 <z_priq_dumb_best>
		if (thread != NULL) {
    f626:	4604      	mov	r4, r0
    f628:	2800      	cmp	r0, #0
    f62a:	d1e4      	bne.n	f5f6 <z_unpend1_no_timeout+0x3e>
    f62c:	e7ee      	b.n	f60c <z_unpend1_no_timeout+0x54>
    f62e:	4d07      	ldr	r5, [pc, #28]	; (f64c <z_unpend1_no_timeout+0x94>)
    f630:	22ac      	movs	r2, #172	; 0xac
    f632:	4629      	mov	r1, r5
    f634:	4806      	ldr	r0, [pc, #24]	; (f650 <z_unpend1_no_timeout+0x98>)
    f636:	f001 fcf7 	bl	11028 <printk>
    f63a:	21ac      	movs	r1, #172	; 0xac
    f63c:	4628      	mov	r0, r5
    f63e:	f001 fe15 	bl	1126c <assert_post_action>
    f642:	e7e7      	b.n	f614 <z_unpend1_no_timeout+0x5c>
}
    f644:	4620      	mov	r0, r4
    f646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f648:	20001634 	.word	0x20001634
    f64c:	00015bc8 	.word	0x00015bc8
    f650:	00015984 	.word	0x00015984

0000f654 <z_unpend_first_thread>:
{
    f654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f656:	4607      	mov	r7, r0
	LOCKED(&sched_spinlock) {
    f658:	2500      	movs	r5, #0
	__asm__ volatile(
    f65a:	f04f 0320 	mov.w	r3, #32
    f65e:	f3ef 8611 	mrs	r6, BASEPRI
    f662:	f383 8812 	msr	BASEPRI_MAX, r3
    f666:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f66a:	4820      	ldr	r0, [pc, #128]	; (f6ec <z_unpend_first_thread+0x98>)
    f66c:	f7fe fcd2 	bl	e014 <z_spin_lock_valid>
    f670:	b120      	cbz	r0, f67c <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
    f672:	481e      	ldr	r0, [pc, #120]	; (f6ec <z_unpend_first_thread+0x98>)
    f674:	f7fe fcee 	bl	e054 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    f678:	2400      	movs	r4, #0
	return k;
    f67a:	e022      	b.n	f6c2 <z_unpend_first_thread+0x6e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f67c:	4c1c      	ldr	r4, [pc, #112]	; (f6f0 <z_unpend_first_thread+0x9c>)
    f67e:	2281      	movs	r2, #129	; 0x81
    f680:	4621      	mov	r1, r4
    f682:	481c      	ldr	r0, [pc, #112]	; (f6f4 <z_unpend_first_thread+0xa0>)
    f684:	f001 fcd0 	bl	11028 <printk>
    f688:	2181      	movs	r1, #129	; 0x81
    f68a:	4620      	mov	r0, r4
    f68c:	f001 fdee 	bl	1126c <assert_post_action>
    f690:	e7ef      	b.n	f672 <z_unpend_first_thread+0x1e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    f692:	f7ff f907 	bl	e8a4 <pended_on_thread>
    f696:	4621      	mov	r1, r4
    f698:	f7ff fa8a 	bl	ebb0 <z_priq_dumb_remove>
    f69c:	7b63      	ldrb	r3, [r4, #13]
    f69e:	f023 0302 	bic.w	r3, r3, #2
    f6a2:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    f6a4:	2300      	movs	r3, #0
    f6a6:	60a3      	str	r3, [r4, #8]
    f6a8:	f104 0018 	add.w	r0, r4, #24
    f6ac:	f000 fb6e 	bl	fd8c <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f6b0:	480e      	ldr	r0, [pc, #56]	; (f6ec <z_unpend_first_thread+0x98>)
    f6b2:	f7fe fcbf 	bl	e034 <z_spin_unlock_valid>
    f6b6:	b160      	cbz	r0, f6d2 <z_unpend_first_thread+0x7e>
	__asm__ volatile(
    f6b8:	f386 8811 	msr	BASEPRI, r6
    f6bc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    f6c0:	2501      	movs	r5, #1
    f6c2:	b98d      	cbnz	r5, f6e8 <z_unpend_first_thread+0x94>
		thread = _priq_wait_best(&wait_q->waitq);
    f6c4:	4638      	mov	r0, r7
    f6c6:	f005 f956 	bl	14976 <z_priq_dumb_best>
		if (thread != NULL) {
    f6ca:	4604      	mov	r4, r0
    f6cc:	2800      	cmp	r0, #0
    f6ce:	d1e0      	bne.n	f692 <z_unpend_first_thread+0x3e>
    f6d0:	e7ee      	b.n	f6b0 <z_unpend_first_thread+0x5c>
    f6d2:	4d07      	ldr	r5, [pc, #28]	; (f6f0 <z_unpend_first_thread+0x9c>)
    f6d4:	22ac      	movs	r2, #172	; 0xac
    f6d6:	4629      	mov	r1, r5
    f6d8:	4806      	ldr	r0, [pc, #24]	; (f6f4 <z_unpend_first_thread+0xa0>)
    f6da:	f001 fca5 	bl	11028 <printk>
    f6de:	21ac      	movs	r1, #172	; 0xac
    f6e0:	4628      	mov	r0, r5
    f6e2:	f001 fdc3 	bl	1126c <assert_post_action>
    f6e6:	e7e7      	b.n	f6b8 <z_unpend_first_thread+0x64>
}
    f6e8:	4620      	mov	r0, r4
    f6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f6ec:	20001634 	.word	0x20001634
    f6f0:	00015bc8 	.word	0x00015bc8
    f6f4:	00015984 	.word	0x00015984

0000f6f8 <z_sched_init>:
{
    f6f8:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    f6fa:	4804      	ldr	r0, [pc, #16]	; (f70c <z_sched_init+0x14>)
    f6fc:	f005 f942 	bl	14984 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    f700:	2100      	movs	r1, #0
    f702:	4608      	mov	r0, r1
    f704:	f7ff f90c 	bl	e920 <k_sched_time_slice_set>
}
    f708:	bd08      	pop	{r3, pc}
    f70a:	bf00      	nop
    f70c:	20001614 	.word	0x20001614

0000f710 <z_impl_k_yield>:
{
    f710:	b570      	push	{r4, r5, r6, lr}
    f712:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    f716:	2b00      	cmp	r3, #0
    f718:	d148      	bne.n	f7ac <z_impl_k_yield+0x9c>
	__asm__ volatile(
    f71a:	f04f 0320 	mov.w	r3, #32
    f71e:	f3ef 8611 	mrs	r6, BASEPRI
    f722:	f383 8812 	msr	BASEPRI_MAX, r3
    f726:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f72a:	483b      	ldr	r0, [pc, #236]	; (f818 <z_impl_k_yield+0x108>)
    f72c:	f7fe fc72 	bl	e014 <z_spin_lock_valid>
    f730:	2800      	cmp	r0, #0
    f732:	d048      	beq.n	f7c6 <z_impl_k_yield+0xb6>
	z_spin_lock_set_owner(l);
    f734:	4838      	ldr	r0, [pc, #224]	; (f818 <z_impl_k_yield+0x108>)
    f736:	f7fe fc8d 	bl	e054 <z_spin_lock_set_owner>
		dequeue_thread(_current);
    f73a:	4c38      	ldr	r4, [pc, #224]	; (f81c <z_impl_k_yield+0x10c>)
    f73c:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f73e:	7b4b      	ldrb	r3, [r1, #13]
    f740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f744:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    f746:	f104 0020 	add.w	r0, r4, #32
    f74a:	f7ff fa31 	bl	ebb0 <z_priq_dumb_remove>
	queue_thread(_current);
    f74e:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    f750:	7b6b      	ldrb	r3, [r5, #13]
    f752:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f756:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    f758:	4b31      	ldr	r3, [pc, #196]	; (f820 <z_impl_k_yield+0x110>)
    f75a:	429d      	cmp	r5, r3
    f75c:	d03e      	beq.n	f7dc <z_impl_k_yield+0xcc>
	return list->head == list;
    f75e:	4b2f      	ldr	r3, [pc, #188]	; (f81c <z_impl_k_yield+0x10c>)
    f760:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f764:	429c      	cmp	r4, r3
    f766:	d04a      	beq.n	f7fe <z_impl_k_yield+0xee>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f768:	b16c      	cbz	r4, f786 <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
    f76a:	4621      	mov	r1, r4
    f76c:	4628      	mov	r0, r5
    f76e:	f005 f8e3 	bl	14938 <z_sched_prio_cmp>
    f772:	2800      	cmp	r0, #0
    f774:	dc3d      	bgt.n	f7f2 <z_impl_k_yield+0xe2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    f776:	b134      	cbz	r4, f786 <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
    f778:	4b28      	ldr	r3, [pc, #160]	; (f81c <z_impl_k_yield+0x10c>)
    f77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f77c:	429c      	cmp	r4, r3
    f77e:	d002      	beq.n	f786 <z_impl_k_yield+0x76>
    f780:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f782:	2c00      	cmp	r4, #0
    f784:	d1f0      	bne.n	f768 <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
    f786:	4b25      	ldr	r3, [pc, #148]	; (f81c <z_impl_k_yield+0x10c>)
    f788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    f78a:	f103 0120 	add.w	r1, r3, #32
    f78e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    f790:	606a      	str	r2, [r5, #4]
	tail->next = node;
    f792:	6015      	str	r5, [r2, #0]
	list->tail = node;
    f794:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    f796:	2001      	movs	r0, #1
    f798:	f7ff fa2a 	bl	ebf0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f79c:	481e      	ldr	r0, [pc, #120]	; (f818 <z_impl_k_yield+0x108>)
    f79e:	f7fe fc49 	bl	e034 <z_spin_unlock_valid>
    f7a2:	b370      	cbz	r0, f802 <z_impl_k_yield+0xf2>
    f7a4:	4630      	mov	r0, r6
    f7a6:	f7f5 ffe9 	bl	577c <arch_swap>
}
    f7aa:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    f7ac:	4c1d      	ldr	r4, [pc, #116]	; (f824 <z_impl_k_yield+0x114>)
    f7ae:	f240 42dc 	movw	r2, #1244	; 0x4dc
    f7b2:	4621      	mov	r1, r4
    f7b4:	481c      	ldr	r0, [pc, #112]	; (f828 <z_impl_k_yield+0x118>)
    f7b6:	f001 fc37 	bl	11028 <printk>
    f7ba:	f240 41dc 	movw	r1, #1244	; 0x4dc
    f7be:	4620      	mov	r0, r4
    f7c0:	f001 fd54 	bl	1126c <assert_post_action>
    f7c4:	e7a9      	b.n	f71a <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f7c6:	4c19      	ldr	r4, [pc, #100]	; (f82c <z_impl_k_yield+0x11c>)
    f7c8:	2281      	movs	r2, #129	; 0x81
    f7ca:	4621      	mov	r1, r4
    f7cc:	4816      	ldr	r0, [pc, #88]	; (f828 <z_impl_k_yield+0x118>)
    f7ce:	f001 fc2b 	bl	11028 <printk>
    f7d2:	2181      	movs	r1, #129	; 0x81
    f7d4:	4620      	mov	r0, r4
    f7d6:	f001 fd49 	bl	1126c <assert_post_action>
    f7da:	e7ab      	b.n	f734 <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    f7dc:	4c11      	ldr	r4, [pc, #68]	; (f824 <z_impl_k_yield+0x114>)
    f7de:	22ba      	movs	r2, #186	; 0xba
    f7e0:	4621      	mov	r1, r4
    f7e2:	4811      	ldr	r0, [pc, #68]	; (f828 <z_impl_k_yield+0x118>)
    f7e4:	f001 fc20 	bl	11028 <printk>
    f7e8:	21ba      	movs	r1, #186	; 0xba
    f7ea:	4620      	mov	r0, r4
    f7ec:	f001 fd3e 	bl	1126c <assert_post_action>
    f7f0:	e7b5      	b.n	f75e <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
    f7f2:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    f7f4:	606b      	str	r3, [r5, #4]
	node->next = successor;
    f7f6:	602c      	str	r4, [r5, #0]
	prev->next = node;
    f7f8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    f7fa:	6065      	str	r5, [r4, #4]
}
    f7fc:	e7cb      	b.n	f796 <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f7fe:	2400      	movs	r4, #0
    f800:	e7b2      	b.n	f768 <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f802:	4c0a      	ldr	r4, [pc, #40]	; (f82c <z_impl_k_yield+0x11c>)
    f804:	22c3      	movs	r2, #195	; 0xc3
    f806:	4621      	mov	r1, r4
    f808:	4807      	ldr	r0, [pc, #28]	; (f828 <z_impl_k_yield+0x118>)
    f80a:	f001 fc0d 	bl	11028 <printk>
    f80e:	21c3      	movs	r1, #195	; 0xc3
    f810:	4620      	mov	r0, r4
    f812:	f001 fd2b 	bl	1126c <assert_post_action>
    f816:	e7c5      	b.n	f7a4 <z_impl_k_yield+0x94>
    f818:	20001634 	.word	0x20001634
    f81c:	200015f8 	.word	0x200015f8
    f820:	200004f0 	.word	0x200004f0
    f824:	000172e4 	.word	0x000172e4
    f828:	00015984 	.word	0x00015984
    f82c:	00015bc8 	.word	0x00015bc8

0000f830 <z_tick_sleep>:
{
    f830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f834:	4604      	mov	r4, r0
    f836:	460d      	mov	r5, r1
    f838:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    f83c:	2b00      	cmp	r3, #0
    f83e:	d14e      	bne.n	f8de <z_tick_sleep+0xae>
	if (ticks == 0) {
    f840:	ea54 0305 	orrs.w	r3, r4, r5
    f844:	d059      	beq.n	f8fa <z_tick_sleep+0xca>
	if (Z_TICK_ABS(ticks) <= 0) {
    f846:	f06f 0301 	mvn.w	r3, #1
    f84a:	1b1e      	subs	r6, r3, r4
    f84c:	f04f 33ff 	mov.w	r3, #4294967295
    f850:	eb63 0705 	sbc.w	r7, r3, r5
    f854:	2e01      	cmp	r6, #1
    f856:	f177 0300 	sbcs.w	r3, r7, #0
    f85a:	db52      	blt.n	f902 <z_tick_sleep+0xd2>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    f85c:	f06f 0601 	mvn.w	r6, #1
    f860:	1b36      	subs	r6, r6, r4
    f862:	f04f 0320 	mov.w	r3, #32
    f866:	f3ef 8911 	mrs	r9, BASEPRI
    f86a:	f383 8812 	msr	BASEPRI_MAX, r3
    f86e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f872:	4838      	ldr	r0, [pc, #224]	; (f954 <z_tick_sleep+0x124>)
    f874:	f7fe fbce 	bl	e014 <z_spin_lock_valid>
    f878:	2800      	cmp	r0, #0
    f87a:	d046      	beq.n	f90a <z_tick_sleep+0xda>
	z_spin_lock_set_owner(l);
    f87c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; f954 <z_tick_sleep+0x124>
    f880:	4640      	mov	r0, r8
    f882:	f7fe fbe7 	bl	e054 <z_spin_lock_set_owner>
	pending_current = _current;
    f886:	4f34      	ldr	r7, [pc, #208]	; (f958 <z_tick_sleep+0x128>)
    f888:	68b8      	ldr	r0, [r7, #8]
    f88a:	4b34      	ldr	r3, [pc, #208]	; (f95c <z_tick_sleep+0x12c>)
    f88c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    f88e:	f7ff fbff 	bl	f090 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    f892:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    f894:	4622      	mov	r2, r4
    f896:	462b      	mov	r3, r5
    f898:	4931      	ldr	r1, [pc, #196]	; (f960 <z_tick_sleep+0x130>)
    f89a:	3018      	adds	r0, #24
    f89c:	f000 f992 	bl	fbc4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    f8a0:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    f8a2:	7b53      	ldrb	r3, [r2, #13]
    f8a4:	f043 0310 	orr.w	r3, r3, #16
    f8a8:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f8aa:	4640      	mov	r0, r8
    f8ac:	f7fe fbc2 	bl	e034 <z_spin_unlock_valid>
    f8b0:	b3b0      	cbz	r0, f920 <z_tick_sleep+0xf0>
    f8b2:	4648      	mov	r0, r9
    f8b4:	f7f5 ff62 	bl	577c <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    f8b8:	4b27      	ldr	r3, [pc, #156]	; (f958 <z_tick_sleep+0x128>)
    f8ba:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
    f8bc:	7b5b      	ldrb	r3, [r3, #13]
    f8be:	f013 0f10 	tst.w	r3, #16
    f8c2:	d138      	bne.n	f936 <z_tick_sleep+0x106>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    f8c4:	2500      	movs	r5, #0
    f8c6:	f005 f878 	bl	149ba <sys_clock_tick_get_32>
    f8ca:	1a34      	subs	r4, r6, r0
    f8cc:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
    f8d0:	2c01      	cmp	r4, #1
    f8d2:	f175 0300 	sbcs.w	r3, r5, #0
    f8d6:	da3b      	bge.n	f950 <z_tick_sleep+0x120>
	return 0;
    f8d8:	2000      	movs	r0, #0
}
    f8da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
    f8de:	f8df 808c 	ldr.w	r8, [pc, #140]	; f96c <z_tick_sleep+0x13c>
    f8e2:	f44f 629f 	mov.w	r2, #1272	; 0x4f8
    f8e6:	4641      	mov	r1, r8
    f8e8:	481e      	ldr	r0, [pc, #120]	; (f964 <z_tick_sleep+0x134>)
    f8ea:	f001 fb9d 	bl	11028 <printk>
    f8ee:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
    f8f2:	4640      	mov	r0, r8
    f8f4:	f001 fcba 	bl	1126c <assert_post_action>
    f8f8:	e7a2      	b.n	f840 <z_tick_sleep+0x10>
	z_impl_k_yield();
    f8fa:	f7ff ff09 	bl	f710 <z_impl_k_yield>
		return 0;
    f8fe:	2000      	movs	r0, #0
    f900:	e7eb      	b.n	f8da <z_tick_sleep+0xaa>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    f902:	f005 f85a 	bl	149ba <sys_clock_tick_get_32>
    f906:	1906      	adds	r6, r0, r4
    f908:	e7ab      	b.n	f862 <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f90a:	4f17      	ldr	r7, [pc, #92]	; (f968 <z_tick_sleep+0x138>)
    f90c:	2281      	movs	r2, #129	; 0x81
    f90e:	4639      	mov	r1, r7
    f910:	4814      	ldr	r0, [pc, #80]	; (f964 <z_tick_sleep+0x134>)
    f912:	f001 fb89 	bl	11028 <printk>
    f916:	2181      	movs	r1, #129	; 0x81
    f918:	4638      	mov	r0, r7
    f91a:	f001 fca7 	bl	1126c <assert_post_action>
    f91e:	e7ad      	b.n	f87c <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f920:	4c11      	ldr	r4, [pc, #68]	; (f968 <z_tick_sleep+0x138>)
    f922:	22c3      	movs	r2, #195	; 0xc3
    f924:	4621      	mov	r1, r4
    f926:	480f      	ldr	r0, [pc, #60]	; (f964 <z_tick_sleep+0x134>)
    f928:	f001 fb7e 	bl	11028 <printk>
    f92c:	21c3      	movs	r1, #195	; 0xc3
    f92e:	4620      	mov	r0, r4
    f930:	f001 fc9c 	bl	1126c <assert_post_action>
    f934:	e7bd      	b.n	f8b2 <z_tick_sleep+0x82>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    f936:	4c0d      	ldr	r4, [pc, #52]	; (f96c <z_tick_sleep+0x13c>)
    f938:	f240 5219 	movw	r2, #1305	; 0x519
    f93c:	4621      	mov	r1, r4
    f93e:	4809      	ldr	r0, [pc, #36]	; (f964 <z_tick_sleep+0x134>)
    f940:	f001 fb72 	bl	11028 <printk>
    f944:	f240 5119 	movw	r1, #1305	; 0x519
    f948:	4620      	mov	r0, r4
    f94a:	f001 fc8f 	bl	1126c <assert_post_action>
    f94e:	e7b9      	b.n	f8c4 <z_tick_sleep+0x94>
		return ticks;
    f950:	4620      	mov	r0, r4
    f952:	e7c2      	b.n	f8da <z_tick_sleep+0xaa>
    f954:	20001634 	.word	0x20001634
    f958:	200015f8 	.word	0x200015f8
    f95c:	20001630 	.word	0x20001630
    f960:	0000efd5 	.word	0x0000efd5
    f964:	00015984 	.word	0x00015984
    f968:	00015bc8 	.word	0x00015bc8
    f96c:	000172e4 	.word	0x000172e4

0000f970 <z_impl_k_sleep>:
{
    f970:	b570      	push	{r4, r5, r6, lr}
    f972:	4604      	mov	r4, r0
    f974:	460d      	mov	r5, r1
    f976:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    f97a:	bb13      	cbnz	r3, f9c2 <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f97c:	f1b5 3fff 	cmp.w	r5, #4294967295
    f980:	bf08      	it	eq
    f982:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    f986:	d029      	beq.n	f9dc <z_impl_k_sleep+0x6c>
	ticks = z_tick_sleep(ticks);
    f988:	4620      	mov	r0, r4
    f98a:	4629      	mov	r1, r5
    f98c:	f7ff ff50 	bl	f830 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    f990:	4604      	mov	r4, r0
    f992:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
    f994:	0169      	lsls	r1, r5, #5
    f996:	0143      	lsls	r3, r0, #5
    f998:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    f99c:	1a18      	subs	r0, r3, r0
    f99e:	eb62 0305 	sbc.w	r3, r2, r5
    f9a2:	009a      	lsls	r2, r3, #2
    f9a4:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    f9a8:	0081      	lsls	r1, r0, #2
    f9aa:	4613      	mov	r3, r2
    f9ac:	1908      	adds	r0, r1, r4
    f9ae:	eb45 0303 	adc.w	r3, r5, r3
    f9b2:	00da      	lsls	r2, r3, #3
    f9b4:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    f9b8:	00c1      	lsls	r1, r0, #3
    f9ba:	0bc8      	lsrs	r0, r1, #15
    f9bc:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    f9c0:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    f9c2:	4e0a      	ldr	r6, [pc, #40]	; (f9ec <z_impl_k_sleep+0x7c>)
    f9c4:	f44f 62a5 	mov.w	r2, #1320	; 0x528
    f9c8:	4631      	mov	r1, r6
    f9ca:	4809      	ldr	r0, [pc, #36]	; (f9f0 <z_impl_k_sleep+0x80>)
    f9cc:	f001 fb2c 	bl	11028 <printk>
    f9d0:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    f9d4:	4630      	mov	r0, r6
    f9d6:	f001 fc49 	bl	1126c <assert_post_action>
    f9da:	e7cf      	b.n	f97c <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
    f9dc:	4b05      	ldr	r3, [pc, #20]	; (f9f4 <z_impl_k_sleep+0x84>)
    f9de:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    f9e0:	f7ff fcbe 	bl	f360 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    f9e4:	f04f 30ff 	mov.w	r0, #4294967295
    f9e8:	e7ea      	b.n	f9c0 <z_impl_k_sleep+0x50>
    f9ea:	bf00      	nop
    f9ec:	000172e4 	.word	0x000172e4
    f9f0:	00015984 	.word	0x00015984
    f9f4:	200015f8 	.word	0x200015f8

0000f9f8 <z_impl_z_current_get>:
}
    f9f8:	4b01      	ldr	r3, [pc, #4]	; (fa00 <z_impl_z_current_get+0x8>)
    f9fa:	6898      	ldr	r0, [r3, #8]
    f9fc:	4770      	bx	lr
    f9fe:	bf00      	nop
    fa00:	200015f8 	.word	0x200015f8

0000fa04 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    fa04:	b570      	push	{r4, r5, r6, lr}
    fa06:	4604      	mov	r4, r0
    fa08:	f04f 0320 	mov.w	r3, #32
    fa0c:	f3ef 8511 	mrs	r5, BASEPRI
    fa10:	f383 8812 	msr	BASEPRI_MAX, r3
    fa14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fa18:	4834      	ldr	r0, [pc, #208]	; (faec <z_thread_abort+0xe8>)
    fa1a:	f7fe fafb 	bl	e014 <z_spin_lock_valid>
    fa1e:	b1b8      	cbz	r0, fa50 <z_thread_abort+0x4c>
	z_spin_lock_set_owner(l);
    fa20:	4832      	ldr	r0, [pc, #200]	; (faec <z_thread_abort+0xe8>)
    fa22:	f7fe fb17 	bl	e054 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    fa26:	7b63      	ldrb	r3, [r4, #13]
    fa28:	f013 0f08 	tst.w	r3, #8
    fa2c:	d11b      	bne.n	fa66 <z_thread_abort+0x62>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
    fa2e:	4620      	mov	r0, r4
    fa30:	f7ff fd74 	bl	f51c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    fa34:	4b2e      	ldr	r3, [pc, #184]	; (faf0 <z_thread_abort+0xec>)
    fa36:	689b      	ldr	r3, [r3, #8]
    fa38:	42a3      	cmp	r3, r4
    fa3a:	d028      	beq.n	fa8e <z_thread_abort+0x8a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fa3c:	482b      	ldr	r0, [pc, #172]	; (faec <z_thread_abort+0xe8>)
    fa3e:	f7fe faf9 	bl	e034 <z_spin_unlock_valid>
    fa42:	2800      	cmp	r0, #0
    fa44:	d046      	beq.n	fad4 <z_thread_abort+0xd0>
	__asm__ volatile(
    fa46:	f385 8811 	msr	BASEPRI, r5
    fa4a:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    fa4e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fa50:	4e28      	ldr	r6, [pc, #160]	; (faf4 <z_thread_abort+0xf0>)
    fa52:	2281      	movs	r2, #129	; 0x81
    fa54:	4631      	mov	r1, r6
    fa56:	4828      	ldr	r0, [pc, #160]	; (faf8 <z_thread_abort+0xf4>)
    fa58:	f001 fae6 	bl	11028 <printk>
    fa5c:	2181      	movs	r1, #129	; 0x81
    fa5e:	4630      	mov	r0, r6
    fa60:	f001 fc04 	bl	1126c <assert_post_action>
    fa64:	e7dc      	b.n	fa20 <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fa66:	4821      	ldr	r0, [pc, #132]	; (faec <z_thread_abort+0xe8>)
    fa68:	f7fe fae4 	bl	e034 <z_spin_unlock_valid>
    fa6c:	b120      	cbz	r0, fa78 <z_thread_abort+0x74>
    fa6e:	f385 8811 	msr	BASEPRI, r5
    fa72:	f3bf 8f6f 	isb	sy
		return;
    fa76:	e7ea      	b.n	fa4e <z_thread_abort+0x4a>
    fa78:	4c1e      	ldr	r4, [pc, #120]	; (faf4 <z_thread_abort+0xf0>)
    fa7a:	22ac      	movs	r2, #172	; 0xac
    fa7c:	4621      	mov	r1, r4
    fa7e:	481e      	ldr	r0, [pc, #120]	; (faf8 <z_thread_abort+0xf4>)
    fa80:	f001 fad2 	bl	11028 <printk>
    fa84:	21ac      	movs	r1, #172	; 0xac
    fa86:	4620      	mov	r0, r4
    fa88:	f001 fbf0 	bl	1126c <assert_post_action>
    fa8c:	e7ef      	b.n	fa6e <z_thread_abort+0x6a>
    fa8e:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
    fa92:	2b00      	cmp	r3, #0
    fa94:	d1d2      	bne.n	fa3c <z_thread_abort+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fa96:	4815      	ldr	r0, [pc, #84]	; (faec <z_thread_abort+0xe8>)
    fa98:	f7fe facc 	bl	e034 <z_spin_unlock_valid>
    fa9c:	b178      	cbz	r0, fabe <z_thread_abort+0xba>
    fa9e:	4628      	mov	r0, r5
    faa0:	f7f5 fe6c 	bl	577c <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    faa4:	4c15      	ldr	r4, [pc, #84]	; (fafc <z_thread_abort+0xf8>)
    faa6:	f240 624b 	movw	r2, #1611	; 0x64b
    faaa:	4621      	mov	r1, r4
    faac:	4812      	ldr	r0, [pc, #72]	; (faf8 <z_thread_abort+0xf4>)
    faae:	f001 fabb 	bl	11028 <printk>
    fab2:	f240 614b 	movw	r1, #1611	; 0x64b
    fab6:	4620      	mov	r0, r4
    fab8:	f001 fbd8 	bl	1126c <assert_post_action>
    fabc:	e7be      	b.n	fa3c <z_thread_abort+0x38>
    fabe:	4c0d      	ldr	r4, [pc, #52]	; (faf4 <z_thread_abort+0xf0>)
    fac0:	22c3      	movs	r2, #195	; 0xc3
    fac2:	4621      	mov	r1, r4
    fac4:	480c      	ldr	r0, [pc, #48]	; (faf8 <z_thread_abort+0xf4>)
    fac6:	f001 faaf 	bl	11028 <printk>
    faca:	21c3      	movs	r1, #195	; 0xc3
    facc:	4620      	mov	r0, r4
    face:	f001 fbcd 	bl	1126c <assert_post_action>
    fad2:	e7e4      	b.n	fa9e <z_thread_abort+0x9a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fad4:	4c07      	ldr	r4, [pc, #28]	; (faf4 <z_thread_abort+0xf0>)
    fad6:	22ac      	movs	r2, #172	; 0xac
    fad8:	4621      	mov	r1, r4
    fada:	4807      	ldr	r0, [pc, #28]	; (faf8 <z_thread_abort+0xf4>)
    fadc:	f001 faa4 	bl	11028 <printk>
    fae0:	21ac      	movs	r1, #172	; 0xac
    fae2:	4620      	mov	r0, r4
    fae4:	f001 fbc2 	bl	1126c <assert_post_action>
    fae8:	e7ad      	b.n	fa46 <z_thread_abort+0x42>
    faea:	bf00      	nop
    faec:	20001634 	.word	0x20001634
    faf0:	200015f8 	.word	0x200015f8
    faf4:	00015bc8 	.word	0x00015bc8
    faf8:	00015984 	.word	0x00015984
    fafc:	000172e4 	.word	0x000172e4

0000fb00 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    fb00:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    fb02:	4806      	ldr	r0, [pc, #24]	; (fb1c <z_data_copy+0x1c>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    fb04:	4a06      	ldr	r2, [pc, #24]	; (fb20 <z_data_copy+0x20>)
    fb06:	1a12      	subs	r2, r2, r0
    fb08:	4906      	ldr	r1, [pc, #24]	; (fb24 <z_data_copy+0x24>)
    fb0a:	f004 ff9a 	bl	14a42 <memcpy>
    fb0e:	4a06      	ldr	r2, [pc, #24]	; (fb28 <z_data_copy+0x28>)
    fb10:	4906      	ldr	r1, [pc, #24]	; (fb2c <z_data_copy+0x2c>)
    fb12:	4807      	ldr	r0, [pc, #28]	; (fb30 <z_data_copy+0x30>)
    fb14:	f004 ff95 	bl	14a42 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    fb18:	bd08      	pop	{r3, pc}
    fb1a:	bf00      	nop
    fb1c:	20000000 	.word	0x20000000
    fb20:	200003e8 	.word	0x200003e8
    fb24:	000174d0 	.word	0x000174d0
    fb28:	00000000 	.word	0x00000000
    fb2c:	000174d0 	.word	0x000174d0
    fb30:	20000000 	.word	0x20000000

0000fb34 <first>:
	return list->head == list;
    fb34:	4b03      	ldr	r3, [pc, #12]	; (fb44 <first+0x10>)
    fb36:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fb38:	4298      	cmp	r0, r3
    fb3a:	d000      	beq.n	fb3e <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    fb3c:	4770      	bx	lr
    fb3e:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    fb40:	e7fc      	b.n	fb3c <first+0x8>
    fb42:	bf00      	nop
    fb44:	20000184 	.word	0x20000184

0000fb48 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    fb48:	b130      	cbz	r0, fb58 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    fb4a:	4a04      	ldr	r2, [pc, #16]	; (fb5c <next+0x14>)
    fb4c:	6852      	ldr	r2, [r2, #4]
    fb4e:	4290      	cmp	r0, r2
    fb50:	d001      	beq.n	fb56 <next+0xe>
    fb52:	6800      	ldr	r0, [r0, #0]
    fb54:	4770      	bx	lr
    fb56:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    fb58:	4770      	bx	lr
    fb5a:	bf00      	nop
    fb5c:	20000184 	.word	0x20000184

0000fb60 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    fb60:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    fb62:	4b04      	ldr	r3, [pc, #16]	; (fb74 <elapsed+0x14>)
    fb64:	681b      	ldr	r3, [r3, #0]
    fb66:	b10b      	cbz	r3, fb6c <elapsed+0xc>
    fb68:	2000      	movs	r0, #0
}
    fb6a:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    fb6c:	f7f9 fbde 	bl	932c <sys_clock_elapsed>
    fb70:	e7fb      	b.n	fb6a <elapsed+0xa>
    fb72:	bf00      	nop
    fb74:	20001640 	.word	0x20001640

0000fb78 <next_timeout>:

static int32_t next_timeout(void)
{
    fb78:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    fb7a:	f7ff ffdb 	bl	fb34 <first>
    fb7e:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    fb80:	f7ff ffee 	bl	fb60 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    fb84:	b18c      	cbz	r4, fbaa <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    fb86:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    fb8a:	1a12      	subs	r2, r2, r0
    fb8c:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    fb90:	2a01      	cmp	r2, #1
    fb92:	f173 0100 	sbcs.w	r1, r3, #0
    fb96:	db11      	blt.n	fbbc <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    fb98:	4610      	mov	r0, r2
    fb9a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    fb9e:	f173 0300 	sbcs.w	r3, r3, #0
    fba2:	db04      	blt.n	fbae <next_timeout+0x36>
    fba4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    fba8:	e001      	b.n	fbae <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
    fbaa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    fbae:	4b04      	ldr	r3, [pc, #16]	; (fbc0 <next_timeout+0x48>)
    fbb0:	691b      	ldr	r3, [r3, #16]
    fbb2:	b113      	cbz	r3, fbba <next_timeout+0x42>
    fbb4:	4283      	cmp	r3, r0
    fbb6:	da00      	bge.n	fbba <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
    fbb8:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    fbba:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    fbbc:	2000      	movs	r0, #0
    fbbe:	e7f6      	b.n	fbae <next_timeout+0x36>
    fbc0:	200015f8 	.word	0x200015f8

0000fbc4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    fbc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fbc8:	b087      	sub	sp, #28
    fbca:	9100      	str	r1, [sp, #0]
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    fbcc:	f1b3 3fff 	cmp.w	r3, #4294967295
    fbd0:	bf08      	it	eq
    fbd2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    fbd6:	f000 80c7 	beq.w	fd68 <__kernel_ram_size+0x150>
    fbda:	4604      	mov	r4, r0
    fbdc:	4616      	mov	r6, r2
    fbde:	461f      	mov	r7, r3
	return node->next != NULL;
    fbe0:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    fbe2:	b14b      	cbz	r3, fbf8 <z_add_timeout+0x34>
    fbe4:	4d62      	ldr	r5, [pc, #392]	; (fd70 <__kernel_ram_size+0x158>)
    fbe6:	225d      	movs	r2, #93	; 0x5d
    fbe8:	4629      	mov	r1, r5
    fbea:	4862      	ldr	r0, [pc, #392]	; (fd74 <__kernel_ram_size+0x15c>)
    fbec:	f001 fa1c 	bl	11028 <printk>
    fbf0:	215d      	movs	r1, #93	; 0x5d
    fbf2:	4628      	mov	r0, r5
    fbf4:	f001 fb3a 	bl	1126c <assert_post_action>
	to->fn = fn;
    fbf8:	9b00      	ldr	r3, [sp, #0]
    fbfa:	60a3      	str	r3, [r4, #8]

	LOCKED(&timeout_lock) {
    fbfc:	2500      	movs	r5, #0
	__asm__ volatile(
    fbfe:	f04f 0320 	mov.w	r3, #32
    fc02:	f3ef 8211 	mrs	r2, BASEPRI
    fc06:	f383 8812 	msr	BASEPRI_MAX, r3
    fc0a:	f3bf 8f6f 	isb	sy
    fc0e:	9200      	str	r2, [sp, #0]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fc10:	4859      	ldr	r0, [pc, #356]	; (fd78 <__kernel_ram_size+0x160>)
    fc12:	f7fe f9ff 	bl	e014 <z_spin_lock_valid>
    fc16:	b140      	cbz	r0, fc2a <__kernel_ram_size+0x12>
	z_spin_lock_set_owner(l);
    fc18:	4857      	ldr	r0, [pc, #348]	; (fd78 <__kernel_ram_size+0x160>)
    fc1a:	f7fe fa1b 	bl	e054 <z_spin_lock_set_owner>
	return k;
    fc1e:	9b00      	ldr	r3, [sp, #0]
    fc20:	9305      	str	r3, [sp, #20]
    fc22:	e9cd ab02 	strd	sl, fp, [sp, #8]
    fc26:	46a3      	mov	fp, r4
    fc28:	e03a      	b.n	fca0 <__kernel_ram_size+0x88>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fc2a:	2281      	movs	r2, #129	; 0x81
    fc2c:	4953      	ldr	r1, [pc, #332]	; (fd7c <__kernel_ram_size+0x164>)
    fc2e:	4851      	ldr	r0, [pc, #324]	; (fd74 <__kernel_ram_size+0x15c>)
    fc30:	f001 f9fa 	bl	11028 <printk>
    fc34:	2181      	movs	r1, #129	; 0x81
    fc36:	4851      	ldr	r0, [pc, #324]	; (fd7c <__kernel_ram_size+0x164>)
    fc38:	f001 fb18 	bl	1126c <assert_post_action>
    fc3c:	e7ec      	b.n	fc18 <__kernel_ram_size>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
    fc3e:	2201      	movs	r2, #1
    fc40:	2300      	movs	r3, #0
    fc42:	e051      	b.n	fce8 <__kernel_ram_size+0xd0>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    fc44:	f7ff ff8c 	bl	fb60 <elapsed>
    fc48:	1833      	adds	r3, r6, r0
    fc4a:	eb47 74e0 	adc.w	r4, r7, r0, asr #31
    fc4e:	1c5a      	adds	r2, r3, #1
    fc50:	f144 0300 	adc.w	r3, r4, #0
    fc54:	f8cb 2010 	str.w	r2, [fp, #16]
    fc58:	f8cb 3014 	str.w	r3, [fp, #20]
    fc5c:	e048      	b.n	fcf0 <__kernel_ram_size+0xd8>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    fc5e:	9b00      	ldr	r3, [sp, #0]
    fc60:	1ae2      	subs	r2, r4, r3
    fc62:	9b01      	ldr	r3, [sp, #4]
    fc64:	eb65 0303 	sbc.w	r3, r5, r3
    fc68:	6102      	str	r2, [r0, #16]
    fc6a:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    fc6c:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    fc6e:	f8cb 3004 	str.w	r3, [fp, #4]
	node->next = successor;
    fc72:	f8cb 0000 	str.w	r0, [fp]
	prev->next = node;
    fc76:	f8c3 b000 	str.w	fp, [r3]
	successor->prev = node;
    fc7a:	f8c0 b004 	str.w	fp, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    fc7e:	2800      	cmp	r0, #0
    fc80:	d04f      	beq.n	fd22 <__kernel_ram_size+0x10a>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    fc82:	f7ff ff57 	bl	fb34 <first>
    fc86:	4583      	cmp	fp, r0
    fc88:	d056      	beq.n	fd38 <__kernel_ram_size+0x120>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fc8a:	483b      	ldr	r0, [pc, #236]	; (fd78 <__kernel_ram_size+0x160>)
    fc8c:	f7fe f9d2 	bl	e034 <z_spin_unlock_valid>
    fc90:	2800      	cmp	r0, #0
    fc92:	d05e      	beq.n	fd52 <__kernel_ram_size+0x13a>
	__asm__ volatile(
    fc94:	9b05      	ldr	r3, [sp, #20]
    fc96:	f383 8811 	msr	BASEPRI, r3
    fc9a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    fc9e:	2501      	movs	r5, #1
    fca0:	2d00      	cmp	r5, #0
    fca2:	d161      	bne.n	fd68 <__kernel_ram_size+0x150>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    fca4:	f06f 0301 	mvn.w	r3, #1
    fca8:	ebb3 0806 	subs.w	r8, r3, r6
    fcac:	f04f 30ff 	mov.w	r0, #4294967295
    fcb0:	eb60 0907 	sbc.w	r9, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    fcb4:	f1b8 0f00 	cmp.w	r8, #0
    fcb8:	f179 0300 	sbcs.w	r3, r9, #0
    fcbc:	dbc2      	blt.n	fc44 <__kernel_ram_size+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    fcbe:	4a30      	ldr	r2, [pc, #192]	; (fd80 <__kernel_ram_size+0x168>)
    fcc0:	6813      	ldr	r3, [r2, #0]
    fcc2:	6852      	ldr	r2, [r2, #4]
    fcc4:	18f3      	adds	r3, r6, r3
    fcc6:	eb47 0202 	adc.w	r2, r7, r2
    fcca:	f06f 0101 	mvn.w	r1, #1
    fcce:	1acb      	subs	r3, r1, r3
    fcd0:	9302      	str	r3, [sp, #8]
    fcd2:	eb60 0302 	sbc.w	r3, r0, r2
    fcd6:	9303      	str	r3, [sp, #12]
			to->dticks = MAX(1, ticks);
    fcd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    fcdc:	4602      	mov	r2, r0
    fcde:	460b      	mov	r3, r1
    fce0:	2801      	cmp	r0, #1
    fce2:	f171 0100 	sbcs.w	r1, r1, #0
    fce6:	dbaa      	blt.n	fc3e <__kernel_ram_size+0x26>
    fce8:	f8cb 2010 	str.w	r2, [fp, #16]
    fcec:	f8cb 3014 	str.w	r3, [fp, #20]
		for (t = first(); t != NULL; t = next(t)) {
    fcf0:	f7ff ff20 	bl	fb34 <first>
    fcf4:	2800      	cmp	r0, #0
    fcf6:	d0c2      	beq.n	fc7e <__kernel_ram_size+0x66>
			if (t->dticks > to->dticks) {
    fcf8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    fcfc:	e9db 2304 	ldrd	r2, r3, [fp, #16]
    fd00:	e9cd 2300 	strd	r2, r3, [sp]
    fd04:	42a2      	cmp	r2, r4
    fd06:	41ab      	sbcs	r3, r5
    fd08:	dba9      	blt.n	fc5e <__kernel_ram_size+0x46>
			to->dticks -= t->dticks;
    fd0a:	9b00      	ldr	r3, [sp, #0]
    fd0c:	1b1a      	subs	r2, r3, r4
    fd0e:	9b01      	ldr	r3, [sp, #4]
    fd10:	eb63 0305 	sbc.w	r3, r3, r5
    fd14:	f8cb 2010 	str.w	r2, [fp, #16]
    fd18:	f8cb 3014 	str.w	r3, [fp, #20]
		for (t = first(); t != NULL; t = next(t)) {
    fd1c:	f7ff ff14 	bl	fb48 <next>
    fd20:	e7e8      	b.n	fcf4 <__kernel_ram_size+0xdc>
	sys_dnode_t *const tail = list->tail;
    fd22:	4b18      	ldr	r3, [pc, #96]	; (fd84 <__kernel_ram_size+0x16c>)
    fd24:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    fd26:	f8cb 3000 	str.w	r3, [fp]
	node->prev = tail;
    fd2a:	f8cb 2004 	str.w	r2, [fp, #4]
	tail->next = node;
    fd2e:	f8c2 b000 	str.w	fp, [r2]
	list->tail = node;
    fd32:	f8c3 b004 	str.w	fp, [r3, #4]
}
    fd36:	e7a4      	b.n	fc82 <__kernel_ram_size+0x6a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    fd38:	f7ff ff1e 	bl	fb78 <next_timeout>

			if (next_time == 0 ||
    fd3c:	4603      	mov	r3, r0
    fd3e:	b118      	cbz	r0, fd48 <__kernel_ram_size+0x130>
			    _current_cpu->slice_ticks != next_time) {
    fd40:	4a11      	ldr	r2, [pc, #68]	; (fd88 <__kernel_ram_size+0x170>)
    fd42:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    fd44:	4282      	cmp	r2, r0
    fd46:	d0a0      	beq.n	fc8a <__kernel_ram_size+0x72>
				sys_clock_set_timeout(next_time, false);
    fd48:	2100      	movs	r1, #0
    fd4a:	4618      	mov	r0, r3
    fd4c:	f7f9 faba 	bl	92c4 <sys_clock_set_timeout>
    fd50:	e79b      	b.n	fc8a <__kernel_ram_size+0x72>
    fd52:	4c0a      	ldr	r4, [pc, #40]	; (fd7c <__kernel_ram_size+0x164>)
    fd54:	22ac      	movs	r2, #172	; 0xac
    fd56:	4621      	mov	r1, r4
    fd58:	4806      	ldr	r0, [pc, #24]	; (fd74 <__kernel_ram_size+0x15c>)
    fd5a:	f001 f965 	bl	11028 <printk>
    fd5e:	21ac      	movs	r1, #172	; 0xac
    fd60:	4620      	mov	r0, r4
    fd62:	f001 fa83 	bl	1126c <assert_post_action>
    fd66:	e795      	b.n	fc94 <__kernel_ram_size+0x7c>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    fd68:	b007      	add	sp, #28
    fd6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fd6e:	bf00      	nop
    fd70:	00017308 	.word	0x00017308
    fd74:	00015984 	.word	0x00015984
    fd78:	20001644 	.word	0x20001644
    fd7c:	00015bc8 	.word	0x00015bc8
    fd80:	20000650 	.word	0x20000650
    fd84:	20000184 	.word	0x20000184
    fd88:	200015f8 	.word	0x200015f8

0000fd8c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    fd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd90:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
    fd92:	2400      	movs	r4, #0
	__asm__ volatile(
    fd94:	f04f 0320 	mov.w	r3, #32
    fd98:	f3ef 8711 	mrs	r7, BASEPRI
    fd9c:	f383 8812 	msr	BASEPRI_MAX, r3
    fda0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fda4:	481a      	ldr	r0, [pc, #104]	; (fe10 <z_abort_timeout+0x84>)
    fda6:	f7fe f935 	bl	e014 <z_spin_lock_valid>
    fdaa:	b128      	cbz	r0, fdb8 <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
    fdac:	4818      	ldr	r0, [pc, #96]	; (fe10 <z_abort_timeout+0x84>)
    fdae:	f7fe f951 	bl	e054 <z_spin_lock_set_owner>
	int ret = -EINVAL;
    fdb2:	f06f 0815 	mvn.w	r8, #21
	return k;
    fdb6:	e017      	b.n	fde8 <z_abort_timeout+0x5c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fdb8:	4e16      	ldr	r6, [pc, #88]	; (fe14 <z_abort_timeout+0x88>)
    fdba:	2281      	movs	r2, #129	; 0x81
    fdbc:	4631      	mov	r1, r6
    fdbe:	4816      	ldr	r0, [pc, #88]	; (fe18 <z_abort_timeout+0x8c>)
    fdc0:	f001 f932 	bl	11028 <printk>
    fdc4:	2181      	movs	r1, #129	; 0x81
    fdc6:	4630      	mov	r0, r6
    fdc8:	f001 fa50 	bl	1126c <assert_post_action>
    fdcc:	e7ee      	b.n	fdac <z_abort_timeout+0x20>
		if (sys_dnode_is_linked(&to->node)) {
			remove_timeout(to);
    fdce:	4628      	mov	r0, r5
    fdd0:	f004 fddc 	bl	1498c <remove_timeout>
			ret = 0;
    fdd4:	46b0      	mov	r8, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fdd6:	480e      	ldr	r0, [pc, #56]	; (fe10 <z_abort_timeout+0x84>)
    fdd8:	f7fe f92c 	bl	e034 <z_spin_unlock_valid>
    fddc:	b150      	cbz	r0, fdf4 <z_abort_timeout+0x68>
	__asm__ volatile(
    fdde:	f387 8811 	msr	BASEPRI, r7
    fde2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    fde6:	2401      	movs	r4, #1
    fde8:	4626      	mov	r6, r4
    fdea:	b974      	cbnz	r4, fe0a <z_abort_timeout+0x7e>
	return node->next != NULL;
    fdec:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
    fdee:	2b00      	cmp	r3, #0
    fdf0:	d1ed      	bne.n	fdce <z_abort_timeout+0x42>
    fdf2:	e7f0      	b.n	fdd6 <z_abort_timeout+0x4a>
    fdf4:	4c07      	ldr	r4, [pc, #28]	; (fe14 <z_abort_timeout+0x88>)
    fdf6:	22ac      	movs	r2, #172	; 0xac
    fdf8:	4621      	mov	r1, r4
    fdfa:	4807      	ldr	r0, [pc, #28]	; (fe18 <z_abort_timeout+0x8c>)
    fdfc:	f001 f914 	bl	11028 <printk>
    fe00:	21ac      	movs	r1, #172	; 0xac
    fe02:	4620      	mov	r0, r4
    fe04:	f001 fa32 	bl	1126c <assert_post_action>
    fe08:	e7e9      	b.n	fdde <z_abort_timeout+0x52>
		}
	}

	return ret;
}
    fe0a:	4640      	mov	r0, r8
    fe0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fe10:	20001644 	.word	0x20001644
    fe14:	00015bc8 	.word	0x00015bc8
    fe18:	00015984 	.word	0x00015984

0000fe1c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    fe1c:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
    fe1e:	2500      	movs	r5, #0
	__asm__ volatile(
    fe20:	f04f 0320 	mov.w	r3, #32
    fe24:	f3ef 8611 	mrs	r6, BASEPRI
    fe28:	f383 8812 	msr	BASEPRI_MAX, r3
    fe2c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fe30:	4817      	ldr	r0, [pc, #92]	; (fe90 <z_get_next_timeout_expiry+0x74>)
    fe32:	f7fe f8ef 	bl	e014 <z_spin_lock_valid>
    fe36:	b128      	cbz	r0, fe44 <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
    fe38:	4815      	ldr	r0, [pc, #84]	; (fe90 <z_get_next_timeout_expiry+0x74>)
    fe3a:	f7fe f90b 	bl	e054 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    fe3e:	f04f 34ff 	mov.w	r4, #4294967295
	return k;
    fe42:	e019      	b.n	fe78 <z_get_next_timeout_expiry+0x5c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fe44:	4c13      	ldr	r4, [pc, #76]	; (fe94 <z_get_next_timeout_expiry+0x78>)
    fe46:	2281      	movs	r2, #129	; 0x81
    fe48:	4621      	mov	r1, r4
    fe4a:	4813      	ldr	r0, [pc, #76]	; (fe98 <z_get_next_timeout_expiry+0x7c>)
    fe4c:	f001 f8ec 	bl	11028 <printk>
    fe50:	2181      	movs	r1, #129	; 0x81
    fe52:	4620      	mov	r0, r4
    fe54:	f001 fa0a 	bl	1126c <assert_post_action>
    fe58:	e7ee      	b.n	fe38 <z_get_next_timeout_expiry+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fe5a:	4d0e      	ldr	r5, [pc, #56]	; (fe94 <z_get_next_timeout_expiry+0x78>)
    fe5c:	22ac      	movs	r2, #172	; 0xac
    fe5e:	4629      	mov	r1, r5
    fe60:	480d      	ldr	r0, [pc, #52]	; (fe98 <z_get_next_timeout_expiry+0x7c>)
    fe62:	f001 f8e1 	bl	11028 <printk>
    fe66:	21ac      	movs	r1, #172	; 0xac
    fe68:	4628      	mov	r0, r5
    fe6a:	f001 f9ff 	bl	1126c <assert_post_action>
	__asm__ volatile(
    fe6e:	f386 8811 	msr	BASEPRI, r6
    fe72:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    fe76:	2501      	movs	r5, #1
    fe78:	b945      	cbnz	r5, fe8c <z_get_next_timeout_expiry+0x70>
		ret = next_timeout();
    fe7a:	f7ff fe7d 	bl	fb78 <next_timeout>
    fe7e:	4604      	mov	r4, r0
    fe80:	4803      	ldr	r0, [pc, #12]	; (fe90 <z_get_next_timeout_expiry+0x74>)
    fe82:	f7fe f8d7 	bl	e034 <z_spin_unlock_valid>
    fe86:	2800      	cmp	r0, #0
    fe88:	d1f1      	bne.n	fe6e <z_get_next_timeout_expiry+0x52>
    fe8a:	e7e6      	b.n	fe5a <z_get_next_timeout_expiry+0x3e>
	}
	return ret;
}
    fe8c:	4620      	mov	r0, r4
    fe8e:	bd70      	pop	{r4, r5, r6, pc}
    fe90:	20001644 	.word	0x20001644
    fe94:	00015bc8 	.word	0x00015bc8
    fe98:	00015984 	.word	0x00015984

0000fe9c <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    fe9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fea0:	4607      	mov	r7, r0
    fea2:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
    fea4:	2500      	movs	r5, #0
	__asm__ volatile(
    fea6:	f04f 0320 	mov.w	r3, #32
    feaa:	f3ef 8611 	mrs	r6, BASEPRI
    feae:	f383 8812 	msr	BASEPRI_MAX, r3
    feb2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    feb6:	4820      	ldr	r0, [pc, #128]	; (ff38 <z_set_timeout_expiry+0x9c>)
    feb8:	f7fe f8ac 	bl	e014 <z_spin_lock_valid>
    febc:	b118      	cbz	r0, fec6 <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
    febe:	481e      	ldr	r0, [pc, #120]	; (ff38 <z_set_timeout_expiry+0x9c>)
    fec0:	f7fe f8c8 	bl	e054 <z_spin_lock_set_owner>
	return k;
    fec4:	e019      	b.n	fefa <z_set_timeout_expiry+0x5e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fec6:	4c1d      	ldr	r4, [pc, #116]	; (ff3c <z_set_timeout_expiry+0xa0>)
    fec8:	2281      	movs	r2, #129	; 0x81
    feca:	4621      	mov	r1, r4
    fecc:	481c      	ldr	r0, [pc, #112]	; (ff40 <z_set_timeout_expiry+0xa4>)
    fece:	f001 f8ab 	bl	11028 <printk>
    fed2:	2181      	movs	r1, #129	; 0x81
    fed4:	4620      	mov	r0, r4
    fed6:	f001 f9c9 	bl	1126c <assert_post_action>
    feda:	e7f0      	b.n	febe <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    fedc:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    fede:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    fee2:	2801      	cmp	r0, #1
    fee4:	dd00      	ble.n	fee8 <z_set_timeout_expiry+0x4c>
    fee6:	b99c      	cbnz	r4, ff10 <z_set_timeout_expiry+0x74>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fee8:	4813      	ldr	r0, [pc, #76]	; (ff38 <z_set_timeout_expiry+0x9c>)
    feea:	f7fe f8a3 	bl	e034 <z_spin_unlock_valid>
    feee:	b1b0      	cbz	r0, ff1e <z_set_timeout_expiry+0x82>
	__asm__ volatile(
    fef0:	f386 8811 	msr	BASEPRI, r6
    fef4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    fef8:	2501      	movs	r5, #1
    fefa:	462c      	mov	r4, r5
    fefc:	b9d5      	cbnz	r5, ff34 <z_set_timeout_expiry+0x98>
		int next_to = next_timeout();
    fefe:	f7ff fe3b 	bl	fb78 <next_timeout>
			      || (ticks <= next_to);
    ff02:	f1b0 3fff 	cmp.w	r0, #4294967295
    ff06:	d0e9      	beq.n	fedc <z_set_timeout_expiry+0x40>
    ff08:	42b8      	cmp	r0, r7
    ff0a:	dbe8      	blt.n	fede <z_set_timeout_expiry+0x42>
    ff0c:	2401      	movs	r4, #1
    ff0e:	e7e6      	b.n	fede <z_set_timeout_expiry+0x42>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    ff10:	4641      	mov	r1, r8
    ff12:	42b8      	cmp	r0, r7
    ff14:	bfa8      	it	ge
    ff16:	4638      	movge	r0, r7
    ff18:	f7f9 f9d4 	bl	92c4 <sys_clock_set_timeout>
    ff1c:	e7e4      	b.n	fee8 <z_set_timeout_expiry+0x4c>
    ff1e:	4c07      	ldr	r4, [pc, #28]	; (ff3c <z_set_timeout_expiry+0xa0>)
    ff20:	22ac      	movs	r2, #172	; 0xac
    ff22:	4621      	mov	r1, r4
    ff24:	4806      	ldr	r0, [pc, #24]	; (ff40 <z_set_timeout_expiry+0xa4>)
    ff26:	f001 f87f 	bl	11028 <printk>
    ff2a:	21ac      	movs	r1, #172	; 0xac
    ff2c:	4620      	mov	r0, r4
    ff2e:	f001 f99d 	bl	1126c <assert_post_action>
    ff32:	e7dd      	b.n	fef0 <z_set_timeout_expiry+0x54>
		}
	}
}
    ff34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ff38:	20001644 	.word	0x20001644
    ff3c:	00015bc8 	.word	0x00015bc8
    ff40:	00015984 	.word	0x00015984

0000ff44 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    ff44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ff46:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    ff48:	f7fe fee2 	bl	ed10 <z_time_slice>
	__asm__ volatile(
    ff4c:	f04f 0320 	mov.w	r3, #32
    ff50:	f3ef 8411 	mrs	r4, BASEPRI
    ff54:	f383 8812 	msr	BASEPRI_MAX, r3
    ff58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ff5c:	484a      	ldr	r0, [pc, #296]	; (10088 <CONFIG_PM_SRAM_SIZE+0x88>)
    ff5e:	f7fe f859 	bl	e014 <z_spin_lock_valid>
    ff62:	b128      	cbz	r0, ff70 <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
    ff64:	4848      	ldr	r0, [pc, #288]	; (10088 <CONFIG_PM_SRAM_SIZE+0x88>)
    ff66:	f7fe f875 	bl	e054 <z_spin_lock_set_owner>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    ff6a:	4b48      	ldr	r3, [pc, #288]	; (1008c <CONFIG_PM_SRAM_SIZE+0x8c>)
    ff6c:	601d      	str	r5, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    ff6e:	e022      	b.n	ffb6 <sys_clock_announce+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ff70:	4e47      	ldr	r6, [pc, #284]	; (10090 <CONFIG_PM_SRAM_SIZE+0x90>)
    ff72:	2281      	movs	r2, #129	; 0x81
    ff74:	4631      	mov	r1, r6
    ff76:	4847      	ldr	r0, [pc, #284]	; (10094 <CONFIG_PM_SRAM_SIZE+0x94>)
    ff78:	f001 f856 	bl	11028 <printk>
    ff7c:	2181      	movs	r1, #129	; 0x81
    ff7e:	4630      	mov	r0, r6
    ff80:	f001 f974 	bl	1126c <assert_post_action>
    ff84:	e7ee      	b.n	ff64 <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ff86:	4e42      	ldr	r6, [pc, #264]	; (10090 <CONFIG_PM_SRAM_SIZE+0x90>)
    ff88:	22ac      	movs	r2, #172	; 0xac
    ff8a:	4631      	mov	r1, r6
    ff8c:	4841      	ldr	r0, [pc, #260]	; (10094 <CONFIG_PM_SRAM_SIZE+0x94>)
    ff8e:	f001 f84b 	bl	11028 <printk>
    ff92:	21ac      	movs	r1, #172	; 0xac
    ff94:	4630      	mov	r0, r6
    ff96:	f001 f969 	bl	1126c <assert_post_action>
    ff9a:	e030      	b.n	fffe <sys_clock_announce+0xba>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ff9c:	4d3c      	ldr	r5, [pc, #240]	; (10090 <CONFIG_PM_SRAM_SIZE+0x90>)
    ff9e:	2281      	movs	r2, #129	; 0x81
    ffa0:	4629      	mov	r1, r5
    ffa2:	483c      	ldr	r0, [pc, #240]	; (10094 <CONFIG_PM_SRAM_SIZE+0x94>)
    ffa4:	f001 f840 	bl	11028 <printk>
    ffa8:	2181      	movs	r1, #129	; 0x81
    ffaa:	4628      	mov	r0, r5
    ffac:	f001 f95e 	bl	1126c <assert_post_action>
	z_spin_lock_set_owner(l);
    ffb0:	4835      	ldr	r0, [pc, #212]	; (10088 <CONFIG_PM_SRAM_SIZE+0x88>)
    ffb2:	f7fe f84f 	bl	e054 <z_spin_lock_set_owner>
    ffb6:	f7ff fdbd 	bl	fb34 <first>
    ffba:	4605      	mov	r5, r0
    ffbc:	2800      	cmp	r0, #0
    ffbe:	d033      	beq.n	10028 <CONFIG_PM_SRAM_SIZE+0x28>
    ffc0:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    ffc4:	4b31      	ldr	r3, [pc, #196]	; (1008c <CONFIG_PM_SRAM_SIZE+0x8c>)
    ffc6:	6819      	ldr	r1, [r3, #0]
    ffc8:	17cb      	asrs	r3, r1, #31
    ffca:	42b1      	cmp	r1, r6
    ffcc:	41bb      	sbcs	r3, r7
    ffce:	db2b      	blt.n	10028 <CONFIG_PM_SRAM_SIZE+0x28>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    ffd0:	4831      	ldr	r0, [pc, #196]	; (10098 <CONFIG_PM_SRAM_SIZE+0x98>)
    ffd2:	e9d0 2300 	ldrd	r2, r3, [r0]
    ffd6:	1992      	adds	r2, r2, r6
    ffd8:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
    ffdc:	e9c0 2300 	strd	r2, r3, [r0]
		announce_remaining -= dt;
    ffe0:	1b89      	subs	r1, r1, r6
    ffe2:	4b2a      	ldr	r3, [pc, #168]	; (1008c <CONFIG_PM_SRAM_SIZE+0x8c>)
    ffe4:	6019      	str	r1, [r3, #0]
		t->dticks = 0;
    ffe6:	2200      	movs	r2, #0
    ffe8:	2300      	movs	r3, #0
    ffea:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
    ffee:	4628      	mov	r0, r5
    fff0:	f004 fccc 	bl	1498c <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fff4:	4824      	ldr	r0, [pc, #144]	; (10088 <CONFIG_PM_SRAM_SIZE+0x88>)
    fff6:	f7fe f81d 	bl	e034 <z_spin_unlock_valid>
    fffa:	2800      	cmp	r0, #0
    fffc:	d0c3      	beq.n	ff86 <sys_clock_announce+0x42>
	__asm__ volatile(
    fffe:	f384 8811 	msr	BASEPRI, r4
   10002:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   10006:	68ab      	ldr	r3, [r5, #8]
   10008:	4628      	mov	r0, r5
   1000a:	4798      	blx	r3
	__asm__ volatile(
   1000c:	f04f 0320 	mov.w	r3, #32
   10010:	f3ef 8411 	mrs	r4, BASEPRI
   10014:	f383 8812 	msr	BASEPRI_MAX, r3
   10018:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1001c:	481a      	ldr	r0, [pc, #104]	; (10088 <CONFIG_PM_SRAM_SIZE+0x88>)
   1001e:	f7fd fff9 	bl	e014 <z_spin_lock_valid>
   10022:	2800      	cmp	r0, #0
   10024:	d1c4      	bne.n	ffb0 <sys_clock_announce+0x6c>
   10026:	e7b9      	b.n	ff9c <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   10028:	b145      	cbz	r5, 1003c <CONFIG_PM_SRAM_SIZE+0x3c>
		first()->dticks -= announce_remaining;
   1002a:	4b18      	ldr	r3, [pc, #96]	; (1008c <CONFIG_PM_SRAM_SIZE+0x8c>)
   1002c:	6819      	ldr	r1, [r3, #0]
   1002e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   10032:	1a52      	subs	r2, r2, r1
   10034:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   10038:	e9c5 2304 	strd	r2, r3, [r5, #16]
	}

	curr_tick += announce_remaining;
   1003c:	4816      	ldr	r0, [pc, #88]	; (10098 <CONFIG_PM_SRAM_SIZE+0x98>)
   1003e:	4913      	ldr	r1, [pc, #76]	; (1008c <CONFIG_PM_SRAM_SIZE+0x8c>)
   10040:	680d      	ldr	r5, [r1, #0]
   10042:	e9d0 2300 	ldrd	r2, r3, [r0]
   10046:	1952      	adds	r2, r2, r5
   10048:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   1004c:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   10050:	2500      	movs	r5, #0
   10052:	600d      	str	r5, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   10054:	f7ff fd90 	bl	fb78 <next_timeout>
   10058:	4629      	mov	r1, r5
   1005a:	f7f9 f933 	bl	92c4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1005e:	480a      	ldr	r0, [pc, #40]	; (10088 <CONFIG_PM_SRAM_SIZE+0x88>)
   10060:	f7fd ffe8 	bl	e034 <z_spin_unlock_valid>
   10064:	b120      	cbz	r0, 10070 <CONFIG_PM_SRAM_SIZE+0x70>
	__asm__ volatile(
   10066:	f384 8811 	msr	BASEPRI, r4
   1006a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1006e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10070:	4d07      	ldr	r5, [pc, #28]	; (10090 <CONFIG_PM_SRAM_SIZE+0x90>)
   10072:	22ac      	movs	r2, #172	; 0xac
   10074:	4629      	mov	r1, r5
   10076:	4807      	ldr	r0, [pc, #28]	; (10094 <CONFIG_PM_SRAM_SIZE+0x94>)
   10078:	f000 ffd6 	bl	11028 <printk>
   1007c:	21ac      	movs	r1, #172	; 0xac
   1007e:	4628      	mov	r0, r5
   10080:	f001 f8f4 	bl	1126c <assert_post_action>
   10084:	e7ef      	b.n	10066 <CONFIG_PM_SRAM_SIZE+0x66>
   10086:	bf00      	nop
   10088:	20001644 	.word	0x20001644
   1008c:	20001640 	.word	0x20001640
   10090:	00015bc8 	.word	0x00015bc8
   10094:	00015984 	.word	0x00015984
   10098:	20000650 	.word	0x20000650

0001009c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1009c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   1009e:	2400      	movs	r4, #0
	__asm__ volatile(
   100a0:	f04f 0320 	mov.w	r3, #32
   100a4:	f3ef 8511 	mrs	r5, BASEPRI
   100a8:	f383 8812 	msr	BASEPRI_MAX, r3
   100ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   100b0:	481a      	ldr	r0, [pc, #104]	; (1011c <sys_clock_tick_get+0x80>)
   100b2:	f7fd ffaf 	bl	e014 <z_spin_lock_valid>
   100b6:	b128      	cbz	r0, 100c4 <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
   100b8:	4818      	ldr	r0, [pc, #96]	; (1011c <sys_clock_tick_get+0x80>)
   100ba:	f7fd ffcb 	bl	e054 <z_spin_lock_set_owner>
	uint64_t t = 0U;
   100be:	2600      	movs	r6, #0
   100c0:	2700      	movs	r7, #0
	return k;
   100c2:	e019      	b.n	100f8 <sys_clock_tick_get+0x5c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   100c4:	4e16      	ldr	r6, [pc, #88]	; (10120 <sys_clock_tick_get+0x84>)
   100c6:	2281      	movs	r2, #129	; 0x81
   100c8:	4631      	mov	r1, r6
   100ca:	4816      	ldr	r0, [pc, #88]	; (10124 <sys_clock_tick_get+0x88>)
   100cc:	f000 ffac 	bl	11028 <printk>
   100d0:	2181      	movs	r1, #129	; 0x81
   100d2:	4630      	mov	r0, r6
   100d4:	f001 f8ca 	bl	1126c <assert_post_action>
   100d8:	e7ee      	b.n	100b8 <sys_clock_tick_get+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   100da:	4c11      	ldr	r4, [pc, #68]	; (10120 <sys_clock_tick_get+0x84>)
   100dc:	22ac      	movs	r2, #172	; 0xac
   100de:	4621      	mov	r1, r4
   100e0:	4810      	ldr	r0, [pc, #64]	; (10124 <sys_clock_tick_get+0x88>)
   100e2:	f000 ffa1 	bl	11028 <printk>
   100e6:	21ac      	movs	r1, #172	; 0xac
   100e8:	4620      	mov	r0, r4
   100ea:	f001 f8bf 	bl	1126c <assert_post_action>
	__asm__ volatile(
   100ee:	f385 8811 	msr	BASEPRI, r5
   100f2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   100f6:	2401      	movs	r4, #1
   100f8:	b96c      	cbnz	r4, 10116 <sys_clock_tick_get+0x7a>
		t = curr_tick + sys_clock_elapsed();
   100fa:	f7f9 f917 	bl	932c <sys_clock_elapsed>
   100fe:	4b0a      	ldr	r3, [pc, #40]	; (10128 <sys_clock_tick_get+0x8c>)
   10100:	e9d3 6700 	ldrd	r6, r7, [r3]
   10104:	1836      	adds	r6, r6, r0
   10106:	f147 0700 	adc.w	r7, r7, #0
   1010a:	4804      	ldr	r0, [pc, #16]	; (1011c <sys_clock_tick_get+0x80>)
   1010c:	f7fd ff92 	bl	e034 <z_spin_unlock_valid>
   10110:	2800      	cmp	r0, #0
   10112:	d1ec      	bne.n	100ee <sys_clock_tick_get+0x52>
   10114:	e7e1      	b.n	100da <sys_clock_tick_get+0x3e>
	}
	return t;
}
   10116:	4630      	mov	r0, r6
   10118:	4639      	mov	r1, r7
   1011a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1011c:	20001644 	.word	0x20001644
   10120:	00015bc8 	.word	0x00015bc8
   10124:	00015984 	.word	0x00015984
   10128:	20000650 	.word	0x20000650

0001012c <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1012c:	b570      	push	{r4, r5, r6, lr}
   1012e:	4604      	mov	r4, r0
	__asm__ volatile(
   10130:	f04f 0320 	mov.w	r3, #32
   10134:	f3ef 8611 	mrs	r6, BASEPRI
   10138:	f383 8812 	msr	BASEPRI_MAX, r3
   1013c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10140:	4849      	ldr	r0, [pc, #292]	; (10268 <z_timer_expiration_handler+0x13c>)
   10142:	f7fd ff67 	bl	e014 <z_spin_lock_valid>
   10146:	2800      	cmp	r0, #0
   10148:	d049      	beq.n	101de <z_timer_expiration_handler+0xb2>
	z_spin_lock_set_owner(l);
   1014a:	4847      	ldr	r0, [pc, #284]	; (10268 <z_timer_expiration_handler+0x13c>)
   1014c:	f7fd ff82 	bl	e054 <z_spin_lock_set_owner>
	return k;
   10150:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   10152:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   10156:	ea52 0103 	orrs.w	r1, r2, r3
   1015a:	d005      	beq.n	10168 <z_timer_expiration_handler+0x3c>
   1015c:	f1b3 3fff 	cmp.w	r3, #4294967295
   10160:	bf08      	it	eq
   10162:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   10166:	d145      	bne.n	101f4 <z_timer_expiration_handler+0xc8>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   10168:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1016a:	3301      	adds	r3, #1
   1016c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1016e:	6a23      	ldr	r3, [r4, #32]
   10170:	b1db      	cbz	r3, 101aa <z_timer_expiration_handler+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10172:	483d      	ldr	r0, [pc, #244]	; (10268 <z_timer_expiration_handler+0x13c>)
   10174:	f7fd ff5e 	bl	e034 <z_spin_unlock_valid>
   10178:	2800      	cmp	r0, #0
   1017a:	d040      	beq.n	101fe <z_timer_expiration_handler+0xd2>
	__asm__ volatile(
   1017c:	f386 8811 	msr	BASEPRI, r6
   10180:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   10184:	6a23      	ldr	r3, [r4, #32]
   10186:	4620      	mov	r0, r4
   10188:	4798      	blx	r3
	__asm__ volatile(
   1018a:	f04f 0320 	mov.w	r3, #32
   1018e:	f3ef 8511 	mrs	r5, BASEPRI
   10192:	f383 8812 	msr	BASEPRI_MAX, r3
   10196:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1019a:	4833      	ldr	r0, [pc, #204]	; (10268 <z_timer_expiration_handler+0x13c>)
   1019c:	f7fd ff3a 	bl	e014 <z_spin_lock_valid>
   101a0:	2800      	cmp	r0, #0
   101a2:	d037      	beq.n	10214 <z_timer_expiration_handler+0xe8>
	z_spin_lock_set_owner(l);
   101a4:	4830      	ldr	r0, [pc, #192]	; (10268 <z_timer_expiration_handler+0x13c>)
   101a6:	f7fd ff55 	bl	e054 <z_spin_lock_set_owner>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   101aa:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   101ae:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   101b0:	42a3      	cmp	r3, r4
   101b2:	d03a      	beq.n	1022a <z_timer_expiration_handler+0xfe>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   101b4:	2c00      	cmp	r4, #0
   101b6:	d038      	beq.n	1022a <z_timer_expiration_handler+0xfe>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   101b8:	4620      	mov	r0, r4
   101ba:	f7fe fc13 	bl	e9e4 <z_unpend_thread_no_timeout>
   101be:	2300      	movs	r3, #0
   101c0:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   101c4:	4828      	ldr	r0, [pc, #160]	; (10268 <z_timer_expiration_handler+0x13c>)
   101c6:	f7fd ff35 	bl	e034 <z_spin_unlock_valid>
   101ca:	2800      	cmp	r0, #0
   101cc:	d041      	beq.n	10252 <z_timer_expiration_handler+0x126>
	__asm__ volatile(
   101ce:	f385 8811 	msr	BASEPRI, r5
   101d2:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   101d6:	4620      	mov	r0, r4
   101d8:	f7fe fe72 	bl	eec0 <z_ready_thread>
}
   101dc:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   101de:	4d23      	ldr	r5, [pc, #140]	; (1026c <z_timer_expiration_handler+0x140>)
   101e0:	2281      	movs	r2, #129	; 0x81
   101e2:	4629      	mov	r1, r5
   101e4:	4822      	ldr	r0, [pc, #136]	; (10270 <z_timer_expiration_handler+0x144>)
   101e6:	f000 ff1f 	bl	11028 <printk>
   101ea:	2181      	movs	r1, #129	; 0x81
   101ec:	4628      	mov	r0, r5
   101ee:	f001 f83d 	bl	1126c <assert_post_action>
   101f2:	e7aa      	b.n	1014a <z_timer_expiration_handler+0x1e>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   101f4:	491f      	ldr	r1, [pc, #124]	; (10274 <z_timer_expiration_handler+0x148>)
   101f6:	4620      	mov	r0, r4
   101f8:	f7ff fce4 	bl	fbc4 <z_add_timeout>
   101fc:	e7b4      	b.n	10168 <z_timer_expiration_handler+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   101fe:	4d1b      	ldr	r5, [pc, #108]	; (1026c <z_timer_expiration_handler+0x140>)
   10200:	22ac      	movs	r2, #172	; 0xac
   10202:	4629      	mov	r1, r5
   10204:	481a      	ldr	r0, [pc, #104]	; (10270 <z_timer_expiration_handler+0x144>)
   10206:	f000 ff0f 	bl	11028 <printk>
   1020a:	21ac      	movs	r1, #172	; 0xac
   1020c:	4628      	mov	r0, r5
   1020e:	f001 f82d 	bl	1126c <assert_post_action>
   10212:	e7b3      	b.n	1017c <z_timer_expiration_handler+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10214:	4e15      	ldr	r6, [pc, #84]	; (1026c <z_timer_expiration_handler+0x140>)
   10216:	2281      	movs	r2, #129	; 0x81
   10218:	4631      	mov	r1, r6
   1021a:	4815      	ldr	r0, [pc, #84]	; (10270 <z_timer_expiration_handler+0x144>)
   1021c:	f000 ff04 	bl	11028 <printk>
   10220:	2181      	movs	r1, #129	; 0x81
   10222:	4630      	mov	r0, r6
   10224:	f001 f822 	bl	1126c <assert_post_action>
   10228:	e7bc      	b.n	101a4 <z_timer_expiration_handler+0x78>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1022a:	480f      	ldr	r0, [pc, #60]	; (10268 <z_timer_expiration_handler+0x13c>)
   1022c:	f7fd ff02 	bl	e034 <z_spin_unlock_valid>
   10230:	b120      	cbz	r0, 1023c <z_timer_expiration_handler+0x110>
   10232:	f385 8811 	msr	BASEPRI, r5
   10236:	f3bf 8f6f 	isb	sy
		return;
   1023a:	e7cf      	b.n	101dc <z_timer_expiration_handler+0xb0>
   1023c:	4c0b      	ldr	r4, [pc, #44]	; (1026c <z_timer_expiration_handler+0x140>)
   1023e:	22ac      	movs	r2, #172	; 0xac
   10240:	4621      	mov	r1, r4
   10242:	480b      	ldr	r0, [pc, #44]	; (10270 <z_timer_expiration_handler+0x144>)
   10244:	f000 fef0 	bl	11028 <printk>
   10248:	21ac      	movs	r1, #172	; 0xac
   1024a:	4620      	mov	r0, r4
   1024c:	f001 f80e 	bl	1126c <assert_post_action>
   10250:	e7ef      	b.n	10232 <z_timer_expiration_handler+0x106>
   10252:	4e06      	ldr	r6, [pc, #24]	; (1026c <z_timer_expiration_handler+0x140>)
   10254:	22ac      	movs	r2, #172	; 0xac
   10256:	4631      	mov	r1, r6
   10258:	4805      	ldr	r0, [pc, #20]	; (10270 <z_timer_expiration_handler+0x144>)
   1025a:	f000 fee5 	bl	11028 <printk>
   1025e:	21ac      	movs	r1, #172	; 0xac
   10260:	4630      	mov	r0, r6
   10262:	f001 f803 	bl	1126c <assert_post_action>
   10266:	e7b2      	b.n	101ce <z_timer_expiration_handler+0xa2>
   10268:	20001648 	.word	0x20001648
   1026c:	00015bc8 	.word	0x00015bc8
   10270:	00015984 	.word	0x00015984
   10274:	0001012d 	.word	0x0001012d

00010278 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   10278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1027c:	b087      	sub	sp, #28
   1027e:	4614      	mov	r4, r2
   10280:	461d      	mov	r5, r3
   10282:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   10286:	f1b3 3fff 	cmp.w	r3, #4294967295
   1028a:	bf08      	it	eq
   1028c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   10290:	d035      	beq.n	102fe <z_impl_k_timer_start+0x86>
   10292:	4606      	mov	r6, r0
   10294:	4613      	mov	r3, r2
   10296:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   10298:	f1b9 3fff 	cmp.w	r9, #4294967295
   1029c:	bf08      	it	eq
   1029e:	f1b8 3fff 	cmpeq.w	r8, #4294967295
   102a2:	d012      	beq.n	102ca <z_impl_k_timer_start+0x52>
   102a4:	ea58 0109 	orrs.w	r1, r8, r9
   102a8:	d00f      	beq.n	102ca <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
   102aa:	f06f 0701 	mvn.w	r7, #1
   102ae:	ebb7 0708 	subs.w	r7, r7, r8
   102b2:	9702      	str	r7, [sp, #8]
   102b4:	f04f 31ff 	mov.w	r1, #4294967295
   102b8:	eb61 0709 	sbc.w	r7, r1, r9
   102bc:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   102be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   102c2:	2800      	cmp	r0, #0
   102c4:	f171 0100 	sbcs.w	r1, r1, #0
   102c8:	db1c      	blt.n	10304 <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   102ca:	f06f 0101 	mvn.w	r1, #1
   102ce:	ebb1 0a03 	subs.w	sl, r1, r3
   102d2:	f04f 31ff 	mov.w	r1, #4294967295
   102d6:	eb61 0b02 	sbc.w	fp, r1, r2
   102da:	f1ba 0f00 	cmp.w	sl, #0
   102de:	f17b 0100 	sbcs.w	r1, fp, #0
   102e2:	db23      	blt.n	1032c <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   102e4:	4630      	mov	r0, r6
   102e6:	f7ff fd51 	bl	fd8c <z_abort_timeout>
	timer->period = period;
   102ea:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
   102ee:	2300      	movs	r3, #0
   102f0:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   102f2:	4622      	mov	r2, r4
   102f4:	462b      	mov	r3, r5
   102f6:	4917      	ldr	r1, [pc, #92]	; (10354 <z_impl_k_timer_start+0xdc>)
   102f8:	4630      	mov	r0, r6
   102fa:	f7ff fc63 	bl	fbc4 <z_add_timeout>
		     duration);
}
   102fe:	b007      	add	sp, #28
   10300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   10304:	f118 31ff 	adds.w	r1, r8, #4294967295
   10308:	9104      	str	r1, [sp, #16]
   1030a:	f149 31ff 	adc.w	r1, r9, #4294967295
   1030e:	9105      	str	r1, [sp, #20]
   10310:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
   10314:	4638      	mov	r0, r7
   10316:	4641      	mov	r1, r8
   10318:	2f01      	cmp	r7, #1
   1031a:	f178 0700 	sbcs.w	r7, r8, #0
   1031e:	db02      	blt.n	10326 <z_impl_k_timer_start+0xae>
   10320:	4680      	mov	r8, r0
   10322:	4689      	mov	r9, r1
   10324:	e7d1      	b.n	102ca <z_impl_k_timer_start+0x52>
   10326:	2001      	movs	r0, #1
   10328:	2100      	movs	r1, #0
   1032a:	e7f9      	b.n	10320 <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1032c:	f113 33ff 	adds.w	r3, r3, #4294967295
   10330:	9300      	str	r3, [sp, #0]
   10332:	f142 33ff 	adc.w	r3, r2, #4294967295
   10336:	9301      	str	r3, [sp, #4]
   10338:	e9dd 0100 	ldrd	r0, r1, [sp]
   1033c:	4602      	mov	r2, r0
   1033e:	460b      	mov	r3, r1
   10340:	2800      	cmp	r0, #0
   10342:	f171 0100 	sbcs.w	r1, r1, #0
   10346:	db02      	blt.n	1034e <z_impl_k_timer_start+0xd6>
   10348:	4614      	mov	r4, r2
   1034a:	461d      	mov	r5, r3
   1034c:	e7ca      	b.n	102e4 <z_impl_k_timer_start+0x6c>
   1034e:	2200      	movs	r2, #0
   10350:	4613      	mov	r3, r2
   10352:	e7f9      	b.n	10348 <z_impl_k_timer_start+0xd0>
   10354:	0001012d 	.word	0x0001012d

00010358 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   10358:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1035a:	4a03      	ldr	r2, [pc, #12]	; (10368 <boot_banner+0x10>)
   1035c:	4903      	ldr	r1, [pc, #12]	; (1036c <boot_banner+0x14>)
   1035e:	4804      	ldr	r0, [pc, #16]	; (10370 <boot_banner+0x18>)
   10360:	f000 fe62 	bl	11028 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   10364:	bd08      	pop	{r3, pc}
   10366:	bf00      	nop
   10368:	000159cc 	.word	0x000159cc
   1036c:	0001732c 	.word	0x0001732c
   10370:	0001733c 	.word	0x0001733c

00010374 <malloc>:
   10374:	4b02      	ldr	r3, [pc, #8]	; (10380 <malloc+0xc>)
   10376:	4601      	mov	r1, r0
   10378:	6818      	ldr	r0, [r3, #0]
   1037a:	f000 b851 	b.w	10420 <_malloc_r>
   1037e:	bf00      	nop
   10380:	2000018c 	.word	0x2000018c

00010384 <_free_r>:
   10384:	b538      	push	{r3, r4, r5, lr}
   10386:	4605      	mov	r5, r0
   10388:	2900      	cmp	r1, #0
   1038a:	d045      	beq.n	10418 <_free_r+0x94>
   1038c:	f851 3c04 	ldr.w	r3, [r1, #-4]
   10390:	1f0c      	subs	r4, r1, #4
   10392:	2b00      	cmp	r3, #0
   10394:	bfb8      	it	lt
   10396:	18e4      	addlt	r4, r4, r3
   10398:	f000 fc34 	bl	10c04 <__malloc_lock>
   1039c:	4a1f      	ldr	r2, [pc, #124]	; (1041c <_free_r+0x98>)
   1039e:	6813      	ldr	r3, [r2, #0]
   103a0:	4610      	mov	r0, r2
   103a2:	b933      	cbnz	r3, 103b2 <_free_r+0x2e>
   103a4:	6063      	str	r3, [r4, #4]
   103a6:	6014      	str	r4, [r2, #0]
   103a8:	4628      	mov	r0, r5
   103aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   103ae:	f000 bc2f 	b.w	10c10 <__malloc_unlock>
   103b2:	42a3      	cmp	r3, r4
   103b4:	d90b      	bls.n	103ce <_free_r+0x4a>
   103b6:	6821      	ldr	r1, [r4, #0]
   103b8:	1862      	adds	r2, r4, r1
   103ba:	4293      	cmp	r3, r2
   103bc:	bf04      	itt	eq
   103be:	681a      	ldreq	r2, [r3, #0]
   103c0:	685b      	ldreq	r3, [r3, #4]
   103c2:	6063      	str	r3, [r4, #4]
   103c4:	bf04      	itt	eq
   103c6:	1852      	addeq	r2, r2, r1
   103c8:	6022      	streq	r2, [r4, #0]
   103ca:	6004      	str	r4, [r0, #0]
   103cc:	e7ec      	b.n	103a8 <_free_r+0x24>
   103ce:	461a      	mov	r2, r3
   103d0:	685b      	ldr	r3, [r3, #4]
   103d2:	b10b      	cbz	r3, 103d8 <_free_r+0x54>
   103d4:	42a3      	cmp	r3, r4
   103d6:	d9fa      	bls.n	103ce <_free_r+0x4a>
   103d8:	6811      	ldr	r1, [r2, #0]
   103da:	1850      	adds	r0, r2, r1
   103dc:	42a0      	cmp	r0, r4
   103de:	d10b      	bne.n	103f8 <_free_r+0x74>
   103e0:	6820      	ldr	r0, [r4, #0]
   103e2:	4401      	add	r1, r0
   103e4:	1850      	adds	r0, r2, r1
   103e6:	4283      	cmp	r3, r0
   103e8:	6011      	str	r1, [r2, #0]
   103ea:	d1dd      	bne.n	103a8 <_free_r+0x24>
   103ec:	6818      	ldr	r0, [r3, #0]
   103ee:	685b      	ldr	r3, [r3, #4]
   103f0:	6053      	str	r3, [r2, #4]
   103f2:	4401      	add	r1, r0
   103f4:	6011      	str	r1, [r2, #0]
   103f6:	e7d7      	b.n	103a8 <_free_r+0x24>
   103f8:	d902      	bls.n	10400 <_free_r+0x7c>
   103fa:	230c      	movs	r3, #12
   103fc:	602b      	str	r3, [r5, #0]
   103fe:	e7d3      	b.n	103a8 <_free_r+0x24>
   10400:	6820      	ldr	r0, [r4, #0]
   10402:	1821      	adds	r1, r4, r0
   10404:	428b      	cmp	r3, r1
   10406:	bf04      	itt	eq
   10408:	6819      	ldreq	r1, [r3, #0]
   1040a:	685b      	ldreq	r3, [r3, #4]
   1040c:	6063      	str	r3, [r4, #4]
   1040e:	bf04      	itt	eq
   10410:	1809      	addeq	r1, r1, r0
   10412:	6021      	streq	r1, [r4, #0]
   10414:	6054      	str	r4, [r2, #4]
   10416:	e7c7      	b.n	103a8 <_free_r+0x24>
   10418:	bd38      	pop	{r3, r4, r5, pc}
   1041a:	bf00      	nop
   1041c:	2000164c 	.word	0x2000164c

00010420 <_malloc_r>:
   10420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10422:	1ccd      	adds	r5, r1, #3
   10424:	f025 0503 	bic.w	r5, r5, #3
   10428:	3508      	adds	r5, #8
   1042a:	2d0c      	cmp	r5, #12
   1042c:	bf38      	it	cc
   1042e:	250c      	movcc	r5, #12
   10430:	2d00      	cmp	r5, #0
   10432:	4606      	mov	r6, r0
   10434:	db01      	blt.n	1043a <_malloc_r+0x1a>
   10436:	42a9      	cmp	r1, r5
   10438:	d903      	bls.n	10442 <_malloc_r+0x22>
   1043a:	230c      	movs	r3, #12
   1043c:	6033      	str	r3, [r6, #0]
   1043e:	2000      	movs	r0, #0
   10440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10442:	f000 fbdf 	bl	10c04 <__malloc_lock>
   10446:	4921      	ldr	r1, [pc, #132]	; (104cc <_malloc_r+0xac>)
   10448:	680a      	ldr	r2, [r1, #0]
   1044a:	4614      	mov	r4, r2
   1044c:	b99c      	cbnz	r4, 10476 <_malloc_r+0x56>
   1044e:	4f20      	ldr	r7, [pc, #128]	; (104d0 <_malloc_r+0xb0>)
   10450:	683b      	ldr	r3, [r7, #0]
   10452:	b923      	cbnz	r3, 1045e <_malloc_r+0x3e>
   10454:	4621      	mov	r1, r4
   10456:	4630      	mov	r0, r6
   10458:	f000 fb8c 	bl	10b74 <_sbrk_r>
   1045c:	6038      	str	r0, [r7, #0]
   1045e:	4629      	mov	r1, r5
   10460:	4630      	mov	r0, r6
   10462:	f000 fb87 	bl	10b74 <_sbrk_r>
   10466:	1c43      	adds	r3, r0, #1
   10468:	d123      	bne.n	104b2 <_malloc_r+0x92>
   1046a:	230c      	movs	r3, #12
   1046c:	6033      	str	r3, [r6, #0]
   1046e:	4630      	mov	r0, r6
   10470:	f000 fbce 	bl	10c10 <__malloc_unlock>
   10474:	e7e3      	b.n	1043e <_malloc_r+0x1e>
   10476:	6823      	ldr	r3, [r4, #0]
   10478:	1b5b      	subs	r3, r3, r5
   1047a:	d417      	bmi.n	104ac <_malloc_r+0x8c>
   1047c:	2b0b      	cmp	r3, #11
   1047e:	d903      	bls.n	10488 <_malloc_r+0x68>
   10480:	6023      	str	r3, [r4, #0]
   10482:	441c      	add	r4, r3
   10484:	6025      	str	r5, [r4, #0]
   10486:	e004      	b.n	10492 <_malloc_r+0x72>
   10488:	6863      	ldr	r3, [r4, #4]
   1048a:	42a2      	cmp	r2, r4
   1048c:	bf0c      	ite	eq
   1048e:	600b      	streq	r3, [r1, #0]
   10490:	6053      	strne	r3, [r2, #4]
   10492:	4630      	mov	r0, r6
   10494:	f000 fbbc 	bl	10c10 <__malloc_unlock>
   10498:	f104 000b 	add.w	r0, r4, #11
   1049c:	1d23      	adds	r3, r4, #4
   1049e:	f020 0007 	bic.w	r0, r0, #7
   104a2:	1ac2      	subs	r2, r0, r3
   104a4:	d0cc      	beq.n	10440 <_malloc_r+0x20>
   104a6:	1a1b      	subs	r3, r3, r0
   104a8:	50a3      	str	r3, [r4, r2]
   104aa:	e7c9      	b.n	10440 <_malloc_r+0x20>
   104ac:	4622      	mov	r2, r4
   104ae:	6864      	ldr	r4, [r4, #4]
   104b0:	e7cc      	b.n	1044c <_malloc_r+0x2c>
   104b2:	1cc4      	adds	r4, r0, #3
   104b4:	f024 0403 	bic.w	r4, r4, #3
   104b8:	42a0      	cmp	r0, r4
   104ba:	d0e3      	beq.n	10484 <_malloc_r+0x64>
   104bc:	1a21      	subs	r1, r4, r0
   104be:	4630      	mov	r0, r6
   104c0:	f000 fb58 	bl	10b74 <_sbrk_r>
   104c4:	3001      	adds	r0, #1
   104c6:	d1dd      	bne.n	10484 <_malloc_r+0x64>
   104c8:	e7cf      	b.n	1046a <_malloc_r+0x4a>
   104ca:	bf00      	nop
   104cc:	2000164c 	.word	0x2000164c
   104d0:	20001650 	.word	0x20001650

000104d4 <_printf_float>:
   104d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104d8:	b091      	sub	sp, #68	; 0x44
   104da:	460c      	mov	r4, r1
   104dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   104e0:	4616      	mov	r6, r2
   104e2:	461f      	mov	r7, r3
   104e4:	4605      	mov	r5, r0
   104e6:	f000 fb89 	bl	10bfc <_localeconv_r>
   104ea:	6803      	ldr	r3, [r0, #0]
   104ec:	9309      	str	r3, [sp, #36]	; 0x24
   104ee:	4618      	mov	r0, r3
   104f0:	f7f0 ff32 	bl	1358 <strlen>
   104f4:	2300      	movs	r3, #0
   104f6:	930e      	str	r3, [sp, #56]	; 0x38
   104f8:	f8d8 3000 	ldr.w	r3, [r8]
   104fc:	900a      	str	r0, [sp, #40]	; 0x28
   104fe:	3307      	adds	r3, #7
   10500:	f023 0307 	bic.w	r3, r3, #7
   10504:	f103 0208 	add.w	r2, r3, #8
   10508:	f894 9018 	ldrb.w	r9, [r4, #24]
   1050c:	f8d4 b000 	ldr.w	fp, [r4]
   10510:	f8c8 2000 	str.w	r2, [r8]
   10514:	e9d3 2300 	ldrd	r2, r3, [r3]
   10518:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   1051c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
   10520:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
   10524:	930b      	str	r3, [sp, #44]	; 0x2c
   10526:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10528:	4b9c      	ldr	r3, [pc, #624]	; (1079c <_printf_float+0x2c8>)
   1052a:	f04f 32ff 	mov.w	r2, #4294967295
   1052e:	4640      	mov	r0, r8
   10530:	f7f0 feca 	bl	12c8 <__aeabi_dcmpun>
   10534:	bb70      	cbnz	r0, 10594 <_printf_float+0xc0>
   10536:	4b99      	ldr	r3, [pc, #612]	; (1079c <_printf_float+0x2c8>)
   10538:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1053a:	f04f 32ff 	mov.w	r2, #4294967295
   1053e:	4640      	mov	r0, r8
   10540:	f7f0 fa56 	bl	9f0 <__aeabi_dcmple>
   10544:	bb30      	cbnz	r0, 10594 <_printf_float+0xc0>
   10546:	2200      	movs	r2, #0
   10548:	2300      	movs	r3, #0
   1054a:	4640      	mov	r0, r8
   1054c:	4651      	mov	r1, sl
   1054e:	f7f0 fa45 	bl	9dc <__aeabi_dcmplt>
   10552:	b110      	cbz	r0, 1055a <_printf_float+0x86>
   10554:	232d      	movs	r3, #45	; 0x2d
   10556:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1055a:	4b91      	ldr	r3, [pc, #580]	; (107a0 <_printf_float+0x2cc>)
   1055c:	4891      	ldr	r0, [pc, #580]	; (107a4 <_printf_float+0x2d0>)
   1055e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   10562:	bf94      	ite	ls
   10564:	4698      	movls	r8, r3
   10566:	4680      	movhi	r8, r0
   10568:	2303      	movs	r3, #3
   1056a:	6123      	str	r3, [r4, #16]
   1056c:	f02b 0304 	bic.w	r3, fp, #4
   10570:	6023      	str	r3, [r4, #0]
   10572:	f04f 0a00 	mov.w	sl, #0
   10576:	9700      	str	r7, [sp, #0]
   10578:	4633      	mov	r3, r6
   1057a:	aa0f      	add	r2, sp, #60	; 0x3c
   1057c:	4621      	mov	r1, r4
   1057e:	4628      	mov	r0, r5
   10580:	f004 fb13 	bl	14baa <_printf_common>
   10584:	3001      	adds	r0, #1
   10586:	f040 808f 	bne.w	106a8 <_printf_float+0x1d4>
   1058a:	f04f 30ff 	mov.w	r0, #4294967295
   1058e:	b011      	add	sp, #68	; 0x44
   10590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10594:	4642      	mov	r2, r8
   10596:	4653      	mov	r3, sl
   10598:	4640      	mov	r0, r8
   1059a:	4651      	mov	r1, sl
   1059c:	f7f0 fe94 	bl	12c8 <__aeabi_dcmpun>
   105a0:	b140      	cbz	r0, 105b4 <_printf_float+0xe0>
   105a2:	f1ba 0f00 	cmp.w	sl, #0
   105a6:	bfbc      	itt	lt
   105a8:	232d      	movlt	r3, #45	; 0x2d
   105aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   105ae:	487e      	ldr	r0, [pc, #504]	; (107a8 <_printf_float+0x2d4>)
   105b0:	4b7e      	ldr	r3, [pc, #504]	; (107ac <_printf_float+0x2d8>)
   105b2:	e7d4      	b.n	1055e <_printf_float+0x8a>
   105b4:	6863      	ldr	r3, [r4, #4]
   105b6:	1c5a      	adds	r2, r3, #1
   105b8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
   105bc:	d142      	bne.n	10644 <_printf_float+0x170>
   105be:	2306      	movs	r3, #6
   105c0:	6063      	str	r3, [r4, #4]
   105c2:	2200      	movs	r2, #0
   105c4:	9206      	str	r2, [sp, #24]
   105c6:	aa0e      	add	r2, sp, #56	; 0x38
   105c8:	e9cd 9204 	strd	r9, r2, [sp, #16]
   105cc:	aa0d      	add	r2, sp, #52	; 0x34
   105ce:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   105d2:	9203      	str	r2, [sp, #12]
   105d4:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   105d8:	e9cd 3201 	strd	r3, r2, [sp, #4]
   105dc:	6023      	str	r3, [r4, #0]
   105de:	6863      	ldr	r3, [r4, #4]
   105e0:	9300      	str	r3, [sp, #0]
   105e2:	4642      	mov	r2, r8
   105e4:	4653      	mov	r3, sl
   105e6:	4628      	mov	r0, r5
   105e8:	910b      	str	r1, [sp, #44]	; 0x2c
   105ea:	f004 fa40 	bl	14a6e <__cvt>
   105ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
   105f0:	2947      	cmp	r1, #71	; 0x47
   105f2:	4680      	mov	r8, r0
   105f4:	990d      	ldr	r1, [sp, #52]	; 0x34
   105f6:	d108      	bne.n	1060a <_printf_float+0x136>
   105f8:	1cc8      	adds	r0, r1, #3
   105fa:	db02      	blt.n	10602 <_printf_float+0x12e>
   105fc:	6863      	ldr	r3, [r4, #4]
   105fe:	4299      	cmp	r1, r3
   10600:	dd40      	ble.n	10684 <_printf_float+0x1b0>
   10602:	f1a9 0902 	sub.w	r9, r9, #2
   10606:	fa5f f989 	uxtb.w	r9, r9
   1060a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   1060e:	d81f      	bhi.n	10650 <_printf_float+0x17c>
   10610:	3901      	subs	r1, #1
   10612:	464a      	mov	r2, r9
   10614:	f104 0050 	add.w	r0, r4, #80	; 0x50
   10618:	910d      	str	r1, [sp, #52]	; 0x34
   1061a:	f004 fa88 	bl	14b2e <__exponent>
   1061e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10620:	1813      	adds	r3, r2, r0
   10622:	2a01      	cmp	r2, #1
   10624:	4682      	mov	sl, r0
   10626:	6123      	str	r3, [r4, #16]
   10628:	dc02      	bgt.n	10630 <_printf_float+0x15c>
   1062a:	6822      	ldr	r2, [r4, #0]
   1062c:	07d2      	lsls	r2, r2, #31
   1062e:	d501      	bpl.n	10634 <_printf_float+0x160>
   10630:	3301      	adds	r3, #1
   10632:	6123      	str	r3, [r4, #16]
   10634:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   10638:	2b00      	cmp	r3, #0
   1063a:	d09c      	beq.n	10576 <_printf_float+0xa2>
   1063c:	232d      	movs	r3, #45	; 0x2d
   1063e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   10642:	e798      	b.n	10576 <_printf_float+0xa2>
   10644:	2947      	cmp	r1, #71	; 0x47
   10646:	d1bc      	bne.n	105c2 <_printf_float+0xee>
   10648:	2b00      	cmp	r3, #0
   1064a:	d1ba      	bne.n	105c2 <_printf_float+0xee>
   1064c:	2301      	movs	r3, #1
   1064e:	e7b7      	b.n	105c0 <_printf_float+0xec>
   10650:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
   10654:	d118      	bne.n	10688 <_printf_float+0x1b4>
   10656:	2900      	cmp	r1, #0
   10658:	6863      	ldr	r3, [r4, #4]
   1065a:	dd0b      	ble.n	10674 <_printf_float+0x1a0>
   1065c:	6121      	str	r1, [r4, #16]
   1065e:	b913      	cbnz	r3, 10666 <_printf_float+0x192>
   10660:	6822      	ldr	r2, [r4, #0]
   10662:	07d0      	lsls	r0, r2, #31
   10664:	d502      	bpl.n	1066c <_printf_float+0x198>
   10666:	3301      	adds	r3, #1
   10668:	440b      	add	r3, r1
   1066a:	6123      	str	r3, [r4, #16]
   1066c:	65a1      	str	r1, [r4, #88]	; 0x58
   1066e:	f04f 0a00 	mov.w	sl, #0
   10672:	e7df      	b.n	10634 <_printf_float+0x160>
   10674:	b913      	cbnz	r3, 1067c <_printf_float+0x1a8>
   10676:	6822      	ldr	r2, [r4, #0]
   10678:	07d2      	lsls	r2, r2, #31
   1067a:	d501      	bpl.n	10680 <_printf_float+0x1ac>
   1067c:	3302      	adds	r3, #2
   1067e:	e7f4      	b.n	1066a <_printf_float+0x196>
   10680:	2301      	movs	r3, #1
   10682:	e7f2      	b.n	1066a <_printf_float+0x196>
   10684:	f04f 0967 	mov.w	r9, #103	; 0x67
   10688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1068a:	4299      	cmp	r1, r3
   1068c:	db05      	blt.n	1069a <_printf_float+0x1c6>
   1068e:	6823      	ldr	r3, [r4, #0]
   10690:	6121      	str	r1, [r4, #16]
   10692:	07d8      	lsls	r0, r3, #31
   10694:	d5ea      	bpl.n	1066c <_printf_float+0x198>
   10696:	1c4b      	adds	r3, r1, #1
   10698:	e7e7      	b.n	1066a <_printf_float+0x196>
   1069a:	2900      	cmp	r1, #0
   1069c:	bfd4      	ite	le
   1069e:	f1c1 0202 	rsble	r2, r1, #2
   106a2:	2201      	movgt	r2, #1
   106a4:	4413      	add	r3, r2
   106a6:	e7e0      	b.n	1066a <_printf_float+0x196>
   106a8:	6823      	ldr	r3, [r4, #0]
   106aa:	055a      	lsls	r2, r3, #21
   106ac:	d407      	bmi.n	106be <_printf_float+0x1ea>
   106ae:	6923      	ldr	r3, [r4, #16]
   106b0:	4642      	mov	r2, r8
   106b2:	4631      	mov	r1, r6
   106b4:	4628      	mov	r0, r5
   106b6:	47b8      	blx	r7
   106b8:	3001      	adds	r0, #1
   106ba:	d12b      	bne.n	10714 <_printf_float+0x240>
   106bc:	e765      	b.n	1058a <_printf_float+0xb6>
   106be:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   106c2:	f240 80dc 	bls.w	1087e <_printf_float+0x3aa>
   106c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   106ca:	2200      	movs	r2, #0
   106cc:	2300      	movs	r3, #0
   106ce:	f7f0 f97b 	bl	9c8 <__aeabi_dcmpeq>
   106d2:	2800      	cmp	r0, #0
   106d4:	d033      	beq.n	1073e <_printf_float+0x26a>
   106d6:	4a36      	ldr	r2, [pc, #216]	; (107b0 <_printf_float+0x2dc>)
   106d8:	2301      	movs	r3, #1
   106da:	4631      	mov	r1, r6
   106dc:	4628      	mov	r0, r5
   106de:	47b8      	blx	r7
   106e0:	3001      	adds	r0, #1
   106e2:	f43f af52 	beq.w	1058a <_printf_float+0xb6>
   106e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   106ea:	429a      	cmp	r2, r3
   106ec:	db02      	blt.n	106f4 <_printf_float+0x220>
   106ee:	6823      	ldr	r3, [r4, #0]
   106f0:	07d8      	lsls	r0, r3, #31
   106f2:	d50f      	bpl.n	10714 <_printf_float+0x240>
   106f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   106f8:	4631      	mov	r1, r6
   106fa:	4628      	mov	r0, r5
   106fc:	47b8      	blx	r7
   106fe:	3001      	adds	r0, #1
   10700:	f43f af43 	beq.w	1058a <_printf_float+0xb6>
   10704:	f04f 0800 	mov.w	r8, #0
   10708:	f104 091a 	add.w	r9, r4, #26
   1070c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1070e:	3b01      	subs	r3, #1
   10710:	4543      	cmp	r3, r8
   10712:	dc09      	bgt.n	10728 <_printf_float+0x254>
   10714:	6823      	ldr	r3, [r4, #0]
   10716:	079b      	lsls	r3, r3, #30
   10718:	f100 8101 	bmi.w	1091e <_printf_float+0x44a>
   1071c:	68e0      	ldr	r0, [r4, #12]
   1071e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10720:	4298      	cmp	r0, r3
   10722:	bfb8      	it	lt
   10724:	4618      	movlt	r0, r3
   10726:	e732      	b.n	1058e <_printf_float+0xba>
   10728:	2301      	movs	r3, #1
   1072a:	464a      	mov	r2, r9
   1072c:	4631      	mov	r1, r6
   1072e:	4628      	mov	r0, r5
   10730:	47b8      	blx	r7
   10732:	3001      	adds	r0, #1
   10734:	f43f af29 	beq.w	1058a <_printf_float+0xb6>
   10738:	f108 0801 	add.w	r8, r8, #1
   1073c:	e7e6      	b.n	1070c <_printf_float+0x238>
   1073e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10740:	2b00      	cmp	r3, #0
   10742:	dc37      	bgt.n	107b4 <_printf_float+0x2e0>
   10744:	4a1a      	ldr	r2, [pc, #104]	; (107b0 <_printf_float+0x2dc>)
   10746:	2301      	movs	r3, #1
   10748:	4631      	mov	r1, r6
   1074a:	4628      	mov	r0, r5
   1074c:	47b8      	blx	r7
   1074e:	3001      	adds	r0, #1
   10750:	f43f af1b 	beq.w	1058a <_printf_float+0xb6>
   10754:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   10758:	4313      	orrs	r3, r2
   1075a:	d102      	bne.n	10762 <_printf_float+0x28e>
   1075c:	6823      	ldr	r3, [r4, #0]
   1075e:	07d9      	lsls	r1, r3, #31
   10760:	d5d8      	bpl.n	10714 <_printf_float+0x240>
   10762:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   10766:	4631      	mov	r1, r6
   10768:	4628      	mov	r0, r5
   1076a:	47b8      	blx	r7
   1076c:	3001      	adds	r0, #1
   1076e:	f43f af0c 	beq.w	1058a <_printf_float+0xb6>
   10772:	f04f 0900 	mov.w	r9, #0
   10776:	f104 0a1a 	add.w	sl, r4, #26
   1077a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1077c:	425b      	negs	r3, r3
   1077e:	454b      	cmp	r3, r9
   10780:	dc01      	bgt.n	10786 <_printf_float+0x2b2>
   10782:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10784:	e794      	b.n	106b0 <_printf_float+0x1dc>
   10786:	2301      	movs	r3, #1
   10788:	4652      	mov	r2, sl
   1078a:	4631      	mov	r1, r6
   1078c:	4628      	mov	r0, r5
   1078e:	47b8      	blx	r7
   10790:	3001      	adds	r0, #1
   10792:	f43f aefa 	beq.w	1058a <_printf_float+0xb6>
   10796:	f109 0901 	add.w	r9, r9, #1
   1079a:	e7ee      	b.n	1077a <_printf_float+0x2a6>
   1079c:	7fefffff 	.word	0x7fefffff
   107a0:	00017471 	.word	0x00017471
   107a4:	00017475 	.word	0x00017475
   107a8:	0001747d 	.word	0x0001747d
   107ac:	00017479 	.word	0x00017479
   107b0:	00017481 	.word	0x00017481
   107b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   107b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
   107b8:	429a      	cmp	r2, r3
   107ba:	bfa8      	it	ge
   107bc:	461a      	movge	r2, r3
   107be:	2a00      	cmp	r2, #0
   107c0:	4691      	mov	r9, r2
   107c2:	dc37      	bgt.n	10834 <_printf_float+0x360>
   107c4:	f04f 0b00 	mov.w	fp, #0
   107c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   107cc:	f104 021a 	add.w	r2, r4, #26
   107d0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   107d4:	ebaa 0309 	sub.w	r3, sl, r9
   107d8:	455b      	cmp	r3, fp
   107da:	dc33      	bgt.n	10844 <_printf_float+0x370>
   107dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   107e0:	429a      	cmp	r2, r3
   107e2:	db3b      	blt.n	1085c <_printf_float+0x388>
   107e4:	6823      	ldr	r3, [r4, #0]
   107e6:	07da      	lsls	r2, r3, #31
   107e8:	d438      	bmi.n	1085c <_printf_float+0x388>
   107ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   107ec:	990d      	ldr	r1, [sp, #52]	; 0x34
   107ee:	eba2 030a 	sub.w	r3, r2, sl
   107f2:	eba2 0901 	sub.w	r9, r2, r1
   107f6:	4599      	cmp	r9, r3
   107f8:	bfa8      	it	ge
   107fa:	4699      	movge	r9, r3
   107fc:	f1b9 0f00 	cmp.w	r9, #0
   10800:	dc34      	bgt.n	1086c <_printf_float+0x398>
   10802:	f04f 0800 	mov.w	r8, #0
   10806:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   1080a:	f104 0a1a 	add.w	sl, r4, #26
   1080e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   10812:	1a9b      	subs	r3, r3, r2
   10814:	eba3 0309 	sub.w	r3, r3, r9
   10818:	4543      	cmp	r3, r8
   1081a:	f77f af7b 	ble.w	10714 <_printf_float+0x240>
   1081e:	2301      	movs	r3, #1
   10820:	4652      	mov	r2, sl
   10822:	4631      	mov	r1, r6
   10824:	4628      	mov	r0, r5
   10826:	47b8      	blx	r7
   10828:	3001      	adds	r0, #1
   1082a:	f43f aeae 	beq.w	1058a <_printf_float+0xb6>
   1082e:	f108 0801 	add.w	r8, r8, #1
   10832:	e7ec      	b.n	1080e <_printf_float+0x33a>
   10834:	4613      	mov	r3, r2
   10836:	4631      	mov	r1, r6
   10838:	4642      	mov	r2, r8
   1083a:	4628      	mov	r0, r5
   1083c:	47b8      	blx	r7
   1083e:	3001      	adds	r0, #1
   10840:	d1c0      	bne.n	107c4 <_printf_float+0x2f0>
   10842:	e6a2      	b.n	1058a <_printf_float+0xb6>
   10844:	2301      	movs	r3, #1
   10846:	4631      	mov	r1, r6
   10848:	4628      	mov	r0, r5
   1084a:	920b      	str	r2, [sp, #44]	; 0x2c
   1084c:	47b8      	blx	r7
   1084e:	3001      	adds	r0, #1
   10850:	f43f ae9b 	beq.w	1058a <_printf_float+0xb6>
   10854:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10856:	f10b 0b01 	add.w	fp, fp, #1
   1085a:	e7b9      	b.n	107d0 <_printf_float+0x2fc>
   1085c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   10860:	4631      	mov	r1, r6
   10862:	4628      	mov	r0, r5
   10864:	47b8      	blx	r7
   10866:	3001      	adds	r0, #1
   10868:	d1bf      	bne.n	107ea <_printf_float+0x316>
   1086a:	e68e      	b.n	1058a <_printf_float+0xb6>
   1086c:	464b      	mov	r3, r9
   1086e:	eb08 020a 	add.w	r2, r8, sl
   10872:	4631      	mov	r1, r6
   10874:	4628      	mov	r0, r5
   10876:	47b8      	blx	r7
   10878:	3001      	adds	r0, #1
   1087a:	d1c2      	bne.n	10802 <_printf_float+0x32e>
   1087c:	e685      	b.n	1058a <_printf_float+0xb6>
   1087e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10880:	2a01      	cmp	r2, #1
   10882:	dc01      	bgt.n	10888 <_printf_float+0x3b4>
   10884:	07db      	lsls	r3, r3, #31
   10886:	d537      	bpl.n	108f8 <_printf_float+0x424>
   10888:	2301      	movs	r3, #1
   1088a:	4642      	mov	r2, r8
   1088c:	4631      	mov	r1, r6
   1088e:	4628      	mov	r0, r5
   10890:	47b8      	blx	r7
   10892:	3001      	adds	r0, #1
   10894:	f43f ae79 	beq.w	1058a <_printf_float+0xb6>
   10898:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   1089c:	4631      	mov	r1, r6
   1089e:	4628      	mov	r0, r5
   108a0:	47b8      	blx	r7
   108a2:	3001      	adds	r0, #1
   108a4:	f43f ae71 	beq.w	1058a <_printf_float+0xb6>
   108a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   108ac:	2200      	movs	r2, #0
   108ae:	2300      	movs	r3, #0
   108b0:	f7f0 f88a 	bl	9c8 <__aeabi_dcmpeq>
   108b4:	b9d8      	cbnz	r0, 108ee <_printf_float+0x41a>
   108b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   108b8:	f108 0201 	add.w	r2, r8, #1
   108bc:	3b01      	subs	r3, #1
   108be:	4631      	mov	r1, r6
   108c0:	4628      	mov	r0, r5
   108c2:	47b8      	blx	r7
   108c4:	3001      	adds	r0, #1
   108c6:	d10e      	bne.n	108e6 <_printf_float+0x412>
   108c8:	e65f      	b.n	1058a <_printf_float+0xb6>
   108ca:	2301      	movs	r3, #1
   108cc:	464a      	mov	r2, r9
   108ce:	4631      	mov	r1, r6
   108d0:	4628      	mov	r0, r5
   108d2:	47b8      	blx	r7
   108d4:	3001      	adds	r0, #1
   108d6:	f43f ae58 	beq.w	1058a <_printf_float+0xb6>
   108da:	f108 0801 	add.w	r8, r8, #1
   108de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   108e0:	3b01      	subs	r3, #1
   108e2:	4543      	cmp	r3, r8
   108e4:	dcf1      	bgt.n	108ca <_printf_float+0x3f6>
   108e6:	4653      	mov	r3, sl
   108e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
   108ec:	e6e1      	b.n	106b2 <_printf_float+0x1de>
   108ee:	f04f 0800 	mov.w	r8, #0
   108f2:	f104 091a 	add.w	r9, r4, #26
   108f6:	e7f2      	b.n	108de <_printf_float+0x40a>
   108f8:	2301      	movs	r3, #1
   108fa:	4642      	mov	r2, r8
   108fc:	e7df      	b.n	108be <_printf_float+0x3ea>
   108fe:	2301      	movs	r3, #1
   10900:	464a      	mov	r2, r9
   10902:	4631      	mov	r1, r6
   10904:	4628      	mov	r0, r5
   10906:	47b8      	blx	r7
   10908:	3001      	adds	r0, #1
   1090a:	f43f ae3e 	beq.w	1058a <_printf_float+0xb6>
   1090e:	f108 0801 	add.w	r8, r8, #1
   10912:	68e3      	ldr	r3, [r4, #12]
   10914:	990f      	ldr	r1, [sp, #60]	; 0x3c
   10916:	1a5b      	subs	r3, r3, r1
   10918:	4543      	cmp	r3, r8
   1091a:	dcf0      	bgt.n	108fe <_printf_float+0x42a>
   1091c:	e6fe      	b.n	1071c <_printf_float+0x248>
   1091e:	f04f 0800 	mov.w	r8, #0
   10922:	f104 0919 	add.w	r9, r4, #25
   10926:	e7f4      	b.n	10912 <_printf_float+0x43e>

00010928 <_printf_i>:
   10928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1092c:	460c      	mov	r4, r1
   1092e:	4691      	mov	r9, r2
   10930:	7e27      	ldrb	r7, [r4, #24]
   10932:	990c      	ldr	r1, [sp, #48]	; 0x30
   10934:	2f78      	cmp	r7, #120	; 0x78
   10936:	4680      	mov	r8, r0
   10938:	469a      	mov	sl, r3
   1093a:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1093e:	d807      	bhi.n	10950 <_printf_i+0x28>
   10940:	2f62      	cmp	r7, #98	; 0x62
   10942:	d80a      	bhi.n	1095a <_printf_i+0x32>
   10944:	2f00      	cmp	r7, #0
   10946:	f000 80d8 	beq.w	10afa <_printf_i+0x1d2>
   1094a:	2f58      	cmp	r7, #88	; 0x58
   1094c:	f000 80a3 	beq.w	10a96 <_printf_i+0x16e>
   10950:	f104 0642 	add.w	r6, r4, #66	; 0x42
   10954:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   10958:	e03a      	b.n	109d0 <_printf_i+0xa8>
   1095a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   1095e:	2b15      	cmp	r3, #21
   10960:	d8f6      	bhi.n	10950 <_printf_i+0x28>
   10962:	a001      	add	r0, pc, #4	; (adr r0, 10968 <_printf_i+0x40>)
   10964:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   10968:	000109c1 	.word	0x000109c1
   1096c:	000109d5 	.word	0x000109d5
   10970:	00010951 	.word	0x00010951
   10974:	00010951 	.word	0x00010951
   10978:	00010951 	.word	0x00010951
   1097c:	00010951 	.word	0x00010951
   10980:	000109d5 	.word	0x000109d5
   10984:	00010951 	.word	0x00010951
   10988:	00010951 	.word	0x00010951
   1098c:	00010951 	.word	0x00010951
   10990:	00010951 	.word	0x00010951
   10994:	00010ae1 	.word	0x00010ae1
   10998:	00010a05 	.word	0x00010a05
   1099c:	00010ac3 	.word	0x00010ac3
   109a0:	00010951 	.word	0x00010951
   109a4:	00010951 	.word	0x00010951
   109a8:	00010b03 	.word	0x00010b03
   109ac:	00010951 	.word	0x00010951
   109b0:	00010a05 	.word	0x00010a05
   109b4:	00010951 	.word	0x00010951
   109b8:	00010951 	.word	0x00010951
   109bc:	00010acb 	.word	0x00010acb
   109c0:	680b      	ldr	r3, [r1, #0]
   109c2:	1d1a      	adds	r2, r3, #4
   109c4:	681b      	ldr	r3, [r3, #0]
   109c6:	600a      	str	r2, [r1, #0]
   109c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
   109cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   109d0:	2301      	movs	r3, #1
   109d2:	e0a3      	b.n	10b1c <_printf_i+0x1f4>
   109d4:	6825      	ldr	r5, [r4, #0]
   109d6:	6808      	ldr	r0, [r1, #0]
   109d8:	062e      	lsls	r6, r5, #24
   109da:	f100 0304 	add.w	r3, r0, #4
   109de:	d50a      	bpl.n	109f6 <_printf_i+0xce>
   109e0:	6805      	ldr	r5, [r0, #0]
   109e2:	600b      	str	r3, [r1, #0]
   109e4:	2d00      	cmp	r5, #0
   109e6:	da03      	bge.n	109f0 <_printf_i+0xc8>
   109e8:	232d      	movs	r3, #45	; 0x2d
   109ea:	426d      	negs	r5, r5
   109ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   109f0:	485e      	ldr	r0, [pc, #376]	; (10b6c <_printf_i+0x244>)
   109f2:	230a      	movs	r3, #10
   109f4:	e019      	b.n	10a2a <_printf_i+0x102>
   109f6:	f015 0f40 	tst.w	r5, #64	; 0x40
   109fa:	6805      	ldr	r5, [r0, #0]
   109fc:	600b      	str	r3, [r1, #0]
   109fe:	bf18      	it	ne
   10a00:	b22d      	sxthne	r5, r5
   10a02:	e7ef      	b.n	109e4 <_printf_i+0xbc>
   10a04:	680b      	ldr	r3, [r1, #0]
   10a06:	6825      	ldr	r5, [r4, #0]
   10a08:	1d18      	adds	r0, r3, #4
   10a0a:	6008      	str	r0, [r1, #0]
   10a0c:	0628      	lsls	r0, r5, #24
   10a0e:	d501      	bpl.n	10a14 <_printf_i+0xec>
   10a10:	681d      	ldr	r5, [r3, #0]
   10a12:	e002      	b.n	10a1a <_printf_i+0xf2>
   10a14:	0669      	lsls	r1, r5, #25
   10a16:	d5fb      	bpl.n	10a10 <_printf_i+0xe8>
   10a18:	881d      	ldrh	r5, [r3, #0]
   10a1a:	4854      	ldr	r0, [pc, #336]	; (10b6c <_printf_i+0x244>)
   10a1c:	2f6f      	cmp	r7, #111	; 0x6f
   10a1e:	bf0c      	ite	eq
   10a20:	2308      	moveq	r3, #8
   10a22:	230a      	movne	r3, #10
   10a24:	2100      	movs	r1, #0
   10a26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   10a2a:	6866      	ldr	r6, [r4, #4]
   10a2c:	60a6      	str	r6, [r4, #8]
   10a2e:	2e00      	cmp	r6, #0
   10a30:	bfa2      	ittt	ge
   10a32:	6821      	ldrge	r1, [r4, #0]
   10a34:	f021 0104 	bicge.w	r1, r1, #4
   10a38:	6021      	strge	r1, [r4, #0]
   10a3a:	b90d      	cbnz	r5, 10a40 <_printf_i+0x118>
   10a3c:	2e00      	cmp	r6, #0
   10a3e:	d04d      	beq.n	10adc <_printf_i+0x1b4>
   10a40:	4616      	mov	r6, r2
   10a42:	fbb5 f1f3 	udiv	r1, r5, r3
   10a46:	fb03 5711 	mls	r7, r3, r1, r5
   10a4a:	5dc7      	ldrb	r7, [r0, r7]
   10a4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
   10a50:	462f      	mov	r7, r5
   10a52:	42bb      	cmp	r3, r7
   10a54:	460d      	mov	r5, r1
   10a56:	d9f4      	bls.n	10a42 <_printf_i+0x11a>
   10a58:	2b08      	cmp	r3, #8
   10a5a:	d10b      	bne.n	10a74 <_printf_i+0x14c>
   10a5c:	6823      	ldr	r3, [r4, #0]
   10a5e:	07df      	lsls	r7, r3, #31
   10a60:	d508      	bpl.n	10a74 <_printf_i+0x14c>
   10a62:	6923      	ldr	r3, [r4, #16]
   10a64:	6861      	ldr	r1, [r4, #4]
   10a66:	4299      	cmp	r1, r3
   10a68:	bfde      	ittt	le
   10a6a:	2330      	movle	r3, #48	; 0x30
   10a6c:	f806 3c01 	strble.w	r3, [r6, #-1]
   10a70:	f106 36ff 	addle.w	r6, r6, #4294967295
   10a74:	1b92      	subs	r2, r2, r6
   10a76:	6122      	str	r2, [r4, #16]
   10a78:	f8cd a000 	str.w	sl, [sp]
   10a7c:	464b      	mov	r3, r9
   10a7e:	aa03      	add	r2, sp, #12
   10a80:	4621      	mov	r1, r4
   10a82:	4640      	mov	r0, r8
   10a84:	f004 f891 	bl	14baa <_printf_common>
   10a88:	3001      	adds	r0, #1
   10a8a:	d14c      	bne.n	10b26 <_printf_i+0x1fe>
   10a8c:	f04f 30ff 	mov.w	r0, #4294967295
   10a90:	b004      	add	sp, #16
   10a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10a96:	4835      	ldr	r0, [pc, #212]	; (10b6c <_printf_i+0x244>)
   10a98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   10a9c:	6823      	ldr	r3, [r4, #0]
   10a9e:	680e      	ldr	r6, [r1, #0]
   10aa0:	061f      	lsls	r7, r3, #24
   10aa2:	f856 5b04 	ldr.w	r5, [r6], #4
   10aa6:	600e      	str	r6, [r1, #0]
   10aa8:	d514      	bpl.n	10ad4 <_printf_i+0x1ac>
   10aaa:	07d9      	lsls	r1, r3, #31
   10aac:	bf44      	itt	mi
   10aae:	f043 0320 	orrmi.w	r3, r3, #32
   10ab2:	6023      	strmi	r3, [r4, #0]
   10ab4:	b91d      	cbnz	r5, 10abe <_printf_i+0x196>
   10ab6:	6823      	ldr	r3, [r4, #0]
   10ab8:	f023 0320 	bic.w	r3, r3, #32
   10abc:	6023      	str	r3, [r4, #0]
   10abe:	2310      	movs	r3, #16
   10ac0:	e7b0      	b.n	10a24 <_printf_i+0xfc>
   10ac2:	6823      	ldr	r3, [r4, #0]
   10ac4:	f043 0320 	orr.w	r3, r3, #32
   10ac8:	6023      	str	r3, [r4, #0]
   10aca:	2378      	movs	r3, #120	; 0x78
   10acc:	4828      	ldr	r0, [pc, #160]	; (10b70 <_printf_i+0x248>)
   10ace:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   10ad2:	e7e3      	b.n	10a9c <_printf_i+0x174>
   10ad4:	065e      	lsls	r6, r3, #25
   10ad6:	bf48      	it	mi
   10ad8:	b2ad      	uxthmi	r5, r5
   10ada:	e7e6      	b.n	10aaa <_printf_i+0x182>
   10adc:	4616      	mov	r6, r2
   10ade:	e7bb      	b.n	10a58 <_printf_i+0x130>
   10ae0:	680b      	ldr	r3, [r1, #0]
   10ae2:	6826      	ldr	r6, [r4, #0]
   10ae4:	6960      	ldr	r0, [r4, #20]
   10ae6:	1d1d      	adds	r5, r3, #4
   10ae8:	600d      	str	r5, [r1, #0]
   10aea:	0635      	lsls	r5, r6, #24
   10aec:	681b      	ldr	r3, [r3, #0]
   10aee:	d501      	bpl.n	10af4 <_printf_i+0x1cc>
   10af0:	6018      	str	r0, [r3, #0]
   10af2:	e002      	b.n	10afa <_printf_i+0x1d2>
   10af4:	0671      	lsls	r1, r6, #25
   10af6:	d5fb      	bpl.n	10af0 <_printf_i+0x1c8>
   10af8:	8018      	strh	r0, [r3, #0]
   10afa:	2300      	movs	r3, #0
   10afc:	6123      	str	r3, [r4, #16]
   10afe:	4616      	mov	r6, r2
   10b00:	e7ba      	b.n	10a78 <_printf_i+0x150>
   10b02:	680b      	ldr	r3, [r1, #0]
   10b04:	1d1a      	adds	r2, r3, #4
   10b06:	600a      	str	r2, [r1, #0]
   10b08:	681e      	ldr	r6, [r3, #0]
   10b0a:	6862      	ldr	r2, [r4, #4]
   10b0c:	2100      	movs	r1, #0
   10b0e:	4630      	mov	r0, r6
   10b10:	f7ef fae6 	bl	e0 <memchr>
   10b14:	b108      	cbz	r0, 10b1a <_printf_i+0x1f2>
   10b16:	1b80      	subs	r0, r0, r6
   10b18:	6060      	str	r0, [r4, #4]
   10b1a:	6863      	ldr	r3, [r4, #4]
   10b1c:	6123      	str	r3, [r4, #16]
   10b1e:	2300      	movs	r3, #0
   10b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   10b24:	e7a8      	b.n	10a78 <_printf_i+0x150>
   10b26:	6923      	ldr	r3, [r4, #16]
   10b28:	4632      	mov	r2, r6
   10b2a:	4649      	mov	r1, r9
   10b2c:	4640      	mov	r0, r8
   10b2e:	47d0      	blx	sl
   10b30:	3001      	adds	r0, #1
   10b32:	d0ab      	beq.n	10a8c <_printf_i+0x164>
   10b34:	6823      	ldr	r3, [r4, #0]
   10b36:	079b      	lsls	r3, r3, #30
   10b38:	d413      	bmi.n	10b62 <_printf_i+0x23a>
   10b3a:	68e0      	ldr	r0, [r4, #12]
   10b3c:	9b03      	ldr	r3, [sp, #12]
   10b3e:	4298      	cmp	r0, r3
   10b40:	bfb8      	it	lt
   10b42:	4618      	movlt	r0, r3
   10b44:	e7a4      	b.n	10a90 <_printf_i+0x168>
   10b46:	2301      	movs	r3, #1
   10b48:	4632      	mov	r2, r6
   10b4a:	4649      	mov	r1, r9
   10b4c:	4640      	mov	r0, r8
   10b4e:	47d0      	blx	sl
   10b50:	3001      	adds	r0, #1
   10b52:	d09b      	beq.n	10a8c <_printf_i+0x164>
   10b54:	3501      	adds	r5, #1
   10b56:	68e3      	ldr	r3, [r4, #12]
   10b58:	9903      	ldr	r1, [sp, #12]
   10b5a:	1a5b      	subs	r3, r3, r1
   10b5c:	42ab      	cmp	r3, r5
   10b5e:	dcf2      	bgt.n	10b46 <_printf_i+0x21e>
   10b60:	e7eb      	b.n	10b3a <_printf_i+0x212>
   10b62:	2500      	movs	r5, #0
   10b64:	f104 0619 	add.w	r6, r4, #25
   10b68:	e7f5      	b.n	10b56 <_printf_i+0x22e>
   10b6a:	bf00      	nop
   10b6c:	00017483 	.word	0x00017483
   10b70:	00017494 	.word	0x00017494

00010b74 <_sbrk_r>:
   10b74:	b538      	push	{r3, r4, r5, lr}
   10b76:	4d06      	ldr	r5, [pc, #24]	; (10b90 <_sbrk_r+0x1c>)
   10b78:	2300      	movs	r3, #0
   10b7a:	4604      	mov	r4, r0
   10b7c:	4608      	mov	r0, r1
   10b7e:	602b      	str	r3, [r5, #0]
   10b80:	f7f5 fcf2 	bl	6568 <_sbrk>
   10b84:	1c43      	adds	r3, r0, #1
   10b86:	d102      	bne.n	10b8e <_sbrk_r+0x1a>
   10b88:	682b      	ldr	r3, [r5, #0]
   10b8a:	b103      	cbz	r3, 10b8e <_sbrk_r+0x1a>
   10b8c:	6023      	str	r3, [r4, #0]
   10b8e:	bd38      	pop	{r3, r4, r5, pc}
   10b90:	20001660 	.word	0x20001660

00010b94 <sniprintf>:
   10b94:	b40c      	push	{r2, r3}
   10b96:	b530      	push	{r4, r5, lr}
   10b98:	4b17      	ldr	r3, [pc, #92]	; (10bf8 <sniprintf+0x64>)
   10b9a:	1e0c      	subs	r4, r1, #0
   10b9c:	681d      	ldr	r5, [r3, #0]
   10b9e:	b09d      	sub	sp, #116	; 0x74
   10ba0:	da08      	bge.n	10bb4 <sniprintf+0x20>
   10ba2:	238b      	movs	r3, #139	; 0x8b
   10ba4:	602b      	str	r3, [r5, #0]
   10ba6:	f04f 30ff 	mov.w	r0, #4294967295
   10baa:	b01d      	add	sp, #116	; 0x74
   10bac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   10bb0:	b002      	add	sp, #8
   10bb2:	4770      	bx	lr
   10bb4:	f44f 7302 	mov.w	r3, #520	; 0x208
   10bb8:	f8ad 3014 	strh.w	r3, [sp, #20]
   10bbc:	bf14      	ite	ne
   10bbe:	f104 33ff 	addne.w	r3, r4, #4294967295
   10bc2:	4623      	moveq	r3, r4
   10bc4:	9304      	str	r3, [sp, #16]
   10bc6:	9307      	str	r3, [sp, #28]
   10bc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10bcc:	9002      	str	r0, [sp, #8]
   10bce:	9006      	str	r0, [sp, #24]
   10bd0:	f8ad 3016 	strh.w	r3, [sp, #22]
   10bd4:	9a20      	ldr	r2, [sp, #128]	; 0x80
   10bd6:	ab21      	add	r3, sp, #132	; 0x84
   10bd8:	a902      	add	r1, sp, #8
   10bda:	4628      	mov	r0, r5
   10bdc:	9301      	str	r3, [sp, #4]
   10bde:	f000 f86b 	bl	10cb8 <_svfiprintf_r>
   10be2:	1c43      	adds	r3, r0, #1
   10be4:	bfbc      	itt	lt
   10be6:	238b      	movlt	r3, #139	; 0x8b
   10be8:	602b      	strlt	r3, [r5, #0]
   10bea:	2c00      	cmp	r4, #0
   10bec:	d0dd      	beq.n	10baa <sniprintf+0x16>
   10bee:	9b02      	ldr	r3, [sp, #8]
   10bf0:	2200      	movs	r2, #0
   10bf2:	701a      	strb	r2, [r3, #0]
   10bf4:	e7d9      	b.n	10baa <sniprintf+0x16>
   10bf6:	bf00      	nop
   10bf8:	2000018c 	.word	0x2000018c

00010bfc <_localeconv_r>:
   10bfc:	4800      	ldr	r0, [pc, #0]	; (10c00 <_localeconv_r+0x4>)
   10bfe:	4770      	bx	lr
   10c00:	200002e0 	.word	0x200002e0

00010c04 <__malloc_lock>:
   10c04:	4801      	ldr	r0, [pc, #4]	; (10c0c <__malloc_lock+0x8>)
   10c06:	f7f5 bcc5 	b.w	6594 <__retarget_lock_acquire_recursive>
   10c0a:	bf00      	nop
   10c0c:	200003b0 	.word	0x200003b0

00010c10 <__malloc_unlock>:
   10c10:	4801      	ldr	r0, [pc, #4]	; (10c18 <__malloc_unlock+0x8>)
   10c12:	f7f5 bcdb 	b.w	65cc <__retarget_lock_release_recursive>
   10c16:	bf00      	nop
   10c18:	200003b0 	.word	0x200003b0

00010c1c <__pow5mult>:
   10c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10c20:	4615      	mov	r5, r2
   10c22:	f012 0203 	ands.w	r2, r2, #3
   10c26:	4606      	mov	r6, r0
   10c28:	460f      	mov	r7, r1
   10c2a:	d007      	beq.n	10c3c <__pow5mult+0x20>
   10c2c:	4c21      	ldr	r4, [pc, #132]	; (10cb4 <__pow5mult+0x98>)
   10c2e:	3a01      	subs	r2, #1
   10c30:	2300      	movs	r3, #0
   10c32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   10c36:	f004 f942 	bl	14ebe <__multadd>
   10c3a:	4607      	mov	r7, r0
   10c3c:	10ad      	asrs	r5, r5, #2
   10c3e:	d035      	beq.n	10cac <__pow5mult+0x90>
   10c40:	6a74      	ldr	r4, [r6, #36]	; 0x24
   10c42:	b93c      	cbnz	r4, 10c54 <__pow5mult+0x38>
   10c44:	2010      	movs	r0, #16
   10c46:	f7ff fb95 	bl	10374 <malloc>
   10c4a:	e9c0 4401 	strd	r4, r4, [r0, #4]
   10c4e:	6270      	str	r0, [r6, #36]	; 0x24
   10c50:	6004      	str	r4, [r0, #0]
   10c52:	60c4      	str	r4, [r0, #12]
   10c54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   10c58:	f8d8 4008 	ldr.w	r4, [r8, #8]
   10c5c:	b94c      	cbnz	r4, 10c72 <__pow5mult+0x56>
   10c5e:	f240 2171 	movw	r1, #625	; 0x271
   10c62:	4630      	mov	r0, r6
   10c64:	f004 f9b7 	bl	14fd6 <__i2b>
   10c68:	2300      	movs	r3, #0
   10c6a:	f8c8 0008 	str.w	r0, [r8, #8]
   10c6e:	4604      	mov	r4, r0
   10c70:	6003      	str	r3, [r0, #0]
   10c72:	f04f 0900 	mov.w	r9, #0
   10c76:	07eb      	lsls	r3, r5, #31
   10c78:	d50a      	bpl.n	10c90 <__pow5mult+0x74>
   10c7a:	4639      	mov	r1, r7
   10c7c:	4622      	mov	r2, r4
   10c7e:	4630      	mov	r0, r6
   10c80:	f004 f9b2 	bl	14fe8 <__multiply>
   10c84:	4639      	mov	r1, r7
   10c86:	4680      	mov	r8, r0
   10c88:	4630      	mov	r0, r6
   10c8a:	f004 f901 	bl	14e90 <_Bfree>
   10c8e:	4647      	mov	r7, r8
   10c90:	106d      	asrs	r5, r5, #1
   10c92:	d00b      	beq.n	10cac <__pow5mult+0x90>
   10c94:	6820      	ldr	r0, [r4, #0]
   10c96:	b938      	cbnz	r0, 10ca8 <__pow5mult+0x8c>
   10c98:	4622      	mov	r2, r4
   10c9a:	4621      	mov	r1, r4
   10c9c:	4630      	mov	r0, r6
   10c9e:	f004 f9a3 	bl	14fe8 <__multiply>
   10ca2:	6020      	str	r0, [r4, #0]
   10ca4:	f8c0 9000 	str.w	r9, [r0]
   10ca8:	4604      	mov	r4, r0
   10caa:	e7e4      	b.n	10c76 <__pow5mult+0x5a>
   10cac:	4638      	mov	r0, r7
   10cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10cb2:	bf00      	nop
   10cb4:	00017364 	.word	0x00017364

00010cb8 <_svfiprintf_r>:
   10cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10cbc:	4698      	mov	r8, r3
   10cbe:	898b      	ldrh	r3, [r1, #12]
   10cc0:	061b      	lsls	r3, r3, #24
   10cc2:	b09d      	sub	sp, #116	; 0x74
   10cc4:	4607      	mov	r7, r0
   10cc6:	460d      	mov	r5, r1
   10cc8:	4614      	mov	r4, r2
   10cca:	d50e      	bpl.n	10cea <_svfiprintf_r+0x32>
   10ccc:	690b      	ldr	r3, [r1, #16]
   10cce:	b963      	cbnz	r3, 10cea <_svfiprintf_r+0x32>
   10cd0:	2140      	movs	r1, #64	; 0x40
   10cd2:	f7ff fba5 	bl	10420 <_malloc_r>
   10cd6:	6028      	str	r0, [r5, #0]
   10cd8:	6128      	str	r0, [r5, #16]
   10cda:	b920      	cbnz	r0, 10ce6 <_svfiprintf_r+0x2e>
   10cdc:	230c      	movs	r3, #12
   10cde:	603b      	str	r3, [r7, #0]
   10ce0:	f04f 30ff 	mov.w	r0, #4294967295
   10ce4:	e0d1      	b.n	10e8a <_svfiprintf_r+0x1d2>
   10ce6:	2340      	movs	r3, #64	; 0x40
   10ce8:	616b      	str	r3, [r5, #20]
   10cea:	2300      	movs	r3, #0
   10cec:	9309      	str	r3, [sp, #36]	; 0x24
   10cee:	2320      	movs	r3, #32
   10cf0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   10cf4:	f8cd 800c 	str.w	r8, [sp, #12]
   10cf8:	2330      	movs	r3, #48	; 0x30
   10cfa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 10ea4 <_svfiprintf_r+0x1ec>
   10cfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   10d02:	f04f 0901 	mov.w	r9, #1
   10d06:	4623      	mov	r3, r4
   10d08:	469a      	mov	sl, r3
   10d0a:	f813 2b01 	ldrb.w	r2, [r3], #1
   10d0e:	b10a      	cbz	r2, 10d14 <_svfiprintf_r+0x5c>
   10d10:	2a25      	cmp	r2, #37	; 0x25
   10d12:	d1f9      	bne.n	10d08 <_svfiprintf_r+0x50>
   10d14:	ebba 0b04 	subs.w	fp, sl, r4
   10d18:	d00b      	beq.n	10d32 <_svfiprintf_r+0x7a>
   10d1a:	465b      	mov	r3, fp
   10d1c:	4622      	mov	r2, r4
   10d1e:	4629      	mov	r1, r5
   10d20:	4638      	mov	r0, r7
   10d22:	f004 fb4a 	bl	153ba <__ssputs_r>
   10d26:	3001      	adds	r0, #1
   10d28:	f000 80aa 	beq.w	10e80 <_svfiprintf_r+0x1c8>
   10d2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10d2e:	445a      	add	r2, fp
   10d30:	9209      	str	r2, [sp, #36]	; 0x24
   10d32:	f89a 3000 	ldrb.w	r3, [sl]
   10d36:	2b00      	cmp	r3, #0
   10d38:	f000 80a2 	beq.w	10e80 <_svfiprintf_r+0x1c8>
   10d3c:	2300      	movs	r3, #0
   10d3e:	f04f 32ff 	mov.w	r2, #4294967295
   10d42:	e9cd 2305 	strd	r2, r3, [sp, #20]
   10d46:	f10a 0a01 	add.w	sl, sl, #1
   10d4a:	9304      	str	r3, [sp, #16]
   10d4c:	9307      	str	r3, [sp, #28]
   10d4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   10d52:	931a      	str	r3, [sp, #104]	; 0x68
   10d54:	4654      	mov	r4, sl
   10d56:	2205      	movs	r2, #5
   10d58:	f814 1b01 	ldrb.w	r1, [r4], #1
   10d5c:	4851      	ldr	r0, [pc, #324]	; (10ea4 <_svfiprintf_r+0x1ec>)
   10d5e:	f7ef f9bf 	bl	e0 <memchr>
   10d62:	9a04      	ldr	r2, [sp, #16]
   10d64:	b9d8      	cbnz	r0, 10d9e <_svfiprintf_r+0xe6>
   10d66:	06d0      	lsls	r0, r2, #27
   10d68:	bf44      	itt	mi
   10d6a:	2320      	movmi	r3, #32
   10d6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   10d70:	0711      	lsls	r1, r2, #28
   10d72:	bf44      	itt	mi
   10d74:	232b      	movmi	r3, #43	; 0x2b
   10d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   10d7a:	f89a 3000 	ldrb.w	r3, [sl]
   10d7e:	2b2a      	cmp	r3, #42	; 0x2a
   10d80:	d015      	beq.n	10dae <_svfiprintf_r+0xf6>
   10d82:	9a07      	ldr	r2, [sp, #28]
   10d84:	4654      	mov	r4, sl
   10d86:	2000      	movs	r0, #0
   10d88:	f04f 0c0a 	mov.w	ip, #10
   10d8c:	4621      	mov	r1, r4
   10d8e:	f811 3b01 	ldrb.w	r3, [r1], #1
   10d92:	3b30      	subs	r3, #48	; 0x30
   10d94:	2b09      	cmp	r3, #9
   10d96:	d94e      	bls.n	10e36 <_svfiprintf_r+0x17e>
   10d98:	b1b0      	cbz	r0, 10dc8 <_svfiprintf_r+0x110>
   10d9a:	9207      	str	r2, [sp, #28]
   10d9c:	e014      	b.n	10dc8 <_svfiprintf_r+0x110>
   10d9e:	eba0 0308 	sub.w	r3, r0, r8
   10da2:	fa09 f303 	lsl.w	r3, r9, r3
   10da6:	4313      	orrs	r3, r2
   10da8:	9304      	str	r3, [sp, #16]
   10daa:	46a2      	mov	sl, r4
   10dac:	e7d2      	b.n	10d54 <_svfiprintf_r+0x9c>
   10dae:	9b03      	ldr	r3, [sp, #12]
   10db0:	1d19      	adds	r1, r3, #4
   10db2:	681b      	ldr	r3, [r3, #0]
   10db4:	9103      	str	r1, [sp, #12]
   10db6:	2b00      	cmp	r3, #0
   10db8:	bfbb      	ittet	lt
   10dba:	425b      	neglt	r3, r3
   10dbc:	f042 0202 	orrlt.w	r2, r2, #2
   10dc0:	9307      	strge	r3, [sp, #28]
   10dc2:	9307      	strlt	r3, [sp, #28]
   10dc4:	bfb8      	it	lt
   10dc6:	9204      	strlt	r2, [sp, #16]
   10dc8:	7823      	ldrb	r3, [r4, #0]
   10dca:	2b2e      	cmp	r3, #46	; 0x2e
   10dcc:	d10c      	bne.n	10de8 <_svfiprintf_r+0x130>
   10dce:	7863      	ldrb	r3, [r4, #1]
   10dd0:	2b2a      	cmp	r3, #42	; 0x2a
   10dd2:	d135      	bne.n	10e40 <_svfiprintf_r+0x188>
   10dd4:	9b03      	ldr	r3, [sp, #12]
   10dd6:	1d1a      	adds	r2, r3, #4
   10dd8:	681b      	ldr	r3, [r3, #0]
   10dda:	9203      	str	r2, [sp, #12]
   10ddc:	2b00      	cmp	r3, #0
   10dde:	bfb8      	it	lt
   10de0:	f04f 33ff 	movlt.w	r3, #4294967295
   10de4:	3402      	adds	r4, #2
   10de6:	9305      	str	r3, [sp, #20]
   10de8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 10eb4 <_svfiprintf_r+0x1fc>
   10dec:	7821      	ldrb	r1, [r4, #0]
   10dee:	2203      	movs	r2, #3
   10df0:	4650      	mov	r0, sl
   10df2:	f7ef f975 	bl	e0 <memchr>
   10df6:	b140      	cbz	r0, 10e0a <_svfiprintf_r+0x152>
   10df8:	2340      	movs	r3, #64	; 0x40
   10dfa:	eba0 000a 	sub.w	r0, r0, sl
   10dfe:	fa03 f000 	lsl.w	r0, r3, r0
   10e02:	9b04      	ldr	r3, [sp, #16]
   10e04:	4303      	orrs	r3, r0
   10e06:	3401      	adds	r4, #1
   10e08:	9304      	str	r3, [sp, #16]
   10e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
   10e0e:	4826      	ldr	r0, [pc, #152]	; (10ea8 <_svfiprintf_r+0x1f0>)
   10e10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   10e14:	2206      	movs	r2, #6
   10e16:	f7ef f963 	bl	e0 <memchr>
   10e1a:	2800      	cmp	r0, #0
   10e1c:	d038      	beq.n	10e90 <_svfiprintf_r+0x1d8>
   10e1e:	4b23      	ldr	r3, [pc, #140]	; (10eac <_svfiprintf_r+0x1f4>)
   10e20:	bb1b      	cbnz	r3, 10e6a <_svfiprintf_r+0x1b2>
   10e22:	9b03      	ldr	r3, [sp, #12]
   10e24:	3307      	adds	r3, #7
   10e26:	f023 0307 	bic.w	r3, r3, #7
   10e2a:	3308      	adds	r3, #8
   10e2c:	9303      	str	r3, [sp, #12]
   10e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10e30:	4433      	add	r3, r6
   10e32:	9309      	str	r3, [sp, #36]	; 0x24
   10e34:	e767      	b.n	10d06 <_svfiprintf_r+0x4e>
   10e36:	fb0c 3202 	mla	r2, ip, r2, r3
   10e3a:	460c      	mov	r4, r1
   10e3c:	2001      	movs	r0, #1
   10e3e:	e7a5      	b.n	10d8c <_svfiprintf_r+0xd4>
   10e40:	2300      	movs	r3, #0
   10e42:	3401      	adds	r4, #1
   10e44:	9305      	str	r3, [sp, #20]
   10e46:	4619      	mov	r1, r3
   10e48:	f04f 0c0a 	mov.w	ip, #10
   10e4c:	4620      	mov	r0, r4
   10e4e:	f810 2b01 	ldrb.w	r2, [r0], #1
   10e52:	3a30      	subs	r2, #48	; 0x30
   10e54:	2a09      	cmp	r2, #9
   10e56:	d903      	bls.n	10e60 <_svfiprintf_r+0x1a8>
   10e58:	2b00      	cmp	r3, #0
   10e5a:	d0c5      	beq.n	10de8 <_svfiprintf_r+0x130>
   10e5c:	9105      	str	r1, [sp, #20]
   10e5e:	e7c3      	b.n	10de8 <_svfiprintf_r+0x130>
   10e60:	fb0c 2101 	mla	r1, ip, r1, r2
   10e64:	4604      	mov	r4, r0
   10e66:	2301      	movs	r3, #1
   10e68:	e7f0      	b.n	10e4c <_svfiprintf_r+0x194>
   10e6a:	ab03      	add	r3, sp, #12
   10e6c:	9300      	str	r3, [sp, #0]
   10e6e:	462a      	mov	r2, r5
   10e70:	4b0f      	ldr	r3, [pc, #60]	; (10eb0 <_svfiprintf_r+0x1f8>)
   10e72:	a904      	add	r1, sp, #16
   10e74:	4638      	mov	r0, r7
   10e76:	f7ff fb2d 	bl	104d4 <_printf_float>
   10e7a:	1c42      	adds	r2, r0, #1
   10e7c:	4606      	mov	r6, r0
   10e7e:	d1d6      	bne.n	10e2e <_svfiprintf_r+0x176>
   10e80:	89ab      	ldrh	r3, [r5, #12]
   10e82:	065b      	lsls	r3, r3, #25
   10e84:	f53f af2c 	bmi.w	10ce0 <_svfiprintf_r+0x28>
   10e88:	9809      	ldr	r0, [sp, #36]	; 0x24
   10e8a:	b01d      	add	sp, #116	; 0x74
   10e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e90:	ab03      	add	r3, sp, #12
   10e92:	9300      	str	r3, [sp, #0]
   10e94:	462a      	mov	r2, r5
   10e96:	4b06      	ldr	r3, [pc, #24]	; (10eb0 <_svfiprintf_r+0x1f8>)
   10e98:	a904      	add	r1, sp, #16
   10e9a:	4638      	mov	r0, r7
   10e9c:	f7ff fd44 	bl	10928 <_printf_i>
   10ea0:	e7eb      	b.n	10e7a <_svfiprintf_r+0x1c2>
   10ea2:	bf00      	nop
   10ea4:	000174b2 	.word	0x000174b2
   10ea8:	000174bc 	.word	0x000174bc
   10eac:	000104d5 	.word	0x000104d5
   10eb0:	000153bb 	.word	0x000153bb
   10eb4:	000174b8 	.word	0x000174b8

00010eb8 <setAccel_ODR_BWP_bmx160>:
{
   10eb8:	b508      	push	{r3, lr}
    writeReg_bmx160(bmxIMU_spi_p, BMX160_ACC_CONF_REG, sentVal);
   10eba:	430a      	orrs	r2, r1
   10ebc:	2140      	movs	r1, #64	; 0x40
   10ebe:	f7f1 fb0b 	bl	24d8 <writeReg_bmx160>
}
   10ec2:	bd08      	pop	{r3, pc}

00010ec4 <setGyro_ODR_BWP_bmx160>:
{
   10ec4:	b508      	push	{r3, lr}
    writeReg_bmx160(bmxIMU_spi_p, BMX160_GYR_CONF_REG, sentVal);
   10ec6:	430a      	orrs	r2, r1
   10ec8:	2142      	movs	r1, #66	; 0x42
   10eca:	f7f1 fb05 	bl	24d8 <writeReg_bmx160>
}
   10ece:	bd08      	pop	{r3, pc}

00010ed0 <setSensorMode_bmx160>:
{
   10ed0:	b510      	push	{r4, lr}
   10ed2:	4614      	mov	r4, r2
    writeReg_bmx160(bmxIMU_spi_p, BMX160_CMD_REG, data);
   10ed4:	460a      	mov	r2, r1
   10ed6:	217e      	movs	r1, #126	; 0x7e
   10ed8:	f7f1 fafe 	bl	24d8 <writeReg_bmx160>
   10edc:	03e1      	lsls	r1, r4, #15
   10ede:	f240 30e7 	movw	r0, #999	; 0x3e7
   10ee2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10ee6:	2300      	movs	r3, #0
   10ee8:	1808      	adds	r0, r1, r0
   10eea:	f04f 0400 	mov.w	r4, #0
   10eee:	4621      	mov	r1, r4
   10ef0:	eb44 0101 	adc.w	r1, r4, r1
   10ef4:	f7f0 f86e 	bl	fd4 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   10ef8:	f7fe fd3a 	bl	f970 <z_impl_k_sleep>
}
   10efc:	bd10      	pop	{r4, pc}

00010efe <getChipID_bmx160>:
{
   10efe:	b508      	push	{r3, lr}
   10f00:	460a      	mov	r2, r1
    result = readReg_bmx160(bmxIMU_spi_p, BMX160_CHIP_ID_REG, chipID, 1);
   10f02:	2301      	movs	r3, #1
   10f04:	2100      	movs	r1, #0
   10f06:	f7f1 fbed 	bl	26e4 <readReg_bmx160>
}
   10f0a:	bd08      	pop	{r3, pc}

00010f0c <begin_bmx160>:
{
   10f0c:	b510      	push	{r4, lr}
   10f0e:	b082      	sub	sp, #8
   10f10:	4604      	mov	r4, r0
    uint8_t chipID = 0;
   10f12:	2200      	movs	r2, #0
   10f14:	f88d 2007 	strb.w	r2, [sp, #7]
    readReg_bmx160(bmxIMU_spi_p, BMX160_STARTUP_WRITE_REG, NULL, 1);
   10f18:	2301      	movs	r3, #1
   10f1a:	217f      	movs	r1, #127	; 0x7f
   10f1c:	f7f1 fbe2 	bl	26e4 <readReg_bmx160>
    getChipID_bmx160(bmxIMU_spi_p, &chipID);
   10f20:	f10d 0107 	add.w	r1, sp, #7
   10f24:	4620      	mov	r0, r4
   10f26:	f7ff ffea 	bl	10efe <getChipID_bmx160>
    if(chipID != BMI160_CHIP_ID)
   10f2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10f2e:	2bd1      	cmp	r3, #209	; 0xd1
   10f30:	d11e      	bne.n	10f70 <begin_bmx160+0x64>
    setSensorMode_bmx160(bmxIMU_spi_p, bmx160_accel_normal_mode, BMX160_ACCEL_DELAY_MS);    
   10f32:	2204      	movs	r2, #4
   10f34:	2111      	movs	r1, #17
   10f36:	4620      	mov	r0, r4
   10f38:	f7ff ffca 	bl	10ed0 <setSensorMode_bmx160>
    setSensorMode_bmx160(bmxIMU_spi_p, bmx160_gyro_normal_mode, BMX160_GRYO_DELAY_MS);  
   10f3c:	2250      	movs	r2, #80	; 0x50
   10f3e:	2115      	movs	r1, #21
   10f40:	4620      	mov	r0, r4
   10f42:	f7ff ffc5 	bl	10ed0 <setSensorMode_bmx160>
    setAccel_ODR_BWP_bmx160(bmxIMU_spi_p, bmx160_accel_odr_1600, bmx160_accel_bwp_osr_1);
   10f46:	2220      	movs	r2, #32
   10f48:	210c      	movs	r1, #12
   10f4a:	4620      	mov	r0, r4
   10f4c:	f7ff ffb4 	bl	10eb8 <setAccel_ODR_BWP_bmx160>
    setGyro_ODR_BWP_bmx160(bmxIMU_spi_p, bmx160_gyr_odr_1600, bmx160_gyr_bwp_osr_1);
   10f50:	2220      	movs	r2, #32
   10f52:	210c      	movs	r1, #12
   10f54:	4620      	mov	r0, r4
   10f56:	f7ff ffb5 	bl	10ec4 <setGyro_ODR_BWP_bmx160>
    setAccelRange_bmx160(bmxIMU_spi_p, bmx160_accelRange_4g);
   10f5a:	2105      	movs	r1, #5
   10f5c:	4620      	mov	r0, r4
   10f5e:	f7f1 fb61 	bl	2624 <setAccelRange_bmx160>
    setGyroRange_bmx160(bmxIMU_spi_p, bmx160_gyroRange_1000dps);
   10f62:	2101      	movs	r1, #1
   10f64:	4620      	mov	r0, r4
   10f66:	f7f1 fb8b 	bl	2680 <setGyroRange_bmx160>
    return BMX160_OK;
   10f6a:	2000      	movs	r0, #0
}
   10f6c:	b002      	add	sp, #8
   10f6e:	bd10      	pop	{r4, pc}
        return BMX160_WRONG_CHIP_ID;
   10f70:	f06f 0062 	mvn.w	r0, #98	; 0x62
   10f74:	e7fa      	b.n	10f6c <begin_bmx160+0x60>

00010f76 <crc16_itu_t>:
	return seed;
}

uint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)
{
	for (; len > 0; len--) {
   10f76:	b192      	cbz	r2, 10f9e <crc16_itu_t+0x28>
		seed = (seed >> 8U) | (seed << 8U);
   10f78:	0a03      	lsrs	r3, r0, #8
   10f7a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   10f7e:	b280      	uxth	r0, r0
		seed ^= *src++;
   10f80:	f811 3b01 	ldrb.w	r3, [r1], #1
   10f84:	4043      	eors	r3, r0
		seed ^= (seed & 0xffU) >> 4U;
   10f86:	f3c3 1003 	ubfx	r0, r3, #4, #4
   10f8a:	4058      	eors	r0, r3
		seed ^= seed << 12U;
   10f8c:	ea80 3000 	eor.w	r0, r0, r0, lsl #12
   10f90:	b280      	uxth	r0, r0
		seed ^= (seed & 0xffU) << 5U;
   10f92:	0143      	lsls	r3, r0, #5
   10f94:	f403 53ff 	and.w	r3, r3, #8160	; 0x1fe0
   10f98:	4058      	eors	r0, r3
	for (; len > 0; len--) {
   10f9a:	3a01      	subs	r2, #1
   10f9c:	e7eb      	b.n	10f76 <crc16_itu_t>
	}

	return seed;
}
   10f9e:	4770      	bx	lr

00010fa0 <crc7_be>:
 */

#include <sys/crc.h>

uint8_t crc7_be(uint8_t seed, const uint8_t *src, size_t len)
{
   10fa0:	b410      	push	{r4}
	while (len--) {
   10fa2:	1e54      	subs	r4, r2, #1
   10fa4:	b16a      	cbz	r2, 10fc2 <crc7_be+0x22>
		uint8_t e = seed ^ *src++;
   10fa6:	f811 3b01 	ldrb.w	r3, [r1], #1
   10faa:	4058      	eors	r0, r3
		uint8_t f = e ^ (e >> 4) ^ (e >> 7);
   10fac:	ea80 1310 	eor.w	r3, r0, r0, lsr #4
   10fb0:	ea83 13d0 	eor.w	r3, r3, r0, lsr #7

		seed = (f << 1) ^ (f << 4);
   10fb4:	0118      	lsls	r0, r3, #4
   10fb6:	ea80 0043 	eor.w	r0, r0, r3, lsl #1
   10fba:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	while (len--) {
   10fbe:	4622      	mov	r2, r4
   10fc0:	e7ef      	b.n	10fa2 <crc7_be+0x2>
	}

	return seed;
}
   10fc2:	bc10      	pop	{r4}
   10fc4:	4770      	bx	lr

00010fc6 <sys_notify_validate>:
	if (notify == NULL) {
   10fc6:	4602      	mov	r2, r0
   10fc8:	b158      	cbz	r0, 10fe2 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   10fca:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   10fcc:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   10fd0:	2b01      	cmp	r3, #1
   10fd2:	d003      	beq.n	10fdc <sys_notify_validate+0x16>
   10fd4:	2b03      	cmp	r3, #3
   10fd6:	d107      	bne.n	10fe8 <sys_notify_validate+0x22>
		if (notify->method.callback == NULL) {
   10fd8:	6803      	ldr	r3, [r0, #0]
   10fda:	b143      	cbz	r3, 10fee <sys_notify_validate+0x28>
		notify->result = 0;
   10fdc:	2000      	movs	r0, #0
   10fde:	6090      	str	r0, [r2, #8]
   10fe0:	4770      	bx	lr
		return -EINVAL;
   10fe2:	f06f 0015 	mvn.w	r0, #21
   10fe6:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
   10fe8:	f06f 0015 	mvn.w	r0, #21
   10fec:	4770      	bx	lr
			rv = -EINVAL;
   10fee:	f06f 0015 	mvn.w	r0, #21
}
   10ff2:	4770      	bx	lr

00010ff4 <arch_printk_char_out>:
}
   10ff4:	2000      	movs	r0, #0
   10ff6:	4770      	bx	lr

00010ff8 <str_out>:
{
   10ff8:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   10ffa:	680c      	ldr	r4, [r1, #0]
   10ffc:	b154      	cbz	r4, 11014 <str_out+0x1c>
   10ffe:	688a      	ldr	r2, [r1, #8]
   11000:	684b      	ldr	r3, [r1, #4]
   11002:	429a      	cmp	r2, r3
   11004:	da06      	bge.n	11014 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   11006:	3b01      	subs	r3, #1
   11008:	429a      	cmp	r2, r3
   1100a:	d008      	beq.n	1101e <str_out+0x26>
		ctx->str[ctx->count++] = c;
   1100c:	1c53      	adds	r3, r2, #1
   1100e:	608b      	str	r3, [r1, #8]
   11010:	54a0      	strb	r0, [r4, r2]
   11012:	e002      	b.n	1101a <str_out+0x22>
		ctx->count++;
   11014:	688b      	ldr	r3, [r1, #8]
   11016:	3301      	adds	r3, #1
   11018:	608b      	str	r3, [r1, #8]
}
   1101a:	bc10      	pop	{r4}
   1101c:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   1101e:	1c53      	adds	r3, r2, #1
   11020:	608b      	str	r3, [r1, #8]
   11022:	2300      	movs	r3, #0
   11024:	54a3      	strb	r3, [r4, r2]
   11026:	e7f8      	b.n	1101a <str_out+0x22>

00011028 <printk>:
{
   11028:	b40f      	push	{r0, r1, r2, r3}
   1102a:	b500      	push	{lr}
   1102c:	b083      	sub	sp, #12
   1102e:	a904      	add	r1, sp, #16
   11030:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   11034:	9101      	str	r1, [sp, #4]
	z_log_printk(fmt, ap);
   11036:	f7f3 fb0b 	bl	4650 <z_log_printk>
}
   1103a:	b003      	add	sp, #12
   1103c:	f85d eb04 	ldr.w	lr, [sp], #4
   11040:	b004      	add	sp, #16
   11042:	4770      	bx	lr

00011044 <snprintk>:
{
   11044:	b40c      	push	{r2, r3}
   11046:	b500      	push	{lr}
   11048:	b083      	sub	sp, #12
   1104a:	ab04      	add	r3, sp, #16
   1104c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   11050:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   11052:	f7f1 fc91 	bl	2978 <vsnprintk>
}
   11056:	b003      	add	sp, #12
   11058:	f85d eb04 	ldr.w	lr, [sp], #4
   1105c:	b002      	add	sp, #8
   1105e:	4770      	bx	lr

00011060 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   11060:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11064:	8b81      	ldrh	r1, [r0, #28]
   11066:	f021 0107 	bic.w	r1, r1, #7
   1106a:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   1106c:	8381      	strh	r1, [r0, #28]
}
   1106e:	4770      	bx	lr

00011070 <notify_monitors>:
{
   11070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11074:	4606      	mov	r6, r0
   11076:	460f      	mov	r7, r1
   11078:	4690      	mov	r8, r2
	return list->head;
   1107a:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1107c:	b119      	cbz	r1, 11086 <notify_monitors+0x16>
   1107e:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   11080:	b131      	cbz	r1, 11090 <notify_monitors+0x20>
	return node->next;
   11082:	680c      	ldr	r4, [r1, #0]
   11084:	e004      	b.n	11090 <notify_monitors+0x20>
   11086:	460c      	mov	r4, r1
   11088:	e002      	b.n	11090 <notify_monitors+0x20>
   1108a:	4623      	mov	r3, r4
   1108c:	4621      	mov	r1, r4
   1108e:	461c      	mov	r4, r3
   11090:	b159      	cbz	r1, 110aa <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   11092:	684d      	ldr	r5, [r1, #4]
   11094:	4643      	mov	r3, r8
   11096:	463a      	mov	r2, r7
   11098:	4630      	mov	r0, r6
   1109a:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1109c:	2c00      	cmp	r4, #0
   1109e:	d0f4      	beq.n	1108a <notify_monitors+0x1a>
   110a0:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   110a2:	2c00      	cmp	r4, #0
   110a4:	d0f2      	beq.n	1108c <notify_monitors+0x1c>
	return node->next;
   110a6:	6823      	ldr	r3, [r4, #0]
   110a8:	e7f0      	b.n	1108c <notify_monitors+0x1c>
}
   110aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000110ae <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   110ae:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   110b0:	f013 0307 	ands.w	r3, r3, #7
   110b4:	d103      	bne.n	110be <process_recheck+0x10>
	return list->head;
   110b6:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   110b8:	b10a      	cbz	r2, 110be <process_recheck+0x10>
		evt = EVT_START;
   110ba:	2003      	movs	r0, #3
   110bc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   110be:	2b02      	cmp	r3, #2
   110c0:	d003      	beq.n	110ca <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   110c2:	2b01      	cmp	r3, #1
   110c4:	d006      	beq.n	110d4 <process_recheck+0x26>
	int evt = EVT_NOP;
   110c6:	2000      	movs	r0, #0
   110c8:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   110ca:	8bc2      	ldrh	r2, [r0, #30]
   110cc:	2a00      	cmp	r2, #0
   110ce:	d1f8      	bne.n	110c2 <process_recheck+0x14>
		evt = EVT_STOP;
   110d0:	2004      	movs	r0, #4
   110d2:	4770      	bx	lr
   110d4:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   110d6:	b10b      	cbz	r3, 110dc <process_recheck+0x2e>
		evt = EVT_RESET;
   110d8:	2005      	movs	r0, #5
}
   110da:	4770      	bx	lr
	int evt = EVT_NOP;
   110dc:	2000      	movs	r0, #0
   110de:	4770      	bx	lr

000110e0 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   110e0:	b158      	cbz	r0, 110fa <validate_args+0x1a>
{
   110e2:	b510      	push	{r4, lr}
   110e4:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   110e6:	b159      	cbz	r1, 11100 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   110e8:	1d08      	adds	r0, r1, #4
   110ea:	f7ff ff6c 	bl	10fc6 <sys_notify_validate>
	if ((rv == 0)
   110ee:	b918      	cbnz	r0, 110f8 <validate_args+0x18>
	    && ((cli->notify.flags
   110f0:	68a3      	ldr	r3, [r4, #8]
   110f2:	f033 0303 	bics.w	r3, r3, #3
   110f6:	d106      	bne.n	11106 <validate_args+0x26>
}
   110f8:	bd10      	pop	{r4, pc}
		return -EINVAL;
   110fa:	f06f 0015 	mvn.w	r0, #21
}
   110fe:	4770      	bx	lr
		return -EINVAL;
   11100:	f06f 0015 	mvn.w	r0, #21
   11104:	e7f8      	b.n	110f8 <validate_args+0x18>
		rv = -EINVAL;
   11106:	f06f 0015 	mvn.w	r0, #21
   1110a:	e7f5      	b.n	110f8 <validate_args+0x18>

0001110c <notify_one>:
{
   1110c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11110:	4607      	mov	r7, r0
   11112:	460c      	mov	r4, r1
   11114:	4616      	mov	r6, r2
   11116:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   11118:	4619      	mov	r1, r3
   1111a:	1d20      	adds	r0, r4, #4
   1111c:	f7f1 fc04 	bl	2928 <sys_notify_finalize>
	if (cb) {
   11120:	b128      	cbz	r0, 1112e <notify_one+0x22>
   11122:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   11124:	462b      	mov	r3, r5
   11126:	4632      	mov	r2, r6
   11128:	4621      	mov	r1, r4
   1112a:	4638      	mov	r0, r7
   1112c:	47c0      	blx	r8
}
   1112e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011132 <notify_all>:
{
   11132:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11136:	4681      	mov	r9, r0
   11138:	460c      	mov	r4, r1
   1113a:	4690      	mov	r8, r2
   1113c:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   1113e:	e005      	b.n	1114c <notify_all+0x1a>
	list->tail = node;
   11140:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   11142:	463b      	mov	r3, r7
   11144:	4642      	mov	r2, r8
   11146:	4648      	mov	r0, r9
   11148:	f7ff ffe0 	bl	1110c <notify_one>
	return list->head;
   1114c:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   1114e:	b129      	cbz	r1, 1115c <notify_all+0x2a>
	return node->next;
   11150:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   11152:	6025      	str	r5, [r4, #0]
	return list->tail;
   11154:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11156:	428e      	cmp	r6, r1
   11158:	d1f3      	bne.n	11142 <notify_all+0x10>
   1115a:	e7f1      	b.n	11140 <notify_all+0xe>
}
   1115c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00011160 <onoff_manager_init>:
	if ((mgr == NULL)
   11160:	b170      	cbz	r0, 11180 <onoff_manager_init+0x20>
{
   11162:	b538      	push	{r3, r4, r5, lr}
   11164:	460c      	mov	r4, r1
   11166:	4605      	mov	r5, r0
	    || (transitions == NULL)
   11168:	b169      	cbz	r1, 11186 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   1116a:	680b      	ldr	r3, [r1, #0]
   1116c:	b173      	cbz	r3, 1118c <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   1116e:	684b      	ldr	r3, [r1, #4]
   11170:	b17b      	cbz	r3, 11192 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   11172:	2220      	movs	r2, #32
   11174:	2100      	movs	r1, #0
   11176:	f003 fc72 	bl	14a5e <memset>
   1117a:	612c      	str	r4, [r5, #16]
	return 0;
   1117c:	2000      	movs	r0, #0
}
   1117e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   11180:	f06f 0015 	mvn.w	r0, #21
}
   11184:	4770      	bx	lr
		return -EINVAL;
   11186:	f06f 0015 	mvn.w	r0, #21
   1118a:	e7f8      	b.n	1117e <onoff_manager_init+0x1e>
   1118c:	f06f 0015 	mvn.w	r0, #21
   11190:	e7f5      	b.n	1117e <onoff_manager_init+0x1e>
   11192:	f06f 0015 	mvn.w	r0, #21
   11196:	e7f2      	b.n	1117e <onoff_manager_init+0x1e>

00011198 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   11198:	b508      	push	{r3, lr}
   1119a:	4604      	mov	r4, r0
   1119c:	4608      	mov	r0, r1
   1119e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   111a0:	461a      	mov	r2, r3
   111a2:	47a0      	blx	r4
	return z_impl_z_current_get();
   111a4:	f7fe fc28 	bl	f9f8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   111a8:	f7f5 f866 	bl	6278 <z_impl_k_thread_abort>

000111ac <_ldiv5>:
{
   111ac:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t v_lo = *v;
   111ae:	6806      	ldr	r6, [r0, #0]
   111b0:	6845      	ldr	r5, [r0, #4]
	uint32_t v_hi = *v >> 32;
   111b2:	f04f 0c00 	mov.w	ip, #0
	__asm__ ("" : "+r" (m));
   111b6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
	result = ((uint64_t)m << 32) | m;
   111ba:	4611      	mov	r1, r2
	result += (uint64_t)v_lo * m;
   111bc:	fba6 6702 	umull	r6, r7, r6, r2
   111c0:	1871      	adds	r1, r6, r1
   111c2:	eb47 0102 	adc.w	r1, r7, r2
	result >>= 32;
   111c6:	4664      	mov	r4, ip
	result += (uint64_t)v_lo * m;
   111c8:	1871      	adds	r1, r6, r1
   111ca:	eb47 0404 	adc.w	r4, r7, r4
	result += (uint64_t)v_hi * m;
   111ce:	fba5 2302 	umull	r2, r3, r5, r2
   111d2:	1851      	adds	r1, r2, r1
   111d4:	eb43 0404 	adc.w	r4, r3, r4
	result >>= 32;
   111d8:	4665      	mov	r5, ip
	result += (uint64_t)v_hi * m;
   111da:	1911      	adds	r1, r2, r4
   111dc:	eb43 0505 	adc.w	r5, r3, r5
	*v = result;
   111e0:	6001      	str	r1, [r0, #0]
   111e2:	6045      	str	r5, [r0, #4]
}
   111e4:	bcf0      	pop	{r4, r5, r6, r7}
   111e6:	4770      	bx	lr

000111e8 <_ldiv10>:
{
   111e8:	b508      	push	{r3, lr}
	*v >>= 1;
   111ea:	6802      	ldr	r2, [r0, #0]
   111ec:	6841      	ldr	r1, [r0, #4]
   111ee:	0852      	lsrs	r2, r2, #1
   111f0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   111f4:	0849      	lsrs	r1, r1, #1
   111f6:	6002      	str	r2, [r0, #0]
   111f8:	6041      	str	r1, [r0, #4]
	_ldiv5(v);
   111fa:	f7ff ffd7 	bl	111ac <_ldiv5>
}
   111fe:	bd08      	pop	{r3, pc}

00011200 <_get_digit>:
	if (*digit_count > 0) {
   11200:	680b      	ldr	r3, [r1, #0]
   11202:	2b00      	cmp	r3, #0
   11204:	dd16      	ble.n	11234 <_get_digit+0x34>
{
   11206:	b430      	push	{r4, r5}
   11208:	4604      	mov	r4, r0
		--*digit_count;
   1120a:	3b01      	subs	r3, #1
   1120c:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   1120e:	6801      	ldr	r1, [r0, #0]
   11210:	6840      	ldr	r0, [r0, #4]
   11212:	0085      	lsls	r5, r0, #2
   11214:	008b      	lsls	r3, r1, #2
   11216:	ea45 7291 	orr.w	r2, r5, r1, lsr #30
   1121a:	185b      	adds	r3, r3, r1
   1121c:	eb40 0202 	adc.w	r2, r0, r2
   11220:	18db      	adds	r3, r3, r3
   11222:	4152      	adcs	r2, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   11224:	0f10      	lsrs	r0, r2, #28
   11226:	3030      	adds	r0, #48	; 0x30
		*fr &= (BIT64(60) - 1U);
   11228:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   1122c:	6023      	str	r3, [r4, #0]
   1122e:	6062      	str	r2, [r4, #4]
}
   11230:	bc30      	pop	{r4, r5}
   11232:	4770      	bx	lr
		rval = '0';
   11234:	2030      	movs	r0, #48	; 0x30
}
   11236:	4770      	bx	lr

00011238 <outs>:
{
   11238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1123c:	4607      	mov	r7, r0
   1123e:	460e      	mov	r6, r1
   11240:	4614      	mov	r4, r2
   11242:	4698      	mov	r8, r3
	size_t count = 0;
   11244:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   11246:	e006      	b.n	11256 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   11248:	4631      	mov	r1, r6
   1124a:	f814 0b01 	ldrb.w	r0, [r4], #1
   1124e:	47b8      	blx	r7
		if (rc < 0) {
   11250:	2800      	cmp	r0, #0
   11252:	db09      	blt.n	11268 <outs+0x30>
		++count;
   11254:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   11256:	4544      	cmp	r4, r8
   11258:	d3f6      	bcc.n	11248 <outs+0x10>
   1125a:	f1b8 0f00 	cmp.w	r8, #0
   1125e:	d102      	bne.n	11266 <outs+0x2e>
   11260:	7823      	ldrb	r3, [r4, #0]
   11262:	2b00      	cmp	r3, #0
   11264:	d1f0      	bne.n	11248 <outs+0x10>
	return (int)count;
   11266:	4628      	mov	r0, r5
}
   11268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001126c <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   1126c:	4040      	eors	r0, r0
   1126e:	f380 8811 	msr	BASEPRI, r0
   11272:	f04f 0004 	mov.w	r0, #4
   11276:	df02      	svc	2
}
   11278:	4770      	bx	lr

0001127a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1127a:	4770      	bx	lr

0001127c <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1127c:	2300      	movs	r3, #0
   1127e:	6043      	str	r3, [r0, #4]
	list->head = NULL;
   11280:	6003      	str	r3, [r0, #0]
}
   11282:	4770      	bx	lr

00011284 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   11284:	6803      	ldr	r3, [r0, #0]
   11286:	b12b      	cbz	r3, 11294 <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
   11288:	6843      	ldr	r3, [r0, #4]
   1128a:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
   1128c:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1128e:	2300      	movs	r3, #0
   11290:	600b      	str	r3, [r1, #0]
}
   11292:	4770      	bx	lr
		list->head = msg;
   11294:	6001      	str	r1, [r0, #0]
   11296:	e7f9      	b.n	1128c <log_list_add_tail+0x8>

00011298 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   11298:	6800      	ldr	r0, [r0, #0]
   1129a:	4770      	bx	lr

0001129c <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   1129c:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   1129e:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   112a0:	b108      	cbz	r0, 112a6 <log_list_head_get+0xa>
		list->head = list->head->next;
   112a2:	6802      	ldr	r2, [r0, #0]
   112a4:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   112a6:	4770      	bx	lr

000112a8 <dummy_timestamp>:
}
   112a8:	2000      	movs	r0, #0
   112aa:	4770      	bx	lr

000112ac <msg_filter_check>:
}
   112ac:	2001      	movs	r0, #1
   112ae:	4770      	bx	lr

000112b0 <default_get_timestamp>:
{
   112b0:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   112b2:	f001 f974 	bl	1259e <sys_clock_cycle_get_32>
}
   112b6:	bd08      	pop	{r3, pc}

000112b8 <z_log_get_tag>:
}
   112b8:	2000      	movs	r0, #0
   112ba:	4770      	bx	lr

000112bc <block_on_alloc>:
}
   112bc:	2000      	movs	r0, #0
   112be:	4770      	bx	lr

000112c0 <cont_arg_get>:
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   112c0:	2901      	cmp	r1, #1
   112c2:	d906      	bls.n	112d2 <cont_arg_get+0x12>
	cont = msg->payload.ext.next;
   112c4:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   112c6:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   112c8:	2906      	cmp	r1, #6
   112ca:	d907      	bls.n	112dc <cont_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
   112cc:	3907      	subs	r1, #7
		cont = cont->next;
   112ce:	681b      	ldr	r3, [r3, #0]
   112d0:	e7fa      	b.n	112c8 <cont_arg_get+0x8>
		return msg->payload.ext.data.args[arg_idx];
   112d2:	3104      	adds	r1, #4
   112d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   112d8:	6888      	ldr	r0, [r1, #8]
   112da:	4770      	bx	lr
	return cont->payload.args[arg_idx];
   112dc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   112e0:	6848      	ldr	r0, [r1, #4]
}
   112e2:	4770      	bx	lr

000112e4 <copy_args_to_msg>:
{
   112e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   112e8:	460d      	mov	r5, r1
	struct log_msg_cont *cont = msg->payload.ext.next;
   112ea:	6946      	ldr	r6, [r0, #20]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   112ec:	2a03      	cmp	r2, #3
   112ee:	d917      	bls.n	11320 <copy_args_to_msg+0x3c>
   112f0:	6809      	ldr	r1, [r1, #0]
   112f2:	686b      	ldr	r3, [r5, #4]
   112f4:	6181      	str	r1, [r0, #24]
   112f6:	61c3      	str	r3, [r0, #28]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   112f8:	1e94      	subs	r4, r2, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   112fa:	3508      	adds	r5, #8
	while (nargs != 0U) {
   112fc:	b1b4      	cbz	r4, 1132c <copy_args_to_msg+0x48>
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   112fe:	46a0      	mov	r8, r4
   11300:	2c07      	cmp	r4, #7
   11302:	bf28      	it	cs
   11304:	f04f 0807 	movcs.w	r8, #7
		(void)memcpy(cont->payload.args, args,
   11308:	ea4f 0788 	mov.w	r7, r8, lsl #2
   1130c:	463a      	mov	r2, r7
   1130e:	4629      	mov	r1, r5
   11310:	1d30      	adds	r0, r6, #4
   11312:	f003 fb96 	bl	14a42 <memcpy>
		nargs -= cpy_args;
   11316:	eba4 0408 	sub.w	r4, r4, r8
		args += cpy_args;
   1131a:	443d      	add	r5, r7
		cont = cont->next;
   1131c:	6836      	ldr	r6, [r6, #0]
   1131e:	e7ed      	b.n	112fc <copy_args_to_msg+0x18>
   11320:	0092      	lsls	r2, r2, #2
   11322:	3014      	adds	r0, #20
   11324:	f003 fb8d 	bl	14a42 <memcpy>
		nargs  = 0U;
   11328:	2400      	movs	r4, #0
   1132a:	e7e7      	b.n	112fc <copy_args_to_msg+0x18>
}
   1132c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011330 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   11330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11334:	461c      	mov	r4, r3
   11336:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1133a:	8903      	ldrh	r3, [r0, #8]
   1133c:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   11340:	42a3      	cmp	r3, r4
   11342:	d91f      	bls.n	11384 <log_msg_hexdump_data_op+0x54>
   11344:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
   11346:	6811      	ldr	r1, [r2, #0]
   11348:	4421      	add	r1, r4
   1134a:	4299      	cmp	r1, r3
   1134c:	d901      	bls.n	11352 <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
   1134e:	1b19      	subs	r1, r3, r4
   11350:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
   11352:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   11354:	2b0c      	cmp	r3, #12
   11356:	d919      	bls.n	1138c <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
   11358:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
   1135c:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1135e:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
   11360:	42a3      	cmp	r3, r4
   11362:	d91e      	bls.n	113a2 <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   11364:	42bb      	cmp	r3, r7
   11366:	bf28      	it	cs
   11368:	463b      	movcs	r3, r7
   1136a:	461d      	mov	r5, r3

		if (put_op) {
   1136c:	f1b9 0f00 	cmp.w	r9, #0
   11370:	d010      	beq.n	11394 <log_msg_hexdump_data_op+0x64>
   11372:	461a      	mov	r2, r3
   11374:	4641      	mov	r1, r8
   11376:	eb0c 0004 	add.w	r0, ip, r4
   1137a:	f003 fb62 	bl	14a42 <memcpy>
			(void)memcpy(&head_data[offset], data, cpy_len);
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
   1137e:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   11380:	44a8      	add	r8, r5
   11382:	e021      	b.n	113c8 <log_msg_hexdump_data_op+0x98>
		*length = 0;
   11384:	2300      	movs	r3, #0
   11386:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   11388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
   1138c:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
   11390:	2600      	movs	r6, #0
   11392:	e7e5      	b.n	11360 <log_msg_hexdump_data_op+0x30>
   11394:	461a      	mov	r2, r3
   11396:	eb0c 0104 	add.w	r1, ip, r4
   1139a:	4640      	mov	r0, r8
   1139c:	f003 fb51 	bl	14a42 <memcpy>
   113a0:	e7ed      	b.n	1137e <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   113a2:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
   113a4:	b91e      	cbnz	r6, 113ae <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
   113a6:	6946      	ldr	r6, [r0, #20]
   113a8:	e001      	b.n	113ae <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
   113aa:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
   113ac:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
   113ae:	2c1b      	cmp	r4, #27
   113b0:	d8fb      	bhi.n	113aa <log_msg_hexdump_data_op+0x7a>
   113b2:	e009      	b.n	113c8 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
   113b4:	1931      	adds	r1, r6, r4
   113b6:	462a      	mov	r2, r5
   113b8:	3104      	adds	r1, #4
   113ba:	4640      	mov	r0, r8
   113bc:	f003 fb41 	bl	14a42 <memcpy>
		cont = cont->next;
   113c0:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
   113c2:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   113c4:	44a8      	add	r8, r5
		offset = 0;
   113c6:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
   113c8:	2f00      	cmp	r7, #0
   113ca:	d0dd      	beq.n	11388 <log_msg_hexdump_data_op+0x58>
   113cc:	2e00      	cmp	r6, #0
   113ce:	d0db      	beq.n	11388 <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   113d0:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   113d4:	42bd      	cmp	r5, r7
   113d6:	bf28      	it	cs
   113d8:	463d      	movcs	r5, r7
		if (put_op) {
   113da:	f1b9 0f00 	cmp.w	r9, #0
   113de:	d0e9      	beq.n	113b4 <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
   113e0:	1930      	adds	r0, r6, r4
   113e2:	462a      	mov	r2, r5
   113e4:	4641      	mov	r1, r8
   113e6:	3004      	adds	r0, #4
   113e8:	f003 fb2b 	bl	14a42 <memcpy>
   113ec:	e7e8      	b.n	113c0 <log_msg_hexdump_data_op+0x90>

000113ee <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
   113ee:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   113f0:	f3bf 8f5b 	dmb	ish
   113f4:	e850 3f00 	ldrex	r3, [r0]
   113f8:	3301      	adds	r3, #1
   113fa:	e840 3200 	strex	r2, r3, [r0]
   113fe:	2a00      	cmp	r2, #0
   11400:	d1f8      	bne.n	113f4 <log_msg_get+0x6>
   11402:	f3bf 8f5b 	dmb	ish
}
   11406:	4770      	bx	lr

00011408 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   11408:	7a40      	ldrb	r0, [r0, #9]
}
   1140a:	0900      	lsrs	r0, r0, #4
   1140c:	4770      	bx	lr

0001140e <log_msg_arg_get>:
{
   1140e:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
   11410:	7a43      	ldrb	r3, [r0, #9]
   11412:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   11416:	d20a      	bcs.n	1142e <log_msg_arg_get+0x20>
   11418:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1141a:	2a03      	cmp	r2, #3
   1141c:	d804      	bhi.n	11428 <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
   1141e:	3104      	adds	r1, #4
   11420:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   11424:	6840      	ldr	r0, [r0, #4]
   11426:	e003      	b.n	11430 <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
   11428:	f7ff ff4a 	bl	112c0 <cont_arg_get>
   1142c:	e000      	b.n	11430 <log_msg_arg_get+0x22>
		return 0;
   1142e:	2000      	movs	r0, #0
}
   11430:	bd08      	pop	{r3, pc}

00011432 <log_msg_str_get>:
}
   11432:	6900      	ldr	r0, [r0, #16]
   11434:	4770      	bx	lr

00011436 <log_msg_put>:
{
   11436:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
   11438:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1143a:	f3bf 8f5b 	dmb	ish
   1143e:	e853 2f00 	ldrex	r2, [r3]
   11442:	3a01      	subs	r2, #1
   11444:	e843 2100 	strex	r1, r2, [r3]
   11448:	2900      	cmp	r1, #0
   1144a:	d1f8      	bne.n	1143e <log_msg_put+0x8>
   1144c:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   11450:	6843      	ldr	r3, [r0, #4]
   11452:	b103      	cbz	r3, 11456 <log_msg_put+0x20>
}
   11454:	bd08      	pop	{r3, pc}
		msg_free(msg);
   11456:	f7f3 fb5b 	bl	4b10 <msg_free>
}
   1145a:	e7fb      	b.n	11454 <log_msg_put+0x1e>

0001145c <msg_alloc>:
{
   1145c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1145e:	4605      	mov	r5, r0
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   11460:	f7f3 fb3a 	bl	4ad8 <log_msg_chunk_alloc>
	if (msg != NULL) {
   11464:	4607      	mov	r7, r0
   11466:	b140      	cbz	r0, 1147a <msg_alloc+0x1e>
		msg->hdr.ref_cnt = 1;
   11468:	2301      	movs	r3, #1
   1146a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1146c:	2200      	movs	r2, #0
   1146e:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   11470:	f04f 0300 	mov.w	r3, #0
   11474:	f362 0300 	bfi	r3, r2, #0, #1
   11478:	7203      	strb	r3, [r0, #8]
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1147a:	b1f7      	cbz	r7, 114ba <msg_alloc+0x5e>
   1147c:	2d03      	cmp	r5, #3
   1147e:	d91c      	bls.n	114ba <msg_alloc+0x5e>
	msg->hdr.params.std.nargs = 0U;
   11480:	7a7b      	ldrb	r3, [r7, #9]
   11482:	f36f 1307 	bfc	r3, #4, #4
   11486:	727b      	strb	r3, [r7, #9]
	msg->hdr.params.generic.ext = 1;
   11488:	7a3b      	ldrb	r3, [r7, #8]
   1148a:	f043 0302 	orr.w	r3, r3, #2
   1148e:	723b      	strb	r3, [r7, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   11490:	3d02      	subs	r5, #2
	next = &msg->payload.ext.next;
   11492:	f107 0614 	add.w	r6, r7, #20
	*next = NULL;
   11496:	2300      	movs	r3, #0
   11498:	617b      	str	r3, [r7, #20]
	while (n > 0) {
   1149a:	2d00      	cmp	r5, #0
   1149c:	dd0d      	ble.n	114ba <msg_alloc+0x5e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1149e:	f7f3 fb1b 	bl	4ad8 <log_msg_chunk_alloc>
		if (cont == NULL) {
   114a2:	4604      	mov	r4, r0
   114a4:	b128      	cbz	r0, 114b2 <msg_alloc+0x56>
		*next = cont;
   114a6:	6030      	str	r0, [r6, #0]
		cont->next = NULL;
   114a8:	2300      	movs	r3, #0
   114aa:	6003      	str	r3, [r0, #0]
		next = &cont->next;
   114ac:	4606      	mov	r6, r0
		n -= ARGS_CONT_MSG;
   114ae:	3d07      	subs	r5, #7
   114b0:	e7f3      	b.n	1149a <msg_alloc+0x3e>
			msg_free(msg);
   114b2:	4638      	mov	r0, r7
   114b4:	f7f3 fb2c 	bl	4b10 <msg_free>
			return NULL;
   114b8:	4627      	mov	r7, r4
}
   114ba:	4638      	mov	r0, r7
   114bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000114be <log_msg_hexdump_create>:
{
   114be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   114c2:	4606      	mov	r6, r0
   114c4:	460f      	mov	r7, r1
   114c6:	4614      	mov	r4, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   114c8:	f643 75ff 	movw	r5, #16383	; 0x3fff
   114cc:	4295      	cmp	r5, r2
   114ce:	bf28      	it	cs
   114d0:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   114d2:	f7f3 fb01 	bl	4ad8 <log_msg_chunk_alloc>
	if (msg == NULL) {
   114d6:	4681      	mov	r9, r0
   114d8:	2800      	cmp	r0, #0
   114da:	d041      	beq.n	11560 <log_msg_hexdump_create+0xa2>
	msg->hdr.ref_cnt = 1;
   114dc:	2301      	movs	r3, #1
   114de:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   114e0:	7a03      	ldrb	r3, [r0, #8]
   114e2:	f043 0301 	orr.w	r3, r3, #1
   114e6:	7203      	strb	r3, [r0, #8]
	msg->hdr.params.hexdump.length = length;
   114e8:	8903      	ldrh	r3, [r0, #8]
   114ea:	f365 038f 	bfi	r3, r5, #2, #14
   114ee:	8103      	strh	r3, [r0, #8]
	msg->str = str;
   114f0:	6106      	str	r6, [r0, #16]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   114f2:	2c0c      	cmp	r4, #12
   114f4:	d923      	bls.n	1153e <log_msg_hexdump_create+0x80>
   114f6:	683a      	ldr	r2, [r7, #0]
   114f8:	687b      	ldr	r3, [r7, #4]
   114fa:	6182      	str	r2, [r0, #24]
   114fc:	61c3      	str	r3, [r0, #28]
		msg->payload.ext.next = NULL;
   114fe:	2300      	movs	r3, #0
   11500:	6143      	str	r3, [r0, #20]
		msg->hdr.params.generic.ext = 1;
   11502:	7a03      	ldrb	r3, [r0, #8]
   11504:	f043 0302 	orr.w	r3, r3, #2
   11508:	7203      	strb	r3, [r0, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1150a:	3708      	adds	r7, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1150c:	3d08      	subs	r5, #8
	prev_cont = &msg->payload.ext.next;
   1150e:	f109 0814 	add.w	r8, r9, #20
	while (length > 0) {
   11512:	b32d      	cbz	r5, 11560 <log_msg_hexdump_create+0xa2>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   11514:	f7f3 fae0 	bl	4ad8 <log_msg_chunk_alloc>
		if (cont == NULL) {
   11518:	4604      	mov	r4, r0
   1151a:	b1e8      	cbz	r0, 11558 <log_msg_hexdump_create+0x9a>
		*prev_cont = cont;
   1151c:	f8c8 0000 	str.w	r0, [r8]
		cont->next = NULL;
   11520:	2300      	movs	r3, #0
   11522:	6003      	str	r3, [r0, #0]
		prev_cont = &cont->next;
   11524:	4680      	mov	r8, r0
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   11526:	462e      	mov	r6, r5
   11528:	2d1c      	cmp	r5, #28
   1152a:	bf28      	it	cs
   1152c:	261c      	movcs	r6, #28
   1152e:	4632      	mov	r2, r6
   11530:	4639      	mov	r1, r7
   11532:	3004      	adds	r0, #4
   11534:	f003 fa85 	bl	14a42 <memcpy>
		data += chunk_length;
   11538:	4437      	add	r7, r6
		length -= chunk_length;
   1153a:	1bad      	subs	r5, r5, r6
   1153c:	e7e9      	b.n	11512 <log_msg_hexdump_create+0x54>
   1153e:	462a      	mov	r2, r5
   11540:	4639      	mov	r1, r7
   11542:	3014      	adds	r0, #20
   11544:	f003 fa7d 	bl	14a42 <memcpy>
		msg->hdr.params.generic.ext = 0;
   11548:	f899 3008 	ldrb.w	r3, [r9, #8]
   1154c:	f36f 0341 	bfc	r3, #1, #1
   11550:	f889 3008 	strb.w	r3, [r9, #8]
		length = 0U;
   11554:	2500      	movs	r5, #0
   11556:	e7da      	b.n	1150e <log_msg_hexdump_create+0x50>
			msg_free(msg);
   11558:	4648      	mov	r0, r9
   1155a:	f7f3 fad9 	bl	4b10 <msg_free>
			return NULL;
   1155e:	46a1      	mov	r9, r4
}
   11560:	4648      	mov	r0, r9
   11562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00011566 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   11566:	b510      	push	{r4, lr}
   11568:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1156a:	2400      	movs	r4, #0
   1156c:	9400      	str	r4, [sp, #0]
   1156e:	f7ff fedf 	bl	11330 <log_msg_hexdump_data_op>
}
   11572:	b002      	add	sp, #8
   11574:	bd10      	pop	{r4, pc}

00011576 <buffer_write>:
{
   11576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11578:	4607      	mov	r7, r0
   1157a:	460d      	mov	r5, r1
   1157c:	4614      	mov	r4, r2
   1157e:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   11580:	4632      	mov	r2, r6
   11582:	4621      	mov	r1, r4
   11584:	4628      	mov	r0, r5
   11586:	47b8      	blx	r7
		buf += processed;
   11588:	4405      	add	r5, r0
	} while (len != 0);
   1158a:	1a24      	subs	r4, r4, r0
   1158c:	d1f8      	bne.n	11580 <buffer_write+0xa>
}
   1158e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011590 <color_prefix>:
{
   11590:	b508      	push	{r3, lr}
   11592:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   11594:	2201      	movs	r2, #1
   11596:	f7f3 fb7b 	bl	4c90 <color_print>
}
   1159a:	bd08      	pop	{r3, pc}

0001159c <color_postfix>:
{
   1159c:	b508      	push	{r3, lr}
   1159e:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   115a0:	2200      	movs	r2, #0
   115a2:	f7f3 fb75 	bl	4c90 <color_print>
}
   115a6:	bd08      	pop	{r3, pc}

000115a8 <postfix_print>:
{
   115a8:	b538      	push	{r3, r4, r5, lr}
   115aa:	4605      	mov	r5, r0
   115ac:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   115ae:	f001 0101 	and.w	r1, r1, #1
   115b2:	f7ff fff3 	bl	1159c <color_postfix>
	newline_print(output, flags);
   115b6:	4621      	mov	r1, r4
   115b8:	4628      	mov	r0, r5
   115ba:	f7f3 fb7f 	bl	4cbc <newline_print>
}
   115be:	bd38      	pop	{r3, r4, r5, pc}

000115c0 <std_print>:
{
   115c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   115c4:	b08e      	sub	sp, #56	; 0x38
   115c6:	af0e      	add	r7, sp, #56	; 0x38
   115c8:	4606      	mov	r6, r0
   115ca:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
   115cc:	f7ff ff31 	bl	11432 <log_msg_str_get>
   115d0:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   115d2:	4630      	mov	r0, r6
   115d4:	f7ff ff18 	bl	11408 <log_msg_nargs_get>
   115d8:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   115da:	0083      	lsls	r3, r0, #2
   115dc:	3307      	adds	r3, #7
   115de:	f023 0307 	bic.w	r3, r3, #7
   115e2:	ebad 0d03 	sub.w	sp, sp, r3
   115e6:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   115e8:	2400      	movs	r4, #0
   115ea:	4544      	cmp	r4, r8
   115ec:	d207      	bcs.n	115fe <std_print+0x3e>
		args[i] = log_msg_arg_get(msg, i);
   115ee:	4621      	mov	r1, r4
   115f0:	4630      	mov	r0, r6
   115f2:	f7ff ff0c 	bl	1140e <log_msg_arg_get>
   115f6:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
   115fa:	3401      	adds	r4, #1
   115fc:	e7f5      	b.n	115ea <std_print+0x2a>
	switch (log_msg_nargs_get(msg)) {
   115fe:	4630      	mov	r0, r6
   11600:	f7ff ff02 	bl	11408 <log_msg_nargs_get>
   11604:	280f      	cmp	r0, #15
   11606:	d815      	bhi.n	11634 <std_print+0x74>
   11608:	e8df f010 	tbh	[pc, r0, lsl #1]
   1160c:	00170010 	.word	0x00170010
   11610:	0024001d 	.word	0x0024001d
   11614:	0038002d 	.word	0x0038002d
   11618:	00540045 	.word	0x00540045
   1161c:	00780065 	.word	0x00780065
   11620:	00a4008d 	.word	0x00a4008d
   11624:	00d800bd 	.word	0x00d800bd
   11628:	011400f5 	.word	0x011400f5
		print_formatted(output, str);
   1162c:	4651      	mov	r1, sl
   1162e:	4648      	mov	r0, r9
   11630:	f7f3 fad6 	bl	4be0 <print_formatted>
}
   11634:	46bd      	mov	sp, r7
   11636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   1163a:	682a      	ldr	r2, [r5, #0]
   1163c:	4651      	mov	r1, sl
   1163e:	4648      	mov	r0, r9
   11640:	f7f3 face 	bl	4be0 <print_formatted>
		break;
   11644:	e7f6      	b.n	11634 <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
   11646:	686b      	ldr	r3, [r5, #4]
   11648:	682a      	ldr	r2, [r5, #0]
   1164a:	4651      	mov	r1, sl
   1164c:	4648      	mov	r0, r9
   1164e:	f7f3 fac7 	bl	4be0 <print_formatted>
		break;
   11652:	e7ef      	b.n	11634 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
   11654:	686b      	ldr	r3, [r5, #4]
   11656:	682a      	ldr	r2, [r5, #0]
   11658:	68a9      	ldr	r1, [r5, #8]
   1165a:	9100      	str	r1, [sp, #0]
   1165c:	4651      	mov	r1, sl
   1165e:	4648      	mov	r0, r9
   11660:	f7f3 fabe 	bl	4be0 <print_formatted>
		break;
   11664:	e7e6      	b.n	11634 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   11666:	686b      	ldr	r3, [r5, #4]
   11668:	682a      	ldr	r2, [r5, #0]
   1166a:	68e9      	ldr	r1, [r5, #12]
   1166c:	9101      	str	r1, [sp, #4]
   1166e:	68a9      	ldr	r1, [r5, #8]
   11670:	9100      	str	r1, [sp, #0]
   11672:	4651      	mov	r1, sl
   11674:	4648      	mov	r0, r9
   11676:	f7f3 fab3 	bl	4be0 <print_formatted>
		break;
   1167a:	e7db      	b.n	11634 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1167c:	686b      	ldr	r3, [r5, #4]
   1167e:	682a      	ldr	r2, [r5, #0]
   11680:	6929      	ldr	r1, [r5, #16]
   11682:	9102      	str	r1, [sp, #8]
   11684:	68e9      	ldr	r1, [r5, #12]
   11686:	9101      	str	r1, [sp, #4]
   11688:	68a9      	ldr	r1, [r5, #8]
   1168a:	9100      	str	r1, [sp, #0]
   1168c:	4651      	mov	r1, sl
   1168e:	4648      	mov	r0, r9
   11690:	f7f3 faa6 	bl	4be0 <print_formatted>
		break;
   11694:	e7ce      	b.n	11634 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   11696:	686b      	ldr	r3, [r5, #4]
   11698:	682a      	ldr	r2, [r5, #0]
   1169a:	6969      	ldr	r1, [r5, #20]
   1169c:	9103      	str	r1, [sp, #12]
   1169e:	6929      	ldr	r1, [r5, #16]
   116a0:	9102      	str	r1, [sp, #8]
   116a2:	68e9      	ldr	r1, [r5, #12]
   116a4:	9101      	str	r1, [sp, #4]
   116a6:	68a9      	ldr	r1, [r5, #8]
   116a8:	9100      	str	r1, [sp, #0]
   116aa:	4651      	mov	r1, sl
   116ac:	4648      	mov	r0, r9
   116ae:	f7f3 fa97 	bl	4be0 <print_formatted>
		break;
   116b2:	e7bf      	b.n	11634 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   116b4:	686b      	ldr	r3, [r5, #4]
   116b6:	682a      	ldr	r2, [r5, #0]
   116b8:	69a9      	ldr	r1, [r5, #24]
   116ba:	9104      	str	r1, [sp, #16]
   116bc:	6969      	ldr	r1, [r5, #20]
   116be:	9103      	str	r1, [sp, #12]
   116c0:	6929      	ldr	r1, [r5, #16]
   116c2:	9102      	str	r1, [sp, #8]
   116c4:	68e9      	ldr	r1, [r5, #12]
   116c6:	9101      	str	r1, [sp, #4]
   116c8:	68a9      	ldr	r1, [r5, #8]
   116ca:	9100      	str	r1, [sp, #0]
   116cc:	4651      	mov	r1, sl
   116ce:	4648      	mov	r0, r9
   116d0:	f7f3 fa86 	bl	4be0 <print_formatted>
		break;
   116d4:	e7ae      	b.n	11634 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   116d6:	686b      	ldr	r3, [r5, #4]
   116d8:	682a      	ldr	r2, [r5, #0]
   116da:	69e9      	ldr	r1, [r5, #28]
   116dc:	9105      	str	r1, [sp, #20]
   116de:	69a9      	ldr	r1, [r5, #24]
   116e0:	9104      	str	r1, [sp, #16]
   116e2:	6969      	ldr	r1, [r5, #20]
   116e4:	9103      	str	r1, [sp, #12]
   116e6:	6929      	ldr	r1, [r5, #16]
   116e8:	9102      	str	r1, [sp, #8]
   116ea:	68e9      	ldr	r1, [r5, #12]
   116ec:	9101      	str	r1, [sp, #4]
   116ee:	68a9      	ldr	r1, [r5, #8]
   116f0:	9100      	str	r1, [sp, #0]
   116f2:	4651      	mov	r1, sl
   116f4:	4648      	mov	r0, r9
   116f6:	f7f3 fa73 	bl	4be0 <print_formatted>
		break;
   116fa:	e79b      	b.n	11634 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   116fc:	686b      	ldr	r3, [r5, #4]
   116fe:	682a      	ldr	r2, [r5, #0]
   11700:	6a29      	ldr	r1, [r5, #32]
   11702:	9106      	str	r1, [sp, #24]
   11704:	69e9      	ldr	r1, [r5, #28]
   11706:	9105      	str	r1, [sp, #20]
   11708:	69a9      	ldr	r1, [r5, #24]
   1170a:	9104      	str	r1, [sp, #16]
   1170c:	6969      	ldr	r1, [r5, #20]
   1170e:	9103      	str	r1, [sp, #12]
   11710:	6929      	ldr	r1, [r5, #16]
   11712:	9102      	str	r1, [sp, #8]
   11714:	68e9      	ldr	r1, [r5, #12]
   11716:	9101      	str	r1, [sp, #4]
   11718:	68a9      	ldr	r1, [r5, #8]
   1171a:	9100      	str	r1, [sp, #0]
   1171c:	4651      	mov	r1, sl
   1171e:	4648      	mov	r0, r9
   11720:	f7f3 fa5e 	bl	4be0 <print_formatted>
		break;
   11724:	e786      	b.n	11634 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   11726:	686b      	ldr	r3, [r5, #4]
   11728:	682a      	ldr	r2, [r5, #0]
   1172a:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1172c:	9107      	str	r1, [sp, #28]
   1172e:	6a29      	ldr	r1, [r5, #32]
   11730:	9106      	str	r1, [sp, #24]
   11732:	69e9      	ldr	r1, [r5, #28]
   11734:	9105      	str	r1, [sp, #20]
   11736:	69a9      	ldr	r1, [r5, #24]
   11738:	9104      	str	r1, [sp, #16]
   1173a:	6969      	ldr	r1, [r5, #20]
   1173c:	9103      	str	r1, [sp, #12]
   1173e:	6929      	ldr	r1, [r5, #16]
   11740:	9102      	str	r1, [sp, #8]
   11742:	68e9      	ldr	r1, [r5, #12]
   11744:	9101      	str	r1, [sp, #4]
   11746:	68a9      	ldr	r1, [r5, #8]
   11748:	9100      	str	r1, [sp, #0]
   1174a:	4651      	mov	r1, sl
   1174c:	4648      	mov	r0, r9
   1174e:	f7f3 fa47 	bl	4be0 <print_formatted>
		break;
   11752:	e76f      	b.n	11634 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   11754:	686b      	ldr	r3, [r5, #4]
   11756:	682a      	ldr	r2, [r5, #0]
   11758:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1175a:	9108      	str	r1, [sp, #32]
   1175c:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1175e:	9107      	str	r1, [sp, #28]
   11760:	6a29      	ldr	r1, [r5, #32]
   11762:	9106      	str	r1, [sp, #24]
   11764:	69e9      	ldr	r1, [r5, #28]
   11766:	9105      	str	r1, [sp, #20]
   11768:	69a9      	ldr	r1, [r5, #24]
   1176a:	9104      	str	r1, [sp, #16]
   1176c:	6969      	ldr	r1, [r5, #20]
   1176e:	9103      	str	r1, [sp, #12]
   11770:	6929      	ldr	r1, [r5, #16]
   11772:	9102      	str	r1, [sp, #8]
   11774:	68e9      	ldr	r1, [r5, #12]
   11776:	9101      	str	r1, [sp, #4]
   11778:	68a9      	ldr	r1, [r5, #8]
   1177a:	9100      	str	r1, [sp, #0]
   1177c:	4651      	mov	r1, sl
   1177e:	4648      	mov	r0, r9
   11780:	f7f3 fa2e 	bl	4be0 <print_formatted>
		break;
   11784:	e756      	b.n	11634 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   11786:	686b      	ldr	r3, [r5, #4]
   11788:	682a      	ldr	r2, [r5, #0]
   1178a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   1178c:	9109      	str	r1, [sp, #36]	; 0x24
   1178e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   11790:	9108      	str	r1, [sp, #32]
   11792:	6a69      	ldr	r1, [r5, #36]	; 0x24
   11794:	9107      	str	r1, [sp, #28]
   11796:	6a29      	ldr	r1, [r5, #32]
   11798:	9106      	str	r1, [sp, #24]
   1179a:	69e9      	ldr	r1, [r5, #28]
   1179c:	9105      	str	r1, [sp, #20]
   1179e:	69a9      	ldr	r1, [r5, #24]
   117a0:	9104      	str	r1, [sp, #16]
   117a2:	6969      	ldr	r1, [r5, #20]
   117a4:	9103      	str	r1, [sp, #12]
   117a6:	6929      	ldr	r1, [r5, #16]
   117a8:	9102      	str	r1, [sp, #8]
   117aa:	68e9      	ldr	r1, [r5, #12]
   117ac:	9101      	str	r1, [sp, #4]
   117ae:	68a9      	ldr	r1, [r5, #8]
   117b0:	9100      	str	r1, [sp, #0]
   117b2:	4651      	mov	r1, sl
   117b4:	4648      	mov	r0, r9
   117b6:	f7f3 fa13 	bl	4be0 <print_formatted>
		break;
   117ba:	e73b      	b.n	11634 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   117bc:	686b      	ldr	r3, [r5, #4]
   117be:	682a      	ldr	r2, [r5, #0]
   117c0:	6b29      	ldr	r1, [r5, #48]	; 0x30
   117c2:	910a      	str	r1, [sp, #40]	; 0x28
   117c4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   117c6:	9109      	str	r1, [sp, #36]	; 0x24
   117c8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   117ca:	9108      	str	r1, [sp, #32]
   117cc:	6a69      	ldr	r1, [r5, #36]	; 0x24
   117ce:	9107      	str	r1, [sp, #28]
   117d0:	6a29      	ldr	r1, [r5, #32]
   117d2:	9106      	str	r1, [sp, #24]
   117d4:	69e9      	ldr	r1, [r5, #28]
   117d6:	9105      	str	r1, [sp, #20]
   117d8:	69a9      	ldr	r1, [r5, #24]
   117da:	9104      	str	r1, [sp, #16]
   117dc:	6969      	ldr	r1, [r5, #20]
   117de:	9103      	str	r1, [sp, #12]
   117e0:	6929      	ldr	r1, [r5, #16]
   117e2:	9102      	str	r1, [sp, #8]
   117e4:	68e9      	ldr	r1, [r5, #12]
   117e6:	9101      	str	r1, [sp, #4]
   117e8:	68a9      	ldr	r1, [r5, #8]
   117ea:	9100      	str	r1, [sp, #0]
   117ec:	4651      	mov	r1, sl
   117ee:	4648      	mov	r0, r9
   117f0:	f7f3 f9f6 	bl	4be0 <print_formatted>
		break;
   117f4:	e71e      	b.n	11634 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   117f6:	686b      	ldr	r3, [r5, #4]
   117f8:	682a      	ldr	r2, [r5, #0]
   117fa:	6b69      	ldr	r1, [r5, #52]	; 0x34
   117fc:	910b      	str	r1, [sp, #44]	; 0x2c
   117fe:	6b29      	ldr	r1, [r5, #48]	; 0x30
   11800:	910a      	str	r1, [sp, #40]	; 0x28
   11802:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   11804:	9109      	str	r1, [sp, #36]	; 0x24
   11806:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   11808:	9108      	str	r1, [sp, #32]
   1180a:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1180c:	9107      	str	r1, [sp, #28]
   1180e:	6a29      	ldr	r1, [r5, #32]
   11810:	9106      	str	r1, [sp, #24]
   11812:	69e9      	ldr	r1, [r5, #28]
   11814:	9105      	str	r1, [sp, #20]
   11816:	69a9      	ldr	r1, [r5, #24]
   11818:	9104      	str	r1, [sp, #16]
   1181a:	6969      	ldr	r1, [r5, #20]
   1181c:	9103      	str	r1, [sp, #12]
   1181e:	6929      	ldr	r1, [r5, #16]
   11820:	9102      	str	r1, [sp, #8]
   11822:	68e9      	ldr	r1, [r5, #12]
   11824:	9101      	str	r1, [sp, #4]
   11826:	68a9      	ldr	r1, [r5, #8]
   11828:	9100      	str	r1, [sp, #0]
   1182a:	4651      	mov	r1, sl
   1182c:	4648      	mov	r0, r9
   1182e:	f7f3 f9d7 	bl	4be0 <print_formatted>
		break;
   11832:	e6ff      	b.n	11634 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   11834:	686b      	ldr	r3, [r5, #4]
   11836:	682a      	ldr	r2, [r5, #0]
   11838:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   1183a:	910c      	str	r1, [sp, #48]	; 0x30
   1183c:	6b69      	ldr	r1, [r5, #52]	; 0x34
   1183e:	910b      	str	r1, [sp, #44]	; 0x2c
   11840:	6b29      	ldr	r1, [r5, #48]	; 0x30
   11842:	910a      	str	r1, [sp, #40]	; 0x28
   11844:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   11846:	9109      	str	r1, [sp, #36]	; 0x24
   11848:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1184a:	9108      	str	r1, [sp, #32]
   1184c:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1184e:	9107      	str	r1, [sp, #28]
   11850:	6a29      	ldr	r1, [r5, #32]
   11852:	9106      	str	r1, [sp, #24]
   11854:	69e9      	ldr	r1, [r5, #28]
   11856:	9105      	str	r1, [sp, #20]
   11858:	69a9      	ldr	r1, [r5, #24]
   1185a:	9104      	str	r1, [sp, #16]
   1185c:	6969      	ldr	r1, [r5, #20]
   1185e:	9103      	str	r1, [sp, #12]
   11860:	6929      	ldr	r1, [r5, #16]
   11862:	9102      	str	r1, [sp, #8]
   11864:	68e9      	ldr	r1, [r5, #12]
   11866:	9101      	str	r1, [sp, #4]
   11868:	68a9      	ldr	r1, [r5, #8]
   1186a:	9100      	str	r1, [sp, #0]
   1186c:	4651      	mov	r1, sl
   1186e:	4648      	mov	r0, r9
   11870:	f7f3 f9b6 	bl	4be0 <print_formatted>
}
   11874:	e6de      	b.n	11634 <std_print+0x74>

00011876 <log_output_flush>:
{
   11876:	b510      	push	{r4, lr}
   11878:	4604      	mov	r4, r0
		     output->control_block->offset,
   1187a:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   1187c:	6853      	ldr	r3, [r2, #4]
   1187e:	6812      	ldr	r2, [r2, #0]
   11880:	6881      	ldr	r1, [r0, #8]
   11882:	6800      	ldr	r0, [r0, #0]
   11884:	f7ff fe77 	bl	11576 <buffer_write>
	output->control_block->offset = 0;
   11888:	6863      	ldr	r3, [r4, #4]
   1188a:	2200      	movs	r2, #0
   1188c:	601a      	str	r2, [r3, #0]
}
   1188e:	bd10      	pop	{r4, pc}

00011890 <log_output_msg_process>:
{
   11890:	b5f0      	push	{r4, r5, r6, r7, lr}
   11892:	b085      	sub	sp, #20
   11894:	4606      	mov	r6, r0
   11896:	460c      	mov	r4, r1
   11898:	4617      	mov	r7, r2
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1189a:	7a0b      	ldrb	r3, [r1, #8]
   1189c:	f083 0301 	eor.w	r3, r3, #1
   118a0:	f003 0201 	and.w	r2, r3, #1
	return msg->hdr.timestamp;
   118a4:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
   118a6:	7a89      	ldrb	r1, [r1, #10]
	return msg->hdr.ids.domain_id;
   118a8:	f3c1 0cc2 	ubfx	ip, r1, #3, #3
	return msg->hdr.ids.source_id;
   118ac:	8960      	ldrh	r0, [r4, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
   118ae:	f3c0 1089 	ubfx	r0, r0, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
   118b2:	f011 0507 	ands.w	r5, r1, #7
   118b6:	d10f      	bne.n	118d8 <log_output_msg_process+0x48>
   118b8:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   118ba:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
   118bc:	f013 0f01 	tst.w	r3, #1
   118c0:	d014      	beq.n	118ec <log_output_msg_process+0x5c>
	} else if (raw_string) {
   118c2:	b9c5      	cbnz	r5, 118f6 <log_output_msg_process+0x66>
		raw_string_print(msg, output);
   118c4:	4631      	mov	r1, r6
   118c6:	4620      	mov	r0, r4
   118c8:	f7f3 fb3a 	bl	4f40 <raw_string_print>
	if (!raw_string) {
   118cc:	b9cd      	cbnz	r5, 11902 <log_output_msg_process+0x72>
	log_output_flush(output);
   118ce:	4630      	mov	r0, r6
   118d0:	f7ff ffd1 	bl	11876 <log_output_flush>
}
   118d4:	b005      	add	sp, #20
   118d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
   118d8:	9002      	str	r0, [sp, #8]
   118da:	f8cd c004 	str.w	ip, [sp, #4]
   118de:	9500      	str	r5, [sp, #0]
   118e0:	4639      	mov	r1, r7
   118e2:	4630      	mov	r0, r6
   118e4:	f7f3 fa96 	bl	4e14 <prefix_print>
   118e8:	4602      	mov	r2, r0
   118ea:	e7e6      	b.n	118ba <log_output_msg_process+0x2a>
		std_print(msg, output);
   118ec:	4631      	mov	r1, r6
   118ee:	4620      	mov	r0, r4
   118f0:	f7ff fe66 	bl	115c0 <std_print>
   118f4:	e7ea      	b.n	118cc <log_output_msg_process+0x3c>
		hexdump_print(msg, output, prefix_offset, flags);
   118f6:	463b      	mov	r3, r7
   118f8:	4631      	mov	r1, r6
   118fa:	4620      	mov	r0, r4
   118fc:	f7f3 fac6 	bl	4e8c <hexdump_print>
   11900:	e7e4      	b.n	118cc <log_output_msg_process+0x3c>
		postfix_print(output, flags, level);
   11902:	462a      	mov	r2, r5
   11904:	4639      	mov	r1, r7
   11906:	4630      	mov	r0, r6
   11908:	f7ff fe4e 	bl	115a8 <postfix_print>
   1190c:	e7df      	b.n	118ce <log_output_msg_process+0x3e>

0001190e <disk_access_init>:
{
   1190e:	b508      	push	{r3, lr}
	struct disk_info *disk = disk_access_get_di(pdrv);
   11910:	f7f3 fc4a 	bl	51a8 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   11914:	b128      	cbz	r0, 11922 <disk_access_init+0x14>
   11916:	68c2      	ldr	r2, [r0, #12]
   11918:	b132      	cbz	r2, 11928 <disk_access_init+0x1a>
				(disk->ops->init != NULL)) {
   1191a:	6812      	ldr	r2, [r2, #0]
	if ((disk != NULL) && (disk->ops != NULL) &&
   1191c:	b13a      	cbz	r2, 1192e <disk_access_init+0x20>
		rc = disk->ops->init(disk);
   1191e:	4790      	blx	r2
}
   11920:	bd08      	pop	{r3, pc}
	int rc = -EINVAL;
   11922:	f06f 0015 	mvn.w	r0, #21
   11926:	e7fb      	b.n	11920 <disk_access_init+0x12>
   11928:	f06f 0015 	mvn.w	r0, #21
   1192c:	e7f8      	b.n	11920 <disk_access_init+0x12>
   1192e:	f06f 0015 	mvn.w	r0, #21
	return rc;
   11932:	e7f5      	b.n	11920 <disk_access_init+0x12>

00011934 <disk_access_status>:
{
   11934:	b508      	push	{r3, lr}
	struct disk_info *disk = disk_access_get_di(pdrv);
   11936:	f7f3 fc37 	bl	51a8 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   1193a:	b128      	cbz	r0, 11948 <disk_access_status+0x14>
   1193c:	68c2      	ldr	r2, [r0, #12]
   1193e:	b132      	cbz	r2, 1194e <disk_access_status+0x1a>
				(disk->ops->status != NULL)) {
   11940:	6852      	ldr	r2, [r2, #4]
	if ((disk != NULL) && (disk->ops != NULL) &&
   11942:	b13a      	cbz	r2, 11954 <disk_access_status+0x20>
		rc = disk->ops->status(disk);
   11944:	4790      	blx	r2
}
   11946:	bd08      	pop	{r3, pc}
	int rc = -EINVAL;
   11948:	f06f 0015 	mvn.w	r0, #21
   1194c:	e7fb      	b.n	11946 <disk_access_status+0x12>
   1194e:	f06f 0015 	mvn.w	r0, #21
   11952:	e7f8      	b.n	11946 <disk_access_status+0x12>
   11954:	f06f 0015 	mvn.w	r0, #21
	return rc;
   11958:	e7f5      	b.n	11946 <disk_access_status+0x12>

0001195a <disk_access_read>:
{
   1195a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1195e:	460c      	mov	r4, r1
   11960:	4615      	mov	r5, r2
   11962:	461e      	mov	r6, r3
	struct disk_info *disk = disk_access_get_di(pdrv);
   11964:	f7f3 fc20 	bl	51a8 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   11968:	b160      	cbz	r0, 11984 <disk_access_read+0x2a>
   1196a:	68c3      	ldr	r3, [r0, #12]
   1196c:	b16b      	cbz	r3, 1198a <disk_access_read+0x30>
				(disk->ops->read != NULL)) {
   1196e:	f8d3 8008 	ldr.w	r8, [r3, #8]
	if ((disk != NULL) && (disk->ops != NULL) &&
   11972:	f1b8 0f00 	cmp.w	r8, #0
   11976:	d00b      	beq.n	11990 <disk_access_read+0x36>
		rc = disk->ops->read(disk, data_buf, start_sector, num_sector);
   11978:	4633      	mov	r3, r6
   1197a:	462a      	mov	r2, r5
   1197c:	4621      	mov	r1, r4
   1197e:	47c0      	blx	r8
}
   11980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int rc = -EINVAL;
   11984:	f06f 0015 	mvn.w	r0, #21
   11988:	e7fa      	b.n	11980 <disk_access_read+0x26>
   1198a:	f06f 0015 	mvn.w	r0, #21
   1198e:	e7f7      	b.n	11980 <disk_access_read+0x26>
   11990:	f06f 0015 	mvn.w	r0, #21
	return rc;
   11994:	e7f4      	b.n	11980 <disk_access_read+0x26>

00011996 <disk_access_write>:
{
   11996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1199a:	460c      	mov	r4, r1
   1199c:	4615      	mov	r5, r2
   1199e:	461e      	mov	r6, r3
	struct disk_info *disk = disk_access_get_di(pdrv);
   119a0:	f7f3 fc02 	bl	51a8 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   119a4:	b160      	cbz	r0, 119c0 <disk_access_write+0x2a>
   119a6:	68c3      	ldr	r3, [r0, #12]
   119a8:	b16b      	cbz	r3, 119c6 <disk_access_write+0x30>
				(disk->ops->write != NULL)) {
   119aa:	f8d3 800c 	ldr.w	r8, [r3, #12]
	if ((disk != NULL) && (disk->ops != NULL) &&
   119ae:	f1b8 0f00 	cmp.w	r8, #0
   119b2:	d00b      	beq.n	119cc <disk_access_write+0x36>
		rc = disk->ops->write(disk, data_buf, start_sector, num_sector);
   119b4:	4633      	mov	r3, r6
   119b6:	462a      	mov	r2, r5
   119b8:	4621      	mov	r1, r4
   119ba:	47c0      	blx	r8
}
   119bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int rc = -EINVAL;
   119c0:	f06f 0015 	mvn.w	r0, #21
   119c4:	e7fa      	b.n	119bc <disk_access_write+0x26>
   119c6:	f06f 0015 	mvn.w	r0, #21
   119ca:	e7f7      	b.n	119bc <disk_access_write+0x26>
   119cc:	f06f 0015 	mvn.w	r0, #21
	return rc;
   119d0:	e7f4      	b.n	119bc <disk_access_write+0x26>

000119d2 <disk_access_ioctl>:
{
   119d2:	b570      	push	{r4, r5, r6, lr}
   119d4:	460c      	mov	r4, r1
   119d6:	4615      	mov	r5, r2
	struct disk_info *disk = disk_access_get_di(pdrv);
   119d8:	f7f3 fbe6 	bl	51a8 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   119dc:	b138      	cbz	r0, 119ee <disk_access_ioctl+0x1c>
   119de:	68c2      	ldr	r2, [r0, #12]
   119e0:	b142      	cbz	r2, 119f4 <disk_access_ioctl+0x22>
				(disk->ops->ioctl != NULL)) {
   119e2:	6916      	ldr	r6, [r2, #16]
	if ((disk != NULL) && (disk->ops != NULL) &&
   119e4:	b14e      	cbz	r6, 119fa <disk_access_ioctl+0x28>
		rc = disk->ops->ioctl(disk, cmd, buf);
   119e6:	462a      	mov	r2, r5
   119e8:	4621      	mov	r1, r4
   119ea:	47b0      	blx	r6
}
   119ec:	bd70      	pop	{r4, r5, r6, pc}
	int rc = -EINVAL;
   119ee:	f06f 0015 	mvn.w	r0, #21
   119f2:	e7fb      	b.n	119ec <disk_access_ioctl+0x1a>
   119f4:	f06f 0015 	mvn.w	r0, #21
   119f8:	e7f8      	b.n	119ec <disk_access_ioctl+0x1a>
   119fa:	f06f 0015 	mvn.w	r0, #21
	return rc;
   119fe:	e7f5      	b.n	119ec <disk_access_ioctl+0x1a>

00011a00 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   11a00:	2200      	movs	r2, #0
   11a02:	6002      	str	r2, [r0, #0]
   11a04:	6042      	str	r2, [r0, #4]
   11a06:	6082      	str	r2, [r0, #8]
}
   11a08:	4770      	bx	lr

00011a0a <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   11a0a:	b538      	push	{r3, r4, r5, lr}
   11a0c:	4604      	mov	r4, r0

	if (esf != NULL) {
   11a0e:	460d      	mov	r5, r1
   11a10:	b111      	cbz	r1, 11a18 <z_arm_fatal_error+0xe>
		esf_dump(esf);
   11a12:	4608      	mov	r0, r1
   11a14:	f7f3 fdd8 	bl	55c8 <esf_dump>
	}
	z_fatal_error(reason, esf);
   11a18:	4629      	mov	r1, r5
   11a1a:	4620      	mov	r0, r4
   11a1c:	f7fc f882 	bl	db24 <z_fatal_error>
}
   11a20:	bd38      	pop	{r3, r4, r5, pc}

00011a22 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   11a22:	b508      	push	{r3, lr}
   11a24:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   11a26:	6800      	ldr	r0, [r0, #0]
   11a28:	f7ff ffef 	bl	11a0a <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   11a2c:	bd08      	pop	{r3, pc}

00011a2e <z_irq_spurious>:
{
   11a2e:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   11a30:	2100      	movs	r1, #0
   11a32:	2001      	movs	r0, #1
   11a34:	f7ff ffe9 	bl	11a0a <z_arm_fatal_error>
}
   11a38:	bd08      	pop	{r3, pc}

00011a3a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   11a3a:	b508      	push	{r3, lr}
	handler();
   11a3c:	f7f3 fe7e 	bl	573c <z_SysNmiOnReset>
	z_arm_int_exit();
   11a40:	f7f3 ff7a 	bl	5938 <z_arm_exc_exit>
}
   11a44:	bd08      	pop	{r3, pc}

00011a46 <memory_fault_recoverable>:
}
   11a46:	2000      	movs	r0, #0
   11a48:	4770      	bx	lr

00011a4a <fault_handle>:
{
   11a4a:	b508      	push	{r3, lr}
	*recoverable = false;
   11a4c:	2300      	movs	r3, #0
   11a4e:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   11a50:	1ecb      	subs	r3, r1, #3
   11a52:	2b09      	cmp	r3, #9
   11a54:	d81a      	bhi.n	11a8c <fault_handle+0x42>
   11a56:	e8df f003 	tbb	[pc, r3]
   11a5a:	0905      	.short	0x0905
   11a5c:	1919110d 	.word	0x1919110d
   11a60:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
   11a64:	4611      	mov	r1, r2
   11a66:	f7f4 fa11 	bl	5e8c <hard_fault>
}
   11a6a:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   11a6c:	2100      	movs	r1, #0
   11a6e:	f7f4 f915 	bl	5c9c <mem_manage_fault>
		break;
   11a72:	e7fa      	b.n	11a6a <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   11a74:	2100      	movs	r1, #0
   11a76:	f7f4 f839 	bl	5aec <bus_fault>
		break;
   11a7a:	e7f6      	b.n	11a6a <fault_handle+0x20>
		reason = usage_fault(esf);
   11a7c:	f7f3 ff6a 	bl	5954 <usage_fault>
		break;
   11a80:	e7f3      	b.n	11a6a <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   11a82:	4611      	mov	r1, r2
   11a84:	f7f4 f818 	bl	5ab8 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   11a88:	2000      	movs	r0, #0
		break;
   11a8a:	e7ee      	b.n	11a6a <fault_handle+0x20>
		reserved_exception(esf, fault);
   11a8c:	f7f4 fac6 	bl	601c <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   11a90:	2000      	movs	r0, #0
	return reason;
   11a92:	e7ea      	b.n	11a6a <fault_handle+0x20>

00011a94 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   11a94:	6843      	ldr	r3, [r0, #4]
   11a96:	1e5a      	subs	r2, r3, #1
		&&
   11a98:	4213      	tst	r3, r2
   11a9a:	d106      	bne.n	11aaa <mpu_partition_is_valid+0x16>
		&&
   11a9c:	2b1f      	cmp	r3, #31
   11a9e:	d906      	bls.n	11aae <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   11aa0:	6803      	ldr	r3, [r0, #0]
		&&
   11aa2:	421a      	tst	r2, r3
   11aa4:	d005      	beq.n	11ab2 <mpu_partition_is_valid+0x1e>
   11aa6:	2000      	movs	r0, #0
   11aa8:	4770      	bx	lr
   11aaa:	2000      	movs	r0, #0
   11aac:	4770      	bx	lr
   11aae:	2000      	movs	r0, #0
   11ab0:	4770      	bx	lr
   11ab2:	2001      	movs	r0, #1
}
   11ab4:	4770      	bx	lr

00011ab6 <mpu_configure_region>:
{
   11ab6:	b500      	push	{lr}
   11ab8:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   11aba:	680b      	ldr	r3, [r1, #0]
   11abc:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   11abe:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   11ac0:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   11ac2:	2b20      	cmp	r3, #32
   11ac4:	d912      	bls.n	11aec <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   11ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   11aca:	d811      	bhi.n	11af0 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   11acc:	3b01      	subs	r3, #1
   11ace:	fab3 f383 	clz	r3, r3
   11ad2:	f1c3 031f 	rsb	r3, r3, #31
   11ad6:	005b      	lsls	r3, r3, #1
   11ad8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   11adc:	4313      	orrs	r3, r2
   11ade:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   11ae0:	a901      	add	r1, sp, #4
   11ae2:	f7f4 fc0f 	bl	6304 <region_allocate_and_init>
}
   11ae6:	b005      	add	sp, #20
   11ae8:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   11aec:	2308      	movs	r3, #8
   11aee:	e7f5      	b.n	11adc <mpu_configure_region+0x26>
		return REGION_4G;
   11af0:	233e      	movs	r3, #62	; 0x3e
   11af2:	e7f3      	b.n	11adc <mpu_configure_region+0x26>

00011af4 <_stdout_hook_default>:
}
   11af4:	f04f 30ff 	mov.w	r0, #4294967295
   11af8:	4770      	bx	lr

00011afa <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   11afa:	b084      	sub	sp, #16
   11afc:	ab04      	add	r3, sp, #16
   11afe:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   11b02:	f89d 3004 	ldrb.w	r3, [sp, #4]
   11b06:	2b06      	cmp	r3, #6
   11b08:	d001      	beq.n	11b0e <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   11b0a:	b004      	add	sp, #16
   11b0c:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   11b0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11b12:	2201      	movs	r2, #1
   11b14:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   11b18:	f3bf 8f4f 	dsb	sy
        __WFE();
   11b1c:	bf20      	wfe
    while (true)
   11b1e:	e7fd      	b.n	11b1c <pm_power_state_set+0x22>

00011b20 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   11b20:	b084      	sub	sp, #16
   11b22:	ab04      	add	r3, sp, #16
   11b24:	e903 0007 	stmdb	r3, {r0, r1, r2}
   11b28:	2300      	movs	r3, #0
   11b2a:	f383 8811 	msr	BASEPRI, r3
   11b2e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   11b32:	b004      	add	sp, #16
   11b34:	4770      	bx	lr

00011b36 <fs_type_get>:
{
   11b36:	b508      	push	{r3, lr}
	struct registry_entry *ep = registry_find(type);
   11b38:	f7f4 fdae 	bl	6698 <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
   11b3c:	4603      	mov	r3, r0
   11b3e:	b100      	cbz	r0, 11b42 <fs_type_get+0xc>
   11b40:	6843      	ldr	r3, [r0, #4]
}
   11b42:	4618      	mov	r0, r3
   11b44:	bd08      	pop	{r3, pc}

00011b46 <translate_error>:
	switch (error) {
   11b46:	2813      	cmp	r0, #19
   11b48:	d826      	bhi.n	11b98 <translate_error+0x52>
   11b4a:	e8df f000 	tbb	[pc, r0]
   11b4e:	222a      	.short	0x222a
   11b50:	28282222 	.word	0x28282222
   11b54:	100d0a28 	.word	0x100d0a28
   11b58:	16161613 	.word	0x16161613
   11b5c:	19222222 	.word	0x19222222
   11b60:	1f1c      	.short	0x1f1c
		return -EACCES;
   11b62:	f06f 000c 	mvn.w	r0, #12
   11b66:	4770      	bx	lr
		return -EEXIST;
   11b68:	f06f 0010 	mvn.w	r0, #16
   11b6c:	4770      	bx	lr
		return -EBADF;
   11b6e:	f06f 0008 	mvn.w	r0, #8
   11b72:	4770      	bx	lr
		return -EROFS;
   11b74:	f06f 001d 	mvn.w	r0, #29
   11b78:	4770      	bx	lr
		return -ENODEV;
   11b7a:	f06f 0012 	mvn.w	r0, #18
   11b7e:	4770      	bx	lr
		return -ENOMEM;
   11b80:	f06f 000b 	mvn.w	r0, #11
   11b84:	4770      	bx	lr
		return -EMFILE;
   11b86:	f06f 0017 	mvn.w	r0, #23
   11b8a:	4770      	bx	lr
		return -EINVAL;
   11b8c:	f06f 0015 	mvn.w	r0, #21
   11b90:	4770      	bx	lr
		return -EIO;
   11b92:	f06f 0004 	mvn.w	r0, #4
   11b96:	4770      	bx	lr
	return -EIO;
   11b98:	f06f 0004 	mvn.w	r0, #4
   11b9c:	4770      	bx	lr
		return -ENOENT;
   11b9e:	f06f 0001 	mvn.w	r0, #1
}
   11ba2:	4770      	bx	lr

00011ba4 <translate_flags>:
	fat_mode |= (flags & FS_O_READ) ? FA_READ : 0;
   11ba4:	f000 0201 	and.w	r2, r0, #1
	fat_mode |= (flags & FS_O_WRITE) ? FA_WRITE : 0;
   11ba8:	f000 0302 	and.w	r3, r0, #2
   11bac:	4313      	orrs	r3, r2
	fat_mode |= (flags & FS_O_CREATE) ? FA_OPEN_ALWAYS : 0;
   11bae:	f000 0010 	and.w	r0, r0, #16
   11bb2:	4318      	orrs	r0, r3
}
   11bb4:	b2c0      	uxtb	r0, r0
   11bb6:	4770      	bx	lr

00011bb8 <fatfs_tell>:
	return f_tell((FIL *)zfp->filep);
   11bb8:	6803      	ldr	r3, [r0, #0]
}
   11bba:	6b98      	ldr	r0, [r3, #56]	; 0x38
   11bbc:	4770      	bx	lr

00011bbe <fatfs_statvfs>:
{
   11bbe:	b510      	push	{r4, lr}
   11bc0:	b082      	sub	sp, #8
   11bc2:	4614      	mov	r4, r2
	DWORD f_bfree = 0;
   11bc4:	2300      	movs	r3, #0
   11bc6:	9300      	str	r3, [sp, #0]
	res = f_getfree(&mountp->mnt_point[1], &f_bfree, &fs);
   11bc8:	68c0      	ldr	r0, [r0, #12]
   11bca:	aa01      	add	r2, sp, #4
   11bcc:	4669      	mov	r1, sp
   11bce:	3001      	adds	r0, #1
   11bd0:	f002 fae9 	bl	141a6 <f_getfree>
	if (res != FR_OK) {
   11bd4:	b978      	cbnz	r0, 11bf6 <fatfs_statvfs+0x38>
	stat->f_bfree = f_bfree;
   11bd6:	9b00      	ldr	r3, [sp, #0]
   11bd8:	60e3      	str	r3, [r4, #12]
	stat->f_bsize = FF_MIN_SS;
   11bda:	f44f 7300 	mov.w	r3, #512	; 0x200
   11bde:	6023      	str	r3, [r4, #0]
	stat->f_frsize = fs->csize * stat->f_bsize;
   11be0:	9a01      	ldr	r2, [sp, #4]
   11be2:	8953      	ldrh	r3, [r2, #10]
   11be4:	025b      	lsls	r3, r3, #9
   11be6:	6063      	str	r3, [r4, #4]
	stat->f_blocks = (fs->n_fatent - 2);
   11be8:	69d3      	ldr	r3, [r2, #28]
   11bea:	3b02      	subs	r3, #2
   11bec:	60a3      	str	r3, [r4, #8]
	res = translate_error(res);
   11bee:	f7ff ffaa 	bl	11b46 <translate_error>
}
   11bf2:	b002      	add	sp, #8
   11bf4:	bd10      	pop	{r4, pc}
		return -EIO;
   11bf6:	f06f 0004 	mvn.w	r0, #4
   11bfa:	e7fa      	b.n	11bf2 <fatfs_statvfs+0x34>

00011bfc <fatfs_stat>:
{
   11bfc:	b530      	push	{r4, r5, lr}
   11bfe:	b0c9      	sub	sp, #292	; 0x124
   11c00:	4608      	mov	r0, r1
   11c02:	4614      	mov	r4, r2
	res = f_stat(&path[1], &fno);
   11c04:	4669      	mov	r1, sp
   11c06:	3001      	adds	r0, #1
   11c08:	f002 faab 	bl	14162 <f_stat>
	if (res == FR_OK) {
   11c0c:	4605      	mov	r5, r0
   11c0e:	b968      	cbnz	r0, 11c2c <fatfs_stat+0x30>
		entry->type = ((fno.fattrib & AM_DIR) ?
   11c10:	f89d 300c 	ldrb.w	r3, [sp, #12]
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
   11c14:	f3c3 1300 	ubfx	r3, r3, #4, #1
		entry->type = ((fno.fattrib & AM_DIR) ?
   11c18:	4620      	mov	r0, r4
   11c1a:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   11c1e:	f10d 011a 	add.w	r1, sp, #26
   11c22:	f003 f83c 	bl	14c9e <strcpy>
		entry->size = fno.fsize;
   11c26:	9b00      	ldr	r3, [sp, #0]
   11c28:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	return translate_error(res);
   11c2c:	4628      	mov	r0, r5
   11c2e:	f7ff ff8a 	bl	11b46 <translate_error>
}
   11c32:	b049      	add	sp, #292	; 0x124
   11c34:	bd30      	pop	{r4, r5, pc}

00011c36 <fatfs_mkdir>:
{
   11c36:	b508      	push	{r3, lr}
	res = f_mkdir(&path[1]);
   11c38:	1c48      	adds	r0, r1, #1
   11c3a:	f7f8 fddb 	bl	a7f4 <f_mkdir>
	res = translate_error(res);
   11c3e:	f7ff ff82 	bl	11b46 <translate_error>
}
   11c42:	bd08      	pop	{r3, pc}

00011c44 <fatfs_unlink>:
{
   11c44:	b508      	push	{r3, lr}
	res = f_unlink(&path[1]);
   11c46:	1c48      	adds	r0, r1, #1
   11c48:	f002 fb96 	bl	14378 <f_unlink>
	res = translate_error(res);
   11c4c:	f7ff ff7b 	bl	11b46 <translate_error>
}
   11c50:	bd08      	pop	{r3, pc}

00011c52 <fatfs_rename>:
{
   11c52:	b530      	push	{r4, r5, lr}
   11c54:	b0c9      	sub	sp, #292	; 0x124
   11c56:	460d      	mov	r5, r1
	res = f_stat(&to[1], &fno);
   11c58:	1c54      	adds	r4, r2, #1
   11c5a:	4669      	mov	r1, sp
   11c5c:	4620      	mov	r0, r4
   11c5e:	f002 fa80 	bl	14162 <f_stat>
	if (FR_OK == res) {
   11c62:	b918      	cbnz	r0, 11c6c <fatfs_rename+0x1a>
		res = f_unlink(&to[1]);
   11c64:	4620      	mov	r0, r4
   11c66:	f002 fb87 	bl	14378 <f_unlink>
		if (FR_OK != res)
   11c6a:	b938      	cbnz	r0, 11c7c <fatfs_rename+0x2a>
	res = f_rename(&from[1], &to[1]);
   11c6c:	4621      	mov	r1, r4
   11c6e:	1c68      	adds	r0, r5, #1
   11c70:	f002 fbef 	bl	14452 <f_rename>
	res = translate_error(res);
   11c74:	f7ff ff67 	bl	11b46 <translate_error>
}
   11c78:	b049      	add	sp, #292	; 0x124
   11c7a:	bd30      	pop	{r4, r5, pc}
			return translate_error(res);
   11c7c:	f7ff ff63 	bl	11b46 <translate_error>
   11c80:	e7fa      	b.n	11c78 <fatfs_rename+0x26>

00011c82 <fatfs_unmount>:
{
   11c82:	b508      	push	{r3, lr}
	res = f_mount(NULL, &mountp->mnt_point[1], 0);
   11c84:	68c1      	ldr	r1, [r0, #12]
   11c86:	2200      	movs	r2, #0
   11c88:	3101      	adds	r1, #1
   11c8a:	4610      	mov	r0, r2
   11c8c:	f7f8 fb9c 	bl	a3c8 <f_mount>
	return translate_error(res);
   11c90:	f7ff ff59 	bl	11b46 <translate_error>
}
   11c94:	bd08      	pop	{r3, pc}

00011c96 <fatfs_readdir>:
{
   11c96:	b530      	push	{r4, r5, lr}
   11c98:	b0c9      	sub	sp, #292	; 0x124
   11c9a:	460c      	mov	r4, r1
	res = f_readdir(zdp->dirp, &fno);
   11c9c:	4669      	mov	r1, sp
   11c9e:	6800      	ldr	r0, [r0, #0]
   11ca0:	f002 fa38 	bl	14114 <f_readdir>
	if (res == FR_OK) {
   11ca4:	4605      	mov	r5, r0
   11ca6:	b970      	cbnz	r0, 11cc6 <fatfs_readdir+0x30>
   11ca8:	f10d 011a 	add.w	r1, sp, #26
   11cac:	1c60      	adds	r0, r4, #1
   11cae:	f002 fff6 	bl	14c9e <strcpy>
		if (entry->name[0] != 0) {
   11cb2:	7863      	ldrb	r3, [r4, #1]
   11cb4:	b13b      	cbz	r3, 11cc6 <fatfs_readdir+0x30>
			entry->type = ((fno.fattrib & AM_DIR) ?
   11cb6:	f89d 300c 	ldrb.w	r3, [sp, #12]
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
   11cba:	f3c3 1300 	ubfx	r3, r3, #4, #1
			entry->type = ((fno.fattrib & AM_DIR) ?
   11cbe:	7023      	strb	r3, [r4, #0]
			entry->size = fno.fsize;
   11cc0:	9b00      	ldr	r3, [sp, #0]
   11cc2:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	return translate_error(res);
   11cc6:	4628      	mov	r0, r5
   11cc8:	f7ff ff3d 	bl	11b46 <translate_error>
}
   11ccc:	b049      	add	sp, #292	; 0x124
   11cce:	bd30      	pop	{r4, r5, pc}

00011cd0 <fatfs_sync>:
{
   11cd0:	b508      	push	{r3, lr}
	res = f_sync(zfp->filep);
   11cd2:	6800      	ldr	r0, [r0, #0]
   11cd4:	f7f8 fcfe 	bl	a6d4 <f_sync>
	res = translate_error(res);
   11cd8:	f7ff ff35 	bl	11b46 <translate_error>
}
   11cdc:	bd08      	pop	{r3, pc}

00011cde <fatfs_seek>:
{
   11cde:	b538      	push	{r3, r4, r5, lr}
	switch (whence) {
   11ce0:	2a01      	cmp	r2, #1
   11ce2:	d005      	beq.n	11cf0 <fatfs_seek+0x12>
   11ce4:	2a02      	cmp	r2, #2
   11ce6:	d016      	beq.n	11d16 <fatfs_seek+0x38>
   11ce8:	b12a      	cbz	r2, 11cf6 <fatfs_seek+0x18>
   11cea:	f06f 0015 	mvn.w	r0, #21
   11cee:	e011      	b.n	11d14 <fatfs_seek+0x36>
		pos = f_tell((FIL *)zfp->filep) + offset;
   11cf0:	6803      	ldr	r3, [r0, #0]
   11cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11cf4:	4419      	add	r1, r3
	if ((pos < 0) || (pos > f_size((FIL *)zfp->filep))) {
   11cf6:	2900      	cmp	r1, #0
   11cf8:	db11      	blt.n	11d1e <fatfs_seek+0x40>
   11cfa:	460a      	mov	r2, r1
   11cfc:	17cb      	asrs	r3, r1, #31
   11cfe:	6800      	ldr	r0, [r0, #0]
   11d00:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   11d04:	429d      	cmp	r5, r3
   11d06:	bf08      	it	eq
   11d08:	428c      	cmpeq	r4, r1
   11d0a:	d30b      	bcc.n	11d24 <fatfs_seek+0x46>
	res = f_lseek(zfp->filep, pos);
   11d0c:	f002 f8a7 	bl	13e5e <f_lseek>
	return translate_error(res);
   11d10:	f7ff ff19 	bl	11b46 <translate_error>
}
   11d14:	bd38      	pop	{r3, r4, r5, pc}
		pos = f_size((FIL *)zfp->filep) + offset;
   11d16:	6803      	ldr	r3, [r0, #0]
   11d18:	691b      	ldr	r3, [r3, #16]
   11d1a:	4419      	add	r1, r3
		break;
   11d1c:	e7eb      	b.n	11cf6 <fatfs_seek+0x18>
		return -EINVAL;
   11d1e:	f06f 0015 	mvn.w	r0, #21
   11d22:	e7f7      	b.n	11d14 <fatfs_seek+0x36>
   11d24:	f06f 0015 	mvn.w	r0, #21
   11d28:	e7f4      	b.n	11d14 <fatfs_seek+0x36>

00011d2a <fatfs_truncate>:
{
   11d2a:	b570      	push	{r4, r5, r6, lr}
   11d2c:	b082      	sub	sp, #8
   11d2e:	4605      	mov	r5, r0
   11d30:	460e      	mov	r6, r1
	off_t cur_length = f_size((FIL *)zfp->filep);
   11d32:	6800      	ldr	r0, [r0, #0]
   11d34:	6904      	ldr	r4, [r0, #16]
	res = f_lseek(zfp->filep, length);
   11d36:	460a      	mov	r2, r1
   11d38:	17cb      	asrs	r3, r1, #31
   11d3a:	f002 f890 	bl	13e5e <f_lseek>
	if (res != FR_OK) {
   11d3e:	b940      	cbnz	r0, 11d52 <fatfs_truncate+0x28>
	if (length < cur_length) {
   11d40:	42b4      	cmp	r4, r6
   11d42:	dd09      	ble.n	11d58 <fatfs_truncate+0x2e>
		res = f_truncate(zfp->filep);
   11d44:	6828      	ldr	r0, [r5, #0]
   11d46:	f002 fac7 	bl	142d8 <f_truncate>
	res = translate_error(res);
   11d4a:	f7ff fefc 	bl	11b46 <translate_error>
}
   11d4e:	b002      	add	sp, #8
   11d50:	bd70      	pop	{r4, r5, r6, pc}
		return translate_error(res);
   11d52:	f7ff fef8 	bl	11b46 <translate_error>
   11d56:	e7fa      	b.n	11d4e <fatfs_truncate+0x24>
		length = f_tell((FIL *)zfp->filep);
   11d58:	6828      	ldr	r0, [r5, #0]
   11d5a:	6b86      	ldr	r6, [r0, #56]	; 0x38
		res = f_lseek(zfp->filep, cur_length);
   11d5c:	4622      	mov	r2, r4
   11d5e:	17e3      	asrs	r3, r4, #31
   11d60:	f002 f87d 	bl	13e5e <f_lseek>
		if (res != FR_OK) {
   11d64:	b978      	cbnz	r0, 11d86 <fatfs_truncate+0x5c>
		uint8_t c = 0U;
   11d66:	2300      	movs	r3, #0
   11d68:	f88d 3003 	strb.w	r3, [sp, #3]
		for (int i = cur_length; i < length; i++) {
   11d6c:	42b4      	cmp	r4, r6
   11d6e:	daec      	bge.n	11d4a <fatfs_truncate+0x20>
			res = f_write(zfp->filep, &c, 1, &bw);
   11d70:	ab01      	add	r3, sp, #4
   11d72:	2201      	movs	r2, #1
   11d74:	f10d 0103 	add.w	r1, sp, #3
   11d78:	6828      	ldr	r0, [r5, #0]
   11d7a:	f001 ff4e 	bl	13c1a <f_write>
			if (res != FR_OK) {
   11d7e:	2800      	cmp	r0, #0
   11d80:	d1e3      	bne.n	11d4a <fatfs_truncate+0x20>
		for (int i = cur_length; i < length; i++) {
   11d82:	3401      	adds	r4, #1
   11d84:	e7f2      	b.n	11d6c <fatfs_truncate+0x42>
			return translate_error(res);
   11d86:	f7ff fede 	bl	11b46 <translate_error>
   11d8a:	e7e0      	b.n	11d4e <fatfs_truncate+0x24>

00011d8c <fatfs_write>:
{
   11d8c:	b570      	push	{r4, r5, r6, lr}
   11d8e:	b082      	sub	sp, #8
   11d90:	4604      	mov	r4, r0
   11d92:	460d      	mov	r5, r1
   11d94:	4616      	mov	r6, r2
	off_t pos = f_size((FIL *)zfp->filep);
   11d96:	6800      	ldr	r0, [r0, #0]
   11d98:	6902      	ldr	r2, [r0, #16]
	if (zfp->flags & FS_O_APPEND) {
   11d9a:	7a23      	ldrb	r3, [r4, #8]
   11d9c:	f013 0f20 	tst.w	r3, #32
   11da0:	d003      	beq.n	11daa <fatfs_write+0x1e>
		res = f_lseek(zfp->filep, pos);
   11da2:	17d3      	asrs	r3, r2, #31
   11da4:	f002 f85b 	bl	13e5e <f_lseek>
	if (res == FR_OK) {
   11da8:	b928      	cbnz	r0, 11db6 <fatfs_write+0x2a>
		res = f_write(zfp->filep, ptr, size, &bw);
   11daa:	ab01      	add	r3, sp, #4
   11dac:	4632      	mov	r2, r6
   11dae:	4629      	mov	r1, r5
   11db0:	6820      	ldr	r0, [r4, #0]
   11db2:	f001 ff32 	bl	13c1a <f_write>
	if (res != FR_OK) {
   11db6:	b118      	cbz	r0, 11dc0 <fatfs_write+0x34>
		res = translate_error(res);
   11db8:	f7ff fec5 	bl	11b46 <translate_error>
}
   11dbc:	b002      	add	sp, #8
   11dbe:	bd70      	pop	{r4, r5, r6, pc}
		res = bw;
   11dc0:	9801      	ldr	r0, [sp, #4]
	return res;
   11dc2:	e7fb      	b.n	11dbc <fatfs_write+0x30>

00011dc4 <fatfs_read>:
{
   11dc4:	b500      	push	{lr}
   11dc6:	b083      	sub	sp, #12
	res = f_read(zfp->filep, ptr, size, &br);
   11dc8:	ab01      	add	r3, sp, #4
   11dca:	6800      	ldr	r0, [r0, #0]
   11dcc:	f001 fe5c 	bl	13a88 <f_read>
	if (res != FR_OK) {
   11dd0:	b918      	cbnz	r0, 11dda <fatfs_read+0x16>
	return br;
   11dd2:	9801      	ldr	r0, [sp, #4]
}
   11dd4:	b003      	add	sp, #12
   11dd6:	f85d fb04 	ldr.w	pc, [sp], #4
		return translate_error(res);
   11dda:	f7ff feb4 	bl	11b46 <translate_error>
   11dde:	e7f9      	b.n	11dd4 <fatfs_read+0x10>

00011de0 <sdhc_spi_set_status>:
	struct sdhc_spi_data *data = dev->data;
   11de0:	6903      	ldr	r3, [r0, #16]
	const struct sdhc_spi_config *cfg = dev->config;
   11de2:	6842      	ldr	r2, [r0, #4]
	data->status = status;
   11de4:	7419      	strb	r1, [r3, #16]
	if (status == DISK_STATUS_UNINIT) {
   11de6:	2901      	cmp	r1, #1
   11de8:	d003      	beq.n	11df2 <sdhc_spi_set_status+0x12>
	} else if (status == DISK_STATUS_OK) {
   11dea:	b909      	cbnz	r1, 11df0 <sdhc_spi_set_status+0x10>
		data->spi_cfg = &cfg->oper_cfg;
   11dec:	320c      	adds	r2, #12
   11dee:	605a      	str	r2, [r3, #4]
}
   11df0:	4770      	bx	lr
		data->spi_cfg = &cfg->init_cfg;
   11df2:	605a      	str	r2, [r3, #4]
   11df4:	4770      	bx	lr

00011df6 <sdhc_spi_trace>:
}
   11df6:	4610      	mov	r0, r2
   11df8:	4770      	bx	lr

00011dfa <sdhc_spi_rx_u8>:
{
   11dfa:	b500      	push	{lr}
   11dfc:	b083      	sub	sp, #12
	int err = sdhc_spi_rx_bytes(data, buf, sizeof(buf));
   11dfe:	2201      	movs	r2, #1
   11e00:	a901      	add	r1, sp, #4
   11e02:	f7f4 ffd3 	bl	6dac <sdhc_spi_rx_bytes>
	if (err != 0) {
   11e06:	b908      	cbnz	r0, 11e0c <sdhc_spi_rx_u8+0x12>
	return buf[0];
   11e08:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
   11e0c:	b003      	add	sp, #12
   11e0e:	f85d fb04 	ldr.w	pc, [sp], #4

00011e12 <sdhc_spi_tx>:
{
   11e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e16:	b086      	sub	sp, #24
   11e18:	4604      	mov	r4, r0
   11e1a:	460d      	mov	r5, r1
   11e1c:	4616      	mov	r6, r2
	struct spi_buf spi_bufs[] = {
   11e1e:	9104      	str	r1, [sp, #16]
   11e20:	9205      	str	r2, [sp, #20]
	const struct spi_buf_set tx = {
   11e22:	ab04      	add	r3, sp, #16
   11e24:	9302      	str	r3, [sp, #8]
   11e26:	2701      	movs	r7, #1
   11e28:	9703      	str	r7, [sp, #12]
	return sdhc_spi_trace(data, 1,
   11e2a:	6800      	ldr	r0, [r0, #0]
   11e2c:	6861      	ldr	r1, [r4, #4]
	const struct spi_driver_api *api =
   11e2e:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   11e30:	f8d3 8000 	ldr.w	r8, [r3]
   11e34:	2300      	movs	r3, #0
   11e36:	aa02      	add	r2, sp, #8
   11e38:	47c0      	blx	r8
   11e3a:	4602      	mov	r2, r0
   11e3c:	9600      	str	r6, [sp, #0]
   11e3e:	462b      	mov	r3, r5
   11e40:	4639      	mov	r1, r7
   11e42:	4620      	mov	r0, r4
   11e44:	f7ff ffd7 	bl	11df6 <sdhc_spi_trace>
}
   11e48:	b006      	add	sp, #24
   11e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011e4e <disk_spi_sdhc_access_status>:
	const struct device *dev = disk->dev;
   11e4e:	6903      	ldr	r3, [r0, #16]
	struct sdhc_spi_data *data = dev->data;
   11e50:	691b      	ldr	r3, [r3, #16]
}
   11e52:	7c18      	ldrb	r0, [r3, #16]
   11e54:	4770      	bx	lr

00011e56 <sdhc_spi_tx_cmd>:
{
   11e56:	b510      	push	{r4, lr}
   11e58:	b082      	sub	sp, #8
   11e5a:	4604      	mov	r4, r0
	buf[0] = SDHC_TX | (cmd & ~SDHC_START);
   11e5c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   11e60:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   11e64:	f88d 1000 	strb.w	r1, [sp]
	sys_put_be16(val >> 16, dst);
   11e68:	0c13      	lsrs	r3, r2, #16
	dst[0] = val >> 8;
   11e6a:	0e11      	lsrs	r1, r2, #24
   11e6c:	f88d 1001 	strb.w	r1, [sp, #1]
	dst[1] = val;
   11e70:	f88d 3002 	strb.w	r3, [sp, #2]
	dst[0] = val >> 8;
   11e74:	f3c2 2307 	ubfx	r3, r2, #8, #8
   11e78:	f88d 3003 	strb.w	r3, [sp, #3]
	dst[1] = val;
   11e7c:	f88d 2004 	strb.w	r2, [sp, #4]
	buf[SDHC_CMD_BODY_SIZE] = crc7_be(0, buf, SDHC_CMD_BODY_SIZE) | 0x01;
   11e80:	2205      	movs	r2, #5
   11e82:	4669      	mov	r1, sp
   11e84:	2000      	movs	r0, #0
   11e86:	f7ff f88b 	bl	10fa0 <crc7_be>
   11e8a:	f040 0001 	orr.w	r0, r0, #1
   11e8e:	f88d 0005 	strb.w	r0, [sp, #5]
	return sdhc_spi_tx(data, buf, sizeof(buf));
   11e92:	2206      	movs	r2, #6
   11e94:	4669      	mov	r1, sp
   11e96:	4620      	mov	r0, r4
   11e98:	f7ff ffbb 	bl	11e12 <sdhc_spi_tx>
}
   11e9c:	b002      	add	sp, #8
   11e9e:	bd10      	pop	{r4, pc}

00011ea0 <sdhc_spi_skip_until_ready>:
{
   11ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
   11ea2:	b083      	sub	sp, #12
   11ea4:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
   11ea6:	f002 fd8c 	bl	149c2 <z_impl_k_uptime_ticks>
   11eaa:	014b      	lsls	r3, r1, #5
   11eac:	0142      	lsls	r2, r0, #5
   11eae:	ea43 65d0 	orr.w	r5, r3, r0, lsr #27
   11eb2:	1a13      	subs	r3, r2, r0
   11eb4:	eb65 0201 	sbc.w	r2, r5, r1
   11eb8:	0095      	lsls	r5, r2, #2
   11eba:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
   11ebe:	009e      	lsls	r6, r3, #2
   11ec0:	462a      	mov	r2, r5
   11ec2:	1833      	adds	r3, r6, r0
   11ec4:	eb41 0202 	adc.w	r2, r1, r2
   11ec8:	00d1      	lsls	r1, r2, #3
   11eca:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   11ece:	00d8      	lsls	r0, r3, #3
   11ed0:	0bc3      	lsrs	r3, r0, #15
   11ed2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	retry->end = k_uptime_get_32() + timeout;
   11ed6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   11eda:	9300      	str	r3, [sp, #0]
	retry->tries = 0;
   11edc:	2300      	movs	r3, #0
   11ede:	f8ad 3004 	strh.w	r3, [sp, #4]
	retry->sleep = sleep;
   11ee2:	f8ad 3006 	strh.w	r3, [sp, #6]
		status = sdhc_spi_rx_u8(data);
   11ee6:	4620      	mov	r0, r4
   11ee8:	f7ff ff87 	bl	11dfa <sdhc_spi_rx_u8>
		if (status < 0) {
   11eec:	2800      	cmp	r0, #0
   11eee:	db0a      	blt.n	11f06 <sdhc_spi_skip_until_ready+0x66>
		if (status == 0) {
   11ef0:	b158      	cbz	r0, 11f0a <sdhc_spi_skip_until_ready+0x6a>
		if (status == 0xFF) {
   11ef2:	28ff      	cmp	r0, #255	; 0xff
   11ef4:	d06d      	beq.n	11fd2 <sdhc_spi_skip_until_ready+0x132>
		status = sdhc_spi_rx_u8(data);
   11ef6:	4620      	mov	r0, r4
   11ef8:	f7ff ff7f 	bl	11dfa <sdhc_spi_rx_u8>
		if (status < 0) {
   11efc:	2800      	cmp	r0, #0
   11efe:	db02      	blt.n	11f06 <sdhc_spi_skip_until_ready+0x66>
		if (status == 0xFF) {
   11f00:	28ff      	cmp	r0, #255	; 0xff
   11f02:	d163      	bne.n	11fcc <sdhc_spi_skip_until_ready+0x12c>
			return 0;
   11f04:	2000      	movs	r0, #0
}
   11f06:	b003      	add	sp, #12
   11f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int32_t remain = retry->end - k_uptime_get_32();
   11f0a:	9d00      	ldr	r5, [sp, #0]
   11f0c:	f002 fd59 	bl	149c2 <z_impl_k_uptime_ticks>
   11f10:	014b      	lsls	r3, r1, #5
   11f12:	0142      	lsls	r2, r0, #5
   11f14:	ea43 66d0 	orr.w	r6, r3, r0, lsr #27
   11f18:	1a13      	subs	r3, r2, r0
   11f1a:	eb66 0201 	sbc.w	r2, r6, r1
   11f1e:	0096      	lsls	r6, r2, #2
   11f20:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
   11f24:	009f      	lsls	r7, r3, #2
   11f26:	4632      	mov	r2, r6
   11f28:	183b      	adds	r3, r7, r0
   11f2a:	eb41 0202 	adc.w	r2, r1, r2
   11f2e:	00d1      	lsls	r1, r2, #3
   11f30:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   11f34:	00d8      	lsls	r0, r3, #3
   11f36:	0bc3      	lsrs	r3, r0, #15
   11f38:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   11f3c:	1aeb      	subs	r3, r5, r3
	if (retry->tries < SDHC_MIN_TRIES) {
   11f3e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
   11f42:	2a13      	cmp	r2, #19
   11f44:	dd07      	ble.n	11f56 <sdhc_spi_skip_until_ready+0xb6>
	if (remain >= 0) {
   11f46:	2b00      	cmp	r3, #0
   11f48:	da23      	bge.n	11f92 <sdhc_spi_skip_until_ready+0xf2>
	return false;
   11f4a:	2300      	movs	r3, #0
	} while (sdhc_retry_ok(&retry));
   11f4c:	2b00      	cmp	r3, #0
   11f4e:	d1ca      	bne.n	11ee6 <sdhc_spi_skip_until_ready+0x46>
	return -ETIMEDOUT;
   11f50:	f06f 0073 	mvn.w	r0, #115	; 0x73
   11f54:	e7d7      	b.n	11f06 <sdhc_spi_skip_until_ready+0x66>
		retry->tries++;
   11f56:	3201      	adds	r2, #1
   11f58:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (retry->sleep != 0U) {
   11f5c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11f60:	b90b      	cbnz	r3, 11f66 <sdhc_spi_skip_until_ready+0xc6>
		return true;
   11f62:	2301      	movs	r3, #1
   11f64:	e7f2      	b.n	11f4c <sdhc_spi_skip_until_ready+0xac>
	return k_sleep(Z_TIMEOUT_MS(ms));
   11f66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   11f6a:	17df      	asrs	r7, r3, #31
   11f6c:	03f9      	lsls	r1, r7, #15
   11f6e:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   11f72:	03d8      	lsls	r0, r3, #15
   11f74:	f240 35e7 	movw	r5, #999	; 0x3e7
   11f78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11f7c:	2300      	movs	r3, #0
   11f7e:	1940      	adds	r0, r0, r5
   11f80:	f04f 0500 	mov.w	r5, #0
   11f84:	eb45 0101 	adc.w	r1, r5, r1
   11f88:	f7ef f824 	bl	fd4 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   11f8c:	f7fd fcf0 	bl	f970 <z_impl_k_sleep>
   11f90:	e7e7      	b.n	11f62 <sdhc_spi_skip_until_ready+0xc2>
		if (retry->sleep > 0) {
   11f92:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11f96:	b1b3      	cbz	r3, 11fc6 <sdhc_spi_skip_until_ready+0x126>
   11f98:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   11f9c:	17df      	asrs	r7, r3, #31
   11f9e:	03f9      	lsls	r1, r7, #15
   11fa0:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   11fa4:	03d8      	lsls	r0, r3, #15
   11fa6:	f240 35e7 	movw	r5, #999	; 0x3e7
   11faa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11fae:	2300      	movs	r3, #0
   11fb0:	1940      	adds	r0, r0, r5
   11fb2:	f04f 0500 	mov.w	r5, #0
   11fb6:	eb45 0101 	adc.w	r1, r5, r1
   11fba:	f7ef f80b 	bl	fd4 <__aeabi_uldivmod>
   11fbe:	f7fd fcd7 	bl	f970 <z_impl_k_sleep>
		return true;
   11fc2:	2301      	movs	r3, #1
   11fc4:	e7c2      	b.n	11f4c <sdhc_spi_skip_until_ready+0xac>
	z_impl_k_yield();
   11fc6:	f7fd fba3 	bl	f710 <z_impl_k_yield>
}
   11fca:	e7fa      	b.n	11fc2 <sdhc_spi_skip_until_ready+0x122>
		return -EPROTO;
   11fcc:	f06f 0046 	mvn.w	r0, #70	; 0x46
   11fd0:	e799      	b.n	11f06 <sdhc_spi_skip_until_ready+0x66>
			return 0;
   11fd2:	2000      	movs	r0, #0
   11fd4:	e797      	b.n	11f06 <sdhc_spi_skip_until_ready+0x66>

00011fd6 <sdhc_spi_skip_until_start>:
{
   11fd6:	b5f0      	push	{r4, r5, r6, r7, lr}
   11fd8:	b083      	sub	sp, #12
   11fda:	4605      	mov	r5, r0
	return z_impl_k_uptime_ticks();
   11fdc:	f002 fcf1 	bl	149c2 <z_impl_k_uptime_ticks>
   11fe0:	014b      	lsls	r3, r1, #5
   11fe2:	0142      	lsls	r2, r0, #5
   11fe4:	ea43 64d0 	orr.w	r4, r3, r0, lsr #27
   11fe8:	1a13      	subs	r3, r2, r0
   11fea:	eb64 0201 	sbc.w	r2, r4, r1
   11fee:	0094      	lsls	r4, r2, #2
   11ff0:	ea44 7493 	orr.w	r4, r4, r3, lsr #30
   11ff4:	009e      	lsls	r6, r3, #2
   11ff6:	4622      	mov	r2, r4
   11ff8:	1833      	adds	r3, r6, r0
   11ffa:	eb41 0202 	adc.w	r2, r1, r2
   11ffe:	00d1      	lsls	r1, r2, #3
   12000:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   12004:	00d8      	lsls	r0, r3, #3
   12006:	0bc3      	lsrs	r3, r0, #15
   12008:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	retry->end = k_uptime_get_32() + timeout;
   1200c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
   12010:	9300      	str	r3, [sp, #0]
	retry->tries = 0;
   12012:	2300      	movs	r3, #0
   12014:	f8ad 3004 	strh.w	r3, [sp, #4]
	retry->sleep = sleep;
   12018:	f8ad 3006 	strh.w	r3, [sp, #6]
}
   1201c:	e008      	b.n	12030 <sdhc_spi_skip_until_start+0x5a>
		retry->tries++;
   1201e:	3201      	adds	r2, #1
   12020:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (retry->sleep != 0U) {
   12024:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   12028:	bb63      	cbnz	r3, 12084 <sdhc_spi_skip_until_start+0xae>
		return true;
   1202a:	2301      	movs	r3, #1
	} while (sdhc_retry_ok(&retry));
   1202c:	2b00      	cmp	r3, #0
   1202e:	d05c      	beq.n	120ea <sdhc_spi_skip_until_start+0x114>
		status = sdhc_spi_rx_u8(data);
   12030:	4628      	mov	r0, r5
   12032:	f7ff fee2 	bl	11dfa <sdhc_spi_rx_u8>
		if (status < 0) {
   12036:	2800      	cmp	r0, #0
   12038:	db59      	blt.n	120ee <sdhc_spi_skip_until_start+0x118>
		if ((status & SDHC_START) == 0) {
   1203a:	f010 0f80 	tst.w	r0, #128	; 0x80
   1203e:	d056      	beq.n	120ee <sdhc_spi_skip_until_start+0x118>
	int32_t remain = retry->end - k_uptime_get_32();
   12040:	9c00      	ldr	r4, [sp, #0]
   12042:	f002 fcbe 	bl	149c2 <z_impl_k_uptime_ticks>
   12046:	014b      	lsls	r3, r1, #5
   12048:	0142      	lsls	r2, r0, #5
   1204a:	ea43 66d0 	orr.w	r6, r3, r0, lsr #27
   1204e:	1a13      	subs	r3, r2, r0
   12050:	eb66 0201 	sbc.w	r2, r6, r1
   12054:	0096      	lsls	r6, r2, #2
   12056:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
   1205a:	009f      	lsls	r7, r3, #2
   1205c:	4632      	mov	r2, r6
   1205e:	183b      	adds	r3, r7, r0
   12060:	eb41 0202 	adc.w	r2, r1, r2
   12064:	00d1      	lsls	r1, r2, #3
   12066:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   1206a:	00d8      	lsls	r0, r3, #3
   1206c:	0bc3      	lsrs	r3, r0, #15
   1206e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   12072:	1ae3      	subs	r3, r4, r3
	if (retry->tries < SDHC_MIN_TRIES) {
   12074:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
   12078:	2a13      	cmp	r2, #19
   1207a:	ddd0      	ble.n	1201e <sdhc_spi_skip_until_start+0x48>
	if (remain >= 0) {
   1207c:	2b00      	cmp	r3, #0
   1207e:	da17      	bge.n	120b0 <sdhc_spi_skip_until_start+0xda>
	return false;
   12080:	2300      	movs	r3, #0
   12082:	e7d3      	b.n	1202c <sdhc_spi_skip_until_start+0x56>
   12084:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12088:	17df      	asrs	r7, r3, #31
   1208a:	03f9      	lsls	r1, r7, #15
   1208c:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   12090:	03d8      	lsls	r0, r3, #15
   12092:	f240 34e7 	movw	r4, #999	; 0x3e7
   12096:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1209a:	2300      	movs	r3, #0
   1209c:	1900      	adds	r0, r0, r4
   1209e:	f04f 0400 	mov.w	r4, #0
   120a2:	eb44 0101 	adc.w	r1, r4, r1
   120a6:	f7ee ff95 	bl	fd4 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   120aa:	f7fd fc61 	bl	f970 <z_impl_k_sleep>
   120ae:	e7bc      	b.n	1202a <sdhc_spi_skip_until_start+0x54>
		if (retry->sleep > 0) {
   120b0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   120b4:	b1b3      	cbz	r3, 120e4 <sdhc_spi_skip_until_start+0x10e>
   120b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   120ba:	17df      	asrs	r7, r3, #31
   120bc:	03f9      	lsls	r1, r7, #15
   120be:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   120c2:	03d8      	lsls	r0, r3, #15
   120c4:	f240 34e7 	movw	r4, #999	; 0x3e7
   120c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   120cc:	2300      	movs	r3, #0
   120ce:	1900      	adds	r0, r0, r4
   120d0:	f04f 0400 	mov.w	r4, #0
   120d4:	eb44 0101 	adc.w	r1, r4, r1
   120d8:	f7ee ff7c 	bl	fd4 <__aeabi_uldivmod>
   120dc:	f7fd fc48 	bl	f970 <z_impl_k_sleep>
		return true;
   120e0:	2301      	movs	r3, #1
   120e2:	e7a3      	b.n	1202c <sdhc_spi_skip_until_start+0x56>
	z_impl_k_yield();
   120e4:	f7fd fb14 	bl	f710 <z_impl_k_yield>
}
   120e8:	e7fa      	b.n	120e0 <sdhc_spi_skip_until_start+0x10a>
	return -ETIMEDOUT;
   120ea:	f06f 0073 	mvn.w	r0, #115	; 0x73
}
   120ee:	b003      	add	sp, #12
   120f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000120f2 <sdhc_spi_cmd_r1_raw>:
{
   120f2:	b570      	push	{r4, r5, r6, lr}
   120f4:	4605      	mov	r5, r0
   120f6:	460c      	mov	r4, r1
	err = sdhc_spi_tx_cmd(data, cmd, payload);
   120f8:	f7ff fead 	bl	11e56 <sdhc_spi_tx_cmd>
	if (err != 0) {
   120fc:	4606      	mov	r6, r0
   120fe:	b108      	cbz	r0, 12104 <sdhc_spi_cmd_r1_raw+0x12>
}
   12100:	4630      	mov	r0, r6
   12102:	bd70      	pop	{r4, r5, r6, pc}
	err = sdhc_spi_skip_until_start(data);
   12104:	4628      	mov	r0, r5
   12106:	f7ff ff66 	bl	11fd6 <sdhc_spi_skip_until_start>
   1210a:	4606      	mov	r6, r0
	if (cmd != SDHC_SEND_CSD && cmd != SDHC_SEND_CID &&
   1210c:	f1a4 0309 	sub.w	r3, r4, #9
   12110:	b2db      	uxtb	r3, r3
   12112:	2b01      	cmp	r3, #1
   12114:	d9f4      	bls.n	12100 <sdhc_spi_cmd_r1_raw+0xe>
   12116:	2c11      	cmp	r4, #17
   12118:	d0f2      	beq.n	12100 <sdhc_spi_cmd_r1_raw+0xe>
	    cmd != SDHC_READ_SINGLE_BLOCK && cmd != SDHC_READ_MULTIPLE_BLOCK &&
   1211a:	2c12      	cmp	r4, #18
   1211c:	d0f0      	beq.n	12100 <sdhc_spi_cmd_r1_raw+0xe>
   1211e:	2c18      	cmp	r4, #24
   12120:	d0ee      	beq.n	12100 <sdhc_spi_cmd_r1_raw+0xe>
	    cmd != SDHC_WRITE_BLOCK && cmd != SDHC_WRITE_MULTIPLE_BLOCK) {
   12122:	2c19      	cmp	r4, #25
   12124:	d0ec      	beq.n	12100 <sdhc_spi_cmd_r1_raw+0xe>
		sdhc_spi_rx_u8(data);
   12126:	4628      	mov	r0, r5
   12128:	f7ff fe67 	bl	11dfa <sdhc_spi_rx_u8>
   1212c:	e7e8      	b.n	12100 <sdhc_spi_cmd_r1_raw+0xe>

0001212e <sdhc_spi_recover>:
{
   1212e:	b508      	push	{r3, lr}
	return sdhc_spi_cmd_r1(data, SDHC_SEND_STATUS, 0);
   12130:	2200      	movs	r2, #0
   12132:	210d      	movs	r1, #13
   12134:	f7f4 fee0 	bl	6ef8 <sdhc_spi_cmd_r1>
}
   12138:	bd08      	pop	{r3, pc}

0001213a <disk_spi_sdhc_access_write>:
{
   1213a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1213c:	460e      	mov	r6, r1
   1213e:	4617      	mov	r7, r2
   12140:	461c      	mov	r4, r3
	const struct device *dev = disk->dev;
   12142:	6903      	ldr	r3, [r0, #16]
	struct sdhc_spi_data *data = dev->data;
   12144:	691d      	ldr	r5, [r3, #16]
	if (count > 2) {
   12146:	2c02      	cmp	r4, #2
   12148:	d918      	bls.n	1217c <disk_spi_sdhc_access_write+0x42>
		err = sdhc_spi_write_multi(data, buf, sector, count);
   1214a:	4623      	mov	r3, r4
   1214c:	4628      	mov	r0, r5
   1214e:	f7f4 fee7 	bl	6f20 <sdhc_spi_write_multi>
		if (err != 0 && sdhc_is_retryable(err)) {
   12152:	b140      	cbz	r0, 12166 <disk_spi_sdhc_access_write+0x2c>
	switch (err) {
   12154:	f110 0f74 	cmn.w	r0, #116	; 0x74
   12158:	d006      	beq.n	12168 <disk_spi_sdhc_access_write+0x2e>
   1215a:	f110 0f05 	cmn.w	r0, #5
   1215e:	d003      	beq.n	12168 <disk_spi_sdhc_access_write+0x2e>
   12160:	f110 0f8a 	cmn.w	r0, #138	; 0x8a
   12164:	d000      	beq.n	12168 <disk_spi_sdhc_access_write+0x2e>
}
   12166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			sdhc_spi_recover(data);
   12168:	4628      	mov	r0, r5
   1216a:	f7ff ffe0 	bl	1212e <sdhc_spi_recover>
			err = sdhc_spi_write_multi(data, buf, sector, count);
   1216e:	4623      	mov	r3, r4
   12170:	463a      	mov	r2, r7
   12172:	4631      	mov	r1, r6
   12174:	4628      	mov	r0, r5
   12176:	f7f4 fed3 	bl	6f20 <sdhc_spi_write_multi>
   1217a:	e7f4      	b.n	12166 <disk_spi_sdhc_access_write+0x2c>
		err = sdhc_spi_write(data, buf, sector, count);
   1217c:	4623      	mov	r3, r4
   1217e:	4628      	mov	r0, r5
   12180:	f7f4 ff9e 	bl	70c0 <sdhc_spi_write>
		if (err != 0 && sdhc_is_retryable(err)) {
   12184:	2800      	cmp	r0, #0
   12186:	d0ee      	beq.n	12166 <disk_spi_sdhc_access_write+0x2c>
   12188:	f110 0f74 	cmn.w	r0, #116	; 0x74
   1218c:	d005      	beq.n	1219a <disk_spi_sdhc_access_write+0x60>
   1218e:	f110 0f05 	cmn.w	r0, #5
   12192:	d002      	beq.n	1219a <disk_spi_sdhc_access_write+0x60>
   12194:	f110 0f8a 	cmn.w	r0, #138	; 0x8a
   12198:	d1e5      	bne.n	12166 <disk_spi_sdhc_access_write+0x2c>
			sdhc_spi_recover(data);
   1219a:	4628      	mov	r0, r5
   1219c:	f7ff ffc7 	bl	1212e <sdhc_spi_recover>
			err = sdhc_spi_write(data, buf, sector, count);
   121a0:	4623      	mov	r3, r4
   121a2:	463a      	mov	r2, r7
   121a4:	4631      	mov	r1, r6
   121a6:	4628      	mov	r0, r5
   121a8:	f7f4 ff8a 	bl	70c0 <sdhc_spi_write>
	return err;
   121ac:	e7db      	b.n	12166 <disk_spi_sdhc_access_write+0x2c>

000121ae <sdhc_spi_cmd_r37_raw>:
{
   121ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   121b0:	b083      	sub	sp, #12
   121b2:	4604      	mov	r4, r0
   121b4:	461e      	mov	r6, r3
	err = sdhc_spi_tx_cmd(data, cmd, payload);
   121b6:	f7ff fe4e 	bl	11e56 <sdhc_spi_tx_cmd>
	if (err != 0) {
   121ba:	4605      	mov	r5, r0
   121bc:	b110      	cbz	r0, 121c4 <sdhc_spi_cmd_r37_raw+0x16>
}
   121be:	4628      	mov	r0, r5
   121c0:	b003      	add	sp, #12
   121c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = sdhc_spi_skip_until_start(data);
   121c4:	4620      	mov	r0, r4
   121c6:	f7ff ff06 	bl	11fd6 <sdhc_spi_skip_until_start>
   121ca:	4607      	mov	r7, r0
	err = sdhc_spi_rx_bytes(data, buf, sizeof(buf));
   121cc:	2204      	movs	r2, #4
   121ce:	eb0d 0102 	add.w	r1, sp, r2
   121d2:	4620      	mov	r0, r4
   121d4:	f7f4 fdea 	bl	6dac <sdhc_spi_rx_bytes>
   121d8:	4605      	mov	r5, r0
	return ((uint16_t)src[0] << 8) | src[1];
   121da:	f89d 3004 	ldrb.w	r3, [sp, #4]
   121de:	f89d 2005 	ldrb.w	r2, [sp, #5]
   121e2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   121e6:	f89d 1006 	ldrb.w	r1, [sp, #6]
   121ea:	f89d 2007 	ldrb.w	r2, [sp, #7]
   121ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   121f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
	*reply = sys_get_be32(buf);
   121f6:	6032      	str	r2, [r6, #0]
	sdhc_spi_rx_u8(data);
   121f8:	4620      	mov	r0, r4
   121fa:	f7ff fdfe 	bl	11dfa <sdhc_spi_rx_u8>
	if (err != 0) {
   121fe:	2d00      	cmp	r5, #0
   12200:	d1dd      	bne.n	121be <sdhc_spi_cmd_r37_raw+0x10>
	return status;
   12202:	463d      	mov	r5, r7
   12204:	e7db      	b.n	121be <sdhc_spi_cmd_r37_raw+0x10>

00012206 <sdhc_spi_check_interface>:
{
   12206:	b500      	push	{lr}
   12208:	b083      	sub	sp, #12
	err = sdhc_spi_cmd_r7_idle(data, SDHC_SEND_IF_COND,
   1220a:	ab01      	add	r3, sp, #4
   1220c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   12210:	2108      	movs	r1, #8
   12212:	f7f4 ff9f 	bl	7154 <sdhc_spi_cmd_r7_idle>
	if (err != 0) {
   12216:	b940      	cbnz	r0, 1222a <sdhc_spi_check_interface+0x24>
	if ((cond & 0xFF) != SDHC_CHECK) {
   12218:	9b01      	ldr	r3, [sp, #4]
   1221a:	b2da      	uxtb	r2, r3
   1221c:	2aaa      	cmp	r2, #170	; 0xaa
   1221e:	d107      	bne.n	12230 <sdhc_spi_check_interface+0x2a>
	if ((cond & SDHC_VHS_MASK) != SDHC_VHS_3V3) {
   12220:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   12224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   12228:	d105      	bne.n	12236 <sdhc_spi_check_interface+0x30>
}
   1222a:	b003      	add	sp, #12
   1222c:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENOENT;
   12230:	f06f 0001 	mvn.w	r0, #1
   12234:	e7f9      	b.n	1222a <sdhc_spi_check_interface+0x24>
		return -ENOTSUP;
   12236:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1223a:	e7f6      	b.n	1222a <sdhc_spi_check_interface+0x24>

0001223c <disk_spi_sdhc_access_read>:
{
   1223c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1223e:	460c      	mov	r4, r1
   12240:	4615      	mov	r5, r2
   12242:	461e      	mov	r6, r3
	const struct device *dev = disk->dev;
   12244:	6900      	ldr	r0, [r0, #16]
	struct sdhc_spi_data *data = dev->data;
   12246:	6907      	ldr	r7, [r0, #16]
	err = sdhc_spi_read(data, buf, sector, count);
   12248:	4638      	mov	r0, r7
   1224a:	f7f5 f8b1 	bl	73b0 <sdhc_spi_read>
	if (err != 0 && sdhc_is_retryable(err)) {
   1224e:	b140      	cbz	r0, 12262 <disk_spi_sdhc_access_read+0x26>
   12250:	f110 0f74 	cmn.w	r0, #116	; 0x74
   12254:	d006      	beq.n	12264 <disk_spi_sdhc_access_read+0x28>
   12256:	f110 0f05 	cmn.w	r0, #5
   1225a:	d003      	beq.n	12264 <disk_spi_sdhc_access_read+0x28>
   1225c:	f110 0f8a 	cmn.w	r0, #138	; 0x8a
   12260:	d000      	beq.n	12264 <disk_spi_sdhc_access_read+0x28>
}
   12262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sdhc_spi_recover(data);
   12264:	4638      	mov	r0, r7
   12266:	f7ff ff62 	bl	1212e <sdhc_spi_recover>
		err = sdhc_spi_read(data, buf, sector, count);
   1226a:	4633      	mov	r3, r6
   1226c:	462a      	mov	r2, r5
   1226e:	4621      	mov	r1, r4
   12270:	4638      	mov	r0, r7
   12272:	f7f5 f89d 	bl	73b0 <sdhc_spi_read>
	return err;
   12276:	e7f4      	b.n	12262 <disk_spi_sdhc_access_read+0x26>

00012278 <disk_spi_sdhc_access_init>:
{
   12278:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev = disk->dev;
   1227a:	6900      	ldr	r0, [r0, #16]
	struct sdhc_spi_data *data = dev->data;
   1227c:	6905      	ldr	r5, [r0, #16]
	err = sdhc_spi_detect(dev);
   1227e:	f7f5 f8d7 	bl	7430 <sdhc_spi_detect>
   12282:	4604      	mov	r4, r0
	spi_release(data->spi, data->spi_cfg);
   12284:	6828      	ldr	r0, [r5, #0]
   12286:	6869      	ldr	r1, [r5, #4]
	const struct spi_driver_api *api =
   12288:	6883      	ldr	r3, [r0, #8]
	return api->release(dev, config);
   1228a:	685b      	ldr	r3, [r3, #4]
   1228c:	4798      	blx	r3
}
   1228e:	4620      	mov	r0, r4
   12290:	bd38      	pop	{r3, r4, r5, pc}

00012292 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   12292:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   12294:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   12298:	0089      	lsls	r1, r1, #2
   1229a:	3140      	adds	r1, #64	; 0x40
}
   1229c:	4408      	add	r0, r1
   1229e:	4770      	bx	lr

000122a0 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   122a0:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   122a2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   122a6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   122aa:	4770      	bx	lr

000122ac <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   122ac:	6900      	ldr	r0, [r0, #16]
}
   122ae:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   122b2:	4770      	bx	lr

000122b4 <set_off_state>:
	__asm__ volatile(
   122b4:	f04f 0320 	mov.w	r3, #32
   122b8:	f3ef 8211 	mrs	r2, BASEPRI
   122bc:	f383 8812 	msr	BASEPRI_MAX, r3
   122c0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   122c4:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   122c6:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   122ca:	d001      	beq.n	122d0 <set_off_state+0x1c>
   122cc:	428b      	cmp	r3, r1
   122ce:	d107      	bne.n	122e0 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   122d0:	2301      	movs	r3, #1
   122d2:	6003      	str	r3, [r0, #0]
	int err = 0;
   122d4:	2000      	movs	r0, #0
	__asm__ volatile(
   122d6:	f382 8811 	msr	BASEPRI, r2
   122da:	f3bf 8f6f 	isb	sy
}
   122de:	4770      	bx	lr
		err = -EPERM;
   122e0:	f04f 30ff 	mov.w	r0, #4294967295
   122e4:	e7f7      	b.n	122d6 <set_off_state+0x22>

000122e6 <set_starting_state>:
{
   122e6:	b410      	push	{r4}
	__asm__ volatile(
   122e8:	f04f 0320 	mov.w	r3, #32
   122ec:	f3ef 8211 	mrs	r2, BASEPRI
   122f0:	f383 8812 	msr	BASEPRI_MAX, r3
   122f4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   122f8:	6803      	ldr	r3, [r0, #0]
   122fa:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   122fe:	f003 0307 	and.w	r3, r3, #7
   12302:	2b01      	cmp	r3, #1
   12304:	d009      	beq.n	1231a <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   12306:	428c      	cmp	r4, r1
   12308:	d00a      	beq.n	12320 <set_starting_state+0x3a>
		err = -EPERM;
   1230a:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   1230e:	f382 8811 	msr	BASEPRI, r2
   12312:	f3bf 8f6f 	isb	sy
}
   12316:	bc10      	pop	{r4}
   12318:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1231a:	6001      	str	r1, [r0, #0]
	int err = 0;
   1231c:	2000      	movs	r0, #0
   1231e:	e7f6      	b.n	1230e <set_starting_state+0x28>
		err = -EALREADY;
   12320:	f06f 0077 	mvn.w	r0, #119	; 0x77
   12324:	e7f3      	b.n	1230e <set_starting_state+0x28>

00012326 <set_on_state>:
	__asm__ volatile(
   12326:	f04f 0320 	mov.w	r3, #32
   1232a:	f3ef 8211 	mrs	r2, BASEPRI
   1232e:	f383 8812 	msr	BASEPRI_MAX, r3
   12332:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   12336:	6803      	ldr	r3, [r0, #0]
   12338:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1233c:	f043 0302 	orr.w	r3, r3, #2
   12340:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   12342:	f382 8811 	msr	BASEPRI, r2
   12346:	f3bf 8f6f 	isb	sy
}
   1234a:	4770      	bx	lr

0001234c <clkstarted_handle>:
{
   1234c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1234e:	4606      	mov	r6, r0
   12350:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   12352:	f7ff ff9e 	bl	12292 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   12356:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   12358:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   1235a:	2300      	movs	r3, #0
   1235c:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   12360:	f7ff ffe1 	bl	12326 <set_on_state>
	if (callback) {
   12364:	b11d      	cbz	r5, 1236e <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   12366:	463a      	mov	r2, r7
   12368:	4621      	mov	r1, r4
   1236a:	4630      	mov	r0, r6
   1236c:	47a8      	blx	r5
}
   1236e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012370 <async_start>:
{
   12370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12374:	4606      	mov	r6, r0
   12376:	4690      	mov	r8, r2
   12378:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1237a:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1237c:	4629      	mov	r1, r5
   1237e:	f7ff ff88 	bl	12292 <get_sub_data>
   12382:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   12384:	9906      	ldr	r1, [sp, #24]
   12386:	3008      	adds	r0, #8
   12388:	f7ff ffad 	bl	122e6 <set_starting_state>
	if (err < 0) {
   1238c:	2800      	cmp	r0, #0
   1238e:	db09      	blt.n	123a4 <async_start+0x34>
	subdata->cb = cb;
   12390:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   12394:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   12396:	4629      	mov	r1, r5
   12398:	4630      	mov	r0, r6
   1239a:	f7ff ff81 	bl	122a0 <get_sub_config>
   1239e:	6803      	ldr	r3, [r0, #0]
   123a0:	4798      	blx	r3
	return 0;
   123a2:	2000      	movs	r0, #0
}
   123a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000123a8 <api_start>:
{
   123a8:	b510      	push	{r4, lr}
   123aa:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   123ac:	2480      	movs	r4, #128	; 0x80
   123ae:	9400      	str	r4, [sp, #0]
   123b0:	f7ff ffde 	bl	12370 <async_start>
}
   123b4:	b002      	add	sp, #8
   123b6:	bd10      	pop	{r4, pc}

000123b8 <onoff_started_callback>:
{
   123b8:	b510      	push	{r4, lr}
   123ba:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   123bc:	b2c9      	uxtb	r1, r1
   123be:	f7ff ff75 	bl	122ac <get_onoff_manager>
	notify(mgr, 0);
   123c2:	2100      	movs	r1, #0
   123c4:	47a0      	blx	r4
}
   123c6:	bd10      	pop	{r4, pc}

000123c8 <hfclk_start>:
{
   123c8:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   123ca:	2001      	movs	r0, #1
   123cc:	f7f9 fce2 	bl	bd94 <nrfx_clock_start>
}
   123d0:	bd08      	pop	{r3, pc}

000123d2 <hfclk_stop>:
{
   123d2:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   123d4:	2001      	movs	r0, #1
   123d6:	f7f9 fd41 	bl	be5c <nrfx_clock_stop>
}
   123da:	bd08      	pop	{r3, pc}

000123dc <lfclk_stop>:
{
   123dc:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   123de:	2000      	movs	r0, #0
   123e0:	f7f9 fd3c 	bl	be5c <nrfx_clock_stop>
}
   123e4:	bd08      	pop	{r3, pc}

000123e6 <api_stop>:
{
   123e6:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   123e8:	2280      	movs	r2, #128	; 0x80
   123ea:	f7f5 fb27 	bl	7a3c <stop>
}
   123ee:	bd08      	pop	{r3, pc}

000123f0 <blocking_start_callback>:
{
   123f0:	b508      	push	{r3, lr}
   123f2:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   123f4:	f7fc f9a6 	bl	e744 <z_impl_k_sem_give>
}
   123f8:	bd08      	pop	{r3, pc}

000123fa <wait>:
{
   123fa:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   123fc:	f002 fa60 	bl	148c0 <k_is_in_isr>
   12400:	b100      	cbz	r0, 12404 <wait+0xa>
}
   12402:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
   12404:	2042      	movs	r0, #66	; 0x42
   12406:	2100      	movs	r1, #0
   12408:	f7fd fab2 	bl	f970 <z_impl_k_sleep>
   1240c:	e7f9      	b.n	12402 <wait+0x8>

0001240e <get_pull>:
	if (flags & GPIO_PULL_UP) {
   1240e:	f010 0f10 	tst.w	r0, #16
   12412:	d104      	bne.n	1241e <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   12414:	f010 0f20 	tst.w	r0, #32
   12418:	d103      	bne.n	12422 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   1241a:	2000      	movs	r0, #0
   1241c:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   1241e:	2003      	movs	r0, #3
   12420:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   12422:	2001      	movs	r0, #1
}
   12424:	4770      	bx	lr

00012426 <gpio_nrfx_port_get_raw>:
	return port->config;
   12426:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12428:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1242a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1242e:	600b      	str	r3, [r1, #0]
}
   12430:	2000      	movs	r0, #0
   12432:	4770      	bx	lr

00012434 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   12434:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12436:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   12438:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1243c:	4042      	eors	r2, r0
   1243e:	400a      	ands	r2, r1
   12440:	4042      	eors	r2, r0
    p_reg->OUT = value;
   12442:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   12446:	2000      	movs	r0, #0
   12448:	4770      	bx	lr

0001244a <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   1244a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1244c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1244e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   12452:	2000      	movs	r0, #0
   12454:	4770      	bx	lr

00012456 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   12456:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12458:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1245a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   1245e:	2000      	movs	r0, #0
   12460:	4770      	bx	lr

00012462 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   12462:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12464:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   12466:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1246a:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1246c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   12470:	2000      	movs	r0, #0
   12472:	4770      	bx	lr

00012474 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   12474:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   12478:	d007      	beq.n	1248a <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1247a:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
   1247e:	d00d      	beq.n	1249c <get_trigger+0x28>
   12480:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   12484:	d008      	beq.n	12498 <get_trigger+0x24>
   12486:	2001      	movs	r0, #1
}
   12488:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1248a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   1248e:	d001      	beq.n	12494 <get_trigger+0x20>
   12490:	2005      	movs	r0, #5
   12492:	4770      	bx	lr
   12494:	2004      	movs	r0, #4
   12496:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   12498:	2002      	movs	r0, #2
   1249a:	4770      	bx	lr
   1249c:	2003      	movs	r0, #3
   1249e:	4770      	bx	lr

000124a0 <spi_nrfx_transceive>:
{
   124a0:	b510      	push	{r4, lr}
   124a2:	b082      	sub	sp, #8
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL);
   124a4:	2400      	movs	r4, #0
   124a6:	9401      	str	r4, [sp, #4]
   124a8:	9400      	str	r4, [sp, #0]
   124aa:	f7f6 fa43 	bl	8934 <transceive>
}
   124ae:	b002      	add	sp, #8
   124b0:	bd10      	pop	{r4, pc}

000124b2 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   124b2:	4770      	bx	lr

000124b4 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   124b4:	1a40      	subs	r0, r0, r1
}
   124b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   124ba:	4770      	bx	lr

000124bc <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   124bc:	f100 0350 	add.w	r3, r0, #80	; 0x50
   124c0:	009b      	lsls	r3, r3, #2
   124c2:	b29b      	uxth	r3, r3
   124c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   124c8:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   124cc:	2200      	movs	r2, #0
   124ce:	601a      	str	r2, [r3, #0]
   124d0:	681b      	ldr	r3, [r3, #0]
}
   124d2:	4770      	bx	lr

000124d4 <absolute_time_to_cc>:
}
   124d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   124d8:	4770      	bx	lr

000124da <full_int_lock>:
	__asm__ volatile(
   124da:	f04f 0320 	mov.w	r3, #32
   124de:	f3ef 8011 	mrs	r0, BASEPRI
   124e2:	f383 8812 	msr	BASEPRI_MAX, r3
   124e6:	f3bf 8f6f 	isb	sy
}
   124ea:	4770      	bx	lr

000124ec <full_int_unlock>:
	__asm__ volatile(
   124ec:	f380 8811 	msr	BASEPRI, r0
   124f0:	f3bf 8f6f 	isb	sy
}
   124f4:	4770      	bx	lr

000124f6 <set_absolute_alarm>:
{
   124f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   124f8:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   124fa:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   124fe:	f7f6 fcd5 	bl	8eac <get_comparator>
   12502:	4607      	mov	r7, r0
   12504:	e019      	b.n	1253a <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   12506:	2013      	movs	r0, #19
   12508:	f002 fa5f 	bl	149ca <z_impl_k_busy_wait>
}
   1250c:	e022      	b.n	12554 <set_absolute_alarm+0x5e>
		event_clear(chan);
   1250e:	4630      	mov	r0, r6
   12510:	f7ff ffd4 	bl	124bc <event_clear>
		event_enable(chan);
   12514:	4630      	mov	r0, r6
   12516:	f7f6 fcd1 	bl	8ebc <event_enable>
		set_comparator(chan, cc_val);
   1251a:	4629      	mov	r1, r5
   1251c:	4630      	mov	r0, r6
   1251e:	f7f6 fcbb 	bl	8e98 <set_comparator>
		now2 = counter();
   12522:	f7f6 fcdf 	bl	8ee4 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   12526:	4284      	cmp	r4, r0
   12528:	d01e      	beq.n	12568 <set_absolute_alarm+0x72>
   1252a:	1c81      	adds	r1, r0, #2
   1252c:	4628      	mov	r0, r5
   1252e:	f7ff ffc1 	bl	124b4 <counter_sub>
	} while ((now2 != now) &&
   12532:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   12536:	d917      	bls.n	12568 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   12538:	462f      	mov	r7, r5
		now = counter();
   1253a:	f7f6 fcd3 	bl	8ee4 <counter>
   1253e:	4604      	mov	r4, r0
		set_comparator(chan, now);
   12540:	4601      	mov	r1, r0
   12542:	4630      	mov	r0, r6
   12544:	f7f6 fca8 	bl	8e98 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   12548:	4621      	mov	r1, r4
   1254a:	4638      	mov	r0, r7
   1254c:	f7ff ffb2 	bl	124b4 <counter_sub>
   12550:	2801      	cmp	r0, #1
   12552:	d0d8      	beq.n	12506 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   12554:	1ca7      	adds	r7, r4, #2
   12556:	4639      	mov	r1, r7
   12558:	4628      	mov	r0, r5
   1255a:	f7ff ffab 	bl	124b4 <counter_sub>
   1255e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   12562:	d9d4      	bls.n	1250e <set_absolute_alarm+0x18>
			cc_val = now + 2;
   12564:	463d      	mov	r5, r7
   12566:	e7d2      	b.n	1250e <set_absolute_alarm+0x18>
}
   12568:	4628      	mov	r0, r5
   1256a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001256c <compare_set>:
{
   1256c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1256e:	b083      	sub	sp, #12
   12570:	4604      	mov	r4, r0
   12572:	4617      	mov	r7, r2
   12574:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   12576:	f7f6 fcbb 	bl	8ef0 <compare_int_lock>
   1257a:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   1257c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1257e:	9301      	str	r3, [sp, #4]
   12580:	9b08      	ldr	r3, [sp, #32]
   12582:	9300      	str	r3, [sp, #0]
   12584:	463a      	mov	r2, r7
   12586:	462b      	mov	r3, r5
   12588:	4620      	mov	r0, r4
   1258a:	f7f6 fd9f 	bl	90cc <compare_set_nolocks>
   1258e:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   12590:	4631      	mov	r1, r6
   12592:	4620      	mov	r0, r4
   12594:	f7f6 fd10 	bl	8fb8 <compare_int_unlock>
}
   12598:	4628      	mov	r0, r5
   1259a:	b003      	add	sp, #12
   1259c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001259e <sys_clock_cycle_get_32>:
{
   1259e:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   125a0:	f7f6 fd74 	bl	908c <z_nrf_rtc_timer_read>
}
   125a4:	bd08      	pop	{r3, pc}

000125a6 <RADIO_IRQHandler>:

ISR_DIRECT_DECLARE(RADIO_IRQHandler)
   125a6:	4668      	mov	r0, sp
   125a8:	f020 0107 	bic.w	r1, r0, #7
   125ac:	468d      	mov	sp, r1
   125ae:	b501      	push	{r0, lr}
{
	radio_irq_handler();
   125b0:	f7f6 fee2 	bl	9378 <radio_irq_handler>

	ISR_DIRECT_PM();
   125b4:	f7f3 f8b2 	bl	571c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   125b8:	f7f3 f9be 	bl	5938 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(RADIO_IRQHandler)
   125bc:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   125c0:	4685      	mov	sp, r0
   125c2:	4770      	bx	lr

000125c4 <ESB_SYS_TIMER_IRQHandler>:
	ISR_DIRECT_PM();

	return 1;
}

ISR_DIRECT_DECLARE(ESB_SYS_TIMER_IRQHandler)
   125c4:	4668      	mov	r0, sp
   125c6:	f020 0107 	bic.w	r1, r0, #7
   125ca:	468d      	mov	sp, r1
   125cc:	b501      	push	{r0, lr}
{
	ISR_DIRECT_PM();
   125ce:	f7f3 f8a5 	bl	571c <_arch_isr_direct_pm>
   125d2:	f7f3 f9b1 	bl	5938 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ESB_SYS_TIMER_IRQHandler)
   125d6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   125da:	4685      	mov	sp, r0
   125dc:	4770      	bx	lr

000125de <SWI0_EGU0_IRQHandler>:
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
   125de:	4668      	mov	r0, sp
   125e0:	f020 0107 	bic.w	r1, r0, #7
   125e4:	468d      	mov	sp, r1
   125e6:	b501      	push	{r0, lr}
	esb_evt_irq_handler();
   125e8:	f7f6 ff26 	bl	9438 <esb_evt_irq_handler>
	ISR_DIRECT_PM();
   125ec:	f7f3 f896 	bl	571c <_arch_isr_direct_pm>
   125f0:	f7f3 f9a2 	bl	5938 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
   125f4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   125f8:	4685      	mov	sp, r0
   125fa:	4770      	bx	lr

000125fc <ld_word>:
	rv = ptr[1];
   125fc:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
   125fe:	7800      	ldrb	r0, [r0, #0]
}
   12600:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   12604:	4770      	bx	lr

00012606 <ld_dword>:
	rv = ptr[3];
   12606:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
   12608:	7883      	ldrb	r3, [r0, #2]
   1260a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
   1260e:	7843      	ldrb	r3, [r0, #1]
   12610:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
   12614:	7800      	ldrb	r0, [r0, #0]
}
   12616:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   1261a:	4770      	bx	lr

0001261c <ld_qword>:
{
   1261c:	b430      	push	{r4, r5}
	rv = ptr[7];
   1261e:	79c4      	ldrb	r4, [r0, #7]
	rv = rv << 8 | ptr[6];
   12620:	7982      	ldrb	r2, [r0, #6]
   12622:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
	rv = rv << 8 | ptr[5];
   12626:	7944      	ldrb	r4, [r0, #5]
   12628:	ea44 2102 	orr.w	r1, r4, r2, lsl #8
	rv = rv << 8 | ptr[4];
   1262c:	f3c2 4307 	ubfx	r3, r2, #16, #8
   12630:	7904      	ldrb	r4, [r0, #4]
   12632:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
	rv = rv << 8 | ptr[3];
   12636:	021b      	lsls	r3, r3, #8
   12638:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
   1263c:	78c4      	ldrb	r4, [r0, #3]
   1263e:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
	rv = rv << 8 | ptr[2];
   12642:	021b      	lsls	r3, r3, #8
   12644:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
   12648:	7884      	ldrb	r4, [r0, #2]
   1264a:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
	rv = rv << 8 | ptr[1];
   1264e:	021b      	lsls	r3, r3, #8
   12650:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
   12654:	7844      	ldrb	r4, [r0, #1]
   12656:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
	rv = rv << 8 | ptr[0];
   1265a:	021b      	lsls	r3, r3, #8
   1265c:	7804      	ldrb	r4, [r0, #0]
}
   1265e:	ea44 2001 	orr.w	r0, r4, r1, lsl #8
   12662:	ea43 6111 	orr.w	r1, r3, r1, lsr #24
   12666:	bc30      	pop	{r4, r5}
   12668:	4770      	bx	lr

0001266a <st_word>:
	*ptr++ = (BYTE)val; val >>= 8;
   1266a:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
   1266c:	0a09      	lsrs	r1, r1, #8
   1266e:	7041      	strb	r1, [r0, #1]
}
   12670:	4770      	bx	lr

00012672 <st_dword>:
	*ptr++ = (BYTE)val; val >>= 8;
   12672:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   12674:	f3c1 2307 	ubfx	r3, r1, #8, #8
   12678:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
   1267a:	f3c1 4307 	ubfx	r3, r1, #16, #8
   1267e:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
   12680:	0e09      	lsrs	r1, r1, #24
   12682:	70c1      	strb	r1, [r0, #3]
}
   12684:	4770      	bx	lr

00012686 <st_qword>:
	*ptr++ = (BYTE)val; val >>= 8;
   12686:	7002      	strb	r2, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   12688:	f3c2 2107 	ubfx	r1, r2, #8, #8
   1268c:	7041      	strb	r1, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
   1268e:	f3c2 4107 	ubfx	r1, r2, #16, #8
   12692:	7081      	strb	r1, [r0, #2]
	*ptr++ = (BYTE)val; val >>= 8;
   12694:	0e12      	lsrs	r2, r2, #24
   12696:	70c2      	strb	r2, [r0, #3]
	*ptr++ = (BYTE)val; val >>= 8;
   12698:	7103      	strb	r3, [r0, #4]
	*ptr++ = (BYTE)val; val >>= 8;
   1269a:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1269e:	7142      	strb	r2, [r0, #5]
	*ptr++ = (BYTE)val; val >>= 8;
   126a0:	f3c3 4207 	ubfx	r2, r3, #16, #8
   126a4:	7182      	strb	r2, [r0, #6]
	*ptr++ = (BYTE)val;
   126a6:	0e1b      	lsrs	r3, r3, #24
   126a8:	71c3      	strb	r3, [r0, #7]
}
   126aa:	4770      	bx	lr

000126ac <dbc_1st>:
}
   126ac:	2000      	movs	r0, #0
   126ae:	4770      	bx	lr

000126b0 <dbc_2nd>:
}
   126b0:	2000      	movs	r0, #0
   126b2:	4770      	bx	lr

000126b4 <clst2sect>:
	clst -= 2;		/* Cluster number is origin from 2 */
   126b4:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
   126b6:	69c3      	ldr	r3, [r0, #28]
   126b8:	3b02      	subs	r3, #2
   126ba:	428b      	cmp	r3, r1
   126bc:	d904      	bls.n	126c8 <clst2sect+0x14>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
   126be:	6b03      	ldr	r3, [r0, #48]	; 0x30
   126c0:	8940      	ldrh	r0, [r0, #10]
   126c2:	fb01 3000 	mla	r0, r1, r0, r3
   126c6:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
   126c8:	2000      	movs	r0, #0
}
   126ca:	4770      	bx	lr

000126cc <ld_clust>:
{
   126cc:	b570      	push	{r4, r5, r6, lr}
   126ce:	4606      	mov	r6, r0
   126d0:	460d      	mov	r5, r1
	cl = ld_word(dir + DIR_FstClusLO);
   126d2:	f101 001a 	add.w	r0, r1, #26
   126d6:	f7ff ff91 	bl	125fc <ld_word>
	if (fs->fs_type == FS_FAT32) {
   126da:	7833      	ldrb	r3, [r6, #0]
   126dc:	2b03      	cmp	r3, #3
   126de:	d000      	beq.n	126e2 <ld_clust+0x16>
}
   126e0:	bd70      	pop	{r4, r5, r6, pc}
   126e2:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
   126e4:	f105 0014 	add.w	r0, r5, #20
   126e8:	f7ff ff88 	bl	125fc <ld_word>
   126ec:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
   126f0:	e7f6      	b.n	126e0 <ld_clust+0x14>

000126f2 <st_clust>:
{
   126f2:	b570      	push	{r4, r5, r6, lr}
   126f4:	4606      	mov	r6, r0
   126f6:	460c      	mov	r4, r1
   126f8:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
   126fa:	b291      	uxth	r1, r2
   126fc:	f104 001a 	add.w	r0, r4, #26
   12700:	f7ff ffb3 	bl	1266a <st_word>
	if (fs->fs_type == FS_FAT32) {
   12704:	7833      	ldrb	r3, [r6, #0]
   12706:	2b03      	cmp	r3, #3
   12708:	d000      	beq.n	1270c <st_clust+0x1a>
}
   1270a:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
   1270c:	0c29      	lsrs	r1, r5, #16
   1270e:	f104 0014 	add.w	r0, r4, #20
   12712:	f7ff ffaa 	bl	1266a <st_word>
}
   12716:	e7f8      	b.n	1270a <st_clust+0x18>

00012718 <sum_sfn>:
{
   12718:	b410      	push	{r4}
   1271a:	4601      	mov	r1, r0
	UINT n = 11;
   1271c:	240b      	movs	r4, #11
	BYTE sum = 0;
   1271e:	2000      	movs	r0, #0
		sum = (sum >> 1) + (sum << 7) + *dir++;
   12720:	0843      	lsrs	r3, r0, #1
   12722:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
   12726:	f991 0000 	ldrsb.w	r0, [r1]
   1272a:	3101      	adds	r1, #1
   1272c:	fa40 f383 	sxtab	r3, r0, r3
   12730:	b2d8      	uxtb	r0, r3
	} while (--n);
   12732:	3c01      	subs	r4, #1
   12734:	d1f4      	bne.n	12720 <sum_sfn+0x8>
}
   12736:	bc10      	pop	{r4}
   12738:	4770      	bx	lr

0001273a <xdir_sum>:
{
   1273a:	b430      	push	{r4, r5}
   1273c:	4605      	mov	r5, r0
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
   1273e:	7841      	ldrb	r1, [r0, #1]
   12740:	3101      	adds	r1, #1
   12742:	0149      	lsls	r1, r1, #5
	for (i = sum = 0; i < szblk; i++) {
   12744:	2000      	movs	r0, #0
   12746:	4603      	mov	r3, r0
   12748:	e007      	b.n	1275a <xdir_sum+0x20>
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
   1274a:	0842      	lsrs	r2, r0, #1
   1274c:	eb02 32c0 	add.w	r2, r2, r0, lsl #15
   12750:	5cec      	ldrb	r4, [r5, r3]
   12752:	fa04 f282 	sxtah	r2, r4, r2
   12756:	b290      	uxth	r0, r2
	for (i = sum = 0; i < szblk; i++) {
   12758:	3301      	adds	r3, #1
   1275a:	428b      	cmp	r3, r1
   1275c:	d203      	bcs.n	12766 <xdir_sum+0x2c>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
   1275e:	2b02      	cmp	r3, #2
   12760:	d1f3      	bne.n	1274a <xdir_sum+0x10>
			i++;
   12762:	3301      	adds	r3, #1
   12764:	e7f8      	b.n	12758 <xdir_sum+0x1e>
}
   12766:	bc30      	pop	{r4, r5}
   12768:	4770      	bx	lr

0001276a <xsum32>:
}
   1276a:	eb00 0071 	add.w	r0, r0, r1, ror #1
   1276e:	4770      	bx	lr

00012770 <init_alloc_info>:
{
   12770:	b538      	push	{r3, r4, r5, lr}
   12772:	4605      	mov	r5, r0
   12774:	460c      	mov	r4, r1
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
   12776:	6900      	ldr	r0, [r0, #16]
   12778:	3034      	adds	r0, #52	; 0x34
   1277a:	f7ff ff44 	bl	12606 <ld_dword>
   1277e:	60a0      	str	r0, [r4, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
   12780:	6928      	ldr	r0, [r5, #16]
   12782:	3038      	adds	r0, #56	; 0x38
   12784:	f7ff ff4a 	bl	1261c <ld_qword>
   12788:	e9c4 0104 	strd	r0, r1, [r4, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
   1278c:	692b      	ldr	r3, [r5, #16]
   1278e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   12792:	f003 0302 	and.w	r3, r3, #2
   12796:	71e3      	strb	r3, [r4, #7]
	obj->n_frag = 0;										/* No last fragment info */
   12798:	2300      	movs	r3, #0
   1279a:	61e3      	str	r3, [r4, #28]
}
   1279c:	bd38      	pop	{r3, r4, r5, pc}

0001279e <validate>:
{
   1279e:	b538      	push	{r3, r4, r5, lr}
   127a0:	460d      	mov	r5, r1
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
   127a2:	4604      	mov	r4, r0
   127a4:	b198      	cbz	r0, 127ce <validate+0x30>
   127a6:	6803      	ldr	r3, [r0, #0]
   127a8:	b19b      	cbz	r3, 127d2 <validate+0x34>
   127aa:	781a      	ldrb	r2, [r3, #0]
   127ac:	b1a2      	cbz	r2, 127d8 <validate+0x3a>
   127ae:	8881      	ldrh	r1, [r0, #4]
   127b0:	88da      	ldrh	r2, [r3, #6]
   127b2:	4291      	cmp	r1, r2
   127b4:	d003      	beq.n	127be <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
   127b6:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
   127b8:	2400      	movs	r4, #0
   127ba:	602c      	str	r4, [r5, #0]
}
   127bc:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
   127be:	7858      	ldrb	r0, [r3, #1]
   127c0:	f7f8 fef2 	bl	b5a8 <disk_status>
   127c4:	f010 0001 	ands.w	r0, r0, #1
   127c8:	d109      	bne.n	127de <validate+0x40>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
   127ca:	6824      	ldr	r4, [r4, #0]
   127cc:	e7f5      	b.n	127ba <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
   127ce:	2009      	movs	r0, #9
   127d0:	e7f3      	b.n	127ba <validate+0x1c>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
   127d2:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
   127d4:	2009      	movs	r0, #9
   127d6:	e7f0      	b.n	127ba <validate+0x1c>
   127d8:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
   127da:	2400      	movs	r4, #0
   127dc:	e7ed      	b.n	127ba <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
   127de:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
   127e0:	2400      	movs	r4, #0
   127e2:	e7ea      	b.n	127ba <validate+0x1c>

000127e4 <sync_window>:
{
   127e4:	b570      	push	{r4, r5, r6, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
   127e6:	78c5      	ldrb	r5, [r0, #3]
   127e8:	b90d      	cbnz	r5, 127ee <sync_window+0xa>
}
   127ea:	4628      	mov	r0, r5
   127ec:	bd70      	pop	{r4, r5, r6, pc}
   127ee:	4604      	mov	r4, r0
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
   127f0:	f100 063c 	add.w	r6, r0, #60	; 0x3c
   127f4:	2301      	movs	r3, #1
   127f6:	6b82      	ldr	r2, [r0, #56]	; 0x38
   127f8:	4631      	mov	r1, r6
   127fa:	7840      	ldrb	r0, [r0, #1]
   127fc:	f7f8 ff3c 	bl	b678 <disk_write>
   12800:	4605      	mov	r5, r0
   12802:	b988      	cbnz	r0, 12828 <sync_window+0x44>
			fs->wflag = 0;	/* Clear window dirty flag */
   12804:	2300      	movs	r3, #0
   12806:	70e3      	strb	r3, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
   12808:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   1280a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1280c:	1acb      	subs	r3, r1, r3
   1280e:	6a22      	ldr	r2, [r4, #32]
   12810:	4293      	cmp	r3, r2
   12812:	d2ea      	bcs.n	127ea <sync_window+0x6>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
   12814:	78a3      	ldrb	r3, [r4, #2]
   12816:	2b02      	cmp	r3, #2
   12818:	d1e7      	bne.n	127ea <sync_window+0x6>
   1281a:	2301      	movs	r3, #1
   1281c:	440a      	add	r2, r1
   1281e:	4631      	mov	r1, r6
   12820:	7860      	ldrb	r0, [r4, #1]
   12822:	f7f8 ff29 	bl	b678 <disk_write>
   12826:	e7e0      	b.n	127ea <sync_window+0x6>
			res = FR_DISK_ERR;
   12828:	2501      	movs	r5, #1
   1282a:	e7de      	b.n	127ea <sync_window+0x6>

0001282c <move_window>:
{
   1282c:	b570      	push	{r4, r5, r6, lr}
	if (sect != fs->winsect) {	/* Window offset changed? */
   1282e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   12830:	428b      	cmp	r3, r1
   12832:	d102      	bne.n	1283a <move_window+0xe>
	FRESULT res = FR_OK;
   12834:	2600      	movs	r6, #0
}
   12836:	4630      	mov	r0, r6
   12838:	bd70      	pop	{r4, r5, r6, pc}
   1283a:	4604      	mov	r4, r0
   1283c:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Flush the window */
   1283e:	f7ff ffd1 	bl	127e4 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
   12842:	4606      	mov	r6, r0
   12844:	2800      	cmp	r0, #0
   12846:	d1f6      	bne.n	12836 <move_window+0xa>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
   12848:	2301      	movs	r3, #1
   1284a:	462a      	mov	r2, r5
   1284c:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   12850:	7860      	ldrb	r0, [r4, #1]
   12852:	f7f8 fee9 	bl	b628 <disk_read>
   12856:	b110      	cbz	r0, 1285e <move_window+0x32>
				res = FR_DISK_ERR;
   12858:	2601      	movs	r6, #1
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
   1285a:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sect;
   1285e:	63a5      	str	r5, [r4, #56]	; 0x38
   12860:	e7e9      	b.n	12836 <move_window+0xa>

00012862 <find_volume>:
{
   12862:	b570      	push	{r4, r5, r6, lr}
   12864:	b084      	sub	sp, #16
   12866:	4606      	mov	r6, r0
   12868:	460d      	mov	r5, r1
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
   1286a:	2100      	movs	r1, #0
   1286c:	f7f6 fee2 	bl	9634 <check_fs>
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
   12870:	2802      	cmp	r0, #2
   12872:	d016      	beq.n	128a2 <find_volume+0x40>
   12874:	d82b      	bhi.n	128ce <find_volume+0x6c>
   12876:	b355      	cbz	r5, 128ce <find_volume+0x6c>
   12878:	2400      	movs	r4, #0
   1287a:	e00d      	b.n	12898 <find_volume+0x36>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
   1287c:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   12880:	0123      	lsls	r3, r4, #4
   12882:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
   12886:	4418      	add	r0, r3
   12888:	f7ff febd 	bl	12606 <ld_dword>
   1288c:	ab04      	add	r3, sp, #16
   1288e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   12892:	f843 0c10 	str.w	r0, [r3, #-16]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
   12896:	3401      	adds	r4, #1
   12898:	2c03      	cmp	r4, #3
   1289a:	d9ef      	bls.n	1287c <find_volume+0x1a>
	i = part ? part - 1 : 0;		/* Table index to find first */
   1289c:	b11d      	cbz	r5, 128a6 <find_volume+0x44>
   1289e:	1e6c      	subs	r4, r5, #1
   128a0:	e00c      	b.n	128bc <find_volume+0x5a>
   128a2:	2400      	movs	r4, #0
   128a4:	e7f8      	b.n	12898 <find_volume+0x36>
   128a6:	462c      	mov	r4, r5
   128a8:	e008      	b.n	128bc <find_volume+0x5a>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
   128aa:	4630      	mov	r0, r6
   128ac:	f7f6 fec2 	bl	9634 <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
   128b0:	b96d      	cbnz	r5, 128ce <find_volume+0x6c>
   128b2:	2801      	cmp	r0, #1
   128b4:	d90b      	bls.n	128ce <find_volume+0x6c>
   128b6:	3401      	adds	r4, #1
   128b8:	2c03      	cmp	r4, #3
   128ba:	d808      	bhi.n	128ce <find_volume+0x6c>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
   128bc:	ab04      	add	r3, sp, #16
   128be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   128c2:	f853 1c10 	ldr.w	r1, [r3, #-16]
   128c6:	2900      	cmp	r1, #0
   128c8:	d1ef      	bne.n	128aa <find_volume+0x48>
   128ca:	2003      	movs	r0, #3
   128cc:	e7f0      	b.n	128b0 <find_volume+0x4e>
}
   128ce:	b004      	add	sp, #16
   128d0:	bd70      	pop	{r4, r5, r6, pc}

000128d2 <find_bitmap>:
{
   128d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   128d6:	4605      	mov	r5, r0
   128d8:	4691      	mov	r9, r2
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
   128da:	1e8f      	subs	r7, r1, #2
	if (clst >= fs->n_fatent - 2) clst = 0;
   128dc:	69c3      	ldr	r3, [r0, #28]
   128de:	3b02      	subs	r3, #2
   128e0:	42bb      	cmp	r3, r7
   128e2:	d800      	bhi.n	128e6 <find_bitmap+0x14>
   128e4:	2700      	movs	r7, #0
	scl = val = clst; ctr = 0;
   128e6:	46b8      	mov	r8, r7
   128e8:	463c      	mov	r4, r7
   128ea:	2600      	movs	r6, #0
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
   128ec:	6b69      	ldr	r1, [r5, #52]	; 0x34
   128ee:	eb01 3114 	add.w	r1, r1, r4, lsr #12
   128f2:	4628      	mov	r0, r5
   128f4:	f7ff ff9a 	bl	1282c <move_window>
   128f8:	4684      	mov	ip, r0
   128fa:	bb40      	cbnz	r0, 1294e <find_bitmap+0x7c>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
   128fc:	f3c4 00c8 	ubfx	r0, r4, #3, #9
   12900:	f004 0207 	and.w	r2, r4, #7
   12904:	2301      	movs	r3, #1
   12906:	4093      	lsls	r3, r2
   12908:	b2db      	uxtb	r3, r3
   1290a:	e009      	b.n	12920 <find_bitmap+0x4e>
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
   1290c:	46a0      	mov	r8, r4
   1290e:	2600      	movs	r6, #0
				if (val == clst) return 0;	/* All cluster scanned? */
   12910:	42a7      	cmp	r7, r4
   12912:	d01f      	beq.n	12954 <find_bitmap+0x82>
			} while (bm != 0);
   12914:	b923      	cbnz	r3, 12920 <find_bitmap+0x4e>
		} while (++i < SS(fs));
   12916:	3001      	adds	r0, #1
   12918:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1291c:	d2e6      	bcs.n	128ec <find_bitmap+0x1a>
			bm = 1;
   1291e:	2301      	movs	r3, #1
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
   12920:	182a      	adds	r2, r5, r0
   12922:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
   12926:	401a      	ands	r2, r3
   12928:	005b      	lsls	r3, r3, #1
   1292a:	b2db      	uxtb	r3, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
   1292c:	3401      	adds	r4, #1
   1292e:	69e9      	ldr	r1, [r5, #28]
   12930:	3902      	subs	r1, #2
   12932:	42a1      	cmp	r1, r4
   12934:	d803      	bhi.n	1293e <find_bitmap+0x6c>
					val = 0; bm = 0; i = SS(fs);
   12936:	4663      	mov	r3, ip
   12938:	2400      	movs	r4, #0
   1293a:	f44f 7000 	mov.w	r0, #512	; 0x200
				if (bv == 0) {	/* Is it a free cluster? */
   1293e:	2a00      	cmp	r2, #0
   12940:	d1e4      	bne.n	1290c <find_bitmap+0x3a>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
   12942:	3601      	adds	r6, #1
   12944:	454e      	cmp	r6, r9
   12946:	d1e3      	bne.n	12910 <find_bitmap+0x3e>
   12948:	f108 0002 	add.w	r0, r8, #2
   1294c:	e003      	b.n	12956 <find_bitmap+0x84>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
   1294e:	f04f 30ff 	mov.w	r0, #4294967295
   12952:	e000      	b.n	12956 <find_bitmap+0x84>
				if (val == clst) return 0;	/* All cluster scanned? */
   12954:	2000      	movs	r0, #0
}
   12956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001295a <change_bitmap>:
{
   1295a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1295e:	4606      	mov	r6, r0
   12960:	4617      	mov	r7, r2
   12962:	4698      	mov	r8, r3
	clst -= 2;	/* The first bit corresponds to cluster #2 */
   12964:	1e8c      	subs	r4, r1, #2
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
   12966:	6b41      	ldr	r1, [r0, #52]	; 0x34
   12968:	eb01 3114 	add.w	r1, r1, r4, lsr #12
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
   1296c:	f3c4 05c8 	ubfx	r5, r4, #3, #9
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
   12970:	f004 0407 	and.w	r4, r4, #7
   12974:	2301      	movs	r3, #1
   12976:	fa03 f404 	lsl.w	r4, r3, r4
   1297a:	b2e4      	uxtb	r4, r4
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
   1297c:	f101 0901 	add.w	r9, r1, #1
   12980:	4630      	mov	r0, r6
   12982:	f7ff ff53 	bl	1282c <move_window>
   12986:	4602      	mov	r2, r0
   12988:	b110      	cbz	r0, 12990 <change_bitmap+0x36>
   1298a:	2201      	movs	r2, #1
   1298c:	e01e      	b.n	129cc <change_bitmap+0x72>
			bm = 1;
   1298e:	2401      	movs	r4, #1
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
   12990:	1973      	adds	r3, r6, r5
   12992:	f893 103c 	ldrb.w	r1, [r3, #60]	; 0x3c
   12996:	4221      	tst	r1, r4
   12998:	bf14      	ite	ne
   1299a:	2301      	movne	r3, #1
   1299c:	2300      	moveq	r3, #0
   1299e:	4543      	cmp	r3, r8
   129a0:	d013      	beq.n	129ca <change_bitmap+0x70>
				fs->win[i] ^= bm;	/* Flip the bit */
   129a2:	1973      	adds	r3, r6, r5
   129a4:	4061      	eors	r1, r4
   129a6:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
				fs->wflag = 1;
   129aa:	2301      	movs	r3, #1
   129ac:	70f3      	strb	r3, [r6, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
   129ae:	3f01      	subs	r7, #1
   129b0:	d00c      	beq.n	129cc <change_bitmap+0x72>
			} while (bm <<= 1);		/* Next bit */
   129b2:	409c      	lsls	r4, r3
   129b4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   129b8:	d1ea      	bne.n	12990 <change_bitmap+0x36>
		} while (++i < SS(fs));		/* Next byte */
   129ba:	441d      	add	r5, r3
			bm = 1;
   129bc:	461c      	mov	r4, r3
		} while (++i < SS(fs));		/* Next byte */
   129be:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   129c2:	d3e4      	bcc.n	1298e <change_bitmap+0x34>
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
   129c4:	4649      	mov	r1, r9
		i = 0;
   129c6:	2500      	movs	r5, #0
   129c8:	e7d8      	b.n	1297c <change_bitmap+0x22>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
   129ca:	2202      	movs	r2, #2
}
   129cc:	4610      	mov	r0, r2
   129ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000129d2 <put_fat>:
{
   129d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
   129d6:	2901      	cmp	r1, #1
   129d8:	f240 8087 	bls.w	12aea <put_fat+0x118>
   129dc:	4605      	mov	r5, r0
   129de:	460c      	mov	r4, r1
   129e0:	4616      	mov	r6, r2
   129e2:	69c3      	ldr	r3, [r0, #28]
   129e4:	428b      	cmp	r3, r1
   129e6:	f240 8084 	bls.w	12af2 <put_fat+0x120>
		switch (fs->fs_type) {
   129ea:	7803      	ldrb	r3, [r0, #0]
   129ec:	2b02      	cmp	r3, #2
   129ee:	d069      	beq.n	12ac4 <put_fat+0xf2>
   129f0:	d836      	bhi.n	12a60 <put_fat+0x8e>
   129f2:	2b01      	cmp	r3, #1
   129f4:	d132      	bne.n	12a5c <put_fat+0x8a>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
   129f6:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   129fa:	6a81      	ldr	r1, [r0, #40]	; 0x28
   129fc:	eb01 2158 	add.w	r1, r1, r8, lsr #9
   12a00:	f7ff ff14 	bl	1282c <move_window>
			if (res != FR_OK) break;
   12a04:	4607      	mov	r7, r0
   12a06:	2800      	cmp	r0, #0
   12a08:	d170      	bne.n	12aec <put_fat+0x11a>
			p = fs->win + bc++ % SS(fs);
   12a0a:	f105 0a3c 	add.w	sl, r5, #60	; 0x3c
   12a0e:	f108 0901 	add.w	r9, r8, #1
   12a12:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
   12a16:	f014 0401 	ands.w	r4, r4, #1
   12a1a:	d048      	beq.n	12aae <put_fat+0xdc>
   12a1c:	f91a 3008 	ldrsb.w	r3, [sl, r8]
   12a20:	f003 030f 	and.w	r3, r3, #15
   12a24:	0132      	lsls	r2, r6, #4
   12a26:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   12a2a:	4313      	orrs	r3, r2
   12a2c:	b2db      	uxtb	r3, r3
   12a2e:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
   12a32:	2301      	movs	r3, #1
   12a34:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12a36:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   12a38:	eb01 2159 	add.w	r1, r1, r9, lsr #9
   12a3c:	4628      	mov	r0, r5
   12a3e:	f7ff fef5 	bl	1282c <move_window>
			if (res != FR_OK) break;
   12a42:	4607      	mov	r7, r0
   12a44:	2800      	cmp	r0, #0
   12a46:	d151      	bne.n	12aec <put_fat+0x11a>
			p = fs->win + bc % SS(fs);
   12a48:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
   12a4c:	b38c      	cbz	r4, 12ab2 <put_fat+0xe0>
   12a4e:	f3c6 1607 	ubfx	r6, r6, #4, #8
   12a52:	f80a 6009 	strb.w	r6, [sl, r9]
			fs->wflag = 1;
   12a56:	2301      	movs	r3, #1
   12a58:	70eb      	strb	r3, [r5, #3]
			break;
   12a5a:	e047      	b.n	12aec <put_fat+0x11a>
		switch (fs->fs_type) {
   12a5c:	2702      	movs	r7, #2
   12a5e:	e045      	b.n	12aec <put_fat+0x11a>
   12a60:	3b03      	subs	r3, #3
   12a62:	b2db      	uxtb	r3, r3
   12a64:	2b01      	cmp	r3, #1
   12a66:	d846      	bhi.n	12af6 <put_fat+0x124>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   12a68:	6a81      	ldr	r1, [r0, #40]	; 0x28
   12a6a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   12a6e:	f7ff fedd 	bl	1282c <move_window>
			if (res != FR_OK) break;
   12a72:	4607      	mov	r7, r0
   12a74:	bbd0      	cbnz	r0, 12aec <put_fat+0x11a>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
   12a76:	782b      	ldrb	r3, [r5, #0]
   12a78:	2b04      	cmp	r3, #4
   12a7a:	d00c      	beq.n	12a96 <put_fat+0xc4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
   12a7c:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
   12a80:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   12a84:	00a3      	lsls	r3, r4, #2
   12a86:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
   12a8a:	4418      	add	r0, r3
   12a8c:	f7ff fdbb 	bl	12606 <ld_dword>
   12a90:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
   12a94:	4306      	orrs	r6, r0
			st_dword(fs->win + clst * 4 % SS(fs), val);
   12a96:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   12a9a:	00a4      	lsls	r4, r4, #2
   12a9c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
   12aa0:	4631      	mov	r1, r6
   12aa2:	4420      	add	r0, r4
   12aa4:	f7ff fde5 	bl	12672 <st_dword>
			fs->wflag = 1;
   12aa8:	2301      	movs	r3, #1
   12aaa:	70eb      	strb	r3, [r5, #3]
			break;
   12aac:	e01e      	b.n	12aec <put_fat+0x11a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
   12aae:	b2f3      	uxtb	r3, r6
   12ab0:	e7bd      	b.n	12a2e <put_fat+0x5c>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
   12ab2:	f91a 3009 	ldrsb.w	r3, [sl, r9]
   12ab6:	f023 030f 	bic.w	r3, r3, #15
   12aba:	f3c6 2603 	ubfx	r6, r6, #8, #4
   12abe:	431e      	orrs	r6, r3
   12ac0:	b2f6      	uxtb	r6, r6
   12ac2:	e7c6      	b.n	12a52 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   12ac4:	6a81      	ldr	r1, [r0, #40]	; 0x28
   12ac6:	eb01 2114 	add.w	r1, r1, r4, lsr #8
   12aca:	f7ff feaf 	bl	1282c <move_window>
			if (res != FR_OK) break;
   12ace:	4607      	mov	r7, r0
   12ad0:	b960      	cbnz	r0, 12aec <put_fat+0x11a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
   12ad2:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   12ad6:	0064      	lsls	r4, r4, #1
   12ad8:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
   12adc:	b2b1      	uxth	r1, r6
   12ade:	4420      	add	r0, r4
   12ae0:	f7ff fdc3 	bl	1266a <st_word>
			fs->wflag = 1;
   12ae4:	2301      	movs	r3, #1
   12ae6:	70eb      	strb	r3, [r5, #3]
			break;
   12ae8:	e000      	b.n	12aec <put_fat+0x11a>
	FRESULT res = FR_INT_ERR;
   12aea:	2702      	movs	r7, #2
}
   12aec:	4638      	mov	r0, r7
   12aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	FRESULT res = FR_INT_ERR;
   12af2:	2702      	movs	r7, #2
   12af4:	e7fa      	b.n	12aec <put_fat+0x11a>
		switch (fs->fs_type) {
   12af6:	2702      	movs	r7, #2
   12af8:	e7f8      	b.n	12aec <put_fat+0x11a>

00012afa <fill_last_frag>:
{
   12afa:	b570      	push	{r4, r5, r6, lr}
   12afc:	4604      	mov	r4, r0
   12afe:	460d      	mov	r5, r1
   12b00:	4616      	mov	r6, r2
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
   12b02:	e007      	b.n	12b14 <fill_last_frag+0x1a>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
   12b04:	4632      	mov	r2, r6
   12b06:	f7ff ff64 	bl	129d2 <put_fat>
		if (res != FR_OK) return res;
   12b0a:	4603      	mov	r3, r0
   12b0c:	b958      	cbnz	r0, 12b26 <fill_last_frag+0x2c>
		obj->n_frag--;
   12b0e:	69e3      	ldr	r3, [r4, #28]
   12b10:	3b01      	subs	r3, #1
   12b12:	61e3      	str	r3, [r4, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
   12b14:	69e3      	ldr	r3, [r4, #28]
   12b16:	b133      	cbz	r3, 12b26 <fill_last_frag+0x2c>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
   12b18:	6820      	ldr	r0, [r4, #0]
   12b1a:	1aea      	subs	r2, r5, r3
   12b1c:	1c51      	adds	r1, r2, #1
   12b1e:	2b01      	cmp	r3, #1
   12b20:	d9f0      	bls.n	12b04 <fill_last_frag+0xa>
   12b22:	3202      	adds	r2, #2
   12b24:	e7ef      	b.n	12b06 <fill_last_frag+0xc>
}
   12b26:	4618      	mov	r0, r3
   12b28:	bd70      	pop	{r4, r5, r6, pc}

00012b2a <fill_first_frag>:
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
   12b2a:	79c3      	ldrb	r3, [r0, #7]
   12b2c:	2b03      	cmp	r3, #3
   12b2e:	d002      	beq.n	12b36 <fill_first_frag+0xc>
	return FR_OK;
   12b30:	2300      	movs	r3, #0
}
   12b32:	4618      	mov	r0, r3
   12b34:	4770      	bx	lr
{
   12b36:	b570      	push	{r4, r5, r6, lr}
   12b38:	4606      	mov	r6, r0
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
   12b3a:	6881      	ldr	r1, [r0, #8]
   12b3c:	6984      	ldr	r4, [r0, #24]
   12b3e:	b14c      	cbz	r4, 12b54 <fill_first_frag+0x2a>
			res = put_fat(obj->fs, cl, cl + 1);
   12b40:	1c4d      	adds	r5, r1, #1
   12b42:	462a      	mov	r2, r5
   12b44:	6830      	ldr	r0, [r6, #0]
   12b46:	f7ff ff44 	bl	129d2 <put_fat>
			if (res != FR_OK) return res;
   12b4a:	4603      	mov	r3, r0
   12b4c:	b920      	cbnz	r0, 12b58 <fill_first_frag+0x2e>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
   12b4e:	3c01      	subs	r4, #1
   12b50:	4629      	mov	r1, r5
   12b52:	e7f4      	b.n	12b3e <fill_first_frag+0x14>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
   12b54:	2300      	movs	r3, #0
   12b56:	71f3      	strb	r3, [r6, #7]
}
   12b58:	4618      	mov	r0, r3
   12b5a:	bd70      	pop	{r4, r5, r6, pc}

00012b5c <get_fat>:
{
   12b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
   12b5e:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
   12b60:	2901      	cmp	r1, #1
   12b62:	f240 8099 	bls.w	12c98 <get_fat+0x13c>
   12b66:	460c      	mov	r4, r1
   12b68:	69eb      	ldr	r3, [r5, #28]
   12b6a:	428b      	cmp	r3, r1
   12b6c:	f240 8096 	bls.w	12c9c <get_fat+0x140>
		switch (fs->fs_type) {
   12b70:	782b      	ldrb	r3, [r5, #0]
   12b72:	3b01      	subs	r3, #1
   12b74:	2b03      	cmp	r3, #3
   12b76:	f200 8093 	bhi.w	12ca0 <get_fat+0x144>
   12b7a:	e8df f003 	tbb	[pc, r3]
   12b7e:	2b02      	.short	0x2b02
   12b80:	4f3c      	.short	0x4f3c
			bc = (UINT)clst; bc += bc / 2;
   12b82:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   12b86:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   12b88:	eb01 2156 	add.w	r1, r1, r6, lsr #9
   12b8c:	4628      	mov	r0, r5
   12b8e:	f7ff fe4d 	bl	1282c <move_window>
   12b92:	b110      	cbz	r0, 12b9a <get_fat+0x3e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
   12b94:	f04f 30ff 	mov.w	r0, #4294967295
   12b98:	e07f      	b.n	12c9a <get_fat+0x13e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
   12b9a:	1c77      	adds	r7, r6, #1
   12b9c:	f3c6 0608 	ubfx	r6, r6, #0, #9
   12ba0:	442e      	add	r6, r5
   12ba2:	f896 603c 	ldrb.w	r6, [r6, #60]	; 0x3c
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   12ba6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   12ba8:	eb01 2157 	add.w	r1, r1, r7, lsr #9
   12bac:	4628      	mov	r0, r5
   12bae:	f7ff fe3d 	bl	1282c <move_window>
   12bb2:	2800      	cmp	r0, #0
   12bb4:	d176      	bne.n	12ca4 <get_fat+0x148>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
   12bb6:	f3c7 0008 	ubfx	r0, r7, #0, #9
   12bba:	4428      	add	r0, r5
   12bbc:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
   12bc0:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
   12bc4:	f014 0f01 	tst.w	r4, #1
   12bc8:	d001      	beq.n	12bce <get_fat+0x72>
   12bca:	0900      	lsrs	r0, r0, #4
   12bcc:	e065      	b.n	12c9a <get_fat+0x13e>
   12bce:	f3c0 000b 	ubfx	r0, r0, #0, #12
   12bd2:	e062      	b.n	12c9a <get_fat+0x13e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
   12bd4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   12bd6:	eb01 2114 	add.w	r1, r1, r4, lsr #8
   12bda:	4628      	mov	r0, r5
   12bdc:	f7ff fe26 	bl	1282c <move_window>
   12be0:	2800      	cmp	r0, #0
   12be2:	d162      	bne.n	12caa <get_fat+0x14e>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
   12be4:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   12be8:	0064      	lsls	r4, r4, #1
   12bea:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
   12bee:	4420      	add	r0, r4
   12bf0:	f7ff fd04 	bl	125fc <ld_word>
			break;
   12bf4:	e051      	b.n	12c9a <get_fat+0x13e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
   12bf6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   12bf8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   12bfc:	4628      	mov	r0, r5
   12bfe:	f7ff fe15 	bl	1282c <move_window>
   12c02:	2800      	cmp	r0, #0
   12c04:	d154      	bne.n	12cb0 <get_fat+0x154>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
   12c06:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   12c0a:	00a4      	lsls	r4, r4, #2
   12c0c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
   12c10:	4420      	add	r0, r4
   12c12:	f7ff fcf8 	bl	12606 <ld_dword>
   12c16:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
   12c1a:	e03e      	b.n	12c9a <get_fat+0x13e>
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
   12c1c:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   12c20:	ea56 0307 	orrs.w	r3, r6, r7
   12c24:	d001      	beq.n	12c2a <get_fat+0xce>
   12c26:	6883      	ldr	r3, [r0, #8]
   12c28:	b913      	cbnz	r3, 12c30 <get_fat+0xd4>
   12c2a:	79c3      	ldrb	r3, [r0, #7]
   12c2c:	2b00      	cmp	r3, #0
   12c2e:	d142      	bne.n	12cb6 <get_fat+0x15a>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
   12c30:	6883      	ldr	r3, [r0, #8]
   12c32:	1ae2      	subs	r2, r4, r3
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
   12c34:	f116 33ff 	adds.w	r3, r6, #4294967295
   12c38:	f147 31ff 	adc.w	r1, r7, #4294967295
   12c3c:	0a5b      	lsrs	r3, r3, #9
   12c3e:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
   12c42:	8969      	ldrh	r1, [r5, #10]
   12c44:	fbb3 f3f1 	udiv	r3, r3, r1
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
   12c48:	79c1      	ldrb	r1, [r0, #7]
   12c4a:	2902      	cmp	r1, #2
   12c4c:	d008      	beq.n	12c60 <get_fat+0x104>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
   12c4e:	2903      	cmp	r1, #3
   12c50:	d00b      	beq.n	12c6a <get_fat+0x10e>
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
   12c52:	2902      	cmp	r1, #2
   12c54:	d034      	beq.n	12cc0 <get_fat+0x164>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
   12c56:	69c3      	ldr	r3, [r0, #28]
   12c58:	b163      	cbz	r3, 12c74 <get_fat+0x118>
						val = 0x7FFFFFFF;	/* Generate EOC */
   12c5a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   12c5e:	e01c      	b.n	12c9a <get_fat+0x13e>
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
   12c60:	429a      	cmp	r2, r3
   12c62:	d8f4      	bhi.n	12c4e <get_fat+0xf2>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
   12c64:	d029      	beq.n	12cba <get_fat+0x15e>
   12c66:	1c60      	adds	r0, r4, #1
   12c68:	e017      	b.n	12c9a <get_fat+0x13e>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
   12c6a:	6983      	ldr	r3, [r0, #24]
   12c6c:	4293      	cmp	r3, r2
   12c6e:	d9f0      	bls.n	12c52 <get_fat+0xf6>
					val = clst + 1; 	/* Generate the value */
   12c70:	1c60      	adds	r0, r4, #1
					break;
   12c72:	e012      	b.n	12c9a <get_fat+0x13e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
   12c74:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   12c76:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   12c7a:	4628      	mov	r0, r5
   12c7c:	f7ff fdd6 	bl	1282c <move_window>
   12c80:	bb00      	cbnz	r0, 12cc4 <get_fat+0x168>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
   12c82:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   12c86:	00a3      	lsls	r3, r4, #2
   12c88:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
   12c8c:	4418      	add	r0, r3
   12c8e:	f7ff fcba 	bl	12606 <ld_dword>
   12c92:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   12c96:	e000      	b.n	12c9a <get_fat+0x13e>
		val = 1;	/* Internal error */
   12c98:	2001      	movs	r0, #1
}
   12c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
   12c9c:	2001      	movs	r0, #1
   12c9e:	e7fc      	b.n	12c9a <get_fat+0x13e>
		switch (fs->fs_type) {
   12ca0:	2001      	movs	r0, #1
   12ca2:	e7fa      	b.n	12c9a <get_fat+0x13e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
   12ca4:	f04f 30ff 	mov.w	r0, #4294967295
   12ca8:	e7f7      	b.n	12c9a <get_fat+0x13e>
   12caa:	f04f 30ff 	mov.w	r0, #4294967295
   12cae:	e7f4      	b.n	12c9a <get_fat+0x13e>
   12cb0:	f04f 30ff 	mov.w	r0, #4294967295
   12cb4:	e7f1      	b.n	12c9a <get_fat+0x13e>
			val = 1;	/* Internal error */
   12cb6:	2001      	movs	r0, #1
   12cb8:	e7ef      	b.n	12c9a <get_fat+0x13e>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
   12cba:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   12cbe:	e7ec      	b.n	12c9a <get_fat+0x13e>
			val = 1;	/* Internal error */
   12cc0:	2001      	movs	r0, #1
   12cc2:	e7ea      	b.n	12c9a <get_fat+0x13e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
   12cc4:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
   12cc8:	e7e7      	b.n	12c9a <get_fat+0x13e>

00012cca <dir_sdi>:
{
   12cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12cce:	4606      	mov	r6, r0
   12cd0:	460f      	mov	r7, r1
	FATFS *fs = dp->obj.fs;
   12cd2:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
   12cd6:	f898 3000 	ldrb.w	r3, [r8]
   12cda:	2b04      	cmp	r3, #4
   12cdc:	d029      	beq.n	12d32 <dir_sdi+0x68>
   12cde:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   12ce2:	42bb      	cmp	r3, r7
   12ce4:	d945      	bls.n	12d72 <dir_sdi+0xa8>
   12ce6:	f017 0f1f 	tst.w	r7, #31
   12cea:	d144      	bne.n	12d76 <dir_sdi+0xac>
	dp->dptr = ofs;				/* Set current offset */
   12cec:	6337      	str	r7, [r6, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
   12cee:	68b4      	ldr	r4, [r6, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
   12cf0:	b93c      	cbnz	r4, 12d02 <dir_sdi+0x38>
   12cf2:	f898 3000 	ldrb.w	r3, [r8]
   12cf6:	2b02      	cmp	r3, #2
   12cf8:	d903      	bls.n	12d02 <dir_sdi+0x38>
		clst = (DWORD)fs->dirbase;
   12cfa:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
   12cfe:	2300      	movs	r3, #0
   12d00:	71f3      	strb	r3, [r6, #7]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
   12d02:	b9cc      	cbnz	r4, 12d38 <dir_sdi+0x6e>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
   12d04:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   12d08:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
   12d0c:	d935      	bls.n	12d7a <dir_sdi+0xb0>
		dp->sect = fs->dirbase;
   12d0e:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
   12d12:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->clust = clst;					/* Current cluster# */
   12d14:	6374      	str	r4, [r6, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
   12d16:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   12d18:	b3ab      	cbz	r3, 12d86 <dir_sdi+0xbc>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
   12d1a:	eb03 2357 	add.w	r3, r3, r7, lsr #9
   12d1e:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
   12d20:	f108 033c 	add.w	r3, r8, #60	; 0x3c
   12d24:	f3c7 0108 	ubfx	r1, r7, #0, #9
   12d28:	4419      	add	r1, r3
   12d2a:	63f1      	str	r1, [r6, #60]	; 0x3c
	return FR_OK;
   12d2c:	2000      	movs	r0, #0
}
   12d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
   12d32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   12d36:	e7d4      	b.n	12ce2 <dir_sdi+0x18>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
   12d38:	f8b8 500a 	ldrh.w	r5, [r8, #10]
   12d3c:	026d      	lsls	r5, r5, #9
		while (ofs >= csz) {				/* Follow cluster chain */
   12d3e:	e000      	b.n	12d42 <dir_sdi+0x78>
			ofs -= csz;
   12d40:	1b7f      	subs	r7, r7, r5
		while (ofs >= csz) {				/* Follow cluster chain */
   12d42:	42af      	cmp	r7, r5
   12d44:	d30f      	bcc.n	12d66 <dir_sdi+0x9c>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
   12d46:	4621      	mov	r1, r4
   12d48:	4630      	mov	r0, r6
   12d4a:	f7ff ff07 	bl	12b5c <get_fat>
   12d4e:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   12d50:	f1b0 3fff 	cmp.w	r0, #4294967295
   12d54:	d013      	beq.n	12d7e <dir_sdi+0xb4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
   12d56:	2801      	cmp	r0, #1
   12d58:	d913      	bls.n	12d82 <dir_sdi+0xb8>
   12d5a:	f8d8 301c 	ldr.w	r3, [r8, #28]
   12d5e:	4283      	cmp	r3, r0
   12d60:	d8ee      	bhi.n	12d40 <dir_sdi+0x76>
   12d62:	2002      	movs	r0, #2
   12d64:	e7e3      	b.n	12d2e <dir_sdi+0x64>
		dp->sect = clst2sect(fs, clst);
   12d66:	4621      	mov	r1, r4
   12d68:	4640      	mov	r0, r8
   12d6a:	f7ff fca3 	bl	126b4 <clst2sect>
   12d6e:	63b0      	str	r0, [r6, #56]	; 0x38
   12d70:	e7d0      	b.n	12d14 <dir_sdi+0x4a>
		return FR_INT_ERR;
   12d72:	2002      	movs	r0, #2
   12d74:	e7db      	b.n	12d2e <dir_sdi+0x64>
   12d76:	2002      	movs	r0, #2
   12d78:	e7d9      	b.n	12d2e <dir_sdi+0x64>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
   12d7a:	2002      	movs	r0, #2
   12d7c:	e7d7      	b.n	12d2e <dir_sdi+0x64>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   12d7e:	2001      	movs	r0, #1
   12d80:	e7d5      	b.n	12d2e <dir_sdi+0x64>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
   12d82:	2002      	movs	r0, #2
   12d84:	e7d3      	b.n	12d2e <dir_sdi+0x64>
	if (dp->sect == 0) return FR_INT_ERR;
   12d86:	2002      	movs	r0, #2
   12d88:	e7d1      	b.n	12d2e <dir_sdi+0x64>

00012d8a <create_chain>:
{
   12d8a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12d8e:	4607      	mov	r7, r0
	FATFS *fs = obj->fs;
   12d90:	f8d0 8000 	ldr.w	r8, [r0]
	if (clst == 0) {	/* Create a new chain */
   12d94:	4689      	mov	r9, r1
   12d96:	b941      	cbnz	r1, 12daa <create_chain+0x20>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
   12d98:	f8d8 6014 	ldr.w	r6, [r8, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
   12d9c:	b1b6      	cbz	r6, 12dcc <create_chain+0x42>
   12d9e:	f8d8 301c 	ldr.w	r3, [r8, #28]
   12da2:	42b3      	cmp	r3, r6
   12da4:	d813      	bhi.n	12dce <create_chain+0x44>
   12da6:	2601      	movs	r6, #1
   12da8:	e011      	b.n	12dce <create_chain+0x44>
		cs = get_fat(obj, clst);			/* Check the cluster status */
   12daa:	f7ff fed7 	bl	12b5c <get_fat>
   12dae:	4605      	mov	r5, r0
		if (cs < 2) return 1;				/* Test for insanity */
   12db0:	2801      	cmp	r0, #1
   12db2:	f240 80c8 	bls.w	12f46 <create_chain+0x1bc>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
   12db6:	f1b0 3fff 	cmp.w	r0, #4294967295
   12dba:	f000 80c5 	beq.w	12f48 <create_chain+0x1be>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   12dbe:	f8d8 301c 	ldr.w	r3, [r8, #28]
   12dc2:	4283      	cmp	r3, r0
   12dc4:	f200 80c0 	bhi.w	12f48 <create_chain+0x1be>
		scl = clst;							/* Cluster to start to find */
   12dc8:	464e      	mov	r6, r9
   12dca:	e000      	b.n	12dce <create_chain+0x44>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
   12dcc:	2601      	movs	r6, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
   12dce:	f8d8 5018 	ldr.w	r5, [r8, #24]
   12dd2:	2d00      	cmp	r5, #0
   12dd4:	f000 80b8 	beq.w	12f48 <create_chain+0x1be>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
   12dd8:	f898 3000 	ldrb.w	r3, [r8]
   12ddc:	2b04      	cmp	r3, #4
   12dde:	d003      	beq.n	12de8 <create_chain+0x5e>
		if (scl == clst) {						/* Stretching an existing chain? */
   12de0:	454e      	cmp	r6, r9
   12de2:	d04a      	beq.n	12e7a <create_chain+0xf0>
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
   12de4:	4634      	mov	r4, r6
   12de6:	e093      	b.n	12f10 <create_chain+0x186>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
   12de8:	2201      	movs	r2, #1
   12dea:	4631      	mov	r1, r6
   12dec:	4640      	mov	r0, r8
   12dee:	f7ff fd70 	bl	128d2 <find_bitmap>
   12df2:	4605      	mov	r5, r0
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
   12df4:	1e43      	subs	r3, r0, #1
   12df6:	f113 0f03 	cmn.w	r3, #3
   12dfa:	f200 80a5 	bhi.w	12f48 <create_chain+0x1be>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
   12dfe:	2301      	movs	r3, #1
   12e00:	461a      	mov	r2, r3
   12e02:	4601      	mov	r1, r0
   12e04:	4640      	mov	r0, r8
   12e06:	f7ff fda8 	bl	1295a <change_bitmap>
   12e0a:	4603      	mov	r3, r0
		if (res == FR_INT_ERR) return 1;
   12e0c:	2802      	cmp	r0, #2
   12e0e:	f000 809e 	beq.w	12f4e <create_chain+0x1c4>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
   12e12:	2801      	cmp	r0, #1
   12e14:	f000 809d 	beq.w	12f52 <create_chain+0x1c8>
		if (clst == 0) {							/* Is it a new chain? */
   12e18:	f1b9 0f00 	cmp.w	r9, #0
   12e1c:	d119      	bne.n	12e52 <create_chain+0xc8>
			obj->stat = 2;							/* Set status 'contiguous' */
   12e1e:	2202      	movs	r2, #2
   12e20:	71fa      	strb	r2, [r7, #7]
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
   12e22:	79fa      	ldrb	r2, [r7, #7]
   12e24:	2a02      	cmp	r2, #2
   12e26:	f000 8083 	beq.w	12f30 <create_chain+0x1a6>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
   12e2a:	f109 0201 	add.w	r2, r9, #1
   12e2e:	42aa      	cmp	r2, r5
   12e30:	d01b      	beq.n	12e6a <create_chain+0xe0>
				if (obj->n_frag == 0) obj->n_frag = 1;
   12e32:	69fb      	ldr	r3, [r7, #28]
   12e34:	b90b      	cbnz	r3, 12e3a <create_chain+0xb0>
   12e36:	2301      	movs	r3, #1
   12e38:	61fb      	str	r3, [r7, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
   12e3a:	462a      	mov	r2, r5
   12e3c:	4649      	mov	r1, r9
   12e3e:	4638      	mov	r0, r7
   12e40:	f7ff fe5b 	bl	12afa <fill_last_frag>
				if (res == FR_OK) obj->n_frag = 1;
   12e44:	4603      	mov	r3, r0
   12e46:	2800      	cmp	r0, #0
   12e48:	d174      	bne.n	12f34 <create_chain+0x1aa>
   12e4a:	2201      	movs	r2, #1
   12e4c:	61fa      	str	r2, [r7, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
   12e4e:	462c      	mov	r4, r5
   12e50:	e03b      	b.n	12eca <create_chain+0x140>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
   12e52:	79fa      	ldrb	r2, [r7, #7]
   12e54:	2a02      	cmp	r2, #2
   12e56:	d1e4      	bne.n	12e22 <create_chain+0x98>
   12e58:	1c72      	adds	r2, r6, #1
   12e5a:	42aa      	cmp	r2, r5
   12e5c:	d0e1      	beq.n	12e22 <create_chain+0x98>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
   12e5e:	68ba      	ldr	r2, [r7, #8]
   12e60:	1ab2      	subs	r2, r6, r2
   12e62:	61ba      	str	r2, [r7, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
   12e64:	2203      	movs	r2, #3
   12e66:	71fa      	strb	r2, [r7, #7]
   12e68:	e7db      	b.n	12e22 <create_chain+0x98>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
   12e6a:	69fa      	ldr	r2, [r7, #28]
   12e6c:	b11a      	cbz	r2, 12e76 <create_chain+0xec>
   12e6e:	3201      	adds	r2, #1
   12e70:	61fa      	str	r2, [r7, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
   12e72:	462c      	mov	r4, r5
   12e74:	e029      	b.n	12eca <create_chain+0x140>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
   12e76:	2202      	movs	r2, #2
   12e78:	e7fa      	b.n	12e70 <create_chain+0xe6>
			ncl = scl + 1;						/* Test if next cluster is free */
   12e7a:	1c74      	adds	r4, r6, #1
			if (ncl >= fs->n_fatent) ncl = 2;
   12e7c:	f8d8 301c 	ldr.w	r3, [r8, #28]
   12e80:	42a3      	cmp	r3, r4
   12e82:	d800      	bhi.n	12e86 <create_chain+0xfc>
   12e84:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
   12e86:	4621      	mov	r1, r4
   12e88:	4638      	mov	r0, r7
   12e8a:	f7ff fe67 	bl	12b5c <get_fat>
   12e8e:	4605      	mov	r5, r0
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
   12e90:	2801      	cmp	r0, #1
   12e92:	d059      	beq.n	12f48 <create_chain+0x1be>
   12e94:	f1b0 3fff 	cmp.w	r0, #4294967295
   12e98:	d056      	beq.n	12f48 <create_chain+0x1be>
			if (cs != 0) {						/* Not free? */
   12e9a:	b148      	cbz	r0, 12eb0 <create_chain+0x126>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
   12e9c:	f8d8 3014 	ldr.w	r3, [r8, #20]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
   12ea0:	2b01      	cmp	r3, #1
   12ea2:	d99f      	bls.n	12de4 <create_chain+0x5a>
   12ea4:	f8d8 201c 	ldr.w	r2, [r8, #28]
   12ea8:	429a      	cmp	r2, r3
   12eaa:	d99b      	bls.n	12de4 <create_chain+0x5a>
   12eac:	461e      	mov	r6, r3
   12eae:	e799      	b.n	12de4 <create_chain+0x5a>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
   12eb0:	2c00      	cmp	r4, #0
   12eb2:	d097      	beq.n	12de4 <create_chain+0x5a>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
   12eb4:	f04f 32ff 	mov.w	r2, #4294967295
   12eb8:	4621      	mov	r1, r4
   12eba:	4640      	mov	r0, r8
   12ebc:	f7ff fd89 	bl	129d2 <put_fat>
		if (res == FR_OK && clst != 0) {
   12ec0:	4603      	mov	r3, r0
   12ec2:	b910      	cbnz	r0, 12eca <create_chain+0x140>
   12ec4:	f1b9 0f00 	cmp.w	r9, #0
   12ec8:	d12b      	bne.n	12f22 <create_chain+0x198>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
   12eca:	bbab      	cbnz	r3, 12f38 <create_chain+0x1ae>
		fs->last_clst = ncl;
   12ecc:	f8c8 4014 	str.w	r4, [r8, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
   12ed0:	f8d8 2018 	ldr.w	r2, [r8, #24]
   12ed4:	f8d8 301c 	ldr.w	r3, [r8, #28]
   12ed8:	3b02      	subs	r3, #2
   12eda:	429a      	cmp	r2, r3
   12edc:	d802      	bhi.n	12ee4 <create_chain+0x15a>
   12ede:	3a01      	subs	r2, #1
   12ee0:	f8c8 2018 	str.w	r2, [r8, #24]
		fs->fsi_flag |= 1;
   12ee4:	f898 3004 	ldrb.w	r3, [r8, #4]
   12ee8:	f043 0301 	orr.w	r3, r3, #1
   12eec:	f888 3004 	strb.w	r3, [r8, #4]
   12ef0:	4625      	mov	r5, r4
   12ef2:	e029      	b.n	12f48 <create_chain+0x1be>
				cs = get_fat(obj, ncl);			/* Get the cluster status */
   12ef4:	4621      	mov	r1, r4
   12ef6:	4638      	mov	r0, r7
   12ef8:	f7ff fe30 	bl	12b5c <get_fat>
				if (cs == 0) break;				/* Found a free cluster? */
   12efc:	4605      	mov	r5, r0
   12efe:	2800      	cmp	r0, #0
   12f00:	d0d8      	beq.n	12eb4 <create_chain+0x12a>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
   12f02:	2801      	cmp	r0, #1
   12f04:	d020      	beq.n	12f48 <create_chain+0x1be>
   12f06:	f1b0 3fff 	cmp.w	r0, #4294967295
   12f0a:	d01d      	beq.n	12f48 <create_chain+0x1be>
				if (ncl == scl) return 0;		/* No free cluster found? */
   12f0c:	42b4      	cmp	r4, r6
   12f0e:	d025      	beq.n	12f5c <create_chain+0x1d2>
				ncl++;							/* Next cluster */
   12f10:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
   12f12:	f8d8 301c 	ldr.w	r3, [r8, #28]
   12f16:	42a3      	cmp	r3, r4
   12f18:	d8ec      	bhi.n	12ef4 <create_chain+0x16a>
					if (ncl > scl) return 0;	/* No free cluster found? */
   12f1a:	2e01      	cmp	r6, #1
   12f1c:	d91c      	bls.n	12f58 <create_chain+0x1ce>
					ncl = 2;
   12f1e:	2402      	movs	r4, #2
   12f20:	e7e8      	b.n	12ef4 <create_chain+0x16a>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
   12f22:	4622      	mov	r2, r4
   12f24:	4649      	mov	r1, r9
   12f26:	4640      	mov	r0, r8
   12f28:	f7ff fd53 	bl	129d2 <put_fat>
   12f2c:	4603      	mov	r3, r0
   12f2e:	e7cc      	b.n	12eca <create_chain+0x140>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
   12f30:	462c      	mov	r4, r5
   12f32:	e7ca      	b.n	12eca <create_chain+0x140>
   12f34:	462c      	mov	r4, r5
   12f36:	e7c8      	b.n	12eca <create_chain+0x140>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
   12f38:	2b01      	cmp	r3, #1
   12f3a:	d001      	beq.n	12f40 <create_chain+0x1b6>
   12f3c:	2501      	movs	r5, #1
   12f3e:	e003      	b.n	12f48 <create_chain+0x1be>
   12f40:	f04f 35ff 	mov.w	r5, #4294967295
   12f44:	e000      	b.n	12f48 <create_chain+0x1be>
		if (cs < 2) return 1;				/* Test for insanity */
   12f46:	2501      	movs	r5, #1
}
   12f48:	4628      	mov	r0, r5
   12f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (res == FR_INT_ERR) return 1;
   12f4e:	2501      	movs	r5, #1
   12f50:	e7fa      	b.n	12f48 <create_chain+0x1be>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
   12f52:	f04f 35ff 	mov.w	r5, #4294967295
   12f56:	e7f7      	b.n	12f48 <create_chain+0x1be>
					if (ncl > scl) return 0;	/* No free cluster found? */
   12f58:	2500      	movs	r5, #0
   12f5a:	e7f5      	b.n	12f48 <create_chain+0x1be>
				if (ncl == scl) return 0;		/* No free cluster found? */
   12f5c:	2500      	movs	r5, #0
   12f5e:	e7f3      	b.n	12f48 <create_chain+0x1be>

00012f60 <remove_chain>:
{
   12f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs = obj->fs;
   12f64:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
   12f66:	2901      	cmp	r1, #1
   12f68:	f240 808e 	bls.w	13088 <remove_chain+0x128>
   12f6c:	4607      	mov	r7, r0
   12f6e:	460c      	mov	r4, r1
   12f70:	4691      	mov	r9, r2
   12f72:	69eb      	ldr	r3, [r5, #28]
   12f74:	428b      	cmp	r3, r1
   12f76:	f240 808a 	bls.w	1308e <remove_chain+0x12e>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
   12f7a:	b172      	cbz	r2, 12f9a <remove_chain+0x3a>
   12f7c:	782b      	ldrb	r3, [r5, #0]
   12f7e:	2b04      	cmp	r3, #4
   12f80:	d102      	bne.n	12f88 <remove_chain+0x28>
   12f82:	79c3      	ldrb	r3, [r0, #7]
   12f84:	2b02      	cmp	r3, #2
   12f86:	d008      	beq.n	12f9a <remove_chain+0x3a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
   12f88:	f04f 32ff 	mov.w	r2, #4294967295
   12f8c:	4649      	mov	r1, r9
   12f8e:	4628      	mov	r0, r5
   12f90:	f7ff fd1f 	bl	129d2 <put_fat>
		if (res != FR_OK) return res;
   12f94:	4682      	mov	sl, r0
   12f96:	2800      	cmp	r0, #0
   12f98:	d17b      	bne.n	13092 <remove_chain+0x132>
{
   12f9a:	46a0      	mov	r8, r4
   12f9c:	e011      	b.n	12fc2 <remove_chain+0x62>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
   12f9e:	2200      	movs	r2, #0
   12fa0:	4631      	mov	r1, r6
   12fa2:	4628      	mov	r0, r5
   12fa4:	f7ff fd15 	bl	129d2 <put_fat>
			if (res != FR_OK) return res;
   12fa8:	4682      	mov	sl, r0
   12faa:	b1c8      	cbz	r0, 12fe0 <remove_chain+0x80>
   12fac:	e071      	b.n	13092 <remove_chain+0x132>
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
   12fae:	1c73      	adds	r3, r6, #1
   12fb0:	42a3      	cmp	r3, r4
   12fb2:	d003      	beq.n	12fbc <remove_chain+0x5c>
			if (fs->fs_type == FS_EXFAT) {
   12fb4:	782b      	ldrb	r3, [r5, #0]
   12fb6:	2b04      	cmp	r3, #4
   12fb8:	d01e      	beq.n	12ff8 <remove_chain+0x98>
			scl = ecl = nxt;
   12fba:	46a0      	mov	r8, r4
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
   12fbc:	69eb      	ldr	r3, [r5, #28]
   12fbe:	42a3      	cmp	r3, r4
   12fc0:	d927      	bls.n	13012 <remove_chain+0xb2>
		nxt = get_fat(obj, clst);			/* Get cluster status */
   12fc2:	4626      	mov	r6, r4
   12fc4:	4621      	mov	r1, r4
   12fc6:	4638      	mov	r0, r7
   12fc8:	f7ff fdc8 	bl	12b5c <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
   12fcc:	4604      	mov	r4, r0
   12fce:	b300      	cbz	r0, 13012 <remove_chain+0xb2>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
   12fd0:	2801      	cmp	r0, #1
   12fd2:	d061      	beq.n	13098 <remove_chain+0x138>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
   12fd4:	f1b0 3fff 	cmp.w	r0, #4294967295
   12fd8:	d061      	beq.n	1309e <remove_chain+0x13e>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
   12fda:	782b      	ldrb	r3, [r5, #0]
   12fdc:	2b04      	cmp	r3, #4
   12fde:	d1de      	bne.n	12f9e <remove_chain+0x3e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
   12fe0:	69aa      	ldr	r2, [r5, #24]
   12fe2:	69eb      	ldr	r3, [r5, #28]
   12fe4:	3b02      	subs	r3, #2
   12fe6:	429a      	cmp	r2, r3
   12fe8:	d2e1      	bcs.n	12fae <remove_chain+0x4e>
			fs->free_clst++;
   12fea:	3201      	adds	r2, #1
   12fec:	61aa      	str	r2, [r5, #24]
			fs->fsi_flag |= 1;
   12fee:	792b      	ldrb	r3, [r5, #4]
   12ff0:	f043 0301 	orr.w	r3, r3, #1
   12ff4:	712b      	strb	r3, [r5, #4]
   12ff6:	e7da      	b.n	12fae <remove_chain+0x4e>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
   12ff8:	eba6 0208 	sub.w	r2, r6, r8
   12ffc:	2300      	movs	r3, #0
   12ffe:	3201      	adds	r2, #1
   13000:	4641      	mov	r1, r8
   13002:	4628      	mov	r0, r5
   13004:	f7ff fca9 	bl	1295a <change_bitmap>
				if (res != FR_OK) return res;
   13008:	4682      	mov	sl, r0
   1300a:	2800      	cmp	r0, #0
   1300c:	d141      	bne.n	13092 <remove_chain+0x132>
			scl = ecl = nxt;
   1300e:	46a0      	mov	r8, r4
   13010:	e7d4      	b.n	12fbc <remove_chain+0x5c>
	if (fs->fs_type == FS_EXFAT) {
   13012:	782b      	ldrb	r3, [r5, #0]
   13014:	2b04      	cmp	r3, #4
   13016:	d002      	beq.n	1301e <remove_chain+0xbe>
	return FR_OK;
   13018:	f04f 0a00 	mov.w	sl, #0
   1301c:	e039      	b.n	13092 <remove_chain+0x132>
		if (pclst == 0) {	/* Has the entire chain been removed? */
   1301e:	f1b9 0f00 	cmp.w	r9, #0
   13022:	d104      	bne.n	1302e <remove_chain+0xce>
			obj->stat = 0;		/* Change the chain status 'initial' */
   13024:	f04f 0a00 	mov.w	sl, #0
   13028:	f887 a007 	strb.w	sl, [r7, #7]
   1302c:	e031      	b.n	13092 <remove_chain+0x132>
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
   1302e:	f897 a007 	ldrb.w	sl, [r7, #7]
   13032:	f1ba 0f00 	cmp.w	sl, #0
   13036:	d115      	bne.n	13064 <remove_chain+0x104>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
   13038:	68bc      	ldr	r4, [r7, #8]
				while (clst != pclst) {
   1303a:	454c      	cmp	r4, r9
   1303c:	d00d      	beq.n	1305a <remove_chain+0xfa>
					nxt = get_fat(obj, clst);
   1303e:	4621      	mov	r1, r4
   13040:	4638      	mov	r0, r7
   13042:	f7ff fd8b 	bl	12b5c <get_fat>
					if (nxt < 2) return FR_INT_ERR;
   13046:	2801      	cmp	r0, #1
   13048:	d92c      	bls.n	130a4 <remove_chain+0x144>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
   1304a:	f1b0 3fff 	cmp.w	r0, #4294967295
   1304e:	d02c      	beq.n	130aa <remove_chain+0x14a>
					if (nxt != clst + 1) break;	/* Not contiguous? */
   13050:	1c63      	adds	r3, r4, #1
   13052:	4283      	cmp	r3, r0
   13054:	d101      	bne.n	1305a <remove_chain+0xfa>
					clst++;
   13056:	461c      	mov	r4, r3
   13058:	e7ef      	b.n	1303a <remove_chain+0xda>
				if (clst == pclst) {	/* Has the chain got contiguous again? */
   1305a:	454c      	cmp	r4, r9
   1305c:	d119      	bne.n	13092 <remove_chain+0x132>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
   1305e:	2302      	movs	r3, #2
   13060:	71fb      	strb	r3, [r7, #7]
   13062:	e016      	b.n	13092 <remove_chain+0x132>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
   13064:	f1ba 0f03 	cmp.w	sl, #3
   13068:	d002      	beq.n	13070 <remove_chain+0x110>
	return FR_OK;
   1306a:	f04f 0a00 	mov.w	sl, #0
   1306e:	e010      	b.n	13092 <remove_chain+0x132>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
   13070:	68bb      	ldr	r3, [r7, #8]
   13072:	454b      	cmp	r3, r9
   13074:	d81c      	bhi.n	130b0 <remove_chain+0x150>
   13076:	69ba      	ldr	r2, [r7, #24]
   13078:	4413      	add	r3, r2
   1307a:	454b      	cmp	r3, r9
   1307c:	d31b      	bcc.n	130b6 <remove_chain+0x156>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
   1307e:	2302      	movs	r3, #2
   13080:	71fb      	strb	r3, [r7, #7]
	return FR_OK;
   13082:	f04f 0a00 	mov.w	sl, #0
   13086:	e004      	b.n	13092 <remove_chain+0x132>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
   13088:	f04f 0a02 	mov.w	sl, #2
   1308c:	e001      	b.n	13092 <remove_chain+0x132>
   1308e:	f04f 0a02 	mov.w	sl, #2
}
   13092:	4650      	mov	r0, sl
   13094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
   13098:	f04f 0a02 	mov.w	sl, #2
   1309c:	e7f9      	b.n	13092 <remove_chain+0x132>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
   1309e:	f04f 0a01 	mov.w	sl, #1
   130a2:	e7f6      	b.n	13092 <remove_chain+0x132>
					if (nxt < 2) return FR_INT_ERR;
   130a4:	f04f 0a02 	mov.w	sl, #2
   130a8:	e7f3      	b.n	13092 <remove_chain+0x132>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
   130aa:	f04f 0a01 	mov.w	sl, #1
   130ae:	e7f0      	b.n	13092 <remove_chain+0x132>
	return FR_OK;
   130b0:	f04f 0a00 	mov.w	sl, #0
   130b4:	e7ed      	b.n	13092 <remove_chain+0x132>
   130b6:	f04f 0a00 	mov.w	sl, #0
   130ba:	e7ea      	b.n	13092 <remove_chain+0x132>

000130bc <dir_clear>:
{
   130bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   130be:	4605      	mov	r5, r0
   130c0:	460c      	mov	r4, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
   130c2:	f7ff fb8f 	bl	127e4 <sync_window>
   130c6:	b9f8      	cbnz	r0, 13108 <dir_clear+0x4c>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
   130c8:	4621      	mov	r1, r4
   130ca:	4628      	mov	r0, r5
   130cc:	f7ff faf2 	bl	126b4 <clst2sect>
   130d0:	4606      	mov	r6, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
   130d2:	63a8      	str	r0, [r5, #56]	; 0x38
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
   130d4:	f105 073c 	add.w	r7, r5, #60	; 0x3c
__ssp_bos_icheck3(memset, void *, int)
   130d8:	f44f 7200 	mov.w	r2, #512	; 0x200
   130dc:	2100      	movs	r1, #0
   130de:	4638      	mov	r0, r7
   130e0:	f001 fcbd 	bl	14a5e <memset>
   130e4:	2400      	movs	r4, #0
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
   130e6:	896b      	ldrh	r3, [r5, #10]
   130e8:	42a3      	cmp	r3, r4
   130ea:	d908      	bls.n	130fe <dir_clear+0x42>
   130ec:	2301      	movs	r3, #1
   130ee:	19a2      	adds	r2, r4, r6
   130f0:	4639      	mov	r1, r7
   130f2:	7868      	ldrb	r0, [r5, #1]
   130f4:	f7f8 fac0 	bl	b678 <disk_write>
   130f8:	b908      	cbnz	r0, 130fe <dir_clear+0x42>
   130fa:	3401      	adds	r4, #1
   130fc:	e7f3      	b.n	130e6 <dir_clear+0x2a>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
   130fe:	8968      	ldrh	r0, [r5, #10]
   13100:	1b00      	subs	r0, r0, r4
   13102:	bf18      	it	ne
   13104:	2001      	movne	r0, #1
}
   13106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
   13108:	2001      	movs	r0, #1
   1310a:	e7fc      	b.n	13106 <dir_clear+0x4a>

0001310c <dir_next>:
{
   1310c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13110:	4604      	mov	r4, r0
   13112:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
   13114:	6805      	ldr	r5, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
   13116:	6b06      	ldr	r6, [r0, #48]	; 0x30
   13118:	3620      	adds	r6, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
   1311a:	782b      	ldrb	r3, [r5, #0]
   1311c:	2b04      	cmp	r3, #4
   1311e:	d01a      	beq.n	13156 <dir_next+0x4a>
   13120:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   13124:	42b3      	cmp	r3, r6
   13126:	d801      	bhi.n	1312c <dir_next+0x20>
   13128:	2300      	movs	r3, #0
   1312a:	63a3      	str	r3, [r4, #56]	; 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
   1312c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1312e:	2b00      	cmp	r3, #0
   13130:	d04c      	beq.n	131cc <dir_next+0xc0>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
   13132:	f3c6 0708 	ubfx	r7, r6, #0, #9
   13136:	b93f      	cbnz	r7, 13148 <dir_next+0x3c>
		dp->sect++;				/* Next sector */
   13138:	3301      	adds	r3, #1
   1313a:	63a3      	str	r3, [r4, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
   1313c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1313e:	b989      	cbnz	r1, 13164 <dir_next+0x58>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
   13140:	892b      	ldrh	r3, [r5, #8]
   13142:	ebb3 1f56 	cmp.w	r3, r6, lsr #5
   13146:	d909      	bls.n	1315c <dir_next+0x50>
	dp->dptr = ofs;						/* Current entry */
   13148:	6326      	str	r6, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
   1314a:	353c      	adds	r5, #60	; 0x3c
   1314c:	443d      	add	r5, r7
   1314e:	63e5      	str	r5, [r4, #60]	; 0x3c
	return FR_OK;
   13150:	2000      	movs	r0, #0
}
   13152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
   13156:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1315a:	e7e3      	b.n	13124 <dir_next+0x18>
				dp->sect = 0; return FR_NO_FILE;
   1315c:	2300      	movs	r3, #0
   1315e:	63a3      	str	r3, [r4, #56]	; 0x38
   13160:	2004      	movs	r0, #4
   13162:	e7f6      	b.n	13152 <dir_next+0x46>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
   13164:	896b      	ldrh	r3, [r5, #10]
   13166:	3b01      	subs	r3, #1
   13168:	ea13 2356 	ands.w	r3, r3, r6, lsr #9
   1316c:	d1ec      	bne.n	13148 <dir_next+0x3c>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
   1316e:	4620      	mov	r0, r4
   13170:	f7ff fcf4 	bl	12b5c <get_fat>
   13174:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
   13176:	2801      	cmp	r0, #1
   13178:	d92a      	bls.n	131d0 <dir_next+0xc4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   1317a:	f1b0 3fff 	cmp.w	r0, #4294967295
   1317e:	d029      	beq.n	131d4 <dir_next+0xc8>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
   13180:	69eb      	ldr	r3, [r5, #28]
   13182:	4283      	cmp	r3, r0
   13184:	d816      	bhi.n	131b4 <dir_next+0xa8>
					if (!stretch) {								/* If no stretch, report EOT */
   13186:	f1b8 0f00 	cmp.w	r8, #0
   1318a:	d01b      	beq.n	131c4 <dir_next+0xb8>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
   1318c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1318e:	4620      	mov	r0, r4
   13190:	f7ff fdfb 	bl	12d8a <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   13194:	4681      	mov	r9, r0
   13196:	b1f8      	cbz	r0, 131d8 <dir_next+0xcc>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
   13198:	2801      	cmp	r0, #1
   1319a:	d01f      	beq.n	131dc <dir_next+0xd0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   1319c:	f1b0 3fff 	cmp.w	r0, #4294967295
   131a0:	d01e      	beq.n	131e0 <dir_next+0xd4>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
   131a2:	4601      	mov	r1, r0
   131a4:	4628      	mov	r0, r5
   131a6:	f7ff ff89 	bl	130bc <dir_clear>
   131aa:	b9d8      	cbnz	r0, 131e4 <dir_next+0xd8>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
   131ac:	79e3      	ldrb	r3, [r4, #7]
   131ae:	f043 0304 	orr.w	r3, r3, #4
   131b2:	71e3      	strb	r3, [r4, #7]
				dp->clust = clst;		/* Initialize data for new cluster */
   131b4:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
				dp->sect = clst2sect(fs, clst);
   131b8:	4649      	mov	r1, r9
   131ba:	4628      	mov	r0, r5
   131bc:	f7ff fa7a 	bl	126b4 <clst2sect>
   131c0:	63a0      	str	r0, [r4, #56]	; 0x38
   131c2:	e7c1      	b.n	13148 <dir_next+0x3c>
						dp->sect = 0; return FR_NO_FILE;
   131c4:	2300      	movs	r3, #0
   131c6:	63a3      	str	r3, [r4, #56]	; 0x38
   131c8:	2004      	movs	r0, #4
   131ca:	e7c2      	b.n	13152 <dir_next+0x46>
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
   131cc:	2004      	movs	r0, #4
   131ce:	e7c0      	b.n	13152 <dir_next+0x46>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
   131d0:	2002      	movs	r0, #2
   131d2:	e7be      	b.n	13152 <dir_next+0x46>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   131d4:	2001      	movs	r0, #1
   131d6:	e7bc      	b.n	13152 <dir_next+0x46>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   131d8:	2007      	movs	r0, #7
   131da:	e7ba      	b.n	13152 <dir_next+0x46>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
   131dc:	2002      	movs	r0, #2
   131de:	e7b8      	b.n	13152 <dir_next+0x46>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   131e0:	2001      	movs	r0, #1
   131e2:	e7b6      	b.n	13152 <dir_next+0x46>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
   131e4:	2001      	movs	r0, #1
   131e6:	e7b4      	b.n	13152 <dir_next+0x46>

000131e8 <dir_alloc>:
{
   131e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   131ea:	4604      	mov	r4, r0
   131ec:	460f      	mov	r7, r1
	FATFS *fs = dp->obj.fs;
   131ee:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
   131f0:	2100      	movs	r1, #0
   131f2:	f7ff fd6a 	bl	12cca <dir_sdi>
	if (res == FR_OK) {
   131f6:	4602      	mov	r2, r0
   131f8:	bb30      	cbnz	r0, 13248 <dir_alloc+0x60>
		n = 0;
   131fa:	2500      	movs	r5, #0
   131fc:	e00e      	b.n	1321c <dir_alloc+0x34>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
   131fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   13200:	f993 3000 	ldrsb.w	r3, [r3]
   13204:	43db      	mvns	r3, r3
   13206:	0fdb      	lsrs	r3, r3, #31
   13208:	b1e3      	cbz	r3, 13244 <dir_alloc+0x5c>
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
   1320a:	3501      	adds	r5, #1
   1320c:	42bd      	cmp	r5, r7
   1320e:	d01b      	beq.n	13248 <dir_alloc+0x60>
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
   13210:	2101      	movs	r1, #1
   13212:	4620      	mov	r0, r4
   13214:	f7ff ff7a 	bl	1310c <dir_next>
		} while (res == FR_OK);
   13218:	4602      	mov	r2, r0
   1321a:	b9a8      	cbnz	r0, 13248 <dir_alloc+0x60>
			res = move_window(fs, dp->sect);
   1321c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   1321e:	4630      	mov	r0, r6
   13220:	f7ff fb04 	bl	1282c <move_window>
			if (res != FR_OK) break;
   13224:	4602      	mov	r2, r0
   13226:	b978      	cbnz	r0, 13248 <dir_alloc+0x60>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
   13228:	7833      	ldrb	r3, [r6, #0]
   1322a:	2b04      	cmp	r3, #4
   1322c:	d0e7      	beq.n	131fe <dir_alloc+0x16>
   1322e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   13230:	781b      	ldrb	r3, [r3, #0]
   13232:	2be5      	cmp	r3, #229	; 0xe5
   13234:	d002      	beq.n	1323c <dir_alloc+0x54>
   13236:	b91b      	cbnz	r3, 13240 <dir_alloc+0x58>
   13238:	2301      	movs	r3, #1
   1323a:	e7e5      	b.n	13208 <dir_alloc+0x20>
   1323c:	2301      	movs	r3, #1
   1323e:	e7e3      	b.n	13208 <dir_alloc+0x20>
   13240:	2300      	movs	r3, #0
   13242:	e7e1      	b.n	13208 <dir_alloc+0x20>
				n = 0;				/* Not a free entry, restart to search */
   13244:	2500      	movs	r5, #0
   13246:	e7e3      	b.n	13210 <dir_alloc+0x28>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
   13248:	2a04      	cmp	r2, #4
   1324a:	d001      	beq.n	13250 <dir_alloc+0x68>
}
   1324c:	4610      	mov	r0, r2
   1324e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
   13250:	2207      	movs	r2, #7
   13252:	e7fb      	b.n	1324c <dir_alloc+0x64>

00013254 <dir_remove>:
{
   13254:	b570      	push	{r4, r5, r6, lr}
   13256:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
   13258:	6805      	ldr	r5, [r0, #0]
	DWORD last = dp->dptr;
   1325a:	6b06      	ldr	r6, [r0, #48]	; 0x30
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
   1325c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
   1325e:	f1b1 3fff 	cmp.w	r1, #4294967295
   13262:	d012      	beq.n	1328a <dir_remove+0x36>
   13264:	f7ff fd31 	bl	12cca <dir_sdi>
	if (res == FR_OK) {
   13268:	4603      	mov	r3, r0
   1326a:	b9f8      	cbnz	r0, 132ac <dir_remove+0x58>
   1326c:	e00d      	b.n	1328a <dir_remove+0x36>
				dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'. */
   1326e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   13270:	21e5      	movs	r1, #229	; 0xe5
   13272:	7011      	strb	r1, [r2, #0]
			fs->wflag = 1;
   13274:	2201      	movs	r2, #1
   13276:	70ea      	strb	r2, [r5, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
   13278:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1327a:	42b2      	cmp	r2, r6
   1327c:	d214      	bcs.n	132a8 <dir_remove+0x54>
			res = dir_next(dp, 0);	/* Next entry */
   1327e:	2100      	movs	r1, #0
   13280:	4620      	mov	r0, r4
   13282:	f7ff ff43 	bl	1310c <dir_next>
		} while (res == FR_OK);
   13286:	4603      	mov	r3, r0
   13288:	b970      	cbnz	r0, 132a8 <dir_remove+0x54>
			res = move_window(fs, dp->sect);
   1328a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   1328c:	4628      	mov	r0, r5
   1328e:	f7ff facd 	bl	1282c <move_window>
			if (res != FR_OK) break;
   13292:	4603      	mov	r3, r0
   13294:	b940      	cbnz	r0, 132a8 <dir_remove+0x54>
			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
   13296:	782a      	ldrb	r2, [r5, #0]
   13298:	2a04      	cmp	r2, #4
   1329a:	d1e8      	bne.n	1326e <dir_remove+0x1a>
				dp->dir[XDIR_Type] &= 0x7F;	/* Clear the entry InUse flag. */
   1329c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   1329e:	780a      	ldrb	r2, [r1, #0]
   132a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   132a4:	700a      	strb	r2, [r1, #0]
   132a6:	e7e5      	b.n	13274 <dir_remove+0x20>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
   132a8:	2b04      	cmp	r3, #4
   132aa:	d001      	beq.n	132b0 <dir_remove+0x5c>
}
   132ac:	4618      	mov	r0, r3
   132ae:	bd70      	pop	{r4, r5, r6, pc}
		if (res == FR_NO_FILE) res = FR_INT_ERR;
   132b0:	2302      	movs	r3, #2
   132b2:	e7fb      	b.n	132ac <dir_remove+0x58>

000132b4 <put_utf>:
{
   132b4:	b538      	push	{r3, r4, r5, lr}
   132b6:	460d      	mov	r5, r1
   132b8:	4614      	mov	r4, r2
	wc = ff_uni2oem(chr, CODEPAGE);
   132ba:	f240 11b5 	movw	r1, #437	; 0x1b5
   132be:	f7f8 fa5f 	bl	b780 <ff_uni2oem>
	if (wc >= 0x100) {	/* Is this a DBC? */
   132c2:	28ff      	cmp	r0, #255	; 0xff
   132c4:	d909      	bls.n	132da <put_utf+0x26>
		if (szb < 2) return 0;
   132c6:	2c01      	cmp	r4, #1
   132c8:	d801      	bhi.n	132ce <put_utf+0x1a>
   132ca:	2000      	movs	r0, #0
}
   132cc:	bd38      	pop	{r3, r4, r5, pc}
		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
   132ce:	f3c0 2307 	ubfx	r3, r0, #8, #8
   132d2:	702b      	strb	r3, [r5, #0]
		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
   132d4:	7068      	strb	r0, [r5, #1]
		return 2;
   132d6:	2002      	movs	r0, #2
   132d8:	e7f8      	b.n	132cc <put_utf+0x18>
	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
   132da:	b118      	cbz	r0, 132e4 <put_utf+0x30>
   132dc:	b124      	cbz	r4, 132e8 <put_utf+0x34>
	*buf++ = (TCHAR)wc;					/* Store the character */
   132de:	7028      	strb	r0, [r5, #0]
	return 1;
   132e0:	2001      	movs	r0, #1
   132e2:	e7f3      	b.n	132cc <put_utf+0x18>
	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
   132e4:	2000      	movs	r0, #0
   132e6:	e7f1      	b.n	132cc <put_utf+0x18>
   132e8:	4620      	mov	r0, r4
   132ea:	e7ef      	b.n	132cc <put_utf+0x18>

000132ec <get_fileinfo>:
{
   132ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
   132f0:	f8d0 9000 	ldr.w	r9, [r0]
	fno->fname[0] = 0;			/* Invaidate file info */
   132f4:	2300      	movs	r3, #0
   132f6:	768b      	strb	r3, [r1, #26]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
   132f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   132fa:	2b00      	cmp	r3, #0
   132fc:	f000 80dc 	beq.w	134b8 <get_fileinfo+0x1cc>
   13300:	4605      	mov	r5, r0
   13302:	460c      	mov	r4, r1
	if (fs->fs_type == FS_EXFAT) {	/* exFAT volume */
   13304:	f899 3000 	ldrb.w	r3, [r9]
   13308:	2b04      	cmp	r3, #4
   1330a:	d034      	beq.n	13376 <get_fileinfo+0x8a>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
   1330c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1330e:	f1b3 3fff 	cmp.w	r3, #4294967295
   13312:	f000 808e 	beq.w	13432 <get_fileinfo+0x146>
			hs = 0;
   13316:	f04f 0800 	mov.w	r8, #0
			si = di = 0;
   1331a:	4646      	mov	r6, r8
   1331c:	4647      	mov	r7, r8
   1331e:	e06f      	b.n	13400 <get_fileinfo+0x114>
			nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
   13320:	f106 0118 	add.w	r1, r6, #24
   13324:	4421      	add	r1, r4
   13326:	f1c6 02ff 	rsb	r2, r6, #255	; 0xff
   1332a:	3102      	adds	r1, #2
   1332c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   13330:	f7ff ffc0 	bl	132b4 <put_utf>
			if (nw == 0) { di = 0; break; }			/* Buffer overflow or wrong char? */
   13334:	b358      	cbz	r0, 1338e <get_fileinfo+0xa2>
			di += nw;
   13336:	4406      	add	r6, r0
			hs = 0;
   13338:	f04f 0800 	mov.w	r8, #0
		while (nc < fs->dirbuf[XDIR_NumName]) {
   1333c:	f8d9 0010 	ldr.w	r0, [r9, #16]
   13340:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   13344:	42bb      	cmp	r3, r7
   13346:	d91c      	bls.n	13382 <get_fileinfo+0x96>
			if (si >= MAXDIRB(FF_MAX_LFN)) { di = 0; break; }	/* Truncated directory block? */
   13348:	f5b5 7f18 	cmp.w	r5, #608	; 0x260
   1334c:	d218      	bcs.n	13380 <get_fileinfo+0x94>
			if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
   1334e:	f015 0f1f 	tst.w	r5, #31
   13352:	d100      	bne.n	13356 <get_fileinfo+0x6a>
   13354:	3502      	adds	r5, #2
			wc = ld_word(fs->dirbuf + si); si += 2; nc++;	/* Get a character */
   13356:	4428      	add	r0, r5
   13358:	f7ff f950 	bl	125fc <ld_word>
   1335c:	3502      	adds	r5, #2
   1335e:	3701      	adds	r7, #1
			if (hs == 0 && IsSurrogate(wc)) {		/* Is it a surrogate? */
   13360:	f1b8 0f00 	cmp.w	r8, #0
   13364:	d1dc      	bne.n	13320 <get_fileinfo+0x34>
   13366:	f500 5320 	add.w	r3, r0, #10240	; 0x2800
   1336a:	b29b      	uxth	r3, r3
   1336c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   13370:	d2d6      	bcs.n	13320 <get_fileinfo+0x34>
				hs = wc; continue;					/* Get low surrogate */
   13372:	4680      	mov	r8, r0
   13374:	e7e2      	b.n	1333c <get_fileinfo+0x50>
		UINT nc = 0;
   13376:	2700      	movs	r7, #0
		hs = 0;
   13378:	46b8      	mov	r8, r7
		si = SZDIRE * 2; di = 0;	/* 1st C1 entry in the entry block */
   1337a:	463e      	mov	r6, r7
   1337c:	2540      	movs	r5, #64	; 0x40
   1337e:	e7dd      	b.n	1333c <get_fileinfo+0x50>
			if (si >= MAXDIRB(FF_MAX_LFN)) { di = 0; break; }	/* Truncated directory block? */
   13380:	2600      	movs	r6, #0
		if (hs != 0) di = 0;					/* Broken surrogate pair? */
   13382:	f1b8 0f00 	cmp.w	r8, #0
   13386:	d104      	bne.n	13392 <get_fileinfo+0xa6>
		if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
   13388:	b126      	cbz	r6, 13394 <get_fileinfo+0xa8>
   1338a:	4633      	mov	r3, r6
   1338c:	e006      	b.n	1339c <get_fileinfo+0xb0>
			if (nw == 0) { di = 0; break; }			/* Buffer overflow or wrong char? */
   1338e:	4606      	mov	r6, r0
   13390:	e7f7      	b.n	13382 <get_fileinfo+0x96>
		if (hs != 0) di = 0;					/* Broken surrogate pair? */
   13392:	2600      	movs	r6, #0
		if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
   13394:	1c73      	adds	r3, r6, #1
   13396:	4426      	add	r6, r4
   13398:	223f      	movs	r2, #63	; 0x3f
   1339a:	76b2      	strb	r2, [r6, #26]
		fno->fname[di] = 0;						/* Terminate the name */
   1339c:	4423      	add	r3, r4
   1339e:	2200      	movs	r2, #0
   133a0:	769a      	strb	r2, [r3, #26]
		fno->altname[0] = 0;					/* exFAT does not support SFN */
   133a2:	7362      	strb	r2, [r4, #13]
		fno->fattrib = fs->dirbuf[XDIR_Attr] & AM_MASKX;		/* Attribute */
   133a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   133a8:	791b      	ldrb	r3, [r3, #4]
   133aa:	f003 0337 	and.w	r3, r3, #55	; 0x37
   133ae:	7323      	strb	r3, [r4, #12]
		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
   133b0:	f013 0f10 	tst.w	r3, #16
   133b4:	d105      	bne.n	133c2 <get_fileinfo+0xd6>
   133b6:	f8d9 0010 	ldr.w	r0, [r9, #16]
   133ba:	3038      	adds	r0, #56	; 0x38
   133bc:	f7ff f92e 	bl	1261c <ld_qword>
   133c0:	e001      	b.n	133c6 <get_fileinfo+0xda>
   133c2:	2000      	movs	r0, #0
   133c4:	4601      	mov	r1, r0
   133c6:	6020      	str	r0, [r4, #0]
   133c8:	6061      	str	r1, [r4, #4]
		fno->ftime = ld_word(fs->dirbuf + XDIR_ModTime + 0);	/* Time */
   133ca:	f8d9 0010 	ldr.w	r0, [r9, #16]
   133ce:	300c      	adds	r0, #12
   133d0:	f7ff f914 	bl	125fc <ld_word>
   133d4:	8160      	strh	r0, [r4, #10]
		fno->fdate = ld_word(fs->dirbuf + XDIR_ModTime + 2);	/* Date */
   133d6:	f8d9 0010 	ldr.w	r0, [r9, #16]
   133da:	300e      	adds	r0, #14
   133dc:	f7ff f90e 	bl	125fc <ld_word>
   133e0:	8120      	strh	r0, [r4, #8]
		return;
   133e2:	e069      	b.n	134b8 <get_fileinfo+0x1cc>
				nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
   133e4:	f106 0118 	add.w	r1, r6, #24
   133e8:	4421      	add	r1, r4
   133ea:	f1c6 02ff 	rsb	r2, r6, #255	; 0xff
   133ee:	3102      	adds	r1, #2
   133f0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   133f4:	f7ff ff5e 	bl	132b4 <put_utf>
				if (nw == 0) { di = 0; break; }	/* Buffer overflow or wrong char? */
   133f8:	b198      	cbz	r0, 13422 <get_fileinfo+0x136>
				di += nw;
   133fa:	4406      	add	r6, r0
				hs = 0;
   133fc:	f04f 0800 	mov.w	r8, #0
			while (fs->lfnbuf[si] != 0) {
   13400:	f8d9 300c 	ldr.w	r3, [r9, #12]
   13404:	f833 0017 	ldrh.w	r0, [r3, r7, lsl #1]
   13408:	b160      	cbz	r0, 13424 <get_fileinfo+0x138>
				wc = fs->lfnbuf[si++];		/* Get an LFN character (UTF-16) */
   1340a:	3701      	adds	r7, #1
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
   1340c:	f1b8 0f00 	cmp.w	r8, #0
   13410:	d1e8      	bne.n	133e4 <get_fileinfo+0xf8>
   13412:	f500 5320 	add.w	r3, r0, #10240	; 0x2800
   13416:	b29b      	uxth	r3, r3
   13418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   1341c:	d2e2      	bcs.n	133e4 <get_fileinfo+0xf8>
					hs = wc; continue;		/* Get low surrogate */
   1341e:	4680      	mov	r8, r0
   13420:	e7ee      	b.n	13400 <get_fileinfo+0x114>
				if (nw == 0) { di = 0; break; }	/* Buffer overflow or wrong char? */
   13422:	4606      	mov	r6, r0
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
   13424:	f1b8 0f00 	cmp.w	r8, #0
   13428:	d000      	beq.n	1342c <get_fileinfo+0x140>
   1342a:	2600      	movs	r6, #0
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
   1342c:	4426      	add	r6, r4
   1342e:	2300      	movs	r3, #0
   13430:	76b3      	strb	r3, [r6, #26]
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
   13432:	2200      	movs	r2, #0
   13434:	4613      	mov	r3, r2
   13436:	e005      	b.n	13444 <get_fileinfo+0x158>
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
   13438:	2909      	cmp	r1, #9
   1343a:	d00e      	beq.n	1345a <get_fileinfo+0x16e>
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
   1343c:	18a0      	adds	r0, r4, r2
   1343e:	7343      	strb	r3, [r0, #13]
   13440:	3201      	adds	r2, #1
   13442:	460b      	mov	r3, r1
	while (si < 11) {		/* Get SFN from SFN entry */
   13444:	2b0a      	cmp	r3, #10
   13446:	d80f      	bhi.n	13468 <get_fileinfo+0x17c>
		wc = dp->dir[si++];			/* Get a char */
   13448:	6be8      	ldr	r0, [r5, #60]	; 0x3c
   1344a:	1c59      	adds	r1, r3, #1
   1344c:	5cc3      	ldrb	r3, [r0, r3]
		if (wc == ' ') continue;	/* Skip padding spaces */
   1344e:	2b20      	cmp	r3, #32
   13450:	d0f7      	beq.n	13442 <get_fileinfo+0x156>
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
   13452:	2b05      	cmp	r3, #5
   13454:	d1f0      	bne.n	13438 <get_fileinfo+0x14c>
   13456:	23e5      	movs	r3, #229	; 0xe5
   13458:	e7ee      	b.n	13438 <get_fileinfo+0x14c>
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
   1345a:	2a0b      	cmp	r2, #11
   1345c:	d8ee      	bhi.n	1343c <get_fileinfo+0x150>
   1345e:	18a0      	adds	r0, r4, r2
   13460:	262e      	movs	r6, #46	; 0x2e
   13462:	7346      	strb	r6, [r0, #13]
   13464:	3201      	adds	r2, #1
   13466:	e7e9      	b.n	1343c <get_fileinfo+0x150>
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
   13468:	18a3      	adds	r3, r4, r2
   1346a:	2100      	movs	r1, #0
   1346c:	7359      	strb	r1, [r3, #13]
	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
   1346e:	7ea3      	ldrb	r3, [r4, #26]
   13470:	b963      	cbnz	r3, 1348c <get_fileinfo+0x1a0>
		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccesible */
   13472:	2a00      	cmp	r2, #0
   13474:	d13b      	bne.n	134ee <get_fileinfo+0x202>
			fno->fname[di++] = '?';
   13476:	1c51      	adds	r1, r2, #1
   13478:	4422      	add	r2, r4
   1347a:	233f      	movs	r3, #63	; 0x3f
   1347c:	7693      	strb	r3, [r2, #26]
		fno->fname[di] = 0;	/* Terminate the LFN */
   1347e:	4421      	add	r1, r4
   13480:	2300      	movs	r3, #0
   13482:	768b      	strb	r3, [r1, #26]
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
   13484:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   13486:	7b1b      	ldrb	r3, [r3, #12]
   13488:	b903      	cbnz	r3, 1348c <get_fileinfo+0x1a0>
   1348a:	7363      	strb	r3, [r4, #13]
	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
   1348c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   1348e:	7adb      	ldrb	r3, [r3, #11]
   13490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13494:	7323      	strb	r3, [r4, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
   13496:	6be8      	ldr	r0, [r5, #60]	; 0x3c
   13498:	301c      	adds	r0, #28
   1349a:	f7ff f8b4 	bl	12606 <ld_dword>
   1349e:	6020      	str	r0, [r4, #0]
   134a0:	2300      	movs	r3, #0
   134a2:	6063      	str	r3, [r4, #4]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
   134a4:	6be8      	ldr	r0, [r5, #60]	; 0x3c
   134a6:	3016      	adds	r0, #22
   134a8:	f7ff f8a8 	bl	125fc <ld_word>
   134ac:	8160      	strh	r0, [r4, #10]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
   134ae:	6be8      	ldr	r0, [r5, #60]	; 0x3c
   134b0:	3018      	adds	r0, #24
   134b2:	f7ff f8a3 	bl	125fc <ld_word>
   134b6:	8120      	strh	r0, [r4, #8]
}
   134b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (wc == '.') lcf = NS_EXT;
   134bc:	2710      	movs	r7, #16
   134be:	e00a      	b.n	134d6 <get_fileinfo+0x1ea>
				fno->fname[di] = (TCHAR)wc;
   134c0:	1862      	adds	r2, r4, r1
   134c2:	7693      	strb	r3, [r2, #26]
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
   134c4:	3601      	adds	r6, #1
   134c6:	3101      	adds	r1, #1
   134c8:	19a3      	adds	r3, r4, r6
   134ca:	7b58      	ldrb	r0, [r3, #13]
   134cc:	2800      	cmp	r0, #0
   134ce:	d0d6      	beq.n	1347e <get_fileinfo+0x192>
				wc = (WCHAR)fno->altname[si];
   134d0:	b283      	uxth	r3, r0
				if (wc == '.') lcf = NS_EXT;
   134d2:	2b2e      	cmp	r3, #46	; 0x2e
   134d4:	d0f2      	beq.n	134bc <get_fileinfo+0x1d0>
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
   134d6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   134da:	b292      	uxth	r2, r2
   134dc:	2a19      	cmp	r2, #25
   134de:	d8ef      	bhi.n	134c0 <get_fileinfo+0x1d4>
   134e0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   134e2:	7b12      	ldrb	r2, [r2, #12]
   134e4:	423a      	tst	r2, r7
   134e6:	d0eb      	beq.n	134c0 <get_fileinfo+0x1d4>
   134e8:	f100 0320 	add.w	r3, r0, #32
   134ec:	e7e8      	b.n	134c0 <get_fileinfo+0x1d4>
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
   134ee:	2708      	movs	r7, #8
   134f0:	2100      	movs	r1, #0
   134f2:	460e      	mov	r6, r1
   134f4:	e7e8      	b.n	134c8 <get_fileinfo+0x1dc>

000134f6 <tchar2uni>:
{
   134f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   134fa:	4605      	mov	r5, r0
	const TCHAR *p = *str;
   134fc:	f8d0 8000 	ldr.w	r8, [r0]
	wc = (BYTE)*p++;			/* Get a byte */
   13500:	4646      	mov	r6, r8
   13502:	f816 7b01 	ldrb.w	r7, [r6], #1
   13506:	b2bc      	uxth	r4, r7
	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
   13508:	4638      	mov	r0, r7
   1350a:	f7ff f8cf 	bl	126ac <dbc_1st>
   1350e:	b150      	cbz	r0, 13526 <tchar2uni+0x30>
		b = (BYTE)*p++;			/* Get 2nd byte */
   13510:	f108 0602 	add.w	r6, r8, #2
   13514:	f898 4001 	ldrb.w	r4, [r8, #1]
		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
   13518:	4620      	mov	r0, r4
   1351a:	f7ff f8c9 	bl	126b0 <dbc_2nd>
   1351e:	b190      	cbz	r0, 13546 <tchar2uni+0x50>
		wc = (wc << 8) + b;		/* Make a DBC */
   13520:	eb04 2407 	add.w	r4, r4, r7, lsl #8
   13524:	b2a4      	uxth	r4, r4
	if (wc != 0) {
   13526:	b91c      	cbnz	r4, 13530 <tchar2uni+0x3a>
	uc = wc;
   13528:	4620      	mov	r0, r4
	*str = p;	/* Next read pointer */
   1352a:	602e      	str	r6, [r5, #0]
}
   1352c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
   13530:	f240 11b5 	movw	r1, #437	; 0x1b5
   13534:	4620      	mov	r0, r4
   13536:	f7f8 f943 	bl	b7c0 <ff_oem2uni>
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
   1353a:	4604      	mov	r4, r0
   1353c:	2800      	cmp	r0, #0
   1353e:	d1f3      	bne.n	13528 <tchar2uni+0x32>
   13540:	f04f 30ff 	mov.w	r0, #4294967295
   13544:	e7f2      	b.n	1352c <tchar2uni+0x36>
		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
   13546:	f04f 30ff 	mov.w	r0, #4294967295
   1354a:	e7ef      	b.n	1352c <tchar2uni+0x36>

0001354c <xname_sum>:
{
   1354c:	b538      	push	{r3, r4, r5, lr}
   1354e:	4604      	mov	r4, r0
	WORD sum = 0;
   13550:	2500      	movs	r5, #0
	while ((chr = *name++) != 0) {
   13552:	f834 0b02 	ldrh.w	r0, [r4], #2
   13556:	b190      	cbz	r0, 1357e <xname_sum+0x32>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
   13558:	f7f8 f948 	bl	b7ec <ff_wtoupper>
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
   1355c:	086b      	lsrs	r3, r5, #1
   1355e:	eb03 33c5 	add.w	r3, r3, r5, lsl #15
   13562:	b2c2      	uxtb	r2, r0
   13564:	fa02 f383 	sxtah	r3, r2, r3
   13568:	b29a      	uxth	r2, r3
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
   1356a:	f3c3 034e 	ubfx	r3, r3, #1, #15
   1356e:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
   13572:	f3c0 2007 	ubfx	r0, r0, #8, #8
   13576:	fa00 f383 	sxtah	r3, r0, r3
   1357a:	b29d      	uxth	r5, r3
   1357c:	e7e9      	b.n	13552 <xname_sum+0x6>
}
   1357e:	4628      	mov	r0, r5
   13580:	bd38      	pop	{r3, r4, r5, pc}

00013582 <create_xdir>:
{
   13582:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13586:	4607      	mov	r7, r0
   13588:	4688      	mov	r8, r1
   1358a:	2440      	movs	r4, #64	; 0x40
   1358c:	4622      	mov	r2, r4
   1358e:	2100      	movs	r1, #0
   13590:	f001 fa65 	bl	14a5e <memset>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
   13594:	2385      	movs	r3, #133	; 0x85
   13596:	703b      	strb	r3, [r7, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
   13598:	23c0      	movs	r3, #192	; 0xc0
   1359a:	f887 3020 	strb.w	r3, [r7, #32]
	nlen = nc1 = 0; wc = 1;
   1359e:	2501      	movs	r5, #1
   135a0:	2600      	movs	r6, #0
   135a2:	46b1      	mov	r9, r6
   135a4:	e017      	b.n	135d6 <create_xdir+0x54>
			st_word(dirb + i, wc); 	/* Store it */
   135a6:	4629      	mov	r1, r5
   135a8:	1938      	adds	r0, r7, r4
   135aa:	f7ff f85e 	bl	1266a <st_word>
			i += 2;
   135ae:	3402      	adds	r4, #2
		} while (i % SZDIRE != 0);
   135b0:	f014 0f1f 	tst.w	r4, #31
   135b4:	d008      	beq.n	135c8 <create_xdir+0x46>
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
   135b6:	2d00      	cmp	r5, #0
   135b8:	d0f5      	beq.n	135a6 <create_xdir+0x24>
   135ba:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
   135be:	2d00      	cmp	r5, #0
   135c0:	d0f1      	beq.n	135a6 <create_xdir+0x24>
   135c2:	3601      	adds	r6, #1
   135c4:	b2f6      	uxtb	r6, r6
   135c6:	e7ee      	b.n	135a6 <create_xdir+0x24>
		nc1++;
   135c8:	f109 0301 	add.w	r3, r9, #1
   135cc:	b2db      	uxtb	r3, r3
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
   135ce:	f838 2016 	ldrh.w	r2, [r8, r6, lsl #1]
   135d2:	b13a      	cbz	r2, 135e4 <create_xdir+0x62>
		nc1++;
   135d4:	4699      	mov	r9, r3
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
   135d6:	1c63      	adds	r3, r4, #1
   135d8:	22c1      	movs	r2, #193	; 0xc1
   135da:	553a      	strb	r2, [r7, r4]
   135dc:	2200      	movs	r2, #0
   135de:	54fa      	strb	r2, [r7, r3]
   135e0:	3402      	adds	r4, #2
   135e2:	e7e8      	b.n	135b6 <create_xdir+0x34>
	dirb[XDIR_NumName] = nlen;		/* Set name length */
   135e4:	f887 6023 	strb.w	r6, [r7, #35]	; 0x23
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
   135e8:	f109 0902 	add.w	r9, r9, #2
   135ec:	f887 9001 	strb.w	r9, [r7, #1]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
   135f0:	4640      	mov	r0, r8
   135f2:	f7ff ffab 	bl	1354c <xname_sum>
   135f6:	4601      	mov	r1, r0
   135f8:	f107 0024 	add.w	r0, r7, #36	; 0x24
   135fc:	f7ff f835 	bl	1266a <st_word>
}
   13600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00013604 <dir_read>:
{
   13604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13608:	4604      	mov	r4, r0
   1360a:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
   1360c:	6806      	ldr	r6, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
   1360e:	f04f 09ff 	mov.w	r9, #255	; 0xff
   13612:	464f      	mov	r7, r9
	FRESULT res = FR_NO_FILE;
   13614:	2504      	movs	r5, #4
	while (dp->sect) {
   13616:	e008      	b.n	1362a <dir_read+0x26>
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
   13618:	2b85      	cmp	r3, #133	; 0x85
   1361a:	d028      	beq.n	1366e <dir_read+0x6a>
		res = dir_next(dp, 0);		/* Next entry */
   1361c:	2100      	movs	r1, #0
   1361e:	4620      	mov	r0, r4
   13620:	f7ff fd74 	bl	1310c <dir_next>
		if (res != FR_OK) break;
   13624:	4605      	mov	r5, r0
   13626:	2800      	cmp	r0, #0
   13628:	d15b      	bne.n	136e2 <dir_read+0xde>
	while (dp->sect) {
   1362a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   1362c:	2900      	cmp	r1, #0
   1362e:	d058      	beq.n	136e2 <dir_read+0xde>
		res = move_window(fs, dp->sect);
   13630:	4630      	mov	r0, r6
   13632:	f7ff f8fb 	bl	1282c <move_window>
		if (res != FR_OK) break;
   13636:	4605      	mov	r5, r0
   13638:	2800      	cmp	r0, #0
   1363a:	d152      	bne.n	136e2 <dir_read+0xde>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
   1363c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   1363e:	780b      	ldrb	r3, [r1, #0]
		if (b == 0) {
   13640:	2b00      	cmp	r3, #0
   13642:	d04d      	beq.n	136e0 <dir_read+0xdc>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
   13644:	7832      	ldrb	r2, [r6, #0]
   13646:	2a04      	cmp	r2, #4
   13648:	d0e6      	beq.n	13618 <dir_read+0x14>
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
   1364a:	7aca      	ldrb	r2, [r1, #11]
   1364c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   13650:	71a2      	strb	r2, [r4, #6]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
   13652:	2be5      	cmp	r3, #229	; 0xe5
   13654:	d03e      	beq.n	136d4 <dir_read+0xd0>
   13656:	2b2e      	cmp	r3, #46	; 0x2e
   13658:	d03e      	beq.n	136d8 <dir_read+0xd4>
   1365a:	f022 0020 	bic.w	r0, r2, #32
   1365e:	2808      	cmp	r0, #8
   13660:	bf14      	ite	ne
   13662:	2000      	movne	r0, #0
   13664:	2001      	moveq	r0, #1
   13666:	4540      	cmp	r0, r8
   13668:	d00e      	beq.n	13688 <dir_read+0x84>
				ord = 0xFF;
   1366a:	27ff      	movs	r7, #255	; 0xff
   1366c:	e7d6      	b.n	1361c <dir_read+0x18>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
   1366e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13670:	64e3      	str	r3, [r4, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
   13672:	4620      	mov	r0, r4
   13674:	f7f6 fc12 	bl	9e9c <load_xdir>
					if (res == FR_OK) {
   13678:	4605      	mov	r5, r0
   1367a:	bb90      	cbnz	r0, 136e2 <dir_read+0xde>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
   1367c:	6933      	ldr	r3, [r6, #16]
   1367e:	791b      	ldrb	r3, [r3, #4]
   13680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13684:	71a3      	strb	r3, [r4, #6]
   13686:	e02c      	b.n	136e2 <dir_read+0xde>
				if (attr == AM_LFN) {	/* An LFN entry is found */
   13688:	2a0f      	cmp	r2, #15
   1368a:	d119      	bne.n	136c0 <dir_read+0xbc>
					if (b & LLEF) {		/* Is it start of an LFN sequence? */
   1368c:	f013 0f40 	tst.w	r3, #64	; 0x40
   13690:	d006      	beq.n	136a0 <dir_read+0x9c>
						sum = dp->dir[LDIR_Chksum];
   13692:	f891 900d 	ldrb.w	r9, [r1, #13]
						b &= (BYTE)~LLEF; ord = b;
   13696:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
   1369a:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1369c:	64e2      	str	r2, [r4, #76]	; 0x4c
						b &= (BYTE)~LLEF; ord = b;
   1369e:	461f      	mov	r7, r3
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   136a0:	42bb      	cmp	r3, r7
   136a2:	d001      	beq.n	136a8 <dir_read+0xa4>
   136a4:	27ff      	movs	r7, #255	; 0xff
   136a6:	e7b9      	b.n	1361c <dir_read+0x18>
   136a8:	7b4b      	ldrb	r3, [r1, #13]
   136aa:	454b      	cmp	r3, r9
   136ac:	d001      	beq.n	136b2 <dir_read+0xae>
   136ae:	27ff      	movs	r7, #255	; 0xff
   136b0:	e7b4      	b.n	1361c <dir_read+0x18>
   136b2:	68f0      	ldr	r0, [r6, #12]
   136b4:	f7f5 fef2 	bl	949c <pick_lfn>
   136b8:	b180      	cbz	r0, 136dc <dir_read+0xd8>
   136ba:	3f01      	subs	r7, #1
   136bc:	b2ff      	uxtb	r7, r7
   136be:	e7ad      	b.n	1361c <dir_read+0x18>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
   136c0:	b927      	cbnz	r7, 136cc <dir_read+0xc8>
   136c2:	4608      	mov	r0, r1
   136c4:	f7ff f828 	bl	12718 <sum_sfn>
   136c8:	4548      	cmp	r0, r9
   136ca:	d00a      	beq.n	136e2 <dir_read+0xde>
						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
   136cc:	f04f 33ff 	mov.w	r3, #4294967295
   136d0:	64e3      	str	r3, [r4, #76]	; 0x4c
   136d2:	e006      	b.n	136e2 <dir_read+0xde>
				ord = 0xFF;
   136d4:	27ff      	movs	r7, #255	; 0xff
   136d6:	e7a1      	b.n	1361c <dir_read+0x18>
   136d8:	27ff      	movs	r7, #255	; 0xff
   136da:	e79f      	b.n	1361c <dir_read+0x18>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   136dc:	27ff      	movs	r7, #255	; 0xff
   136de:	e79d      	b.n	1361c <dir_read+0x18>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
   136e0:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
   136e2:	b10d      	cbz	r5, 136e8 <dir_read+0xe4>
   136e4:	2300      	movs	r3, #0
   136e6:	63a3      	str	r3, [r4, #56]	; 0x38
}
   136e8:	4628      	mov	r0, r5
   136ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000136ee <dir_find>:
{
   136ee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136f2:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
   136f4:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
   136f6:	2100      	movs	r1, #0
   136f8:	f7ff fae7 	bl	12cca <dir_sdi>
	if (res != FR_OK) return res;
   136fc:	4606      	mov	r6, r0
   136fe:	2800      	cmp	r0, #0
   13700:	f040 80ad 	bne.w	1385e <dir_find+0x170>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
   13704:	783b      	ldrb	r3, [r7, #0]
   13706:	2b04      	cmp	r3, #4
   13708:	d006      	beq.n	13718 <dir_find+0x2a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
   1370a:	f04f 33ff 	mov.w	r3, #4294967295
   1370e:	64e3      	str	r3, [r4, #76]	; 0x4c
   13710:	f04f 09ff 	mov.w	r9, #255	; 0xff
   13714:	46c8      	mov	r8, r9
   13716:	e046      	b.n	137a6 <dir_find+0xb8>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
   13718:	68f8      	ldr	r0, [r7, #12]
   1371a:	f7ff ff17 	bl	1354c <xname_sum>
   1371e:	4683      	mov	fp, r0
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
   13720:	e020      	b.n	13764 <dir_find+0x76>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
   13722:	6938      	ldr	r0, [r7, #16]
   13724:	4440      	add	r0, r8
   13726:	f7fe ff69 	bl	125fc <ld_word>
   1372a:	f7f8 f85f 	bl	b7ec <ff_wtoupper>
   1372e:	4681      	mov	r9, r0
   13730:	68fb      	ldr	r3, [r7, #12]
   13732:	f833 001a 	ldrh.w	r0, [r3, sl, lsl #1]
   13736:	f7f8 f859 	bl	b7ec <ff_wtoupper>
   1373a:	4581      	cmp	r9, r0
   1373c:	d10c      	bne.n	13758 <dir_find+0x6a>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
   1373e:	3d01      	subs	r5, #1
   13740:	b2ed      	uxtb	r5, r5
   13742:	f108 0802 	add.w	r8, r8, #2
   13746:	f10a 0a01 	add.w	sl, sl, #1
   1374a:	b12d      	cbz	r5, 13758 <dir_find+0x6a>
				if ((di % SZDIRE) == 0) di += 2;
   1374c:	f018 0f1f 	tst.w	r8, #31
   13750:	d1e7      	bne.n	13722 <dir_find+0x34>
   13752:	f108 0802 	add.w	r8, r8, #2
   13756:	e7e4      	b.n	13722 <dir_find+0x34>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
   13758:	b925      	cbnz	r5, 13764 <dir_find+0x76>
   1375a:	68fb      	ldr	r3, [r7, #12]
   1375c:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
   13760:	2b00      	cmp	r3, #0
   13762:	d07c      	beq.n	1385e <dir_find+0x170>
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
   13764:	2100      	movs	r1, #0
   13766:	4620      	mov	r0, r4
   13768:	f7ff ff4c 	bl	13604 <dir_read>
   1376c:	4606      	mov	r6, r0
   1376e:	2800      	cmp	r0, #0
   13770:	d175      	bne.n	1385e <dir_find+0x170>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
   13772:	693d      	ldr	r5, [r7, #16]
   13774:	f105 0024 	add.w	r0, r5, #36	; 0x24
   13778:	f7fe ff40 	bl	125fc <ld_word>
   1377c:	4558      	cmp	r0, fp
   1377e:	d1f1      	bne.n	13764 <dir_find+0x76>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
   13780:	f895 5023 	ldrb.w	r5, [r5, #35]	; 0x23
   13784:	f04f 0a00 	mov.w	sl, #0
   13788:	f04f 0840 	mov.w	r8, #64	; 0x40
   1378c:	e7dd      	b.n	1374a <dir_find+0x5c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
   1378e:	f04f 33ff 	mov.w	r3, #4294967295
   13792:	64e3      	str	r3, [r4, #76]	; 0x4c
   13794:	f04f 08ff 	mov.w	r8, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
   13798:	2100      	movs	r1, #0
   1379a:	4620      	mov	r0, r4
   1379c:	f7ff fcb6 	bl	1310c <dir_next>
	} while (res == FR_OK);
   137a0:	4606      	mov	r6, r0
   137a2:	2800      	cmp	r0, #0
   137a4:	d15b      	bne.n	1385e <dir_find+0x170>
		res = move_window(fs, dp->sect);
   137a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   137a8:	4638      	mov	r0, r7
   137aa:	f7ff f83f 	bl	1282c <move_window>
		if (res != FR_OK) break;
   137ae:	4606      	mov	r6, r0
   137b0:	2800      	cmp	r0, #0
   137b2:	d154      	bne.n	1385e <dir_find+0x170>
		c = dp->dir[DIR_Name];
   137b4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
   137b6:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   137b8:	2b00      	cmp	r3, #0
   137ba:	d04f      	beq.n	1385c <dir_find+0x16e>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
   137bc:	7ae9      	ldrb	r1, [r5, #11]
   137be:	f001 023f 	and.w	r2, r1, #63	; 0x3f
   137c2:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   137c4:	2be5      	cmp	r3, #229	; 0xe5
   137c6:	d0e2      	beq.n	1378e <dir_find+0xa0>
   137c8:	f011 0f08 	tst.w	r1, #8
   137cc:	d001      	beq.n	137d2 <dir_find+0xe4>
   137ce:	2a0f      	cmp	r2, #15
   137d0:	d1dd      	bne.n	1378e <dir_find+0xa0>
			if (a == AM_LFN) {			/* An LFN entry is found */
   137d2:	2a0f      	cmp	r2, #15
   137d4:	d012      	beq.n	137fc <dir_find+0x10e>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
   137d6:	f1b8 0f00 	cmp.w	r8, #0
   137da:	d104      	bne.n	137e6 <dir_find+0xf8>
   137dc:	4628      	mov	r0, r5
   137de:	f7fe ff9b 	bl	12718 <sum_sfn>
   137e2:	4548      	cmp	r0, r9
   137e4:	d03b      	beq.n	1385e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
   137e6:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
   137ea:	f013 0f01 	tst.w	r3, #1
   137ee:	d029      	beq.n	13844 <dir_find+0x156>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
   137f0:	f04f 33ff 	mov.w	r3, #4294967295
   137f4:	64e3      	str	r3, [r4, #76]	; 0x4c
   137f6:	f04f 08ff 	mov.w	r8, #255	; 0xff
   137fa:	e7cd      	b.n	13798 <dir_find+0xaa>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
   137fc:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
   13800:	f012 0f40 	tst.w	r2, #64	; 0x40
   13804:	d1c8      	bne.n	13798 <dir_find+0xaa>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
   13806:	f013 0f40 	tst.w	r3, #64	; 0x40
   1380a:	d006      	beq.n	1381a <dir_find+0x12c>
						sum = dp->dir[LDIR_Chksum];
   1380c:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
   13810:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
   13814:	6b22      	ldr	r2, [r4, #48]	; 0x30
   13816:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
   13818:	4698      	mov	r8, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   1381a:	4543      	cmp	r3, r8
   1381c:	d002      	beq.n	13824 <dir_find+0x136>
   1381e:	f04f 08ff 	mov.w	r8, #255	; 0xff
   13822:	e7b9      	b.n	13798 <dir_find+0xaa>
   13824:	7b6b      	ldrb	r3, [r5, #13]
   13826:	454b      	cmp	r3, r9
   13828:	d002      	beq.n	13830 <dir_find+0x142>
   1382a:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1382e:	e7b3      	b.n	13798 <dir_find+0xaa>
   13830:	4629      	mov	r1, r5
   13832:	68f8      	ldr	r0, [r7, #12]
   13834:	f7f6 fae2 	bl	9dfc <cmp_lfn>
   13838:	b168      	cbz	r0, 13856 <dir_find+0x168>
   1383a:	f108 38ff 	add.w	r8, r8, #4294967295
   1383e:	fa5f f888 	uxtb.w	r8, r8
   13842:	e7a9      	b.n	13798 <dir_find+0xaa>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
   13844:	220b      	movs	r2, #11
   13846:	f104 0140 	add.w	r1, r4, #64	; 0x40
   1384a:	4628      	mov	r0, r5
   1384c:	f001 f8eb 	bl	14a26 <memcmp>
   13850:	2800      	cmp	r0, #0
   13852:	d1cd      	bne.n	137f0 <dir_find+0x102>
   13854:	e003      	b.n	1385e <dir_find+0x170>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   13856:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1385a:	e79d      	b.n	13798 <dir_find+0xaa>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   1385c:	2604      	movs	r6, #4
}
   1385e:	4630      	mov	r0, r6
   13860:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013864 <follow_path>:
{
   13864:	b530      	push	{r4, r5, lr}
   13866:	b083      	sub	sp, #12
   13868:	4604      	mov	r4, r0
   1386a:	9101      	str	r1, [sp, #4]
	FATFS *fs = dp->obj.fs;
   1386c:	6805      	ldr	r5, [r0, #0]
		while (IsSeparator(*path)) path++;	/* Strip separators */
   1386e:	e001      	b.n	13874 <follow_path+0x10>
   13870:	3301      	adds	r3, #1
   13872:	9301      	str	r3, [sp, #4]
   13874:	9b01      	ldr	r3, [sp, #4]
   13876:	781a      	ldrb	r2, [r3, #0]
   13878:	2a2f      	cmp	r2, #47	; 0x2f
   1387a:	d0f9      	beq.n	13870 <follow_path+0xc>
   1387c:	2a5c      	cmp	r2, #92	; 0x5c
   1387e:	d0f7      	beq.n	13870 <follow_path+0xc>
		dp->obj.sclust = 0;					/* Start from the root directory */
   13880:	2200      	movs	r2, #0
   13882:	60a2      	str	r2, [r4, #8]
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
   13884:	61e2      	str	r2, [r4, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
   13886:	781b      	ldrb	r3, [r3, #0]
   13888:	2b1f      	cmp	r3, #31
   1388a:	d81f      	bhi.n	138cc <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
   1388c:	2380      	movs	r3, #128	; 0x80
   1388e:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		res = dir_sdi(dp, 0);
   13892:	4611      	mov	r1, r2
   13894:	4620      	mov	r0, r4
   13896:	f7ff fa18 	bl	12cca <dir_sdi>
   1389a:	4603      	mov	r3, r0
}
   1389c:	4618      	mov	r0, r3
   1389e:	b003      	add	sp, #12
   138a0:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
   138a2:	2804      	cmp	r0, #4
   138a4:	d1fa      	bne.n	1389c <follow_path+0x38>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
   138a6:	f012 0f04 	tst.w	r2, #4
   138aa:	d1f7      	bne.n	1389c <follow_path+0x38>
   138ac:	2305      	movs	r3, #5
   138ae:	e7f5      	b.n	1389c <follow_path+0x38>
				dp->obj.c_scl = dp->obj.sclust;
   138b0:	68a3      	ldr	r3, [r4, #8]
   138b2:	6223      	str	r3, [r4, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
   138b4:	6923      	ldr	r3, [r4, #16]
   138b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   138ba:	79e2      	ldrb	r2, [r4, #7]
   138bc:	4313      	orrs	r3, r2
   138be:	6263      	str	r3, [r4, #36]	; 0x24
				dp->obj.c_ofs = dp->blk_ofs;
   138c0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   138c2:	62a3      	str	r3, [r4, #40]	; 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
   138c4:	4621      	mov	r1, r4
   138c6:	4628      	mov	r0, r5
   138c8:	f7fe ff52 	bl	12770 <init_alloc_info>
			res = create_name(dp, &path);	/* Get a segment name of the path */
   138cc:	a901      	add	r1, sp, #4
   138ce:	4620      	mov	r0, r4
   138d0:	f7f6 f96c 	bl	9bac <create_name>
			if (res != FR_OK) break;
   138d4:	4603      	mov	r3, r0
   138d6:	2800      	cmp	r0, #0
   138d8:	d1e0      	bne.n	1389c <follow_path+0x38>
			res = dir_find(dp);				/* Find an object with the segment name */
   138da:	4620      	mov	r0, r4
   138dc:	f7ff ff07 	bl	136ee <dir_find>
			ns = dp->fn[NSFLAG];
   138e0:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
   138e4:	4603      	mov	r3, r0
   138e6:	2800      	cmp	r0, #0
   138e8:	d1db      	bne.n	138a2 <follow_path+0x3e>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
   138ea:	f012 0f04 	tst.w	r2, #4
   138ee:	d1d5      	bne.n	1389c <follow_path+0x38>
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
   138f0:	79a3      	ldrb	r3, [r4, #6]
   138f2:	f013 0f10 	tst.w	r3, #16
   138f6:	d00d      	beq.n	13914 <follow_path+0xb0>
			if (fs->fs_type == FS_EXFAT) {	/* Save containing directory information for next dir */
   138f8:	782b      	ldrb	r3, [r5, #0]
   138fa:	2b04      	cmp	r3, #4
   138fc:	d0d8      	beq.n	138b0 <follow_path+0x4c>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
   138fe:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   13902:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13904:	f3c3 0308 	ubfx	r3, r3, #0, #9
   13908:	4419      	add	r1, r3
   1390a:	4628      	mov	r0, r5
   1390c:	f7fe fede 	bl	126cc <ld_clust>
   13910:	60a0      	str	r0, [r4, #8]
   13912:	e7db      	b.n	138cc <follow_path+0x68>
				res = FR_NO_PATH; break;
   13914:	2305      	movs	r3, #5
   13916:	e7c1      	b.n	1389c <follow_path+0x38>

00013918 <load_obj_xdir>:
{
   13918:	b510      	push	{r4, lr}
   1391a:	4604      	mov	r4, r0
	dp->obj.fs = obj->fs;
   1391c:	680b      	ldr	r3, [r1, #0]
   1391e:	6003      	str	r3, [r0, #0]
	dp->obj.sclust = obj->c_scl;
   13920:	6a0b      	ldr	r3, [r1, #32]
   13922:	6083      	str	r3, [r0, #8]
	dp->obj.stat = (BYTE)obj->c_size;
   13924:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   13928:	71c3      	strb	r3, [r0, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
   1392a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1392c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   13930:	2200      	movs	r2, #0
   13932:	6103      	str	r3, [r0, #16]
   13934:	6142      	str	r2, [r0, #20]
	dp->obj.n_frag = 0;
   13936:	61c2      	str	r2, [r0, #28]
	dp->blk_ofs = obj->c_ofs;
   13938:	6a89      	ldr	r1, [r1, #40]	; 0x28
   1393a:	64c1      	str	r1, [r0, #76]	; 0x4c
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
   1393c:	f7ff f9c5 	bl	12cca <dir_sdi>
	if (res == FR_OK) {
   13940:	b100      	cbz	r0, 13944 <load_obj_xdir+0x2c>
}
   13942:	bd10      	pop	{r4, pc}
		res = load_xdir(dp);		/* Load the object's entry block */
   13944:	4620      	mov	r0, r4
   13946:	f7f6 faa9 	bl	9e9c <load_xdir>
   1394a:	e7fa      	b.n	13942 <load_obj_xdir+0x2a>

0001394c <gen_numname>:
{
   1394c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1394e:	b083      	sub	sp, #12
   13950:	4606      	mov	r6, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13952:	680c      	ldr	r4, [r1, #0]
   13954:	6848      	ldr	r0, [r1, #4]
   13956:	6034      	str	r4, [r6, #0]
   13958:	6070      	str	r0, [r6, #4]
   1395a:	8908      	ldrh	r0, [r1, #8]
   1395c:	7a89      	ldrb	r1, [r1, #10]
   1395e:	8130      	strh	r0, [r6, #8]
   13960:	72b1      	strb	r1, [r6, #10]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
   13962:	2b05      	cmp	r3, #5
   13964:	d811      	bhi.n	1398a <gen_numname+0x3e>
			for (i = 0; i < 16; i++) {
   13966:	2707      	movs	r7, #7
   13968:	e01e      	b.n	139a8 <gen_numname+0x5c>
   1396a:	3401      	adds	r4, #1
   1396c:	2c0f      	cmp	r4, #15
   1396e:	d80c      	bhi.n	1398a <gen_numname+0x3e>
				sreg = (sreg << 1) + (wc & 1);
   13970:	f001 0501 	and.w	r5, r1, #1
   13974:	eb05 0343 	add.w	r3, r5, r3, lsl #1
				wc >>= 1;
   13978:	0849      	lsrs	r1, r1, #1
				if (sreg & 0x10000) sreg ^= 0x11021;
   1397a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1397e:	d0f4      	beq.n	1396a <gen_numname+0x1e>
   13980:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
   13984:	f083 0321 	eor.w	r3, r3, #33	; 0x21
   13988:	e7ef      	b.n	1396a <gen_numname+0x1e>
		while (*lfn) {	/* Create a CRC as hash value */
   1398a:	8811      	ldrh	r1, [r2, #0]
   1398c:	2900      	cmp	r1, #0
   1398e:	d0ea      	beq.n	13966 <gen_numname+0x1a>
			wc = *lfn++;
   13990:	3202      	adds	r2, #2
			for (i = 0; i < 16; i++) {
   13992:	2400      	movs	r4, #0
   13994:	e7ea      	b.n	1396c <gen_numname+0x20>
		ns[i--] = c;
   13996:	a902      	add	r1, sp, #8
   13998:	4439      	add	r1, r7
   1399a:	f801 2c08 	strb.w	r2, [r1, #-8]
	} while (i && seq);
   1399e:	1e7d      	subs	r5, r7, #1
   139a0:	d00d      	beq.n	139be <gen_numname+0x72>
   139a2:	280f      	cmp	r0, #15
   139a4:	d90b      	bls.n	139be <gen_numname+0x72>
		ns[i--] = c;
   139a6:	462f      	mov	r7, r5
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
   139a8:	f003 010f 	and.w	r1, r3, #15
   139ac:	f101 0230 	add.w	r2, r1, #48	; 0x30
   139b0:	4618      	mov	r0, r3
   139b2:	091b      	lsrs	r3, r3, #4
		if (c > '9') c += 7;
   139b4:	2a39      	cmp	r2, #57	; 0x39
   139b6:	d9ee      	bls.n	13996 <gen_numname+0x4a>
   139b8:	f101 0237 	add.w	r2, r1, #55	; 0x37
   139bc:	e7eb      	b.n	13996 <gen_numname+0x4a>
	ns[i] = '~';
   139be:	227e      	movs	r2, #126	; 0x7e
   139c0:	ab02      	add	r3, sp, #8
   139c2:	442b      	add	r3, r5
   139c4:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
   139c8:	2400      	movs	r4, #0
   139ca:	e000      	b.n	139ce <gen_numname+0x82>
   139cc:	3401      	adds	r4, #1
   139ce:	42ac      	cmp	r4, r5
   139d0:	d211      	bcs.n	139f6 <gen_numname+0xaa>
   139d2:	5d30      	ldrb	r0, [r6, r4]
   139d4:	2820      	cmp	r0, #32
   139d6:	d00e      	beq.n	139f6 <gen_numname+0xaa>
		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
   139d8:	f7fe fe68 	bl	126ac <dbc_1st>
   139dc:	2800      	cmp	r0, #0
   139de:	d0f5      	beq.n	139cc <gen_numname+0x80>
			if (j == i - 1) break;
   139e0:	1ebb      	subs	r3, r7, #2
   139e2:	42a3      	cmp	r3, r4
   139e4:	d007      	beq.n	139f6 <gen_numname+0xaa>
			j++;
   139e6:	3401      	adds	r4, #1
   139e8:	e7f0      	b.n	139cc <gen_numname+0x80>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   139ea:	2220      	movs	r2, #32
   139ec:	1c63      	adds	r3, r4, #1
   139ee:	5532      	strb	r2, [r6, r4]
	} while (j < 8);
   139f0:	2b07      	cmp	r3, #7
   139f2:	d808      	bhi.n	13a06 <gen_numname+0xba>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   139f4:	461c      	mov	r4, r3
   139f6:	2d07      	cmp	r5, #7
   139f8:	d8f7      	bhi.n	139ea <gen_numname+0x9e>
   139fa:	ab02      	add	r3, sp, #8
   139fc:	442b      	add	r3, r5
   139fe:	f813 2c08 	ldrb.w	r2, [r3, #-8]
   13a02:	3501      	adds	r5, #1
   13a04:	e7f2      	b.n	139ec <gen_numname+0xa0>
}
   13a06:	b003      	add	sp, #12
   13a08:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013a0a <store_xdir>:
{
   13a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13a0c:	4605      	mov	r5, r0
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
   13a0e:	6803      	ldr	r3, [r0, #0]
   13a10:	691c      	ldr	r4, [r3, #16]
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
   13a12:	4620      	mov	r0, r4
   13a14:	f7fe fe91 	bl	1273a <xdir_sum>
   13a18:	4601      	mov	r1, r0
   13a1a:	1ca0      	adds	r0, r4, #2
   13a1c:	f7fe fe25 	bl	1266a <st_word>
	nent = dirb[XDIR_NumSec] + 1;
   13a20:	7866      	ldrb	r6, [r4, #1]
   13a22:	3601      	adds	r6, #1
	res = dir_sdi(dp, dp->blk_ofs);
   13a24:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   13a26:	4628      	mov	r0, r5
   13a28:	f7ff f94f 	bl	12cca <dir_sdi>
   13a2c:	4602      	mov	r2, r0
	while (res == FR_OK) {
   13a2e:	e005      	b.n	13a3c <store_xdir+0x32>
		dirb += SZDIRE;
   13a30:	3420      	adds	r4, #32
		res = dir_next(dp, 0);
   13a32:	2100      	movs	r1, #0
   13a34:	4628      	mov	r0, r5
   13a36:	f7ff fb69 	bl	1310c <dir_next>
   13a3a:	4602      	mov	r2, r0
	while (res == FR_OK) {
   13a3c:	b9fa      	cbnz	r2, 13a7e <store_xdir+0x74>
		res = move_window(dp->obj.fs, dp->sect);
   13a3e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   13a40:	6828      	ldr	r0, [r5, #0]
   13a42:	f7fe fef3 	bl	1282c <move_window>
		if (res != FR_OK) break;
   13a46:	4602      	mov	r2, r0
   13a48:	b9c8      	cbnz	r0, 13a7e <store_xdir+0x74>
		memcpy(dp->dir, dirb, SZDIRE);
   13a4a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   13a4c:	f8d4 c000 	ldr.w	ip, [r4]
   13a50:	6867      	ldr	r7, [r4, #4]
   13a52:	68a0      	ldr	r0, [r4, #8]
   13a54:	68e1      	ldr	r1, [r4, #12]
   13a56:	f8c3 c000 	str.w	ip, [r3]
   13a5a:	605f      	str	r7, [r3, #4]
   13a5c:	6098      	str	r0, [r3, #8]
   13a5e:	60d9      	str	r1, [r3, #12]
   13a60:	f8d4 c010 	ldr.w	ip, [r4, #16]
   13a64:	6967      	ldr	r7, [r4, #20]
   13a66:	69a0      	ldr	r0, [r4, #24]
   13a68:	69e1      	ldr	r1, [r4, #28]
   13a6a:	f8c3 c010 	str.w	ip, [r3, #16]
   13a6e:	615f      	str	r7, [r3, #20]
   13a70:	6198      	str	r0, [r3, #24]
   13a72:	61d9      	str	r1, [r3, #28]
		dp->obj.fs->wflag = 1;
   13a74:	682b      	ldr	r3, [r5, #0]
   13a76:	2101      	movs	r1, #1
   13a78:	70d9      	strb	r1, [r3, #3]
		if (--nent == 0) break;
   13a7a:	3e01      	subs	r6, #1
   13a7c:	d1d8      	bne.n	13a30 <store_xdir+0x26>
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
   13a7e:	2a02      	cmp	r2, #2
   13a80:	bf28      	it	cs
   13a82:	2202      	movcs	r2, #2
}
   13a84:	b2d0      	uxtb	r0, r2
   13a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013a88 <f_read>:
{
   13a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a8c:	b087      	sub	sp, #28
   13a8e:	4605      	mov	r5, r0
   13a90:	460f      	mov	r7, r1
   13a92:	4616      	mov	r6, r2
   13a94:	4699      	mov	r9, r3
	*br = 0;	/* Clear read byte counter */
   13a96:	2300      	movs	r3, #0
   13a98:	f8c9 3000 	str.w	r3, [r9]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
   13a9c:	9003      	str	r0, [sp, #12]
   13a9e:	a905      	add	r1, sp, #20
   13aa0:	f7fe fe7d 	bl	1279e <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
   13aa4:	9002      	str	r0, [sp, #8]
   13aa6:	2800      	cmp	r0, #0
   13aa8:	f040 80ab 	bne.w	13c02 <f_read+0x17a>
   13aac:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
   13ab0:	9302      	str	r3, [sp, #8]
   13ab2:	2b00      	cmp	r3, #0
   13ab4:	f040 80a5 	bne.w	13c02 <f_read+0x17a>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
   13ab8:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   13abc:	f013 0f01 	tst.w	r3, #1
   13ac0:	f000 80a8 	beq.w	13c14 <f_read+0x18c>
	remain = fp->obj.objsize - fp->fptr;
   13ac4:	692a      	ldr	r2, [r5, #16]
   13ac6:	6968      	ldr	r0, [r5, #20]
   13ac8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   13aca:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   13acc:	ebb2 0a03 	subs.w	sl, r2, r3
   13ad0:	eb60 0b01 	sbc.w	fp, r0, r1
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
   13ad4:	2300      	movs	r3, #0
   13ad6:	459b      	cmp	fp, r3
   13ad8:	bf08      	it	eq
   13ada:	45b2      	cmpeq	sl, r6
   13adc:	d24e      	bcs.n	13b7c <f_read+0xf4>
   13ade:	4656      	mov	r6, sl
   13ae0:	e04c      	b.n	13b7c <f_read+0xf4>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
   13ae2:	6c29      	ldr	r1, [r5, #64]	; 0x40
   13ae4:	9803      	ldr	r0, [sp, #12]
   13ae6:	f7ff f839 	bl	12b5c <get_fat>
   13aea:	e061      	b.n	13bb0 <f_read+0x128>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
   13aec:	2302      	movs	r3, #2
   13aee:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
   13af2:	9302      	str	r3, [sp, #8]
   13af4:	e085      	b.n	13c02 <f_read+0x17a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   13af6:	2301      	movs	r3, #1
   13af8:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
   13afc:	9302      	str	r3, [sp, #8]
   13afe:	e080      	b.n	13c02 <f_read+0x17a>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
   13b00:	2302      	movs	r3, #2
   13b02:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
   13b06:	9302      	str	r3, [sp, #8]
   13b08:	e07b      	b.n	13c02 <f_read+0x17a>
				if (fs->wflag && fs->winsect - sect < cc) {
   13b0a:	9905      	ldr	r1, [sp, #20]
   13b0c:	78cb      	ldrb	r3, [r1, #3]
   13b0e:	b15b      	cbz	r3, 13b28 <f_read+0xa0>
   13b10:	6b88      	ldr	r0, [r1, #56]	; 0x38
   13b12:	eba0 000a 	sub.w	r0, r0, sl
   13b16:	42a0      	cmp	r0, r4
   13b18:	d206      	bcs.n	13b28 <f_read+0xa0>
   13b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
   13b1e:	313c      	adds	r1, #60	; 0x3c
   13b20:	eb07 2040 	add.w	r0, r7, r0, lsl #9
   13b24:	f000 ff8d 	bl	14a42 <memcpy>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
   13b28:	0264      	lsls	r4, r4, #9
				continue;
   13b2a:	e019      	b.n	13b60 <f_read+0xd8>
			fp->sect = sect;
   13b2c:	f8c5 a044 	str.w	sl, [r5, #68]	; 0x44
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
   13b30:	6bac      	ldr	r4, [r5, #56]	; 0x38
   13b32:	f3c4 0408 	ubfx	r4, r4, #0, #9
   13b36:	f5c4 7400 	rsb	r4, r4, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
   13b3a:	42a6      	cmp	r6, r4
   13b3c:	d200      	bcs.n	13b40 <f_read+0xb8>
   13b3e:	4634      	mov	r4, r6
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
   13b40:	6c69      	ldr	r1, [r5, #68]	; 0x44
   13b42:	9805      	ldr	r0, [sp, #20]
   13b44:	f7fe fe72 	bl	1282c <move_window>
   13b48:	2800      	cmp	r0, #0
   13b4a:	d15e      	bne.n	13c0a <f_read+0x182>
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
   13b4c:	9905      	ldr	r1, [sp, #20]
   13b4e:	313c      	adds	r1, #60	; 0x3c
   13b50:	6bab      	ldr	r3, [r5, #56]	; 0x38
   13b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
   13b56:	4622      	mov	r2, r4
   13b58:	4419      	add	r1, r3
   13b5a:	4638      	mov	r0, r7
   13b5c:	f000 ff71 	bl	14a42 <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
   13b60:	1b36      	subs	r6, r6, r4
   13b62:	f8d9 3000 	ldr.w	r3, [r9]
   13b66:	4423      	add	r3, r4
   13b68:	f8c9 3000 	str.w	r3, [r9]
   13b6c:	4427      	add	r7, r4
   13b6e:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
   13b72:	1912      	adds	r2, r2, r4
   13b74:	f143 0300 	adc.w	r3, r3, #0
   13b78:	e9c5 230e 	strd	r2, r3, [r5, #56]	; 0x38
   13b7c:	2e00      	cmp	r6, #0
   13b7e:	d040      	beq.n	13c02 <f_read+0x17a>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
   13b80:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
   13b84:	f3c2 0108 	ubfx	r1, r2, #0, #9
   13b88:	9100      	str	r1, [sp, #0]
   13b8a:	2100      	movs	r1, #0
   13b8c:	9101      	str	r1, [sp, #4]
   13b8e:	e9dd 0100 	ldrd	r0, r1, [sp]
   13b92:	4301      	orrs	r1, r0
   13b94:	d1cc      	bne.n	13b30 <f_read+0xa8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
   13b96:	ea4f 2852 	mov.w	r8, r2, lsr #9
   13b9a:	ea48 58c3 	orr.w	r8, r8, r3, lsl #23
   13b9e:	9905      	ldr	r1, [sp, #20]
   13ba0:	8949      	ldrh	r1, [r1, #10]
   13ba2:	3901      	subs	r1, #1
			if (csect == 0) {					/* On the cluster boundary? */
   13ba4:	ea18 0801 	ands.w	r8, r8, r1
   13ba8:	d108      	bne.n	13bbc <f_read+0x134>
				if (fp->fptr == 0) {			/* On the top of the file? */
   13baa:	4313      	orrs	r3, r2
   13bac:	d199      	bne.n	13ae2 <f_read+0x5a>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
   13bae:	68a8      	ldr	r0, [r5, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
   13bb0:	2801      	cmp	r0, #1
   13bb2:	d99b      	bls.n	13aec <f_read+0x64>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   13bb4:	f1b0 3fff 	cmp.w	r0, #4294967295
   13bb8:	d09d      	beq.n	13af6 <f_read+0x6e>
				fp->clust = clst;				/* Update current cluster */
   13bba:	6428      	str	r0, [r5, #64]	; 0x40
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
   13bbc:	f8dd b014 	ldr.w	fp, [sp, #20]
   13bc0:	6c29      	ldr	r1, [r5, #64]	; 0x40
   13bc2:	4658      	mov	r0, fp
   13bc4:	f7fe fd76 	bl	126b4 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
   13bc8:	4682      	mov	sl, r0
   13bca:	2800      	cmp	r0, #0
   13bcc:	d098      	beq.n	13b00 <f_read+0x78>
			sect += csect;
   13bce:	44c2      	add	sl, r8
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
   13bd0:	0a74      	lsrs	r4, r6, #9
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
   13bd2:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   13bd6:	d3a9      	bcc.n	13b2c <f_read+0xa4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
   13bd8:	eb08 0304 	add.w	r3, r8, r4
   13bdc:	f8bb 200a 	ldrh.w	r2, [fp, #10]
   13be0:	4293      	cmp	r3, r2
   13be2:	d901      	bls.n	13be8 <f_read+0x160>
					cc = fs->csize - csect;
   13be4:	eba2 0408 	sub.w	r4, r2, r8
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   13be8:	4623      	mov	r3, r4
   13bea:	4652      	mov	r2, sl
   13bec:	4639      	mov	r1, r7
   13bee:	f89b 0001 	ldrb.w	r0, [fp, #1]
   13bf2:	f7f7 fd19 	bl	b628 <disk_read>
   13bf6:	2800      	cmp	r0, #0
   13bf8:	d087      	beq.n	13b0a <f_read+0x82>
   13bfa:	2301      	movs	r3, #1
   13bfc:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
   13c00:	9302      	str	r3, [sp, #8]
}
   13c02:	9802      	ldr	r0, [sp, #8]
   13c04:	b007      	add	sp, #28
   13c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
   13c0a:	2301      	movs	r3, #1
   13c0c:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
   13c10:	9302      	str	r3, [sp, #8]
   13c12:	e7f6      	b.n	13c02 <f_read+0x17a>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
   13c14:	2307      	movs	r3, #7
   13c16:	9302      	str	r3, [sp, #8]
   13c18:	e7f3      	b.n	13c02 <f_read+0x17a>

00013c1a <f_write>:
{
   13c1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c1e:	b087      	sub	sp, #28
   13c20:	4604      	mov	r4, r0
   13c22:	468b      	mov	fp, r1
   13c24:	4615      	mov	r5, r2
   13c26:	469a      	mov	sl, r3
	*bw = 0;	/* Clear write byte counter */
   13c28:	2300      	movs	r3, #0
   13c2a:	f8ca 3000 	str.w	r3, [sl]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
   13c2e:	9003      	str	r0, [sp, #12]
   13c30:	a905      	add	r1, sp, #20
   13c32:	f7fe fdb4 	bl	1279e <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
   13c36:	9002      	str	r0, [sp, #8]
   13c38:	2800      	cmp	r0, #0
   13c3a:	f040 80e1 	bne.w	13e00 <f_write+0x1e6>
   13c3e:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
   13c42:	9302      	str	r3, [sp, #8]
   13c44:	2b00      	cmp	r3, #0
   13c46:	f040 80db 	bne.w	13e00 <f_write+0x1e6>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   13c4a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   13c4e:	f013 0f02 	tst.w	r3, #2
   13c52:	f000 80f1 	beq.w	13e38 <f_write+0x21e>
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
   13c56:	9b05      	ldr	r3, [sp, #20]
   13c58:	781b      	ldrb	r3, [r3, #0]
   13c5a:	2b04      	cmp	r3, #4
   13c5c:	d07b      	beq.n	13d56 <f_write+0x13c>
   13c5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13c60:	42eb      	cmn	r3, r5
   13c62:	d378      	bcc.n	13d56 <f_write+0x13c>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
   13c64:	43dd      	mvns	r5, r3
   13c66:	e076      	b.n	13d56 <f_write+0x13c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
   13c68:	2100      	movs	r1, #0
   13c6a:	9803      	ldr	r0, [sp, #12]
   13c6c:	f7ff f88d 	bl	12d8a <create_chain>
   13c70:	e08f      	b.n	13d92 <f_write+0x178>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   13c72:	6c21      	ldr	r1, [r4, #64]	; 0x40
   13c74:	9803      	ldr	r0, [sp, #12]
   13c76:	f7ff f888 	bl	12d8a <create_chain>
   13c7a:	e08a      	b.n	13d92 <f_write+0x178>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
   13c7c:	2302      	movs	r3, #2
   13c7e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   13c82:	9302      	str	r3, [sp, #8]
   13c84:	e0bc      	b.n	13e00 <f_write+0x1e6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   13c86:	2301      	movs	r3, #1
   13c88:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   13c8c:	9302      	str	r3, [sp, #8]
   13c8e:	e0b7      	b.n	13e00 <f_write+0x1e6>
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
   13c90:	f7fe fda8 	bl	127e4 <sync_window>
   13c94:	2800      	cmp	r0, #0
   13c96:	f000 808f 	beq.w	13db8 <f_write+0x19e>
   13c9a:	2301      	movs	r3, #1
   13c9c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   13ca0:	9302      	str	r3, [sp, #8]
   13ca2:	e0ad      	b.n	13e00 <f_write+0x1e6>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
   13ca4:	2302      	movs	r3, #2
   13ca6:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   13caa:	9302      	str	r3, [sp, #8]
   13cac:	e0a8      	b.n	13e00 <f_write+0x1e6>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   13cae:	9e05      	ldr	r6, [sp, #20]
   13cb0:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   13cb2:	1bc9      	subs	r1, r1, r7
   13cb4:	4541      	cmp	r1, r8
   13cb6:	d209      	bcs.n	13ccc <f_write+0xb2>
   13cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
   13cbc:	eb0b 2141 	add.w	r1, fp, r1, lsl #9
   13cc0:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   13cc4:	f000 febd 	bl	14a42 <memcpy>
					fs->wflag = 0;
   13cc8:	2300      	movs	r3, #0
   13cca:	70f3      	strb	r3, [r6, #3]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
   13ccc:	ea4f 2848 	mov.w	r8, r8, lsl #9
				continue;
   13cd0:	e025      	b.n	13d1e <f_write+0x104>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
   13cd2:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
   13cd6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   13cda:	4299      	cmp	r1, r3
   13cdc:	bf08      	it	eq
   13cde:	4290      	cmpeq	r0, r2
   13ce0:	f080 8092 	bcs.w	13e08 <f_write+0x1ee>
			fp->sect = sect;
   13ce4:	6467      	str	r7, [r4, #68]	; 0x44
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
   13ce6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13ce8:	f3c3 0808 	ubfx	r8, r3, #0, #9
   13cec:	f5c8 7800 	rsb	r8, r8, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
   13cf0:	4545      	cmp	r5, r8
   13cf2:	d200      	bcs.n	13cf6 <f_write+0xdc>
   13cf4:	46a8      	mov	r8, r5
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
   13cf6:	6c61      	ldr	r1, [r4, #68]	; 0x44
   13cf8:	9805      	ldr	r0, [sp, #20]
   13cfa:	f7fe fd97 	bl	1282c <move_window>
   13cfe:	2800      	cmp	r0, #0
   13d00:	f040 808e 	bne.w	13e20 <f_write+0x206>
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
   13d04:	9805      	ldr	r0, [sp, #20]
   13d06:	303c      	adds	r0, #60	; 0x3c
   13d08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   13d0e:	4642      	mov	r2, r8
   13d10:	4659      	mov	r1, fp
   13d12:	4418      	add	r0, r3
   13d14:	f000 fe95 	bl	14a42 <memcpy>
		fs->wflag = 1;
   13d18:	9b05      	ldr	r3, [sp, #20]
   13d1a:	2201      	movs	r2, #1
   13d1c:	70da      	strb	r2, [r3, #3]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
   13d1e:	eba5 0508 	sub.w	r5, r5, r8
   13d22:	f8da 3000 	ldr.w	r3, [sl]
   13d26:	4443      	add	r3, r8
   13d28:	f8ca 3000 	str.w	r3, [sl]
   13d2c:	44c3      	add	fp, r8
   13d2e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
   13d32:	eb12 0208 	adds.w	r2, r2, r8
   13d36:	f143 0300 	adc.w	r3, r3, #0
   13d3a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
   13d3e:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   13d42:	4617      	mov	r7, r2
   13d44:	461e      	mov	r6, r3
   13d46:	428b      	cmp	r3, r1
   13d48:	bf08      	it	eq
   13d4a:	4282      	cmpeq	r2, r0
   13d4c:	d201      	bcs.n	13d52 <f_write+0x138>
   13d4e:	4607      	mov	r7, r0
   13d50:	460e      	mov	r6, r1
   13d52:	6127      	str	r7, [r4, #16]
   13d54:	6166      	str	r6, [r4, #20]
   13d56:	2d00      	cmp	r5, #0
   13d58:	d067      	beq.n	13e2a <f_write+0x210>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
   13d5a:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
   13d5e:	f3c2 0108 	ubfx	r1, r2, #0, #9
   13d62:	9100      	str	r1, [sp, #0]
   13d64:	2100      	movs	r1, #0
   13d66:	9101      	str	r1, [sp, #4]
   13d68:	e9dd 0100 	ldrd	r0, r1, [sp]
   13d6c:	4301      	orrs	r1, r0
   13d6e:	d1ba      	bne.n	13ce6 <f_write+0xcc>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
   13d70:	ea4f 2952 	mov.w	r9, r2, lsr #9
   13d74:	ea49 59c3 	orr.w	r9, r9, r3, lsl #23
   13d78:	9905      	ldr	r1, [sp, #20]
   13d7a:	8949      	ldrh	r1, [r1, #10]
   13d7c:	3901      	subs	r1, #1
			if (csect == 0) {				/* On the cluster boundary? */
   13d7e:	ea19 0901 	ands.w	r9, r9, r1
   13d82:	d113      	bne.n	13dac <f_write+0x192>
				if (fp->fptr == 0) {		/* On the top of the file? */
   13d84:	4313      	orrs	r3, r2
   13d86:	f47f af74 	bne.w	13c72 <f_write+0x58>
					clst = fp->obj.sclust;	/* Follow from the origin */
   13d8a:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
   13d8c:	2800      	cmp	r0, #0
   13d8e:	f43f af6b 	beq.w	13c68 <f_write+0x4e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   13d92:	2800      	cmp	r0, #0
   13d94:	d049      	beq.n	13e2a <f_write+0x210>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
   13d96:	2801      	cmp	r0, #1
   13d98:	f43f af70 	beq.w	13c7c <f_write+0x62>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   13d9c:	f1b0 3fff 	cmp.w	r0, #4294967295
   13da0:	f43f af71 	beq.w	13c86 <f_write+0x6c>
				fp->clust = clst;			/* Update current cluster */
   13da4:	6420      	str	r0, [r4, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
   13da6:	68a3      	ldr	r3, [r4, #8]
   13da8:	b903      	cbnz	r3, 13dac <f_write+0x192>
   13daa:	60a0      	str	r0, [r4, #8]
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
   13dac:	9805      	ldr	r0, [sp, #20]
   13dae:	6b82      	ldr	r2, [r0, #56]	; 0x38
   13db0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   13db2:	429a      	cmp	r2, r3
   13db4:	f43f af6c 	beq.w	13c90 <f_write+0x76>
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
   13db8:	9e05      	ldr	r6, [sp, #20]
   13dba:	6c21      	ldr	r1, [r4, #64]	; 0x40
   13dbc:	4630      	mov	r0, r6
   13dbe:	f7fe fc79 	bl	126b4 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
   13dc2:	4607      	mov	r7, r0
   13dc4:	2800      	cmp	r0, #0
   13dc6:	f43f af6d 	beq.w	13ca4 <f_write+0x8a>
			sect += csect;
   13dca:	444f      	add	r7, r9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
   13dcc:	ea4f 2855 	mov.w	r8, r5, lsr #9
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
   13dd0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   13dd4:	f4ff af7d 	bcc.w	13cd2 <f_write+0xb8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
   13dd8:	eb09 0308 	add.w	r3, r9, r8
   13ddc:	8972      	ldrh	r2, [r6, #10]
   13dde:	4293      	cmp	r3, r2
   13de0:	d901      	bls.n	13de6 <f_write+0x1cc>
					cc = fs->csize - csect;
   13de2:	eba2 0809 	sub.w	r8, r2, r9
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   13de6:	4643      	mov	r3, r8
   13de8:	463a      	mov	r2, r7
   13dea:	4659      	mov	r1, fp
   13dec:	7870      	ldrb	r0, [r6, #1]
   13dee:	f7f7 fc43 	bl	b678 <disk_write>
   13df2:	2800      	cmp	r0, #0
   13df4:	f43f af5b 	beq.w	13cae <f_write+0x94>
   13df8:	2301      	movs	r3, #1
   13dfa:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   13dfe:	9302      	str	r3, [sp, #8]
}
   13e00:	9802      	ldr	r0, [sp, #8]
   13e02:	b007      	add	sp, #28
   13e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
   13e08:	4630      	mov	r0, r6
   13e0a:	f7fe fceb 	bl	127e4 <sync_window>
   13e0e:	b910      	cbnz	r0, 13e16 <f_write+0x1fc>
				fs->winsect = sect;
   13e10:	9b05      	ldr	r3, [sp, #20]
   13e12:	639f      	str	r7, [r3, #56]	; 0x38
   13e14:	e766      	b.n	13ce4 <f_write+0xca>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
   13e16:	2301      	movs	r3, #1
   13e18:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   13e1c:	9302      	str	r3, [sp, #8]
   13e1e:	e7ef      	b.n	13e00 <f_write+0x1e6>
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
   13e20:	2301      	movs	r3, #1
   13e22:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   13e26:	9302      	str	r3, [sp, #8]
   13e28:	e7ea      	b.n	13e00 <f_write+0x1e6>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
   13e2a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   13e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13e32:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	LEAVE_FF(fs, FR_OK);
   13e36:	e7e3      	b.n	13e00 <f_write+0x1e6>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   13e38:	2307      	movs	r3, #7
   13e3a:	9302      	str	r3, [sp, #8]
   13e3c:	e7e0      	b.n	13e00 <f_write+0x1e6>

00013e3e <f_close>:
{
   13e3e:	b510      	push	{r4, lr}
   13e40:	b082      	sub	sp, #8
   13e42:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
   13e44:	f7f6 fc46 	bl	a6d4 <f_sync>
	if (res == FR_OK)
   13e48:	b108      	cbz	r0, 13e4e <f_close+0x10>
}
   13e4a:	b002      	add	sp, #8
   13e4c:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
   13e4e:	a901      	add	r1, sp, #4
   13e50:	4620      	mov	r0, r4
   13e52:	f7fe fca4 	bl	1279e <validate>
		if (res == FR_OK) {
   13e56:	2800      	cmp	r0, #0
   13e58:	d1f7      	bne.n	13e4a <f_close+0xc>
			fp->obj.fs = 0;	/* Invalidate file object */
   13e5a:	6020      	str	r0, [r4, #0]
   13e5c:	e7f5      	b.n	13e4a <f_close+0xc>

00013e5e <f_lseek>:
{
   13e5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e62:	b089      	sub	sp, #36	; 0x24
   13e64:	4604      	mov	r4, r0
   13e66:	4616      	mov	r6, r2
   13e68:	461f      	mov	r7, r3
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
   13e6a:	4683      	mov	fp, r0
   13e6c:	a907      	add	r1, sp, #28
   13e6e:	f7fe fc96 	bl	1279e <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
   13e72:	4605      	mov	r5, r0
   13e74:	b908      	cbnz	r0, 13e7a <f_lseek+0x1c>
   13e76:	f894 5031 	ldrb.w	r5, [r4, #49]	; 0x31
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
   13e7a:	b91d      	cbnz	r5, 13e84 <f_lseek+0x26>
   13e7c:	9b07      	ldr	r3, [sp, #28]
   13e7e:	781b      	ldrb	r3, [r3, #0]
   13e80:	2b04      	cmp	r3, #4
   13e82:	d059      	beq.n	13f38 <f_lseek+0xda>
	if (res != FR_OK) LEAVE_FF(fs, res);
   13e84:	2d00      	cmp	r5, #0
   13e86:	f040 80ec 	bne.w	14062 <f_lseek+0x204>
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
   13e8a:	9b07      	ldr	r3, [sp, #28]
   13e8c:	781a      	ldrb	r2, [r3, #0]
   13e8e:	2a04      	cmp	r2, #4
   13e90:	d006      	beq.n	13ea0 <f_lseek+0x42>
   13e92:	2f01      	cmp	r7, #1
   13e94:	bf08      	it	eq
   13e96:	2e00      	cmpeq	r6, #0
   13e98:	d302      	bcc.n	13ea0 <f_lseek+0x42>
   13e9a:	f04f 36ff 	mov.w	r6, #4294967295
   13e9e:	2700      	movs	r7, #0
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
   13ea0:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   13ea4:	42b9      	cmp	r1, r7
   13ea6:	bf08      	it	eq
   13ea8:	42b0      	cmpeq	r0, r6
   13eaa:	d206      	bcs.n	13eba <f_lseek+0x5c>
   13eac:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   13eb0:	f012 0f02 	tst.w	r2, #2
   13eb4:	d101      	bne.n	13eba <f_lseek+0x5c>
			ofs = fp->obj.objsize;
   13eb6:	4606      	mov	r6, r0
   13eb8:	460f      	mov	r7, r1
		ifptr = fp->fptr;
   13eba:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
   13ebe:	e9cd 1200 	strd	r1, r2, [sp]
		fp->fptr = nsect = 0;
   13ec2:	2000      	movs	r0, #0
   13ec4:	2100      	movs	r1, #0
   13ec6:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		if (ofs > 0) {
   13eca:	ea56 0207 	orrs.w	r2, r6, r7
   13ece:	f000 80ae 	beq.w	1402e <f_lseek+0x1d0>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
   13ed2:	f8b3 a00a 	ldrh.w	sl, [r3, #10]
   13ed6:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
			if (ifptr > 0 &&
   13eda:	e9dd 1200 	ldrd	r1, r2, [sp]
   13ede:	ea51 0302 	orrs.w	r3, r1, r2
   13ee2:	d031      	beq.n	13f48 <f_lseek+0xea>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
   13ee4:	4652      	mov	r2, sl
   13ee6:	2300      	movs	r3, #0
   13ee8:	f116 30ff 	adds.w	r0, r6, #4294967295
   13eec:	f147 31ff 	adc.w	r1, r7, #4294967295
   13ef0:	f7ed f870 	bl	fd4 <__aeabi_uldivmod>
   13ef4:	9002      	str	r0, [sp, #8]
   13ef6:	9103      	str	r1, [sp, #12]
   13ef8:	9b00      	ldr	r3, [sp, #0]
   13efa:	f113 31ff 	adds.w	r1, r3, #4294967295
   13efe:	9b01      	ldr	r3, [sp, #4]
   13f00:	f143 33ff 	adc.w	r3, r3, #4294967295
   13f04:	9300      	str	r3, [sp, #0]
   13f06:	4652      	mov	r2, sl
   13f08:	2300      	movs	r3, #0
   13f0a:	9105      	str	r1, [sp, #20]
   13f0c:	4608      	mov	r0, r1
   13f0e:	9900      	ldr	r1, [sp, #0]
   13f10:	f7ed f860 	bl	fd4 <__aeabi_uldivmod>
			if (ifptr > 0 &&
   13f14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   13f18:	428b      	cmp	r3, r1
   13f1a:	bf08      	it	eq
   13f1c:	4282      	cmpeq	r2, r0
   13f1e:	d313      	bcc.n	13f48 <f_lseek+0xea>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
   13f20:	f1ca 0100 	rsb	r1, sl, #0
   13f24:	9805      	ldr	r0, [sp, #20]
   13f26:	4008      	ands	r0, r1
   13f28:	9a00      	ldr	r2, [sp, #0]
   13f2a:	63a0      	str	r0, [r4, #56]	; 0x38
   13f2c:	63e2      	str	r2, [r4, #60]	; 0x3c
				ofs -= fp->fptr;
   13f2e:	1a36      	subs	r6, r6, r0
   13f30:	eb67 0702 	sbc.w	r7, r7, r2
				clst = fp->clust;
   13f34:	6c21      	ldr	r1, [r4, #64]	; 0x40
   13f36:	e00a      	b.n	13f4e <f_lseek+0xf0>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
   13f38:	f04f 32ff 	mov.w	r2, #4294967295
   13f3c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   13f3e:	4620      	mov	r0, r4
   13f40:	f7fe fddb 	bl	12afa <fill_last_frag>
   13f44:	4605      	mov	r5, r0
   13f46:	e79d      	b.n	13e84 <f_lseek+0x26>
				clst = fp->obj.sclust;					/* start from the first cluster */
   13f48:	68a1      	ldr	r1, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
   13f4a:	b111      	cbz	r1, 13f52 <f_lseek+0xf4>
				fp->clust = clst;
   13f4c:	6421      	str	r1, [r4, #64]	; 0x40
			if (clst != 0) {
   13f4e:	bb19      	cbnz	r1, 13f98 <f_lseek+0x13a>
   13f50:	e06e      	b.n	14030 <f_lseek+0x1d2>
					clst = create_chain(&fp->obj, 0);
   13f52:	4620      	mov	r0, r4
   13f54:	f7fe ff19 	bl	12d8a <create_chain>
   13f58:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
   13f5a:	2801      	cmp	r0, #1
   13f5c:	d004      	beq.n	13f68 <f_lseek+0x10a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   13f5e:	f1b0 3fff 	cmp.w	r0, #4294967295
   13f62:	d005      	beq.n	13f70 <f_lseek+0x112>
					fp->obj.sclust = clst;
   13f64:	60a0      	str	r0, [r4, #8]
   13f66:	e7f1      	b.n	13f4c <f_lseek+0xee>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
   13f68:	2502      	movs	r5, #2
   13f6a:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
   13f6e:	e078      	b.n	14062 <f_lseek+0x204>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   13f70:	2501      	movs	r5, #1
   13f72:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
   13f76:	e074      	b.n	14062 <f_lseek+0x204>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
   13f78:	4658      	mov	r0, fp
   13f7a:	f7fe ff06 	bl	12d8a <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
   13f7e:	4601      	mov	r1, r0
   13f80:	2800      	cmp	r0, #0
   13f82:	d039      	beq.n	13ff8 <f_lseek+0x19a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   13f84:	f1b1 3fff 	cmp.w	r1, #4294967295
   13f88:	d02e      	beq.n	13fe8 <f_lseek+0x18a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
   13f8a:	2901      	cmp	r1, #1
   13f8c:	d930      	bls.n	13ff0 <f_lseek+0x192>
   13f8e:	9b07      	ldr	r3, [sp, #28]
   13f90:	69db      	ldr	r3, [r3, #28]
   13f92:	428b      	cmp	r3, r1
   13f94:	d92c      	bls.n	13ff0 <f_lseek+0x192>
					fp->clust = clst;
   13f96:	6421      	str	r1, [r4, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
   13f98:	4652      	mov	r2, sl
   13f9a:	2300      	movs	r3, #0
   13f9c:	42bb      	cmp	r3, r7
   13f9e:	bf08      	it	eq
   13fa0:	45b2      	cmpeq	sl, r6
   13fa2:	d22b      	bcs.n	13ffc <f_lseek+0x19e>
					ofs -= bcs; fp->fptr += bcs;
   13fa4:	1ab6      	subs	r6, r6, r2
   13fa6:	eb67 0703 	sbc.w	r7, r7, r3
   13faa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   13fac:	eb12 0800 	adds.w	r8, r2, r0
   13fb0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   13fb2:	eb43 0900 	adc.w	r9, r3, r0
   13fb6:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
   13fba:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
   13fbe:	f010 0f02 	tst.w	r0, #2
   13fc2:	d00c      	beq.n	13fde <f_lseek+0x180>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
   13fc4:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   13fc8:	454b      	cmp	r3, r9
   13fca:	bf08      	it	eq
   13fcc:	4542      	cmpeq	r2, r8
   13fce:	d2d3      	bcs.n	13f78 <f_lseek+0x11a>
							fp->obj.objsize = fp->fptr;
   13fd0:	e9c4 8904 	strd	r8, r9, [r4, #16]
							fp->flag |= FA_MODIFIED;
   13fd4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   13fd8:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
   13fdc:	e7cc      	b.n	13f78 <f_lseek+0x11a>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
   13fde:	4658      	mov	r0, fp
   13fe0:	f7fe fdbc 	bl	12b5c <get_fat>
   13fe4:	4601      	mov	r1, r0
   13fe6:	e7cd      	b.n	13f84 <f_lseek+0x126>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   13fe8:	2501      	movs	r5, #1
   13fea:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
   13fee:	e038      	b.n	14062 <f_lseek+0x204>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
   13ff0:	2502      	movs	r5, #2
   13ff2:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
   13ff6:	e034      	b.n	14062 <f_lseek+0x204>
							ofs = 0; break;
   13ff8:	2600      	movs	r6, #0
   13ffa:	2700      	movs	r7, #0
				fp->fptr += ofs;
   13ffc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13ffe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   14000:	199b      	adds	r3, r3, r6
   14002:	eb47 0202 	adc.w	r2, r7, r2
   14006:	63a3      	str	r3, [r4, #56]	; 0x38
   14008:	63e2      	str	r2, [r4, #60]	; 0x3c
				if (ofs % SS(fs)) {
   1400a:	f3c6 0208 	ubfx	r2, r6, #0, #9
   1400e:	2300      	movs	r3, #0
   14010:	4313      	orrs	r3, r2
   14012:	d02a      	beq.n	1406a <f_lseek+0x20c>
					nsect = clst2sect(fs, clst);	/* Current sector */
   14014:	9807      	ldr	r0, [sp, #28]
   14016:	f7fe fb4d 	bl	126b4 <clst2sect>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
   1401a:	b120      	cbz	r0, 14026 <f_lseek+0x1c8>
					nsect += (DWORD)(ofs / SS(fs));
   1401c:	0a71      	lsrs	r1, r6, #9
   1401e:	ea41 51c7 	orr.w	r1, r1, r7, lsl #23
   14022:	4401      	add	r1, r0
   14024:	e004      	b.n	14030 <f_lseek+0x1d2>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
   14026:	2502      	movs	r5, #2
   14028:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
   1402c:	e019      	b.n	14062 <f_lseek+0x204>
		fp->fptr = nsect = 0;
   1402e:	2100      	movs	r1, #0
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
   14030:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
   14034:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   14038:	42bb      	cmp	r3, r7
   1403a:	bf08      	it	eq
   1403c:	42b2      	cmpeq	r2, r6
   1403e:	d207      	bcs.n	14050 <f_lseek+0x1f2>
			fp->obj.objsize = fp->fptr;
   14040:	e9c4 6704 	strd	r6, r7, [r4, #16]
			fp->flag |= FA_MODIFIED;
   14044:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   14048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1404c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
   14050:	f3c6 0208 	ubfx	r2, r6, #0, #9
   14054:	2300      	movs	r3, #0
   14056:	4313      	orrs	r3, r2
   14058:	d003      	beq.n	14062 <f_lseek+0x204>
   1405a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1405c:	428b      	cmp	r3, r1
   1405e:	d000      	beq.n	14062 <f_lseek+0x204>
			fp->sect = nsect;
   14060:	6461      	str	r1, [r4, #68]	; 0x44
}
   14062:	4628      	mov	r0, r5
   14064:	b009      	add	sp, #36	; 0x24
   14066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		fp->fptr = nsect = 0;
   1406a:	2100      	movs	r1, #0
   1406c:	e7e0      	b.n	14030 <f_lseek+0x1d2>

0001406e <f_opendir>:
{
   1406e:	b510      	push	{r4, lr}
   14070:	b084      	sub	sp, #16
   14072:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
   14074:	2800      	cmp	r0, #0
   14076:	d041      	beq.n	140fc <f_opendir+0x8e>
   14078:	4604      	mov	r4, r0
	res = mount_volume(&path, &fs, 0);
   1407a:	2200      	movs	r2, #0
   1407c:	a903      	add	r1, sp, #12
   1407e:	a801      	add	r0, sp, #4
   14080:	f7f5 fb52 	bl	9728 <mount_volume>
	if (res == FR_OK) {
   14084:	4603      	mov	r3, r0
   14086:	b128      	cbz	r0, 14094 <f_opendir+0x26>
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
   14088:	b10b      	cbz	r3, 1408e <f_opendir+0x20>
   1408a:	2200      	movs	r2, #0
   1408c:	6022      	str	r2, [r4, #0]
}
   1408e:	4618      	mov	r0, r3
   14090:	b004      	add	sp, #16
   14092:	bd10      	pop	{r4, pc}
		dp->obj.fs = fs;
   14094:	9b03      	ldr	r3, [sp, #12]
   14096:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
   14098:	9901      	ldr	r1, [sp, #4]
   1409a:	4620      	mov	r0, r4
   1409c:	f7ff fbe2 	bl	13864 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
   140a0:	4603      	mov	r3, r0
   140a2:	b9b8      	cbnz	r0, 140d4 <f_opendir+0x66>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
   140a4:	f994 304b 	ldrsb.w	r3, [r4, #75]	; 0x4b
   140a8:	2b00      	cmp	r3, #0
   140aa:	db0b      	blt.n	140c4 <f_opendir+0x56>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
   140ac:	79a3      	ldrb	r3, [r4, #6]
   140ae:	f013 0f10 	tst.w	r3, #16
   140b2:	d021      	beq.n	140f8 <f_opendir+0x8a>
					if (fs->fs_type == FS_EXFAT) {
   140b4:	9803      	ldr	r0, [sp, #12]
   140b6:	7803      	ldrb	r3, [r0, #0]
   140b8:	2b04      	cmp	r3, #4
   140ba:	d00f      	beq.n	140dc <f_opendir+0x6e>
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
   140bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   140be:	f7fe fb05 	bl	126cc <ld_clust>
   140c2:	60a0      	str	r0, [r4, #8]
				dp->obj.id = fs->id;
   140c4:	9b03      	ldr	r3, [sp, #12]
   140c6:	88db      	ldrh	r3, [r3, #6]
   140c8:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
   140ca:	2100      	movs	r1, #0
   140cc:	4620      	mov	r0, r4
   140ce:	f7fe fdfc 	bl	12cca <dir_sdi>
   140d2:	4603      	mov	r3, r0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
   140d4:	2b04      	cmp	r3, #4
   140d6:	d1d7      	bne.n	14088 <f_opendir+0x1a>
   140d8:	2305      	movs	r3, #5
   140da:	e7d6      	b.n	1408a <f_opendir+0x1c>
						dp->obj.c_scl = dp->obj.sclust;							/* Get containing directory inforamation */
   140dc:	68a3      	ldr	r3, [r4, #8]
   140de:	6223      	str	r3, [r4, #32]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
   140e0:	6923      	ldr	r3, [r4, #16]
   140e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   140e6:	79e2      	ldrb	r2, [r4, #7]
   140e8:	4313      	orrs	r3, r2
   140ea:	6263      	str	r3, [r4, #36]	; 0x24
						dp->obj.c_ofs = dp->blk_ofs;
   140ec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   140ee:	62a3      	str	r3, [r4, #40]	; 0x28
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
   140f0:	4621      	mov	r1, r4
   140f2:	f7fe fb3d 	bl	12770 <init_alloc_info>
   140f6:	e7e5      	b.n	140c4 <f_opendir+0x56>
					res = FR_NO_PATH;
   140f8:	2305      	movs	r3, #5
   140fa:	e7eb      	b.n	140d4 <f_opendir+0x66>
	if (!dp) return FR_INVALID_OBJECT;
   140fc:	2309      	movs	r3, #9
   140fe:	e7c6      	b.n	1408e <f_opendir+0x20>

00014100 <f_closedir>:
{
   14100:	b510      	push	{r4, lr}
   14102:	b082      	sub	sp, #8
   14104:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
   14106:	a901      	add	r1, sp, #4
   14108:	f7fe fb49 	bl	1279e <validate>
	if (res == FR_OK) {
   1410c:	b900      	cbnz	r0, 14110 <f_closedir+0x10>
		dp->obj.fs = 0;	/* Invalidate directory object */
   1410e:	6020      	str	r0, [r4, #0]
}
   14110:	b002      	add	sp, #8
   14112:	bd10      	pop	{r4, pc}

00014114 <f_readdir>:
{
   14114:	b570      	push	{r4, r5, r6, lr}
   14116:	b082      	sub	sp, #8
   14118:	4604      	mov	r4, r0
   1411a:	460d      	mov	r5, r1
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
   1411c:	a901      	add	r1, sp, #4
   1411e:	f7fe fb3e 	bl	1279e <validate>
	if (res == FR_OK) {
   14122:	4606      	mov	r6, r0
   14124:	b9c0      	cbnz	r0, 14158 <f_readdir+0x44>
		if (!fno) {
   14126:	b195      	cbz	r5, 1414e <f_readdir+0x3a>
			res = DIR_READ_FILE(dp);		/* Read an item */
   14128:	2100      	movs	r1, #0
   1412a:	4620      	mov	r0, r4
   1412c:	f7ff fa6a 	bl	13604 <dir_read>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
   14130:	2804      	cmp	r0, #4
   14132:	d000      	beq.n	14136 <f_readdir+0x22>
			if (res == FR_OK) {				/* A valid entry is found */
   14134:	b998      	cbnz	r0, 1415e <f_readdir+0x4a>
				get_fileinfo(dp, fno);		/* Get the object information */
   14136:	4629      	mov	r1, r5
   14138:	4620      	mov	r0, r4
   1413a:	f7ff f8d7 	bl	132ec <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
   1413e:	2100      	movs	r1, #0
   14140:	4620      	mov	r0, r4
   14142:	f7fe ffe3 	bl	1310c <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
   14146:	2804      	cmp	r0, #4
   14148:	d006      	beq.n	14158 <f_readdir+0x44>
				res = dir_next(dp, 0);		/* Increment index for next */
   1414a:	4606      	mov	r6, r0
   1414c:	e004      	b.n	14158 <f_readdir+0x44>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
   1414e:	2100      	movs	r1, #0
   14150:	4620      	mov	r0, r4
   14152:	f7fe fdba 	bl	12cca <dir_sdi>
   14156:	4606      	mov	r6, r0
}
   14158:	4630      	mov	r0, r6
   1415a:	b002      	add	sp, #8
   1415c:	bd70      	pop	{r4, r5, r6, pc}
			res = DIR_READ_FILE(dp);		/* Read an item */
   1415e:	4606      	mov	r6, r0
   14160:	e7fa      	b.n	14158 <f_readdir+0x44>

00014162 <f_stat>:
{
   14162:	b530      	push	{r4, r5, lr}
   14164:	b097      	sub	sp, #92	; 0x5c
   14166:	9001      	str	r0, [sp, #4]
   14168:	460c      	mov	r4, r1
	res = mount_volume(&path, &dj.obj.fs, 0);
   1416a:	2200      	movs	r2, #0
   1416c:	a902      	add	r1, sp, #8
   1416e:	a801      	add	r0, sp, #4
   14170:	f7f5 fada 	bl	9728 <mount_volume>
	if (res == FR_OK) {
   14174:	4605      	mov	r5, r0
   14176:	b110      	cbz	r0, 1417e <f_stat+0x1c>
}
   14178:	4628      	mov	r0, r5
   1417a:	b017      	add	sp, #92	; 0x5c
   1417c:	bd30      	pop	{r4, r5, pc}
		res = follow_path(&dj, path);	/* Follow the file path */
   1417e:	9901      	ldr	r1, [sp, #4]
   14180:	a802      	add	r0, sp, #8
   14182:	f7ff fb6f 	bl	13864 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
   14186:	4605      	mov	r5, r0
   14188:	2800      	cmp	r0, #0
   1418a:	d1f5      	bne.n	14178 <f_stat+0x16>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
   1418c:	f99d 3053 	ldrsb.w	r3, [sp, #83]	; 0x53
   14190:	2b00      	cmp	r3, #0
   14192:	db06      	blt.n	141a2 <f_stat+0x40>
				if (fno) get_fileinfo(&dj, fno);
   14194:	2c00      	cmp	r4, #0
   14196:	d0ef      	beq.n	14178 <f_stat+0x16>
   14198:	4621      	mov	r1, r4
   1419a:	a802      	add	r0, sp, #8
   1419c:	f7ff f8a6 	bl	132ec <get_fileinfo>
   141a0:	e7ea      	b.n	14178 <f_stat+0x16>
				res = FR_INVALID_NAME;
   141a2:	2506      	movs	r5, #6
   141a4:	e7e8      	b.n	14178 <f_stat+0x16>

000141a6 <f_getfree>:
{
   141a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   141aa:	b090      	sub	sp, #64	; 0x40
   141ac:	9001      	str	r0, [sp, #4]
   141ae:	460e      	mov	r6, r1
   141b0:	4614      	mov	r4, r2
	res = mount_volume(&path, &fs, 0);
   141b2:	2200      	movs	r2, #0
   141b4:	a90f      	add	r1, sp, #60	; 0x3c
   141b6:	a801      	add	r0, sp, #4
   141b8:	f7f5 fab6 	bl	9728 <mount_volume>
	if (res == FR_OK) {
   141bc:	4607      	mov	r7, r0
   141be:	b948      	cbnz	r0, 141d4 <f_getfree+0x2e>
		*fatfs = fs;				/* Return ptr to the fs object */
   141c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   141c2:	6023      	str	r3, [r4, #0]
		if (fs->free_clst <= fs->n_fatent - 2) {
   141c4:	699a      	ldr	r2, [r3, #24]
   141c6:	f8d3 801c 	ldr.w	r8, [r3, #28]
   141ca:	f1a8 0402 	sub.w	r4, r8, #2
   141ce:	42a2      	cmp	r2, r4
   141d0:	d804      	bhi.n	141dc <f_getfree+0x36>
			*nclst = fs->free_clst;
   141d2:	6032      	str	r2, [r6, #0]
}
   141d4:	4638      	mov	r0, r7
   141d6:	b010      	add	sp, #64	; 0x40
   141d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
   141dc:	f893 9000 	ldrb.w	r9, [r3]
   141e0:	f1b9 0f01 	cmp.w	r9, #1
   141e4:	d007      	beq.n	141f6 <f_getfree+0x50>
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan allocation bitmap */
   141e6:	f1b9 0f04 	cmp.w	r9, #4
   141ea:	d01a      	beq.n	14222 <f_getfree+0x7c>
					sect = fs->fatbase;		/* Top of the FAT */
   141ec:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
					i = 0;					/* Offset in the sector */
   141f0:	2400      	movs	r4, #0
			nfree = 0;
   141f2:	4625      	mov	r5, r4
   141f4:	e054      	b.n	142a0 <f_getfree+0xfa>
				clst = 2; obj.fs = fs;
   141f6:	9302      	str	r3, [sp, #8]
   141f8:	2402      	movs	r4, #2
			nfree = 0;
   141fa:	2500      	movs	r5, #0
   141fc:	e004      	b.n	14208 <f_getfree+0x62>
				} while (++clst < fs->n_fatent);
   141fe:	3401      	adds	r4, #1
   14200:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14202:	69db      	ldr	r3, [r3, #28]
   14204:	42a3      	cmp	r3, r4
   14206:	d95b      	bls.n	142c0 <f_getfree+0x11a>
					stat = get_fat(&obj, clst);
   14208:	4621      	mov	r1, r4
   1420a:	a802      	add	r0, sp, #8
   1420c:	f7fe fca6 	bl	12b5c <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
   14210:	f1b0 3fff 	cmp.w	r0, #4294967295
   14214:	d053      	beq.n	142be <f_getfree+0x118>
					if (stat == 1) { res = FR_INT_ERR; break; }
   14216:	2801      	cmp	r0, #1
   14218:	d05c      	beq.n	142d4 <f_getfree+0x12e>
					if (stat == 0) nfree++;
   1421a:	2800      	cmp	r0, #0
   1421c:	d1ef      	bne.n	141fe <f_getfree+0x58>
   1421e:	3501      	adds	r5, #1
   14220:	e7ed      	b.n	141fe <f_getfree+0x58>
					sect = fs->bitbase;			/* Bitmap sector */
   14222:	6b59      	ldr	r1, [r3, #52]	; 0x34
					i = 0;						/* Offset in the sector */
   14224:	f04f 0800 	mov.w	r8, #0
			nfree = 0;
   14228:	4645      	mov	r5, r8
   1422a:	e018      	b.n	1425e <f_getfree+0xb8>
							res = move_window(fs, sect++);
   1422c:	f101 0901 	add.w	r9, r1, #1
   14230:	980f      	ldr	r0, [sp, #60]	; 0x3c
   14232:	f7fe fafb 	bl	1282c <move_window>
							if (res != FR_OK) break;
   14236:	4607      	mov	r7, r0
   14238:	2800      	cmp	r0, #0
   1423a:	d141      	bne.n	142c0 <f_getfree+0x11a>
							res = move_window(fs, sect++);
   1423c:	4649      	mov	r1, r9
   1423e:	e011      	b.n	14264 <f_getfree+0xbe>
							bm >>= 1;
   14240:	0852      	lsrs	r2, r2, #1
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
   14242:	3b01      	subs	r3, #1
   14244:	3c01      	subs	r4, #1
   14246:	b12b      	cbz	r3, 14254 <f_getfree+0xae>
   14248:	b124      	cbz	r4, 14254 <f_getfree+0xae>
							if (!(bm & 1)) nfree++;
   1424a:	f012 0f01 	tst.w	r2, #1
   1424e:	d1f7      	bne.n	14240 <f_getfree+0x9a>
   14250:	3501      	adds	r5, #1
   14252:	e7f5      	b.n	14240 <f_getfree+0x9a>
						i = (i + 1) % SS(fs);
   14254:	f108 0801 	add.w	r8, r8, #1
   14258:	f3c8 0808 	ubfx	r8, r8, #0, #9
					} while (clst);
   1425c:	b384      	cbz	r4, 142c0 <f_getfree+0x11a>
						if (i == 0) {
   1425e:	f1b8 0f00 	cmp.w	r8, #0
   14262:	d0e3      	beq.n	1422c <f_getfree+0x86>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
   14264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14266:	4443      	add	r3, r8
   14268:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
   1426c:	2308      	movs	r3, #8
   1426e:	e7ea      	b.n	14246 <f_getfree+0xa0>
							res = move_window(fs, sect++);
   14270:	f109 0a01 	add.w	sl, r9, #1
   14274:	4649      	mov	r1, r9
   14276:	980f      	ldr	r0, [sp, #60]	; 0x3c
   14278:	f7fe fad8 	bl	1282c <move_window>
							if (res != FR_OK) break;
   1427c:	4607      	mov	r7, r0
   1427e:	b9f8      	cbnz	r0, 142c0 <f_getfree+0x11a>
							res = move_window(fs, sect++);
   14280:	46d1      	mov	r9, sl
   14282:	e00f      	b.n	142a4 <f_getfree+0xfe>
							if (ld_word(fs->win + i) == 0) nfree++;
   14284:	303c      	adds	r0, #60	; 0x3c
   14286:	4420      	add	r0, r4
   14288:	f7fe f9b8 	bl	125fc <ld_word>
   1428c:	b900      	cbnz	r0, 14290 <f_getfree+0xea>
   1428e:	3501      	adds	r5, #1
							i += 2;
   14290:	3402      	adds	r4, #2
   14292:	e000      	b.n	14296 <f_getfree+0xf0>
							i += 4;
   14294:	3404      	adds	r4, #4
						i %= SS(fs);
   14296:	f3c4 0408 	ubfx	r4, r4, #0, #9
					} while (--clst);
   1429a:	f1b8 0801 	subs.w	r8, r8, #1
   1429e:	d00f      	beq.n	142c0 <f_getfree+0x11a>
						if (i == 0) {
   142a0:	2c00      	cmp	r4, #0
   142a2:	d0e5      	beq.n	14270 <f_getfree+0xca>
						if (fs->fs_type == FS_FAT16) {
   142a4:	980f      	ldr	r0, [sp, #60]	; 0x3c
   142a6:	7803      	ldrb	r3, [r0, #0]
   142a8:	2b02      	cmp	r3, #2
   142aa:	d0eb      	beq.n	14284 <f_getfree+0xde>
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
   142ac:	303c      	adds	r0, #60	; 0x3c
   142ae:	4420      	add	r0, r4
   142b0:	f7fe f9a9 	bl	12606 <ld_dword>
   142b4:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
   142b8:	d1ec      	bne.n	14294 <f_getfree+0xee>
   142ba:	3501      	adds	r5, #1
   142bc:	e7ea      	b.n	14294 <f_getfree+0xee>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
   142be:	464f      	mov	r7, r9
			if (res == FR_OK) {		/* Update parameters if succeeded */
   142c0:	2f00      	cmp	r7, #0
   142c2:	d187      	bne.n	141d4 <f_getfree+0x2e>
				*nclst = nfree;			/* Return the free clusters */
   142c4:	6035      	str	r5, [r6, #0]
				fs->free_clst = nfree;	/* Now free_clst is valid */
   142c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   142c8:	619d      	str	r5, [r3, #24]
				fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
   142ca:	791a      	ldrb	r2, [r3, #4]
   142cc:	f042 0201 	orr.w	r2, r2, #1
   142d0:	711a      	strb	r2, [r3, #4]
   142d2:	e77f      	b.n	141d4 <f_getfree+0x2e>
					if (stat == 1) { res = FR_INT_ERR; break; }
   142d4:	2702      	movs	r7, #2
   142d6:	e7f3      	b.n	142c0 <f_getfree+0x11a>

000142d8 <f_truncate>:
{
   142d8:	b530      	push	{r4, r5, lr}
   142da:	b083      	sub	sp, #12
   142dc:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
   142de:	a901      	add	r1, sp, #4
   142e0:	f7fe fa5d 	bl	1279e <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
   142e4:	4605      	mov	r5, r0
   142e6:	bb28      	cbnz	r0, 14334 <f_truncate+0x5c>
   142e8:	f894 5031 	ldrb.w	r5, [r4, #49]	; 0x31
   142ec:	bb15      	cbnz	r5, 14334 <f_truncate+0x5c>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   142ee:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   142f2:	f013 0f02 	tst.w	r3, #2
   142f6:	d03d      	beq.n	14374 <f_truncate+0x9c>
	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
   142f8:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
   142fc:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   14300:	4299      	cmp	r1, r3
   14302:	bf08      	it	eq
   14304:	4290      	cmpeq	r0, r2
   14306:	d215      	bcs.n	14334 <f_truncate+0x5c>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
   14308:	ea50 0301 	orrs.w	r3, r0, r1
   1430c:	d115      	bne.n	1433a <f_truncate+0x62>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
   1430e:	2200      	movs	r2, #0
   14310:	68a1      	ldr	r1, [r4, #8]
   14312:	4620      	mov	r0, r4
   14314:	f7fe fe24 	bl	12f60 <remove_chain>
   14318:	4605      	mov	r5, r0
			fp->obj.sclust = 0;
   1431a:	2300      	movs	r3, #0
   1431c:	60a3      	str	r3, [r4, #8]
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
   1431e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
   14322:	e9c4 2304 	strd	r2, r3, [r4, #16]
		fp->flag |= FA_MODIFIED;
   14326:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1432a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1432e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if (res != FR_OK) ABORT(fs, res);
   14332:	b9e5      	cbnz	r5, 1436e <f_truncate+0x96>
}
   14334:	4628      	mov	r0, r5
   14336:	b003      	add	sp, #12
   14338:	bd30      	pop	{r4, r5, pc}
			ncl = get_fat(&fp->obj, fp->clust);
   1433a:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1433c:	4620      	mov	r0, r4
   1433e:	f7fe fc0d 	bl	12b5c <get_fat>
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
   14342:	f1b0 3fff 	cmp.w	r0, #4294967295
   14346:	d00e      	beq.n	14366 <f_truncate+0x8e>
			if (ncl == 1) res = FR_INT_ERR;
   14348:	2801      	cmp	r0, #1
   1434a:	d00e      	beq.n	1436a <f_truncate+0x92>
			if (res == FR_OK && ncl < fs->n_fatent) {
   1434c:	2d00      	cmp	r5, #0
   1434e:	d1e6      	bne.n	1431e <f_truncate+0x46>
   14350:	9b01      	ldr	r3, [sp, #4]
   14352:	69db      	ldr	r3, [r3, #28]
   14354:	4283      	cmp	r3, r0
   14356:	d9e2      	bls.n	1431e <f_truncate+0x46>
				res = remove_chain(&fp->obj, ncl, fp->clust);
   14358:	6c22      	ldr	r2, [r4, #64]	; 0x40
   1435a:	4601      	mov	r1, r0
   1435c:	4620      	mov	r0, r4
   1435e:	f7fe fdff 	bl	12f60 <remove_chain>
   14362:	4605      	mov	r5, r0
   14364:	e7db      	b.n	1431e <f_truncate+0x46>
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
   14366:	2501      	movs	r5, #1
   14368:	e7ee      	b.n	14348 <f_truncate+0x70>
			if (ncl == 1) res = FR_INT_ERR;
   1436a:	2502      	movs	r5, #2
   1436c:	e7d7      	b.n	1431e <f_truncate+0x46>
		if (res != FR_OK) ABORT(fs, res);
   1436e:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
   14372:	e7df      	b.n	14334 <f_truncate+0x5c>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   14374:	2507      	movs	r5, #7
   14376:	e7dd      	b.n	14334 <f_truncate+0x5c>

00014378 <f_unlink>:
{
   14378:	b530      	push	{r4, r5, lr}
   1437a:	b0b9      	sub	sp, #228	; 0xe4
   1437c:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &fs, FA_WRITE);
   1437e:	2202      	movs	r2, #2
   14380:	a90f      	add	r1, sp, #60	; 0x3c
   14382:	a801      	add	r0, sp, #4
   14384:	f7f5 f9d0 	bl	9728 <mount_volume>
	if (res == FR_OK) {
   14388:	4604      	mov	r4, r0
   1438a:	b110      	cbz	r0, 14392 <f_unlink+0x1a>
}
   1438c:	4620      	mov	r0, r4
   1438e:	b039      	add	sp, #228	; 0xe4
   14390:	bd30      	pop	{r4, r5, pc}
		dj.obj.fs = fs;
   14392:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14394:	9324      	str	r3, [sp, #144]	; 0x90
		res = follow_path(&dj, path);		/* Follow the file path */
   14396:	9901      	ldr	r1, [sp, #4]
   14398:	a824      	add	r0, sp, #144	; 0x90
   1439a:	f7ff fa63 	bl	13864 <follow_path>
		if (res == FR_OK) {					/* The object is accessible */
   1439e:	4604      	mov	r4, r0
   143a0:	2800      	cmp	r0, #0
   143a2:	d1f3      	bne.n	1438c <f_unlink+0x14>
			if (dj.fn[NSFLAG] & NS_NONAME) {
   143a4:	f99d 30db 	ldrsb.w	r3, [sp, #219]	; 0xdb
   143a8:	2b00      	cmp	r3, #0
   143aa:	db35      	blt.n	14418 <f_unlink+0xa0>
				if (dj.obj.attr & AM_RDO) {
   143ac:	f89d 3096 	ldrb.w	r3, [sp, #150]	; 0x96
   143b0:	f013 0f01 	tst.w	r3, #1
   143b4:	d141      	bne.n	1443a <f_unlink+0xc2>
				obj.fs = fs;
   143b6:	980f      	ldr	r0, [sp, #60]	; 0x3c
   143b8:	9002      	str	r0, [sp, #8]
				if (fs->fs_type == FS_EXFAT) {
   143ba:	7803      	ldrb	r3, [r0, #0]
   143bc:	2b04      	cmp	r3, #4
   143be:	d01d      	beq.n	143fc <f_unlink+0x84>
					dclst = ld_clust(fs, dj.dir);
   143c0:	9933      	ldr	r1, [sp, #204]	; 0xcc
   143c2:	f7fe f983 	bl	126cc <ld_clust>
   143c6:	4605      	mov	r5, r0
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
   143c8:	f89d 3096 	ldrb.w	r3, [sp, #150]	; 0x96
   143cc:	f013 0f10 	tst.w	r3, #16
   143d0:	d024      	beq.n	1441c <f_unlink+0xa4>
						sdj.obj.fs = fs;			/* Open the sub-directory */
   143d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   143d4:	9310      	str	r3, [sp, #64]	; 0x40
						sdj.obj.sclust = dclst;
   143d6:	9512      	str	r5, [sp, #72]	; 0x48
						if (fs->fs_type == FS_EXFAT) {
   143d8:	781b      	ldrb	r3, [r3, #0]
   143da:	2b04      	cmp	r3, #4
   143dc:	d013      	beq.n	14406 <f_unlink+0x8e>
						res = dir_sdi(&sdj, 0);
   143de:	2100      	movs	r1, #0
   143e0:	a810      	add	r0, sp, #64	; 0x40
   143e2:	f7fe fc72 	bl	12cca <dir_sdi>
						if (res == FR_OK) {
   143e6:	4604      	mov	r4, r0
   143e8:	b9c0      	cbnz	r0, 1441c <f_unlink+0xa4>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
   143ea:	2100      	movs	r1, #0
   143ec:	a810      	add	r0, sp, #64	; 0x40
   143ee:	f7ff f909 	bl	13604 <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
   143f2:	4604      	mov	r4, r0
   143f4:	b320      	cbz	r0, 14440 <f_unlink+0xc8>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
   143f6:	2804      	cmp	r0, #4
   143f8:	d110      	bne.n	1441c <f_unlink+0xa4>
   143fa:	e011      	b.n	14420 <f_unlink+0xa8>
					init_alloc_info(fs, &obj);
   143fc:	a902      	add	r1, sp, #8
   143fe:	f7fe f9b7 	bl	12770 <init_alloc_info>
					dclst = obj.sclust;
   14402:	9d04      	ldr	r5, [sp, #16]
   14404:	e7e0      	b.n	143c8 <f_unlink+0x50>
							sdj.obj.objsize = obj.objsize;
   14406:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1440a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
							sdj.obj.stat = obj.stat;
   1440e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14412:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
   14416:	e7e2      	b.n	143de <f_unlink+0x66>
	DWORD dclst = 0;
   14418:	2500      	movs	r5, #0
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
   1441a:	2406      	movs	r4, #6
			if (res == FR_OK) {
   1441c:	2c00      	cmp	r4, #0
   1441e:	d1b5      	bne.n	1438c <f_unlink+0x14>
				res = dir_remove(&dj);			/* Remove the directory entry */
   14420:	a824      	add	r0, sp, #144	; 0x90
   14422:	f7fe ff17 	bl	13254 <dir_remove>
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
   14426:	4604      	mov	r4, r0
   14428:	b900      	cbnz	r0, 1442c <f_unlink+0xb4>
   1442a:	b95d      	cbnz	r5, 14444 <f_unlink+0xcc>
				if (res == FR_OK) res = sync_fs(fs);
   1442c:	2c00      	cmp	r4, #0
   1442e:	d1ad      	bne.n	1438c <f_unlink+0x14>
   14430:	980f      	ldr	r0, [sp, #60]	; 0x3c
   14432:	f7f5 fee5 	bl	a200 <sync_fs>
   14436:	4604      	mov	r4, r0
   14438:	e7a8      	b.n	1438c <f_unlink+0x14>
	DWORD dclst = 0;
   1443a:	2500      	movs	r5, #0
					res = FR_DENIED;		/* Cannot remove R/O object */
   1443c:	2407      	movs	r4, #7
   1443e:	e7ed      	b.n	1441c <f_unlink+0xa4>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
   14440:	2407      	movs	r4, #7
   14442:	e7eb      	b.n	1441c <f_unlink+0xa4>
					res = remove_chain(&obj, dclst, 0);
   14444:	2200      	movs	r2, #0
   14446:	4629      	mov	r1, r5
   14448:	a802      	add	r0, sp, #8
   1444a:	f7fe fd89 	bl	12f60 <remove_chain>
   1444e:	4604      	mov	r4, r0
   14450:	e7ec      	b.n	1442c <f_unlink+0xb4>

00014452 <f_rename>:
{
   14452:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14456:	b0bd      	sub	sp, #244	; 0xf4
   14458:	9001      	str	r0, [sp, #4]
   1445a:	9100      	str	r1, [sp, #0]
	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
   1445c:	4668      	mov	r0, sp
   1445e:	f7f5 f89b 	bl	9598 <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
   14462:	2202      	movs	r2, #2
   14464:	a913      	add	r1, sp, #76	; 0x4c
   14466:	a801      	add	r0, sp, #4
   14468:	f7f5 f95e 	bl	9728 <mount_volume>
	if (res == FR_OK) {
   1446c:	4604      	mov	r4, r0
   1446e:	b118      	cbz	r0, 14478 <f_rename+0x26>
}
   14470:	4620      	mov	r0, r4
   14472:	b03d      	add	sp, #244	; 0xf4
   14474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		djo.obj.fs = fs;
   14478:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1447a:	9328      	str	r3, [sp, #160]	; 0xa0
		res = follow_path(&djo, path_old);			/* Check old object */
   1447c:	9901      	ldr	r1, [sp, #4]
   1447e:	a828      	add	r0, sp, #160	; 0xa0
   14480:	f7ff f9f0 	bl	13864 <follow_path>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
   14484:	4604      	mov	r4, r0
   14486:	b928      	cbnz	r0, 14494 <f_rename+0x42>
   14488:	f89d 30eb 	ldrb.w	r3, [sp, #235]	; 0xeb
   1448c:	f013 0fa0 	tst.w	r3, #160	; 0xa0
   14490:	f040 80f0 	bne.w	14674 <f_rename+0x222>
		if (res == FR_OK) {					/* Object to be renamed is found */
   14494:	2c00      	cmp	r4, #0
   14496:	d1eb      	bne.n	14470 <f_rename+0x1e>
			if (fs->fs_type == FS_EXFAT) {	/* At exFAT volume */
   14498:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1449a:	781a      	ldrb	r2, [r3, #0]
   1449c:	2a04      	cmp	r2, #4
   1449e:	d01e      	beq.n	144de <f_rename+0x8c>
				memcpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
   144a0:	9d37      	ldr	r5, [sp, #220]	; 0xdc
   144a2:	ac03      	add	r4, sp, #12
   144a4:	6828      	ldr	r0, [r5, #0]
   144a6:	6869      	ldr	r1, [r5, #4]
   144a8:	68aa      	ldr	r2, [r5, #8]
   144aa:	68eb      	ldr	r3, [r5, #12]
   144ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   144ae:	6928      	ldr	r0, [r5, #16]
   144b0:	6969      	ldr	r1, [r5, #20]
   144b2:	69aa      	ldr	r2, [r5, #24]
   144b4:	69eb      	ldr	r3, [r5, #28]
   144b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
				memcpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
   144b8:	2250      	movs	r2, #80	; 0x50
   144ba:	a928      	add	r1, sp, #160	; 0xa0
   144bc:	eb0d 0002 	add.w	r0, sp, r2
   144c0:	f000 fabf 	bl	14a42 <memcpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
   144c4:	9900      	ldr	r1, [sp, #0]
   144c6:	a814      	add	r0, sp, #80	; 0x50
   144c8:	f7ff f9cc 	bl	13864 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
   144cc:	4604      	mov	r4, r0
   144ce:	2800      	cmp	r0, #0
   144d0:	d16c      	bne.n	145ac <f_rename+0x15a>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
   144d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
   144d4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   144d6:	429a      	cmp	r2, r3
   144d8:	d062      	beq.n	145a0 <f_rename+0x14e>
   144da:	2408      	movs	r4, #8
   144dc:	e068      	b.n	145b0 <f_rename+0x15e>
				memcpy(buf, fs->dirbuf, SZDIRE * 2);	/* Save 85+C0 entry of old object */
   144de:	691c      	ldr	r4, [r3, #16]
   144e0:	ae03      	add	r6, sp, #12
   144e2:	f104 0740 	add.w	r7, r4, #64	; 0x40
   144e6:	4635      	mov	r5, r6
   144e8:	6820      	ldr	r0, [r4, #0]
   144ea:	6861      	ldr	r1, [r4, #4]
   144ec:	68a2      	ldr	r2, [r4, #8]
   144ee:	68e3      	ldr	r3, [r4, #12]
   144f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   144f2:	3410      	adds	r4, #16
   144f4:	462e      	mov	r6, r5
   144f6:	42bc      	cmp	r4, r7
   144f8:	d1f5      	bne.n	144e6 <f_rename+0x94>
				memcpy(&djn, &djo, sizeof djo);
   144fa:	2250      	movs	r2, #80	; 0x50
   144fc:	a928      	add	r1, sp, #160	; 0xa0
   144fe:	eb0d 0002 	add.w	r0, sp, r2
   14502:	f000 fa9e 	bl	14a42 <memcpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
   14506:	9900      	ldr	r1, [sp, #0]
   14508:	a814      	add	r0, sp, #80	; 0x50
   1450a:	f7ff f9ab 	bl	13864 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
   1450e:	4604      	mov	r4, r0
   14510:	b958      	cbnz	r0, 1452a <f_rename+0xd8>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
   14512:	9a16      	ldr	r2, [sp, #88]	; 0x58
   14514:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   14516:	429a      	cmp	r2, r3
   14518:	d001      	beq.n	1451e <f_rename+0xcc>
   1451a:	2408      	movs	r4, #8
   1451c:	e048      	b.n	145b0 <f_rename+0x15e>
   1451e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   14520:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   14522:	429a      	cmp	r2, r3
   14524:	d003      	beq.n	1452e <f_rename+0xdc>
   14526:	2408      	movs	r4, #8
   14528:	e042      	b.n	145b0 <f_rename+0x15e>
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
   1452a:	2804      	cmp	r0, #4
   1452c:	d140      	bne.n	145b0 <f_rename+0x15e>
					res = dir_register(&djn);			/* Register the new entry */
   1452e:	a814      	add	r0, sp, #80	; 0x50
   14530:	f7f5 fd62 	bl	9ff8 <dir_register>
					if (res == FR_OK) {
   14534:	4604      	mov	r4, r0
   14536:	2800      	cmp	r0, #0
   14538:	d13a      	bne.n	145b0 <f_rename+0x15e>
						nf = fs->dirbuf[XDIR_NumSec]; nn = fs->dirbuf[XDIR_NumName];
   1453a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1453c:	691c      	ldr	r4, [r3, #16]
   1453e:	f894 9001 	ldrb.w	r9, [r4, #1]
   14542:	f894 8023 	ldrb.w	r8, [r4, #35]	; 0x23
						nh = ld_word(fs->dirbuf + XDIR_NameHash);
   14546:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1454a:	f7fe f857 	bl	125fc <ld_word>
   1454e:	4607      	mov	r7, r0
   14550:	ae03      	add	r6, sp, #12
   14552:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   14556:	4635      	mov	r5, r6
   14558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1455a:	6020      	str	r0, [r4, #0]
   1455c:	6061      	str	r1, [r4, #4]
   1455e:	60a2      	str	r2, [r4, #8]
   14560:	60e3      	str	r3, [r4, #12]
   14562:	462e      	mov	r6, r5
   14564:	3410      	adds	r4, #16
   14566:	4565      	cmp	r5, ip
   14568:	d1f5      	bne.n	14556 <f_rename+0x104>
						fs->dirbuf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;
   1456a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1456c:	691b      	ldr	r3, [r3, #16]
   1456e:	f883 9001 	strb.w	r9, [r3, #1]
   14572:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   14574:	691a      	ldr	r2, [r3, #16]
   14576:	f882 8023 	strb.w	r8, [r2, #35]	; 0x23
						st_word(fs->dirbuf + XDIR_NameHash, nh);
   1457a:	6918      	ldr	r0, [r3, #16]
   1457c:	4639      	mov	r1, r7
   1457e:	3024      	adds	r0, #36	; 0x24
   14580:	f7fe f873 	bl	1266a <st_word>
						if (!(fs->dirbuf[XDIR_Attr] & AM_DIR)) fs->dirbuf[XDIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
   14584:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   14586:	691a      	ldr	r2, [r3, #16]
   14588:	7913      	ldrb	r3, [r2, #4]
   1458a:	f013 0f10 	tst.w	r3, #16
   1458e:	d102      	bne.n	14596 <f_rename+0x144>
   14590:	f043 0320 	orr.w	r3, r3, #32
   14594:	7113      	strb	r3, [r2, #4]
						res = store_xdir(&djn);
   14596:	a814      	add	r0, sp, #80	; 0x50
   14598:	f7ff fa37 	bl	13a0a <store_xdir>
   1459c:	4604      	mov	r4, r0
   1459e:	e007      	b.n	145b0 <f_rename+0x15e>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
   145a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
   145a2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   145a4:	429a      	cmp	r2, r3
   145a6:	d012      	beq.n	145ce <f_rename+0x17c>
   145a8:	2408      	movs	r4, #8
   145aa:	e001      	b.n	145b0 <f_rename+0x15e>
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
   145ac:	2804      	cmp	r0, #4
   145ae:	d00e      	beq.n	145ce <f_rename+0x17c>
			if (res == FR_OK) {
   145b0:	2c00      	cmp	r4, #0
   145b2:	f47f af5d 	bne.w	14470 <f_rename+0x1e>
				res = dir_remove(&djo);		/* Remove old entry */
   145b6:	a828      	add	r0, sp, #160	; 0xa0
   145b8:	f7fe fe4c 	bl	13254 <dir_remove>
				if (res == FR_OK) {
   145bc:	4604      	mov	r4, r0
   145be:	2800      	cmp	r0, #0
   145c0:	f47f af56 	bne.w	14470 <f_rename+0x1e>
					res = sync_fs(fs);
   145c4:	9813      	ldr	r0, [sp, #76]	; 0x4c
   145c6:	f7f5 fe1b 	bl	a200 <sync_fs>
   145ca:	4604      	mov	r4, r0
   145cc:	e750      	b.n	14470 <f_rename+0x1e>
					res = dir_register(&djn);			/* Register the new entry */
   145ce:	a814      	add	r0, sp, #80	; 0x50
   145d0:	f7f5 fd12 	bl	9ff8 <dir_register>
					if (res == FR_OK) {
   145d4:	4604      	mov	r4, r0
   145d6:	2800      	cmp	r0, #0
   145d8:	d1ea      	bne.n	145b0 <f_rename+0x15e>
						dir = djn.dir;					/* Copy directory entry of the object except name */
   145da:	9923      	ldr	r1, [sp, #140]	; 0x8c
   145dc:	f8dd 5019 	ldr.w	r5, [sp, #25]
   145e0:	f8dd 001d 	ldr.w	r0, [sp, #29]
   145e4:	f8dd 2021 	ldr.w	r2, [sp, #33]	; 0x21
   145e8:	f8dd 3025 	ldr.w	r3, [sp, #37]	; 0x25
   145ec:	f8c1 500d 	str.w	r5, [r1, #13]
   145f0:	f8c1 0011 	str.w	r0, [r1, #17]
   145f4:	f8c1 2015 	str.w	r2, [r1, #21]
   145f8:	f8c1 3019 	str.w	r3, [r1, #25]
   145fc:	f8bd 2029 	ldrh.w	r2, [sp, #41]	; 0x29
   14600:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   14604:	f8a1 201d 	strh.w	r2, [r1, #29]
   14608:	77cb      	strb	r3, [r1, #31]
						dir[DIR_Attr] = buf[DIR_Attr];
   1460a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1460e:	72cb      	strb	r3, [r1, #11]
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
   14610:	f013 0f10 	tst.w	r3, #16
   14614:	d102      	bne.n	1461c <f_rename+0x1ca>
   14616:	f043 0320 	orr.w	r3, r3, #32
   1461a:	72cb      	strb	r3, [r1, #11]
						fs->wflag = 1;
   1461c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1461e:	2201      	movs	r2, #1
   14620:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
   14622:	7acb      	ldrb	r3, [r1, #11]
   14624:	f013 0f10 	tst.w	r3, #16
   14628:	d0c2      	beq.n	145b0 <f_rename+0x15e>
   1462a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   1462c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1462e:	429a      	cmp	r2, r3
   14630:	d0be      	beq.n	145b0 <f_rename+0x15e>
							sect = clst2sect(fs, ld_clust(fs, dir));
   14632:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   14634:	4620      	mov	r0, r4
   14636:	f7fe f849 	bl	126cc <ld_clust>
   1463a:	4601      	mov	r1, r0
   1463c:	4620      	mov	r0, r4
   1463e:	f7fe f839 	bl	126b4 <clst2sect>
							if (sect == 0) {
   14642:	4601      	mov	r1, r0
   14644:	b908      	cbnz	r0, 1464a <f_rename+0x1f8>
								res = FR_INT_ERR;
   14646:	2402      	movs	r4, #2
   14648:	e712      	b.n	14470 <f_rename+0x1e>
								res = move_window(fs, sect);
   1464a:	4620      	mov	r0, r4
   1464c:	f7fe f8ee 	bl	1282c <move_window>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
   14650:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   14652:	f103 015c 	add.w	r1, r3, #92	; 0x5c
								if (res == FR_OK && dir[1] == '.') {
   14656:	4604      	mov	r4, r0
   14658:	2800      	cmp	r0, #0
   1465a:	d1a9      	bne.n	145b0 <f_rename+0x15e>
   1465c:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   14660:	2a2e      	cmp	r2, #46	; 0x2e
   14662:	d1a5      	bne.n	145b0 <f_rename+0x15e>
									st_clust(fs, dir, djn.obj.sclust);
   14664:	9a16      	ldr	r2, [sp, #88]	; 0x58
   14666:	4618      	mov	r0, r3
   14668:	f7fe f843 	bl	126f2 <st_clust>
									fs->wflag = 1;
   1466c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1466e:	2201      	movs	r2, #1
   14670:	70da      	strb	r2, [r3, #3]
   14672:	e79d      	b.n	145b0 <f_rename+0x15e>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
   14674:	2406      	movs	r4, #6
   14676:	e6fb      	b.n	14470 <f_rename+0x1e>

00014678 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   14678:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   1467a:	4780      	blx	r0
}
   1467c:	bd08      	pop	{r3, pc}

0001467e <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   1467e:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   14680:	f000 f9a3 	bl	149ca <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   14684:	bd08      	pop	{r3, pc}

00014686 <pin_is_task_output>:
{
   14686:	b510      	push	{r4, lr}
   14688:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1468a:	f7f7 fd0d 	bl	c0a8 <pin_is_output>
   1468e:	b128      	cbz	r0, 1469c <pin_is_task_output+0x16>
   14690:	4620      	mov	r0, r4
   14692:	f7f7 fcf3 	bl	c07c <pin_in_use_by_te>
   14696:	b118      	cbz	r0, 146a0 <pin_is_task_output+0x1a>
   14698:	2001      	movs	r0, #1
   1469a:	e000      	b.n	1469e <pin_is_task_output+0x18>
   1469c:	2000      	movs	r0, #0
}
   1469e:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   146a0:	2000      	movs	r0, #0
   146a2:	e7fc      	b.n	1469e <pin_is_task_output+0x18>

000146a4 <pin_is_input>:
{
   146a4:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   146a6:	f7f7 fcff 	bl	c0a8 <pin_is_output>
   146aa:	f080 0001 	eor.w	r0, r0, #1
}
   146ae:	b2c0      	uxtb	r0, r0
   146b0:	bd08      	pop	{r3, pc}

000146b2 <gpiote_polarity_to_trigger>:
}
   146b2:	4770      	bx	lr

000146b4 <gpiote_trigger_to_polarity>:
}
   146b4:	4770      	bx	lr

000146b6 <is_level>:
}
   146b6:	2803      	cmp	r0, #3
   146b8:	bf94      	ite	ls
   146ba:	2000      	movls	r0, #0
   146bc:	2001      	movhi	r0, #1
   146be:	4770      	bx	lr

000146c0 <latch_pending_read_and_check>:
{
   146c0:	b410      	push	{r4}
    for (i = start_port; i < (start_port + length); i++)
   146c2:	4604      	mov	r4, r0
   146c4:	2300      	movs	r3, #0
   146c6:	b94b      	cbnz	r3, 146dc <latch_pending_read_and_check+0x1c>
        *p_masks = gpio_regs[i]->LATCH;
   146c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   146cc:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   146d0:	f844 1b04 	str.w	r1, [r4], #4
        gpio_regs[i]->LATCH = *p_masks;
   146d4:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   146d8:	3301      	adds	r3, #1
   146da:	e7f4      	b.n	146c6 <latch_pending_read_and_check+0x6>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   146dc:	2300      	movs	r3, #0
   146de:	b113      	cbz	r3, 146e6 <latch_pending_read_and_check+0x26>
    return false;
   146e0:	2000      	movs	r0, #0
}
   146e2:	bc10      	pop	{r4}
   146e4:	4770      	bx	lr
        if (latch[port_idx])
   146e6:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
   146ea:	b90a      	cbnz	r2, 146f0 <latch_pending_read_and_check+0x30>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   146ec:	3301      	adds	r3, #1
   146ee:	e7f6      	b.n	146de <latch_pending_read_and_check+0x1e>
            return true;
   146f0:	2001      	movs	r0, #1
   146f2:	e7f6      	b.n	146e2 <latch_pending_read_and_check+0x22>

000146f4 <transfer_byte>:
{
   146f4:	b430      	push	{r4, r5}
   146f6:	b082      	sub	sp, #8
    return p_reg->RXD;
   146f8:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
   146fc:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   146fe:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   14702:	6a0b      	ldr	r3, [r1, #32]
   14704:	698a      	ldr	r2, [r1, #24]
   14706:	4293      	cmp	r3, r2
   14708:	d203      	bcs.n	14712 <transfer_byte+0x1e>
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   1470a:	694a      	ldr	r2, [r1, #20]
   1470c:	f89d 4007 	ldrb.w	r4, [sp, #7]
   14710:	54d4      	strb	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   14712:	6a0b      	ldr	r3, [r1, #32]
   14714:	3301      	adds	r3, #1
   14716:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   14718:	1c5a      	adds	r2, r3, #1
    if (p_cb->abort)
   1471a:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   1471e:	b13c      	cbz	r4, 14730 <transfer_byte+0x3c>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   14720:	690c      	ldr	r4, [r1, #16]
   14722:	4294      	cmp	r4, r2
   14724:	d900      	bls.n	14728 <transfer_byte+0x34>
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   14726:	610a      	str	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   14728:	698c      	ldr	r4, [r1, #24]
   1472a:	4294      	cmp	r4, r2
   1472c:	d900      	bls.n	14730 <transfer_byte+0x3c>
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   1472e:	618a      	str	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   14730:	690c      	ldr	r4, [r1, #16]
   14732:	4294      	cmp	r4, r2
   14734:	d808      	bhi.n	14748 <transfer_byte+0x54>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   14736:	698d      	ldr	r5, [r1, #24]
   14738:	4295      	cmp	r5, r2
   1473a:	d80d      	bhi.n	14758 <transfer_byte+0x64>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   1473c:	42a3      	cmp	r3, r4
   1473e:	d310      	bcc.n	14762 <transfer_byte+0x6e>
   14740:	42ab      	cmp	r3, r5
   14742:	d210      	bcs.n	14766 <transfer_byte+0x72>
   14744:	2001      	movs	r0, #1
   14746:	e004      	b.n	14752 <transfer_byte+0x5e>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   14748:	68cb      	ldr	r3, [r1, #12]
   1474a:	5c9b      	ldrb	r3, [r3, r2]
    p_reg->TXD = data;
   1474c:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        return true;
   14750:	2001      	movs	r0, #1
}
   14752:	b002      	add	sp, #8
   14754:	bc30      	pop	{r4, r5}
   14756:	4770      	bx	lr
        nrf_spi_txd_set(p_spi, p_cb->orc);
   14758:	7fcb      	ldrb	r3, [r1, #31]
   1475a:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        return true;
   1475e:	2001      	movs	r0, #1
   14760:	e7f7      	b.n	14752 <transfer_byte+0x5e>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   14762:	2001      	movs	r0, #1
   14764:	e7f5      	b.n	14752 <transfer_byte+0x5e>
   14766:	2000      	movs	r0, #0
   14768:	e7f3      	b.n	14752 <transfer_byte+0x5e>

0001476a <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1476a:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1476c:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   1476e:	4293      	cmp	r3, r2
   14770:	d804      	bhi.n	1477c <_GetAvailWriteSpace+0x12>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   14772:	6880      	ldr	r0, [r0, #8]
   14774:	1a80      	subs	r0, r0, r2
   14776:	4403      	add	r3, r0
   14778:	1e58      	subs	r0, r3, #1
   1477a:	4770      	bx	lr
    r = RdOff - WrOff - 1u;
   1477c:	1a9b      	subs	r3, r3, r2
   1477e:	1e58      	subs	r0, r3, #1
}
   14780:	4770      	bx	lr

00014782 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   14782:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14786:	4604      	mov	r4, r0
   14788:	4688      	mov	r8, r1
   1478a:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
   1478c:	68c5      	ldr	r5, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
   1478e:	6887      	ldr	r7, [r0, #8]
   14790:	eba7 0905 	sub.w	r9, r7, r5
  if (Rem > NumBytes) {
   14794:	4591      	cmp	r9, r2
   14796:	d907      	bls.n	147a8 <_WriteNoCheck+0x26>
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   14798:	6840      	ldr	r0, [r0, #4]
   1479a:	4428      	add	r0, r5
   1479c:	f000 f951 	bl	14a42 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   147a0:	4435      	add	r5, r6
   147a2:	60e5      	str	r5, [r4, #12]
}
   147a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   147a8:	6840      	ldr	r0, [r0, #4]
   147aa:	464a      	mov	r2, r9
   147ac:	4428      	add	r0, r5
   147ae:	f000 f948 	bl	14a42 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
   147b2:	1bed      	subs	r5, r5, r7
   147b4:	4435      	add	r5, r6
   147b6:	462a      	mov	r2, r5
   147b8:	eb08 0109 	add.w	r1, r8, r9
   147bc:	6860      	ldr	r0, [r4, #4]
   147be:	f000 f940 	bl	14a42 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   147c2:	60e5      	str	r5, [r4, #12]
}
   147c4:	e7ee      	b.n	147a4 <_WriteNoCheck+0x22>

000147c6 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   147c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   147ca:	4606      	mov	r6, r0
   147cc:	4688      	mov	r8, r1
   147ce:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
   147d0:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
   147d2:	f04f 0900 	mov.w	r9, #0
   147d6:	e018      	b.n	1480a <_WriteBlocking+0x44>
      NumBytesToWrite = RdOff - WrOff - 1u;
   147d8:	1b64      	subs	r4, r4, r5
   147da:	1e62      	subs	r2, r4, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   147dc:	68b3      	ldr	r3, [r6, #8]
   147de:	1b5c      	subs	r4, r3, r5
   147e0:	4294      	cmp	r4, r2
   147e2:	bf28      	it	cs
   147e4:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   147e6:	42bc      	cmp	r4, r7
   147e8:	bf28      	it	cs
   147ea:	463c      	movcs	r4, r7
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   147ec:	6870      	ldr	r0, [r6, #4]
   147ee:	4622      	mov	r2, r4
   147f0:	4641      	mov	r1, r8
   147f2:	4428      	add	r0, r5
   147f4:	f000 f925 	bl	14a42 <memcpy>
    NumBytesWritten += NumBytesToWrite;
   147f8:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
   147fa:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
   147fc:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
   147fe:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
   14800:	68b3      	ldr	r3, [r6, #8]
   14802:	42ab      	cmp	r3, r5
   14804:	d009      	beq.n	1481a <_WriteBlocking+0x54>
    pRing->WrOff = WrOff;
   14806:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   14808:	b14f      	cbz	r7, 1481e <_WriteBlocking+0x58>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1480a:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   1480c:	42a5      	cmp	r5, r4
   1480e:	d3e3      	bcc.n	147d8 <_WriteBlocking+0x12>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   14810:	68b2      	ldr	r2, [r6, #8]
   14812:	1b64      	subs	r4, r4, r5
   14814:	4414      	add	r4, r2
   14816:	1e62      	subs	r2, r4, #1
   14818:	e7e0      	b.n	147dc <_WriteBlocking+0x16>
      WrOff = 0u;
   1481a:	2500      	movs	r5, #0
   1481c:	e7f3      	b.n	14806 <_WriteBlocking+0x40>
}
   1481e:	4648      	mov	r0, r9
   14820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00014824 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   14824:	b508      	push	{r3, lr}
  _DoInit();
   14826:	f7f9 f80d 	bl	d844 <_DoInit>
}
   1482a:	bd08      	pop	{r3, pc}

0001482c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1482c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1482e:	f7ff fff9 	bl	14824 <SEGGER_RTT_Init>

	return 0;
}
   14832:	2000      	movs	r0, #0
   14834:	bd08      	pop	{r3, pc}

00014836 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   14836:	b148      	cbz	r0, 1484c <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   14838:	68c3      	ldr	r3, [r0, #12]
   1483a:	8818      	ldrh	r0, [r3, #0]
   1483c:	f3c0 0008 	ubfx	r0, r0, #0, #9
   14840:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   14844:	bf14      	ite	ne
   14846:	2000      	movne	r0, #0
   14848:	2001      	moveq	r0, #1
   1484a:	4770      	bx	lr
		return false;
   1484c:	2000      	movs	r0, #0
}
   1484e:	4770      	bx	lr

00014850 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   14850:	6902      	ldr	r2, [r0, #16]
   14852:	6943      	ldr	r3, [r0, #20]
   14854:	431a      	orrs	r2, r3
   14856:	f012 0203 	ands.w	r2, r2, #3
   1485a:	d10d      	bne.n	14878 <create_free_list+0x28>
	slab->free_list = NULL;
   1485c:	2100      	movs	r1, #0
   1485e:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   14860:	e005      	b.n	1486e <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   14862:	6981      	ldr	r1, [r0, #24]
   14864:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   14866:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
   14868:	6901      	ldr	r1, [r0, #16]
   1486a:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   1486c:	3201      	adds	r2, #1
   1486e:	68c1      	ldr	r1, [r0, #12]
   14870:	4291      	cmp	r1, r2
   14872:	d8f6      	bhi.n	14862 <create_free_list+0x12>
	return 0;
   14874:	2000      	movs	r0, #0
   14876:	4770      	bx	lr
		return -EINVAL;
   14878:	f06f 0015 	mvn.w	r0, #21
}
   1487c:	4770      	bx	lr

0001487e <k_mem_slab_init>:
{
   1487e:	b510      	push	{r4, lr}
   14880:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   14882:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
   14884:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
   14886:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
   14888:	2300      	movs	r3, #0
   1488a:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   1488c:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
   1488e:	f7ff ffdf 	bl	14850 <create_free_list>
	if (rc < 0) {
   14892:	2800      	cmp	r0, #0
   14894:	db01      	blt.n	1489a <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
   14896:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   14898:	6064      	str	r4, [r4, #4]
}
   1489a:	bd10      	pop	{r4, pc}

0001489c <setup_thread_stack>:
{
   1489c:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1489e:	3207      	adds	r2, #7
   148a0:	f022 0207 	bic.w	r2, r2, #7
   148a4:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   148a8:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   148ac:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
   148b0:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
   148b4:	2200      	movs	r2, #0
   148b6:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
   148ba:	18c8      	adds	r0, r1, r3
   148bc:	bc10      	pop	{r4}
   148be:	4770      	bx	lr

000148c0 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   148c0:	f3ef 8005 	mrs	r0, IPSR
}
   148c4:	3800      	subs	r0, #0
   148c6:	bf18      	it	ne
   148c8:	2001      	movne	r0, #1
   148ca:	4770      	bx	lr

000148cc <k_thread_name_get>:
}
   148cc:	3074      	adds	r0, #116	; 0x74
   148ce:	4770      	bx	lr

000148d0 <z_impl_k_thread_start>:
{
   148d0:	b508      	push	{r3, lr}
	z_sched_start(thread);
   148d2:	f7fa fb39 	bl	ef48 <z_sched_start>
}
   148d6:	bd08      	pop	{r3, pc}

000148d8 <z_init_thread_base>:
{
   148d8:	b410      	push	{r4}
	thread_base->pended_on = NULL;
   148da:	2400      	movs	r4, #0
   148dc:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   148de:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   148e0:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   148e2:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   148e4:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   148e6:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   148e8:	61c4      	str	r4, [r0, #28]
}
   148ea:	bc10      	pop	{r4}
   148ec:	4770      	bx	lr

000148ee <z_pm_save_idle_exit>:
{
   148ee:	b508      	push	{r3, lr}
	pm_system_resume();
   148f0:	f7f0 fcd8 	bl	52a4 <pm_system_resume>
	sys_clock_idle_exit();
   148f4:	f7fd fddd 	bl	124b2 <sys_clock_idle_exit>
}
   148f8:	bd08      	pop	{r3, pc}

000148fa <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   148fa:	4288      	cmp	r0, r1
   148fc:	da00      	bge.n	14900 <new_prio_for_inheritance+0x6>
   148fe:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   14900:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   14904:	db01      	blt.n	1490a <new_prio_for_inheritance+0x10>
   14906:	4608      	mov	r0, r1
   14908:	4770      	bx	lr
   1490a:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   1490e:	4770      	bx	lr

00014910 <adjust_owner_prio>:
{
   14910:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   14912:	6880      	ldr	r0, [r0, #8]
   14914:	f990 300e 	ldrsb.w	r3, [r0, #14]
   14918:	428b      	cmp	r3, r1
   1491a:	d101      	bne.n	14920 <adjust_owner_prio+0x10>
	return false;
   1491c:	2000      	movs	r0, #0
}
   1491e:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   14920:	f7fa fc82 	bl	f228 <z_set_prio>
   14924:	e7fb      	b.n	1491e <adjust_owner_prio+0xe>

00014926 <z_impl_k_mutex_init>:
{
   14926:	4603      	mov	r3, r0
	mutex->owner = NULL;
   14928:	2000      	movs	r0, #0
   1492a:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   1492c:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   1492e:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   14930:	605b      	str	r3, [r3, #4]
}
   14932:	4770      	bx	lr

00014934 <thread_active_elsewhere>:
}
   14934:	2000      	movs	r0, #0
   14936:	4770      	bx	lr

00014938 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   14938:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1493c:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   14940:	4283      	cmp	r3, r0
   14942:	d001      	beq.n	14948 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   14944:	1ac0      	subs	r0, r0, r3
   14946:	4770      	bx	lr
	return 0;
   14948:	2000      	movs	r0, #0
}
   1494a:	4770      	bx	lr

0001494c <z_reschedule_irqlock>:
{
   1494c:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1494e:	4603      	mov	r3, r0
   14950:	b920      	cbnz	r0, 1495c <z_reschedule_irqlock+0x10>
   14952:	f3ef 8205 	mrs	r2, IPSR
   14956:	b942      	cbnz	r2, 1496a <z_reschedule_irqlock+0x1e>
   14958:	2201      	movs	r2, #1
   1495a:	e000      	b.n	1495e <z_reschedule_irqlock+0x12>
   1495c:	2200      	movs	r2, #0
	if (resched(key)) {
   1495e:	b932      	cbnz	r2, 1496e <z_reschedule_irqlock+0x22>
   14960:	f383 8811 	msr	BASEPRI, r3
   14964:	f3bf 8f6f 	isb	sy
}
   14968:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1496a:	2200      	movs	r2, #0
   1496c:	e7f7      	b.n	1495e <z_reschedule_irqlock+0x12>
   1496e:	4618      	mov	r0, r3
   14970:	f7f0 ff04 	bl	577c <arch_swap>
	return ret;
   14974:	e7f8      	b.n	14968 <z_reschedule_irqlock+0x1c>

00014976 <z_priq_dumb_best>:
{
   14976:	4603      	mov	r3, r0
	return list->head == list;
   14978:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1497a:	4283      	cmp	r3, r0
   1497c:	d000      	beq.n	14980 <z_priq_dumb_best+0xa>
}
   1497e:	4770      	bx	lr
	struct k_thread *thread = NULL;
   14980:	2000      	movs	r0, #0
	return thread;
   14982:	e7fc      	b.n	1497e <z_priq_dumb_best+0x8>

00014984 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   14984:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   14986:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   14988:	6083      	str	r3, [r0, #8]
}
   1498a:	4770      	bx	lr

0001498c <remove_timeout>:
{
   1498c:	b538      	push	{r3, r4, r5, lr}
   1498e:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   14990:	f7fb f8da 	bl	fb48 <next>
   14994:	b148      	cbz	r0, 149aa <remove_timeout+0x1e>
   14996:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   14998:	6920      	ldr	r0, [r4, #16]
   1499a:	6965      	ldr	r5, [r4, #20]
   1499c:	6913      	ldr	r3, [r2, #16]
   1499e:	6951      	ldr	r1, [r2, #20]
   149a0:	181b      	adds	r3, r3, r0
   149a2:	eb45 0101 	adc.w	r1, r5, r1
   149a6:	6113      	str	r3, [r2, #16]
   149a8:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   149aa:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   149ac:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   149ae:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   149b0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   149b2:	2300      	movs	r3, #0
   149b4:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   149b6:	6063      	str	r3, [r4, #4]
}
   149b8:	bd38      	pop	{r3, r4, r5, pc}

000149ba <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   149ba:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   149bc:	f7fb fb6e 	bl	1009c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   149c0:	bd08      	pop	{r3, pc}

000149c2 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   149c2:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   149c4:	f7fb fb6a 	bl	1009c <sys_clock_tick_get>
}
   149c8:	bd08      	pop	{r3, pc}

000149ca <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   149ca:	b900      	cbnz	r0, 149ce <z_impl_k_busy_wait+0x4>
   149cc:	4770      	bx	lr
{
   149ce:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   149d0:	f7f1 fe3e 	bl	6650 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   149d4:	bd08      	pop	{r3, pc}

000149d6 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   149d6:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   149d8:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   149da:	2300      	movs	r3, #0
   149dc:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
   149de:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   149e2:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   149e4:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   149e6:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   149e8:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   149ea:	6343      	str	r3, [r0, #52]	; 0x34
}
   149ec:	4770      	bx	lr

000149ee <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   149ee:	b510      	push	{r4, lr}
   149f0:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   149f2:	f7fb f9cb 	bl	fd8c <z_abort_timeout>

	if (inactive) {
   149f6:	b9a0      	cbnz	r0, 14a22 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
   149f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   149fa:	b10b      	cbz	r3, 14a00 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   149fc:	4620      	mov	r0, r4
   149fe:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   14a00:	f104 0018 	add.w	r0, r4, #24
   14a04:	f7fa fdd8 	bl	f5b8 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   14a08:	b158      	cbz	r0, 14a22 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
   14a0a:	f7fa fa59 	bl	eec0 <z_ready_thread>
	__asm__ volatile(
   14a0e:	f04f 0320 	mov.w	r3, #32
   14a12:	f3ef 8011 	mrs	r0, BASEPRI
   14a16:	f383 8812 	msr	BASEPRI_MAX, r3
   14a1a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   14a1e:	f7ff ff95 	bl	1494c <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
   14a22:	bd10      	pop	{r4, pc}

00014a24 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   14a24:	4770      	bx	lr

00014a26 <memcmp>:
   14a26:	b530      	push	{r4, r5, lr}
   14a28:	3901      	subs	r1, #1
   14a2a:	2400      	movs	r4, #0
   14a2c:	42a2      	cmp	r2, r4
   14a2e:	d101      	bne.n	14a34 <memcmp+0xe>
   14a30:	2000      	movs	r0, #0
   14a32:	e005      	b.n	14a40 <memcmp+0x1a>
   14a34:	5d03      	ldrb	r3, [r0, r4]
   14a36:	3401      	adds	r4, #1
   14a38:	5d0d      	ldrb	r5, [r1, r4]
   14a3a:	42ab      	cmp	r3, r5
   14a3c:	d0f6      	beq.n	14a2c <memcmp+0x6>
   14a3e:	1b58      	subs	r0, r3, r5
   14a40:	bd30      	pop	{r4, r5, pc}

00014a42 <memcpy>:
   14a42:	440a      	add	r2, r1
   14a44:	4291      	cmp	r1, r2
   14a46:	f100 33ff 	add.w	r3, r0, #4294967295
   14a4a:	d100      	bne.n	14a4e <memcpy+0xc>
   14a4c:	4770      	bx	lr
   14a4e:	b510      	push	{r4, lr}
   14a50:	f811 4b01 	ldrb.w	r4, [r1], #1
   14a54:	f803 4f01 	strb.w	r4, [r3, #1]!
   14a58:	4291      	cmp	r1, r2
   14a5a:	d1f9      	bne.n	14a50 <memcpy+0xe>
   14a5c:	bd10      	pop	{r4, pc}

00014a5e <memset>:
   14a5e:	4402      	add	r2, r0
   14a60:	4603      	mov	r3, r0
   14a62:	4293      	cmp	r3, r2
   14a64:	d100      	bne.n	14a68 <memset+0xa>
   14a66:	4770      	bx	lr
   14a68:	f803 1b01 	strb.w	r1, [r3], #1
   14a6c:	e7f9      	b.n	14a62 <memset+0x4>

00014a6e <__cvt>:
   14a6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14a72:	b088      	sub	sp, #32
   14a74:	2b00      	cmp	r3, #0
   14a76:	461f      	mov	r7, r3
   14a78:	4614      	mov	r4, r2
   14a7a:	bfb8      	it	lt
   14a7c:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   14a80:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14a82:	9d10      	ldr	r5, [sp, #64]	; 0x40
   14a84:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   14a88:	bfb6      	itet	lt
   14a8a:	461f      	movlt	r7, r3
   14a8c:	2300      	movge	r3, #0
   14a8e:	232d      	movlt	r3, #45	; 0x2d
   14a90:	7013      	strb	r3, [r2, #0]
   14a92:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14a94:	f023 0820 	bic.w	r8, r3, #32
   14a98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   14a9c:	d005      	beq.n	14aaa <__cvt+0x3c>
   14a9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   14aa2:	d100      	bne.n	14aa6 <__cvt+0x38>
   14aa4:	3501      	adds	r5, #1
   14aa6:	2302      	movs	r3, #2
   14aa8:	e000      	b.n	14aac <__cvt+0x3e>
   14aaa:	2303      	movs	r3, #3
   14aac:	aa07      	add	r2, sp, #28
   14aae:	9204      	str	r2, [sp, #16]
   14ab0:	aa06      	add	r2, sp, #24
   14ab2:	e9cd a202 	strd	sl, r2, [sp, #8]
   14ab6:	e9cd 3500 	strd	r3, r5, [sp]
   14aba:	4622      	mov	r2, r4
   14abc:	463b      	mov	r3, r7
   14abe:	f7ec fc53 	bl	1368 <_dtoa_r>
   14ac2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   14ac6:	4606      	mov	r6, r0
   14ac8:	d102      	bne.n	14ad0 <__cvt+0x62>
   14aca:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14acc:	07db      	lsls	r3, r3, #31
   14ace:	d522      	bpl.n	14b16 <__cvt+0xa8>
   14ad0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   14ad4:	eb06 0905 	add.w	r9, r6, r5
   14ad8:	d110      	bne.n	14afc <__cvt+0x8e>
   14ada:	7833      	ldrb	r3, [r6, #0]
   14adc:	2b30      	cmp	r3, #48	; 0x30
   14ade:	d10a      	bne.n	14af6 <__cvt+0x88>
   14ae0:	2200      	movs	r2, #0
   14ae2:	2300      	movs	r3, #0
   14ae4:	4620      	mov	r0, r4
   14ae6:	4639      	mov	r1, r7
   14ae8:	f7eb ff6e 	bl	9c8 <__aeabi_dcmpeq>
   14aec:	b918      	cbnz	r0, 14af6 <__cvt+0x88>
   14aee:	f1c5 0501 	rsb	r5, r5, #1
   14af2:	f8ca 5000 	str.w	r5, [sl]
   14af6:	f8da 3000 	ldr.w	r3, [sl]
   14afa:	4499      	add	r9, r3
   14afc:	2200      	movs	r2, #0
   14afe:	2300      	movs	r3, #0
   14b00:	4620      	mov	r0, r4
   14b02:	4639      	mov	r1, r7
   14b04:	f7eb ff60 	bl	9c8 <__aeabi_dcmpeq>
   14b08:	b108      	cbz	r0, 14b0e <__cvt+0xa0>
   14b0a:	f8cd 901c 	str.w	r9, [sp, #28]
   14b0e:	2230      	movs	r2, #48	; 0x30
   14b10:	9b07      	ldr	r3, [sp, #28]
   14b12:	454b      	cmp	r3, r9
   14b14:	d307      	bcc.n	14b26 <__cvt+0xb8>
   14b16:	9b07      	ldr	r3, [sp, #28]
   14b18:	9a15      	ldr	r2, [sp, #84]	; 0x54
   14b1a:	1b9b      	subs	r3, r3, r6
   14b1c:	4630      	mov	r0, r6
   14b1e:	6013      	str	r3, [r2, #0]
   14b20:	b008      	add	sp, #32
   14b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14b26:	1c59      	adds	r1, r3, #1
   14b28:	9107      	str	r1, [sp, #28]
   14b2a:	701a      	strb	r2, [r3, #0]
   14b2c:	e7f0      	b.n	14b10 <__cvt+0xa2>

00014b2e <__exponent>:
   14b2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14b30:	4603      	mov	r3, r0
   14b32:	2900      	cmp	r1, #0
   14b34:	bfb8      	it	lt
   14b36:	4249      	neglt	r1, r1
   14b38:	f803 2b02 	strb.w	r2, [r3], #2
   14b3c:	bfb4      	ite	lt
   14b3e:	222d      	movlt	r2, #45	; 0x2d
   14b40:	222b      	movge	r2, #43	; 0x2b
   14b42:	2909      	cmp	r1, #9
   14b44:	7042      	strb	r2, [r0, #1]
   14b46:	dd2a      	ble.n	14b9e <__exponent+0x70>
   14b48:	f10d 0407 	add.w	r4, sp, #7
   14b4c:	46a4      	mov	ip, r4
   14b4e:	270a      	movs	r7, #10
   14b50:	46a6      	mov	lr, r4
   14b52:	460a      	mov	r2, r1
   14b54:	fb91 f6f7 	sdiv	r6, r1, r7
   14b58:	fb07 1516 	mls	r5, r7, r6, r1
   14b5c:	3530      	adds	r5, #48	; 0x30
   14b5e:	2a63      	cmp	r2, #99	; 0x63
   14b60:	f104 34ff 	add.w	r4, r4, #4294967295
   14b64:	f80e 5c01 	strb.w	r5, [lr, #-1]
   14b68:	4631      	mov	r1, r6
   14b6a:	dcf1      	bgt.n	14b50 <__exponent+0x22>
   14b6c:	3130      	adds	r1, #48	; 0x30
   14b6e:	f1ae 0502 	sub.w	r5, lr, #2
   14b72:	f804 1c01 	strb.w	r1, [r4, #-1]
   14b76:	1c44      	adds	r4, r0, #1
   14b78:	4629      	mov	r1, r5
   14b7a:	4561      	cmp	r1, ip
   14b7c:	d30a      	bcc.n	14b94 <__exponent+0x66>
   14b7e:	f10d 0209 	add.w	r2, sp, #9
   14b82:	eba2 020e 	sub.w	r2, r2, lr
   14b86:	4565      	cmp	r5, ip
   14b88:	bf88      	it	hi
   14b8a:	2200      	movhi	r2, #0
   14b8c:	4413      	add	r3, r2
   14b8e:	1a18      	subs	r0, r3, r0
   14b90:	b003      	add	sp, #12
   14b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14b94:	f811 2b01 	ldrb.w	r2, [r1], #1
   14b98:	f804 2f01 	strb.w	r2, [r4, #1]!
   14b9c:	e7ed      	b.n	14b7a <__exponent+0x4c>
   14b9e:	2330      	movs	r3, #48	; 0x30
   14ba0:	3130      	adds	r1, #48	; 0x30
   14ba2:	7083      	strb	r3, [r0, #2]
   14ba4:	70c1      	strb	r1, [r0, #3]
   14ba6:	1d03      	adds	r3, r0, #4
   14ba8:	e7f1      	b.n	14b8e <__exponent+0x60>

00014baa <_printf_common>:
   14baa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14bae:	4616      	mov	r6, r2
   14bb0:	4699      	mov	r9, r3
   14bb2:	688a      	ldr	r2, [r1, #8]
   14bb4:	690b      	ldr	r3, [r1, #16]
   14bb6:	f8dd 8020 	ldr.w	r8, [sp, #32]
   14bba:	4293      	cmp	r3, r2
   14bbc:	bfb8      	it	lt
   14bbe:	4613      	movlt	r3, r2
   14bc0:	6033      	str	r3, [r6, #0]
   14bc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   14bc6:	4607      	mov	r7, r0
   14bc8:	460c      	mov	r4, r1
   14bca:	b10a      	cbz	r2, 14bd0 <_printf_common+0x26>
   14bcc:	3301      	adds	r3, #1
   14bce:	6033      	str	r3, [r6, #0]
   14bd0:	6823      	ldr	r3, [r4, #0]
   14bd2:	0699      	lsls	r1, r3, #26
   14bd4:	bf42      	ittt	mi
   14bd6:	6833      	ldrmi	r3, [r6, #0]
   14bd8:	3302      	addmi	r3, #2
   14bda:	6033      	strmi	r3, [r6, #0]
   14bdc:	6825      	ldr	r5, [r4, #0]
   14bde:	f015 0506 	ands.w	r5, r5, #6
   14be2:	d106      	bne.n	14bf2 <_printf_common+0x48>
   14be4:	f104 0a19 	add.w	sl, r4, #25
   14be8:	68e3      	ldr	r3, [r4, #12]
   14bea:	6832      	ldr	r2, [r6, #0]
   14bec:	1a9b      	subs	r3, r3, r2
   14bee:	42ab      	cmp	r3, r5
   14bf0:	dc26      	bgt.n	14c40 <_printf_common+0x96>
   14bf2:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   14bf6:	1e13      	subs	r3, r2, #0
   14bf8:	6822      	ldr	r2, [r4, #0]
   14bfa:	bf18      	it	ne
   14bfc:	2301      	movne	r3, #1
   14bfe:	0692      	lsls	r2, r2, #26
   14c00:	d42b      	bmi.n	14c5a <_printf_common+0xb0>
   14c02:	f104 0243 	add.w	r2, r4, #67	; 0x43
   14c06:	4649      	mov	r1, r9
   14c08:	4638      	mov	r0, r7
   14c0a:	47c0      	blx	r8
   14c0c:	3001      	adds	r0, #1
   14c0e:	d01e      	beq.n	14c4e <_printf_common+0xa4>
   14c10:	6823      	ldr	r3, [r4, #0]
   14c12:	68e5      	ldr	r5, [r4, #12]
   14c14:	6832      	ldr	r2, [r6, #0]
   14c16:	f003 0306 	and.w	r3, r3, #6
   14c1a:	2b04      	cmp	r3, #4
   14c1c:	bf08      	it	eq
   14c1e:	1aad      	subeq	r5, r5, r2
   14c20:	68a3      	ldr	r3, [r4, #8]
   14c22:	6922      	ldr	r2, [r4, #16]
   14c24:	bf0c      	ite	eq
   14c26:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   14c2a:	2500      	movne	r5, #0
   14c2c:	4293      	cmp	r3, r2
   14c2e:	bfc4      	itt	gt
   14c30:	1a9b      	subgt	r3, r3, r2
   14c32:	18ed      	addgt	r5, r5, r3
   14c34:	2600      	movs	r6, #0
   14c36:	341a      	adds	r4, #26
   14c38:	42b5      	cmp	r5, r6
   14c3a:	d11a      	bne.n	14c72 <_printf_common+0xc8>
   14c3c:	2000      	movs	r0, #0
   14c3e:	e008      	b.n	14c52 <_printf_common+0xa8>
   14c40:	2301      	movs	r3, #1
   14c42:	4652      	mov	r2, sl
   14c44:	4649      	mov	r1, r9
   14c46:	4638      	mov	r0, r7
   14c48:	47c0      	blx	r8
   14c4a:	3001      	adds	r0, #1
   14c4c:	d103      	bne.n	14c56 <_printf_common+0xac>
   14c4e:	f04f 30ff 	mov.w	r0, #4294967295
   14c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14c56:	3501      	adds	r5, #1
   14c58:	e7c6      	b.n	14be8 <_printf_common+0x3e>
   14c5a:	18e1      	adds	r1, r4, r3
   14c5c:	1c5a      	adds	r2, r3, #1
   14c5e:	2030      	movs	r0, #48	; 0x30
   14c60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   14c64:	4422      	add	r2, r4
   14c66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   14c6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   14c6e:	3302      	adds	r3, #2
   14c70:	e7c7      	b.n	14c02 <_printf_common+0x58>
   14c72:	2301      	movs	r3, #1
   14c74:	4622      	mov	r2, r4
   14c76:	4649      	mov	r1, r9
   14c78:	4638      	mov	r0, r7
   14c7a:	47c0      	blx	r8
   14c7c:	3001      	adds	r0, #1
   14c7e:	d0e6      	beq.n	14c4e <_printf_common+0xa4>
   14c80:	3601      	adds	r6, #1
   14c82:	e7d9      	b.n	14c38 <_printf_common+0x8e>

00014c84 <strchr>:
   14c84:	b2c9      	uxtb	r1, r1
   14c86:	4603      	mov	r3, r0
   14c88:	4618      	mov	r0, r3
   14c8a:	f813 2b01 	ldrb.w	r2, [r3], #1
   14c8e:	b112      	cbz	r2, 14c96 <strchr+0x12>
   14c90:	428a      	cmp	r2, r1
   14c92:	d1f9      	bne.n	14c88 <strchr+0x4>
   14c94:	4770      	bx	lr
   14c96:	2900      	cmp	r1, #0
   14c98:	bf18      	it	ne
   14c9a:	2000      	movne	r0, #0
   14c9c:	4770      	bx	lr

00014c9e <strcpy>:
   14c9e:	4603      	mov	r3, r0
   14ca0:	f811 2b01 	ldrb.w	r2, [r1], #1
   14ca4:	f803 2b01 	strb.w	r2, [r3], #1
   14ca8:	2a00      	cmp	r2, #0
   14caa:	d1f9      	bne.n	14ca0 <strcpy+0x2>
   14cac:	4770      	bx	lr

00014cae <strncmp>:
   14cae:	b510      	push	{r4, lr}
   14cb0:	b16a      	cbz	r2, 14cce <strncmp+0x20>
   14cb2:	3901      	subs	r1, #1
   14cb4:	1884      	adds	r4, r0, r2
   14cb6:	f810 3b01 	ldrb.w	r3, [r0], #1
   14cba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   14cbe:	4293      	cmp	r3, r2
   14cc0:	d103      	bne.n	14cca <strncmp+0x1c>
   14cc2:	42a0      	cmp	r0, r4
   14cc4:	d001      	beq.n	14cca <strncmp+0x1c>
   14cc6:	2b00      	cmp	r3, #0
   14cc8:	d1f5      	bne.n	14cb6 <strncmp+0x8>
   14cca:	1a98      	subs	r0, r3, r2
   14ccc:	bd10      	pop	{r4, pc}
   14cce:	4610      	mov	r0, r2
   14cd0:	e7fc      	b.n	14ccc <strncmp+0x1e>

00014cd2 <strncpy>:
   14cd2:	b510      	push	{r4, lr}
   14cd4:	3901      	subs	r1, #1
   14cd6:	4603      	mov	r3, r0
   14cd8:	b132      	cbz	r2, 14ce8 <strncpy+0x16>
   14cda:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   14cde:	f803 4b01 	strb.w	r4, [r3], #1
   14ce2:	3a01      	subs	r2, #1
   14ce4:	2c00      	cmp	r4, #0
   14ce6:	d1f7      	bne.n	14cd8 <strncpy+0x6>
   14ce8:	441a      	add	r2, r3
   14cea:	2100      	movs	r1, #0
   14cec:	4293      	cmp	r3, r2
   14cee:	d100      	bne.n	14cf2 <strncpy+0x20>
   14cf0:	bd10      	pop	{r4, pc}
   14cf2:	f803 1b01 	strb.w	r1, [r3], #1
   14cf6:	e7f9      	b.n	14cec <strncpy+0x1a>

00014cf8 <strnlen>:
   14cf8:	b510      	push	{r4, lr}
   14cfa:	4602      	mov	r2, r0
   14cfc:	4401      	add	r1, r0
   14cfe:	428a      	cmp	r2, r1
   14d00:	4613      	mov	r3, r2
   14d02:	d101      	bne.n	14d08 <strnlen+0x10>
   14d04:	1a18      	subs	r0, r3, r0
   14d06:	bd10      	pop	{r4, pc}
   14d08:	781c      	ldrb	r4, [r3, #0]
   14d0a:	3201      	adds	r2, #1
   14d0c:	2c00      	cmp	r4, #0
   14d0e:	d1f6      	bne.n	14cfe <strnlen+0x6>
   14d10:	e7f8      	b.n	14d04 <strnlen+0xc>

00014d12 <quorem>:
   14d12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d16:	6903      	ldr	r3, [r0, #16]
   14d18:	690c      	ldr	r4, [r1, #16]
   14d1a:	42a3      	cmp	r3, r4
   14d1c:	4607      	mov	r7, r0
   14d1e:	f2c0 8081 	blt.w	14e24 <quorem+0x112>
   14d22:	3c01      	subs	r4, #1
   14d24:	f101 0814 	add.w	r8, r1, #20
   14d28:	f100 0514 	add.w	r5, r0, #20
   14d2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   14d30:	9301      	str	r3, [sp, #4]
   14d32:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   14d36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   14d3a:	3301      	adds	r3, #1
   14d3c:	429a      	cmp	r2, r3
   14d3e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   14d42:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   14d46:	fbb2 f6f3 	udiv	r6, r2, r3
   14d4a:	d331      	bcc.n	14db0 <quorem+0x9e>
   14d4c:	f04f 0e00 	mov.w	lr, #0
   14d50:	4640      	mov	r0, r8
   14d52:	46ac      	mov	ip, r5
   14d54:	46f2      	mov	sl, lr
   14d56:	f850 2b04 	ldr.w	r2, [r0], #4
   14d5a:	b293      	uxth	r3, r2
   14d5c:	fb06 e303 	mla	r3, r6, r3, lr
   14d60:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   14d64:	b29b      	uxth	r3, r3
   14d66:	ebaa 0303 	sub.w	r3, sl, r3
   14d6a:	0c12      	lsrs	r2, r2, #16
   14d6c:	f8dc a000 	ldr.w	sl, [ip]
   14d70:	fb06 e202 	mla	r2, r6, r2, lr
   14d74:	fa13 f38a 	uxtah	r3, r3, sl
   14d78:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   14d7c:	fa1f fa82 	uxth.w	sl, r2
   14d80:	f8dc 2000 	ldr.w	r2, [ip]
   14d84:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   14d88:	eb02 4223 	add.w	r2, r2, r3, asr #16
   14d8c:	b29b      	uxth	r3, r3
   14d8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   14d92:	4581      	cmp	r9, r0
   14d94:	f84c 3b04 	str.w	r3, [ip], #4
   14d98:	ea4f 4a22 	mov.w	sl, r2, asr #16
   14d9c:	d2db      	bcs.n	14d56 <quorem+0x44>
   14d9e:	f855 300b 	ldr.w	r3, [r5, fp]
   14da2:	b92b      	cbnz	r3, 14db0 <quorem+0x9e>
   14da4:	9b01      	ldr	r3, [sp, #4]
   14da6:	3b04      	subs	r3, #4
   14da8:	429d      	cmp	r5, r3
   14daa:	461a      	mov	r2, r3
   14dac:	d32e      	bcc.n	14e0c <quorem+0xfa>
   14dae:	613c      	str	r4, [r7, #16]
   14db0:	4638      	mov	r0, r7
   14db2:	f000 fa14 	bl	151de <__mcmp>
   14db6:	2800      	cmp	r0, #0
   14db8:	db24      	blt.n	14e04 <quorem+0xf2>
   14dba:	3601      	adds	r6, #1
   14dbc:	4628      	mov	r0, r5
   14dbe:	f04f 0c00 	mov.w	ip, #0
   14dc2:	f858 2b04 	ldr.w	r2, [r8], #4
   14dc6:	f8d0 e000 	ldr.w	lr, [r0]
   14dca:	b293      	uxth	r3, r2
   14dcc:	ebac 0303 	sub.w	r3, ip, r3
   14dd0:	0c12      	lsrs	r2, r2, #16
   14dd2:	fa13 f38e 	uxtah	r3, r3, lr
   14dd6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   14dda:	eb02 4223 	add.w	r2, r2, r3, asr #16
   14dde:	b29b      	uxth	r3, r3
   14de0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   14de4:	45c1      	cmp	r9, r8
   14de6:	f840 3b04 	str.w	r3, [r0], #4
   14dea:	ea4f 4c22 	mov.w	ip, r2, asr #16
   14dee:	d2e8      	bcs.n	14dc2 <quorem+0xb0>
   14df0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   14df4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   14df8:	b922      	cbnz	r2, 14e04 <quorem+0xf2>
   14dfa:	3b04      	subs	r3, #4
   14dfc:	429d      	cmp	r5, r3
   14dfe:	461a      	mov	r2, r3
   14e00:	d30a      	bcc.n	14e18 <quorem+0x106>
   14e02:	613c      	str	r4, [r7, #16]
   14e04:	4630      	mov	r0, r6
   14e06:	b003      	add	sp, #12
   14e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e0c:	6812      	ldr	r2, [r2, #0]
   14e0e:	3b04      	subs	r3, #4
   14e10:	2a00      	cmp	r2, #0
   14e12:	d1cc      	bne.n	14dae <quorem+0x9c>
   14e14:	3c01      	subs	r4, #1
   14e16:	e7c7      	b.n	14da8 <quorem+0x96>
   14e18:	6812      	ldr	r2, [r2, #0]
   14e1a:	3b04      	subs	r3, #4
   14e1c:	2a00      	cmp	r2, #0
   14e1e:	d1f0      	bne.n	14e02 <quorem+0xf0>
   14e20:	3c01      	subs	r4, #1
   14e22:	e7eb      	b.n	14dfc <quorem+0xea>
   14e24:	2000      	movs	r0, #0
   14e26:	e7ee      	b.n	14e06 <quorem+0xf4>

00014e28 <_Balloc>:
   14e28:	b570      	push	{r4, r5, r6, lr}
   14e2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   14e2c:	4604      	mov	r4, r0
   14e2e:	460d      	mov	r5, r1
   14e30:	b93e      	cbnz	r6, 14e42 <_Balloc+0x1a>
   14e32:	2010      	movs	r0, #16
   14e34:	f7fb fa9e 	bl	10374 <malloc>
   14e38:	e9c0 6601 	strd	r6, r6, [r0, #4]
   14e3c:	6260      	str	r0, [r4, #36]	; 0x24
   14e3e:	6006      	str	r6, [r0, #0]
   14e40:	60c6      	str	r6, [r0, #12]
   14e42:	6a66      	ldr	r6, [r4, #36]	; 0x24
   14e44:	68f3      	ldr	r3, [r6, #12]
   14e46:	b183      	cbz	r3, 14e6a <_Balloc+0x42>
   14e48:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14e4a:	68db      	ldr	r3, [r3, #12]
   14e4c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   14e50:	b9b8      	cbnz	r0, 14e82 <_Balloc+0x5a>
   14e52:	2101      	movs	r1, #1
   14e54:	fa01 f605 	lsl.w	r6, r1, r5
   14e58:	1d72      	adds	r2, r6, #5
   14e5a:	0092      	lsls	r2, r2, #2
   14e5c:	4620      	mov	r0, r4
   14e5e:	f000 fa9e 	bl	1539e <_calloc_r>
   14e62:	b160      	cbz	r0, 14e7e <_Balloc+0x56>
   14e64:	e9c0 5601 	strd	r5, r6, [r0, #4]
   14e68:	e00e      	b.n	14e88 <_Balloc+0x60>
   14e6a:	2221      	movs	r2, #33	; 0x21
   14e6c:	2104      	movs	r1, #4
   14e6e:	4620      	mov	r0, r4
   14e70:	f000 fa95 	bl	1539e <_calloc_r>
   14e74:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14e76:	60f0      	str	r0, [r6, #12]
   14e78:	68db      	ldr	r3, [r3, #12]
   14e7a:	2b00      	cmp	r3, #0
   14e7c:	d1e4      	bne.n	14e48 <_Balloc+0x20>
   14e7e:	2000      	movs	r0, #0
   14e80:	bd70      	pop	{r4, r5, r6, pc}
   14e82:	6802      	ldr	r2, [r0, #0]
   14e84:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   14e88:	2300      	movs	r3, #0
   14e8a:	e9c0 3303 	strd	r3, r3, [r0, #12]
   14e8e:	e7f7      	b.n	14e80 <_Balloc+0x58>

00014e90 <_Bfree>:
   14e90:	b570      	push	{r4, r5, r6, lr}
   14e92:	6a46      	ldr	r6, [r0, #36]	; 0x24
   14e94:	4605      	mov	r5, r0
   14e96:	460c      	mov	r4, r1
   14e98:	b93e      	cbnz	r6, 14eaa <_Bfree+0x1a>
   14e9a:	2010      	movs	r0, #16
   14e9c:	f7fb fa6a 	bl	10374 <malloc>
   14ea0:	e9c0 6601 	strd	r6, r6, [r0, #4]
   14ea4:	6268      	str	r0, [r5, #36]	; 0x24
   14ea6:	6006      	str	r6, [r0, #0]
   14ea8:	60c6      	str	r6, [r0, #12]
   14eaa:	b13c      	cbz	r4, 14ebc <_Bfree+0x2c>
   14eac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   14eae:	6862      	ldr	r2, [r4, #4]
   14eb0:	68db      	ldr	r3, [r3, #12]
   14eb2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   14eb6:	6021      	str	r1, [r4, #0]
   14eb8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   14ebc:	bd70      	pop	{r4, r5, r6, pc}

00014ebe <__multadd>:
   14ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14ec2:	690e      	ldr	r6, [r1, #16]
   14ec4:	4607      	mov	r7, r0
   14ec6:	4698      	mov	r8, r3
   14ec8:	460c      	mov	r4, r1
   14eca:	f101 0014 	add.w	r0, r1, #20
   14ece:	2300      	movs	r3, #0
   14ed0:	6805      	ldr	r5, [r0, #0]
   14ed2:	b2a9      	uxth	r1, r5
   14ed4:	fb02 8101 	mla	r1, r2, r1, r8
   14ed8:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   14edc:	0c2d      	lsrs	r5, r5, #16
   14ede:	fb02 c505 	mla	r5, r2, r5, ip
   14ee2:	b289      	uxth	r1, r1
   14ee4:	3301      	adds	r3, #1
   14ee6:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   14eea:	429e      	cmp	r6, r3
   14eec:	f840 1b04 	str.w	r1, [r0], #4
   14ef0:	ea4f 4815 	mov.w	r8, r5, lsr #16
   14ef4:	dcec      	bgt.n	14ed0 <__multadd+0x12>
   14ef6:	f1b8 0f00 	cmp.w	r8, #0
   14efa:	d01b      	beq.n	14f34 <__multadd+0x76>
   14efc:	68a3      	ldr	r3, [r4, #8]
   14efe:	42b3      	cmp	r3, r6
   14f00:	dc12      	bgt.n	14f28 <__multadd+0x6a>
   14f02:	6861      	ldr	r1, [r4, #4]
   14f04:	4638      	mov	r0, r7
   14f06:	3101      	adds	r1, #1
   14f08:	f7ff ff8e 	bl	14e28 <_Balloc>
   14f0c:	6922      	ldr	r2, [r4, #16]
   14f0e:	3202      	adds	r2, #2
   14f10:	f104 010c 	add.w	r1, r4, #12
   14f14:	4605      	mov	r5, r0
   14f16:	0092      	lsls	r2, r2, #2
   14f18:	300c      	adds	r0, #12
   14f1a:	f7ff fd92 	bl	14a42 <memcpy>
   14f1e:	4621      	mov	r1, r4
   14f20:	4638      	mov	r0, r7
   14f22:	f7ff ffb5 	bl	14e90 <_Bfree>
   14f26:	462c      	mov	r4, r5
   14f28:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   14f2c:	3601      	adds	r6, #1
   14f2e:	f8c3 8014 	str.w	r8, [r3, #20]
   14f32:	6126      	str	r6, [r4, #16]
   14f34:	4620      	mov	r0, r4
   14f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014f3a <__hi0bits>:
   14f3a:	0c02      	lsrs	r2, r0, #16
   14f3c:	0412      	lsls	r2, r2, #16
   14f3e:	4603      	mov	r3, r0
   14f40:	b9ca      	cbnz	r2, 14f76 <__hi0bits+0x3c>
   14f42:	0403      	lsls	r3, r0, #16
   14f44:	2010      	movs	r0, #16
   14f46:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   14f4a:	bf04      	itt	eq
   14f4c:	021b      	lsleq	r3, r3, #8
   14f4e:	3008      	addeq	r0, #8
   14f50:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   14f54:	bf04      	itt	eq
   14f56:	011b      	lsleq	r3, r3, #4
   14f58:	3004      	addeq	r0, #4
   14f5a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   14f5e:	bf04      	itt	eq
   14f60:	009b      	lsleq	r3, r3, #2
   14f62:	3002      	addeq	r0, #2
   14f64:	2b00      	cmp	r3, #0
   14f66:	db05      	blt.n	14f74 <__hi0bits+0x3a>
   14f68:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   14f6c:	f100 0001 	add.w	r0, r0, #1
   14f70:	bf08      	it	eq
   14f72:	2020      	moveq	r0, #32
   14f74:	4770      	bx	lr
   14f76:	2000      	movs	r0, #0
   14f78:	e7e5      	b.n	14f46 <__hi0bits+0xc>

00014f7a <__lo0bits>:
   14f7a:	6803      	ldr	r3, [r0, #0]
   14f7c:	4602      	mov	r2, r0
   14f7e:	f013 0007 	ands.w	r0, r3, #7
   14f82:	d00b      	beq.n	14f9c <__lo0bits+0x22>
   14f84:	07d9      	lsls	r1, r3, #31
   14f86:	d422      	bmi.n	14fce <__lo0bits+0x54>
   14f88:	0798      	lsls	r0, r3, #30
   14f8a:	bf49      	itett	mi
   14f8c:	085b      	lsrmi	r3, r3, #1
   14f8e:	089b      	lsrpl	r3, r3, #2
   14f90:	2001      	movmi	r0, #1
   14f92:	6013      	strmi	r3, [r2, #0]
   14f94:	bf5c      	itt	pl
   14f96:	6013      	strpl	r3, [r2, #0]
   14f98:	2002      	movpl	r0, #2
   14f9a:	4770      	bx	lr
   14f9c:	b299      	uxth	r1, r3
   14f9e:	b909      	cbnz	r1, 14fa4 <__lo0bits+0x2a>
   14fa0:	0c1b      	lsrs	r3, r3, #16
   14fa2:	2010      	movs	r0, #16
   14fa4:	f013 0fff 	tst.w	r3, #255	; 0xff
   14fa8:	bf04      	itt	eq
   14faa:	0a1b      	lsreq	r3, r3, #8
   14fac:	3008      	addeq	r0, #8
   14fae:	0719      	lsls	r1, r3, #28
   14fb0:	bf04      	itt	eq
   14fb2:	091b      	lsreq	r3, r3, #4
   14fb4:	3004      	addeq	r0, #4
   14fb6:	0799      	lsls	r1, r3, #30
   14fb8:	bf04      	itt	eq
   14fba:	089b      	lsreq	r3, r3, #2
   14fbc:	3002      	addeq	r0, #2
   14fbe:	07d9      	lsls	r1, r3, #31
   14fc0:	d403      	bmi.n	14fca <__lo0bits+0x50>
   14fc2:	085b      	lsrs	r3, r3, #1
   14fc4:	f100 0001 	add.w	r0, r0, #1
   14fc8:	d003      	beq.n	14fd2 <__lo0bits+0x58>
   14fca:	6013      	str	r3, [r2, #0]
   14fcc:	4770      	bx	lr
   14fce:	2000      	movs	r0, #0
   14fd0:	4770      	bx	lr
   14fd2:	2020      	movs	r0, #32
   14fd4:	4770      	bx	lr

00014fd6 <__i2b>:
   14fd6:	b510      	push	{r4, lr}
   14fd8:	460c      	mov	r4, r1
   14fda:	2101      	movs	r1, #1
   14fdc:	f7ff ff24 	bl	14e28 <_Balloc>
   14fe0:	2201      	movs	r2, #1
   14fe2:	6144      	str	r4, [r0, #20]
   14fe4:	6102      	str	r2, [r0, #16]
   14fe6:	bd10      	pop	{r4, pc}

00014fe8 <__multiply>:
   14fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fec:	4615      	mov	r5, r2
   14fee:	690a      	ldr	r2, [r1, #16]
   14ff0:	692b      	ldr	r3, [r5, #16]
   14ff2:	429a      	cmp	r2, r3
   14ff4:	bfb8      	it	lt
   14ff6:	460b      	movlt	r3, r1
   14ff8:	460c      	mov	r4, r1
   14ffa:	bfbc      	itt	lt
   14ffc:	462c      	movlt	r4, r5
   14ffe:	461d      	movlt	r5, r3
   15000:	6927      	ldr	r7, [r4, #16]
   15002:	f8d5 9010 	ldr.w	r9, [r5, #16]
   15006:	68a3      	ldr	r3, [r4, #8]
   15008:	6861      	ldr	r1, [r4, #4]
   1500a:	eb07 0609 	add.w	r6, r7, r9
   1500e:	42b3      	cmp	r3, r6
   15010:	bfb8      	it	lt
   15012:	3101      	addlt	r1, #1
   15014:	b085      	sub	sp, #20
   15016:	f7ff ff07 	bl	14e28 <_Balloc>
   1501a:	f100 0114 	add.w	r1, r0, #20
   1501e:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   15022:	460b      	mov	r3, r1
   15024:	2200      	movs	r2, #0
   15026:	4543      	cmp	r3, r8
   15028:	d31d      	bcc.n	15066 <__multiply+0x7e>
   1502a:	f104 0314 	add.w	r3, r4, #20
   1502e:	f105 0214 	add.w	r2, r5, #20
   15032:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   15036:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   1503a:	9302      	str	r3, [sp, #8]
   1503c:	1b3b      	subs	r3, r7, r4
   1503e:	3b15      	subs	r3, #21
   15040:	f023 0303 	bic.w	r3, r3, #3
   15044:	3304      	adds	r3, #4
   15046:	f104 0515 	add.w	r5, r4, #21
   1504a:	42af      	cmp	r7, r5
   1504c:	bf38      	it	cc
   1504e:	2304      	movcc	r3, #4
   15050:	9301      	str	r3, [sp, #4]
   15052:	9b02      	ldr	r3, [sp, #8]
   15054:	9203      	str	r2, [sp, #12]
   15056:	4293      	cmp	r3, r2
   15058:	d808      	bhi.n	1506c <__multiply+0x84>
   1505a:	2e00      	cmp	r6, #0
   1505c:	dc5a      	bgt.n	15114 <__multiply+0x12c>
   1505e:	6106      	str	r6, [r0, #16]
   15060:	b005      	add	sp, #20
   15062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15066:	f843 2b04 	str.w	r2, [r3], #4
   1506a:	e7dc      	b.n	15026 <__multiply+0x3e>
   1506c:	f8b2 a000 	ldrh.w	sl, [r2]
   15070:	f1ba 0f00 	cmp.w	sl, #0
   15074:	d024      	beq.n	150c0 <__multiply+0xd8>
   15076:	f104 0e14 	add.w	lr, r4, #20
   1507a:	4689      	mov	r9, r1
   1507c:	f04f 0c00 	mov.w	ip, #0
   15080:	f85e 5b04 	ldr.w	r5, [lr], #4
   15084:	f8d9 b000 	ldr.w	fp, [r9]
   15088:	b2ab      	uxth	r3, r5
   1508a:	fa1f fb8b 	uxth.w	fp, fp
   1508e:	fb0a b303 	mla	r3, sl, r3, fp
   15092:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   15096:	f8d9 5000 	ldr.w	r5, [r9]
   1509a:	4463      	add	r3, ip
   1509c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   150a0:	fb0a c50b 	mla	r5, sl, fp, ip
   150a4:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   150a8:	b29b      	uxth	r3, r3
   150aa:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   150ae:	4577      	cmp	r7, lr
   150b0:	f849 3b04 	str.w	r3, [r9], #4
   150b4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   150b8:	d8e2      	bhi.n	15080 <__multiply+0x98>
   150ba:	9b01      	ldr	r3, [sp, #4]
   150bc:	f841 c003 	str.w	ip, [r1, r3]
   150c0:	9b03      	ldr	r3, [sp, #12]
   150c2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   150c6:	3204      	adds	r2, #4
   150c8:	f1b9 0f00 	cmp.w	r9, #0
   150cc:	d020      	beq.n	15110 <__multiply+0x128>
   150ce:	680b      	ldr	r3, [r1, #0]
   150d0:	f104 0c14 	add.w	ip, r4, #20
   150d4:	468e      	mov	lr, r1
   150d6:	f04f 0a00 	mov.w	sl, #0
   150da:	f8bc 5000 	ldrh.w	r5, [ip]
   150de:	f8be b002 	ldrh.w	fp, [lr, #2]
   150e2:	fb09 b505 	mla	r5, r9, r5, fp
   150e6:	44aa      	add	sl, r5
   150e8:	b29b      	uxth	r3, r3
   150ea:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   150ee:	f84e 3b04 	str.w	r3, [lr], #4
   150f2:	f85c 3b04 	ldr.w	r3, [ip], #4
   150f6:	f8be 5000 	ldrh.w	r5, [lr]
   150fa:	0c1b      	lsrs	r3, r3, #16
   150fc:	fb09 5303 	mla	r3, r9, r3, r5
   15100:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   15104:	4567      	cmp	r7, ip
   15106:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   1510a:	d8e6      	bhi.n	150da <__multiply+0xf2>
   1510c:	9d01      	ldr	r5, [sp, #4]
   1510e:	514b      	str	r3, [r1, r5]
   15110:	3104      	adds	r1, #4
   15112:	e79e      	b.n	15052 <__multiply+0x6a>
   15114:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   15118:	2b00      	cmp	r3, #0
   1511a:	d1a0      	bne.n	1505e <__multiply+0x76>
   1511c:	3e01      	subs	r6, #1
   1511e:	e79c      	b.n	1505a <__multiply+0x72>

00015120 <__lshift>:
   15120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15124:	460c      	mov	r4, r1
   15126:	6849      	ldr	r1, [r1, #4]
   15128:	6923      	ldr	r3, [r4, #16]
   1512a:	eb03 1862 	add.w	r8, r3, r2, asr #5
   1512e:	68a3      	ldr	r3, [r4, #8]
   15130:	4607      	mov	r7, r0
   15132:	4691      	mov	r9, r2
   15134:	ea4f 1a62 	mov.w	sl, r2, asr #5
   15138:	f108 0601 	add.w	r6, r8, #1
   1513c:	42b3      	cmp	r3, r6
   1513e:	db3f      	blt.n	151c0 <__lshift+0xa0>
   15140:	4638      	mov	r0, r7
   15142:	f7ff fe71 	bl	14e28 <_Balloc>
   15146:	2300      	movs	r3, #0
   15148:	4605      	mov	r5, r0
   1514a:	f100 0114 	add.w	r1, r0, #20
   1514e:	f100 0210 	add.w	r2, r0, #16
   15152:	4618      	mov	r0, r3
   15154:	4553      	cmp	r3, sl
   15156:	db36      	blt.n	151c6 <__lshift+0xa6>
   15158:	6920      	ldr	r0, [r4, #16]
   1515a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   1515e:	f104 0314 	add.w	r3, r4, #20
   15162:	f019 091f 	ands.w	r9, r9, #31
   15166:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   1516a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   1516e:	d02e      	beq.n	151ce <__lshift+0xae>
   15170:	f1c9 0e20 	rsb	lr, r9, #32
   15174:	468a      	mov	sl, r1
   15176:	2200      	movs	r2, #0
   15178:	6818      	ldr	r0, [r3, #0]
   1517a:	fa00 f009 	lsl.w	r0, r0, r9
   1517e:	4302      	orrs	r2, r0
   15180:	f84a 2b04 	str.w	r2, [sl], #4
   15184:	f853 2b04 	ldr.w	r2, [r3], #4
   15188:	459c      	cmp	ip, r3
   1518a:	fa22 f20e 	lsr.w	r2, r2, lr
   1518e:	d8f3      	bhi.n	15178 <__lshift+0x58>
   15190:	ebac 0304 	sub.w	r3, ip, r4
   15194:	3b15      	subs	r3, #21
   15196:	f023 0303 	bic.w	r3, r3, #3
   1519a:	3304      	adds	r3, #4
   1519c:	f104 0015 	add.w	r0, r4, #21
   151a0:	4560      	cmp	r0, ip
   151a2:	bf88      	it	hi
   151a4:	2304      	movhi	r3, #4
   151a6:	50ca      	str	r2, [r1, r3]
   151a8:	b10a      	cbz	r2, 151ae <__lshift+0x8e>
   151aa:	f108 0602 	add.w	r6, r8, #2
   151ae:	3e01      	subs	r6, #1
   151b0:	4638      	mov	r0, r7
   151b2:	612e      	str	r6, [r5, #16]
   151b4:	4621      	mov	r1, r4
   151b6:	f7ff fe6b 	bl	14e90 <_Bfree>
   151ba:	4628      	mov	r0, r5
   151bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   151c0:	3101      	adds	r1, #1
   151c2:	005b      	lsls	r3, r3, #1
   151c4:	e7ba      	b.n	1513c <__lshift+0x1c>
   151c6:	f842 0f04 	str.w	r0, [r2, #4]!
   151ca:	3301      	adds	r3, #1
   151cc:	e7c2      	b.n	15154 <__lshift+0x34>
   151ce:	3904      	subs	r1, #4
   151d0:	f853 2b04 	ldr.w	r2, [r3], #4
   151d4:	f841 2f04 	str.w	r2, [r1, #4]!
   151d8:	459c      	cmp	ip, r3
   151da:	d8f9      	bhi.n	151d0 <__lshift+0xb0>
   151dc:	e7e7      	b.n	151ae <__lshift+0x8e>

000151de <__mcmp>:
   151de:	690a      	ldr	r2, [r1, #16]
   151e0:	4603      	mov	r3, r0
   151e2:	6900      	ldr	r0, [r0, #16]
   151e4:	1a80      	subs	r0, r0, r2
   151e6:	b530      	push	{r4, r5, lr}
   151e8:	d10d      	bne.n	15206 <__mcmp+0x28>
   151ea:	3314      	adds	r3, #20
   151ec:	3114      	adds	r1, #20
   151ee:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   151f2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   151f6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   151fa:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   151fe:	4295      	cmp	r5, r2
   15200:	d002      	beq.n	15208 <__mcmp+0x2a>
   15202:	d304      	bcc.n	1520e <__mcmp+0x30>
   15204:	2001      	movs	r0, #1
   15206:	bd30      	pop	{r4, r5, pc}
   15208:	42a3      	cmp	r3, r4
   1520a:	d3f4      	bcc.n	151f6 <__mcmp+0x18>
   1520c:	e7fb      	b.n	15206 <__mcmp+0x28>
   1520e:	f04f 30ff 	mov.w	r0, #4294967295
   15212:	e7f8      	b.n	15206 <__mcmp+0x28>

00015214 <__mdiff>:
   15214:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15218:	460c      	mov	r4, r1
   1521a:	4606      	mov	r6, r0
   1521c:	4611      	mov	r1, r2
   1521e:	4620      	mov	r0, r4
   15220:	4617      	mov	r7, r2
   15222:	f7ff ffdc 	bl	151de <__mcmp>
   15226:	1e05      	subs	r5, r0, #0
   15228:	d108      	bne.n	1523c <__mdiff+0x28>
   1522a:	4629      	mov	r1, r5
   1522c:	4630      	mov	r0, r6
   1522e:	f7ff fdfb 	bl	14e28 <_Balloc>
   15232:	2301      	movs	r3, #1
   15234:	e9c0 3504 	strd	r3, r5, [r0, #16]
   15238:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1523c:	bfa4      	itt	ge
   1523e:	463b      	movge	r3, r7
   15240:	4627      	movge	r7, r4
   15242:	4630      	mov	r0, r6
   15244:	6879      	ldr	r1, [r7, #4]
   15246:	bfa6      	itte	ge
   15248:	461c      	movge	r4, r3
   1524a:	2500      	movge	r5, #0
   1524c:	2501      	movlt	r5, #1
   1524e:	f7ff fdeb 	bl	14e28 <_Balloc>
   15252:	693e      	ldr	r6, [r7, #16]
   15254:	60c5      	str	r5, [r0, #12]
   15256:	6925      	ldr	r5, [r4, #16]
   15258:	f107 0114 	add.w	r1, r7, #20
   1525c:	f104 0914 	add.w	r9, r4, #20
   15260:	f100 0e14 	add.w	lr, r0, #20
   15264:	f107 0210 	add.w	r2, r7, #16
   15268:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   1526c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   15270:	46f2      	mov	sl, lr
   15272:	2700      	movs	r7, #0
   15274:	f859 3b04 	ldr.w	r3, [r9], #4
   15278:	f852 bf04 	ldr.w	fp, [r2, #4]!
   1527c:	fa1f f883 	uxth.w	r8, r3
   15280:	fa17 f78b 	uxtah	r7, r7, fp
   15284:	0c1b      	lsrs	r3, r3, #16
   15286:	eba7 0808 	sub.w	r8, r7, r8
   1528a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   1528e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   15292:	fa1f f888 	uxth.w	r8, r8
   15296:	141f      	asrs	r7, r3, #16
   15298:	454d      	cmp	r5, r9
   1529a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   1529e:	f84a 3b04 	str.w	r3, [sl], #4
   152a2:	d8e7      	bhi.n	15274 <__mdiff+0x60>
   152a4:	1b2b      	subs	r3, r5, r4
   152a6:	3b15      	subs	r3, #21
   152a8:	f023 0303 	bic.w	r3, r3, #3
   152ac:	3304      	adds	r3, #4
   152ae:	3415      	adds	r4, #21
   152b0:	42a5      	cmp	r5, r4
   152b2:	bf38      	it	cc
   152b4:	2304      	movcc	r3, #4
   152b6:	4419      	add	r1, r3
   152b8:	4473      	add	r3, lr
   152ba:	469e      	mov	lr, r3
   152bc:	460d      	mov	r5, r1
   152be:	4565      	cmp	r5, ip
   152c0:	d30e      	bcc.n	152e0 <__mdiff+0xcc>
   152c2:	f10c 0203 	add.w	r2, ip, #3
   152c6:	1a52      	subs	r2, r2, r1
   152c8:	f022 0203 	bic.w	r2, r2, #3
   152cc:	3903      	subs	r1, #3
   152ce:	458c      	cmp	ip, r1
   152d0:	bf38      	it	cc
   152d2:	2200      	movcc	r2, #0
   152d4:	441a      	add	r2, r3
   152d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   152da:	b17b      	cbz	r3, 152fc <__mdiff+0xe8>
   152dc:	6106      	str	r6, [r0, #16]
   152de:	e7ab      	b.n	15238 <__mdiff+0x24>
   152e0:	f855 8b04 	ldr.w	r8, [r5], #4
   152e4:	fa17 f488 	uxtah	r4, r7, r8
   152e8:	1422      	asrs	r2, r4, #16
   152ea:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   152ee:	b2a4      	uxth	r4, r4
   152f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   152f4:	f84e 4b04 	str.w	r4, [lr], #4
   152f8:	1417      	asrs	r7, r2, #16
   152fa:	e7e0      	b.n	152be <__mdiff+0xaa>
   152fc:	3e01      	subs	r6, #1
   152fe:	e7ea      	b.n	152d6 <__mdiff+0xc2>

00015300 <__d2b>:
   15300:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15304:	2101      	movs	r1, #1
   15306:	461c      	mov	r4, r3
   15308:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
   1530c:	4690      	mov	r8, r2
   1530e:	f7ff fd8b 	bl	14e28 <_Balloc>
   15312:	f3c4 0313 	ubfx	r3, r4, #0, #20
   15316:	f3c4 540a 	ubfx	r4, r4, #20, #11
   1531a:	4607      	mov	r7, r0
   1531c:	bb2c      	cbnz	r4, 1536a <__d2b+0x6a>
   1531e:	9301      	str	r3, [sp, #4]
   15320:	f1b8 0300 	subs.w	r3, r8, #0
   15324:	d026      	beq.n	15374 <__d2b+0x74>
   15326:	4668      	mov	r0, sp
   15328:	9300      	str	r3, [sp, #0]
   1532a:	f7ff fe26 	bl	14f7a <__lo0bits>
   1532e:	9900      	ldr	r1, [sp, #0]
   15330:	b1f0      	cbz	r0, 15370 <__d2b+0x70>
   15332:	9a01      	ldr	r2, [sp, #4]
   15334:	f1c0 0320 	rsb	r3, r0, #32
   15338:	fa02 f303 	lsl.w	r3, r2, r3
   1533c:	430b      	orrs	r3, r1
   1533e:	40c2      	lsrs	r2, r0
   15340:	617b      	str	r3, [r7, #20]
   15342:	9201      	str	r2, [sp, #4]
   15344:	9b01      	ldr	r3, [sp, #4]
   15346:	61bb      	str	r3, [r7, #24]
   15348:	2b00      	cmp	r3, #0
   1534a:	bf14      	ite	ne
   1534c:	2102      	movne	r1, #2
   1534e:	2101      	moveq	r1, #1
   15350:	6139      	str	r1, [r7, #16]
   15352:	b1c4      	cbz	r4, 15386 <__d2b+0x86>
   15354:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   15358:	4404      	add	r4, r0
   1535a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   1535e:	6034      	str	r4, [r6, #0]
   15360:	6028      	str	r0, [r5, #0]
   15362:	4638      	mov	r0, r7
   15364:	b002      	add	sp, #8
   15366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1536a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1536e:	e7d6      	b.n	1531e <__d2b+0x1e>
   15370:	6179      	str	r1, [r7, #20]
   15372:	e7e7      	b.n	15344 <__d2b+0x44>
   15374:	a801      	add	r0, sp, #4
   15376:	f7ff fe00 	bl	14f7a <__lo0bits>
   1537a:	9b01      	ldr	r3, [sp, #4]
   1537c:	617b      	str	r3, [r7, #20]
   1537e:	2101      	movs	r1, #1
   15380:	6139      	str	r1, [r7, #16]
   15382:	3020      	adds	r0, #32
   15384:	e7e5      	b.n	15352 <__d2b+0x52>
   15386:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   1538a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   1538e:	6030      	str	r0, [r6, #0]
   15390:	6918      	ldr	r0, [r3, #16]
   15392:	f7ff fdd2 	bl	14f3a <__hi0bits>
   15396:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   1539a:	6029      	str	r1, [r5, #0]
   1539c:	e7e1      	b.n	15362 <__d2b+0x62>

0001539e <_calloc_r>:
   1539e:	b538      	push	{r3, r4, r5, lr}
   153a0:	fb02 f501 	mul.w	r5, r2, r1
   153a4:	4629      	mov	r1, r5
   153a6:	f7fb f83b 	bl	10420 <_malloc_r>
   153aa:	4604      	mov	r4, r0
   153ac:	b118      	cbz	r0, 153b6 <_calloc_r+0x18>
   153ae:	462a      	mov	r2, r5
   153b0:	2100      	movs	r1, #0
   153b2:	f7ff fb54 	bl	14a5e <memset>
   153b6:	4620      	mov	r0, r4
   153b8:	bd38      	pop	{r3, r4, r5, pc}

000153ba <__ssputs_r>:
   153ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   153be:	688e      	ldr	r6, [r1, #8]
   153c0:	429e      	cmp	r6, r3
   153c2:	4682      	mov	sl, r0
   153c4:	460c      	mov	r4, r1
   153c6:	4690      	mov	r8, r2
   153c8:	461f      	mov	r7, r3
   153ca:	d838      	bhi.n	1543e <__ssputs_r+0x84>
   153cc:	898a      	ldrh	r2, [r1, #12]
   153ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
   153d2:	d032      	beq.n	1543a <__ssputs_r+0x80>
   153d4:	6825      	ldr	r5, [r4, #0]
   153d6:	6909      	ldr	r1, [r1, #16]
   153d8:	eba5 0901 	sub.w	r9, r5, r1
   153dc:	6965      	ldr	r5, [r4, #20]
   153de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   153e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   153e6:	3301      	adds	r3, #1
   153e8:	444b      	add	r3, r9
   153ea:	106d      	asrs	r5, r5, #1
   153ec:	429d      	cmp	r5, r3
   153ee:	bf38      	it	cc
   153f0:	461d      	movcc	r5, r3
   153f2:	0553      	lsls	r3, r2, #21
   153f4:	d531      	bpl.n	1545a <__ssputs_r+0xa0>
   153f6:	4629      	mov	r1, r5
   153f8:	f7fb f812 	bl	10420 <_malloc_r>
   153fc:	4606      	mov	r6, r0
   153fe:	b950      	cbnz	r0, 15416 <__ssputs_r+0x5c>
   15400:	230c      	movs	r3, #12
   15402:	f8ca 3000 	str.w	r3, [sl]
   15406:	89a3      	ldrh	r3, [r4, #12]
   15408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1540c:	81a3      	strh	r3, [r4, #12]
   1540e:	f04f 30ff 	mov.w	r0, #4294967295
   15412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15416:	6921      	ldr	r1, [r4, #16]
   15418:	464a      	mov	r2, r9
   1541a:	f7ff fb12 	bl	14a42 <memcpy>
   1541e:	89a3      	ldrh	r3, [r4, #12]
   15420:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   15424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   15428:	81a3      	strh	r3, [r4, #12]
   1542a:	6126      	str	r6, [r4, #16]
   1542c:	6165      	str	r5, [r4, #20]
   1542e:	444e      	add	r6, r9
   15430:	eba5 0509 	sub.w	r5, r5, r9
   15434:	6026      	str	r6, [r4, #0]
   15436:	60a5      	str	r5, [r4, #8]
   15438:	463e      	mov	r6, r7
   1543a:	42be      	cmp	r6, r7
   1543c:	d900      	bls.n	15440 <__ssputs_r+0x86>
   1543e:	463e      	mov	r6, r7
   15440:	4632      	mov	r2, r6
   15442:	6820      	ldr	r0, [r4, #0]
   15444:	4641      	mov	r1, r8
   15446:	f000 f825 	bl	15494 <memmove>
   1544a:	68a3      	ldr	r3, [r4, #8]
   1544c:	6822      	ldr	r2, [r4, #0]
   1544e:	1b9b      	subs	r3, r3, r6
   15450:	4432      	add	r2, r6
   15452:	60a3      	str	r3, [r4, #8]
   15454:	6022      	str	r2, [r4, #0]
   15456:	2000      	movs	r0, #0
   15458:	e7db      	b.n	15412 <__ssputs_r+0x58>
   1545a:	462a      	mov	r2, r5
   1545c:	f000 f834 	bl	154c8 <_realloc_r>
   15460:	4606      	mov	r6, r0
   15462:	2800      	cmp	r0, #0
   15464:	d1e1      	bne.n	1542a <__ssputs_r+0x70>
   15466:	6921      	ldr	r1, [r4, #16]
   15468:	4650      	mov	r0, sl
   1546a:	f7fa ff8b 	bl	10384 <_free_r>
   1546e:	e7c7      	b.n	15400 <__ssputs_r+0x46>

00015470 <__ascii_mbtowc>:
   15470:	b082      	sub	sp, #8
   15472:	b901      	cbnz	r1, 15476 <__ascii_mbtowc+0x6>
   15474:	a901      	add	r1, sp, #4
   15476:	b142      	cbz	r2, 1548a <__ascii_mbtowc+0x1a>
   15478:	b14b      	cbz	r3, 1548e <__ascii_mbtowc+0x1e>
   1547a:	7813      	ldrb	r3, [r2, #0]
   1547c:	600b      	str	r3, [r1, #0]
   1547e:	7812      	ldrb	r2, [r2, #0]
   15480:	1e10      	subs	r0, r2, #0
   15482:	bf18      	it	ne
   15484:	2001      	movne	r0, #1
   15486:	b002      	add	sp, #8
   15488:	4770      	bx	lr
   1548a:	4610      	mov	r0, r2
   1548c:	e7fb      	b.n	15486 <__ascii_mbtowc+0x16>
   1548e:	f06f 0001 	mvn.w	r0, #1
   15492:	e7f8      	b.n	15486 <__ascii_mbtowc+0x16>

00015494 <memmove>:
   15494:	4288      	cmp	r0, r1
   15496:	b510      	push	{r4, lr}
   15498:	eb01 0402 	add.w	r4, r1, r2
   1549c:	d902      	bls.n	154a4 <memmove+0x10>
   1549e:	4284      	cmp	r4, r0
   154a0:	4623      	mov	r3, r4
   154a2:	d807      	bhi.n	154b4 <memmove+0x20>
   154a4:	1e43      	subs	r3, r0, #1
   154a6:	42a1      	cmp	r1, r4
   154a8:	d008      	beq.n	154bc <memmove+0x28>
   154aa:	f811 2b01 	ldrb.w	r2, [r1], #1
   154ae:	f803 2f01 	strb.w	r2, [r3, #1]!
   154b2:	e7f8      	b.n	154a6 <memmove+0x12>
   154b4:	4402      	add	r2, r0
   154b6:	4601      	mov	r1, r0
   154b8:	428a      	cmp	r2, r1
   154ba:	d100      	bne.n	154be <memmove+0x2a>
   154bc:	bd10      	pop	{r4, pc}
   154be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   154c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   154c6:	e7f7      	b.n	154b8 <memmove+0x24>

000154c8 <_realloc_r>:
   154c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   154ca:	4607      	mov	r7, r0
   154cc:	4614      	mov	r4, r2
   154ce:	460e      	mov	r6, r1
   154d0:	b921      	cbnz	r1, 154dc <_realloc_r+0x14>
   154d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   154d6:	4611      	mov	r1, r2
   154d8:	f7fa bfa2 	b.w	10420 <_malloc_r>
   154dc:	b922      	cbnz	r2, 154e8 <_realloc_r+0x20>
   154de:	f7fa ff51 	bl	10384 <_free_r>
   154e2:	4625      	mov	r5, r4
   154e4:	4628      	mov	r0, r5
   154e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   154e8:	f000 f821 	bl	1552e <_malloc_usable_size_r>
   154ec:	42a0      	cmp	r0, r4
   154ee:	d20f      	bcs.n	15510 <_realloc_r+0x48>
   154f0:	4621      	mov	r1, r4
   154f2:	4638      	mov	r0, r7
   154f4:	f7fa ff94 	bl	10420 <_malloc_r>
   154f8:	4605      	mov	r5, r0
   154fa:	2800      	cmp	r0, #0
   154fc:	d0f2      	beq.n	154e4 <_realloc_r+0x1c>
   154fe:	4631      	mov	r1, r6
   15500:	4622      	mov	r2, r4
   15502:	f7ff fa9e 	bl	14a42 <memcpy>
   15506:	4631      	mov	r1, r6
   15508:	4638      	mov	r0, r7
   1550a:	f7fa ff3b 	bl	10384 <_free_r>
   1550e:	e7e9      	b.n	154e4 <_realloc_r+0x1c>
   15510:	4635      	mov	r5, r6
   15512:	e7e7      	b.n	154e4 <_realloc_r+0x1c>

00015514 <__ascii_wctomb>:
   15514:	4603      	mov	r3, r0
   15516:	4608      	mov	r0, r1
   15518:	b141      	cbz	r1, 1552c <__ascii_wctomb+0x18>
   1551a:	2aff      	cmp	r2, #255	; 0xff
   1551c:	d904      	bls.n	15528 <__ascii_wctomb+0x14>
   1551e:	228a      	movs	r2, #138	; 0x8a
   15520:	601a      	str	r2, [r3, #0]
   15522:	f04f 30ff 	mov.w	r0, #4294967295
   15526:	4770      	bx	lr
   15528:	700a      	strb	r2, [r1, #0]
   1552a:	2001      	movs	r0, #1
   1552c:	4770      	bx	lr

0001552e <_malloc_usable_size_r>:
   1552e:	f851 3c04 	ldr.w	r3, [r1, #-4]
   15532:	1f18      	subs	r0, r3, #4
   15534:	2b00      	cmp	r3, #0
   15536:	bfbc      	itt	lt
   15538:	580b      	ldrlt	r3, [r1, r0]
   1553a:	18c0      	addlt	r0, r0, r3
   1553c:	4770      	bx	lr
	...

00015540 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   15540:	f7f6 baaa 	b.w	ba98 <SystemInit>
