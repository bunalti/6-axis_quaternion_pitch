
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	20002940 	.word	0x20002940
   4:	000060a1 	.word	0x000060a1
   8:	0000fc49 	.word	0x0000fc49
   c:	00006075 	.word	0x00006075
  10:	00006075 	.word	0x00006075
  14:	00006075 	.word	0x00006075
  18:	00006075 	.word	0x00006075
	...
  2c:	00005a65 	.word	0x00005a65
  30:	00006075 	.word	0x00006075
  34:	00000000 	.word	0x00000000
  38:	00005a11 	.word	0x00005a11
  3c:	00006075 	.word	0x00006075

00000040 <_irq_vector_table>:
  40:	00005b1d 00008a29 00005b1d 00005b1d     .[..)....[...[..
  50:	00005b1d 00005b1d 00005b1d 00005b1d     .[...[...[...[..
  60:	00005b1d 00005b1d 00010157 00005b1d     .[...[..W....[..
  70:	00005b1d 00005b1d 00005b1d 00005b1d     .[...[...[...[..
  80:	00005b1d 00005b1d 00005b1d 00005b1d     .[...[...[...[..
  90:	00008a99 00005b1d 00005b1d 00005b1d     .....[...[...[..
  a0:	00005b1d 00005b1d 00005b1d 00005b1d     .[...[...[...[..
  b0:	00005b1d 00005b1d 00005b1d 00005b1d     .[...[...[...[..
  c0:	00005b1d 00005b1d 00005b1d 00005b1d     .[...[...[...[..
  d0:	00005b1d 00005b1d 00005b1d              .[...[...[..

Disassembly of section text:

000000e0 <memchr>:
      e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
      e4:	2a10      	cmp	r2, #16
      e6:	db2b      	blt.n	140 <CONFIG_IDLE_STACK_SIZE>
      e8:	f010 0f07 	tst.w	r0, #7
      ec:	d008      	beq.n	100 <CONFIG_KOBJECT_TEXT_AREA>
      ee:	f810 3b01 	ldrb.w	r3, [r0], #1
      f2:	3a01      	subs	r2, #1
      f4:	428b      	cmp	r3, r1
      f6:	d02d      	beq.n	154 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa>
      f8:	f010 0f07 	tst.w	r0, #7
      fc:	b342      	cbz	r2, 150 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6>
      fe:	d1f6      	bne.n	ee <memchr+0xe>
     100:	b4f0      	push	{r4, r5, r6, r7}
     102:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     106:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     10a:	f022 0407 	bic.w	r4, r2, #7
     10e:	f07f 0700 	mvns.w	r7, #0
     112:	2300      	movs	r3, #0
     114:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     118:	3c08      	subs	r4, #8
     11a:	ea85 0501 	eor.w	r5, r5, r1
     11e:	ea86 0601 	eor.w	r6, r6, r1
     122:	fa85 f547 	uadd8	r5, r5, r7
     126:	faa3 f587 	sel	r5, r3, r7
     12a:	fa86 f647 	uadd8	r6, r6, r7
     12e:	faa5 f687 	sel	r6, r5, r7
     132:	b98e      	cbnz	r6, 158 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xe>
     134:	d1ee      	bne.n	114 <CONFIG_KOBJECT_TEXT_AREA+0x14>
     136:	bcf0      	pop	{r4, r5, r6, r7}
     138:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     13c:	f002 0207 	and.w	r2, r2, #7
     140:	b132      	cbz	r2, 150 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6>
     142:	f810 3b01 	ldrb.w	r3, [r0], #1
     146:	3a01      	subs	r2, #1
     148:	ea83 0301 	eor.w	r3, r3, r1
     14c:	b113      	cbz	r3, 154 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa>
     14e:	d1f8      	bne.n	142 <CONFIG_IDLE_STACK_SIZE+0x2>
     150:	2000      	movs	r0, #0
     152:	4770      	bx	lr
     154:	3801      	subs	r0, #1
     156:	4770      	bx	lr
     158:	2d00      	cmp	r5, #0
     15a:	bf06      	itte	eq
     15c:	4635      	moveq	r5, r6
     15e:	3803      	subeq	r0, #3
     160:	3807      	subne	r0, #7
     162:	f015 0f01 	tst.w	r5, #1
     166:	d107      	bne.n	178 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2e>
     168:	3001      	adds	r0, #1
     16a:	f415 7f80 	tst.w	r5, #256	; 0x100
     16e:	bf02      	ittt	eq
     170:	3001      	addeq	r0, #1
     172:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     176:	3001      	addeq	r0, #1
     178:	bcf0      	pop	{r4, r5, r6, r7}
     17a:	3801      	subs	r0, #1
     17c:	4770      	bx	lr
     17e:	bf00      	nop

00000180 <__aeabi_drsub>:
     180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     184:	e002      	b.n	18c <__adddf3>
     186:	bf00      	nop

00000188 <__aeabi_dsub>:
     188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000018c <__adddf3>:
     18c:	b530      	push	{r4, r5, lr}
     18e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     192:	ea4f 0543 	mov.w	r5, r3, lsl #1
     196:	ea94 0f05 	teq	r4, r5
     19a:	bf08      	it	eq
     19c:	ea90 0f02 	teqeq	r0, r2
     1a0:	bf1f      	itttt	ne
     1a2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1a6:	ea55 0c02 	orrsne.w	ip, r5, r2
     1aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     1ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     1b2:	f000 80e2 	beq.w	37a <__data_size+0x1d>
     1b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     1be:	bfb8      	it	lt
     1c0:	426d      	neglt	r5, r5
     1c2:	dd0c      	ble.n	1de <CONFIG_FS_FATFS_CODEPAGE+0x29>
     1c4:	442c      	add	r4, r5
     1c6:	ea80 0202 	eor.w	r2, r0, r2
     1ca:	ea81 0303 	eor.w	r3, r1, r3
     1ce:	ea82 0000 	eor.w	r0, r2, r0
     1d2:	ea83 0101 	eor.w	r1, r3, r1
     1d6:	ea80 0202 	eor.w	r2, r0, r2
     1da:	ea81 0303 	eor.w	r3, r1, r3
     1de:	2d36      	cmp	r5, #54	; 0x36
     1e0:	bf88      	it	hi
     1e2:	bd30      	pophi	{r4, r5, pc}
     1e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     1e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     1ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     1f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     1f4:	d002      	beq.n	1fc <CONFIG_FS_FATFS_CODEPAGE+0x47>
     1f6:	4240      	negs	r0, r0
     1f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     200:	ea4f 3303 	mov.w	r3, r3, lsl #12
     204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     208:	d002      	beq.n	210 <CONFIG_FLASH_SIZE+0x10>
     20a:	4252      	negs	r2, r2
     20c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     210:	ea94 0f05 	teq	r4, r5
     214:	f000 80a7 	beq.w	366 <__data_size+0x9>
     218:	f1a4 0401 	sub.w	r4, r4, #1
     21c:	f1d5 0e20 	rsbs	lr, r5, #32
     220:	db0d      	blt.n	23e <CONFIG_FLASH_SIZE+0x3e>
     222:	fa02 fc0e 	lsl.w	ip, r2, lr
     226:	fa22 f205 	lsr.w	r2, r2, r5
     22a:	1880      	adds	r0, r0, r2
     22c:	f141 0100 	adc.w	r1, r1, #0
     230:	fa03 f20e 	lsl.w	r2, r3, lr
     234:	1880      	adds	r0, r0, r2
     236:	fa43 f305 	asr.w	r3, r3, r5
     23a:	4159      	adcs	r1, r3
     23c:	e00e      	b.n	25c <CONFIG_FLASH_SIZE+0x5c>
     23e:	f1a5 0520 	sub.w	r5, r5, #32
     242:	f10e 0e20 	add.w	lr, lr, #32
     246:	2a01      	cmp	r2, #1
     248:	fa03 fc0e 	lsl.w	ip, r3, lr
     24c:	bf28      	it	cs
     24e:	f04c 0c02 	orrcs.w	ip, ip, #2
     252:	fa43 f305 	asr.w	r3, r3, r5
     256:	18c0      	adds	r0, r0, r3
     258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     25c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     260:	d507      	bpl.n	272 <CONFIG_FLASH_SIZE+0x72>
     262:	f04f 0e00 	mov.w	lr, #0
     266:	f1dc 0c00 	rsbs	ip, ip, #0
     26a:	eb7e 0000 	sbcs.w	r0, lr, r0
     26e:	eb6e 0101 	sbc.w	r1, lr, r1
     272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     276:	d31b      	bcc.n	2b0 <CONFIG_FLASH_SIZE+0xb0>
     278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     27c:	d30c      	bcc.n	298 <CONFIG_FLASH_SIZE+0x98>
     27e:	0849      	lsrs	r1, r1, #1
     280:	ea5f 0030 	movs.w	r0, r0, rrx
     284:	ea4f 0c3c 	mov.w	ip, ip, rrx
     288:	f104 0401 	add.w	r4, r4, #1
     28c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     294:	f080 809a 	bcs.w	3cc <__data_size+0x6f>
     298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     29c:	bf08      	it	eq
     29e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2a2:	f150 0000 	adcs.w	r0, r0, #0
     2a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2aa:	ea41 0105 	orr.w	r1, r1, r5
     2ae:	bd30      	pop	{r4, r5, pc}
     2b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2b4:	4140      	adcs	r0, r0
     2b6:	eb41 0101 	adc.w	r1, r1, r1
     2ba:	3c01      	subs	r4, #1
     2bc:	bf28      	it	cs
     2be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2c2:	d2e9      	bcs.n	298 <CONFIG_FLASH_SIZE+0x98>
     2c4:	f091 0f00 	teq	r1, #0
     2c8:	bf04      	itt	eq
     2ca:	4601      	moveq	r1, r0
     2cc:	2000      	moveq	r0, #0
     2ce:	fab1 f381 	clz	r3, r1
     2d2:	bf08      	it	eq
     2d4:	3320      	addeq	r3, #32
     2d6:	f1a3 030b 	sub.w	r3, r3, #11
     2da:	f1b3 0220 	subs.w	r2, r3, #32
     2de:	da0c      	bge.n	2fa <CONFIG_FLASH_SIZE+0xfa>
     2e0:	320c      	adds	r2, #12
     2e2:	dd08      	ble.n	2f6 <CONFIG_FLASH_SIZE+0xf6>
     2e4:	f102 0c14 	add.w	ip, r2, #20
     2e8:	f1c2 020c 	rsb	r2, r2, #12
     2ec:	fa01 f00c 	lsl.w	r0, r1, ip
     2f0:	fa21 f102 	lsr.w	r1, r1, r2
     2f4:	e00c      	b.n	310 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x10>
     2f6:	f102 0214 	add.w	r2, r2, #20
     2fa:	bfd8      	it	le
     2fc:	f1c2 0c20 	rsble	ip, r2, #32
     300:	fa01 f102 	lsl.w	r1, r1, r2
     304:	fa20 fc0c 	lsr.w	ip, r0, ip
     308:	bfdc      	itt	le
     30a:	ea41 010c 	orrle.w	r1, r1, ip
     30e:	4090      	lslle	r0, r2
     310:	1ae4      	subs	r4, r4, r3
     312:	bfa2      	ittt	ge
     314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     318:	4329      	orrge	r1, r5
     31a:	bd30      	popge	{r4, r5, pc}
     31c:	ea6f 0404 	mvn.w	r4, r4
     320:	3c1f      	subs	r4, #31
     322:	da1c      	bge.n	35e <__data_size+0x1>
     324:	340c      	adds	r4, #12
     326:	dc0e      	bgt.n	346 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x46>
     328:	f104 0414 	add.w	r4, r4, #20
     32c:	f1c4 0220 	rsb	r2, r4, #32
     330:	fa20 f004 	lsr.w	r0, r0, r4
     334:	fa01 f302 	lsl.w	r3, r1, r2
     338:	ea40 0003 	orr.w	r0, r0, r3
     33c:	fa21 f304 	lsr.w	r3, r1, r4
     340:	ea45 0103 	orr.w	r1, r5, r3
     344:	bd30      	pop	{r4, r5, pc}
     346:	f1c4 040c 	rsb	r4, r4, #12
     34a:	f1c4 0220 	rsb	r2, r4, #32
     34e:	fa20 f002 	lsr.w	r0, r0, r2
     352:	fa01 f304 	lsl.w	r3, r1, r4
     356:	ea40 0003 	orr.w	r0, r0, r3
     35a:	4629      	mov	r1, r5
     35c:	bd30      	pop	{r4, r5, pc}
     35e:	fa21 f004 	lsr.w	r0, r1, r4
     362:	4629      	mov	r1, r5
     364:	bd30      	pop	{r4, r5, pc}
     366:	f094 0f00 	teq	r4, #0
     36a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     36e:	bf06      	itte	eq
     370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     374:	3401      	addeq	r4, #1
     376:	3d01      	subne	r5, #1
     378:	e74e      	b.n	218 <CONFIG_FLASH_SIZE+0x18>
     37a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     37e:	bf18      	it	ne
     380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     384:	d029      	beq.n	3da <__data_size+0x7d>
     386:	ea94 0f05 	teq	r4, r5
     38a:	bf08      	it	eq
     38c:	ea90 0f02 	teqeq	r0, r2
     390:	d005      	beq.n	39e <__data_size+0x41>
     392:	ea54 0c00 	orrs.w	ip, r4, r0
     396:	bf04      	itt	eq
     398:	4619      	moveq	r1, r3
     39a:	4610      	moveq	r0, r2
     39c:	bd30      	pop	{r4, r5, pc}
     39e:	ea91 0f03 	teq	r1, r3
     3a2:	bf1e      	ittt	ne
     3a4:	2100      	movne	r1, #0
     3a6:	2000      	movne	r0, #0
     3a8:	bd30      	popne	{r4, r5, pc}
     3aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ae:	d105      	bne.n	3bc <__data_size+0x5f>
     3b0:	0040      	lsls	r0, r0, #1
     3b2:	4149      	adcs	r1, r1
     3b4:	bf28      	it	cs
     3b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3ba:	bd30      	pop	{r4, r5, pc}
     3bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3c0:	bf3c      	itt	cc
     3c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3c6:	bd30      	popcc	{r4, r5, pc}
     3c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3d4:	f04f 0000 	mov.w	r0, #0
     3d8:	bd30      	pop	{r4, r5, pc}
     3da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3de:	bf1a      	itte	ne
     3e0:	4619      	movne	r1, r3
     3e2:	4610      	movne	r0, r2
     3e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     3e8:	bf1c      	itt	ne
     3ea:	460b      	movne	r3, r1
     3ec:	4602      	movne	r2, r0
     3ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     3f2:	bf06      	itte	eq
     3f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     3f8:	ea91 0f03 	teqeq	r1, r3
     3fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     400:	bd30      	pop	{r4, r5, pc}
     402:	bf00      	nop

00000404 <__aeabi_ui2d>:
     404:	f090 0f00 	teq	r0, #0
     408:	bf04      	itt	eq
     40a:	2100      	moveq	r1, #0
     40c:	4770      	bxeq	lr
     40e:	b530      	push	{r4, r5, lr}
     410:	f44f 6480 	mov.w	r4, #1024	; 0x400
     414:	f104 0432 	add.w	r4, r4, #50	; 0x32
     418:	f04f 0500 	mov.w	r5, #0
     41c:	f04f 0100 	mov.w	r1, #0
     420:	e750      	b.n	2c4 <CONFIG_FLASH_SIZE+0xc4>
     422:	bf00      	nop

00000424 <__aeabi_i2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     43c:	bf48      	it	mi
     43e:	4240      	negmi	r0, r0
     440:	f04f 0100 	mov.w	r1, #0
     444:	e73e      	b.n	2c4 <CONFIG_FLASH_SIZE+0xc4>
     446:	bf00      	nop

00000448 <__aeabi_f2d>:
     448:	0042      	lsls	r2, r0, #1
     44a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     44e:	ea4f 0131 	mov.w	r1, r1, rrx
     452:	ea4f 7002 	mov.w	r0, r2, lsl #28
     456:	bf1f      	itttt	ne
     458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     45c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     464:	4770      	bxne	lr
     466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     46a:	bf08      	it	eq
     46c:	4770      	bxeq	lr
     46e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     472:	bf04      	itt	eq
     474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     478:	4770      	bxeq	lr
     47a:	b530      	push	{r4, r5, lr}
     47c:	f44f 7460 	mov.w	r4, #896	; 0x380
     480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     488:	e71c      	b.n	2c4 <CONFIG_FLASH_SIZE+0xc4>
     48a:	bf00      	nop

0000048c <__aeabi_ul2d>:
     48c:	ea50 0201 	orrs.w	r2, r0, r1
     490:	bf08      	it	eq
     492:	4770      	bxeq	lr
     494:	b530      	push	{r4, r5, lr}
     496:	f04f 0500 	mov.w	r5, #0
     49a:	e00a      	b.n	4b2 <__aeabi_l2d+0x16>

0000049c <__aeabi_l2d>:
     49c:	ea50 0201 	orrs.w	r2, r0, r1
     4a0:	bf08      	it	eq
     4a2:	4770      	bxeq	lr
     4a4:	b530      	push	{r4, r5, lr}
     4a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4aa:	d502      	bpl.n	4b2 <__aeabi_l2d+0x16>
     4ac:	4240      	negs	r0, r0
     4ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4be:	f43f aed8 	beq.w	272 <CONFIG_FLASH_SIZE+0x72>
     4c2:	f04f 0203 	mov.w	r2, #3
     4c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ca:	bf18      	it	ne
     4cc:	3203      	addne	r2, #3
     4ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4d2:	bf18      	it	ne
     4d4:	3203      	addne	r2, #3
     4d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4da:	f1c2 0320 	rsb	r3, r2, #32
     4de:	fa00 fc03 	lsl.w	ip, r0, r3
     4e2:	fa20 f002 	lsr.w	r0, r0, r2
     4e6:	fa01 fe03 	lsl.w	lr, r1, r3
     4ea:	ea40 000e 	orr.w	r0, r0, lr
     4ee:	fa21 f102 	lsr.w	r1, r1, r2
     4f2:	4414      	add	r4, r2
     4f4:	e6bd      	b.n	272 <CONFIG_FLASH_SIZE+0x72>
     4f6:	bf00      	nop

000004f8 <__aeabi_dmul>:
     4f8:	b570      	push	{r4, r5, r6, lr}
     4fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
     4fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     506:	bf1d      	ittte	ne
     508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     50c:	ea94 0f0c 	teqne	r4, ip
     510:	ea95 0f0c 	teqne	r5, ip
     514:	f000 f8de 	bleq	6d4 <__aeabi_dmul+0x1dc>
     518:	442c      	add	r4, r5
     51a:	ea81 0603 	eor.w	r6, r1, r3
     51e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     52a:	bf18      	it	ne
     52c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     538:	d038      	beq.n	5ac <__aeabi_dmul+0xb4>
     53a:	fba0 ce02 	umull	ip, lr, r0, r2
     53e:	f04f 0500 	mov.w	r5, #0
     542:	fbe1 e502 	umlal	lr, r5, r1, r2
     546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     54a:	fbe0 e503 	umlal	lr, r5, r0, r3
     54e:	f04f 0600 	mov.w	r6, #0
     552:	fbe1 5603 	umlal	r5, r6, r1, r3
     556:	f09c 0f00 	teq	ip, #0
     55a:	bf18      	it	ne
     55c:	f04e 0e01 	orrne.w	lr, lr, #1
     560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     56c:	d204      	bcs.n	578 <__aeabi_dmul+0x80>
     56e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     572:	416d      	adcs	r5, r5
     574:	eb46 0606 	adc.w	r6, r6, r6
     578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     57c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     58c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     590:	bf88      	it	hi
     592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     596:	d81e      	bhi.n	5d6 <__aeabi_dmul+0xde>
     598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     59c:	bf08      	it	eq
     59e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5a2:	f150 0000 	adcs.w	r0, r0, #0
     5a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5b0:	ea46 0101 	orr.w	r1, r6, r1
     5b4:	ea40 0002 	orr.w	r0, r0, r2
     5b8:	ea81 0103 	eor.w	r1, r1, r3
     5bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5c0:	bfc2      	ittt	gt
     5c2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ca:	bd70      	popgt	{r4, r5, r6, pc}
     5cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5d0:	f04f 0e00 	mov.w	lr, #0
     5d4:	3c01      	subs	r4, #1
     5d6:	f300 80ab 	bgt.w	730 <__aeabi_dmul+0x238>
     5da:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5de:	bfde      	ittt	le
     5e0:	2000      	movle	r0, #0
     5e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     5e6:	bd70      	pople	{r4, r5, r6, pc}
     5e8:	f1c4 0400 	rsb	r4, r4, #0
     5ec:	3c20      	subs	r4, #32
     5ee:	da35      	bge.n	65c <__aeabi_dmul+0x164>
     5f0:	340c      	adds	r4, #12
     5f2:	dc1b      	bgt.n	62c <__aeabi_dmul+0x134>
     5f4:	f104 0414 	add.w	r4, r4, #20
     5f8:	f1c4 0520 	rsb	r5, r4, #32
     5fc:	fa00 f305 	lsl.w	r3, r0, r5
     600:	fa20 f004 	lsr.w	r0, r0, r4
     604:	fa01 f205 	lsl.w	r2, r1, r5
     608:	ea40 0002 	orr.w	r0, r0, r2
     60c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     618:	fa21 f604 	lsr.w	r6, r1, r4
     61c:	eb42 0106 	adc.w	r1, r2, r6
     620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     624:	bf08      	it	eq
     626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     62a:	bd70      	pop	{r4, r5, r6, pc}
     62c:	f1c4 040c 	rsb	r4, r4, #12
     630:	f1c4 0520 	rsb	r5, r4, #32
     634:	fa00 f304 	lsl.w	r3, r0, r4
     638:	fa20 f005 	lsr.w	r0, r0, r5
     63c:	fa01 f204 	lsl.w	r2, r1, r4
     640:	ea40 0002 	orr.w	r0, r0, r2
     644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     64c:	f141 0100 	adc.w	r1, r1, #0
     650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     654:	bf08      	it	eq
     656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     65a:	bd70      	pop	{r4, r5, r6, pc}
     65c:	f1c4 0520 	rsb	r5, r4, #32
     660:	fa00 f205 	lsl.w	r2, r0, r5
     664:	ea4e 0e02 	orr.w	lr, lr, r2
     668:	fa20 f304 	lsr.w	r3, r0, r4
     66c:	fa01 f205 	lsl.w	r2, r1, r5
     670:	ea43 0302 	orr.w	r3, r3, r2
     674:	fa21 f004 	lsr.w	r0, r1, r4
     678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     67c:	fa21 f204 	lsr.w	r2, r1, r4
     680:	ea20 0002 	bic.w	r0, r0, r2
     684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     68c:	bf08      	it	eq
     68e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     692:	bd70      	pop	{r4, r5, r6, pc}
     694:	f094 0f00 	teq	r4, #0
     698:	d10f      	bne.n	6ba <__aeabi_dmul+0x1c2>
     69a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     69e:	0040      	lsls	r0, r0, #1
     6a0:	eb41 0101 	adc.w	r1, r1, r1
     6a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6a8:	bf08      	it	eq
     6aa:	3c01      	subeq	r4, #1
     6ac:	d0f7      	beq.n	69e <__aeabi_dmul+0x1a6>
     6ae:	ea41 0106 	orr.w	r1, r1, r6
     6b2:	f095 0f00 	teq	r5, #0
     6b6:	bf18      	it	ne
     6b8:	4770      	bxne	lr
     6ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6be:	0052      	lsls	r2, r2, #1
     6c0:	eb43 0303 	adc.w	r3, r3, r3
     6c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3d01      	subeq	r5, #1
     6cc:	d0f7      	beq.n	6be <__aeabi_dmul+0x1c6>
     6ce:	ea43 0306 	orr.w	r3, r3, r6
     6d2:	4770      	bx	lr
     6d4:	ea94 0f0c 	teq	r4, ip
     6d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6dc:	bf18      	it	ne
     6de:	ea95 0f0c 	teqne	r5, ip
     6e2:	d00c      	beq.n	6fe <__aeabi_dmul+0x206>
     6e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6e8:	bf18      	it	ne
     6ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6ee:	d1d1      	bne.n	694 <__aeabi_dmul+0x19c>
     6f0:	ea81 0103 	eor.w	r1, r1, r3
     6f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6f8:	f04f 0000 	mov.w	r0, #0
     6fc:	bd70      	pop	{r4, r5, r6, pc}
     6fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     702:	bf06      	itte	eq
     704:	4610      	moveq	r0, r2
     706:	4619      	moveq	r1, r3
     708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70c:	d019      	beq.n	742 <__aeabi_dmul+0x24a>
     70e:	ea94 0f0c 	teq	r4, ip
     712:	d102      	bne.n	71a <__aeabi_dmul+0x222>
     714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     718:	d113      	bne.n	742 <__aeabi_dmul+0x24a>
     71a:	ea95 0f0c 	teq	r5, ip
     71e:	d105      	bne.n	72c <__aeabi_dmul+0x234>
     720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     724:	bf1c      	itt	ne
     726:	4610      	movne	r0, r2
     728:	4619      	movne	r1, r3
     72a:	d10a      	bne.n	742 <__aeabi_dmul+0x24a>
     72c:	ea81 0103 	eor.w	r1, r1, r3
     730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     73c:	f04f 0000 	mov.w	r0, #0
     740:	bd70      	pop	{r4, r5, r6, pc}
     742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     74a:	bd70      	pop	{r4, r5, r6, pc}

0000074c <__aeabi_ddiv>:
     74c:	b570      	push	{r4, r5, r6, lr}
     74e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     75a:	bf1d      	ittte	ne
     75c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     760:	ea94 0f0c 	teqne	r4, ip
     764:	ea95 0f0c 	teqne	r5, ip
     768:	f000 f8a7 	bleq	8ba <CONFIG_HEAP_MEM_POOL_SIZE+0xba>
     76c:	eba4 0405 	sub.w	r4, r4, r5
     770:	ea81 0e03 	eor.w	lr, r1, r3
     774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     778:	ea4f 3101 	mov.w	r1, r1, lsl #12
     77c:	f000 8088 	beq.w	890 <CONFIG_HEAP_MEM_POOL_SIZE+0x90>
     780:	ea4f 3303 	mov.w	r3, r3, lsl #12
     784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     78c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     790:	ea4f 2202 	mov.w	r2, r2, lsl #8
     794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     79c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7a4:	429d      	cmp	r5, r3
     7a6:	bf08      	it	eq
     7a8:	4296      	cmpeq	r6, r2
     7aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7b2:	d202      	bcs.n	7ba <__aeabi_ddiv+0x6e>
     7b4:	085b      	lsrs	r3, r3, #1
     7b6:	ea4f 0232 	mov.w	r2, r2, rrx
     7ba:	1ab6      	subs	r6, r6, r2
     7bc:	eb65 0503 	sbc.w	r5, r5, r3
     7c0:	085b      	lsrs	r3, r3, #1
     7c2:	ea4f 0232 	mov.w	r2, r2, rrx
     7c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ce:	ebb6 0e02 	subs.w	lr, r6, r2
     7d2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7d6:	bf22      	ittt	cs
     7d8:	1ab6      	subcs	r6, r6, r2
     7da:	4675      	movcs	r5, lr
     7dc:	ea40 000c 	orrcs.w	r0, r0, ip
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	ebb6 0e02 	subs.w	lr, r6, r2
     7ea:	eb75 0e03 	sbcs.w	lr, r5, r3
     7ee:	bf22      	ittt	cs
     7f0:	1ab6      	subcs	r6, r6, r2
     7f2:	4675      	movcs	r5, lr
     7f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     7f8:	085b      	lsrs	r3, r3, #1
     7fa:	ea4f 0232 	mov.w	r2, r2, rrx
     7fe:	ebb6 0e02 	subs.w	lr, r6, r2
     802:	eb75 0e03 	sbcs.w	lr, r5, r3
     806:	bf22      	ittt	cs
     808:	1ab6      	subcs	r6, r6, r2
     80a:	4675      	movcs	r5, lr
     80c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     810:	085b      	lsrs	r3, r3, #1
     812:	ea4f 0232 	mov.w	r2, r2, rrx
     816:	ebb6 0e02 	subs.w	lr, r6, r2
     81a:	eb75 0e03 	sbcs.w	lr, r5, r3
     81e:	bf22      	ittt	cs
     820:	1ab6      	subcs	r6, r6, r2
     822:	4675      	movcs	r5, lr
     824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     828:	ea55 0e06 	orrs.w	lr, r5, r6
     82c:	d018      	beq.n	860 <CONFIG_HEAP_MEM_POOL_SIZE+0x60>
     82e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     836:	ea4f 1606 	mov.w	r6, r6, lsl #4
     83a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     83e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     84a:	d1c0      	bne.n	7ce <__aeabi_ddiv+0x82>
     84c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     850:	d10b      	bne.n	86a <CONFIG_HEAP_MEM_POOL_SIZE+0x6a>
     852:	ea41 0100 	orr.w	r1, r1, r0
     856:	f04f 0000 	mov.w	r0, #0
     85a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     85e:	e7b6      	b.n	7ce <__aeabi_ddiv+0x82>
     860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     864:	bf04      	itt	eq
     866:	4301      	orreq	r1, r0
     868:	2000      	moveq	r0, #0
     86a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     86e:	bf88      	it	hi
     870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     874:	f63f aeaf 	bhi.w	5d6 <__aeabi_dmul+0xde>
     878:	ebb5 0c03 	subs.w	ip, r5, r3
     87c:	bf04      	itt	eq
     87e:	ebb6 0c02 	subseq.w	ip, r6, r2
     882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     886:	f150 0000 	adcs.w	r0, r0, #0
     88a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     88e:	bd70      	pop	{r4, r5, r6, pc}
     890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     89c:	bfc2      	ittt	gt
     89e:	ebd4 050c 	rsbsgt	r5, r4, ip
     8a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8a6:	bd70      	popgt	{r4, r5, r6, pc}
     8a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8ac:	f04f 0e00 	mov.w	lr, #0
     8b0:	3c01      	subs	r4, #1
     8b2:	e690      	b.n	5d6 <__aeabi_dmul+0xde>
     8b4:	ea45 0e06 	orr.w	lr, r5, r6
     8b8:	e68d      	b.n	5d6 <__aeabi_dmul+0xde>
     8ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8be:	ea94 0f0c 	teq	r4, ip
     8c2:	bf08      	it	eq
     8c4:	ea95 0f0c 	teqeq	r5, ip
     8c8:	f43f af3b 	beq.w	742 <__aeabi_dmul+0x24a>
     8cc:	ea94 0f0c 	teq	r4, ip
     8d0:	d10a      	bne.n	8e8 <CONFIG_HEAP_MEM_POOL_SIZE+0xe8>
     8d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8d6:	f47f af34 	bne.w	742 <__aeabi_dmul+0x24a>
     8da:	ea95 0f0c 	teq	r5, ip
     8de:	f47f af25 	bne.w	72c <__aeabi_dmul+0x234>
     8e2:	4610      	mov	r0, r2
     8e4:	4619      	mov	r1, r3
     8e6:	e72c      	b.n	742 <__aeabi_dmul+0x24a>
     8e8:	ea95 0f0c 	teq	r5, ip
     8ec:	d106      	bne.n	8fc <CONFIG_HEAP_MEM_POOL_SIZE+0xfc>
     8ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     8f2:	f43f aefd 	beq.w	6f0 <__aeabi_dmul+0x1f8>
     8f6:	4610      	mov	r0, r2
     8f8:	4619      	mov	r1, r3
     8fa:	e722      	b.n	742 <__aeabi_dmul+0x24a>
     8fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     900:	bf18      	it	ne
     902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     906:	f47f aec5 	bne.w	694 <__aeabi_dmul+0x19c>
     90a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     90e:	f47f af0d 	bne.w	72c <__aeabi_dmul+0x234>
     912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     916:	f47f aeeb 	bne.w	6f0 <__aeabi_dmul+0x1f8>
     91a:	e712      	b.n	742 <__aeabi_dmul+0x24a>

0000091c <__gedf2>:
     91c:	f04f 3cff 	mov.w	ip, #4294967295
     920:	e006      	b.n	930 <__cmpdf2+0x4>
     922:	bf00      	nop

00000924 <__ledf2>:
     924:	f04f 0c01 	mov.w	ip, #1
     928:	e002      	b.n	930 <__cmpdf2+0x4>
     92a:	bf00      	nop

0000092c <__cmpdf2>:
     92c:	f04f 0c01 	mov.w	ip, #1
     930:	f84d cd04 	str.w	ip, [sp, #-4]!
     934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     93c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     940:	bf18      	it	ne
     942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     946:	d01b      	beq.n	980 <__cmpdf2+0x54>
     948:	b001      	add	sp, #4
     94a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     94e:	bf0c      	ite	eq
     950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     954:	ea91 0f03 	teqne	r1, r3
     958:	bf02      	ittt	eq
     95a:	ea90 0f02 	teqeq	r0, r2
     95e:	2000      	moveq	r0, #0
     960:	4770      	bxeq	lr
     962:	f110 0f00 	cmn.w	r0, #0
     966:	ea91 0f03 	teq	r1, r3
     96a:	bf58      	it	pl
     96c:	4299      	cmppl	r1, r3
     96e:	bf08      	it	eq
     970:	4290      	cmpeq	r0, r2
     972:	bf2c      	ite	cs
     974:	17d8      	asrcs	r0, r3, #31
     976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     97a:	f040 0001 	orr.w	r0, r0, #1
     97e:	4770      	bx	lr
     980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     988:	d102      	bne.n	990 <__cmpdf2+0x64>
     98a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     98e:	d107      	bne.n	9a0 <__cmpdf2+0x74>
     990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     998:	d1d6      	bne.n	948 <__cmpdf2+0x1c>
     99a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     99e:	d0d3      	beq.n	948 <__cmpdf2+0x1c>
     9a0:	f85d 0b04 	ldr.w	r0, [sp], #4
     9a4:	4770      	bx	lr
     9a6:	bf00      	nop

000009a8 <__aeabi_cdrcmple>:
     9a8:	4684      	mov	ip, r0
     9aa:	4610      	mov	r0, r2
     9ac:	4662      	mov	r2, ip
     9ae:	468c      	mov	ip, r1
     9b0:	4619      	mov	r1, r3
     9b2:	4663      	mov	r3, ip
     9b4:	e000      	b.n	9b8 <__aeabi_cdcmpeq>
     9b6:	bf00      	nop

000009b8 <__aeabi_cdcmpeq>:
     9b8:	b501      	push	{r0, lr}
     9ba:	f7ff ffb7 	bl	92c <__cmpdf2>
     9be:	2800      	cmp	r0, #0
     9c0:	bf48      	it	mi
     9c2:	f110 0f00 	cmnmi.w	r0, #0
     9c6:	bd01      	pop	{r0, pc}

000009c8 <__aeabi_dcmpeq>:
     9c8:	f84d ed08 	str.w	lr, [sp, #-8]!
     9cc:	f7ff fff4 	bl	9b8 <__aeabi_cdcmpeq>
     9d0:	bf0c      	ite	eq
     9d2:	2001      	moveq	r0, #1
     9d4:	2000      	movne	r0, #0
     9d6:	f85d fb08 	ldr.w	pc, [sp], #8
     9da:	bf00      	nop

000009dc <__aeabi_dcmplt>:
     9dc:	f84d ed08 	str.w	lr, [sp, #-8]!
     9e0:	f7ff ffea 	bl	9b8 <__aeabi_cdcmpeq>
     9e4:	bf34      	ite	cc
     9e6:	2001      	movcc	r0, #1
     9e8:	2000      	movcs	r0, #0
     9ea:	f85d fb08 	ldr.w	pc, [sp], #8
     9ee:	bf00      	nop

000009f0 <__aeabi_dcmple>:
     9f0:	f84d ed08 	str.w	lr, [sp, #-8]!
     9f4:	f7ff ffe0 	bl	9b8 <__aeabi_cdcmpeq>
     9f8:	bf94      	ite	ls
     9fa:	2001      	movls	r0, #1
     9fc:	2000      	movhi	r0, #0
     9fe:	f85d fb08 	ldr.w	pc, [sp], #8
     a02:	bf00      	nop

00000a04 <__aeabi_dcmpge>:
     a04:	f84d ed08 	str.w	lr, [sp, #-8]!
     a08:	f7ff ffce 	bl	9a8 <__aeabi_cdrcmple>
     a0c:	bf94      	ite	ls
     a0e:	2001      	movls	r0, #1
     a10:	2000      	movhi	r0, #0
     a12:	f85d fb08 	ldr.w	pc, [sp], #8
     a16:	bf00      	nop

00000a18 <__aeabi_dcmpgt>:
     a18:	f84d ed08 	str.w	lr, [sp, #-8]!
     a1c:	f7ff ffc4 	bl	9a8 <__aeabi_cdrcmple>
     a20:	bf34      	ite	cc
     a22:	2001      	movcc	r0, #1
     a24:	2000      	movcs	r0, #0
     a26:	f85d fb08 	ldr.w	pc, [sp], #8
     a2a:	bf00      	nop

00000a2c <__aeabi_d2f>:
     a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     a34:	bf24      	itt	cs
     a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     a3e:	d90d      	bls.n	a5c <__aeabi_d2f+0x30>
     a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     a54:	bf08      	it	eq
     a56:	f020 0001 	biceq.w	r0, r0, #1
     a5a:	4770      	bx	lr
     a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     a60:	d121      	bne.n	aa6 <__aeabi_d2f+0x7a>
     a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     a66:	bfbc      	itt	lt
     a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     a6c:	4770      	bxlt	lr
     a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
     a76:	f1c2 0218 	rsb	r2, r2, #24
     a7a:	f1c2 0c20 	rsb	ip, r2, #32
     a7e:	fa10 f30c 	lsls.w	r3, r0, ip
     a82:	fa20 f002 	lsr.w	r0, r0, r2
     a86:	bf18      	it	ne
     a88:	f040 0001 	orrne.w	r0, r0, #1
     a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     a94:	fa03 fc0c 	lsl.w	ip, r3, ip
     a98:	ea40 000c 	orr.w	r0, r0, ip
     a9c:	fa23 f302 	lsr.w	r3, r3, r2
     aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
     aa4:	e7cc      	b.n	a40 <__aeabi_d2f+0x14>
     aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
     aaa:	d107      	bne.n	abc <__aeabi_d2f+0x90>
     aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     ab0:	bf1e      	ittt	ne
     ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     aba:	4770      	bxne	lr
     abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     ac8:	4770      	bx	lr
     aca:	bf00      	nop

00000acc <__aeabi_frsub>:
     acc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     ad0:	e002      	b.n	ad8 <__addsf3>
     ad2:	bf00      	nop

00000ad4 <__aeabi_fsub>:
     ad4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000ad8 <__addsf3>:
     ad8:	0042      	lsls	r2, r0, #1
     ada:	bf1f      	itttt	ne
     adc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     ae0:	ea92 0f03 	teqne	r2, r3
     ae4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     ae8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     aec:	d06a      	beq.n	bc4 <__addsf3+0xec>
     aee:	ea4f 6212 	mov.w	r2, r2, lsr #24
     af2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     af6:	bfc1      	itttt	gt
     af8:	18d2      	addgt	r2, r2, r3
     afa:	4041      	eorgt	r1, r0
     afc:	4048      	eorgt	r0, r1
     afe:	4041      	eorgt	r1, r0
     b00:	bfb8      	it	lt
     b02:	425b      	neglt	r3, r3
     b04:	2b19      	cmp	r3, #25
     b06:	bf88      	it	hi
     b08:	4770      	bxhi	lr
     b0a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     b0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b16:	bf18      	it	ne
     b18:	4240      	negne	r0, r0
     b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     b1e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     b22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     b26:	bf18      	it	ne
     b28:	4249      	negne	r1, r1
     b2a:	ea92 0f03 	teq	r2, r3
     b2e:	d03f      	beq.n	bb0 <__addsf3+0xd8>
     b30:	f1a2 0201 	sub.w	r2, r2, #1
     b34:	fa41 fc03 	asr.w	ip, r1, r3
     b38:	eb10 000c 	adds.w	r0, r0, ip
     b3c:	f1c3 0320 	rsb	r3, r3, #32
     b40:	fa01 f103 	lsl.w	r1, r1, r3
     b44:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     b48:	d502      	bpl.n	b50 <__addsf3+0x78>
     b4a:	4249      	negs	r1, r1
     b4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     b50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     b54:	d313      	bcc.n	b7e <__addsf3+0xa6>
     b56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     b5a:	d306      	bcc.n	b6a <__addsf3+0x92>
     b5c:	0840      	lsrs	r0, r0, #1
     b5e:	ea4f 0131 	mov.w	r1, r1, rrx
     b62:	f102 0201 	add.w	r2, r2, #1
     b66:	2afe      	cmp	r2, #254	; 0xfe
     b68:	d251      	bcs.n	c0e <__addsf3+0x136>
     b6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     b6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     b72:	bf08      	it	eq
     b74:	f020 0001 	biceq.w	r0, r0, #1
     b78:	ea40 0003 	orr.w	r0, r0, r3
     b7c:	4770      	bx	lr
     b7e:	0049      	lsls	r1, r1, #1
     b80:	eb40 0000 	adc.w	r0, r0, r0
     b84:	3a01      	subs	r2, #1
     b86:	bf28      	it	cs
     b88:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     b8c:	d2ed      	bcs.n	b6a <__addsf3+0x92>
     b8e:	fab0 fc80 	clz	ip, r0
     b92:	f1ac 0c08 	sub.w	ip, ip, #8
     b96:	ebb2 020c 	subs.w	r2, r2, ip
     b9a:	fa00 f00c 	lsl.w	r0, r0, ip
     b9e:	bfaa      	itet	ge
     ba0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     ba4:	4252      	neglt	r2, r2
     ba6:	4318      	orrge	r0, r3
     ba8:	bfbc      	itt	lt
     baa:	40d0      	lsrlt	r0, r2
     bac:	4318      	orrlt	r0, r3
     bae:	4770      	bx	lr
     bb0:	f092 0f00 	teq	r2, #0
     bb4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     bb8:	bf06      	itte	eq
     bba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     bbe:	3201      	addeq	r2, #1
     bc0:	3b01      	subne	r3, #1
     bc2:	e7b5      	b.n	b30 <__addsf3+0x58>
     bc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
     bc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     bcc:	bf18      	it	ne
     bce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     bd2:	d021      	beq.n	c18 <__addsf3+0x140>
     bd4:	ea92 0f03 	teq	r2, r3
     bd8:	d004      	beq.n	be4 <__addsf3+0x10c>
     bda:	f092 0f00 	teq	r2, #0
     bde:	bf08      	it	eq
     be0:	4608      	moveq	r0, r1
     be2:	4770      	bx	lr
     be4:	ea90 0f01 	teq	r0, r1
     be8:	bf1c      	itt	ne
     bea:	2000      	movne	r0, #0
     bec:	4770      	bxne	lr
     bee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     bf2:	d104      	bne.n	bfe <__addsf3+0x126>
     bf4:	0040      	lsls	r0, r0, #1
     bf6:	bf28      	it	cs
     bf8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     bfc:	4770      	bx	lr
     bfe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     c02:	bf3c      	itt	cc
     c04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     c08:	4770      	bxcc	lr
     c0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     c0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     c12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     c16:	4770      	bx	lr
     c18:	ea7f 6222 	mvns.w	r2, r2, asr #24
     c1c:	bf16      	itet	ne
     c1e:	4608      	movne	r0, r1
     c20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     c24:	4601      	movne	r1, r0
     c26:	0242      	lsls	r2, r0, #9
     c28:	bf06      	itte	eq
     c2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     c2e:	ea90 0f01 	teqeq	r0, r1
     c32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     c36:	4770      	bx	lr

00000c38 <__aeabi_ui2f>:
     c38:	f04f 0300 	mov.w	r3, #0
     c3c:	e004      	b.n	c48 <__aeabi_i2f+0x8>
     c3e:	bf00      	nop

00000c40 <__aeabi_i2f>:
     c40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     c44:	bf48      	it	mi
     c46:	4240      	negmi	r0, r0
     c48:	ea5f 0c00 	movs.w	ip, r0
     c4c:	bf08      	it	eq
     c4e:	4770      	bxeq	lr
     c50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     c54:	4601      	mov	r1, r0
     c56:	f04f 0000 	mov.w	r0, #0
     c5a:	e01c      	b.n	c96 <__aeabi_l2f+0x2a>

00000c5c <__aeabi_ul2f>:
     c5c:	ea50 0201 	orrs.w	r2, r0, r1
     c60:	bf08      	it	eq
     c62:	4770      	bxeq	lr
     c64:	f04f 0300 	mov.w	r3, #0
     c68:	e00a      	b.n	c80 <__aeabi_l2f+0x14>
     c6a:	bf00      	nop

00000c6c <__aeabi_l2f>:
     c6c:	ea50 0201 	orrs.w	r2, r0, r1
     c70:	bf08      	it	eq
     c72:	4770      	bxeq	lr
     c74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     c78:	d502      	bpl.n	c80 <__aeabi_l2f+0x14>
     c7a:	4240      	negs	r0, r0
     c7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     c80:	ea5f 0c01 	movs.w	ip, r1
     c84:	bf02      	ittt	eq
     c86:	4684      	moveq	ip, r0
     c88:	4601      	moveq	r1, r0
     c8a:	2000      	moveq	r0, #0
     c8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     c90:	bf08      	it	eq
     c92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     c96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     c9a:	fabc f28c 	clz	r2, ip
     c9e:	3a08      	subs	r2, #8
     ca0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     ca4:	db10      	blt.n	cc8 <__aeabi_l2f+0x5c>
     ca6:	fa01 fc02 	lsl.w	ip, r1, r2
     caa:	4463      	add	r3, ip
     cac:	fa00 fc02 	lsl.w	ip, r0, r2
     cb0:	f1c2 0220 	rsb	r2, r2, #32
     cb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     cb8:	fa20 f202 	lsr.w	r2, r0, r2
     cbc:	eb43 0002 	adc.w	r0, r3, r2
     cc0:	bf08      	it	eq
     cc2:	f020 0001 	biceq.w	r0, r0, #1
     cc6:	4770      	bx	lr
     cc8:	f102 0220 	add.w	r2, r2, #32
     ccc:	fa01 fc02 	lsl.w	ip, r1, r2
     cd0:	f1c2 0220 	rsb	r2, r2, #32
     cd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     cd8:	fa21 f202 	lsr.w	r2, r1, r2
     cdc:	eb43 0002 	adc.w	r0, r3, r2
     ce0:	bf08      	it	eq
     ce2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     ce6:	4770      	bx	lr

00000ce8 <__aeabi_fmul>:
     ce8:	f04f 0cff 	mov.w	ip, #255	; 0xff
     cec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     cf0:	bf1e      	ittt	ne
     cf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     cf6:	ea92 0f0c 	teqne	r2, ip
     cfa:	ea93 0f0c 	teqne	r3, ip
     cfe:	d06f      	beq.n	de0 <__aeabi_fmul+0xf8>
     d00:	441a      	add	r2, r3
     d02:	ea80 0c01 	eor.w	ip, r0, r1
     d06:	0240      	lsls	r0, r0, #9
     d08:	bf18      	it	ne
     d0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     d0e:	d01e      	beq.n	d4e <__aeabi_fmul+0x66>
     d10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     d14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     d18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     d1c:	fba0 3101 	umull	r3, r1, r0, r1
     d20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     d24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     d28:	bf3e      	ittt	cc
     d2a:	0049      	lslcc	r1, r1, #1
     d2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     d30:	005b      	lslcc	r3, r3, #1
     d32:	ea40 0001 	orr.w	r0, r0, r1
     d36:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     d3a:	2afd      	cmp	r2, #253	; 0xfd
     d3c:	d81d      	bhi.n	d7a <__aeabi_fmul+0x92>
     d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     d42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     d46:	bf08      	it	eq
     d48:	f020 0001 	biceq.w	r0, r0, #1
     d4c:	4770      	bx	lr
     d4e:	f090 0f00 	teq	r0, #0
     d52:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     d56:	bf08      	it	eq
     d58:	0249      	lsleq	r1, r1, #9
     d5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     d5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     d62:	3a7f      	subs	r2, #127	; 0x7f
     d64:	bfc2      	ittt	gt
     d66:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     d6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     d6e:	4770      	bxgt	lr
     d70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     d74:	f04f 0300 	mov.w	r3, #0
     d78:	3a01      	subs	r2, #1
     d7a:	dc5d      	bgt.n	e38 <__aeabi_fmul+0x150>
     d7c:	f112 0f19 	cmn.w	r2, #25
     d80:	bfdc      	itt	le
     d82:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     d86:	4770      	bxle	lr
     d88:	f1c2 0200 	rsb	r2, r2, #0
     d8c:	0041      	lsls	r1, r0, #1
     d8e:	fa21 f102 	lsr.w	r1, r1, r2
     d92:	f1c2 0220 	rsb	r2, r2, #32
     d96:	fa00 fc02 	lsl.w	ip, r0, r2
     d9a:	ea5f 0031 	movs.w	r0, r1, rrx
     d9e:	f140 0000 	adc.w	r0, r0, #0
     da2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     da6:	bf08      	it	eq
     da8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     dac:	4770      	bx	lr
     dae:	f092 0f00 	teq	r2, #0
     db2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     db6:	bf02      	ittt	eq
     db8:	0040      	lsleq	r0, r0, #1
     dba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     dbe:	3a01      	subeq	r2, #1
     dc0:	d0f9      	beq.n	db6 <__aeabi_fmul+0xce>
     dc2:	ea40 000c 	orr.w	r0, r0, ip
     dc6:	f093 0f00 	teq	r3, #0
     dca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     dce:	bf02      	ittt	eq
     dd0:	0049      	lsleq	r1, r1, #1
     dd2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     dd6:	3b01      	subeq	r3, #1
     dd8:	d0f9      	beq.n	dce <__aeabi_fmul+0xe6>
     dda:	ea41 010c 	orr.w	r1, r1, ip
     dde:	e78f      	b.n	d00 <__aeabi_fmul+0x18>
     de0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     de4:	ea92 0f0c 	teq	r2, ip
     de8:	bf18      	it	ne
     dea:	ea93 0f0c 	teqne	r3, ip
     dee:	d00a      	beq.n	e06 <__aeabi_fmul+0x11e>
     df0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     df4:	bf18      	it	ne
     df6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     dfa:	d1d8      	bne.n	dae <__aeabi_fmul+0xc6>
     dfc:	ea80 0001 	eor.w	r0, r0, r1
     e00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     e04:	4770      	bx	lr
     e06:	f090 0f00 	teq	r0, #0
     e0a:	bf17      	itett	ne
     e0c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     e10:	4608      	moveq	r0, r1
     e12:	f091 0f00 	teqne	r1, #0
     e16:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     e1a:	d014      	beq.n	e46 <__aeabi_fmul+0x15e>
     e1c:	ea92 0f0c 	teq	r2, ip
     e20:	d101      	bne.n	e26 <__aeabi_fmul+0x13e>
     e22:	0242      	lsls	r2, r0, #9
     e24:	d10f      	bne.n	e46 <__aeabi_fmul+0x15e>
     e26:	ea93 0f0c 	teq	r3, ip
     e2a:	d103      	bne.n	e34 <__aeabi_fmul+0x14c>
     e2c:	024b      	lsls	r3, r1, #9
     e2e:	bf18      	it	ne
     e30:	4608      	movne	r0, r1
     e32:	d108      	bne.n	e46 <__aeabi_fmul+0x15e>
     e34:	ea80 0001 	eor.w	r0, r0, r1
     e38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     e3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     e40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     e44:	4770      	bx	lr
     e46:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     e4a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     e4e:	4770      	bx	lr

00000e50 <__aeabi_fdiv>:
     e50:	f04f 0cff 	mov.w	ip, #255	; 0xff
     e54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     e58:	bf1e      	ittt	ne
     e5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     e5e:	ea92 0f0c 	teqne	r2, ip
     e62:	ea93 0f0c 	teqne	r3, ip
     e66:	d069      	beq.n	f3c <__aeabi_fdiv+0xec>
     e68:	eba2 0203 	sub.w	r2, r2, r3
     e6c:	ea80 0c01 	eor.w	ip, r0, r1
     e70:	0249      	lsls	r1, r1, #9
     e72:	ea4f 2040 	mov.w	r0, r0, lsl #9
     e76:	d037      	beq.n	ee8 <__aeabi_fdiv+0x98>
     e78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     e7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     e80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     e84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     e88:	428b      	cmp	r3, r1
     e8a:	bf38      	it	cc
     e8c:	005b      	lslcc	r3, r3, #1
     e8e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     e92:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     e96:	428b      	cmp	r3, r1
     e98:	bf24      	itt	cs
     e9a:	1a5b      	subcs	r3, r3, r1
     e9c:	ea40 000c 	orrcs.w	r0, r0, ip
     ea0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     ea4:	bf24      	itt	cs
     ea6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     eaa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     eae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     eb2:	bf24      	itt	cs
     eb4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     eb8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     ebc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     ec0:	bf24      	itt	cs
     ec2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     ec6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     eca:	011b      	lsls	r3, r3, #4
     ecc:	bf18      	it	ne
     ece:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     ed2:	d1e0      	bne.n	e96 <__aeabi_fdiv+0x46>
     ed4:	2afd      	cmp	r2, #253	; 0xfd
     ed6:	f63f af50 	bhi.w	d7a <__aeabi_fmul+0x92>
     eda:	428b      	cmp	r3, r1
     edc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     ee0:	bf08      	it	eq
     ee2:	f020 0001 	biceq.w	r0, r0, #1
     ee6:	4770      	bx	lr
     ee8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     eec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     ef0:	327f      	adds	r2, #127	; 0x7f
     ef2:	bfc2      	ittt	gt
     ef4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     ef8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     efc:	4770      	bxgt	lr
     efe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     f02:	f04f 0300 	mov.w	r3, #0
     f06:	3a01      	subs	r2, #1
     f08:	e737      	b.n	d7a <__aeabi_fmul+0x92>
     f0a:	f092 0f00 	teq	r2, #0
     f0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     f12:	bf02      	ittt	eq
     f14:	0040      	lsleq	r0, r0, #1
     f16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     f1a:	3a01      	subeq	r2, #1
     f1c:	d0f9      	beq.n	f12 <__aeabi_fdiv+0xc2>
     f1e:	ea40 000c 	orr.w	r0, r0, ip
     f22:	f093 0f00 	teq	r3, #0
     f26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     f2a:	bf02      	ittt	eq
     f2c:	0049      	lsleq	r1, r1, #1
     f2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     f32:	3b01      	subeq	r3, #1
     f34:	d0f9      	beq.n	f2a <__aeabi_fdiv+0xda>
     f36:	ea41 010c 	orr.w	r1, r1, ip
     f3a:	e795      	b.n	e68 <__aeabi_fdiv+0x18>
     f3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     f40:	ea92 0f0c 	teq	r2, ip
     f44:	d108      	bne.n	f58 <__aeabi_fdiv+0x108>
     f46:	0242      	lsls	r2, r0, #9
     f48:	f47f af7d 	bne.w	e46 <__aeabi_fmul+0x15e>
     f4c:	ea93 0f0c 	teq	r3, ip
     f50:	f47f af70 	bne.w	e34 <__aeabi_fmul+0x14c>
     f54:	4608      	mov	r0, r1
     f56:	e776      	b.n	e46 <__aeabi_fmul+0x15e>
     f58:	ea93 0f0c 	teq	r3, ip
     f5c:	d104      	bne.n	f68 <__aeabi_fdiv+0x118>
     f5e:	024b      	lsls	r3, r1, #9
     f60:	f43f af4c 	beq.w	dfc <__aeabi_fmul+0x114>
     f64:	4608      	mov	r0, r1
     f66:	e76e      	b.n	e46 <__aeabi_fmul+0x15e>
     f68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     f6c:	bf18      	it	ne
     f6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     f72:	d1ca      	bne.n	f0a <__aeabi_fdiv+0xba>
     f74:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     f78:	f47f af5c 	bne.w	e34 <__aeabi_fmul+0x14c>
     f7c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     f80:	f47f af3c 	bne.w	dfc <__aeabi_fmul+0x114>
     f84:	e75f      	b.n	e46 <__aeabi_fmul+0x15e>
     f86:	bf00      	nop

00000f88 <__gesf2>:
     f88:	f04f 3cff 	mov.w	ip, #4294967295
     f8c:	e006      	b.n	f9c <__cmpsf2+0x4>
     f8e:	bf00      	nop

00000f90 <__lesf2>:
     f90:	f04f 0c01 	mov.w	ip, #1
     f94:	e002      	b.n	f9c <__cmpsf2+0x4>
     f96:	bf00      	nop

00000f98 <__cmpsf2>:
     f98:	f04f 0c01 	mov.w	ip, #1
     f9c:	f84d cd04 	str.w	ip, [sp, #-4]!
     fa0:	ea4f 0240 	mov.w	r2, r0, lsl #1
     fa4:	ea4f 0341 	mov.w	r3, r1, lsl #1
     fa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     fac:	bf18      	it	ne
     fae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     fb2:	d011      	beq.n	fd8 <__cmpsf2+0x40>
     fb4:	b001      	add	sp, #4
     fb6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     fba:	bf18      	it	ne
     fbc:	ea90 0f01 	teqne	r0, r1
     fc0:	bf58      	it	pl
     fc2:	ebb2 0003 	subspl.w	r0, r2, r3
     fc6:	bf88      	it	hi
     fc8:	17c8      	asrhi	r0, r1, #31
     fca:	bf38      	it	cc
     fcc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     fd0:	bf18      	it	ne
     fd2:	f040 0001 	orrne.w	r0, r0, #1
     fd6:	4770      	bx	lr
     fd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     fdc:	d102      	bne.n	fe4 <__cmpsf2+0x4c>
     fde:	ea5f 2c40 	movs.w	ip, r0, lsl #9
     fe2:	d105      	bne.n	ff0 <__cmpsf2+0x58>
     fe4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
     fe8:	d1e4      	bne.n	fb4 <__cmpsf2+0x1c>
     fea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
     fee:	d0e1      	beq.n	fb4 <__cmpsf2+0x1c>
     ff0:	f85d 0b04 	ldr.w	r0, [sp], #4
     ff4:	4770      	bx	lr
     ff6:	bf00      	nop

00000ff8 <__aeabi_cfrcmple>:
     ff8:	4684      	mov	ip, r0
     ffa:	4608      	mov	r0, r1
     ffc:	4661      	mov	r1, ip
     ffe:	e7ff      	b.n	1000 <__aeabi_cfcmpeq>

00001000 <__aeabi_cfcmpeq>:
    1000:	b50f      	push	{r0, r1, r2, r3, lr}
    1002:	f7ff ffc9 	bl	f98 <__cmpsf2>
    1006:	2800      	cmp	r0, #0
    1008:	bf48      	it	mi
    100a:	f110 0f00 	cmnmi.w	r0, #0
    100e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00001010 <__aeabi_fcmpeq>:
    1010:	f84d ed08 	str.w	lr, [sp, #-8]!
    1014:	f7ff fff4 	bl	1000 <__aeabi_cfcmpeq>
    1018:	bf0c      	ite	eq
    101a:	2001      	moveq	r0, #1
    101c:	2000      	movne	r0, #0
    101e:	f85d fb08 	ldr.w	pc, [sp], #8
    1022:	bf00      	nop

00001024 <__aeabi_fcmplt>:
    1024:	f84d ed08 	str.w	lr, [sp, #-8]!
    1028:	f7ff ffea 	bl	1000 <__aeabi_cfcmpeq>
    102c:	bf34      	ite	cc
    102e:	2001      	movcc	r0, #1
    1030:	2000      	movcs	r0, #0
    1032:	f85d fb08 	ldr.w	pc, [sp], #8
    1036:	bf00      	nop

00001038 <__aeabi_fcmple>:
    1038:	f84d ed08 	str.w	lr, [sp, #-8]!
    103c:	f7ff ffe0 	bl	1000 <__aeabi_cfcmpeq>
    1040:	bf94      	ite	ls
    1042:	2001      	movls	r0, #1
    1044:	2000      	movhi	r0, #0
    1046:	f85d fb08 	ldr.w	pc, [sp], #8
    104a:	bf00      	nop

0000104c <__aeabi_fcmpge>:
    104c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1050:	f7ff ffd2 	bl	ff8 <__aeabi_cfrcmple>
    1054:	bf94      	ite	ls
    1056:	2001      	movls	r0, #1
    1058:	2000      	movhi	r0, #0
    105a:	f85d fb08 	ldr.w	pc, [sp], #8
    105e:	bf00      	nop

00001060 <__aeabi_fcmpgt>:
    1060:	f84d ed08 	str.w	lr, [sp, #-8]!
    1064:	f7ff ffc8 	bl	ff8 <__aeabi_cfrcmple>
    1068:	bf34      	ite	cc
    106a:	2001      	movcc	r0, #1
    106c:	2000      	movcs	r0, #0
    106e:	f85d fb08 	ldr.w	pc, [sp], #8
    1072:	bf00      	nop

00001074 <__aeabi_f2iz>:
    1074:	ea4f 0240 	mov.w	r2, r0, lsl #1
    1078:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    107c:	d30f      	bcc.n	109e <__aeabi_f2iz+0x2a>
    107e:	f04f 039e 	mov.w	r3, #158	; 0x9e
    1082:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    1086:	d90d      	bls.n	10a4 <__aeabi_f2iz+0x30>
    1088:	ea4f 2300 	mov.w	r3, r0, lsl #8
    108c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1090:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    1094:	fa23 f002 	lsr.w	r0, r3, r2
    1098:	bf18      	it	ne
    109a:	4240      	negne	r0, r0
    109c:	4770      	bx	lr
    109e:	f04f 0000 	mov.w	r0, #0
    10a2:	4770      	bx	lr
    10a4:	f112 0f61 	cmn.w	r2, #97	; 0x61
    10a8:	d101      	bne.n	10ae <__aeabi_f2iz+0x3a>
    10aa:	0242      	lsls	r2, r0, #9
    10ac:	d105      	bne.n	10ba <__aeabi_f2iz+0x46>
    10ae:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    10b2:	bf08      	it	eq
    10b4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    10b8:	4770      	bx	lr
    10ba:	f04f 0000 	mov.w	r0, #0
    10be:	4770      	bx	lr

000010c0 <__aeabi_uldivmod>:
    10c0:	b953      	cbnz	r3, 10d8 <__aeabi_uldivmod+0x18>
    10c2:	b94a      	cbnz	r2, 10d8 <__aeabi_uldivmod+0x18>
    10c4:	2900      	cmp	r1, #0
    10c6:	bf08      	it	eq
    10c8:	2800      	cmpeq	r0, #0
    10ca:	bf1c      	itt	ne
    10cc:	f04f 31ff 	movne.w	r1, #4294967295
    10d0:	f04f 30ff 	movne.w	r0, #4294967295
    10d4:	f000 b96c 	b.w	13b0 <__aeabi_idiv0>
    10d8:	f1ad 0c08 	sub.w	ip, sp, #8
    10dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    10e0:	f000 f806 	bl	10f0 <__udivmoddi4>
    10e4:	f8dd e004 	ldr.w	lr, [sp, #4]
    10e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    10ec:	b004      	add	sp, #16
    10ee:	4770      	bx	lr

000010f0 <__udivmoddi4>:
    10f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    10f4:	9e08      	ldr	r6, [sp, #32]
    10f6:	460d      	mov	r5, r1
    10f8:	4604      	mov	r4, r0
    10fa:	468e      	mov	lr, r1
    10fc:	2b00      	cmp	r3, #0
    10fe:	f040 8082 	bne.w	1206 <__udivmoddi4+0x116>
    1102:	428a      	cmp	r2, r1
    1104:	4617      	mov	r7, r2
    1106:	d946      	bls.n	1196 <__udivmoddi4+0xa6>
    1108:	fab2 f282 	clz	r2, r2
    110c:	b14a      	cbz	r2, 1122 <__udivmoddi4+0x32>
    110e:	f1c2 0120 	rsb	r1, r2, #32
    1112:	fa05 f302 	lsl.w	r3, r5, r2
    1116:	fa20 f101 	lsr.w	r1, r0, r1
    111a:	4097      	lsls	r7, r2
    111c:	ea41 0e03 	orr.w	lr, r1, r3
    1120:	4094      	lsls	r4, r2
    1122:	ea4f 4817 	mov.w	r8, r7, lsr #16
    1126:	0c23      	lsrs	r3, r4, #16
    1128:	fbbe fcf8 	udiv	ip, lr, r8
    112c:	b2b9      	uxth	r1, r7
    112e:	fb08 ee1c 	mls	lr, r8, ip, lr
    1132:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
    1136:	fb0c f001 	mul.w	r0, ip, r1
    113a:	4298      	cmp	r0, r3
    113c:	d90a      	bls.n	1154 <__udivmoddi4+0x64>
    113e:	18fb      	adds	r3, r7, r3
    1140:	f10c 35ff 	add.w	r5, ip, #4294967295
    1144:	f080 8116 	bcs.w	1374 <__udivmoddi4+0x284>
    1148:	4298      	cmp	r0, r3
    114a:	f240 8113 	bls.w	1374 <__udivmoddi4+0x284>
    114e:	f1ac 0c02 	sub.w	ip, ip, #2
    1152:	443b      	add	r3, r7
    1154:	1a1b      	subs	r3, r3, r0
    1156:	b2a4      	uxth	r4, r4
    1158:	fbb3 f0f8 	udiv	r0, r3, r8
    115c:	fb08 3310 	mls	r3, r8, r0, r3
    1160:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    1164:	fb00 f101 	mul.w	r1, r0, r1
    1168:	42a1      	cmp	r1, r4
    116a:	d909      	bls.n	1180 <__udivmoddi4+0x90>
    116c:	193c      	adds	r4, r7, r4
    116e:	f100 33ff 	add.w	r3, r0, #4294967295
    1172:	f080 8101 	bcs.w	1378 <__udivmoddi4+0x288>
    1176:	42a1      	cmp	r1, r4
    1178:	f240 80fe 	bls.w	1378 <__udivmoddi4+0x288>
    117c:	3802      	subs	r0, #2
    117e:	443c      	add	r4, r7
    1180:	1a64      	subs	r4, r4, r1
    1182:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    1186:	2100      	movs	r1, #0
    1188:	b11e      	cbz	r6, 1192 <__udivmoddi4+0xa2>
    118a:	40d4      	lsrs	r4, r2
    118c:	2300      	movs	r3, #0
    118e:	e9c6 4300 	strd	r4, r3, [r6]
    1192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1196:	b902      	cbnz	r2, 119a <__udivmoddi4+0xaa>
    1198:	deff      	udf	#255	; 0xff
    119a:	fab2 f282 	clz	r2, r2
    119e:	2a00      	cmp	r2, #0
    11a0:	d14f      	bne.n	1242 <__udivmoddi4+0x152>
    11a2:	1bcb      	subs	r3, r1, r7
    11a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    11a8:	fa1f f887 	uxth.w	r8, r7
    11ac:	2101      	movs	r1, #1
    11ae:	fbb3 fcfe 	udiv	ip, r3, lr
    11b2:	0c25      	lsrs	r5, r4, #16
    11b4:	fb0e 331c 	mls	r3, lr, ip, r3
    11b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    11bc:	fb08 f30c 	mul.w	r3, r8, ip
    11c0:	42ab      	cmp	r3, r5
    11c2:	d907      	bls.n	11d4 <__udivmoddi4+0xe4>
    11c4:	197d      	adds	r5, r7, r5
    11c6:	f10c 30ff 	add.w	r0, ip, #4294967295
    11ca:	d202      	bcs.n	11d2 <__udivmoddi4+0xe2>
    11cc:	42ab      	cmp	r3, r5
    11ce:	f200 80e7 	bhi.w	13a0 <__udivmoddi4+0x2b0>
    11d2:	4684      	mov	ip, r0
    11d4:	1aed      	subs	r5, r5, r3
    11d6:	b2a3      	uxth	r3, r4
    11d8:	fbb5 f0fe 	udiv	r0, r5, lr
    11dc:	fb0e 5510 	mls	r5, lr, r0, r5
    11e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    11e4:	fb08 f800 	mul.w	r8, r8, r0
    11e8:	45a0      	cmp	r8, r4
    11ea:	d907      	bls.n	11fc <__udivmoddi4+0x10c>
    11ec:	193c      	adds	r4, r7, r4
    11ee:	f100 33ff 	add.w	r3, r0, #4294967295
    11f2:	d202      	bcs.n	11fa <__udivmoddi4+0x10a>
    11f4:	45a0      	cmp	r8, r4
    11f6:	f200 80d7 	bhi.w	13a8 <__udivmoddi4+0x2b8>
    11fa:	4618      	mov	r0, r3
    11fc:	eba4 0408 	sub.w	r4, r4, r8
    1200:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    1204:	e7c0      	b.n	1188 <__udivmoddi4+0x98>
    1206:	428b      	cmp	r3, r1
    1208:	d908      	bls.n	121c <__udivmoddi4+0x12c>
    120a:	2e00      	cmp	r6, #0
    120c:	f000 80af 	beq.w	136e <__udivmoddi4+0x27e>
    1210:	2100      	movs	r1, #0
    1212:	e9c6 0500 	strd	r0, r5, [r6]
    1216:	4608      	mov	r0, r1
    1218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    121c:	fab3 f183 	clz	r1, r3
    1220:	2900      	cmp	r1, #0
    1222:	d14b      	bne.n	12bc <__udivmoddi4+0x1cc>
    1224:	42ab      	cmp	r3, r5
    1226:	d302      	bcc.n	122e <__udivmoddi4+0x13e>
    1228:	4282      	cmp	r2, r0
    122a:	f200 80b7 	bhi.w	139c <__udivmoddi4+0x2ac>
    122e:	1a84      	subs	r4, r0, r2
    1230:	eb65 0303 	sbc.w	r3, r5, r3
    1234:	2001      	movs	r0, #1
    1236:	469e      	mov	lr, r3
    1238:	2e00      	cmp	r6, #0
    123a:	d0aa      	beq.n	1192 <__udivmoddi4+0xa2>
    123c:	e9c6 4e00 	strd	r4, lr, [r6]
    1240:	e7a7      	b.n	1192 <__udivmoddi4+0xa2>
    1242:	f1c2 0c20 	rsb	ip, r2, #32
    1246:	fa01 f302 	lsl.w	r3, r1, r2
    124a:	4097      	lsls	r7, r2
    124c:	fa20 f00c 	lsr.w	r0, r0, ip
    1250:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1254:	fa21 fc0c 	lsr.w	ip, r1, ip
    1258:	4318      	orrs	r0, r3
    125a:	fbbc f1fe 	udiv	r1, ip, lr
    125e:	0c05      	lsrs	r5, r0, #16
    1260:	fb0e cc11 	mls	ip, lr, r1, ip
    1264:	fa1f f887 	uxth.w	r8, r7
    1268:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    126c:	fb01 f308 	mul.w	r3, r1, r8
    1270:	42ab      	cmp	r3, r5
    1272:	fa04 f402 	lsl.w	r4, r4, r2
    1276:	d909      	bls.n	128c <__udivmoddi4+0x19c>
    1278:	197d      	adds	r5, r7, r5
    127a:	f101 3cff 	add.w	ip, r1, #4294967295
    127e:	f080 808b 	bcs.w	1398 <__udivmoddi4+0x2a8>
    1282:	42ab      	cmp	r3, r5
    1284:	f240 8088 	bls.w	1398 <__udivmoddi4+0x2a8>
    1288:	3902      	subs	r1, #2
    128a:	443d      	add	r5, r7
    128c:	1aeb      	subs	r3, r5, r3
    128e:	b285      	uxth	r5, r0
    1290:	fbb3 f0fe 	udiv	r0, r3, lr
    1294:	fb0e 3310 	mls	r3, lr, r0, r3
    1298:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    129c:	fb00 f308 	mul.w	r3, r0, r8
    12a0:	42ab      	cmp	r3, r5
    12a2:	d907      	bls.n	12b4 <__udivmoddi4+0x1c4>
    12a4:	197d      	adds	r5, r7, r5
    12a6:	f100 3cff 	add.w	ip, r0, #4294967295
    12aa:	d271      	bcs.n	1390 <__udivmoddi4+0x2a0>
    12ac:	42ab      	cmp	r3, r5
    12ae:	d96f      	bls.n	1390 <__udivmoddi4+0x2a0>
    12b0:	3802      	subs	r0, #2
    12b2:	443d      	add	r5, r7
    12b4:	1aeb      	subs	r3, r5, r3
    12b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    12ba:	e778      	b.n	11ae <__udivmoddi4+0xbe>
    12bc:	f1c1 0c20 	rsb	ip, r1, #32
    12c0:	408b      	lsls	r3, r1
    12c2:	fa22 f70c 	lsr.w	r7, r2, ip
    12c6:	431f      	orrs	r7, r3
    12c8:	fa20 f40c 	lsr.w	r4, r0, ip
    12cc:	fa05 f301 	lsl.w	r3, r5, r1
    12d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    12d4:	fa25 f50c 	lsr.w	r5, r5, ip
    12d8:	431c      	orrs	r4, r3
    12da:	0c23      	lsrs	r3, r4, #16
    12dc:	fbb5 f9fe 	udiv	r9, r5, lr
    12e0:	fa1f f887 	uxth.w	r8, r7
    12e4:	fb0e 5519 	mls	r5, lr, r9, r5
    12e8:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
    12ec:	fb09 fa08 	mul.w	sl, r9, r8
    12f0:	45aa      	cmp	sl, r5
    12f2:	fa02 f201 	lsl.w	r2, r2, r1
    12f6:	fa00 f301 	lsl.w	r3, r0, r1
    12fa:	d908      	bls.n	130e <__udivmoddi4+0x21e>
    12fc:	197d      	adds	r5, r7, r5
    12fe:	f109 30ff 	add.w	r0, r9, #4294967295
    1302:	d247      	bcs.n	1394 <__udivmoddi4+0x2a4>
    1304:	45aa      	cmp	sl, r5
    1306:	d945      	bls.n	1394 <__udivmoddi4+0x2a4>
    1308:	f1a9 0902 	sub.w	r9, r9, #2
    130c:	443d      	add	r5, r7
    130e:	eba5 050a 	sub.w	r5, r5, sl
    1312:	b2a4      	uxth	r4, r4
    1314:	fbb5 f0fe 	udiv	r0, r5, lr
    1318:	fb0e 5510 	mls	r5, lr, r0, r5
    131c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    1320:	fb00 f808 	mul.w	r8, r0, r8
    1324:	45a0      	cmp	r8, r4
    1326:	d907      	bls.n	1338 <__udivmoddi4+0x248>
    1328:	193c      	adds	r4, r7, r4
    132a:	f100 35ff 	add.w	r5, r0, #4294967295
    132e:	d22d      	bcs.n	138c <__udivmoddi4+0x29c>
    1330:	45a0      	cmp	r8, r4
    1332:	d92b      	bls.n	138c <__udivmoddi4+0x29c>
    1334:	3802      	subs	r0, #2
    1336:	443c      	add	r4, r7
    1338:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    133c:	eba4 0408 	sub.w	r4, r4, r8
    1340:	fba0 8902 	umull	r8, r9, r0, r2
    1344:	454c      	cmp	r4, r9
    1346:	46c6      	mov	lr, r8
    1348:	464d      	mov	r5, r9
    134a:	d319      	bcc.n	1380 <__udivmoddi4+0x290>
    134c:	d016      	beq.n	137c <__udivmoddi4+0x28c>
    134e:	b15e      	cbz	r6, 1368 <__udivmoddi4+0x278>
    1350:	ebb3 020e 	subs.w	r2, r3, lr
    1354:	eb64 0405 	sbc.w	r4, r4, r5
    1358:	fa04 fc0c 	lsl.w	ip, r4, ip
    135c:	40ca      	lsrs	r2, r1
    135e:	ea4c 0202 	orr.w	r2, ip, r2
    1362:	40cc      	lsrs	r4, r1
    1364:	e9c6 2400 	strd	r2, r4, [r6]
    1368:	2100      	movs	r1, #0
    136a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    136e:	4631      	mov	r1, r6
    1370:	4630      	mov	r0, r6
    1372:	e70e      	b.n	1192 <__udivmoddi4+0xa2>
    1374:	46ac      	mov	ip, r5
    1376:	e6ed      	b.n	1154 <__udivmoddi4+0x64>
    1378:	4618      	mov	r0, r3
    137a:	e701      	b.n	1180 <__udivmoddi4+0x90>
    137c:	4543      	cmp	r3, r8
    137e:	d2e6      	bcs.n	134e <__udivmoddi4+0x25e>
    1380:	ebb8 0e02 	subs.w	lr, r8, r2
    1384:	eb69 0507 	sbc.w	r5, r9, r7
    1388:	3801      	subs	r0, #1
    138a:	e7e0      	b.n	134e <__udivmoddi4+0x25e>
    138c:	4628      	mov	r0, r5
    138e:	e7d3      	b.n	1338 <__udivmoddi4+0x248>
    1390:	4660      	mov	r0, ip
    1392:	e78f      	b.n	12b4 <__udivmoddi4+0x1c4>
    1394:	4681      	mov	r9, r0
    1396:	e7ba      	b.n	130e <__udivmoddi4+0x21e>
    1398:	4661      	mov	r1, ip
    139a:	e777      	b.n	128c <__udivmoddi4+0x19c>
    139c:	4608      	mov	r0, r1
    139e:	e74b      	b.n	1238 <__udivmoddi4+0x148>
    13a0:	f1ac 0c02 	sub.w	ip, ip, #2
    13a4:	443d      	add	r5, r7
    13a6:	e715      	b.n	11d4 <__udivmoddi4+0xe4>
    13a8:	3802      	subs	r0, #2
    13aa:	443c      	add	r4, r7
    13ac:	e726      	b.n	11fc <__udivmoddi4+0x10c>
    13ae:	bf00      	nop

000013b0 <__aeabi_idiv0>:
    13b0:	4770      	bx	lr
    13b2:	bf00      	nop

000013b4 <__aeabi_dcmpun>:
    13b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    13b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    13bc:	d102      	bne.n	13c4 <__aeabi_dcmpun+0x10>
    13be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    13c2:	d10a      	bne.n	13da <__aeabi_dcmpun+0x26>
    13c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    13c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    13cc:	d102      	bne.n	13d4 <__aeabi_dcmpun+0x20>
    13ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    13d2:	d102      	bne.n	13da <__aeabi_dcmpun+0x26>
    13d4:	f04f 0000 	mov.w	r0, #0
    13d8:	4770      	bx	lr
    13da:	f04f 0001 	mov.w	r0, #1
    13de:	4770      	bx	lr

000013e0 <__aeabi_d2iz>:
    13e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
    13e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    13e8:	d215      	bcs.n	1416 <__aeabi_d2iz+0x36>
    13ea:	d511      	bpl.n	1410 <__aeabi_d2iz+0x30>
    13ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    13f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    13f4:	d912      	bls.n	141c <__aeabi_d2iz+0x3c>
    13f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    13fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    13fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    1402:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    1406:	fa23 f002 	lsr.w	r0, r3, r2
    140a:	bf18      	it	ne
    140c:	4240      	negne	r0, r0
    140e:	4770      	bx	lr
    1410:	f04f 0000 	mov.w	r0, #0
    1414:	4770      	bx	lr
    1416:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    141a:	d105      	bne.n	1428 <__aeabi_d2iz+0x48>
    141c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    1420:	bf08      	it	eq
    1422:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    1426:	4770      	bx	lr
    1428:	f04f 0000 	mov.w	r0, #0
    142c:	4770      	bx	lr
    142e:	bf00      	nop

00001430 <strcmp>:
    1430:	f810 2b01 	ldrb.w	r2, [r0], #1
    1434:	f811 3b01 	ldrb.w	r3, [r1], #1
    1438:	2a01      	cmp	r2, #1
    143a:	bf28      	it	cs
    143c:	429a      	cmpcs	r2, r3
    143e:	d0f7      	beq.n	1430 <strcmp>
    1440:	1ad0      	subs	r0, r2, r3
    1442:	4770      	bx	lr

00001444 <strlen>:
    1444:	4603      	mov	r3, r0
    1446:	f813 2b01 	ldrb.w	r2, [r3], #1
    144a:	2a00      	cmp	r2, #0
    144c:	d1fb      	bne.n	1446 <strlen+0x2>
    144e:	1a18      	subs	r0, r3, r0
    1450:	3801      	subs	r0, #1
    1452:	4770      	bx	lr
    1454:	0000      	movs	r0, r0
	...

00001458 <quaternion_to_euler_angles>:
    vector_ijk rotated = vector_3d_initialize(quaternion_rotated_vector.b,quaternion_rotated_vector.c,quaternion_rotated_vector.d);
    return rotated;
}

euler_angles quaternion_to_euler_angles(Quaternion q)
{
    1458:	b084      	sub	sp, #16
    145a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    145e:	b08b      	sub	sp, #44	; 0x2c
    1460:	9001      	str	r0, [sp, #4]
    1462:	a815      	add	r0, sp, #84	; 0x54
    1464:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    euler_angles result;
    double q0 = q.a;
    1468:	9815      	ldr	r0, [sp, #84]	; 0x54
    146a:	f7fe ffed 	bl	448 <__aeabi_f2d>
    146e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    double q1 = q.b;
    1472:	9816      	ldr	r0, [sp, #88]	; 0x58
    1474:	f7fe ffe8 	bl	448 <__aeabi_f2d>
    1478:	4680      	mov	r8, r0
    double q2 = q.c;
    147a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    double q1 = q.b;
    147c:	4689      	mov	r9, r1
    double q2 = q.c;
    147e:	f7fe ffe3 	bl	448 <__aeabi_f2d>
    1482:	4682      	mov	sl, r0
    double q3 = q.d;
    1484:	9818      	ldr	r0, [sp, #96]	; 0x60
    double q2 = q.c;
    1486:	468b      	mov	fp, r1
    double q3 = q.d;
    1488:	f7fe ffde 	bl	448 <__aeabi_f2d>
    result.roll = atan2(2*(q0*q1 + q2*q3),1 - 2*(q1*q1 + q2*q2))*180/3.14;
    148c:	4652      	mov	r2, sl
    double q3 = q.d;
    148e:	4604      	mov	r4, r0
    1490:	460d      	mov	r5, r1
    result.roll = atan2(2*(q0*q1 + q2*q3),1 - 2*(q1*q1 + q2*q2))*180/3.14;
    1492:	465b      	mov	r3, fp
    1494:	4650      	mov	r0, sl
    1496:	4659      	mov	r1, fp
    1498:	f7ff f82e 	bl	4f8 <__aeabi_dmul>
    149c:	4642      	mov	r2, r8
    149e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    14a2:	464b      	mov	r3, r9
    14a4:	4640      	mov	r0, r8
    14a6:	4649      	mov	r1, r9
    14a8:	f7ff f826 	bl	4f8 <__aeabi_dmul>
    14ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    14b0:	f7fe fe6c 	bl	18c <__adddf3>
    14b4:	4602      	mov	r2, r0
    14b6:	460b      	mov	r3, r1
    14b8:	f7fe fe68 	bl	18c <__adddf3>
    14bc:	4602      	mov	r2, r0
    14be:	460b      	mov	r3, r1
    14c0:	2000      	movs	r0, #0
    14c2:	4955      	ldr	r1, [pc, #340]	; (1618 <quaternion_to_euler_angles+0x1c0>)
    14c4:	f7fe fe60 	bl	188 <__aeabi_dsub>
    14c8:	4642      	mov	r2, r8
    14ca:	4606      	mov	r6, r0
    14cc:	460f      	mov	r7, r1
    14ce:	464b      	mov	r3, r9
    14d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    14d4:	f7ff f810 	bl	4f8 <__aeabi_dmul>
    14d8:	4622      	mov	r2, r4
    14da:	e9cd 0106 	strd	r0, r1, [sp, #24]
    14de:	462b      	mov	r3, r5
    14e0:	4650      	mov	r0, sl
    14e2:	4659      	mov	r1, fp
    14e4:	f7ff f808 	bl	4f8 <__aeabi_dmul>
    14e8:	4602      	mov	r2, r0
    14ea:	460b      	mov	r3, r1
    14ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    14f0:	f7fe fe4c 	bl	18c <__adddf3>
    14f4:	4602      	mov	r2, r0
    14f6:	460b      	mov	r3, r1
    14f8:	f7fe fe48 	bl	18c <__adddf3>
    14fc:	4632      	mov	r2, r6
    14fe:	463b      	mov	r3, r7
    1500:	f00c fd5c 	bl	dfbc <atan2>
    result.pitch = asin(2*(q0*q2 - q3*q1))*180/3.14;
    1504:	4652      	mov	r2, sl
    result.roll = atan2(2*(q0*q1 + q2*q3),1 - 2*(q1*q1 + q2*q2))*180/3.14;
    1506:	e9cd 0106 	strd	r0, r1, [sp, #24]
    result.pitch = asin(2*(q0*q2 - q3*q1))*180/3.14;
    150a:	465b      	mov	r3, fp
    150c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1510:	f7fe fff2 	bl	4f8 <__aeabi_dmul>
    1514:	4622      	mov	r2, r4
    1516:	4606      	mov	r6, r0
    1518:	460f      	mov	r7, r1
    151a:	462b      	mov	r3, r5
    151c:	4640      	mov	r0, r8
    151e:	4649      	mov	r1, r9
    1520:	f7fe ffea 	bl	4f8 <__aeabi_dmul>
    1524:	4602      	mov	r2, r0
    1526:	460b      	mov	r3, r1
    1528:	4630      	mov	r0, r6
    152a:	4639      	mov	r1, r7
    152c:	f7fe fe2c 	bl	188 <__aeabi_dsub>
    1530:	4602      	mov	r2, r0
    1532:	460b      	mov	r3, r1
    1534:	f7fe fe2a 	bl	18c <__adddf3>
    1538:	f00c fce8 	bl	df0c <asin>
    if (0) //q.d==0
        result.yaw = 0.0;
    else
        result.yaw = atan2(2*(q0*q3 + q1*q2),1 - 2*(q2*q2 + q3*q3))*180/3.14;
    153c:	4622      	mov	r2, r4
    result.pitch = asin(2*(q0*q2 - q3*q1))*180/3.14;
    153e:	e9cd 0108 	strd	r0, r1, [sp, #32]
        result.yaw = atan2(2*(q0*q3 + q1*q2),1 - 2*(q2*q2 + q3*q3))*180/3.14;
    1542:	462b      	mov	r3, r5
    1544:	4620      	mov	r0, r4
    1546:	4629      	mov	r1, r5
    1548:	f7fe ffd6 	bl	4f8 <__aeabi_dmul>
    154c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1550:	f7fe fe1c 	bl	18c <__adddf3>
    1554:	4602      	mov	r2, r0
    1556:	460b      	mov	r3, r1
    1558:	f7fe fe18 	bl	18c <__adddf3>
    155c:	4602      	mov	r2, r0
    155e:	460b      	mov	r3, r1
    1560:	2000      	movs	r0, #0
    1562:	492d      	ldr	r1, [pc, #180]	; (1618 <quaternion_to_euler_angles+0x1c0>)
    1564:	f7fe fe10 	bl	188 <__aeabi_dsub>
    1568:	4622      	mov	r2, r4
    156a:	4606      	mov	r6, r0
    156c:	460f      	mov	r7, r1
    156e:	462b      	mov	r3, r5
    1570:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1574:	f7fe ffc0 	bl	4f8 <__aeabi_dmul>
    1578:	4652      	mov	r2, sl
    157a:	4604      	mov	r4, r0
    157c:	460d      	mov	r5, r1
    157e:	465b      	mov	r3, fp
    1580:	4640      	mov	r0, r8
    1582:	4649      	mov	r1, r9
    1584:	f7fe ffb8 	bl	4f8 <__aeabi_dmul>
    1588:	4602      	mov	r2, r0
    158a:	460b      	mov	r3, r1
    158c:	4620      	mov	r0, r4
    158e:	4629      	mov	r1, r5
    1590:	f7fe fdfc 	bl	18c <__adddf3>
    1594:	4602      	mov	r2, r0
    1596:	460b      	mov	r3, r1
    1598:	f7fe fdf8 	bl	18c <__adddf3>
    159c:	4632      	mov	r2, r6
    159e:	463b      	mov	r3, r7
    15a0:	f00c fd0c 	bl	dfbc <atan2>
    result.roll = atan2(2*(q0*q1 + q2*q3),1 - 2*(q1*q1 + q2*q2))*180/3.14;
    15a4:	4b1d      	ldr	r3, [pc, #116]	; (161c <quaternion_to_euler_angles+0x1c4>)
        result.yaw = atan2(2*(q0*q3 + q1*q2),1 - 2*(q2*q2 + q3*q3))*180/3.14;
    15a6:	4604      	mov	r4, r0
    15a8:	460d      	mov	r5, r1
    result.roll = atan2(2*(q0*q1 + q2*q3),1 - 2*(q1*q1 + q2*q2))*180/3.14;
    15aa:	2200      	movs	r2, #0
    15ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    15b0:	f7fe ffa2 	bl	4f8 <__aeabi_dmul>
    15b4:	a316      	add	r3, pc, #88	; (adr r3, 1610 <quaternion_to_euler_angles+0x1b8>)
    15b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    15ba:	f7ff f8c7 	bl	74c <__aeabi_ddiv>
    15be:	f7ff fa35 	bl	a2c <__aeabi_d2f>
    15c2:	9b01      	ldr	r3, [sp, #4]
    result.pitch = asin(2*(q0*q2 - q3*q1))*180/3.14;
    15c4:	2200      	movs	r2, #0
    result.roll = atan2(2*(q0*q1 + q2*q3),1 - 2*(q1*q1 + q2*q2))*180/3.14;
    15c6:	6018      	str	r0, [r3, #0]
    result.pitch = asin(2*(q0*q2 - q3*q1))*180/3.14;
    15c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    15cc:	4b13      	ldr	r3, [pc, #76]	; (161c <quaternion_to_euler_angles+0x1c4>)
    15ce:	f7fe ff93 	bl	4f8 <__aeabi_dmul>
    15d2:	a30f      	add	r3, pc, #60	; (adr r3, 1610 <quaternion_to_euler_angles+0x1b8>)
    15d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    15d8:	f7ff f8b8 	bl	74c <__aeabi_ddiv>
    15dc:	f7ff fa26 	bl	a2c <__aeabi_d2f>
    15e0:	9b01      	ldr	r3, [sp, #4]
        result.yaw = atan2(2*(q0*q3 + q1*q2),1 - 2*(q2*q2 + q3*q3))*180/3.14;
    15e2:	2200      	movs	r2, #0
    result.pitch = asin(2*(q0*q2 - q3*q1))*180/3.14;
    15e4:	6058      	str	r0, [r3, #4]
        result.yaw = atan2(2*(q0*q3 + q1*q2),1 - 2*(q2*q2 + q3*q3))*180/3.14;
    15e6:	4629      	mov	r1, r5
    15e8:	4b0c      	ldr	r3, [pc, #48]	; (161c <quaternion_to_euler_angles+0x1c4>)
    15ea:	4620      	mov	r0, r4
    15ec:	f7fe ff84 	bl	4f8 <__aeabi_dmul>
    15f0:	a307      	add	r3, pc, #28	; (adr r3, 1610 <quaternion_to_euler_angles+0x1b8>)
    15f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    15f6:	f7ff f8a9 	bl	74c <__aeabi_ddiv>
    15fa:	f7ff fa17 	bl	a2c <__aeabi_d2f>
    15fe:	9b01      	ldr	r3, [sp, #4]
    1600:	6098      	str	r0, [r3, #8]
    return result;
}
    1602:	4618      	mov	r0, r3
    1604:	b00b      	add	sp, #44	; 0x2c
    1606:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    160a:	b004      	add	sp, #16
    160c:	4770      	bx	lr
    160e:	bf00      	nop
    1610:	51eb851f 	.word	0x51eb851f
    1614:	40091eb8 	.word	0x40091eb8
    1618:	3ff00000 	.word	0x3ff00000
    161c:	40668000 	.word	0x40668000

00001620 <quaternion_from_accelerometer>:
#include "sensor_processing_lib.h"


Quaternion quaternion_from_accelerometer(float ax, float ay, float az)
{
    1620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1624:	4604      	mov	r4, r0
    /*vector_ijk gravity = vector_3d_initialize(0.0f, 0.0f, -1.0f);
    vector_ijk accelerometer = vector_3d_initialize(ax, ay, az);
    Quaternion orientation = quaternion_between_vectors(gravity,accelerometer);
    return orientation;*/
    //float norm_u_norm_v = 1.0;
    float cos_theta = -1.0*az;
    1626:	f103 4000 	add.w	r0, r3, #2147483648	; 0x80000000
{
    162a:	4615      	mov	r5, r2
    162c:	4688      	mov	r8, r1
    //float half_cos = sqrt(0.5*(1.0 + cos_theta));
    float half_cos = 0.7071*sqrt(1.0 + cos_theta);
    162e:	f7fe ff0b 	bl	448 <__aeabi_f2d>
    1632:	4b15      	ldr	r3, [pc, #84]	; (1688 <quaternion_from_accelerometer+0x68>)
    1634:	2200      	movs	r2, #0
    1636:	f7fe fda9 	bl	18c <__adddf3>
    163a:	f00c fcc1 	bl	dfc0 <sqrt>
    163e:	a310      	add	r3, pc, #64	; (adr r3, 1680 <quaternion_from_accelerometer+0x60>)
    1640:	e9d3 2300 	ldrd	r2, r3, [r3]
    1644:	f7fe ff58 	bl	4f8 <__aeabi_dmul>
    1648:	f7ff f9f0 	bl	a2c <__aeabi_d2f>
    164c:	4607      	mov	r7, r0
    Quaternion orientation;
    orientation.a = half_cos;
    //float temp = 1/(2.0*half_cos);
    float temp = 0.5/half_cos;
    164e:	4601      	mov	r1, r0
    1650:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
    1654:	f7ff fbfc 	bl	e50 <__aeabi_fdiv>
    1658:	4606      	mov	r6, r0
    orientation.b = -ay*temp;
    165a:	4631      	mov	r1, r6
    orientation.c = ax*temp;
    orientation.d = 0.0;
    return orientation;
    165c:	6027      	str	r7, [r4, #0]
    orientation.b = -ay*temp;
    165e:	f105 4000 	add.w	r0, r5, #2147483648	; 0x80000000
    1662:	f7ff fb41 	bl	ce8 <__aeabi_fmul>
    orientation.c = ax*temp;
    1666:	4641      	mov	r1, r8
    return orientation;
    1668:	6060      	str	r0, [r4, #4]
    orientation.c = ax*temp;
    166a:	4630      	mov	r0, r6
    166c:	f7ff fb3c 	bl	ce8 <__aeabi_fmul>
    return orientation;
    1670:	2300      	movs	r3, #0
    1672:	60a0      	str	r0, [r4, #8]
    1674:	60e3      	str	r3, [r4, #12]
}
    1676:	4620      	mov	r0, r4
    1678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    167c:	f3af 8000 	nop.w
    1680:	2de00d1b 	.word	0x2de00d1b
    1684:	3fe6a090 	.word	0x3fe6a090
    1688:	3ff00000 	.word	0x3ff00000
    168c:	00000000 	.word	0x00000000

00001690 <fusion_coeffecient>:
    Quaternion result = quaternion_initialize(a,b,c,d);
    return result;
}

float fusion_coeffecient(vector_ijk virtual_gravity, vector_ijk sensor_gravity)
{
    1690:	b082      	sub	sp, #8
    1692:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    1694:	f10d 0c18 	add.w	ip, sp, #24
    1698:	e90c 0007 	stmdb	ip, {r0, r1, r2}
    float dot = vector_3d_dot_product(sensor_gravity,virtual_gravity);
    169c:	e95c 0102 	ldrd	r0, r1, [ip, #-8]
{
    16a0:	aa08      	add	r2, sp, #32
    16a2:	f842 3f04 	str.w	r3, [r2, #4]!
    float dot = vector_3d_dot_product(sensor_gravity,virtual_gravity);
    16a6:	e88d 0003 	stmia.w	sp, {r0, r1}
    16aa:	9b03      	ldr	r3, [sp, #12]
    16ac:	ca07      	ldmia	r2, {r0, r1, r2}
    16ae:	f00d fdce 	bl	f24e <vector_3d_dot_product>
     * This eliminates accel jiggle using gyro
     * 
     * Adjust these to change the effect of gyro sensor
     * 
     **/
    if (dot<=0.96)
    16b2:	f7fe fec9 	bl	448 <__aeabi_f2d>
    16b6:	a308      	add	r3, pc, #32	; (adr r3, 16d8 <fusion_coeffecient+0x48>)
    16b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    16bc:	f7ff f998 	bl	9f0 <__aeabi_dcmple>
    16c0:	b128      	cbz	r0, 16ce <fusion_coeffecient+0x3e>
        return 40.0;
    16c2:	4807      	ldr	r0, [pc, #28]	; (16e0 <fusion_coeffecient+0x50>)

    return 10.0;
}
    16c4:	b007      	add	sp, #28
    16c6:	f85d eb04 	ldr.w	lr, [sp], #4
    16ca:	b002      	add	sp, #8
    16cc:	4770      	bx	lr
    return 10.0;
    16ce:	4805      	ldr	r0, [pc, #20]	; (16e4 <fusion_coeffecient+0x54>)
    16d0:	e7f8      	b.n	16c4 <fusion_coeffecient+0x34>
    16d2:	bf00      	nop
    16d4:	f3af 8000 	nop.w
    16d8:	eb851eb8 	.word	0xeb851eb8
    16dc:	3feeb851 	.word	0x3feeb851
    16e0:	42200000 	.word	0x42200000
    16e4:	41200000 	.word	0x41200000

000016e8 <__ieee754_asin>:
    16e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16ec:	4bca      	ldr	r3, [pc, #808]	; (1a18 <__ieee754_asin+0x330>)
    16ee:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    16f2:	429f      	cmp	r7, r3
    16f4:	b087      	sub	sp, #28
    16f6:	460c      	mov	r4, r1
    16f8:	4605      	mov	r5, r0
    16fa:	dd16      	ble.n	172a <__ieee754_asin+0x42>
    16fc:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
    1700:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
    1704:	4603      	mov	r3, r0
    1706:	433b      	orrs	r3, r7
    1708:	f000 810c 	beq.w	1924 <__ieee754_asin+0x23c>
    170c:	4602      	mov	r2, r0
    170e:	460b      	mov	r3, r1
    1710:	f7fe fd3a 	bl	188 <__aeabi_dsub>
    1714:	4602      	mov	r2, r0
    1716:	460b      	mov	r3, r1
    1718:	f7ff f818 	bl	74c <__aeabi_ddiv>
    171c:	4603      	mov	r3, r0
    171e:	460a      	mov	r2, r1
    1720:	4618      	mov	r0, r3
    1722:	4611      	mov	r1, r2
    1724:	b007      	add	sp, #28
    1726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    172a:	4bbc      	ldr	r3, [pc, #752]	; (1a1c <__ieee754_asin+0x334>)
    172c:	429f      	cmp	r7, r3
    172e:	460e      	mov	r6, r1
    1730:	dc0f      	bgt.n	1752 <__ieee754_asin+0x6a>
    1732:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
    1736:	f280 8179 	bge.w	1a2c <__ieee754_asin+0x344>
    173a:	a39b      	add	r3, pc, #620	; (adr r3, 19a8 <__ieee754_asin+0x2c0>)
    173c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1740:	f7fe fd24 	bl	18c <__adddf3>
    1744:	4bb6      	ldr	r3, [pc, #728]	; (1a20 <__ieee754_asin+0x338>)
    1746:	2200      	movs	r2, #0
    1748:	f7ff f966 	bl	a18 <__aeabi_dcmpgt>
    174c:	2800      	cmp	r0, #0
    174e:	f040 8127 	bne.w	19a0 <__ieee754_asin+0x2b8>
    1752:	4628      	mov	r0, r5
    1754:	4621      	mov	r1, r4
    1756:	f00c fd57 	bl	e208 <fabs>
    175a:	4602      	mov	r2, r0
    175c:	460b      	mov	r3, r1
    175e:	2000      	movs	r0, #0
    1760:	49af      	ldr	r1, [pc, #700]	; (1a20 <__ieee754_asin+0x338>)
    1762:	f7fe fd11 	bl	188 <__aeabi_dsub>
    1766:	4baf      	ldr	r3, [pc, #700]	; (1a24 <__ieee754_asin+0x33c>)
    1768:	2200      	movs	r2, #0
    176a:	f7fe fec5 	bl	4f8 <__aeabi_dmul>
    176e:	a390      	add	r3, pc, #576	; (adr r3, 19b0 <__ieee754_asin+0x2c8>)
    1770:	e9d3 2300 	ldrd	r2, r3, [r3]
    1774:	4604      	mov	r4, r0
    1776:	460d      	mov	r5, r1
    1778:	f7fe febe 	bl	4f8 <__aeabi_dmul>
    177c:	a38e      	add	r3, pc, #568	; (adr r3, 19b8 <__ieee754_asin+0x2d0>)
    177e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1782:	f7fe fd03 	bl	18c <__adddf3>
    1786:	4622      	mov	r2, r4
    1788:	462b      	mov	r3, r5
    178a:	f7fe feb5 	bl	4f8 <__aeabi_dmul>
    178e:	a38c      	add	r3, pc, #560	; (adr r3, 19c0 <__ieee754_asin+0x2d8>)
    1790:	e9d3 2300 	ldrd	r2, r3, [r3]
    1794:	f7fe fcf8 	bl	188 <__aeabi_dsub>
    1798:	4622      	mov	r2, r4
    179a:	462b      	mov	r3, r5
    179c:	f7fe feac 	bl	4f8 <__aeabi_dmul>
    17a0:	a389      	add	r3, pc, #548	; (adr r3, 19c8 <__ieee754_asin+0x2e0>)
    17a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    17a6:	f7fe fcf1 	bl	18c <__adddf3>
    17aa:	4622      	mov	r2, r4
    17ac:	462b      	mov	r3, r5
    17ae:	f7fe fea3 	bl	4f8 <__aeabi_dmul>
    17b2:	a387      	add	r3, pc, #540	; (adr r3, 19d0 <__ieee754_asin+0x2e8>)
    17b4:	e9d3 2300 	ldrd	r2, r3, [r3]
    17b8:	f7fe fce6 	bl	188 <__aeabi_dsub>
    17bc:	4622      	mov	r2, r4
    17be:	462b      	mov	r3, r5
    17c0:	f7fe fe9a 	bl	4f8 <__aeabi_dmul>
    17c4:	a384      	add	r3, pc, #528	; (adr r3, 19d8 <__ieee754_asin+0x2f0>)
    17c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    17ca:	f7fe fcdf 	bl	18c <__adddf3>
    17ce:	4622      	mov	r2, r4
    17d0:	462b      	mov	r3, r5
    17d2:	f7fe fe91 	bl	4f8 <__aeabi_dmul>
    17d6:	a382      	add	r3, pc, #520	; (adr r3, 19e0 <__ieee754_asin+0x2f8>)
    17d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    17dc:	4680      	mov	r8, r0
    17de:	4689      	mov	r9, r1
    17e0:	4620      	mov	r0, r4
    17e2:	4629      	mov	r1, r5
    17e4:	e9cd 8902 	strd	r8, r9, [sp, #8]
    17e8:	f7fe fe86 	bl	4f8 <__aeabi_dmul>
    17ec:	a37e      	add	r3, pc, #504	; (adr r3, 19e8 <__ieee754_asin+0x300>)
    17ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    17f2:	f7fe fcc9 	bl	188 <__aeabi_dsub>
    17f6:	4622      	mov	r2, r4
    17f8:	462b      	mov	r3, r5
    17fa:	f7fe fe7d 	bl	4f8 <__aeabi_dmul>
    17fe:	a37c      	add	r3, pc, #496	; (adr r3, 19f0 <__ieee754_asin+0x308>)
    1800:	e9d3 2300 	ldrd	r2, r3, [r3]
    1804:	f7fe fcc2 	bl	18c <__adddf3>
    1808:	4622      	mov	r2, r4
    180a:	462b      	mov	r3, r5
    180c:	f7fe fe74 	bl	4f8 <__aeabi_dmul>
    1810:	a379      	add	r3, pc, #484	; (adr r3, 19f8 <__ieee754_asin+0x310>)
    1812:	e9d3 2300 	ldrd	r2, r3, [r3]
    1816:	f7fe fcb7 	bl	188 <__aeabi_dsub>
    181a:	4622      	mov	r2, r4
    181c:	462b      	mov	r3, r5
    181e:	f7fe fe6b 	bl	4f8 <__aeabi_dmul>
    1822:	4b7f      	ldr	r3, [pc, #508]	; (1a20 <__ieee754_asin+0x338>)
    1824:	2200      	movs	r2, #0
    1826:	f7fe fcb1 	bl	18c <__adddf3>
    182a:	4602      	mov	r2, r0
    182c:	460b      	mov	r3, r1
    182e:	4692      	mov	sl, r2
    1830:	469b      	mov	fp, r3
    1832:	4620      	mov	r0, r4
    1834:	4629      	mov	r1, r5
    1836:	e9cd ab04 	strd	sl, fp, [sp, #16]
    183a:	f00c fc21 	bl	e080 <__ieee754_sqrt>
    183e:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 1a28 <__ieee754_asin+0x340>
    1842:	4567      	cmp	r7, ip
    1844:	4680      	mov	r8, r0
    1846:	4689      	mov	r9, r1
    1848:	f300 8089 	bgt.w	195e <__ieee754_asin+0x276>
    184c:	468b      	mov	fp, r1
    184e:	f04f 0a00 	mov.w	sl, #0
    1852:	4602      	mov	r2, r0
    1854:	460b      	mov	r3, r1
    1856:	e9cd ab00 	strd	sl, fp, [sp]
    185a:	f7fe fc97 	bl	18c <__adddf3>
    185e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1862:	4682      	mov	sl, r0
    1864:	468b      	mov	fp, r1
    1866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    186a:	f7fe ff6f 	bl	74c <__aeabi_ddiv>
    186e:	4602      	mov	r2, r0
    1870:	460b      	mov	r3, r1
    1872:	4650      	mov	r0, sl
    1874:	4659      	mov	r1, fp
    1876:	f7fe fe3f 	bl	4f8 <__aeabi_dmul>
    187a:	e9dd 2300 	ldrd	r2, r3, [sp]
    187e:	4682      	mov	sl, r0
    1880:	468b      	mov	fp, r1
    1882:	4610      	mov	r0, r2
    1884:	4619      	mov	r1, r3
    1886:	f7fe fe37 	bl	4f8 <__aeabi_dmul>
    188a:	4602      	mov	r2, r0
    188c:	460b      	mov	r3, r1
    188e:	4620      	mov	r0, r4
    1890:	4629      	mov	r1, r5
    1892:	f7fe fc79 	bl	188 <__aeabi_dsub>
    1896:	e9dd 2300 	ldrd	r2, r3, [sp]
    189a:	4604      	mov	r4, r0
    189c:	460d      	mov	r5, r1
    189e:	4640      	mov	r0, r8
    18a0:	4649      	mov	r1, r9
    18a2:	f7fe fc73 	bl	18c <__adddf3>
    18a6:	4602      	mov	r2, r0
    18a8:	460b      	mov	r3, r1
    18aa:	4620      	mov	r0, r4
    18ac:	4629      	mov	r1, r5
    18ae:	f7fe ff4d 	bl	74c <__aeabi_ddiv>
    18b2:	4602      	mov	r2, r0
    18b4:	460b      	mov	r3, r1
    18b6:	f7fe fc69 	bl	18c <__adddf3>
    18ba:	4602      	mov	r2, r0
    18bc:	460b      	mov	r3, r1
    18be:	a150      	add	r1, pc, #320	; (adr r1, 1a00 <__ieee754_asin+0x318>)
    18c0:	e9d1 0100 	ldrd	r0, r1, [r1]
    18c4:	f7fe fc60 	bl	188 <__aeabi_dsub>
    18c8:	4602      	mov	r2, r0
    18ca:	460b      	mov	r3, r1
    18cc:	4650      	mov	r0, sl
    18ce:	4659      	mov	r1, fp
    18d0:	f7fe fc5a 	bl	188 <__aeabi_dsub>
    18d4:	e9dd 2300 	ldrd	r2, r3, [sp]
    18d8:	4604      	mov	r4, r0
    18da:	460d      	mov	r5, r1
    18dc:	4610      	mov	r0, r2
    18de:	4619      	mov	r1, r3
    18e0:	f7fe fc54 	bl	18c <__adddf3>
    18e4:	4602      	mov	r2, r0
    18e6:	460b      	mov	r3, r1
    18e8:	a147      	add	r1, pc, #284	; (adr r1, 1a08 <__ieee754_asin+0x320>)
    18ea:	e9d1 0100 	ldrd	r0, r1, [r1]
    18ee:	f7fe fc4b 	bl	188 <__aeabi_dsub>
    18f2:	4602      	mov	r2, r0
    18f4:	460b      	mov	r3, r1
    18f6:	4620      	mov	r0, r4
    18f8:	4629      	mov	r1, r5
    18fa:	f7fe fc45 	bl	188 <__aeabi_dsub>
    18fe:	4602      	mov	r2, r0
    1900:	460b      	mov	r3, r1
    1902:	a141      	add	r1, pc, #260	; (adr r1, 1a08 <__ieee754_asin+0x320>)
    1904:	e9d1 0100 	ldrd	r0, r1, [r1]
    1908:	f7fe fc3e 	bl	188 <__aeabi_dsub>
    190c:	4603      	mov	r3, r0
    190e:	460a      	mov	r2, r1
    1910:	2e00      	cmp	r6, #0
    1912:	f73f af05 	bgt.w	1720 <__ieee754_asin+0x38>
    1916:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
    191a:	4618      	mov	r0, r3
    191c:	4611      	mov	r1, r2
    191e:	b007      	add	sp, #28
    1920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1924:	a33a      	add	r3, pc, #232	; (adr r3, 1a10 <__ieee754_asin+0x328>)
    1926:	e9d3 2300 	ldrd	r2, r3, [r3]
    192a:	f7fe fde5 	bl	4f8 <__aeabi_dmul>
    192e:	4602      	mov	r2, r0
    1930:	460b      	mov	r3, r1
    1932:	4628      	mov	r0, r5
    1934:	4621      	mov	r1, r4
    1936:	461d      	mov	r5, r3
    1938:	4614      	mov	r4, r2
    193a:	a331      	add	r3, pc, #196	; (adr r3, 1a00 <__ieee754_asin+0x318>)
    193c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1940:	f7fe fdda 	bl	4f8 <__aeabi_dmul>
    1944:	4602      	mov	r2, r0
    1946:	460b      	mov	r3, r1
    1948:	4620      	mov	r0, r4
    194a:	4629      	mov	r1, r5
    194c:	f7fe fc1e 	bl	18c <__adddf3>
    1950:	4603      	mov	r3, r0
    1952:	460a      	mov	r2, r1
    1954:	4618      	mov	r0, r3
    1956:	4611      	mov	r1, r2
    1958:	b007      	add	sp, #28
    195a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    195e:	4652      	mov	r2, sl
    1960:	465b      	mov	r3, fp
    1962:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1966:	f7fe fef1 	bl	74c <__aeabi_ddiv>
    196a:	4642      	mov	r2, r8
    196c:	464b      	mov	r3, r9
    196e:	f7fe fdc3 	bl	4f8 <__aeabi_dmul>
    1972:	4642      	mov	r2, r8
    1974:	464b      	mov	r3, r9
    1976:	f7fe fc09 	bl	18c <__adddf3>
    197a:	4602      	mov	r2, r0
    197c:	460b      	mov	r3, r1
    197e:	f7fe fc05 	bl	18c <__adddf3>
    1982:	a31f      	add	r3, pc, #124	; (adr r3, 1a00 <__ieee754_asin+0x318>)
    1984:	e9d3 2300 	ldrd	r2, r3, [r3]
    1988:	f7fe fbfe 	bl	188 <__aeabi_dsub>
    198c:	4602      	mov	r2, r0
    198e:	460b      	mov	r3, r1
    1990:	a11f      	add	r1, pc, #124	; (adr r1, 1a10 <__ieee754_asin+0x328>)
    1992:	e9d1 0100 	ldrd	r0, r1, [r1]
    1996:	f7fe fbf7 	bl	188 <__aeabi_dsub>
    199a:	4603      	mov	r3, r0
    199c:	460a      	mov	r2, r1
    199e:	e7b7      	b.n	1910 <__ieee754_asin+0x228>
    19a0:	462b      	mov	r3, r5
    19a2:	4622      	mov	r2, r4
    19a4:	e6bc      	b.n	1720 <__ieee754_asin+0x38>
    19a6:	bf00      	nop
    19a8:	8800759c 	.word	0x8800759c
    19ac:	7e37e43c 	.word	0x7e37e43c
    19b0:	0dfdf709 	.word	0x0dfdf709
    19b4:	3f023de1 	.word	0x3f023de1
    19b8:	7501b288 	.word	0x7501b288
    19bc:	3f49efe0 	.word	0x3f49efe0
    19c0:	b5688f3b 	.word	0xb5688f3b
    19c4:	3fa48228 	.word	0x3fa48228
    19c8:	0e884455 	.word	0x0e884455
    19cc:	3fc9c155 	.word	0x3fc9c155
    19d0:	03eb6f7d 	.word	0x03eb6f7d
    19d4:	3fd4d612 	.word	0x3fd4d612
    19d8:	55555555 	.word	0x55555555
    19dc:	3fc55555 	.word	0x3fc55555
    19e0:	b12e9282 	.word	0xb12e9282
    19e4:	3fb3b8c5 	.word	0x3fb3b8c5
    19e8:	1b8d0159 	.word	0x1b8d0159
    19ec:	3fe6066c 	.word	0x3fe6066c
    19f0:	9c598ac8 	.word	0x9c598ac8
    19f4:	40002ae5 	.word	0x40002ae5
    19f8:	1c8a2d4b 	.word	0x1c8a2d4b
    19fc:	40033a27 	.word	0x40033a27
    1a00:	33145c07 	.word	0x33145c07
    1a04:	3c91a626 	.word	0x3c91a626
    1a08:	54442d18 	.word	0x54442d18
    1a0c:	3fe921fb 	.word	0x3fe921fb
    1a10:	54442d18 	.word	0x54442d18
    1a14:	3ff921fb 	.word	0x3ff921fb
    1a18:	3fefffff 	.word	0x3fefffff
    1a1c:	3fdfffff 	.word	0x3fdfffff
    1a20:	3ff00000 	.word	0x3ff00000
    1a24:	3fe00000 	.word	0x3fe00000
    1a28:	3fef3332 	.word	0x3fef3332
    1a2c:	4602      	mov	r2, r0
    1a2e:	460b      	mov	r3, r1
    1a30:	f7fe fd62 	bl	4f8 <__aeabi_dmul>
    1a34:	a338      	add	r3, pc, #224	; (adr r3, 1b18 <__ieee754_asin+0x430>)
    1a36:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a3a:	4606      	mov	r6, r0
    1a3c:	460f      	mov	r7, r1
    1a3e:	f7fe fd5b 	bl	4f8 <__aeabi_dmul>
    1a42:	a337      	add	r3, pc, #220	; (adr r3, 1b20 <__ieee754_asin+0x438>)
    1a44:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a48:	f7fe fba0 	bl	18c <__adddf3>
    1a4c:	4632      	mov	r2, r6
    1a4e:	463b      	mov	r3, r7
    1a50:	f7fe fd52 	bl	4f8 <__aeabi_dmul>
    1a54:	a334      	add	r3, pc, #208	; (adr r3, 1b28 <__ieee754_asin+0x440>)
    1a56:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a5a:	f7fe fb95 	bl	188 <__aeabi_dsub>
    1a5e:	4632      	mov	r2, r6
    1a60:	463b      	mov	r3, r7
    1a62:	f7fe fd49 	bl	4f8 <__aeabi_dmul>
    1a66:	a332      	add	r3, pc, #200	; (adr r3, 1b30 <__ieee754_asin+0x448>)
    1a68:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a6c:	f7fe fb8e 	bl	18c <__adddf3>
    1a70:	4632      	mov	r2, r6
    1a72:	463b      	mov	r3, r7
    1a74:	f7fe fd40 	bl	4f8 <__aeabi_dmul>
    1a78:	a32f      	add	r3, pc, #188	; (adr r3, 1b38 <__ieee754_asin+0x450>)
    1a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a7e:	f7fe fb83 	bl	188 <__aeabi_dsub>
    1a82:	4632      	mov	r2, r6
    1a84:	463b      	mov	r3, r7
    1a86:	f7fe fd37 	bl	4f8 <__aeabi_dmul>
    1a8a:	a32d      	add	r3, pc, #180	; (adr r3, 1b40 <__ieee754_asin+0x458>)
    1a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a90:	f7fe fb7c 	bl	18c <__adddf3>
    1a94:	4632      	mov	r2, r6
    1a96:	463b      	mov	r3, r7
    1a98:	f7fe fd2e 	bl	4f8 <__aeabi_dmul>
    1a9c:	a32a      	add	r3, pc, #168	; (adr r3, 1b48 <__ieee754_asin+0x460>)
    1a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1aa2:	4680      	mov	r8, r0
    1aa4:	4689      	mov	r9, r1
    1aa6:	4630      	mov	r0, r6
    1aa8:	4639      	mov	r1, r7
    1aaa:	f7fe fd25 	bl	4f8 <__aeabi_dmul>
    1aae:	a328      	add	r3, pc, #160	; (adr r3, 1b50 <__ieee754_asin+0x468>)
    1ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ab4:	f7fe fb68 	bl	188 <__aeabi_dsub>
    1ab8:	4632      	mov	r2, r6
    1aba:	463b      	mov	r3, r7
    1abc:	f7fe fd1c 	bl	4f8 <__aeabi_dmul>
    1ac0:	a325      	add	r3, pc, #148	; (adr r3, 1b58 <__ieee754_asin+0x470>)
    1ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ac6:	f7fe fb61 	bl	18c <__adddf3>
    1aca:	4632      	mov	r2, r6
    1acc:	463b      	mov	r3, r7
    1ace:	f7fe fd13 	bl	4f8 <__aeabi_dmul>
    1ad2:	a323      	add	r3, pc, #140	; (adr r3, 1b60 <__ieee754_asin+0x478>)
    1ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ad8:	f7fe fb56 	bl	188 <__aeabi_dsub>
    1adc:	4632      	mov	r2, r6
    1ade:	463b      	mov	r3, r7
    1ae0:	f7fe fd0a 	bl	4f8 <__aeabi_dmul>
    1ae4:	4b20      	ldr	r3, [pc, #128]	; (1b68 <__ieee754_asin+0x480>)
    1ae6:	2200      	movs	r2, #0
    1ae8:	f7fe fb50 	bl	18c <__adddf3>
    1aec:	4602      	mov	r2, r0
    1aee:	460b      	mov	r3, r1
    1af0:	4640      	mov	r0, r8
    1af2:	4649      	mov	r1, r9
    1af4:	f7fe fe2a 	bl	74c <__aeabi_ddiv>
    1af8:	462a      	mov	r2, r5
    1afa:	4623      	mov	r3, r4
    1afc:	f7fe fcfc 	bl	4f8 <__aeabi_dmul>
    1b00:	462a      	mov	r2, r5
    1b02:	4623      	mov	r3, r4
    1b04:	f7fe fb42 	bl	18c <__adddf3>
    1b08:	4603      	mov	r3, r0
    1b0a:	460a      	mov	r2, r1
    1b0c:	4618      	mov	r0, r3
    1b0e:	4611      	mov	r1, r2
    1b10:	b007      	add	sp, #28
    1b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b16:	bf00      	nop
    1b18:	0dfdf709 	.word	0x0dfdf709
    1b1c:	3f023de1 	.word	0x3f023de1
    1b20:	7501b288 	.word	0x7501b288
    1b24:	3f49efe0 	.word	0x3f49efe0
    1b28:	b5688f3b 	.word	0xb5688f3b
    1b2c:	3fa48228 	.word	0x3fa48228
    1b30:	0e884455 	.word	0x0e884455
    1b34:	3fc9c155 	.word	0x3fc9c155
    1b38:	03eb6f7d 	.word	0x03eb6f7d
    1b3c:	3fd4d612 	.word	0x3fd4d612
    1b40:	55555555 	.word	0x55555555
    1b44:	3fc55555 	.word	0x3fc55555
    1b48:	b12e9282 	.word	0xb12e9282
    1b4c:	3fb3b8c5 	.word	0x3fb3b8c5
    1b50:	1b8d0159 	.word	0x1b8d0159
    1b54:	3fe6066c 	.word	0x3fe6066c
    1b58:	9c598ac8 	.word	0x9c598ac8
    1b5c:	40002ae5 	.word	0x40002ae5
    1b60:	1c8a2d4b 	.word	0x1c8a2d4b
    1b64:	40033a27 	.word	0x40033a27
    1b68:	3ff00000 	.word	0x3ff00000
    1b6c:	00000000 	.word	0x00000000

00001b70 <__ieee754_atan2>:
    1b70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b74:	461f      	mov	r7, r3
    1b76:	4253      	negs	r3, r2
    1b78:	4e5f      	ldr	r6, [pc, #380]	; (1cf8 <__ieee754_atan2+0x188>)
    1b7a:	4313      	orrs	r3, r2
    1b7c:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
    1b80:	ea49 73d3 	orr.w	r3, r9, r3, lsr #31
    1b84:	42b3      	cmp	r3, r6
    1b86:	4694      	mov	ip, r2
    1b88:	460d      	mov	r5, r1
    1b8a:	4686      	mov	lr, r0
    1b8c:	d83b      	bhi.n	1c06 <__ieee754_atan2+0x96>
    1b8e:	4244      	negs	r4, r0
    1b90:	4304      	orrs	r4, r0
    1b92:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
    1b96:	ea4a 74d4 	orr.w	r4, sl, r4, lsr #31
    1b9a:	42b4      	cmp	r4, r6
    1b9c:	4603      	mov	r3, r0
    1b9e:	468b      	mov	fp, r1
    1ba0:	d831      	bhi.n	1c06 <__ieee754_atan2+0x96>
    1ba2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
    1ba6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
    1baa:	4314      	orrs	r4, r2
    1bac:	d03b      	beq.n	1c26 <__ieee754_atan2+0xb6>
    1bae:	17bc      	asrs	r4, r7, #30
    1bb0:	f004 0402 	and.w	r4, r4, #2
    1bb4:	ea5a 0303 	orrs.w	r3, sl, r3
    1bb8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
    1bbc:	d02b      	beq.n	1c16 <__ieee754_atan2+0xa6>
    1bbe:	ea59 0302 	orrs.w	r3, r9, r2
    1bc2:	d034      	beq.n	1c2e <__ieee754_atan2+0xbe>
    1bc4:	45b1      	cmp	r9, r6
    1bc6:	d045      	beq.n	1c54 <__ieee754_atan2+0xe4>
    1bc8:	45b2      	cmp	sl, r6
    1bca:	d030      	beq.n	1c2e <__ieee754_atan2+0xbe>
    1bcc:	ebaa 0909 	sub.w	r9, sl, r9
    1bd0:	f1b9 7f74 	cmp.w	r9, #63963136	; 0x3d00000
    1bd4:	ea4f 5329 	mov.w	r3, r9, asr #20
    1bd8:	da38      	bge.n	1c4c <__ieee754_atan2+0xdc>
    1bda:	2f00      	cmp	r7, #0
    1bdc:	da46      	bge.n	1c6c <__ieee754_atan2+0xfc>
    1bde:	333c      	adds	r3, #60	; 0x3c
    1be0:	da44      	bge.n	1c6c <__ieee754_atan2+0xfc>
    1be2:	2000      	movs	r0, #0
    1be4:	2100      	movs	r1, #0
    1be6:	2c01      	cmp	r4, #1
    1be8:	d058      	beq.n	1c9c <__ieee754_atan2+0x12c>
    1bea:	2c02      	cmp	r4, #2
    1bec:	d049      	beq.n	1c82 <__ieee754_atan2+0x112>
    1bee:	b184      	cbz	r4, 1c12 <__ieee754_atan2+0xa2>
    1bf0:	a335      	add	r3, pc, #212	; (adr r3, 1cc8 <__ieee754_atan2+0x158>)
    1bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
    1bf6:	f7fe fac7 	bl	188 <__aeabi_dsub>
    1bfa:	a335      	add	r3, pc, #212	; (adr r3, 1cd0 <__ieee754_atan2+0x160>)
    1bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c00:	f7fe fac2 	bl	188 <__aeabi_dsub>
    1c04:	e005      	b.n	1c12 <__ieee754_atan2+0xa2>
    1c06:	4672      	mov	r2, lr
    1c08:	4660      	mov	r0, ip
    1c0a:	462b      	mov	r3, r5
    1c0c:	4639      	mov	r1, r7
    1c0e:	f7fe fabd 	bl	18c <__adddf3>
    1c12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c16:	2c02      	cmp	r4, #2
    1c18:	d010      	beq.n	1c3c <__ieee754_atan2+0xcc>
    1c1a:	2c03      	cmp	r4, #3
    1c1c:	d1f9      	bne.n	1c12 <__ieee754_atan2+0xa2>
    1c1e:	a12e      	add	r1, pc, #184	; (adr r1, 1cd8 <__ieee754_atan2+0x168>)
    1c20:	e9d1 0100 	ldrd	r0, r1, [r1]
    1c24:	e7f5      	b.n	1c12 <__ieee754_atan2+0xa2>
    1c26:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c2a:	f000 b86d 	b.w	1d08 <atan>
    1c2e:	f1bb 0f00 	cmp.w	fp, #0
    1c32:	db07      	blt.n	1c44 <__ieee754_atan2+0xd4>
    1c34:	a12a      	add	r1, pc, #168	; (adr r1, 1ce0 <__ieee754_atan2+0x170>)
    1c36:	e9d1 0100 	ldrd	r0, r1, [r1]
    1c3a:	e7ea      	b.n	1c12 <__ieee754_atan2+0xa2>
    1c3c:	a124      	add	r1, pc, #144	; (adr r1, 1cd0 <__ieee754_atan2+0x160>)
    1c3e:	e9d1 0100 	ldrd	r0, r1, [r1]
    1c42:	e7e6      	b.n	1c12 <__ieee754_atan2+0xa2>
    1c44:	a128      	add	r1, pc, #160	; (adr r1, 1ce8 <__ieee754_atan2+0x178>)
    1c46:	e9d1 0100 	ldrd	r0, r1, [r1]
    1c4a:	e7e2      	b.n	1c12 <__ieee754_atan2+0xa2>
    1c4c:	a124      	add	r1, pc, #144	; (adr r1, 1ce0 <__ieee754_atan2+0x170>)
    1c4e:	e9d1 0100 	ldrd	r0, r1, [r1]
    1c52:	e7c8      	b.n	1be6 <__ieee754_atan2+0x76>
    1c54:	45ca      	cmp	sl, r9
    1c56:	f104 34ff 	add.w	r4, r4, #4294967295
    1c5a:	d023      	beq.n	1ca4 <__ieee754_atan2+0x134>
    1c5c:	2c02      	cmp	r4, #2
    1c5e:	d829      	bhi.n	1cb4 <__ieee754_atan2+0x144>
    1c60:	4b26      	ldr	r3, [pc, #152]	; (1cfc <__ieee754_atan2+0x18c>)
    1c62:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    1c66:	e9d4 0100 	ldrd	r0, r1, [r4]
    1c6a:	e7d2      	b.n	1c12 <__ieee754_atan2+0xa2>
    1c6c:	4662      	mov	r2, ip
    1c6e:	4670      	mov	r0, lr
    1c70:	463b      	mov	r3, r7
    1c72:	4629      	mov	r1, r5
    1c74:	f7fe fd6a 	bl	74c <__aeabi_ddiv>
    1c78:	f00c fac6 	bl	e208 <fabs>
    1c7c:	f000 f844 	bl	1d08 <atan>
    1c80:	e7b1      	b.n	1be6 <__ieee754_atan2+0x76>
    1c82:	a311      	add	r3, pc, #68	; (adr r3, 1cc8 <__ieee754_atan2+0x158>)
    1c84:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c88:	f7fe fa7e 	bl	188 <__aeabi_dsub>
    1c8c:	4602      	mov	r2, r0
    1c8e:	460b      	mov	r3, r1
    1c90:	a10f      	add	r1, pc, #60	; (adr r1, 1cd0 <__ieee754_atan2+0x160>)
    1c92:	e9d1 0100 	ldrd	r0, r1, [r1]
    1c96:	f7fe fa77 	bl	188 <__aeabi_dsub>
    1c9a:	e7ba      	b.n	1c12 <__ieee754_atan2+0xa2>
    1c9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    1ca0:	4619      	mov	r1, r3
    1ca2:	e7b6      	b.n	1c12 <__ieee754_atan2+0xa2>
    1ca4:	2c02      	cmp	r4, #2
    1ca6:	d808      	bhi.n	1cba <__ieee754_atan2+0x14a>
    1ca8:	4b15      	ldr	r3, [pc, #84]	; (1d00 <__ieee754_atan2+0x190>)
    1caa:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    1cae:	e9d4 0100 	ldrd	r0, r1, [r4]
    1cb2:	e7ae      	b.n	1c12 <__ieee754_atan2+0xa2>
    1cb4:	2000      	movs	r0, #0
    1cb6:	2100      	movs	r1, #0
    1cb8:	e7ab      	b.n	1c12 <__ieee754_atan2+0xa2>
    1cba:	a10d      	add	r1, pc, #52	; (adr r1, 1cf0 <__ieee754_atan2+0x180>)
    1cbc:	e9d1 0100 	ldrd	r0, r1, [r1]
    1cc0:	e7a7      	b.n	1c12 <__ieee754_atan2+0xa2>
    1cc2:	bf00      	nop
    1cc4:	f3af 8000 	nop.w
    1cc8:	33145c07 	.word	0x33145c07
    1ccc:	3ca1a626 	.word	0x3ca1a626
    1cd0:	54442d18 	.word	0x54442d18
    1cd4:	400921fb 	.word	0x400921fb
    1cd8:	54442d18 	.word	0x54442d18
    1cdc:	c00921fb 	.word	0xc00921fb
    1ce0:	54442d18 	.word	0x54442d18
    1ce4:	3ff921fb 	.word	0x3ff921fb
    1ce8:	54442d18 	.word	0x54442d18
    1cec:	bff921fb 	.word	0xbff921fb
    1cf0:	54442d18 	.word	0x54442d18
    1cf4:	3fe921fb 	.word	0x3fe921fb
    1cf8:	7ff00000 	.word	0x7ff00000
    1cfc:	00013170 	.word	0x00013170
    1d00:	00013158 	.word	0x00013158
    1d04:	00000000 	.word	0x00000000

00001d08 <atan>:
    1d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d0c:	4bc6      	ldr	r3, [pc, #792]	; (2028 <atan+0x320>)
    1d0e:	b083      	sub	sp, #12
    1d10:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    1d14:	429e      	cmp	r6, r3
    1d16:	4604      	mov	r4, r0
    1d18:	9101      	str	r1, [sp, #4]
    1d1a:	468a      	mov	sl, r1
    1d1c:	dd11      	ble.n	1d42 <atan+0x3a>
    1d1e:	4bc3      	ldr	r3, [pc, #780]	; (202c <atan+0x324>)
    1d20:	429e      	cmp	r6, r3
    1d22:	f300 80b8 	bgt.w	1e96 <atan+0x18e>
    1d26:	f000 80b3 	beq.w	1e90 <atan+0x188>
    1d2a:	4bc1      	ldr	r3, [pc, #772]	; (2030 <atan+0x328>)
    1d2c:	4ac1      	ldr	r2, [pc, #772]	; (2034 <atan+0x32c>)
    1d2e:	4cc2      	ldr	r4, [pc, #776]	; (2038 <atan+0x330>)
    1d30:	f1ba 0f00 	cmp.w	sl, #0
    1d34:	bfd8      	it	le
    1d36:	4613      	movle	r3, r2
    1d38:	4620      	mov	r0, r4
    1d3a:	4619      	mov	r1, r3
    1d3c:	b003      	add	sp, #12
    1d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d42:	4bbe      	ldr	r3, [pc, #760]	; (203c <atan+0x334>)
    1d44:	429e      	cmp	r6, r3
    1d46:	f300 80c1 	bgt.w	1ecc <atan+0x1c4>
    1d4a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
    1d4e:	429e      	cmp	r6, r3
    1d50:	f340 80ae 	ble.w	1eb0 <atan+0x1a8>
    1d54:	f04f 3bff 	mov.w	fp, #4294967295
    1d58:	9b01      	ldr	r3, [sp, #4]
    1d5a:	4622      	mov	r2, r4
    1d5c:	4619      	mov	r1, r3
    1d5e:	4620      	mov	r0, r4
    1d60:	f7fe fbca 	bl	4f8 <__aeabi_dmul>
    1d64:	4602      	mov	r2, r0
    1d66:	460b      	mov	r3, r1
    1d68:	4680      	mov	r8, r0
    1d6a:	4689      	mov	r9, r1
    1d6c:	f7fe fbc4 	bl	4f8 <__aeabi_dmul>
    1d70:	a395      	add	r3, pc, #596	; (adr r3, 1fc8 <atan+0x2c0>)
    1d72:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d76:	4606      	mov	r6, r0
    1d78:	460f      	mov	r7, r1
    1d7a:	f7fe fbbd 	bl	4f8 <__aeabi_dmul>
    1d7e:	a394      	add	r3, pc, #592	; (adr r3, 1fd0 <atan+0x2c8>)
    1d80:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d84:	f7fe fa02 	bl	18c <__adddf3>
    1d88:	4632      	mov	r2, r6
    1d8a:	463b      	mov	r3, r7
    1d8c:	f7fe fbb4 	bl	4f8 <__aeabi_dmul>
    1d90:	a391      	add	r3, pc, #580	; (adr r3, 1fd8 <atan+0x2d0>)
    1d92:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d96:	f7fe f9f9 	bl	18c <__adddf3>
    1d9a:	4632      	mov	r2, r6
    1d9c:	463b      	mov	r3, r7
    1d9e:	f7fe fbab 	bl	4f8 <__aeabi_dmul>
    1da2:	a38f      	add	r3, pc, #572	; (adr r3, 1fe0 <atan+0x2d8>)
    1da4:	e9d3 2300 	ldrd	r2, r3, [r3]
    1da8:	f7fe f9f0 	bl	18c <__adddf3>
    1dac:	4632      	mov	r2, r6
    1dae:	463b      	mov	r3, r7
    1db0:	f7fe fba2 	bl	4f8 <__aeabi_dmul>
    1db4:	a38c      	add	r3, pc, #560	; (adr r3, 1fe8 <atan+0x2e0>)
    1db6:	e9d3 2300 	ldrd	r2, r3, [r3]
    1dba:	f7fe f9e7 	bl	18c <__adddf3>
    1dbe:	4632      	mov	r2, r6
    1dc0:	463b      	mov	r3, r7
    1dc2:	f7fe fb99 	bl	4f8 <__aeabi_dmul>
    1dc6:	a38a      	add	r3, pc, #552	; (adr r3, 1ff0 <atan+0x2e8>)
    1dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
    1dcc:	f7fe f9de 	bl	18c <__adddf3>
    1dd0:	4642      	mov	r2, r8
    1dd2:	464b      	mov	r3, r9
    1dd4:	f7fe fb90 	bl	4f8 <__aeabi_dmul>
    1dd8:	a387      	add	r3, pc, #540	; (adr r3, 1ff8 <atan+0x2f0>)
    1dda:	e9d3 2300 	ldrd	r2, r3, [r3]
    1dde:	4680      	mov	r8, r0
    1de0:	4689      	mov	r9, r1
    1de2:	4630      	mov	r0, r6
    1de4:	4639      	mov	r1, r7
    1de6:	f7fe fb87 	bl	4f8 <__aeabi_dmul>
    1dea:	a385      	add	r3, pc, #532	; (adr r3, 2000 <atan+0x2f8>)
    1dec:	e9d3 2300 	ldrd	r2, r3, [r3]
    1df0:	f7fe f9ca 	bl	188 <__aeabi_dsub>
    1df4:	4632      	mov	r2, r6
    1df6:	463b      	mov	r3, r7
    1df8:	f7fe fb7e 	bl	4f8 <__aeabi_dmul>
    1dfc:	a382      	add	r3, pc, #520	; (adr r3, 2008 <atan+0x300>)
    1dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e02:	f7fe f9c1 	bl	188 <__aeabi_dsub>
    1e06:	4632      	mov	r2, r6
    1e08:	463b      	mov	r3, r7
    1e0a:	f7fe fb75 	bl	4f8 <__aeabi_dmul>
    1e0e:	a380      	add	r3, pc, #512	; (adr r3, 2010 <atan+0x308>)
    1e10:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e14:	f7fe f9b8 	bl	188 <__aeabi_dsub>
    1e18:	4632      	mov	r2, r6
    1e1a:	463b      	mov	r3, r7
    1e1c:	f7fe fb6c 	bl	4f8 <__aeabi_dmul>
    1e20:	a37d      	add	r3, pc, #500	; (adr r3, 2018 <atan+0x310>)
    1e22:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e26:	f7fe f9af 	bl	188 <__aeabi_dsub>
    1e2a:	4632      	mov	r2, r6
    1e2c:	463b      	mov	r3, r7
    1e2e:	f7fe fb63 	bl	4f8 <__aeabi_dmul>
    1e32:	f1bb 3fff 	cmp.w	fp, #4294967295
    1e36:	4602      	mov	r2, r0
    1e38:	460b      	mov	r3, r1
    1e3a:	d06e      	beq.n	1f1a <atan+0x212>
    1e3c:	4640      	mov	r0, r8
    1e3e:	4649      	mov	r1, r9
    1e40:	f7fe f9a4 	bl	18c <__adddf3>
    1e44:	4e7e      	ldr	r6, [pc, #504]	; (2040 <atan+0x338>)
    1e46:	9b01      	ldr	r3, [sp, #4]
    1e48:	4622      	mov	r2, r4
    1e4a:	f7fe fb55 	bl	4f8 <__aeabi_dmul>
    1e4e:	4b7d      	ldr	r3, [pc, #500]	; (2044 <atan+0x33c>)
    1e50:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
    1e54:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
    1e58:	449b      	add	fp, r3
    1e5a:	e9db 2300 	ldrd	r2, r3, [fp]
    1e5e:	f7fe f993 	bl	188 <__aeabi_dsub>
    1e62:	4622      	mov	r2, r4
    1e64:	9b01      	ldr	r3, [sp, #4]
    1e66:	f7fe f98f 	bl	188 <__aeabi_dsub>
    1e6a:	460b      	mov	r3, r1
    1e6c:	4602      	mov	r2, r0
    1e6e:	e9d6 0100 	ldrd	r0, r1, [r6]
    1e72:	f7fe f989 	bl	188 <__aeabi_dsub>
    1e76:	f1ba 0f00 	cmp.w	sl, #0
    1e7a:	4604      	mov	r4, r0
    1e7c:	460b      	mov	r3, r1
    1e7e:	f6bf af5b 	bge.w	1d38 <atan+0x30>
    1e82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    1e86:	4620      	mov	r0, r4
    1e88:	4619      	mov	r1, r3
    1e8a:	b003      	add	sp, #12
    1e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e90:	2800      	cmp	r0, #0
    1e92:	f43f af4a 	beq.w	1d2a <atan+0x22>
    1e96:	9b01      	ldr	r3, [sp, #4]
    1e98:	4622      	mov	r2, r4
    1e9a:	4620      	mov	r0, r4
    1e9c:	4619      	mov	r1, r3
    1e9e:	f7fe f975 	bl	18c <__adddf3>
    1ea2:	4604      	mov	r4, r0
    1ea4:	460b      	mov	r3, r1
    1ea6:	4620      	mov	r0, r4
    1ea8:	4619      	mov	r1, r3
    1eaa:	b003      	add	sp, #12
    1eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1eb0:	a35b      	add	r3, pc, #364	; (adr r3, 2020 <atan+0x318>)
    1eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
    1eb6:	f7fe f969 	bl	18c <__adddf3>
    1eba:	4b63      	ldr	r3, [pc, #396]	; (2048 <atan+0x340>)
    1ebc:	2200      	movs	r2, #0
    1ebe:	f7fe fdab 	bl	a18 <__aeabi_dcmpgt>
    1ec2:	2800      	cmp	r0, #0
    1ec4:	f43f af46 	beq.w	1d54 <atan+0x4c>
    1ec8:	4653      	mov	r3, sl
    1eca:	e735      	b.n	1d38 <atan+0x30>
    1ecc:	f00c f99c 	bl	e208 <fabs>
    1ed0:	4b5e      	ldr	r3, [pc, #376]	; (204c <atan+0x344>)
    1ed2:	429e      	cmp	r6, r3
    1ed4:	4604      	mov	r4, r0
    1ed6:	460d      	mov	r5, r1
    1ed8:	dc34      	bgt.n	1f44 <atan+0x23c>
    1eda:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
    1ede:	429e      	cmp	r6, r3
    1ee0:	dc59      	bgt.n	1f96 <atan+0x28e>
    1ee2:	4602      	mov	r2, r0
    1ee4:	460b      	mov	r3, r1
    1ee6:	f7fe f951 	bl	18c <__adddf3>
    1eea:	4b57      	ldr	r3, [pc, #348]	; (2048 <atan+0x340>)
    1eec:	2200      	movs	r2, #0
    1eee:	f7fe f94b 	bl	188 <__aeabi_dsub>
    1ef2:	2200      	movs	r2, #0
    1ef4:	4606      	mov	r6, r0
    1ef6:	460f      	mov	r7, r1
    1ef8:	4620      	mov	r0, r4
    1efa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1efe:	4629      	mov	r1, r5
    1f00:	f7fe f944 	bl	18c <__adddf3>
    1f04:	4602      	mov	r2, r0
    1f06:	460b      	mov	r3, r1
    1f08:	4630      	mov	r0, r6
    1f0a:	4639      	mov	r1, r7
    1f0c:	f7fe fc1e 	bl	74c <__aeabi_ddiv>
    1f10:	f04f 0b00 	mov.w	fp, #0
    1f14:	4604      	mov	r4, r0
    1f16:	9101      	str	r1, [sp, #4]
    1f18:	e71e      	b.n	1d58 <atan+0x50>
    1f1a:	4640      	mov	r0, r8
    1f1c:	4649      	mov	r1, r9
    1f1e:	f7fe f935 	bl	18c <__adddf3>
    1f22:	9b01      	ldr	r3, [sp, #4]
    1f24:	4622      	mov	r2, r4
    1f26:	f7fe fae7 	bl	4f8 <__aeabi_dmul>
    1f2a:	4602      	mov	r2, r0
    1f2c:	460b      	mov	r3, r1
    1f2e:	4620      	mov	r0, r4
    1f30:	9901      	ldr	r1, [sp, #4]
    1f32:	f7fe f929 	bl	188 <__aeabi_dsub>
    1f36:	4604      	mov	r4, r0
    1f38:	460b      	mov	r3, r1
    1f3a:	4620      	mov	r0, r4
    1f3c:	4619      	mov	r1, r3
    1f3e:	b003      	add	sp, #12
    1f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f44:	4b42      	ldr	r3, [pc, #264]	; (2050 <atan+0x348>)
    1f46:	429e      	cmp	r6, r3
    1f48:	da1a      	bge.n	1f80 <atan+0x278>
    1f4a:	4b42      	ldr	r3, [pc, #264]	; (2054 <atan+0x34c>)
    1f4c:	2200      	movs	r2, #0
    1f4e:	f7fe f91b 	bl	188 <__aeabi_dsub>
    1f52:	4b40      	ldr	r3, [pc, #256]	; (2054 <atan+0x34c>)
    1f54:	4606      	mov	r6, r0
    1f56:	460f      	mov	r7, r1
    1f58:	2200      	movs	r2, #0
    1f5a:	4620      	mov	r0, r4
    1f5c:	4629      	mov	r1, r5
    1f5e:	f7fe facb 	bl	4f8 <__aeabi_dmul>
    1f62:	4b39      	ldr	r3, [pc, #228]	; (2048 <atan+0x340>)
    1f64:	2200      	movs	r2, #0
    1f66:	f7fe f911 	bl	18c <__adddf3>
    1f6a:	4602      	mov	r2, r0
    1f6c:	460b      	mov	r3, r1
    1f6e:	4630      	mov	r0, r6
    1f70:	4639      	mov	r1, r7
    1f72:	f7fe fbeb 	bl	74c <__aeabi_ddiv>
    1f76:	f04f 0b02 	mov.w	fp, #2
    1f7a:	4604      	mov	r4, r0
    1f7c:	9101      	str	r1, [sp, #4]
    1f7e:	e6eb      	b.n	1d58 <atan+0x50>
    1f80:	4602      	mov	r2, r0
    1f82:	460b      	mov	r3, r1
    1f84:	2000      	movs	r0, #0
    1f86:	4934      	ldr	r1, [pc, #208]	; (2058 <atan+0x350>)
    1f88:	f7fe fbe0 	bl	74c <__aeabi_ddiv>
    1f8c:	f04f 0b03 	mov.w	fp, #3
    1f90:	4604      	mov	r4, r0
    1f92:	9101      	str	r1, [sp, #4]
    1f94:	e6e0      	b.n	1d58 <atan+0x50>
    1f96:	4b2c      	ldr	r3, [pc, #176]	; (2048 <atan+0x340>)
    1f98:	2200      	movs	r2, #0
    1f9a:	f7fe f8f5 	bl	188 <__aeabi_dsub>
    1f9e:	4b2a      	ldr	r3, [pc, #168]	; (2048 <atan+0x340>)
    1fa0:	4606      	mov	r6, r0
    1fa2:	460f      	mov	r7, r1
    1fa4:	4620      	mov	r0, r4
    1fa6:	2200      	movs	r2, #0
    1fa8:	4629      	mov	r1, r5
    1faa:	f7fe f8ef 	bl	18c <__adddf3>
    1fae:	4602      	mov	r2, r0
    1fb0:	460b      	mov	r3, r1
    1fb2:	4630      	mov	r0, r6
    1fb4:	4639      	mov	r1, r7
    1fb6:	f7fe fbc9 	bl	74c <__aeabi_ddiv>
    1fba:	f04f 0b01 	mov.w	fp, #1
    1fbe:	4604      	mov	r4, r0
    1fc0:	9101      	str	r1, [sp, #4]
    1fc2:	e6c9      	b.n	1d58 <atan+0x50>
    1fc4:	f3af 8000 	nop.w
    1fc8:	e322da11 	.word	0xe322da11
    1fcc:	3f90ad3a 	.word	0x3f90ad3a
    1fd0:	24760deb 	.word	0x24760deb
    1fd4:	3fa97b4b 	.word	0x3fa97b4b
    1fd8:	a0d03d51 	.word	0xa0d03d51
    1fdc:	3fb10d66 	.word	0x3fb10d66
    1fe0:	c54c206e 	.word	0xc54c206e
    1fe4:	3fb745cd 	.word	0x3fb745cd
    1fe8:	920083ff 	.word	0x920083ff
    1fec:	3fc24924 	.word	0x3fc24924
    1ff0:	5555550d 	.word	0x5555550d
    1ff4:	3fd55555 	.word	0x3fd55555
    1ff8:	2c6a6c2f 	.word	0x2c6a6c2f
    1ffc:	bfa2b444 	.word	0xbfa2b444
    2000:	52defd9a 	.word	0x52defd9a
    2004:	3fadde2d 	.word	0x3fadde2d
    2008:	af749a6d 	.word	0xaf749a6d
    200c:	3fb3b0f2 	.word	0x3fb3b0f2
    2010:	fe231671 	.word	0xfe231671
    2014:	3fbc71c6 	.word	0x3fbc71c6
    2018:	9998ebc4 	.word	0x9998ebc4
    201c:	3fc99999 	.word	0x3fc99999
    2020:	8800759c 	.word	0x8800759c
    2024:	7e37e43c 	.word	0x7e37e43c
    2028:	440fffff 	.word	0x440fffff
    202c:	7ff00000 	.word	0x7ff00000
    2030:	3ff921fb 	.word	0x3ff921fb
    2034:	bff921fb 	.word	0xbff921fb
    2038:	54442d18 	.word	0x54442d18
    203c:	3fdbffff 	.word	0x3fdbffff
    2040:	00013188 	.word	0x00013188
    2044:	000131a8 	.word	0x000131a8
    2048:	3ff00000 	.word	0x3ff00000
    204c:	3ff2ffff 	.word	0x3ff2ffff
    2050:	40038000 	.word	0x40038000
    2054:	3ff80000 	.word	0x3ff80000
    2058:	bff00000 	.word	0xbff00000
    205c:	00000000 	.word	0x00000000

00002060 <_dtoa_r>:
    2060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2064:	6a44      	ldr	r4, [r0, #36]	; 0x24
    2066:	b099      	sub	sp, #100	; 0x64
    2068:	4616      	mov	r6, r2
    206a:	461f      	mov	r7, r3
    206c:	e9cd 6704 	strd	r6, r7, [sp, #16]
    2070:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    2074:	4605      	mov	r5, r0
    2076:	b93c      	cbnz	r4, 2088 <_dtoa_r+0x28>
    2078:	2010      	movs	r0, #16
    207a:	f00c f8d1 	bl	e220 <malloc>
    207e:	e9c0 4401 	strd	r4, r4, [r0, #4]
    2082:	6268      	str	r0, [r5, #36]	; 0x24
    2084:	6004      	str	r4, [r0, #0]
    2086:	60c4      	str	r4, [r0, #12]
    2088:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    208a:	6819      	ldr	r1, [r3, #0]
    208c:	b151      	cbz	r1, 20a4 <_dtoa_r+0x44>
    208e:	685a      	ldr	r2, [r3, #4]
    2090:	604a      	str	r2, [r1, #4]
    2092:	2301      	movs	r3, #1
    2094:	4093      	lsls	r3, r2
    2096:	608b      	str	r3, [r1, #8]
    2098:	4628      	mov	r0, r5
    209a:	f010 fb92 	bl	127c2 <_Bfree>
    209e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    20a0:	2200      	movs	r2, #0
    20a2:	601a      	str	r2, [r3, #0]
    20a4:	1e3b      	subs	r3, r7, #0
    20a6:	bfb9      	ittee	lt
    20a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    20ac:	9305      	strlt	r3, [sp, #20]
    20ae:	2300      	movge	r3, #0
    20b0:	f8c8 3000 	strge.w	r3, [r8]
    20b4:	f8dd 9014 	ldr.w	r9, [sp, #20]
    20b8:	4ba7      	ldr	r3, [pc, #668]	; (2358 <_dtoa_r+0x2f8>)
    20ba:	bfbc      	itt	lt
    20bc:	2201      	movlt	r2, #1
    20be:	f8c8 2000 	strlt.w	r2, [r8]
    20c2:	ea33 0309 	bics.w	r3, r3, r9
    20c6:	d119      	bne.n	20fc <_dtoa_r+0x9c>
    20c8:	9a24      	ldr	r2, [sp, #144]	; 0x90
    20ca:	f242 730f 	movw	r3, #9999	; 0x270f
    20ce:	6013      	str	r3, [r2, #0]
    20d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
    20d4:	4333      	orrs	r3, r6
    20d6:	f000 856d 	beq.w	2bb4 <_dtoa_r+0xb54>
    20da:	9b26      	ldr	r3, [sp, #152]	; 0x98
    20dc:	b953      	cbnz	r3, 20f4 <_dtoa_r+0x94>
    20de:	4b9f      	ldr	r3, [pc, #636]	; (235c <_dtoa_r+0x2fc>)
    20e0:	e023      	b.n	212a <_dtoa_r+0xca>
    20e2:	4b9f      	ldr	r3, [pc, #636]	; (2360 <_dtoa_r+0x300>)
    20e4:	9303      	str	r3, [sp, #12]
    20e6:	3308      	adds	r3, #8
    20e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    20ea:	6013      	str	r3, [r2, #0]
    20ec:	9803      	ldr	r0, [sp, #12]
    20ee:	b019      	add	sp, #100	; 0x64
    20f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20f4:	4b99      	ldr	r3, [pc, #612]	; (235c <_dtoa_r+0x2fc>)
    20f6:	9303      	str	r3, [sp, #12]
    20f8:	3303      	adds	r3, #3
    20fa:	e7f5      	b.n	20e8 <_dtoa_r+0x88>
    20fc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    2100:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    2104:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    2108:	2200      	movs	r2, #0
    210a:	2300      	movs	r3, #0
    210c:	f7fe fc5c 	bl	9c8 <__aeabi_dcmpeq>
    2110:	4680      	mov	r8, r0
    2112:	b160      	cbz	r0, 212e <_dtoa_r+0xce>
    2114:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2116:	2301      	movs	r3, #1
    2118:	6013      	str	r3, [r2, #0]
    211a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    211c:	2b00      	cmp	r3, #0
    211e:	f000 8546 	beq.w	2bae <_dtoa_r+0xb4e>
    2122:	4b90      	ldr	r3, [pc, #576]	; (2364 <_dtoa_r+0x304>)
    2124:	9a26      	ldr	r2, [sp, #152]	; 0x98
    2126:	6013      	str	r3, [r2, #0]
    2128:	3b01      	subs	r3, #1
    212a:	9303      	str	r3, [sp, #12]
    212c:	e7de      	b.n	20ec <_dtoa_r+0x8c>
    212e:	ab16      	add	r3, sp, #88	; 0x58
    2130:	9301      	str	r3, [sp, #4]
    2132:	ab17      	add	r3, sp, #92	; 0x5c
    2134:	9300      	str	r3, [sp, #0]
    2136:	4628      	mov	r0, r5
    2138:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    213c:	f010 fd79 	bl	12c32 <__d2b>
    2140:	f3c9 540a 	ubfx	r4, r9, #20, #11
    2144:	4683      	mov	fp, r0
    2146:	2c00      	cmp	r4, #0
    2148:	d07e      	beq.n	2248 <_dtoa_r+0x1e8>
    214a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    214c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    2150:	f3c3 0313 	ubfx	r3, r3, #0, #20
    2154:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    2158:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    215c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    2160:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    2164:	4b80      	ldr	r3, [pc, #512]	; (2368 <_dtoa_r+0x308>)
    2166:	2200      	movs	r2, #0
    2168:	f7fe f80e 	bl	188 <__aeabi_dsub>
    216c:	a374      	add	r3, pc, #464	; (adr r3, 2340 <_dtoa_r+0x2e0>)
    216e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2172:	f7fe f9c1 	bl	4f8 <__aeabi_dmul>
    2176:	a374      	add	r3, pc, #464	; (adr r3, 2348 <_dtoa_r+0x2e8>)
    2178:	e9d3 2300 	ldrd	r2, r3, [r3]
    217c:	f7fe f806 	bl	18c <__adddf3>
    2180:	4606      	mov	r6, r0
    2182:	4620      	mov	r0, r4
    2184:	460f      	mov	r7, r1
    2186:	f7fe f94d 	bl	424 <__aeabi_i2d>
    218a:	a371      	add	r3, pc, #452	; (adr r3, 2350 <_dtoa_r+0x2f0>)
    218c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2190:	f7fe f9b2 	bl	4f8 <__aeabi_dmul>
    2194:	4602      	mov	r2, r0
    2196:	460b      	mov	r3, r1
    2198:	4630      	mov	r0, r6
    219a:	4639      	mov	r1, r7
    219c:	f7fd fff6 	bl	18c <__adddf3>
    21a0:	4606      	mov	r6, r0
    21a2:	460f      	mov	r7, r1
    21a4:	f7ff f91c 	bl	13e0 <__aeabi_d2iz>
    21a8:	2200      	movs	r2, #0
    21aa:	4682      	mov	sl, r0
    21ac:	2300      	movs	r3, #0
    21ae:	4630      	mov	r0, r6
    21b0:	4639      	mov	r1, r7
    21b2:	f7fe fc13 	bl	9dc <__aeabi_dcmplt>
    21b6:	b148      	cbz	r0, 21cc <_dtoa_r+0x16c>
    21b8:	4650      	mov	r0, sl
    21ba:	f7fe f933 	bl	424 <__aeabi_i2d>
    21be:	4632      	mov	r2, r6
    21c0:	463b      	mov	r3, r7
    21c2:	f7fe fc01 	bl	9c8 <__aeabi_dcmpeq>
    21c6:	b908      	cbnz	r0, 21cc <_dtoa_r+0x16c>
    21c8:	f10a 3aff 	add.w	sl, sl, #4294967295
    21cc:	f1ba 0f16 	cmp.w	sl, #22
    21d0:	d857      	bhi.n	2282 <_dtoa_r+0x222>
    21d2:	4b66      	ldr	r3, [pc, #408]	; (236c <_dtoa_r+0x30c>)
    21d4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    21d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    21dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    21e0:	f7fe fbfc 	bl	9dc <__aeabi_dcmplt>
    21e4:	2800      	cmp	r0, #0
    21e6:	d04e      	beq.n	2286 <_dtoa_r+0x226>
    21e8:	f10a 3aff 	add.w	sl, sl, #4294967295
    21ec:	2300      	movs	r3, #0
    21ee:	930f      	str	r3, [sp, #60]	; 0x3c
    21f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    21f2:	1b1c      	subs	r4, r3, r4
    21f4:	1e63      	subs	r3, r4, #1
    21f6:	9309      	str	r3, [sp, #36]	; 0x24
    21f8:	bf45      	ittet	mi
    21fa:	f1c4 0301 	rsbmi	r3, r4, #1
    21fe:	9306      	strmi	r3, [sp, #24]
    2200:	2300      	movpl	r3, #0
    2202:	2300      	movmi	r3, #0
    2204:	bf4c      	ite	mi
    2206:	9309      	strmi	r3, [sp, #36]	; 0x24
    2208:	9306      	strpl	r3, [sp, #24]
    220a:	f1ba 0f00 	cmp.w	sl, #0
    220e:	db3c      	blt.n	228a <_dtoa_r+0x22a>
    2210:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2212:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    2216:	4453      	add	r3, sl
    2218:	9309      	str	r3, [sp, #36]	; 0x24
    221a:	2300      	movs	r3, #0
    221c:	930a      	str	r3, [sp, #40]	; 0x28
    221e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2220:	2b09      	cmp	r3, #9
    2222:	f200 80b5 	bhi.w	2390 <_dtoa_r+0x330>
    2226:	2b05      	cmp	r3, #5
    2228:	bfc4      	itt	gt
    222a:	3b04      	subgt	r3, #4
    222c:	9322      	strgt	r3, [sp, #136]	; 0x88
    222e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2230:	f1a3 0302 	sub.w	r3, r3, #2
    2234:	bfcc      	ite	gt
    2236:	2400      	movgt	r4, #0
    2238:	2401      	movle	r4, #1
    223a:	2b03      	cmp	r3, #3
    223c:	f200 80b4 	bhi.w	23a8 <_dtoa_r+0x348>
    2240:	e8df f003 	tbb	[pc, r3]
    2244:	a47a982d 	.word	0xa47a982d
    2248:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
    224c:	441c      	add	r4, r3
    224e:	f204 4332 	addw	r3, r4, #1074	; 0x432
    2252:	2b20      	cmp	r3, #32
    2254:	bfc3      	ittte	gt
    2256:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    225a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
    225e:	fa09 f303 	lslgt.w	r3, r9, r3
    2262:	f1c3 0320 	rsble	r3, r3, #32
    2266:	bfc6      	itte	gt
    2268:	fa26 f000 	lsrgt.w	r0, r6, r0
    226c:	4318      	orrgt	r0, r3
    226e:	fa06 f003 	lslle.w	r0, r6, r3
    2272:	f7fe f8c7 	bl	404 <__aeabi_ui2d>
    2276:	2301      	movs	r3, #1
    2278:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    227c:	3c01      	subs	r4, #1
    227e:	9313      	str	r3, [sp, #76]	; 0x4c
    2280:	e770      	b.n	2164 <_dtoa_r+0x104>
    2282:	2301      	movs	r3, #1
    2284:	e7b3      	b.n	21ee <_dtoa_r+0x18e>
    2286:	900f      	str	r0, [sp, #60]	; 0x3c
    2288:	e7b2      	b.n	21f0 <_dtoa_r+0x190>
    228a:	9b06      	ldr	r3, [sp, #24]
    228c:	eba3 030a 	sub.w	r3, r3, sl
    2290:	9306      	str	r3, [sp, #24]
    2292:	f1ca 0300 	rsb	r3, sl, #0
    2296:	930a      	str	r3, [sp, #40]	; 0x28
    2298:	2300      	movs	r3, #0
    229a:	930e      	str	r3, [sp, #56]	; 0x38
    229c:	e7bf      	b.n	221e <_dtoa_r+0x1be>
    229e:	2300      	movs	r3, #0
    22a0:	930b      	str	r3, [sp, #44]	; 0x2c
    22a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    22a4:	2b00      	cmp	r3, #0
    22a6:	f300 8082 	bgt.w	23ae <_dtoa_r+0x34e>
    22aa:	f04f 0901 	mov.w	r9, #1
    22ae:	f8cd 9020 	str.w	r9, [sp, #32]
    22b2:	464b      	mov	r3, r9
    22b4:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    22b8:	6a6e      	ldr	r6, [r5, #36]	; 0x24
    22ba:	2200      	movs	r2, #0
    22bc:	6072      	str	r2, [r6, #4]
    22be:	2204      	movs	r2, #4
    22c0:	f102 0014 	add.w	r0, r2, #20
    22c4:	4298      	cmp	r0, r3
    22c6:	6871      	ldr	r1, [r6, #4]
    22c8:	d977      	bls.n	23ba <_dtoa_r+0x35a>
    22ca:	4628      	mov	r0, r5
    22cc:	f010 fa45 	bl	1275a <_Balloc>
    22d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    22d2:	6030      	str	r0, [r6, #0]
    22d4:	681b      	ldr	r3, [r3, #0]
    22d6:	9303      	str	r3, [sp, #12]
    22d8:	9b08      	ldr	r3, [sp, #32]
    22da:	2b0e      	cmp	r3, #14
    22dc:	f200 80ee 	bhi.w	24bc <_dtoa_r+0x45c>
    22e0:	2c00      	cmp	r4, #0
    22e2:	f000 80eb 	beq.w	24bc <_dtoa_r+0x45c>
    22e6:	f1ba 0f00 	cmp.w	sl, #0
    22ea:	dd7a      	ble.n	23e2 <_dtoa_r+0x382>
    22ec:	4a1f      	ldr	r2, [pc, #124]	; (236c <_dtoa_r+0x30c>)
    22ee:	f00a 030f 	and.w	r3, sl, #15
    22f2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    22f6:	e9d3 3400 	ldrd	r3, r4, [r3]
    22fa:	f41a 7f80 	tst.w	sl, #256	; 0x100
    22fe:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    2302:	ea4f 142a 	mov.w	r4, sl, asr #4
    2306:	d05c      	beq.n	23c2 <_dtoa_r+0x362>
    2308:	4b19      	ldr	r3, [pc, #100]	; (2370 <_dtoa_r+0x310>)
    230a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    230e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    2312:	f7fe fa1b 	bl	74c <__aeabi_ddiv>
    2316:	e9cd 0104 	strd	r0, r1, [sp, #16]
    231a:	f004 040f 	and.w	r4, r4, #15
    231e:	2703      	movs	r7, #3
    2320:	4e13      	ldr	r6, [pc, #76]	; (2370 <_dtoa_r+0x310>)
    2322:	2c00      	cmp	r4, #0
    2324:	d14f      	bne.n	23c6 <_dtoa_r+0x366>
    2326:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    232a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    232e:	f7fe fa0d 	bl	74c <__aeabi_ddiv>
    2332:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2336:	e06e      	b.n	2416 <_dtoa_r+0x3b6>
    2338:	2301      	movs	r3, #1
    233a:	e7b1      	b.n	22a0 <_dtoa_r+0x240>
    233c:	f3af 8000 	nop.w
    2340:	636f4361 	.word	0x636f4361
    2344:	3fd287a7 	.word	0x3fd287a7
    2348:	8b60c8b3 	.word	0x8b60c8b3
    234c:	3fc68a28 	.word	0x3fc68a28
    2350:	509f79fb 	.word	0x509f79fb
    2354:	3fd34413 	.word	0x3fd34413
    2358:	7ff00000 	.word	0x7ff00000
    235c:	00014d6e 	.word	0x00014d6e
    2360:	00014d65 	.word	0x00014d65
    2364:	000147e9 	.word	0x000147e9
    2368:	3ff80000 	.word	0x3ff80000
    236c:	000131f0 	.word	0x000131f0
    2370:	000131c8 	.word	0x000131c8
    2374:	2300      	movs	r3, #0
    2376:	930b      	str	r3, [sp, #44]	; 0x2c
    2378:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    237a:	eb0a 0903 	add.w	r9, sl, r3
    237e:	f109 0301 	add.w	r3, r9, #1
    2382:	2b01      	cmp	r3, #1
    2384:	9308      	str	r3, [sp, #32]
    2386:	bfb8      	it	lt
    2388:	2301      	movlt	r3, #1
    238a:	e795      	b.n	22b8 <_dtoa_r+0x258>
    238c:	2301      	movs	r3, #1
    238e:	e7f2      	b.n	2376 <_dtoa_r+0x316>
    2390:	2401      	movs	r4, #1
    2392:	2300      	movs	r3, #0
    2394:	9322      	str	r3, [sp, #136]	; 0x88
    2396:	940b      	str	r4, [sp, #44]	; 0x2c
    2398:	f04f 39ff 	mov.w	r9, #4294967295
    239c:	2200      	movs	r2, #0
    239e:	f8cd 9020 	str.w	r9, [sp, #32]
    23a2:	2312      	movs	r3, #18
    23a4:	9223      	str	r2, [sp, #140]	; 0x8c
    23a6:	e787      	b.n	22b8 <_dtoa_r+0x258>
    23a8:	2301      	movs	r3, #1
    23aa:	930b      	str	r3, [sp, #44]	; 0x2c
    23ac:	e7f4      	b.n	2398 <_dtoa_r+0x338>
    23ae:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    23b2:	f8cd 9020 	str.w	r9, [sp, #32]
    23b6:	464b      	mov	r3, r9
    23b8:	e77e      	b.n	22b8 <_dtoa_r+0x258>
    23ba:	3101      	adds	r1, #1
    23bc:	6071      	str	r1, [r6, #4]
    23be:	0052      	lsls	r2, r2, #1
    23c0:	e77e      	b.n	22c0 <_dtoa_r+0x260>
    23c2:	2702      	movs	r7, #2
    23c4:	e7ac      	b.n	2320 <_dtoa_r+0x2c0>
    23c6:	07e1      	lsls	r1, r4, #31
    23c8:	d508      	bpl.n	23dc <_dtoa_r+0x37c>
    23ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    23ce:	e9d6 2300 	ldrd	r2, r3, [r6]
    23d2:	f7fe f891 	bl	4f8 <__aeabi_dmul>
    23d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    23da:	3701      	adds	r7, #1
    23dc:	1064      	asrs	r4, r4, #1
    23de:	3608      	adds	r6, #8
    23e0:	e79f      	b.n	2322 <_dtoa_r+0x2c2>
    23e2:	f000 80a5 	beq.w	2530 <_dtoa_r+0x4d0>
    23e6:	f1ca 0400 	rsb	r4, sl, #0
    23ea:	4ba4      	ldr	r3, [pc, #656]	; (267c <_dtoa_r+0x61c>)
    23ec:	4ea4      	ldr	r6, [pc, #656]	; (2680 <_dtoa_r+0x620>)
    23ee:	f004 020f 	and.w	r2, r4, #15
    23f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    23f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    23fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    23fe:	f7fe f87b 	bl	4f8 <__aeabi_dmul>
    2402:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2406:	1124      	asrs	r4, r4, #4
    2408:	2300      	movs	r3, #0
    240a:	2702      	movs	r7, #2
    240c:	2c00      	cmp	r4, #0
    240e:	f040 8084 	bne.w	251a <_dtoa_r+0x4ba>
    2412:	2b00      	cmp	r3, #0
    2414:	d18d      	bne.n	2332 <_dtoa_r+0x2d2>
    2416:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2418:	2b00      	cmp	r3, #0
    241a:	f000 808b 	beq.w	2534 <_dtoa_r+0x4d4>
    241e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    2422:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    2426:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    242a:	4b96      	ldr	r3, [pc, #600]	; (2684 <_dtoa_r+0x624>)
    242c:	2200      	movs	r2, #0
    242e:	f7fe fad5 	bl	9dc <__aeabi_dcmplt>
    2432:	2800      	cmp	r0, #0
    2434:	d07e      	beq.n	2534 <_dtoa_r+0x4d4>
    2436:	9b08      	ldr	r3, [sp, #32]
    2438:	2b00      	cmp	r3, #0
    243a:	d07b      	beq.n	2534 <_dtoa_r+0x4d4>
    243c:	f1b9 0f00 	cmp.w	r9, #0
    2440:	dd38      	ble.n	24b4 <_dtoa_r+0x454>
    2442:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    2446:	4b90      	ldr	r3, [pc, #576]	; (2688 <_dtoa_r+0x628>)
    2448:	2200      	movs	r2, #0
    244a:	f7fe f855 	bl	4f8 <__aeabi_dmul>
    244e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2452:	f10a 38ff 	add.w	r8, sl, #4294967295
    2456:	3701      	adds	r7, #1
    2458:	464c      	mov	r4, r9
    245a:	4638      	mov	r0, r7
    245c:	f7fd ffe2 	bl	424 <__aeabi_i2d>
    2460:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    2464:	f7fe f848 	bl	4f8 <__aeabi_dmul>
    2468:	4b88      	ldr	r3, [pc, #544]	; (268c <_dtoa_r+0x62c>)
    246a:	2200      	movs	r2, #0
    246c:	f7fd fe8e 	bl	18c <__adddf3>
    2470:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
    2474:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    2478:	9611      	str	r6, [sp, #68]	; 0x44
    247a:	2c00      	cmp	r4, #0
    247c:	d15d      	bne.n	253a <_dtoa_r+0x4da>
    247e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2482:	4b83      	ldr	r3, [pc, #524]	; (2690 <_dtoa_r+0x630>)
    2484:	2200      	movs	r2, #0
    2486:	f7fd fe7f 	bl	188 <__aeabi_dsub>
    248a:	4602      	mov	r2, r0
    248c:	460b      	mov	r3, r1
    248e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2492:	9a10      	ldr	r2, [sp, #64]	; 0x40
    2494:	4633      	mov	r3, r6
    2496:	f7fe fabf 	bl	a18 <__aeabi_dcmpgt>
    249a:	2800      	cmp	r0, #0
    249c:	f040 8297 	bne.w	29ce <_dtoa_r+0x96e>
    24a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    24a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    24a6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    24aa:	f7fe fa97 	bl	9dc <__aeabi_dcmplt>
    24ae:	2800      	cmp	r0, #0
    24b0:	f040 828b 	bne.w	29ca <_dtoa_r+0x96a>
    24b4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    24b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
    24bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    24be:	2b00      	cmp	r3, #0
    24c0:	f2c0 8151 	blt.w	2766 <_dtoa_r+0x706>
    24c4:	f1ba 0f0e 	cmp.w	sl, #14
    24c8:	f300 814d 	bgt.w	2766 <_dtoa_r+0x706>
    24cc:	4b6b      	ldr	r3, [pc, #428]	; (267c <_dtoa_r+0x61c>)
    24ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    24d2:	e9d3 3400 	ldrd	r3, r4, [r3]
    24d6:	e9cd 3406 	strd	r3, r4, [sp, #24]
    24da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    24dc:	2b00      	cmp	r3, #0
    24de:	f280 80db 	bge.w	2698 <_dtoa_r+0x638>
    24e2:	9b08      	ldr	r3, [sp, #32]
    24e4:	2b00      	cmp	r3, #0
    24e6:	f300 80d7 	bgt.w	2698 <_dtoa_r+0x638>
    24ea:	f040 826d 	bne.w	29c8 <_dtoa_r+0x968>
    24ee:	4b68      	ldr	r3, [pc, #416]	; (2690 <_dtoa_r+0x630>)
    24f0:	2200      	movs	r2, #0
    24f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    24f6:	f7fd ffff 	bl	4f8 <__aeabi_dmul>
    24fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    24fe:	f7fe fa81 	bl	a04 <__aeabi_dcmpge>
    2502:	9c08      	ldr	r4, [sp, #32]
    2504:	4626      	mov	r6, r4
    2506:	2800      	cmp	r0, #0
    2508:	f040 8243 	bne.w	2992 <_dtoa_r+0x932>
    250c:	9f03      	ldr	r7, [sp, #12]
    250e:	2331      	movs	r3, #49	; 0x31
    2510:	f807 3b01 	strb.w	r3, [r7], #1
    2514:	f10a 0a01 	add.w	sl, sl, #1
    2518:	e23f      	b.n	299a <_dtoa_r+0x93a>
    251a:	07e2      	lsls	r2, r4, #31
    251c:	d505      	bpl.n	252a <_dtoa_r+0x4ca>
    251e:	e9d6 2300 	ldrd	r2, r3, [r6]
    2522:	f7fd ffe9 	bl	4f8 <__aeabi_dmul>
    2526:	3701      	adds	r7, #1
    2528:	2301      	movs	r3, #1
    252a:	1064      	asrs	r4, r4, #1
    252c:	3608      	adds	r6, #8
    252e:	e76d      	b.n	240c <_dtoa_r+0x3ac>
    2530:	2702      	movs	r7, #2
    2532:	e770      	b.n	2416 <_dtoa_r+0x3b6>
    2534:	9c08      	ldr	r4, [sp, #32]
    2536:	46d0      	mov	r8, sl
    2538:	e78f      	b.n	245a <_dtoa_r+0x3fa>
    253a:	9903      	ldr	r1, [sp, #12]
    253c:	4b4f      	ldr	r3, [pc, #316]	; (267c <_dtoa_r+0x61c>)
    253e:	4421      	add	r1, r4
    2540:	9112      	str	r1, [sp, #72]	; 0x48
    2542:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2544:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    2548:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    254c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    2550:	2900      	cmp	r1, #0
    2552:	d046      	beq.n	25e2 <_dtoa_r+0x582>
    2554:	494f      	ldr	r1, [pc, #316]	; (2694 <_dtoa_r+0x634>)
    2556:	2000      	movs	r0, #0
    2558:	f7fe f8f8 	bl	74c <__aeabi_ddiv>
    255c:	463b      	mov	r3, r7
    255e:	4632      	mov	r2, r6
    2560:	f7fd fe12 	bl	188 <__aeabi_dsub>
    2564:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    2568:	9f03      	ldr	r7, [sp, #12]
    256a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    256e:	f7fe ff37 	bl	13e0 <__aeabi_d2iz>
    2572:	4604      	mov	r4, r0
    2574:	f7fd ff56 	bl	424 <__aeabi_i2d>
    2578:	4602      	mov	r2, r0
    257a:	460b      	mov	r3, r1
    257c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2580:	f7fd fe02 	bl	188 <__aeabi_dsub>
    2584:	3430      	adds	r4, #48	; 0x30
    2586:	4602      	mov	r2, r0
    2588:	460b      	mov	r3, r1
    258a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    258e:	f807 4b01 	strb.w	r4, [r7], #1
    2592:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    2596:	f7fe fa21 	bl	9dc <__aeabi_dcmplt>
    259a:	2800      	cmp	r0, #0
    259c:	d165      	bne.n	266a <_dtoa_r+0x60a>
    259e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    25a2:	4938      	ldr	r1, [pc, #224]	; (2684 <_dtoa_r+0x624>)
    25a4:	2000      	movs	r0, #0
    25a6:	f7fd fdef 	bl	188 <__aeabi_dsub>
    25aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    25ae:	f7fe fa15 	bl	9dc <__aeabi_dcmplt>
    25b2:	2800      	cmp	r0, #0
    25b4:	f040 80b6 	bne.w	2724 <_dtoa_r+0x6c4>
    25b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    25ba:	429f      	cmp	r7, r3
    25bc:	f43f af7a 	beq.w	24b4 <_dtoa_r+0x454>
    25c0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    25c4:	4b30      	ldr	r3, [pc, #192]	; (2688 <_dtoa_r+0x628>)
    25c6:	2200      	movs	r2, #0
    25c8:	f7fd ff96 	bl	4f8 <__aeabi_dmul>
    25cc:	4b2e      	ldr	r3, [pc, #184]	; (2688 <_dtoa_r+0x628>)
    25ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    25d2:	2200      	movs	r2, #0
    25d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    25d8:	f7fd ff8e 	bl	4f8 <__aeabi_dmul>
    25dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
    25e0:	e7c3      	b.n	256a <_dtoa_r+0x50a>
    25e2:	4630      	mov	r0, r6
    25e4:	4639      	mov	r1, r7
    25e6:	f7fd ff87 	bl	4f8 <__aeabi_dmul>
    25ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    25ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
    25f0:	9c03      	ldr	r4, [sp, #12]
    25f2:	9314      	str	r3, [sp, #80]	; 0x50
    25f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    25f8:	f7fe fef2 	bl	13e0 <__aeabi_d2iz>
    25fc:	9015      	str	r0, [sp, #84]	; 0x54
    25fe:	f7fd ff11 	bl	424 <__aeabi_i2d>
    2602:	4602      	mov	r2, r0
    2604:	460b      	mov	r3, r1
    2606:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    260a:	f7fd fdbd 	bl	188 <__aeabi_dsub>
    260e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2610:	3330      	adds	r3, #48	; 0x30
    2612:	f804 3b01 	strb.w	r3, [r4], #1
    2616:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2618:	429c      	cmp	r4, r3
    261a:	4606      	mov	r6, r0
    261c:	460f      	mov	r7, r1
    261e:	f04f 0200 	mov.w	r2, #0
    2622:	d124      	bne.n	266e <_dtoa_r+0x60e>
    2624:	4b1b      	ldr	r3, [pc, #108]	; (2694 <_dtoa_r+0x634>)
    2626:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    262a:	f7fd fdaf 	bl	18c <__adddf3>
    262e:	4602      	mov	r2, r0
    2630:	460b      	mov	r3, r1
    2632:	4630      	mov	r0, r6
    2634:	4639      	mov	r1, r7
    2636:	f7fe f9ef 	bl	a18 <__aeabi_dcmpgt>
    263a:	2800      	cmp	r0, #0
    263c:	d171      	bne.n	2722 <_dtoa_r+0x6c2>
    263e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    2642:	4914      	ldr	r1, [pc, #80]	; (2694 <_dtoa_r+0x634>)
    2644:	2000      	movs	r0, #0
    2646:	f7fd fd9f 	bl	188 <__aeabi_dsub>
    264a:	4602      	mov	r2, r0
    264c:	460b      	mov	r3, r1
    264e:	4630      	mov	r0, r6
    2650:	4639      	mov	r1, r7
    2652:	f7fe f9c3 	bl	9dc <__aeabi_dcmplt>
    2656:	2800      	cmp	r0, #0
    2658:	f43f af2c 	beq.w	24b4 <_dtoa_r+0x454>
    265c:	9f14      	ldr	r7, [sp, #80]	; 0x50
    265e:	1e7b      	subs	r3, r7, #1
    2660:	9314      	str	r3, [sp, #80]	; 0x50
    2662:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    2666:	2b30      	cmp	r3, #48	; 0x30
    2668:	d0f8      	beq.n	265c <_dtoa_r+0x5fc>
    266a:	46c2      	mov	sl, r8
    266c:	e049      	b.n	2702 <_dtoa_r+0x6a2>
    266e:	4b06      	ldr	r3, [pc, #24]	; (2688 <_dtoa_r+0x628>)
    2670:	f7fd ff42 	bl	4f8 <__aeabi_dmul>
    2674:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2678:	e7bc      	b.n	25f4 <_dtoa_r+0x594>
    267a:	bf00      	nop
    267c:	000131f0 	.word	0x000131f0
    2680:	000131c8 	.word	0x000131c8
    2684:	3ff00000 	.word	0x3ff00000
    2688:	40240000 	.word	0x40240000
    268c:	401c0000 	.word	0x401c0000
    2690:	40140000 	.word	0x40140000
    2694:	3fe00000 	.word	0x3fe00000
    2698:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    269c:	9f03      	ldr	r7, [sp, #12]
    269e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    26a2:	4640      	mov	r0, r8
    26a4:	4649      	mov	r1, r9
    26a6:	f7fe f851 	bl	74c <__aeabi_ddiv>
    26aa:	f7fe fe99 	bl	13e0 <__aeabi_d2iz>
    26ae:	4604      	mov	r4, r0
    26b0:	f7fd feb8 	bl	424 <__aeabi_i2d>
    26b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    26b8:	f7fd ff1e 	bl	4f8 <__aeabi_dmul>
    26bc:	f104 0630 	add.w	r6, r4, #48	; 0x30
    26c0:	460b      	mov	r3, r1
    26c2:	4602      	mov	r2, r0
    26c4:	4649      	mov	r1, r9
    26c6:	4640      	mov	r0, r8
    26c8:	f7fd fd5e 	bl	188 <__aeabi_dsub>
    26cc:	f807 6b01 	strb.w	r6, [r7], #1
    26d0:	9e03      	ldr	r6, [sp, #12]
    26d2:	9b08      	ldr	r3, [sp, #32]
    26d4:	1bbe      	subs	r6, r7, r6
    26d6:	42b3      	cmp	r3, r6
    26d8:	d138      	bne.n	274c <_dtoa_r+0x6ec>
    26da:	4602      	mov	r2, r0
    26dc:	460b      	mov	r3, r1
    26de:	f7fd fd55 	bl	18c <__adddf3>
    26e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    26e6:	4680      	mov	r8, r0
    26e8:	4689      	mov	r9, r1
    26ea:	f7fe f995 	bl	a18 <__aeabi_dcmpgt>
    26ee:	bb58      	cbnz	r0, 2748 <_dtoa_r+0x6e8>
    26f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    26f4:	4640      	mov	r0, r8
    26f6:	4649      	mov	r1, r9
    26f8:	f7fe f966 	bl	9c8 <__aeabi_dcmpeq>
    26fc:	b108      	cbz	r0, 2702 <_dtoa_r+0x6a2>
    26fe:	07e1      	lsls	r1, r4, #31
    2700:	d422      	bmi.n	2748 <_dtoa_r+0x6e8>
    2702:	4628      	mov	r0, r5
    2704:	4659      	mov	r1, fp
    2706:	f010 f85c 	bl	127c2 <_Bfree>
    270a:	2300      	movs	r3, #0
    270c:	703b      	strb	r3, [r7, #0]
    270e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    2710:	f10a 0001 	add.w	r0, sl, #1
    2714:	6018      	str	r0, [r3, #0]
    2716:	9b26      	ldr	r3, [sp, #152]	; 0x98
    2718:	2b00      	cmp	r3, #0
    271a:	f43f ace7 	beq.w	20ec <_dtoa_r+0x8c>
    271e:	601f      	str	r7, [r3, #0]
    2720:	e4e4      	b.n	20ec <_dtoa_r+0x8c>
    2722:	4627      	mov	r7, r4
    2724:	463b      	mov	r3, r7
    2726:	461f      	mov	r7, r3
    2728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    272c:	2a39      	cmp	r2, #57	; 0x39
    272e:	d107      	bne.n	2740 <_dtoa_r+0x6e0>
    2730:	9a03      	ldr	r2, [sp, #12]
    2732:	429a      	cmp	r2, r3
    2734:	d1f7      	bne.n	2726 <_dtoa_r+0x6c6>
    2736:	9903      	ldr	r1, [sp, #12]
    2738:	2230      	movs	r2, #48	; 0x30
    273a:	f108 0801 	add.w	r8, r8, #1
    273e:	700a      	strb	r2, [r1, #0]
    2740:	781a      	ldrb	r2, [r3, #0]
    2742:	3201      	adds	r2, #1
    2744:	701a      	strb	r2, [r3, #0]
    2746:	e790      	b.n	266a <_dtoa_r+0x60a>
    2748:	46d0      	mov	r8, sl
    274a:	e7eb      	b.n	2724 <_dtoa_r+0x6c4>
    274c:	4ba1      	ldr	r3, [pc, #644]	; (29d4 <_dtoa_r+0x974>)
    274e:	2200      	movs	r2, #0
    2750:	f7fd fed2 	bl	4f8 <__aeabi_dmul>
    2754:	2200      	movs	r2, #0
    2756:	2300      	movs	r3, #0
    2758:	4680      	mov	r8, r0
    275a:	4689      	mov	r9, r1
    275c:	f7fe f934 	bl	9c8 <__aeabi_dcmpeq>
    2760:	2800      	cmp	r0, #0
    2762:	d09c      	beq.n	269e <_dtoa_r+0x63e>
    2764:	e7cd      	b.n	2702 <_dtoa_r+0x6a2>
    2766:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2768:	2a00      	cmp	r2, #0
    276a:	f000 80cd 	beq.w	2908 <_dtoa_r+0x8a8>
    276e:	9a22      	ldr	r2, [sp, #136]	; 0x88
    2770:	2a01      	cmp	r2, #1
    2772:	f300 80af 	bgt.w	28d4 <_dtoa_r+0x874>
    2776:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    2778:	2a00      	cmp	r2, #0
    277a:	f000 80a7 	beq.w	28cc <_dtoa_r+0x86c>
    277e:	f203 4333 	addw	r3, r3, #1075	; 0x433
    2782:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    2784:	9f06      	ldr	r7, [sp, #24]
    2786:	9a06      	ldr	r2, [sp, #24]
    2788:	441a      	add	r2, r3
    278a:	9206      	str	r2, [sp, #24]
    278c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    278e:	2101      	movs	r1, #1
    2790:	441a      	add	r2, r3
    2792:	4628      	mov	r0, r5
    2794:	9209      	str	r2, [sp, #36]	; 0x24
    2796:	f010 f8b7 	bl	12908 <__i2b>
    279a:	4606      	mov	r6, r0
    279c:	2f00      	cmp	r7, #0
    279e:	dd0c      	ble.n	27ba <_dtoa_r+0x75a>
    27a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    27a2:	2b00      	cmp	r3, #0
    27a4:	dd09      	ble.n	27ba <_dtoa_r+0x75a>
    27a6:	42bb      	cmp	r3, r7
    27a8:	9a06      	ldr	r2, [sp, #24]
    27aa:	bfa8      	it	ge
    27ac:	463b      	movge	r3, r7
    27ae:	1ad2      	subs	r2, r2, r3
    27b0:	9206      	str	r2, [sp, #24]
    27b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    27b4:	1aff      	subs	r7, r7, r3
    27b6:	1ad3      	subs	r3, r2, r3
    27b8:	9309      	str	r3, [sp, #36]	; 0x24
    27ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    27bc:	b1f3      	cbz	r3, 27fc <_dtoa_r+0x79c>
    27be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    27c0:	2b00      	cmp	r3, #0
    27c2:	f000 80a5 	beq.w	2910 <_dtoa_r+0x8b0>
    27c6:	2c00      	cmp	r4, #0
    27c8:	dd10      	ble.n	27ec <_dtoa_r+0x78c>
    27ca:	4631      	mov	r1, r6
    27cc:	4622      	mov	r2, r4
    27ce:	4628      	mov	r0, r5
    27d0:	f00c f9a8 	bl	eb24 <__pow5mult>
    27d4:	465a      	mov	r2, fp
    27d6:	4601      	mov	r1, r0
    27d8:	4606      	mov	r6, r0
    27da:	4628      	mov	r0, r5
    27dc:	f010 f89d 	bl	1291a <__multiply>
    27e0:	4659      	mov	r1, fp
    27e2:	4680      	mov	r8, r0
    27e4:	4628      	mov	r0, r5
    27e6:	f00f ffec 	bl	127c2 <_Bfree>
    27ea:	46c3      	mov	fp, r8
    27ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    27ee:	1b1a      	subs	r2, r3, r4
    27f0:	d004      	beq.n	27fc <_dtoa_r+0x79c>
    27f2:	4659      	mov	r1, fp
    27f4:	4628      	mov	r0, r5
    27f6:	f00c f995 	bl	eb24 <__pow5mult>
    27fa:	4683      	mov	fp, r0
    27fc:	2101      	movs	r1, #1
    27fe:	4628      	mov	r0, r5
    2800:	f010 f882 	bl	12908 <__i2b>
    2804:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2806:	2b00      	cmp	r3, #0
    2808:	4604      	mov	r4, r0
    280a:	f340 8083 	ble.w	2914 <_dtoa_r+0x8b4>
    280e:	461a      	mov	r2, r3
    2810:	4601      	mov	r1, r0
    2812:	4628      	mov	r0, r5
    2814:	f00c f986 	bl	eb24 <__pow5mult>
    2818:	9b22      	ldr	r3, [sp, #136]	; 0x88
    281a:	2b01      	cmp	r3, #1
    281c:	4604      	mov	r4, r0
    281e:	dd7c      	ble.n	291a <_dtoa_r+0x8ba>
    2820:	f04f 0800 	mov.w	r8, #0
    2824:	6923      	ldr	r3, [r4, #16]
    2826:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    282a:	6918      	ldr	r0, [r3, #16]
    282c:	f010 f81e 	bl	1286c <__hi0bits>
    2830:	f1c0 0020 	rsb	r0, r0, #32
    2834:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2836:	4418      	add	r0, r3
    2838:	f010 001f 	ands.w	r0, r0, #31
    283c:	f000 808e 	beq.w	295c <_dtoa_r+0x8fc>
    2840:	f1c0 0320 	rsb	r3, r0, #32
    2844:	2b04      	cmp	r3, #4
    2846:	f340 8087 	ble.w	2958 <_dtoa_r+0x8f8>
    284a:	f1c0 001c 	rsb	r0, r0, #28
    284e:	9b06      	ldr	r3, [sp, #24]
    2850:	4403      	add	r3, r0
    2852:	9306      	str	r3, [sp, #24]
    2854:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2856:	4403      	add	r3, r0
    2858:	4407      	add	r7, r0
    285a:	9309      	str	r3, [sp, #36]	; 0x24
    285c:	9b06      	ldr	r3, [sp, #24]
    285e:	2b00      	cmp	r3, #0
    2860:	dd05      	ble.n	286e <_dtoa_r+0x80e>
    2862:	4659      	mov	r1, fp
    2864:	461a      	mov	r2, r3
    2866:	4628      	mov	r0, r5
    2868:	f010 f8f3 	bl	12a52 <__lshift>
    286c:	4683      	mov	fp, r0
    286e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2870:	2b00      	cmp	r3, #0
    2872:	dd05      	ble.n	2880 <_dtoa_r+0x820>
    2874:	4621      	mov	r1, r4
    2876:	461a      	mov	r2, r3
    2878:	4628      	mov	r0, r5
    287a:	f010 f8ea 	bl	12a52 <__lshift>
    287e:	4604      	mov	r4, r0
    2880:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2882:	2b00      	cmp	r3, #0
    2884:	d06c      	beq.n	2960 <_dtoa_r+0x900>
    2886:	4621      	mov	r1, r4
    2888:	4658      	mov	r0, fp
    288a:	f010 f941 	bl	12b10 <__mcmp>
    288e:	2800      	cmp	r0, #0
    2890:	da66      	bge.n	2960 <_dtoa_r+0x900>
    2892:	2300      	movs	r3, #0
    2894:	4659      	mov	r1, fp
    2896:	220a      	movs	r2, #10
    2898:	4628      	mov	r0, r5
    289a:	f00f ffa9 	bl	127f0 <__multadd>
    289e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    28a0:	f10a 3aff 	add.w	sl, sl, #4294967295
    28a4:	4683      	mov	fp, r0
    28a6:	2b00      	cmp	r3, #0
    28a8:	f000 818b 	beq.w	2bc2 <_dtoa_r+0xb62>
    28ac:	4631      	mov	r1, r6
    28ae:	2300      	movs	r3, #0
    28b0:	220a      	movs	r2, #10
    28b2:	4628      	mov	r0, r5
    28b4:	f00f ff9c 	bl	127f0 <__multadd>
    28b8:	f1b9 0f00 	cmp.w	r9, #0
    28bc:	4606      	mov	r6, r0
    28be:	f300 8091 	bgt.w	29e4 <_dtoa_r+0x984>
    28c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    28c4:	2b02      	cmp	r3, #2
    28c6:	f340 808d 	ble.w	29e4 <_dtoa_r+0x984>
    28ca:	e051      	b.n	2970 <_dtoa_r+0x910>
    28cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    28ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    28d2:	e756      	b.n	2782 <_dtoa_r+0x722>
    28d4:	9b08      	ldr	r3, [sp, #32]
    28d6:	1e5c      	subs	r4, r3, #1
    28d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    28da:	42a3      	cmp	r3, r4
    28dc:	bfbf      	itttt	lt
    28de:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    28e0:	940a      	strlt	r4, [sp, #40]	; 0x28
    28e2:	1ae2      	sublt	r2, r4, r3
    28e4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
    28e6:	bfb6      	itet	lt
    28e8:	189b      	addlt	r3, r3, r2
    28ea:	1b1c      	subge	r4, r3, r4
    28ec:	930e      	strlt	r3, [sp, #56]	; 0x38
    28ee:	9b08      	ldr	r3, [sp, #32]
    28f0:	bfb8      	it	lt
    28f2:	2400      	movlt	r4, #0
    28f4:	2b00      	cmp	r3, #0
    28f6:	bfb9      	ittee	lt
    28f8:	9b06      	ldrlt	r3, [sp, #24]
    28fa:	9a08      	ldrlt	r2, [sp, #32]
    28fc:	9f06      	ldrge	r7, [sp, #24]
    28fe:	9b08      	ldrge	r3, [sp, #32]
    2900:	bfbc      	itt	lt
    2902:	1a9f      	sublt	r7, r3, r2
    2904:	2300      	movlt	r3, #0
    2906:	e73e      	b.n	2786 <_dtoa_r+0x726>
    2908:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    290a:	9f06      	ldr	r7, [sp, #24]
    290c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    290e:	e745      	b.n	279c <_dtoa_r+0x73c>
    2910:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2912:	e76e      	b.n	27f2 <_dtoa_r+0x792>
    2914:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2916:	2b01      	cmp	r3, #1
    2918:	dc19      	bgt.n	294e <_dtoa_r+0x8ee>
    291a:	9b04      	ldr	r3, [sp, #16]
    291c:	b9bb      	cbnz	r3, 294e <_dtoa_r+0x8ee>
    291e:	9b05      	ldr	r3, [sp, #20]
    2920:	f3c3 0313 	ubfx	r3, r3, #0, #20
    2924:	b99b      	cbnz	r3, 294e <_dtoa_r+0x8ee>
    2926:	9b05      	ldr	r3, [sp, #20]
    2928:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    292c:	0d1b      	lsrs	r3, r3, #20
    292e:	051b      	lsls	r3, r3, #20
    2930:	b183      	cbz	r3, 2954 <_dtoa_r+0x8f4>
    2932:	9b06      	ldr	r3, [sp, #24]
    2934:	3301      	adds	r3, #1
    2936:	9306      	str	r3, [sp, #24]
    2938:	9b09      	ldr	r3, [sp, #36]	; 0x24
    293a:	3301      	adds	r3, #1
    293c:	9309      	str	r3, [sp, #36]	; 0x24
    293e:	f04f 0801 	mov.w	r8, #1
    2942:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2944:	2b00      	cmp	r3, #0
    2946:	f47f af6d 	bne.w	2824 <_dtoa_r+0x7c4>
    294a:	2001      	movs	r0, #1
    294c:	e772      	b.n	2834 <_dtoa_r+0x7d4>
    294e:	f04f 0800 	mov.w	r8, #0
    2952:	e7f6      	b.n	2942 <_dtoa_r+0x8e2>
    2954:	4698      	mov	r8, r3
    2956:	e7f4      	b.n	2942 <_dtoa_r+0x8e2>
    2958:	d080      	beq.n	285c <_dtoa_r+0x7fc>
    295a:	4618      	mov	r0, r3
    295c:	301c      	adds	r0, #28
    295e:	e776      	b.n	284e <_dtoa_r+0x7ee>
    2960:	9b08      	ldr	r3, [sp, #32]
    2962:	2b00      	cmp	r3, #0
    2964:	dc38      	bgt.n	29d8 <_dtoa_r+0x978>
    2966:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2968:	2b02      	cmp	r3, #2
    296a:	dd35      	ble.n	29d8 <_dtoa_r+0x978>
    296c:	f8dd 9020 	ldr.w	r9, [sp, #32]
    2970:	f1b9 0f00 	cmp.w	r9, #0
    2974:	d10d      	bne.n	2992 <_dtoa_r+0x932>
    2976:	4621      	mov	r1, r4
    2978:	464b      	mov	r3, r9
    297a:	2205      	movs	r2, #5
    297c:	4628      	mov	r0, r5
    297e:	f00f ff37 	bl	127f0 <__multadd>
    2982:	4601      	mov	r1, r0
    2984:	4604      	mov	r4, r0
    2986:	4658      	mov	r0, fp
    2988:	f010 f8c2 	bl	12b10 <__mcmp>
    298c:	2800      	cmp	r0, #0
    298e:	f73f adbd 	bgt.w	250c <_dtoa_r+0x4ac>
    2992:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    2994:	9f03      	ldr	r7, [sp, #12]
    2996:	ea6f 0a03 	mvn.w	sl, r3
    299a:	f04f 0800 	mov.w	r8, #0
    299e:	4621      	mov	r1, r4
    29a0:	4628      	mov	r0, r5
    29a2:	f00f ff0e 	bl	127c2 <_Bfree>
    29a6:	2e00      	cmp	r6, #0
    29a8:	f43f aeab 	beq.w	2702 <_dtoa_r+0x6a2>
    29ac:	f1b8 0f00 	cmp.w	r8, #0
    29b0:	d005      	beq.n	29be <_dtoa_r+0x95e>
    29b2:	45b0      	cmp	r8, r6
    29b4:	d003      	beq.n	29be <_dtoa_r+0x95e>
    29b6:	4641      	mov	r1, r8
    29b8:	4628      	mov	r0, r5
    29ba:	f00f ff02 	bl	127c2 <_Bfree>
    29be:	4631      	mov	r1, r6
    29c0:	4628      	mov	r0, r5
    29c2:	f00f fefe 	bl	127c2 <_Bfree>
    29c6:	e69c      	b.n	2702 <_dtoa_r+0x6a2>
    29c8:	2400      	movs	r4, #0
    29ca:	4626      	mov	r6, r4
    29cc:	e7e1      	b.n	2992 <_dtoa_r+0x932>
    29ce:	46c2      	mov	sl, r8
    29d0:	4626      	mov	r6, r4
    29d2:	e59b      	b.n	250c <_dtoa_r+0x4ac>
    29d4:	40240000 	.word	0x40240000
    29d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    29da:	f8dd 9020 	ldr.w	r9, [sp, #32]
    29de:	2b00      	cmp	r3, #0
    29e0:	f000 80f6 	beq.w	2bd0 <_dtoa_r+0xb70>
    29e4:	2f00      	cmp	r7, #0
    29e6:	dd05      	ble.n	29f4 <_dtoa_r+0x994>
    29e8:	4631      	mov	r1, r6
    29ea:	463a      	mov	r2, r7
    29ec:	4628      	mov	r0, r5
    29ee:	f010 f830 	bl	12a52 <__lshift>
    29f2:	4606      	mov	r6, r0
    29f4:	f1b8 0f00 	cmp.w	r8, #0
    29f8:	d055      	beq.n	2aa6 <_dtoa_r+0xa46>
    29fa:	6871      	ldr	r1, [r6, #4]
    29fc:	4628      	mov	r0, r5
    29fe:	f00f feac 	bl	1275a <_Balloc>
    2a02:	6932      	ldr	r2, [r6, #16]
    2a04:	3202      	adds	r2, #2
    2a06:	4607      	mov	r7, r0
    2a08:	0092      	lsls	r2, r2, #2
    2a0a:	f106 010c 	add.w	r1, r6, #12
    2a0e:	300c      	adds	r0, #12
    2a10:	f00f fc6a 	bl	122e8 <memcpy>
    2a14:	2201      	movs	r2, #1
    2a16:	4639      	mov	r1, r7
    2a18:	4628      	mov	r0, r5
    2a1a:	f010 f81a 	bl	12a52 <__lshift>
    2a1e:	9b03      	ldr	r3, [sp, #12]
    2a20:	3301      	adds	r3, #1
    2a22:	9308      	str	r3, [sp, #32]
    2a24:	9b03      	ldr	r3, [sp, #12]
    2a26:	444b      	add	r3, r9
    2a28:	930a      	str	r3, [sp, #40]	; 0x28
    2a2a:	9b04      	ldr	r3, [sp, #16]
    2a2c:	f003 0301 	and.w	r3, r3, #1
    2a30:	46b0      	mov	r8, r6
    2a32:	9309      	str	r3, [sp, #36]	; 0x24
    2a34:	4606      	mov	r6, r0
    2a36:	9b08      	ldr	r3, [sp, #32]
    2a38:	4621      	mov	r1, r4
    2a3a:	3b01      	subs	r3, #1
    2a3c:	4658      	mov	r0, fp
    2a3e:	9304      	str	r3, [sp, #16]
    2a40:	f00f fe00 	bl	12644 <quorem>
    2a44:	4603      	mov	r3, r0
    2a46:	3330      	adds	r3, #48	; 0x30
    2a48:	9006      	str	r0, [sp, #24]
    2a4a:	4641      	mov	r1, r8
    2a4c:	4658      	mov	r0, fp
    2a4e:	930b      	str	r3, [sp, #44]	; 0x2c
    2a50:	f010 f85e 	bl	12b10 <__mcmp>
    2a54:	4632      	mov	r2, r6
    2a56:	4681      	mov	r9, r0
    2a58:	4621      	mov	r1, r4
    2a5a:	4628      	mov	r0, r5
    2a5c:	f010 f873 	bl	12b46 <__mdiff>
    2a60:	68c2      	ldr	r2, [r0, #12]
    2a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2a64:	4607      	mov	r7, r0
    2a66:	bb02      	cbnz	r2, 2aaa <_dtoa_r+0xa4a>
    2a68:	4601      	mov	r1, r0
    2a6a:	4658      	mov	r0, fp
    2a6c:	f010 f850 	bl	12b10 <__mcmp>
    2a70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2a72:	4602      	mov	r2, r0
    2a74:	4639      	mov	r1, r7
    2a76:	4628      	mov	r0, r5
    2a78:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
    2a7c:	f00f fea1 	bl	127c2 <_Bfree>
    2a80:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2a82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2a84:	9f08      	ldr	r7, [sp, #32]
    2a86:	ea43 0102 	orr.w	r1, r3, r2
    2a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2a8c:	430b      	orrs	r3, r1
    2a8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2a90:	d10d      	bne.n	2aae <_dtoa_r+0xa4e>
    2a92:	2b39      	cmp	r3, #57	; 0x39
    2a94:	d029      	beq.n	2aea <_dtoa_r+0xa8a>
    2a96:	f1b9 0f00 	cmp.w	r9, #0
    2a9a:	dd01      	ble.n	2aa0 <_dtoa_r+0xa40>
    2a9c:	9b06      	ldr	r3, [sp, #24]
    2a9e:	3331      	adds	r3, #49	; 0x31
    2aa0:	9a04      	ldr	r2, [sp, #16]
    2aa2:	7013      	strb	r3, [r2, #0]
    2aa4:	e77b      	b.n	299e <_dtoa_r+0x93e>
    2aa6:	4630      	mov	r0, r6
    2aa8:	e7b9      	b.n	2a1e <_dtoa_r+0x9be>
    2aaa:	2201      	movs	r2, #1
    2aac:	e7e2      	b.n	2a74 <_dtoa_r+0xa14>
    2aae:	f1b9 0f00 	cmp.w	r9, #0
    2ab2:	db06      	blt.n	2ac2 <_dtoa_r+0xa62>
    2ab4:	9922      	ldr	r1, [sp, #136]	; 0x88
    2ab6:	ea41 0909 	orr.w	r9, r1, r9
    2aba:	9909      	ldr	r1, [sp, #36]	; 0x24
    2abc:	ea59 0101 	orrs.w	r1, r9, r1
    2ac0:	d120      	bne.n	2b04 <_dtoa_r+0xaa4>
    2ac2:	2a00      	cmp	r2, #0
    2ac4:	ddec      	ble.n	2aa0 <_dtoa_r+0xa40>
    2ac6:	4659      	mov	r1, fp
    2ac8:	2201      	movs	r2, #1
    2aca:	4628      	mov	r0, r5
    2acc:	9308      	str	r3, [sp, #32]
    2ace:	f00f ffc0 	bl	12a52 <__lshift>
    2ad2:	4621      	mov	r1, r4
    2ad4:	4683      	mov	fp, r0
    2ad6:	f010 f81b 	bl	12b10 <__mcmp>
    2ada:	2800      	cmp	r0, #0
    2adc:	9b08      	ldr	r3, [sp, #32]
    2ade:	dc02      	bgt.n	2ae6 <_dtoa_r+0xa86>
    2ae0:	d1de      	bne.n	2aa0 <_dtoa_r+0xa40>
    2ae2:	07da      	lsls	r2, r3, #31
    2ae4:	d5dc      	bpl.n	2aa0 <_dtoa_r+0xa40>
    2ae6:	2b39      	cmp	r3, #57	; 0x39
    2ae8:	d1d8      	bne.n	2a9c <_dtoa_r+0xa3c>
    2aea:	9a04      	ldr	r2, [sp, #16]
    2aec:	2339      	movs	r3, #57	; 0x39
    2aee:	7013      	strb	r3, [r2, #0]
    2af0:	463b      	mov	r3, r7
    2af2:	461f      	mov	r7, r3
    2af4:	3b01      	subs	r3, #1
    2af6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    2afa:	2a39      	cmp	r2, #57	; 0x39
    2afc:	d050      	beq.n	2ba0 <_dtoa_r+0xb40>
    2afe:	3201      	adds	r2, #1
    2b00:	701a      	strb	r2, [r3, #0]
    2b02:	e74c      	b.n	299e <_dtoa_r+0x93e>
    2b04:	2a00      	cmp	r2, #0
    2b06:	dd03      	ble.n	2b10 <_dtoa_r+0xab0>
    2b08:	2b39      	cmp	r3, #57	; 0x39
    2b0a:	d0ee      	beq.n	2aea <_dtoa_r+0xa8a>
    2b0c:	3301      	adds	r3, #1
    2b0e:	e7c7      	b.n	2aa0 <_dtoa_r+0xa40>
    2b10:	9a08      	ldr	r2, [sp, #32]
    2b12:	990a      	ldr	r1, [sp, #40]	; 0x28
    2b14:	f802 3c01 	strb.w	r3, [r2, #-1]
    2b18:	428a      	cmp	r2, r1
    2b1a:	d02a      	beq.n	2b72 <_dtoa_r+0xb12>
    2b1c:	4659      	mov	r1, fp
    2b1e:	2300      	movs	r3, #0
    2b20:	220a      	movs	r2, #10
    2b22:	4628      	mov	r0, r5
    2b24:	f00f fe64 	bl	127f0 <__multadd>
    2b28:	45b0      	cmp	r8, r6
    2b2a:	4683      	mov	fp, r0
    2b2c:	f04f 0300 	mov.w	r3, #0
    2b30:	f04f 020a 	mov.w	r2, #10
    2b34:	4641      	mov	r1, r8
    2b36:	4628      	mov	r0, r5
    2b38:	d107      	bne.n	2b4a <_dtoa_r+0xaea>
    2b3a:	f00f fe59 	bl	127f0 <__multadd>
    2b3e:	4680      	mov	r8, r0
    2b40:	4606      	mov	r6, r0
    2b42:	9b08      	ldr	r3, [sp, #32]
    2b44:	3301      	adds	r3, #1
    2b46:	9308      	str	r3, [sp, #32]
    2b48:	e775      	b.n	2a36 <_dtoa_r+0x9d6>
    2b4a:	f00f fe51 	bl	127f0 <__multadd>
    2b4e:	4631      	mov	r1, r6
    2b50:	4680      	mov	r8, r0
    2b52:	2300      	movs	r3, #0
    2b54:	220a      	movs	r2, #10
    2b56:	4628      	mov	r0, r5
    2b58:	f00f fe4a 	bl	127f0 <__multadd>
    2b5c:	4606      	mov	r6, r0
    2b5e:	e7f0      	b.n	2b42 <_dtoa_r+0xae2>
    2b60:	f1b9 0f00 	cmp.w	r9, #0
    2b64:	9a03      	ldr	r2, [sp, #12]
    2b66:	bfcc      	ite	gt
    2b68:	464f      	movgt	r7, r9
    2b6a:	2701      	movle	r7, #1
    2b6c:	4417      	add	r7, r2
    2b6e:	f04f 0800 	mov.w	r8, #0
    2b72:	4659      	mov	r1, fp
    2b74:	2201      	movs	r2, #1
    2b76:	4628      	mov	r0, r5
    2b78:	9308      	str	r3, [sp, #32]
    2b7a:	f00f ff6a 	bl	12a52 <__lshift>
    2b7e:	4621      	mov	r1, r4
    2b80:	4683      	mov	fp, r0
    2b82:	f00f ffc5 	bl	12b10 <__mcmp>
    2b86:	2800      	cmp	r0, #0
    2b88:	dcb2      	bgt.n	2af0 <_dtoa_r+0xa90>
    2b8a:	d102      	bne.n	2b92 <_dtoa_r+0xb32>
    2b8c:	9b08      	ldr	r3, [sp, #32]
    2b8e:	07db      	lsls	r3, r3, #31
    2b90:	d4ae      	bmi.n	2af0 <_dtoa_r+0xa90>
    2b92:	463b      	mov	r3, r7
    2b94:	461f      	mov	r7, r3
    2b96:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    2b9a:	2a30      	cmp	r2, #48	; 0x30
    2b9c:	d0fa      	beq.n	2b94 <_dtoa_r+0xb34>
    2b9e:	e6fe      	b.n	299e <_dtoa_r+0x93e>
    2ba0:	9a03      	ldr	r2, [sp, #12]
    2ba2:	429a      	cmp	r2, r3
    2ba4:	d1a5      	bne.n	2af2 <_dtoa_r+0xa92>
    2ba6:	f10a 0a01 	add.w	sl, sl, #1
    2baa:	2331      	movs	r3, #49	; 0x31
    2bac:	e779      	b.n	2aa2 <_dtoa_r+0xa42>
    2bae:	4b13      	ldr	r3, [pc, #76]	; (2bfc <_dtoa_r+0xb9c>)
    2bb0:	f7ff babb 	b.w	212a <_dtoa_r+0xca>
    2bb4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    2bb6:	2b00      	cmp	r3, #0
    2bb8:	f47f aa93 	bne.w	20e2 <_dtoa_r+0x82>
    2bbc:	4b10      	ldr	r3, [pc, #64]	; (2c00 <_dtoa_r+0xba0>)
    2bbe:	f7ff bab4 	b.w	212a <_dtoa_r+0xca>
    2bc2:	f1b9 0f00 	cmp.w	r9, #0
    2bc6:	dc03      	bgt.n	2bd0 <_dtoa_r+0xb70>
    2bc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2bca:	2b02      	cmp	r3, #2
    2bcc:	f73f aed0 	bgt.w	2970 <_dtoa_r+0x910>
    2bd0:	9f03      	ldr	r7, [sp, #12]
    2bd2:	4621      	mov	r1, r4
    2bd4:	4658      	mov	r0, fp
    2bd6:	f00f fd35 	bl	12644 <quorem>
    2bda:	f100 0330 	add.w	r3, r0, #48	; 0x30
    2bde:	f807 3b01 	strb.w	r3, [r7], #1
    2be2:	9a03      	ldr	r2, [sp, #12]
    2be4:	1aba      	subs	r2, r7, r2
    2be6:	4591      	cmp	r9, r2
    2be8:	ddba      	ble.n	2b60 <_dtoa_r+0xb00>
    2bea:	4659      	mov	r1, fp
    2bec:	2300      	movs	r3, #0
    2bee:	220a      	movs	r2, #10
    2bf0:	4628      	mov	r0, r5
    2bf2:	f00f fdfd 	bl	127f0 <__multadd>
    2bf6:	4683      	mov	fp, r0
    2bf8:	e7eb      	b.n	2bd2 <_dtoa_r+0xb72>
    2bfa:	bf00      	nop
    2bfc:	000147e8 	.word	0x000147e8
    2c00:	00014d65 	.word	0x00014d65

00002c04 <gpio_pin_set.constprop.0>:
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    2c04:	6843      	ldr	r3, [r0, #4]
    2c06:	681b      	ldr	r3, [r3, #0]
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
    2c08:	b570      	push	{r4, r5, r6, lr}
    2c0a:	460d      	mov	r5, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    2c0c:	0619      	lsls	r1, r3, #24
	const struct gpio_driver_data *const data =
    2c0e:	6906      	ldr	r6, [r0, #16]
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
    2c10:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    2c12:	d40a      	bmi.n	2c2a <gpio_pin_set.constprop.0+0x26>
    2c14:	4914      	ldr	r1, [pc, #80]	; (2c68 <gpio_pin_set.constprop.0+0x64>)
    2c16:	4815      	ldr	r0, [pc, #84]	; (2c6c <gpio_pin_set.constprop.0+0x68>)
    2c18:	f240 42bb 	movw	r2, #1211	; 0x4bb
    2c1c:	f00c fbd3 	bl	f3c6 <printk>
    2c20:	4811      	ldr	r0, [pc, #68]	; (2c68 <gpio_pin_set.constprop.0+0x64>)
    2c22:	f240 41bb 	movw	r1, #1211	; 0x4bb
    2c26:	f00c fc93 	bl	f550 <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    2c2a:	6833      	ldr	r3, [r6, #0]
    2c2c:	061a      	lsls	r2, r3, #24
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    2c2e:	6863      	ldr	r3, [r4, #4]
    2c30:	681b      	ldr	r3, [r3, #0]
    2c32:	bf48      	it	mi
    2c34:	f085 0501 	eormi.w	r5, r5, #1
    2c38:	061b      	lsls	r3, r3, #24
    2c3a:	d40a      	bmi.n	2c52 <gpio_pin_set.constprop.0+0x4e>
    2c3c:	490a      	ldr	r1, [pc, #40]	; (2c68 <gpio_pin_set.constprop.0+0x64>)
    2c3e:	480b      	ldr	r0, [pc, #44]	; (2c6c <gpio_pin_set.constprop.0+0x68>)
    2c40:	f240 4291 	movw	r2, #1169	; 0x491
    2c44:	f00c fbbf 	bl	f3c6 <printk>
    2c48:	4807      	ldr	r0, [pc, #28]	; (2c68 <gpio_pin_set.constprop.0+0x64>)
    2c4a:	f240 4191 	movw	r1, #1169	; 0x491
    2c4e:	f00c fc7f 	bl	f550 <assert_post_action>
	if (value != 0)	{
    2c52:	b135      	cbz	r5, 2c62 <gpio_pin_set.constprop.0+0x5e>
	return api->port_set_bits_raw(port, pins);
    2c54:	68a3      	ldr	r3, [r4, #8]
    2c56:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    2c58:	4620      	mov	r0, r4
    2c5a:	2180      	movs	r1, #128	; 0x80
		value = (value != 0) ? 0 : 1;
	}

	return gpio_pin_set_raw(port, pin, value);
}
    2c5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
    2c60:	4718      	bx	r3
    2c62:	68a3      	ldr	r3, [r4, #8]
    2c64:	691b      	ldr	r3, [r3, #16]
    2c66:	e7f7      	b.n	2c58 <gpio_pin_set.constprop.0+0x54>
    2c68:	000138da 	.word	0x000138da
    2c6c:	00013904 	.word	0x00013904

00002c70 <z_impl_gpio_pin_configure.constprop.0>:
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    2c70:	6843      	ldr	r3, [r0, #4]
static inline int z_impl_gpio_pin_configure(const struct device *port,
    2c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    2c76:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_api *api =
    2c78:	f8d0 8008 	ldr.w	r8, [r0, #8]
	struct gpio_driver_data *data =
    2c7c:	6907      	ldr	r7, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    2c7e:	2601      	movs	r6, #1
    2c80:	408e      	lsls	r6, r1
    2c82:	421e      	tst	r6, r3
static inline int z_impl_gpio_pin_configure(const struct device *port,
    2c84:	4604      	mov	r4, r0
    2c86:	460d      	mov	r5, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    2c88:	d10a      	bne.n	2ca0 <z_impl_gpio_pin_configure.constprop.0+0x30>
    2c8a:	490b      	ldr	r1, [pc, #44]	; (2cb8 <z_impl_gpio_pin_configure.constprop.0+0x48>)
    2c8c:	480b      	ldr	r0, [pc, #44]	; (2cbc <z_impl_gpio_pin_configure.constprop.0+0x4c>)
    2c8e:	f240 22fd 	movw	r2, #765	; 0x2fd
    2c92:	f00c fb98 	bl	f3c6 <printk>
    2c96:	4808      	ldr	r0, [pc, #32]	; (2cb8 <z_impl_gpio_pin_configure.constprop.0+0x48>)
    2c98:	f240 21fd 	movw	r1, #765	; 0x2fd
    2c9c:	f00c fc58 	bl	f550 <assert_post_action>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    2ca0:	683b      	ldr	r3, [r7, #0]
    2ca2:	431e      	orrs	r6, r3
    2ca4:	603e      	str	r6, [r7, #0]
	return api->pin_configure(port, pin, flags);
    2ca6:	f8d8 3000 	ldr.w	r3, [r8]
    2caa:	4629      	mov	r1, r5
    2cac:	4620      	mov	r0, r4
    2cae:	f240 2201 	movw	r2, #513	; 0x201
}
    2cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
    2cb6:	4718      	bx	r3
    2cb8:	000138da 	.word	0x000138da
    2cbc:	00013904 	.word	0x00013904

00002cc0 <clocks_start>:

	return 0;
}

int clocks_start(void)
{
    2cc0:	b530      	push	{r4, r5, lr}
	int err;
	int res;
	struct onoff_manager *clk_mgr;
	struct onoff_client clk_cli;

	clk_mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    2cc2:	2000      	movs	r0, #0
{
    2cc4:	b085      	sub	sp, #20
	clk_mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    2cc6:	f004 fea5 	bl	7a14 <z_nrf_clock_control_get_onoff>
	if (!clk_mgr) {
    2cca:	4c19      	ldr	r4, [pc, #100]	; (2d30 <clocks_start+0x70>)
    2ccc:	4a19      	ldr	r2, [pc, #100]	; (2d34 <clocks_start+0x74>)
    2cce:	1aa4      	subs	r4, r4, r2
    2cd0:	08e4      	lsrs	r4, r4, #3
    2cd2:	b950      	cbnz	r0, 2cea <clocks_start+0x2a>
		LOG_ERR("Unable to get the Clock manager");
    2cd4:	01a1      	lsls	r1, r4, #6
    2cd6:	4818      	ldr	r0, [pc, #96]	; (2d38 <clocks_start+0x78>)
    2cd8:	f041 0101 	orr.w	r1, r1, #1
    2cdc:	f00c fc66 	bl	f5ac <log_0>
		return -ENXIO;
    2ce0:	f06f 0505 	mvn.w	r5, #5
		}
	} while (err);

	LOG_DBG("HF clock started");
	return 0;
}
    2ce4:	4628      	mov	r0, r5
    2ce6:	b005      	add	sp, #20
    2ce8:	bd30      	pop	{r4, r5, pc}
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2cea:	2300      	movs	r3, #0
    2cec:	9301      	str	r3, [sp, #4]
    2cee:	9303      	str	r3, [sp, #12]
	err = onoff_request(clk_mgr, &clk_cli);
    2cf0:	4669      	mov	r1, sp
    2cf2:	2301      	movs	r3, #1
    2cf4:	9302      	str	r3, [sp, #8]
    2cf6:	f000 fd97 	bl	3828 <onoff_request>
	if (err < 0) {
    2cfa:	1e05      	subs	r5, r0, #0
    2cfc:	da07      	bge.n	2d0e <clocks_start+0x4e>
		LOG_ERR("Clock request failed: %d", err);
    2cfe:	01a2      	lsls	r2, r4, #6
    2d00:	480e      	ldr	r0, [pc, #56]	; (2d3c <clocks_start+0x7c>)
    2d02:	f042 0201 	orr.w	r2, r2, #1
    2d06:	4629      	mov	r1, r5
	LOG_DBG("HF clock started");
    2d08:	f00c fc5d 	bl	f5c6 <log_1>
	return 0;
    2d0c:	e7ea      	b.n	2ce4 <clocks_start+0x24>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    2d0e:	9b02      	ldr	r3, [sp, #8]
	if (sys_notify_get_method(notify) == SYS_NOTIFY_METHOD_COMPLETED) {
    2d10:	079b      	lsls	r3, r3, #30
    2d12:	d1fc      	bne.n	2d0e <clocks_start+0x4e>
		*result = notify->result;
    2d14:	9d03      	ldr	r5, [sp, #12]
		if (!err && res) {
    2d16:	01a2      	lsls	r2, r4, #6
    2d18:	b125      	cbz	r5, 2d24 <clocks_start+0x64>
			LOG_ERR("Clock could not be started: %d", res);
    2d1a:	4809      	ldr	r0, [pc, #36]	; (2d40 <clocks_start+0x80>)
    2d1c:	f042 0201 	orr.w	r2, r2, #1
    2d20:	4629      	mov	r1, r5
    2d22:	e7f1      	b.n	2d08 <clocks_start+0x48>
	LOG_DBG("HF clock started");
    2d24:	4907      	ldr	r1, [pc, #28]	; (2d44 <clocks_start+0x84>)
    2d26:	4808      	ldr	r0, [pc, #32]	; (2d48 <clocks_start+0x88>)
    2d28:	f042 0204 	orr.w	r2, r2, #4
    2d2c:	e7ec      	b.n	2d08 <clocks_start+0x48>
    2d2e:	bf00      	nop
    2d30:	000130a4 	.word	0x000130a4
    2d34:	000130a4 	.word	0x000130a4
    2d38:	0001391c 	.word	0x0001391c
    2d3c:	0001393c 	.word	0x0001393c
    2d40:	00013955 	.word	0x00013955
    2d44:	00013b1f 	.word	0x00013b1f
    2d48:	00013974 	.word	0x00013974

00002d4c <main>:
/*****BMX160 IMU SPI*****/

  

void main(void)
{
    2d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int err;
	int len;
	char* data;
	data = (char*)malloc(64 * sizeof(char));
    2d50:	2040      	movs	r0, #64	; 0x40
{
    2d52:	b099      	sub	sp, #100	; 0x64
	data = (char*)malloc(64 * sizeof(char));
    2d54:	f00b fa64 	bl	e220 <malloc>
    2d58:	4606      	mov	r6, r0

	err = clocks_start();
    2d5a:	f7ff ffb1 	bl	2cc0 <clocks_start>
 	if (err) {
    2d5e:	b938      	cbnz	r0, 2d70 <main+0x24>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    2d60:	48ae      	ldr	r0, [pc, #696]	; (301c <main+0x2d0>)
    2d62:	f008 ff7d 	bl	bc60 <z_impl_device_get_binding>
		return;
	}



	if (device_get_binding("SPI_1") == NULL) {
    2d66:	b930      	cbnz	r0, 2d76 <main+0x2a>
		printk("Could not get %s device\n", "SPI_1");
    2d68:	49ac      	ldr	r1, [pc, #688]	; (301c <main+0x2d0>)
	gpio_pin_configure(bmxIMU_spi.gpio0_dev, bmxIMU_spi.spi_cs_pin, GPIO_OUTPUT | GPIO_ACTIVE_LOW);
	const char* const spiName0 = "SPI_0";
	bmxIMU_spi.spi_dev = device_get_binding(spiName0);

	if (bmxIMU_spi.spi_dev == NULL) {
		printk("Could not get %s device\n", spiName0);
    2d6a:	48ad      	ldr	r0, [pc, #692]	; (3020 <main+0x2d4>)
    2d6c:	f00c fb2b 	bl	f3c6 <printk>

		
    // Sleep and wait for next cycle
	k_sleep(K_MSEC(6.25));
	}
}
    2d70:	b019      	add	sp, #100	; 0x64
    2d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (disk_access_init(disk_pdrv) != 0) {
    2d76:	48ab      	ldr	r0, [pc, #684]	; (3024 <main+0x2d8>)
    2d78:	4cab      	ldr	r4, [pc, #684]	; (3028 <main+0x2dc>)
    2d7a:	f00c fefc 	bl	fb76 <disk_access_init>
    2d7e:	4bab      	ldr	r3, [pc, #684]	; (302c <main+0x2e0>)
    2d80:	1ae4      	subs	r4, r4, r3
    2d82:	08e4      	lsrs	r4, r4, #3
    2d84:	01a4      	lsls	r4, r4, #6
    2d86:	2800      	cmp	r0, #0
    2d88:	d038      	beq.n	2dfc <main+0xb0>
			LOG_ERR("Storage init ERROR!");
    2d8a:	48a9      	ldr	r0, [pc, #676]	; (3030 <main+0x2e4>)
    2d8c:	f044 0101 	orr.w	r1, r4, #1
			LOG_ERR("Unable to get sector size");
    2d90:	f00c fc0c 	bl	f5ac <log_0>
	mp.mnt_point = disk_mount_pt;
    2d94:	4ca7      	ldr	r4, [pc, #668]	; (3034 <main+0x2e8>)
    2d96:	4fa8      	ldr	r7, [pc, #672]	; (3038 <main+0x2ec>)
    2d98:	60e7      	str	r7, [r4, #12]
	int res = fs_mount(&mp);
    2d9a:	4620      	mov	r0, r4
    2d9c:	f003 fe42 	bl	6a24 <fs_mount>
	if (res == FR_OK) {
    2da0:	4605      	mov	r5, r0
    2da2:	2800      	cmp	r0, #0
    2da4:	d174      	bne.n	2e90 <main+0x144>
		printk("Disk mounted.\n");
    2da6:	48a5      	ldr	r0, [pc, #660]	; (303c <main+0x2f0>)
    2da8:	f00c fb0d 	bl	f3c6 <printk>
	res = fs_opendir(&dirp, path);
    2dac:	4639      	mov	r1, r7
    2dae:	a816      	add	r0, sp, #88	; 0x58
 * @param zdp Pointer to file object
 *
 */
static inline void fs_dir_t_init(struct fs_dir_t *zdp)
{
	*zdp = (struct fs_dir_t){ 0 };
    2db0:	e9cd 5516 	strd	r5, r5, [sp, #88]	; 0x58
    2db4:	f003 fd18 	bl	67e8 <fs_opendir>
		printk("Error opening dir %s [%d]\n", path, res);
    2db8:	4639      	mov	r1, r7
	if (res) {
    2dba:	4602      	mov	r2, r0
    2dbc:	2800      	cmp	r0, #0
    2dbe:	d046      	beq.n	2e4e <main+0x102>
		printk("Error opening dir %s [%d]\n", path, res);
    2dc0:	489f      	ldr	r0, [pc, #636]	; (3040 <main+0x2f4>)
    2dc2:	f00c fb00 	bl	f3c6 <printk>
	*zfp = (struct fs_file_t){ 0 };
    2dc6:	4b9f      	ldr	r3, [pc, #636]	; (3044 <main+0x2f8>)
	snprintf(filename, sizeof(filename), "%s/test.txt", mp.mnt_point);
    2dc8:	489f      	ldr	r0, [pc, #636]	; (3048 <main+0x2fc>)
    2dca:	2200      	movs	r2, #0
    2dcc:	e9c3 2200 	strd	r2, r2, [r3]
    2dd0:	609a      	str	r2, [r3, #8]
    2dd2:	21ff      	movs	r1, #255	; 0xff
    2dd4:	68e3      	ldr	r3, [r4, #12]
    2dd6:	4a9d      	ldr	r2, [pc, #628]	; (304c <main+0x300>)
    2dd8:	f00b fe32 	bl	ea40 <sniprintf>
    2ddc:	489c      	ldr	r0, [pc, #624]	; (3050 <main+0x304>)
	bmxIMU_spi.gpio0_dev= device_get_binding("GPIO_0");
    2dde:	4c9d      	ldr	r4, [pc, #628]	; (3054 <main+0x308>)
    2de0:	f008 ff3e 	bl	bc60 <z_impl_device_get_binding>
	gpio_pin_configure(bmxIMU_spi.gpio0_dev, bmxIMU_spi.spi_cs_pin, GPIO_OUTPUT | GPIO_ACTIVE_LOW);
    2de4:	7c21      	ldrb	r1, [r4, #16]
	bmxIMU_spi.gpio0_dev= device_get_binding("GPIO_0");
    2de6:	6160      	str	r0, [r4, #20]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    2de8:	f7ff ff42 	bl	2c70 <z_impl_gpio_pin_configure.constprop.0>
    2dec:	489a      	ldr	r0, [pc, #616]	; (3058 <main+0x30c>)
    2dee:	f008 ff37 	bl	bc60 <z_impl_device_get_binding>
	bmxIMU_spi.spi_dev = device_get_binding(spiName0);
    2df2:	60e0      	str	r0, [r4, #12]
	if (bmxIMU_spi.spi_dev == NULL) {
    2df4:	2800      	cmp	r0, #0
    2df6:	d14f      	bne.n	2e98 <main+0x14c>
		printk("Could not get %s device\n", spiName0);
    2df8:	4997      	ldr	r1, [pc, #604]	; (3058 <main+0x30c>)
    2dfa:	e7b6      	b.n	2d6a <main+0x1e>
		if (disk_access_ioctl(disk_pdrv,
    2dfc:	4889      	ldr	r0, [pc, #548]	; (3024 <main+0x2d8>)
    2dfe:	aa15      	add	r2, sp, #84	; 0x54
    2e00:	2101      	movs	r1, #1
    2e02:	f00c ff02 	bl	fc0a <disk_access_ioctl>
    2e06:	b118      	cbz	r0, 2e10 <main+0xc4>
			LOG_ERR("Unable to get sector count");
    2e08:	4894      	ldr	r0, [pc, #592]	; (305c <main+0x310>)
    2e0a:	f044 0101 	orr.w	r1, r4, #1
    2e0e:	e7bf      	b.n	2d90 <main+0x44>
		LOG_INF("Block count %u", block_count);
    2e10:	9915      	ldr	r1, [sp, #84]	; 0x54
    2e12:	4893      	ldr	r0, [pc, #588]	; (3060 <main+0x314>)
    2e14:	f044 0203 	orr.w	r2, r4, #3
    2e18:	f00c fbd5 	bl	f5c6 <log_1>
		if (disk_access_ioctl(disk_pdrv,
    2e1c:	4881      	ldr	r0, [pc, #516]	; (3024 <main+0x2d8>)
    2e1e:	aa16      	add	r2, sp, #88	; 0x58
    2e20:	2102      	movs	r1, #2
    2e22:	f00c fef2 	bl	fc0a <disk_access_ioctl>
    2e26:	b118      	cbz	r0, 2e30 <main+0xe4>
			LOG_ERR("Unable to get sector size");
    2e28:	488e      	ldr	r0, [pc, #568]	; (3064 <main+0x318>)
    2e2a:	f044 0101 	orr.w	r1, r4, #1
    2e2e:	e7af      	b.n	2d90 <main+0x44>
		printk("Sector size %u\n", block_size);
    2e30:	9916      	ldr	r1, [sp, #88]	; 0x58
    2e32:	488d      	ldr	r0, [pc, #564]	; (3068 <main+0x31c>)
    2e34:	f00c fac7 	bl	f3c6 <printk>
		memory_size_mb = (uint64_t)block_count * block_size;
    2e38:	e9dd 0315 	ldrd	r0, r3, [sp, #84]	; 0x54
    2e3c:	fba0 0103 	umull	r0, r1, r0, r3
		printk("Memory Size(MB) %u\n", (uint32_t)(memory_size_mb >> 20));
    2e40:	0d03      	lsrs	r3, r0, #20
    2e42:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    2e46:	4889      	ldr	r0, [pc, #548]	; (306c <main+0x320>)
    2e48:	f00c fabd 	bl	f3c6 <printk>
    2e4c:	e7a2      	b.n	2d94 <main+0x48>
	printk("\nListing dir %s ...\n", path);
    2e4e:	4888      	ldr	r0, [pc, #544]	; (3070 <main+0x324>)
		res = fs_readdir(&dirp, &entry);
    2e50:	4d88      	ldr	r5, [pc, #544]	; (3074 <main+0x328>)
			printk("[FILE] %s (size = %zu)\n",
    2e52:	f8df 8254 	ldr.w	r8, [pc, #596]	; 30a8 <main+0x35c>
	printk("\nListing dir %s ...\n", path);
    2e56:	f00c fab6 	bl	f3c6 <printk>
			printk("[FILE] %s (size = %zu)\n",
    2e5a:	1c6f      	adds	r7, r5, #1
		res = fs_readdir(&dirp, &entry);
    2e5c:	4985      	ldr	r1, [pc, #532]	; (3074 <main+0x328>)
    2e5e:	a816      	add	r0, sp, #88	; 0x58
    2e60:	f003 fd38 	bl	68d4 <fs_readdir>
		if (res || entry.name[0] == 0) {
    2e64:	b980      	cbnz	r0, 2e88 <main+0x13c>
    2e66:	786b      	ldrb	r3, [r5, #1]
    2e68:	b173      	cbz	r3, 2e88 <main+0x13c>
		if (entry.type == FS_DIR_ENTRY_DIR) {
    2e6a:	782b      	ldrb	r3, [r5, #0]
    2e6c:	2b01      	cmp	r3, #1
    2e6e:	d104      	bne.n	2e7a <main+0x12e>
			printk("[DIR ] %s\n", entry.name);
    2e70:	4881      	ldr	r0, [pc, #516]	; (3078 <main+0x32c>)
    2e72:	4639      	mov	r1, r7
    2e74:	f00c faa7 	bl	f3c6 <printk>
    2e78:	e7f0      	b.n	2e5c <main+0x110>
			printk("[FILE] %s (size = %zu)\n",
    2e7a:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    2e7e:	4639      	mov	r1, r7
    2e80:	4640      	mov	r0, r8
    2e82:	f00c faa0 	bl	f3c6 <printk>
    2e86:	e7e9      	b.n	2e5c <main+0x110>
	fs_closedir(&dirp);
    2e88:	a816      	add	r0, sp, #88	; 0x58
    2e8a:	f003 fda5 	bl	69d8 <fs_closedir>
	return res;
    2e8e:	e79a      	b.n	2dc6 <main+0x7a>
		printk("Error mounting disk.\n");
    2e90:	487a      	ldr	r0, [pc, #488]	; (307c <main+0x330>)
    2e92:	f00c fa98 	bl	f3c6 <printk>
    2e96:	e796      	b.n	2dc6 <main+0x7a>
		printk("Got SPI device\n");
    2e98:	4879      	ldr	r0, [pc, #484]	; (3080 <main+0x334>)
    2e9a:	f00c fa94 	bl	f3c6 <printk>
	begin_bmx160(&bmxIMU_spi);
    2e9e:	4620      	mov	r0, r4
    2ea0:	f00c f802 	bl	eea8 <begin_bmx160>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    2ea4:	2100      	movs	r1, #0
    2ea6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2eaa:	f00a fb9d 	bl	d5e8 <z_impl_k_sleep>
    2eae:	4868      	ldr	r0, [pc, #416]	; (3050 <main+0x304>)
    2eb0:	f008 fed6 	bl	bc60 <z_impl_device_get_binding>
    2eb4:	2107      	movs	r1, #7
    2eb6:	f7ff fedb 	bl	2c70 <z_impl_gpio_pin_configure.constprop.0>
    2eba:	4865      	ldr	r0, [pc, #404]	; (3050 <main+0x304>)
    2ebc:	f008 fed0 	bl	bc60 <z_impl_device_get_binding>
	gpio_pin_set(device_get_binding("GPIO_0"), 7, 1);
    2ec0:	2101      	movs	r1, #1
    2ec2:	f7ff fe9f 	bl	2c04 <gpio_pin_set.constprop.0>
    2ec6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2eca:	2100      	movs	r1, #0
    2ecc:	f00a fb8c 	bl	d5e8 <z_impl_k_sleep>
	delta = 0.001f * SENSOR_READ_MS_THREAD;
    2ed0:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 30ac <main+0x360>
		pitch_angle = 360 + angles.pitch;
    2ed4:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 30b0 <main+0x364>
	if (bmx160_data.ax == 0)
    2ed8:	2400      	movs	r4, #0
	err = getData_bmx160(&bmxIMU_spi, &bmx160_data);
    2eda:	4f6a      	ldr	r7, [pc, #424]	; (3084 <main+0x338>)
    2edc:	485d      	ldr	r0, [pc, #372]	; (3054 <main+0x308>)
    2ede:	4639      	mov	r1, r7
    2ee0:	f000 f9b0 	bl	3244 <getData_bmx160>
	if (bmx160_data.ax == 0)
    2ee4:	6838      	ldr	r0, [r7, #0]
    2ee6:	4621      	mov	r1, r4
    2ee8:	f7fe f892 	bl	1010 <__aeabi_fcmpeq>
    2eec:	b128      	cbz	r0, 2efa <main+0x1ae>
    2eee:	4858      	ldr	r0, [pc, #352]	; (3050 <main+0x304>)
    2ef0:	f008 feb6 	bl	bc60 <z_impl_device_get_binding>
		gpio_pin_set(device_get_binding("GPIO_0"), 7, 0);
    2ef4:	2100      	movs	r1, #0
    2ef6:	f7ff fe85 	bl	2c04 <gpio_pin_set.constprop.0>
	delta = 0.001f * SENSOR_READ_MS_THREAD;
    2efa:	4b63      	ldr	r3, [pc, #396]	; (3088 <main+0x33c>)
	fused_vector = update_fused_vector(fused_vector,
    2efc:	4d63      	ldr	r5, [pc, #396]	; (308c <main+0x340>)
	delta = 0.001f * SENSOR_READ_MS_THREAD;
    2efe:	f8c3 8000 	str.w	r8, [r3]
	fused_vector = update_fused_vector(fused_vector,
    2f02:	f8cd 8018 	str.w	r8, [sp, #24]
    2f06:	697b      	ldr	r3, [r7, #20]
    2f08:	9305      	str	r3, [sp, #20]
    2f0a:	693b      	ldr	r3, [r7, #16]
    2f0c:	9304      	str	r3, [sp, #16]
    2f0e:	68fb      	ldr	r3, [r7, #12]
    2f10:	9303      	str	r3, [sp, #12]
    2f12:	68b8      	ldr	r0, [r7, #8]
    2f14:	f7fe f8ae 	bl	1074 <__aeabi_f2iz>
    2f18:	b200      	sxth	r0, r0
    2f1a:	9002      	str	r0, [sp, #8]
    2f1c:	6878      	ldr	r0, [r7, #4]
    2f1e:	f7fe f8a9 	bl	1074 <__aeabi_f2iz>
    2f22:	b200      	sxth	r0, r0
    2f24:	9001      	str	r0, [sp, #4]
    2f26:	6838      	ldr	r0, [r7, #0]
	q_acc = quaternion_from_accelerometer(fused_vector.a,fused_vector.b,fused_vector.c);
    2f28:	4f59      	ldr	r7, [pc, #356]	; (3090 <main+0x344>)
	fused_vector = update_fused_vector(fused_vector,
    2f2a:	f7fe f8a3 	bl	1074 <__aeabi_f2iz>
    2f2e:	b200      	sxth	r0, r0
    2f30:	f10d 0a40 	add.w	sl, sp, #64	; 0x40
    2f34:	9000      	str	r0, [sp, #0]
    2f36:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
    2f3a:	4650      	mov	r0, sl
    2f3c:	f00c f93b 	bl	f1b6 <update_fused_vector>
    2f40:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
    2f44:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	q_acc = quaternion_from_accelerometer(fused_vector.a,fused_vector.b,fused_vector.c);
    2f48:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
    2f4c:	68ab      	ldr	r3, [r5, #8]
    2f4e:	686a      	ldr	r2, [r5, #4]
    2f50:	6829      	ldr	r1, [r5, #0]
	angles = quaternion_to_euler_angles(q_acc);
    2f52:	4d50      	ldr	r5, [pc, #320]	; (3094 <main+0x348>)
	q_acc = quaternion_from_accelerometer(fused_vector.a,fused_vector.b,fused_vector.c);
    2f54:	4650      	mov	r0, sl
    2f56:	f7fe fb63 	bl	1620 <quaternion_from_accelerometer>
    2f5a:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
    2f5e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	angles = quaternion_to_euler_angles(q_acc);
    2f62:	f10d 0a20 	add.w	sl, sp, #32
    2f66:	9300      	str	r3, [sp, #0]
    2f68:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
    2f6c:	4650      	mov	r0, sl
    2f6e:	f7fe fa73 	bl	1458 <quaternion_to_euler_angles>
    2f72:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
    2f76:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if(angles.yaw > 0 && angles.pitch > 0)
    2f7a:	68af      	ldr	r7, [r5, #8]
    2f7c:	f8df a134 	ldr.w	sl, [pc, #308]	; 30b4 <main+0x368>
    2f80:	4621      	mov	r1, r4
    2f82:	4638      	mov	r0, r7
    2f84:	f7fe f86c 	bl	1060 <__aeabi_fcmpgt>
    2f88:	2800      	cmp	r0, #0
    2f8a:	d031      	beq.n	2ff0 <main+0x2a4>
    2f8c:	f8d5 b004 	ldr.w	fp, [r5, #4]
    2f90:	4621      	mov	r1, r4
    2f92:	4658      	mov	r0, fp
    2f94:	f7fe f864 	bl	1060 <__aeabi_fcmpgt>
    2f98:	2800      	cmp	r0, #0
    2f9a:	f000 80c3 	beq.w	3124 <main+0x3d8>
		pitch_angle = angles.pitch;
    2f9e:	f8ca b000 	str.w	fp, [sl]
	len = sprintf(data,"%f\n",pitch_angle);
    2fa2:	f8da 0000 	ldr.w	r0, [sl]
    2fa6:	f7fd fa4f 	bl	448 <__aeabi_f2d>
    2faa:	4b3b      	ldr	r3, [pc, #236]	; (3098 <main+0x34c>)
    2fac:	e9cd 0100 	strd	r0, r1, [sp]
    2fb0:	2240      	movs	r2, #64	; 0x40
    2fb2:	2100      	movs	r1, #0
    2fb4:	4630      	mov	r0, r6
    2fb6:	f00f fab8 	bl	1252a <__sprintf_chk>
	if(len > 0){
    2fba:	1e05      	subs	r5, r0, #0
    2fbc:	dd13      	ble.n	2fe6 <main+0x29a>
		res = fs_open(&file, filename, FS_O_CREATE | FS_O_RDWR);
    2fbe:	2213      	movs	r2, #19
    2fc0:	4921      	ldr	r1, [pc, #132]	; (3048 <main+0x2fc>)
    2fc2:	4820      	ldr	r0, [pc, #128]	; (3044 <main+0x2f8>)
    2fc4:	f003 fb42 	bl	664c <fs_open>
		if (res < 0) {
    2fc8:	1e02      	subs	r2, r0, #0
    2fca:	da75      	bge.n	30b8 <main+0x36c>
			printk("FAIL: open %s: %d", filename, res);
    2fcc:	491e      	ldr	r1, [pc, #120]	; (3048 <main+0x2fc>)
    2fce:	4833      	ldr	r0, [pc, #204]	; (309c <main+0x350>)
			printk("FAIL: write %s: %d", filename, res);
    2fd0:	f00c f9f9 	bl	f3c6 <printk>
		res = fs_close(&file);
    2fd4:	481b      	ldr	r0, [pc, #108]	; (3044 <main+0x2f8>)
    2fd6:	f003 fb9f 	bl	6718 <fs_close>
		if (res < 0) {
    2fda:	1e02      	subs	r2, r0, #0
    2fdc:	da03      	bge.n	2fe6 <main+0x29a>
			printk("FAIL: close %s: %d", filename, res);
    2fde:	491a      	ldr	r1, [pc, #104]	; (3048 <main+0x2fc>)
    2fe0:	482f      	ldr	r0, [pc, #188]	; (30a0 <main+0x354>)
    2fe2:	f00c f9f0 	bl	f3c6 <printk>
    2fe6:	2100      	movs	r1, #0
    2fe8:	20c5      	movs	r0, #197	; 0xc5
    2fea:	f00a fafd 	bl	d5e8 <z_impl_k_sleep>
	for (;;) {
    2fee:	e774      	b.n	2eda <main+0x18e>
	else if(angles.yaw < 0 && angles.pitch > 0)
    2ff0:	4621      	mov	r1, r4
    2ff2:	4638      	mov	r0, r7
    2ff4:	f7fe f816 	bl	1024 <__aeabi_fcmplt>
    2ff8:	2800      	cmp	r0, #0
    2ffa:	d07f      	beq.n	30fc <main+0x3b0>
    2ffc:	f8d5 b004 	ldr.w	fp, [r5, #4]
    3000:	4621      	mov	r1, r4
    3002:	4658      	mov	r0, fp
    3004:	f7fe f82c 	bl	1060 <__aeabi_fcmpgt>
    3008:	2800      	cmp	r0, #0
    300a:	d06a      	beq.n	30e2 <main+0x396>
		pitch_angle = 180 - angles.pitch;    
    300c:	4825      	ldr	r0, [pc, #148]	; (30a4 <main+0x358>)
    300e:	4659      	mov	r1, fp
    3010:	f7fd fd60 	bl	ad4 <__aeabi_fsub>
		pitch_angle = 360 + angles.pitch;
    3014:	f8ca 0000 	str.w	r0, [sl]
    3018:	e7c3      	b.n	2fa2 <main+0x256>
    301a:	bf00      	nop
    301c:	00013989 	.word	0x00013989
    3020:	0001398f 	.word	0x0001398f
    3024:	000139a8 	.word	0x000139a8
    3028:	000130a4 	.word	0x000130a4
    302c:	000130a4 	.word	0x000130a4
    3030:	000139ab 	.word	0x000139ab
    3034:	20000018 	.word	0x20000018
    3038:	00013a27 	.word	0x00013a27
    303c:	00013a2c 	.word	0x00013a2c
    3040:	00013a3b 	.word	0x00013a3b
    3044:	2000093c 	.word	0x2000093c
    3048:	20000e76 	.word	0x20000e76
    304c:	00013aa4 	.word	0x00013aa4
    3050:	00013ab0 	.word	0x00013ab0
    3054:	20000000 	.word	0x20000000
    3058:	00013ab7 	.word	0x00013ab7
    305c:	000139bf 	.word	0x000139bf
    3060:	000139da 	.word	0x000139da
    3064:	000139e9 	.word	0x000139e9
    3068:	00013a03 	.word	0x00013a03
    306c:	00013a13 	.word	0x00013a13
    3070:	00013a56 	.word	0x00013a56
    3074:	200005f8 	.word	0x200005f8
    3078:	00013a6b 	.word	0x00013a6b
    307c:	00013a8e 	.word	0x00013a8e
    3080:	00013abd 	.word	0x00013abd
    3084:	200005dc 	.word	0x200005dc
    3088:	200005f4 	.word	0x200005f4
    308c:	20000948 	.word	0x20000948
    3090:	20000958 	.word	0x20000958
    3094:	200005d0 	.word	0x200005d0
    3098:	00013acd 	.word	0x00013acd
    309c:	00013ad1 	.word	0x00013ad1
    30a0:	00013b08 	.word	0x00013b08
    30a4:	43340000 	.word	0x43340000
    30a8:	00013a76 	.word	0x00013a76
    30ac:	3a23d70b 	.word	0x3a23d70b
    30b0:	43b40000 	.word	0x43b40000
    30b4:	20000954 	.word	0x20000954
		res = fs_seek(&file, 0, FS_SEEK_END);
    30b8:	2202      	movs	r2, #2
    30ba:	481e      	ldr	r0, [pc, #120]	; (3134 <main+0x3e8>)
    30bc:	2100      	movs	r1, #0
    30be:	f003 fb71 	bl	67a4 <fs_seek>
		if (res < 0) {
    30c2:	1e02      	subs	r2, r0, #0
    30c4:	da02      	bge.n	30cc <main+0x380>
			printk("FAIL: seek %s: %d", filename, res);
    30c6:	491c      	ldr	r1, [pc, #112]	; (3138 <main+0x3ec>)
    30c8:	481c      	ldr	r0, [pc, #112]	; (313c <main+0x3f0>)
    30ca:	e781      	b.n	2fd0 <main+0x284>
		res = fs_write(&file, data, len);
    30cc:	462a      	mov	r2, r5
    30ce:	4819      	ldr	r0, [pc, #100]	; (3134 <main+0x3e8>)
    30d0:	4631      	mov	r1, r6
    30d2:	f003 fb45 	bl	6760 <fs_write>
		if (res < 0) {
    30d6:	1e02      	subs	r2, r0, #0
    30d8:	f6bf af7c 	bge.w	2fd4 <main+0x288>
			printk("FAIL: write %s: %d", filename, res);
    30dc:	4916      	ldr	r1, [pc, #88]	; (3138 <main+0x3ec>)
    30de:	4818      	ldr	r0, [pc, #96]	; (3140 <main+0x3f4>)
    30e0:	e776      	b.n	2fd0 <main+0x284>
	else if(angles.yaw > 0 && angles.pitch < 0)
    30e2:	4621      	mov	r1, r4
    30e4:	4638      	mov	r0, r7
    30e6:	f7fd ffbb 	bl	1060 <__aeabi_fcmpgt>
    30ea:	b170      	cbz	r0, 310a <main+0x3be>
    30ec:	f8d5 b004 	ldr.w	fp, [r5, #4]
    30f0:	4621      	mov	r1, r4
    30f2:	4658      	mov	r0, fp
    30f4:	f7fd ff96 	bl	1024 <__aeabi_fcmplt>
    30f8:	2800      	cmp	r0, #0
    30fa:	d187      	bne.n	300c <main+0x2c0>
	else if(angles.yaw < 0 && angles.pitch < 0)
    30fc:	4621      	mov	r1, r4
    30fe:	4638      	mov	r0, r7
    3100:	f7fd ff90 	bl	1024 <__aeabi_fcmplt>
    3104:	2800      	cmp	r0, #0
    3106:	f43f af4c 	beq.w	2fa2 <main+0x256>
    310a:	686d      	ldr	r5, [r5, #4]
    310c:	4621      	mov	r1, r4
    310e:	4628      	mov	r0, r5
    3110:	f7fd ff88 	bl	1024 <__aeabi_fcmplt>
    3114:	2800      	cmp	r0, #0
    3116:	f43f af44 	beq.w	2fa2 <main+0x256>
		pitch_angle = 360 + angles.pitch;
    311a:	4649      	mov	r1, r9
    311c:	4628      	mov	r0, r5
    311e:	f7fd fcdb 	bl	ad8 <__addsf3>
    3122:	e777      	b.n	3014 <main+0x2c8>
	else if(angles.yaw < 0 && angles.pitch > 0)
    3124:	4621      	mov	r1, r4
    3126:	4638      	mov	r0, r7
    3128:	f7fd ff7c 	bl	1024 <__aeabi_fcmplt>
    312c:	2800      	cmp	r0, #0
    312e:	d0dd      	beq.n	30ec <main+0x3a0>
    3130:	e764      	b.n	2ffc <main+0x2b0>
    3132:	bf00      	nop
    3134:	2000093c 	.word	0x2000093c
    3138:	20000e76 	.word	0x20000e76
    313c:	00013ae3 	.word	0x00013ae3
    3140:	00013af5 	.word	0x00013af5

00003144 <gpio_pin_set>:
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    3144:	6843      	ldr	r3, [r0, #4]
{
    3146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    314a:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_data *const data =
    314c:	6907      	ldr	r7, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    314e:	2501      	movs	r5, #1
    3150:	408d      	lsls	r5, r1
    3152:	421d      	tst	r5, r3
{
    3154:	4604      	mov	r4, r0
    3156:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    3158:	d10a      	bne.n	3170 <gpio_pin_set+0x2c>
    315a:	4915      	ldr	r1, [pc, #84]	; (31b0 <gpio_pin_set+0x6c>)
    315c:	4815      	ldr	r0, [pc, #84]	; (31b4 <gpio_pin_set+0x70>)
    315e:	f240 42bb 	movw	r2, #1211	; 0x4bb
    3162:	f00c f930 	bl	f3c6 <printk>
    3166:	4812      	ldr	r0, [pc, #72]	; (31b0 <gpio_pin_set+0x6c>)
    3168:	f240 41bb 	movw	r1, #1211	; 0x4bb
    316c:	f00c f9f0 	bl	f550 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    3170:	683b      	ldr	r3, [r7, #0]
    3172:	421d      	tst	r5, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    3174:	6863      	ldr	r3, [r4, #4]
    3176:	681b      	ldr	r3, [r3, #0]
    3178:	bf18      	it	ne
    317a:	f086 0601 	eorne.w	r6, r6, #1
    317e:	421d      	tst	r5, r3
    3180:	d10a      	bne.n	3198 <gpio_pin_set+0x54>
    3182:	490b      	ldr	r1, [pc, #44]	; (31b0 <gpio_pin_set+0x6c>)
    3184:	480b      	ldr	r0, [pc, #44]	; (31b4 <gpio_pin_set+0x70>)
    3186:	f240 4291 	movw	r2, #1169	; 0x491
    318a:	f00c f91c 	bl	f3c6 <printk>
    318e:	4808      	ldr	r0, [pc, #32]	; (31b0 <gpio_pin_set+0x6c>)
    3190:	f240 4191 	movw	r1, #1169	; 0x491
    3194:	f00c f9dc 	bl	f550 <assert_post_action>
	if (value != 0)	{
    3198:	b136      	cbz	r6, 31a8 <gpio_pin_set+0x64>
	return api->port_set_bits_raw(port, pins);
    319a:	68a3      	ldr	r3, [r4, #8]
    319c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    319e:	4629      	mov	r1, r5
    31a0:	4620      	mov	r0, r4
}
    31a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
    31a6:	4718      	bx	r3
    31a8:	68a3      	ldr	r3, [r4, #8]
    31aa:	691b      	ldr	r3, [r3, #16]
    31ac:	e7f7      	b.n	319e <gpio_pin_set+0x5a>
    31ae:	bf00      	nop
    31b0:	000138da 	.word	0x000138da
    31b4:	00013904 	.word	0x00013904

000031b8 <setAccelRange_bmx160>:
    sentVal = (uint8_t)(passVal_odr | passVal_osr);
    writeReg_bmx160(bmxIMU_spi_p, BMX160_GYR_CONF_REG, sentVal);
}

void setAccelRange_bmx160(bmx160_spi * bmxIMU_spi_p, bmx160_accel_range passVal)
{
    31b8:	b510      	push	{r4, lr}
    uint8_t sentVal = 0b0;
    sentVal = (uint8_t)passVal;
    writeReg_bmx160(bmxIMU_spi_p, BMX160_ACC_RANGE_REG, sentVal);
    31ba:	460a      	mov	r2, r1
{
    31bc:	460c      	mov	r4, r1
    writeReg_bmx160(bmxIMU_spi_p, BMX160_ACC_RANGE_REG, sentVal);
    31be:	2141      	movs	r1, #65	; 0x41
    31c0:	f00b fdfe 	bl	edc0 <writeReg_bmx160>
    switch (passVal){
    31c4:	2c08      	cmp	r4, #8
    31c6:	4b07      	ldr	r3, [pc, #28]	; (31e4 <setAccelRange_bmx160+0x2c>)
    31c8:	d007      	beq.n	31da <setAccelRange_bmx160+0x22>
    31ca:	2c0c      	cmp	r4, #12
    31cc:	d007      	beq.n	31de <setAccelRange_bmx160+0x26>
    31ce:	2c05      	cmp	r4, #5
        case bmx160_accelRange_2g:
            accelRange = BMX160_ACCEL_MG_LSB_2G * G_CONST;
    31d0:	bf14      	ite	ne
    31d2:	4a05      	ldrne	r2, [pc, #20]	; (31e8 <setAccelRange_bmx160+0x30>)
            break;
        case bmx160_accelRange_4g:
            accelRange = BMX160_ACCEL_MG_LSB_4G * G_CONST;
    31d4:	4a05      	ldreq	r2, [pc, #20]	; (31ec <setAccelRange_bmx160+0x34>)
            break;
        case bmx160_accelRange_8g:
            accelRange = BMX160_ACCEL_MG_LSB_8G * G_CONST;
            break;
        case bmx160_accelRange_16g:
            accelRange = BMX160_ACCEL_MG_LSB_16G * G_CONST;
    31d6:	601a      	str	r2, [r3, #0]
            break;
        default:
            accelRange = BMX160_ACCEL_MG_LSB_2G * G_CONST;
            break;
    }
}
    31d8:	bd10      	pop	{r4, pc}
            accelRange = BMX160_ACCEL_MG_LSB_8G * G_CONST;
    31da:	4a05      	ldr	r2, [pc, #20]	; (31f0 <setAccelRange_bmx160+0x38>)
    31dc:	e7fb      	b.n	31d6 <setAccelRange_bmx160+0x1e>
            accelRange = BMX160_ACCEL_MG_LSB_16G * G_CONST;
    31de:	4a05      	ldr	r2, [pc, #20]	; (31f4 <setAccelRange_bmx160+0x3c>)
    31e0:	e7f9      	b.n	31d6 <setAccelRange_bmx160+0x1e>
    31e2:	bf00      	nop
    31e4:	2000003c 	.word	0x2000003c
    31e8:	3a1cf5a9 	.word	0x3a1cf5a9
    31ec:	3a9cf5a9 	.word	0x3a9cf5a9
    31f0:	3b1cf5d3 	.word	0x3b1cf5d3
    31f4:	3b9cf5bd 	.word	0x3b9cf5bd

000031f8 <setGyroRange_bmx160>:

void setGyroRange_bmx160(bmx160_spi * bmxIMU_spi_p, bmx160_gyro_range passVal)
{
    31f8:	b510      	push	{r4, lr}
    uint8_t sentVal = 0b0;
    sentVal = (uint8_t)passVal;
    writeReg_bmx160(bmxIMU_spi_p, BMX160_GYR_RANGE_REG, sentVal);
    31fa:	460a      	mov	r2, r1
{
    31fc:	460c      	mov	r4, r1
    writeReg_bmx160(bmxIMU_spi_p, BMX160_GYR_RANGE_REG, sentVal);
    31fe:	2143      	movs	r1, #67	; 0x43
    3200:	f00b fdde 	bl	edc0 <writeReg_bmx160>
    switch (passVal){
    3204:	4b09      	ldr	r3, [pc, #36]	; (322c <setGyroRange_bmx160+0x34>)
    3206:	2c04      	cmp	r4, #4
    3208:	d807      	bhi.n	321a <setGyroRange_bmx160+0x22>
    320a:	e8df f004 	tbb	[pc, r4]
    320e:	0a0c      	.short	0x0a0c
    3210:	0608      	.short	0x0608
    3212:	03          	.byte	0x03
    3213:	00          	.byte	0x00
        case bmx160_gyroRange_125dps:
            gyroRange = BMX160_GYRO_SENSITIVITY_125DPS;
    3214:	4a06      	ldr	r2, [pc, #24]	; (3230 <setGyroRange_bmx160+0x38>)
            break;
        case bmx160_gyroRange_1000dps:
            gyroRange = BMX160_GYRO_SENSITIVITY_1000DPS;
            break;
        case bmx160_gyroRange_2000dps:
            gyroRange = BMX160_GYRO_SENSITIVITY_2000DPS;
    3216:	601a      	str	r2, [r3, #0]
            break;
        default:
            gyroRange = BMX160_GYRO_SENSITIVITY_250DPS;
            break;
    }
}
    3218:	bd10      	pop	{r4, pc}
            gyroRange = BMX160_GYRO_SENSITIVITY_250DPS;
    321a:	4a06      	ldr	r2, [pc, #24]	; (3234 <setGyroRange_bmx160+0x3c>)
    321c:	e7fb      	b.n	3216 <setGyroRange_bmx160+0x1e>
            gyroRange = BMX160_GYRO_SENSITIVITY_500DPS;
    321e:	4a06      	ldr	r2, [pc, #24]	; (3238 <setGyroRange_bmx160+0x40>)
    3220:	e7f9      	b.n	3216 <setGyroRange_bmx160+0x1e>
            gyroRange = BMX160_GYRO_SENSITIVITY_1000DPS;
    3222:	4a06      	ldr	r2, [pc, #24]	; (323c <setGyroRange_bmx160+0x44>)
    3224:	e7f7      	b.n	3216 <setGyroRange_bmx160+0x1e>
            gyroRange = BMX160_GYRO_SENSITIVITY_2000DPS;
    3226:	4a06      	ldr	r2, [pc, #24]	; (3240 <setGyroRange_bmx160+0x48>)
    3228:	e7f5      	b.n	3216 <setGyroRange_bmx160+0x1e>
    322a:	bf00      	nop
    322c:	20000040 	.word	0x20000040
    3230:	3b79c1f8 	.word	0x3b79c1f8
    3234:	3bf9c1f8 	.word	0x3bf9c1f8
    3238:	3c79c18d 	.word	0x3c79c18d
    323c:	3cf9c18d 	.word	0x3cf9c18d
    3240:	3d79c18d 	.word	0x3d79c18d

00003244 <getData_bmx160>:
    x = (int16_t) (((uint16_t)data[1] << 8) | data[0]);


}*/
uint8_t getData_bmx160(bmx160_spi * bmxIMU_spi_p, bmx160_sensor_data * sen_data)
{
    3244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int result;
    int16_t x=0,y=0,z=0; 
    if (sen_data == NULL)
    3248:	460d      	mov	r5, r1
    324a:	2900      	cmp	r1, #0
    324c:	d059      	beq.n	3302 <getData_bmx160+0xbe>
    sen_data->ax = (float)(x) * accelRange;
    sen_data->ay = (float)(y) * accelRange;
    sen_data->az = (float)(z) * accelRange;
#elif USE_BMI160
    static uint8_t data[12] = {0};
    result = readReg_bmx160(bmxIMU_spi_p, BMX160_GYR_X_LSB_REG, data, 12);
    324e:	4c2e      	ldr	r4, [pc, #184]	; (3308 <getData_bmx160+0xc4>)
    3250:	230c      	movs	r3, #12
    3252:	4622      	mov	r2, r4
    3254:	4619      	mov	r1, r3
    3256:	f00b fdf4 	bl	ee42 <readReg_bmx160>
    
    x = (int16_t) (((uint16_t)data[1] << 8) | data[0]);
    y = (int16_t) (((uint16_t)data[3] << 8) | data[2]);
    325a:	78e3      	ldrb	r3, [r4, #3]
    325c:	f894 9002 	ldrb.w	r9, [r4, #2]
    z = (int16_t) (((uint16_t)data[5] << 8) | data[4]);
    3260:	7926      	ldrb	r6, [r4, #4]
    y = (int16_t) (((uint16_t)data[3] << 8) | data[2]);
    3262:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
    z = (int16_t) (((uint16_t)data[5] << 8) | data[4]);
    3266:	7963      	ldrb	r3, [r4, #5]
    3268:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    sen_data->gx = (float)(x) * gyroRange;
    326c:	4b27      	ldr	r3, [pc, #156]	; (330c <getData_bmx160+0xc8>)
    result = readReg_bmx160(bmxIMU_spi_p, BMX160_GYR_X_LSB_REG, data, 12);
    326e:	4607      	mov	r7, r0
    sen_data->gx = (float)(x) * gyroRange;
    3270:	f8d3 8000 	ldr.w	r8, [r3]
    x = (int16_t) (((uint16_t)data[1] << 8) | data[0]);
    3274:	7820      	ldrb	r0, [r4, #0]
    3276:	7863      	ldrb	r3, [r4, #1]
    3278:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    sen_data->gx = (float)(x) * gyroRange;
    327c:	b200      	sxth	r0, r0
    327e:	f7fd fcdf 	bl	c40 <__aeabi_i2f>
    3282:	4641      	mov	r1, r8
    3284:	f7fd fd30 	bl	ce8 <__aeabi_fmul>
    y = (int16_t) (((uint16_t)data[3] << 8) | data[2]);
    3288:	fa0f f989 	sxth.w	r9, r9
    sen_data->gx = (float)(x) * gyroRange;
    328c:	60e8      	str	r0, [r5, #12]
    sen_data->gy = (float)(y) * gyroRange;
    328e:	4648      	mov	r0, r9
    3290:	f7fd fcd6 	bl	c40 <__aeabi_i2f>
    3294:	4641      	mov	r1, r8
    3296:	f7fd fd27 	bl	ce8 <__aeabi_fmul>
    z = (int16_t) (((uint16_t)data[5] << 8) | data[4]);
    329a:	b236      	sxth	r6, r6
    sen_data->gy = (float)(y) * gyroRange;
    329c:	6128      	str	r0, [r5, #16]
    sen_data->gz = (float)(z) * gyroRange;
    329e:	4630      	mov	r0, r6
    32a0:	f7fd fcce 	bl	c40 <__aeabi_i2f>
    32a4:	4641      	mov	r1, r8
    32a6:	f7fd fd1f 	bl	ce8 <__aeabi_fmul>
    32aa:	6168      	str	r0, [r5, #20]

    x = (int16_t) (((uint16_t)data[7] << 8) | data[6]);
    y = (int16_t) (((uint16_t)data[9] << 8) | data[8]);
    32ac:	7a63      	ldrb	r3, [r4, #9]
    32ae:	f894 9008 	ldrb.w	r9, [r4, #8]
    z = (int16_t) (((uint16_t)data[11] << 8) | data[10]);
    32b2:	7aa6      	ldrb	r6, [r4, #10]
    x = (int16_t) (((uint16_t)data[7] << 8) | data[6]);
    32b4:	79a0      	ldrb	r0, [r4, #6]
    y = (int16_t) (((uint16_t)data[9] << 8) | data[8]);
    32b6:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
    z = (int16_t) (((uint16_t)data[11] << 8) | data[10]);
    32ba:	7ae3      	ldrb	r3, [r4, #11]
    32bc:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    sen_data->ax = (float)(x) * accelRange;
    32c0:	4b13      	ldr	r3, [pc, #76]	; (3310 <getData_bmx160+0xcc>)
    32c2:	f8d3 8000 	ldr.w	r8, [r3]
    x = (int16_t) (((uint16_t)data[7] << 8) | data[6]);
    32c6:	79e3      	ldrb	r3, [r4, #7]
    32c8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    sen_data->ax = (float)(x) * accelRange;
    32cc:	b200      	sxth	r0, r0
    32ce:	f7fd fcb7 	bl	c40 <__aeabi_i2f>
    32d2:	4641      	mov	r1, r8
    32d4:	f7fd fd08 	bl	ce8 <__aeabi_fmul>
    y = (int16_t) (((uint16_t)data[9] << 8) | data[8]);
    32d8:	fa0f f989 	sxth.w	r9, r9
    sen_data->ax = (float)(x) * accelRange;
    32dc:	6028      	str	r0, [r5, #0]
    sen_data->ay = (float)(y) * accelRange;
    32de:	4648      	mov	r0, r9
    32e0:	f7fd fcae 	bl	c40 <__aeabi_i2f>
    32e4:	4641      	mov	r1, r8
    32e6:	f7fd fcff 	bl	ce8 <__aeabi_fmul>
    z = (int16_t) (((uint16_t)data[11] << 8) | data[10]);
    32ea:	b236      	sxth	r6, r6
    sen_data->ay = (float)(y) * accelRange;
    32ec:	6068      	str	r0, [r5, #4]
    sen_data->az = (float)(z) * accelRange;
    32ee:	4630      	mov	r0, r6
    32f0:	f7fd fca6 	bl	c40 <__aeabi_i2f>
    32f4:	4641      	mov	r1, r8
    32f6:	f7fd fcf7 	bl	ce8 <__aeabi_fmul>
    32fa:	60a8      	str	r0, [r5, #8]
#else
    #error Please Select only the sed CHIP in 'bmx160.h'
#endif

    return result;
    32fc:	b2f8      	uxtb	r0, r7
}
    32fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return BMX160_E_NULL_PTR;
    3302:	20ff      	movs	r0, #255	; 0xff
    3304:	e7fb      	b.n	32fe <getData_bmx160+0xba>
    3306:	bf00      	nop
    3308:	20000f75 	.word	0x20000f75
    330c:	20000040 	.word	0x20000040
    3310:	2000003c 	.word	0x2000003c

00003314 <quaternion_from_gyro>:
{
    3314:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3318:	4680      	mov	r8, r0
    331a:	460c      	mov	r4, r1
    float alpha = 0.5*time;
    331c:	9808      	ldr	r0, [sp, #32]
    331e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
{
    3322:	4615      	mov	r5, r2
    3324:	461e      	mov	r6, r3
    float alpha = 0.5*time;
    3326:	f7fd fcdf 	bl	ce8 <__aeabi_fmul>
    332a:	4607      	mov	r7, r0
    b = alpha*(-wx);
    332c:	4639      	mov	r1, r7
    332e:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
    3332:	f7fd fcd9 	bl	ce8 <__aeabi_fmul>
    c = alpha*(-wy);
    3336:	4639      	mov	r1, r7
    b = alpha*(-wx);
    3338:	4604      	mov	r4, r0
    c = alpha*(-wy);
    333a:	f105 4000 	add.w	r0, r5, #2147483648	; 0x80000000
    333e:	f7fd fcd3 	bl	ce8 <__aeabi_fmul>
    d = alpha*(-wz);
    3342:	4639      	mov	r1, r7
    c = alpha*(-wy);
    3344:	4605      	mov	r5, r0
    d = alpha*(-wz);
    3346:	f106 4000 	add.w	r0, r6, #2147483648	; 0x80000000
    334a:	f7fd fccd 	bl	ce8 <__aeabi_fmul>
    a = 1 - 0.5*(b*b+c*c+d*d);
    334e:	4621      	mov	r1, r4
    d = alpha*(-wz);
    3350:	4606      	mov	r6, r0
    a = 1 - 0.5*(b*b+c*c+d*d);
    3352:	4620      	mov	r0, r4
    3354:	f7fd fcc8 	bl	ce8 <__aeabi_fmul>
    3358:	4629      	mov	r1, r5
    335a:	4607      	mov	r7, r0
    335c:	4628      	mov	r0, r5
    335e:	f7fd fcc3 	bl	ce8 <__aeabi_fmul>
    3362:	4601      	mov	r1, r0
    3364:	4638      	mov	r0, r7
    3366:	f7fd fbb7 	bl	ad8 <__addsf3>
    336a:	4631      	mov	r1, r6
    336c:	4607      	mov	r7, r0
    336e:	4630      	mov	r0, r6
    3370:	f7fd fcba 	bl	ce8 <__aeabi_fmul>
    3374:	4601      	mov	r1, r0
    3376:	4638      	mov	r0, r7
    3378:	f7fd fbae 	bl	ad8 <__addsf3>
    337c:	f7fd f864 	bl	448 <__aeabi_f2d>
    3380:	4b0b      	ldr	r3, [pc, #44]	; (33b0 <quaternion_from_gyro+0x9c>)
    3382:	2200      	movs	r2, #0
    3384:	f7fd f8b8 	bl	4f8 <__aeabi_dmul>
    3388:	4602      	mov	r2, r0
    338a:	460b      	mov	r3, r1
    338c:	2000      	movs	r0, #0
    338e:	4909      	ldr	r1, [pc, #36]	; (33b4 <quaternion_from_gyro+0xa0>)
    3390:	f7fc fefa 	bl	188 <__aeabi_dsub>
    3394:	f7fd fb4a 	bl	a2c <__aeabi_d2f>
    Quaternion result = quaternion_initialize(a,b,c,d);
    3398:	9600      	str	r6, [sp, #0]
    a = 1 - 0.5*(b*b+c*c+d*d);
    339a:	4601      	mov	r1, r0
    Quaternion result = quaternion_initialize(a,b,c,d);
    339c:	462b      	mov	r3, r5
    339e:	4640      	mov	r0, r8
    33a0:	4622      	mov	r2, r4
    33a2:	f00b fdb6 	bl	ef12 <quaternion_initialize>
}
    33a6:	4640      	mov	r0, r8
    33a8:	b002      	add	sp, #8
    33aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    33ae:	bf00      	nop
    33b0:	3fe00000 	.word	0x3fe00000
    33b4:	3ff00000 	.word	0x3ff00000

000033b8 <InvSqrt>:
    v2.c = v1.c*scale;
    return v2;
}

float InvSqrt(float x)
{
    33b8:	b510      	push	{r4, lr}
   uint32_t i = 0x5F1F1412 - (*(uint32_t*)&x >> 1);
   float tmp = *(float*)&i;
    33ba:	4c0a      	ldr	r4, [pc, #40]	; (33e4 <InvSqrt+0x2c>)
   return tmp * (1.69000231f - 0.714158168f * x * tmp * tmp);
    33bc:	490a      	ldr	r1, [pc, #40]	; (33e8 <InvSqrt+0x30>)
   float tmp = *(float*)&i;
    33be:	eba4 0450 	sub.w	r4, r4, r0, lsr #1
   return tmp * (1.69000231f - 0.714158168f * x * tmp * tmp);
    33c2:	f7fd fc91 	bl	ce8 <__aeabi_fmul>
    33c6:	4621      	mov	r1, r4
    33c8:	f7fd fc8e 	bl	ce8 <__aeabi_fmul>
    33cc:	4621      	mov	r1, r4
    33ce:	f7fd fc8b 	bl	ce8 <__aeabi_fmul>
    33d2:	4601      	mov	r1, r0
    33d4:	4805      	ldr	r0, [pc, #20]	; (33ec <InvSqrt+0x34>)
    33d6:	f7fd fb7d 	bl	ad4 <__aeabi_fsub>
    33da:	4621      	mov	r1, r4
    33dc:	f7fd fc84 	bl	ce8 <__aeabi_fmul>
}
    33e0:	bd10      	pop	{r4, pc}
    33e2:	bf00      	nop
    33e4:	5f1f1412 	.word	0x5f1f1412
    33e8:	3f36d312 	.word	0x3f36d312
    33ec:	3fd851ff 	.word	0x3fd851ff

000033f0 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    33f0:	b538      	push	{r3, r4, r5, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    33f2:	6844      	ldr	r4, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    33f4:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    33f6:	f004 0403 	and.w	r4, r4, #3
	switch (method) {
    33fa:	2c03      	cmp	r4, #3
{
    33fc:	4605      	mov	r5, r0
	switch (method) {
    33fe:	d002      	beq.n	3406 <sys_notify_finalize+0x16>
    3400:	b12c      	cbz	r4, 340e <sys_notify_finalize+0x1e>
    3402:	2000      	movs	r0, #0
    3404:	e000      	b.n	3408 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    3406:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    3408:	2300      	movs	r3, #0
    340a:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    340c:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
    340e:	4905      	ldr	r1, [pc, #20]	; (3424 <sys_notify_finalize+0x34>)
    3410:	4805      	ldr	r0, [pc, #20]	; (3428 <sys_notify_finalize+0x38>)
    3412:	2245      	movs	r2, #69	; 0x45
    3414:	f00b ffd7 	bl	f3c6 <printk>
    3418:	4802      	ldr	r0, [pc, #8]	; (3424 <sys_notify_finalize+0x34>)
    341a:	2145      	movs	r1, #69	; 0x45
    341c:	f00c f898 	bl	f550 <assert_post_action>
    3420:	e7ef      	b.n	3402 <sys_notify_finalize+0x12>
    3422:	bf00      	nop
    3424:	00013b2c 	.word	0x00013b2c
    3428:	00013904 	.word	0x00013904

0000342c <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    342c:	4b01      	ldr	r3, [pc, #4]	; (3434 <__printk_hook_install+0x8>)
    342e:	6018      	str	r0, [r3, #0]
}
    3430:	4770      	bx	lr
    3432:	bf00      	nop
    3434:	20000044 	.word	0x20000044

00003438 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    3438:	b530      	push	{r4, r5, lr}
    343a:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    343c:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    3440:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    3442:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    3444:	a901      	add	r1, sp, #4
    3446:	4805      	ldr	r0, [pc, #20]	; (345c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    3448:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    344a:	f000 fad7 	bl	39fc <cbvprintf>

	if (ctx.count < ctx.max) {
    344e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    3452:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    3454:	bfb8      	it	lt
    3456:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    3458:	b005      	add	sp, #20
    345a:	bd30      	pop	{r4, r5, pc}
    345c:	0000f3a1 	.word	0x0000f3a1

00003460 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    3460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3464:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    3468:	f01a 0f08 	tst.w	sl, #8
{
    346c:	4604      	mov	r4, r0
    346e:	4693      	mov	fp, r2
	if (processing) {
    3470:	d01c      	beq.n	34ac <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
    3472:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    3474:	bf0c      	ite	eq
    3476:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    347a:	f04a 0a20 	orrne.w	sl, sl, #32
    347e:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3482:	f104 0014 	add.w	r0, r4, #20
    3486:	f008 ff5b 	bl	c340 <z_spin_unlock_valid>
    348a:	b940      	cbnz	r0, 349e <process_event+0x3e>
    348c:	49ba      	ldr	r1, [pc, #744]	; (3778 <process_event+0x318>)
    348e:	48bb      	ldr	r0, [pc, #748]	; (377c <process_event+0x31c>)
    3490:	22ac      	movs	r2, #172	; 0xac
    3492:	f00b ff98 	bl	f3c6 <printk>
    3496:	48b8      	ldr	r0, [pc, #736]	; (3778 <process_event+0x318>)
    3498:	21ac      	movs	r1, #172	; 0xac
    349a:	f00c f859 	bl	f550 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    349e:	f38b 8811 	msr	BASEPRI, fp
    34a2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    34a6:	b003      	add	sp, #12
    34a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    34ac:	4fb4      	ldr	r7, [pc, #720]	; (3780 <process_event+0x320>)
    34ae:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 377c <process_event+0x31c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    34b2:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
    34b6:	2902      	cmp	r1, #2
    34b8:	d106      	bne.n	34c8 <process_event+0x68>
			evt = process_recheck(mgr);
    34ba:	4620      	mov	r0, r4
    34bc:	f00b ff9d 	bl	f3fa <process_recheck>
		if (evt == EVT_NOP) {
    34c0:	2800      	cmp	r0, #0
    34c2:	d0de      	beq.n	3482 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    34c4:	2801      	cmp	r0, #1
    34c6:	d165      	bne.n	3594 <process_event+0x134>
			res = mgr->last_res;
    34c8:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    34cc:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    34ce:	f1b9 0f00 	cmp.w	r9, #0
    34d2:	da19      	bge.n	3508 <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    34d4:	2600      	movs	r6, #0
		*clients = mgr->clients;
    34d6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    34d8:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    34dc:	e9c4 6600 	strd	r6, r6, [r4]
    34e0:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    34e4:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    34e6:	8ba3      	ldrh	r3, [r4, #28]
    34e8:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    34ec:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    34ee:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
    34f0:	d003      	beq.n	34fa <process_event+0x9a>
		if (do_monitors
    34f2:	68a2      	ldr	r2, [r4, #8]
    34f4:	2a00      	cmp	r2, #0
    34f6:	f040 80f1 	bne.w	36dc <process_event+0x27c>
		    || !sys_slist_is_empty(&clients)
    34fa:	b915      	cbnz	r5, 3502 <process_event+0xa2>
		    || (transit != NULL)) {
    34fc:	2e00      	cmp	r6, #0
    34fe:	f000 812b 	beq.w	3758 <process_event+0x2f8>
    3502:	f04f 0a00 	mov.w	sl, #0
    3506:	e0eb      	b.n	36e0 <process_event+0x280>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3508:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    350c:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    350e:	2901      	cmp	r1, #1
    3510:	d822      	bhi.n	3558 <process_event+0xf8>
	list->head = NULL;
    3512:	2100      	movs	r1, #0
    3514:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    3518:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    351a:	6825      	ldr	r5, [r4, #0]
    351c:	b29b      	uxth	r3, r3
	list->tail = NULL;
    351e:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    3522:	d10c      	bne.n	353e <process_event+0xde>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    3524:	428d      	cmp	r5, r1
    3526:	462a      	mov	r2, r5
    3528:	bf38      	it	cc
    352a:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    352c:	b12a      	cbz	r2, 353a <process_event+0xda>
				mgr->refs += 1U;
    352e:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3530:	6812      	ldr	r2, [r2, #0]
    3532:	3101      	adds	r1, #1
    3534:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    3536:	2a00      	cmp	r2, #0
    3538:	d1f8      	bne.n	352c <process_event+0xcc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    353a:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    353e:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    3540:	4620      	mov	r0, r4
    3542:	f00b ff5a 	bl	f3fa <process_recheck>
    3546:	4606      	mov	r6, r0
    3548:	2800      	cmp	r0, #0
    354a:	d0cc      	beq.n	34e6 <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    354c:	8ba3      	ldrh	r3, [r4, #28]
    354e:	f043 0320 	orr.w	r3, r3, #32
    3552:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    3554:	2600      	movs	r6, #0
    3556:	e7c6      	b.n	34e6 <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
    3558:	2a04      	cmp	r2, #4
    355a:	d10d      	bne.n	3578 <process_event+0x118>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    355c:	f023 0307 	bic.w	r3, r3, #7
    3560:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    3562:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    3564:	4620      	mov	r0, r4
    3566:	f00b ff48 	bl	f3fa <process_recheck>
    356a:	4605      	mov	r5, r0
    356c:	b180      	cbz	r0, 3590 <process_event+0x130>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    356e:	f042 0220 	orr.w	r2, r2, #32
    3572:	83a2      	strh	r2, [r4, #28]
    3574:	2500      	movs	r5, #0
    3576:	e7ed      	b.n	3554 <process_event+0xf4>
		__ASSERT_NO_MSG(false);
    3578:	f240 121b 	movw	r2, #283	; 0x11b
    357c:	4639      	mov	r1, r7
    357e:	4640      	mov	r0, r8
    3580:	f00b ff21 	bl	f3c6 <printk>
    3584:	f240 111b 	movw	r1, #283	; 0x11b
    3588:	4638      	mov	r0, r7
    358a:	f00b ffe1 	bl	f550 <assert_post_action>
    358e:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    3590:	462e      	mov	r6, r5
    3592:	e7a8      	b.n	34e6 <process_event+0x86>
		} else if (evt == EVT_START) {
    3594:	2803      	cmp	r0, #3
    3596:	d131      	bne.n	35fc <process_event+0x19c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    3598:	f1ba 0f00 	cmp.w	sl, #0
    359c:	d00a      	beq.n	35b4 <process_event+0x154>
    359e:	4639      	mov	r1, r7
    35a0:	4640      	mov	r0, r8
    35a2:	f44f 72ab 	mov.w	r2, #342	; 0x156
    35a6:	f00b ff0e 	bl	f3c6 <printk>
    35aa:	f44f 71ab 	mov.w	r1, #342	; 0x156
    35ae:	4638      	mov	r0, r7
    35b0:	f00b ffce 	bl	f550 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    35b4:	6823      	ldr	r3, [r4, #0]
    35b6:	b953      	cbnz	r3, 35ce <process_event+0x16e>
    35b8:	4639      	mov	r1, r7
    35ba:	4640      	mov	r0, r8
    35bc:	f240 1257 	movw	r2, #343	; 0x157
    35c0:	f00b ff01 	bl	f3c6 <printk>
    35c4:	f240 1157 	movw	r1, #343	; 0x157
    35c8:	4638      	mov	r0, r7
    35ca:	f00b ffc1 	bl	f550 <assert_post_action>
			transit = mgr->transitions->start;
    35ce:	6923      	ldr	r3, [r4, #16]
    35d0:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    35d2:	b956      	cbnz	r6, 35ea <process_event+0x18a>
    35d4:	4639      	mov	r1, r7
    35d6:	4640      	mov	r0, r8
    35d8:	f44f 72ad 	mov.w	r2, #346	; 0x15a
    35dc:	f00b fef3 	bl	f3c6 <printk>
    35e0:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    35e4:	4638      	mov	r0, r7
    35e6:	f00b ffb3 	bl	f550 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    35ea:	8ba3      	ldrh	r3, [r4, #28]
    35ec:	f023 0307 	bic.w	r3, r3, #7
    35f0:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    35f4:	83a3      	strh	r3, [r4, #28]
}
    35f6:	2500      	movs	r5, #0
		res = 0;
    35f8:	46a9      	mov	r9, r5
}
    35fa:	e774      	b.n	34e6 <process_event+0x86>
		} else if (evt == EVT_STOP) {
    35fc:	2804      	cmp	r0, #4
    35fe:	d12e      	bne.n	365e <process_event+0x1fe>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    3600:	f1ba 0f02 	cmp.w	sl, #2
    3604:	d00a      	beq.n	361c <process_event+0x1bc>
    3606:	4639      	mov	r1, r7
    3608:	4640      	mov	r0, r8
    360a:	f240 125d 	movw	r2, #349	; 0x15d
    360e:	f00b feda 	bl	f3c6 <printk>
    3612:	f240 115d 	movw	r1, #349	; 0x15d
    3616:	4638      	mov	r0, r7
    3618:	f00b ff9a 	bl	f550 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    361c:	8be3      	ldrh	r3, [r4, #30]
    361e:	b153      	cbz	r3, 3636 <process_event+0x1d6>
    3620:	4639      	mov	r1, r7
    3622:	4640      	mov	r0, r8
    3624:	f44f 72af 	mov.w	r2, #350	; 0x15e
    3628:	f00b fecd 	bl	f3c6 <printk>
    362c:	f44f 71af 	mov.w	r1, #350	; 0x15e
    3630:	4638      	mov	r0, r7
    3632:	f00b ff8d 	bl	f550 <assert_post_action>
			transit = mgr->transitions->stop;
    3636:	6923      	ldr	r3, [r4, #16]
    3638:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    363a:	b956      	cbnz	r6, 3652 <process_event+0x1f2>
    363c:	4639      	mov	r1, r7
    363e:	4640      	mov	r0, r8
    3640:	f240 1261 	movw	r2, #353	; 0x161
    3644:	f00b febf 	bl	f3c6 <printk>
    3648:	f240 1161 	movw	r1, #353	; 0x161
    364c:	4638      	mov	r0, r7
    364e:	f00b ff7f 	bl	f550 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3652:	8ba3      	ldrh	r3, [r4, #28]
    3654:	f023 0307 	bic.w	r3, r3, #7
    3658:	f043 0304 	orr.w	r3, r3, #4
    365c:	e7ca      	b.n	35f4 <process_event+0x194>
		} else if (evt == EVT_RESET) {
    365e:	2805      	cmp	r0, #5
    3660:	d12e      	bne.n	36c0 <process_event+0x260>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    3662:	f1ba 0f01 	cmp.w	sl, #1
    3666:	d00a      	beq.n	367e <process_event+0x21e>
    3668:	4639      	mov	r1, r7
    366a:	4640      	mov	r0, r8
    366c:	f44f 72b2 	mov.w	r2, #356	; 0x164
    3670:	f00b fea9 	bl	f3c6 <printk>
    3674:	f44f 71b2 	mov.w	r1, #356	; 0x164
    3678:	4638      	mov	r0, r7
    367a:	f00b ff69 	bl	f550 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    367e:	6823      	ldr	r3, [r4, #0]
    3680:	b953      	cbnz	r3, 3698 <process_event+0x238>
    3682:	4639      	mov	r1, r7
    3684:	4640      	mov	r0, r8
    3686:	f240 1265 	movw	r2, #357	; 0x165
    368a:	f00b fe9c 	bl	f3c6 <printk>
    368e:	f240 1165 	movw	r1, #357	; 0x165
    3692:	4638      	mov	r0, r7
    3694:	f00b ff5c 	bl	f550 <assert_post_action>
			transit = mgr->transitions->reset;
    3698:	6923      	ldr	r3, [r4, #16]
    369a:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    369c:	b956      	cbnz	r6, 36b4 <process_event+0x254>
    369e:	4639      	mov	r1, r7
    36a0:	4640      	mov	r0, r8
    36a2:	f44f 72b4 	mov.w	r2, #360	; 0x168
    36a6:	f00b fe8e 	bl	f3c6 <printk>
    36aa:	f44f 71b4 	mov.w	r1, #360	; 0x168
    36ae:	4638      	mov	r0, r7
    36b0:	f00b ff4e 	bl	f550 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    36b4:	8ba3      	ldrh	r3, [r4, #28]
    36b6:	f023 0307 	bic.w	r3, r3, #7
    36ba:	f043 0305 	orr.w	r3, r3, #5
    36be:	e799      	b.n	35f4 <process_event+0x194>
			__ASSERT_NO_MSG(false);
    36c0:	f240 126b 	movw	r2, #363	; 0x16b
    36c4:	4639      	mov	r1, r7
    36c6:	4640      	mov	r0, r8
    36c8:	f00b fe7d 	bl	f3c6 <printk>
    36cc:	2500      	movs	r5, #0
    36ce:	f240 116b 	movw	r1, #363	; 0x16b
    36d2:	4638      	mov	r0, r7
    36d4:	f00b ff3c 	bl	f550 <assert_post_action>
		onoff_transition_fn transit = NULL;
    36d8:	462e      	mov	r6, r5
    36da:	e78d      	b.n	35f8 <process_event+0x198>
				   && !sys_slist_is_empty(&mgr->monitors);
    36dc:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    36e0:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    36e4:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    36e6:	f104 0314 	add.w	r3, r4, #20
    36ea:	4618      	mov	r0, r3
    36ec:	9301      	str	r3, [sp, #4]
    36ee:	f008 fe27 	bl	c340 <z_spin_unlock_valid>
    36f2:	b940      	cbnz	r0, 3706 <process_event+0x2a6>
    36f4:	4920      	ldr	r1, [pc, #128]	; (3778 <process_event+0x318>)
    36f6:	4640      	mov	r0, r8
    36f8:	22ac      	movs	r2, #172	; 0xac
    36fa:	f00b fe64 	bl	f3c6 <printk>
    36fe:	481e      	ldr	r0, [pc, #120]	; (3778 <process_event+0x318>)
    3700:	21ac      	movs	r1, #172	; 0xac
    3702:	f00b ff25 	bl	f550 <assert_post_action>
    3706:	f38b 8811 	msr	BASEPRI, fp
    370a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    370e:	f1ba 0f00 	cmp.w	sl, #0
    3712:	d139      	bne.n	3788 <process_event+0x328>
	while (!sys_slist_is_empty(list)) {
    3714:	2d00      	cmp	r5, #0
    3716:	d14c      	bne.n	37b2 <process_event+0x352>
			if (transit != NULL) {
    3718:	b116      	cbz	r6, 3720 <process_event+0x2c0>
				transit(mgr, transition_complete);
    371a:	491a      	ldr	r1, [pc, #104]	; (3784 <process_event+0x324>)
    371c:	4620      	mov	r0, r4
    371e:	47b0      	blx	r6
	__asm__ volatile(
    3720:	f04f 0320 	mov.w	r3, #32
    3724:	f3ef 8b11 	mrs	fp, BASEPRI
    3728:	f383 8812 	msr	BASEPRI_MAX, r3
    372c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3730:	9801      	ldr	r0, [sp, #4]
    3732:	f008 fdf7 	bl	c324 <z_spin_lock_valid>
    3736:	b940      	cbnz	r0, 374a <process_event+0x2ea>
    3738:	490f      	ldr	r1, [pc, #60]	; (3778 <process_event+0x318>)
    373a:	4640      	mov	r0, r8
    373c:	2281      	movs	r2, #129	; 0x81
    373e:	f00b fe42 	bl	f3c6 <printk>
    3742:	480d      	ldr	r0, [pc, #52]	; (3778 <process_event+0x318>)
    3744:	2181      	movs	r1, #129	; 0x81
    3746:	f00b ff03 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    374a:	9801      	ldr	r0, [sp, #4]
    374c:	f008 fe08 	bl	c360 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    3750:	8ba3      	ldrh	r3, [r4, #28]
    3752:	f023 0308 	bic.w	r3, r3, #8
    3756:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    3758:	8ba3      	ldrh	r3, [r4, #28]
    375a:	06da      	lsls	r2, r3, #27
    375c:	d531      	bpl.n	37c2 <process_event+0x362>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    375e:	f023 0310 	bic.w	r3, r3, #16
    3762:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    3764:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    3766:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
    376a:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
    376e:	2900      	cmp	r1, #0
    3770:	f47f aea1 	bne.w	34b6 <process_event+0x56>
out:
    3774:	e685      	b.n	3482 <process_event+0x22>
    3776:	bf00      	nop
    3778:	00013b71 	.word	0x00013b71
    377c:	00013904 	.word	0x00013904
    3780:	00013b4f 	.word	0x00013b4f
    3784:	000037d5 	.word	0x000037d5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    3788:	68a1      	ldr	r1, [r4, #8]
    378a:	2900      	cmp	r1, #0
    378c:	d0c2      	beq.n	3714 <process_event+0x2b4>
	return node->next;
    378e:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    3790:	f8d1 b004 	ldr.w	fp, [r1, #4]
    3794:	9a00      	ldr	r2, [sp, #0]
    3796:	2b00      	cmp	r3, #0
    3798:	bf38      	it	cc
    379a:	2300      	movcc	r3, #0
    379c:	469a      	mov	sl, r3
    379e:	4620      	mov	r0, r4
    37a0:	464b      	mov	r3, r9
    37a2:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    37a4:	f1ba 0f00 	cmp.w	sl, #0
    37a8:	d0b4      	beq.n	3714 <process_event+0x2b4>
    37aa:	f8da 3000 	ldr.w	r3, [sl]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    37ae:	4651      	mov	r1, sl
    37b0:	e7ee      	b.n	3790 <process_event+0x330>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    37b2:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    37b4:	9a00      	ldr	r2, [sp, #0]
    37b6:	682d      	ldr	r5, [r5, #0]
    37b8:	464b      	mov	r3, r9
    37ba:	4620      	mov	r0, r4
    37bc:	f00b fe39 	bl	f432 <notify_one>
    37c0:	e7a8      	b.n	3714 <process_event+0x2b4>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    37c2:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    37c6:	bf1e      	ittt	ne
    37c8:	f023 0320 	bicne.w	r3, r3, #32
    37cc:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    37ce:	2102      	movne	r1, #2
    37d0:	e7c9      	b.n	3766 <process_event+0x306>
    37d2:	bf00      	nop

000037d4 <transition_complete>:
{
    37d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37d6:	4604      	mov	r4, r0
    37d8:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    37da:	f100 0614 	add.w	r6, r0, #20
    37de:	f04f 0320 	mov.w	r3, #32
    37e2:	f3ef 8711 	mrs	r7, BASEPRI
    37e6:	f383 8812 	msr	BASEPRI_MAX, r3
    37ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    37ee:	4630      	mov	r0, r6
    37f0:	f008 fd98 	bl	c324 <z_spin_lock_valid>
    37f4:	b940      	cbnz	r0, 3808 <transition_complete+0x34>
    37f6:	490a      	ldr	r1, [pc, #40]	; (3820 <transition_complete+0x4c>)
    37f8:	480a      	ldr	r0, [pc, #40]	; (3824 <transition_complete+0x50>)
    37fa:	2281      	movs	r2, #129	; 0x81
    37fc:	f00b fde3 	bl	f3c6 <printk>
    3800:	4807      	ldr	r0, [pc, #28]	; (3820 <transition_complete+0x4c>)
    3802:	2181      	movs	r1, #129	; 0x81
    3804:	f00b fea4 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    3808:	4630      	mov	r0, r6
    380a:	f008 fda9 	bl	c360 <z_spin_lock_set_owner>
	mgr->last_res = res;
    380e:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    3810:	463a      	mov	r2, r7
    3812:	4620      	mov	r0, r4
    3814:	2101      	movs	r1, #1
}
    3816:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    381a:	f7ff be21 	b.w	3460 <process_event>
    381e:	bf00      	nop
    3820:	00013b71 	.word	0x00013b71
    3824:	00013904 	.word	0x00013904

00003828 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    3828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    382c:	4604      	mov	r4, r0
    382e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    3830:	f00b fe15 	bl	f45e <validate_args>

	if (rv < 0) {
    3834:	1e05      	subs	r5, r0, #0
    3836:	db54      	blt.n	38e2 <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    3838:	f104 0914 	add.w	r9, r4, #20
    383c:	f04f 0320 	mov.w	r3, #32
    3840:	f3ef 8a11 	mrs	sl, BASEPRI
    3844:	f383 8812 	msr	BASEPRI_MAX, r3
    3848:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    384c:	4648      	mov	r0, r9
    384e:	f008 fd69 	bl	c324 <z_spin_lock_valid>
    3852:	b940      	cbnz	r0, 3866 <onoff_request+0x3e>
    3854:	4933      	ldr	r1, [pc, #204]	; (3924 <onoff_request+0xfc>)
    3856:	4834      	ldr	r0, [pc, #208]	; (3928 <onoff_request+0x100>)
    3858:	2281      	movs	r2, #129	; 0x81
    385a:	f00b fdb4 	bl	f3c6 <printk>
    385e:	4831      	ldr	r0, [pc, #196]	; (3924 <onoff_request+0xfc>)
    3860:	2181      	movs	r1, #129	; 0x81
    3862:	f00b fe75 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    3866:	4648      	mov	r0, r9
    3868:	f008 fd7a 	bl	c360 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    386c:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    386e:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    3870:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3874:	428b      	cmp	r3, r1
    3876:	f002 0607 	and.w	r6, r2, #7
    387a:	d04a      	beq.n	3912 <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    387c:	2e02      	cmp	r6, #2
    387e:	d11f      	bne.n	38c0 <onoff_request+0x98>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    3880:	3301      	adds	r3, #1
    3882:	83e3      	strh	r3, [r4, #30]
	rv = state;
    3884:	4635      	mov	r5, r6
		notify = true;
    3886:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    388a:	4648      	mov	r0, r9
    388c:	f008 fd58 	bl	c340 <z_spin_unlock_valid>
    3890:	b940      	cbnz	r0, 38a4 <onoff_request+0x7c>
    3892:	4924      	ldr	r1, [pc, #144]	; (3924 <onoff_request+0xfc>)
    3894:	4824      	ldr	r0, [pc, #144]	; (3928 <onoff_request+0x100>)
    3896:	22ac      	movs	r2, #172	; 0xac
    3898:	f00b fd95 	bl	f3c6 <printk>
    389c:	4821      	ldr	r0, [pc, #132]	; (3924 <onoff_request+0xfc>)
    389e:	21ac      	movs	r1, #172	; 0xac
    38a0:	f00b fe56 	bl	f550 <assert_post_action>
	__asm__ volatile(
    38a4:	f38a 8811 	msr	BASEPRI, sl
    38a8:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    38ac:	f1b8 0f00 	cmp.w	r8, #0
    38b0:	d017      	beq.n	38e2 <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
    38b2:	2300      	movs	r3, #0
    38b4:	4632      	mov	r2, r6
    38b6:	4639      	mov	r1, r7
    38b8:	4620      	mov	r0, r4
    38ba:	f00b fdba 	bl	f432 <notify_one>
    38be:	e010      	b.n	38e2 <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
    38c0:	0793      	lsls	r3, r2, #30
    38c2:	d001      	beq.n	38c8 <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
    38c4:	2e06      	cmp	r6, #6
    38c6:	d10f      	bne.n	38e8 <onoff_request+0xc0>
	parent->next = child;
    38c8:	2300      	movs	r3, #0
    38ca:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
    38cc:	6863      	ldr	r3, [r4, #4]
    38ce:	b9eb      	cbnz	r3, 390c <onoff_request+0xe4>
	list->head = node;
    38d0:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    38d4:	4635      	mov	r5, r6
    38d6:	b9f6      	cbnz	r6, 3916 <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
    38d8:	4652      	mov	r2, sl
    38da:	2102      	movs	r1, #2
    38dc:	4620      	mov	r0, r4
    38de:	f7ff fdbf 	bl	3460 <process_event>
		}
	}

	return rv;
}
    38e2:	4628      	mov	r0, r5
    38e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    38e8:	2e05      	cmp	r6, #5
    38ea:	d017      	beq.n	391c <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    38ec:	2e01      	cmp	r6, #1
    38ee:	d00a      	beq.n	3906 <onoff_request+0xde>
    38f0:	490e      	ldr	r1, [pc, #56]	; (392c <onoff_request+0x104>)
    38f2:	480d      	ldr	r0, [pc, #52]	; (3928 <onoff_request+0x100>)
    38f4:	f240 12c9 	movw	r2, #457	; 0x1c9
    38f8:	f00b fd65 	bl	f3c6 <printk>
    38fc:	480b      	ldr	r0, [pc, #44]	; (392c <onoff_request+0x104>)
    38fe:	f240 11c9 	movw	r1, #457	; 0x1c9
    3902:	f00b fe25 	bl	f550 <assert_post_action>
		rv = -EIO;
    3906:	f06f 0504 	mvn.w	r5, #4
    390a:	e004      	b.n	3916 <onoff_request+0xee>
	parent->next = child;
    390c:	601f      	str	r7, [r3, #0]
	list->tail = node;
    390e:	6067      	str	r7, [r4, #4]
}
    3910:	e7e0      	b.n	38d4 <onoff_request+0xac>
		rv = -EAGAIN;
    3912:	f06f 050a 	mvn.w	r5, #10
    3916:	f04f 0800 	mov.w	r8, #0
    391a:	e7b6      	b.n	388a <onoff_request+0x62>
		rv = -ENOTSUP;
    391c:	f06f 0585 	mvn.w	r5, #133	; 0x85
    3920:	e7f9      	b.n	3916 <onoff_request+0xee>
    3922:	bf00      	nop
    3924:	00013b71 	.word	0x00013b71
    3928:	00013904 	.word	0x00013904
    392c:	00013b4f 	.word	0x00013b4f

00003930 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    3930:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    3932:	4e09      	ldr	r6, [pc, #36]	; (3958 <extract_decimal+0x28>)
    3934:	6801      	ldr	r1, [r0, #0]
{
    3936:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
    3938:	270a      	movs	r7, #10
	size_t val = 0;
    393a:	2000      	movs	r0, #0
    393c:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
    393e:	3101      	adds	r1, #1
    3940:	7823      	ldrb	r3, [r4, #0]
    3942:	5d9d      	ldrb	r5, [r3, r6]
    3944:	076d      	lsls	r5, r5, #29
    3946:	d401      	bmi.n	394c <extract_decimal+0x1c>
	}
	*str = sp;
    3948:	6014      	str	r4, [r2, #0]
	return val;
}
    394a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    394c:	fb07 3300 	mla	r3, r7, r0, r3
    3950:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    3954:	e7f2      	b.n	393c <extract_decimal+0xc>
    3956:	bf00      	nop
    3958:	00014c37 	.word	0x00014c37

0000395c <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    395c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3960:	4614      	mov	r4, r2
    3962:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    3964:	78d3      	ldrb	r3, [r2, #3]
    3966:	4a24      	ldr	r2, [pc, #144]	; (39f8 <encode_uint+0x9c>)
    3968:	f813 a002 	ldrb.w	sl, [r3, r2]
	switch (specifier) {
    396c:	2b6f      	cmp	r3, #111	; 0x6f
    396e:	f00a 0203 	and.w	r2, sl, #3
{
    3972:	4606      	mov	r6, r0
    3974:	460f      	mov	r7, r1
    3976:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    3978:	d02d      	beq.n	39d6 <encode_uint+0x7a>
    397a:	d828      	bhi.n	39ce <encode_uint+0x72>
		return 16;
    397c:	2b58      	cmp	r3, #88	; 0x58
    397e:	bf14      	ite	ne
    3980:	250a      	movne	r5, #10
    3982:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    3984:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    3988:	46aa      	mov	sl, r5
    398a:	f04f 0b00 	mov.w	fp, #0
    398e:	4652      	mov	r2, sl
    3990:	465b      	mov	r3, fp
    3992:	4630      	mov	r0, r6
    3994:	4639      	mov	r1, r7
    3996:	f7fd fb93 	bl	10c0 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    399a:	2a09      	cmp	r2, #9
    399c:	b2d3      	uxtb	r3, r2
    399e:	d81f      	bhi.n	39e0 <encode_uint+0x84>
    39a0:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    39a2:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    39a4:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    39a6:	bf08      	it	eq
    39a8:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    39aa:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    39ae:	d301      	bcc.n	39b4 <encode_uint+0x58>
    39b0:	45c8      	cmp	r8, r9
    39b2:	d812      	bhi.n	39da <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    39b4:	7823      	ldrb	r3, [r4, #0]
    39b6:	069b      	lsls	r3, r3, #26
    39b8:	d505      	bpl.n	39c6 <encode_uint+0x6a>
		if (radix == 8) {
    39ba:	2d08      	cmp	r5, #8
    39bc:	d116      	bne.n	39ec <encode_uint+0x90>
			conv->altform_0 = true;
    39be:	78a3      	ldrb	r3, [r4, #2]
    39c0:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    39c4:	70a3      	strb	r3, [r4, #2]
			;
		}
	}

	return bp;
}
    39c6:	4640      	mov	r0, r8
    39c8:	b003      	add	sp, #12
    39ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    39ce:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    39d2:	2b70      	cmp	r3, #112	; 0x70
    39d4:	e7d3      	b.n	397e <encode_uint+0x22>
	switch (specifier) {
    39d6:	2508      	movs	r5, #8
    39d8:	e7d4      	b.n	3984 <encode_uint+0x28>
		value /= radix;
    39da:	4606      	mov	r6, r0
    39dc:	460f      	mov	r7, r1
    39de:	e7d6      	b.n	398e <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    39e0:	9a01      	ldr	r2, [sp, #4]
    39e2:	2a01      	cmp	r2, #1
    39e4:	bf0c      	ite	eq
    39e6:	3337      	addeq	r3, #55	; 0x37
    39e8:	3357      	addne	r3, #87	; 0x57
    39ea:	e7da      	b.n	39a2 <encode_uint+0x46>
		} else if (radix == 16) {
    39ec:	2d10      	cmp	r5, #16
    39ee:	d1ea      	bne.n	39c6 <encode_uint+0x6a>
			conv->altform_0c = true;
    39f0:	78a3      	ldrb	r3, [r4, #2]
    39f2:	f043 0310 	orr.w	r3, r3, #16
    39f6:	e7e5      	b.n	39c4 <encode_uint+0x68>
    39f8:	00014c37 	.word	0x00014c37

000039fc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    39fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a00:	b0a3      	sub	sp, #140	; 0x8c
    3a02:	4688      	mov	r8, r1
    3a04:	9006      	str	r0, [sp, #24]
    3a06:	4691      	mov	r9, r2
    3a08:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    3a0a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    3a0c:	f899 0000 	ldrb.w	r0, [r9]
    3a10:	b910      	cbnz	r0, 3a18 <cbvprintf+0x1c>
			OUTC(' ');
			--width;
		}
	}

	return count;
    3a12:	4628      	mov	r0, r5
    3a14:	f000 bdae 	b.w	4574 <cbvprintf+0xb78>
		if (*fp != '%') {
    3a18:	f109 0301 	add.w	r3, r9, #1
    3a1c:	2825      	cmp	r0, #37	; 0x25
    3a1e:	9307      	str	r3, [sp, #28]
    3a20:	d007      	beq.n	3a32 <cbvprintf+0x36>
			OUTC(*fp++);
    3a22:	4641      	mov	r1, r8
			OUTC('%');
    3a24:	9b06      	ldr	r3, [sp, #24]
    3a26:	4798      	blx	r3
    3a28:	2800      	cmp	r0, #0
    3a2a:	f2c0 85a3 	blt.w	4574 <cbvprintf+0xb78>
    3a2e:	3501      	adds	r5, #1
		if (bps == NULL) {
    3a30:	e224      	b.n	3e7c <cbvprintf+0x480>
		} state = {
    3a32:	2218      	movs	r2, #24
    3a34:	2100      	movs	r1, #0
    3a36:	a814      	add	r0, sp, #80	; 0x50
    3a38:	f00e fc64 	bl	12304 <memset>
	if (*sp == '%') {
    3a3c:	f899 3001 	ldrb.w	r3, [r9, #1]
    3a40:	2b25      	cmp	r3, #37	; 0x25
    3a42:	d059      	beq.n	3af8 <cbvprintf+0xfc>
    3a44:	9a07      	ldr	r2, [sp, #28]
    3a46:	4616      	mov	r6, r2
		switch (*sp) {
    3a48:	f812 3b01 	ldrb.w	r3, [r2], #1
    3a4c:	2b2b      	cmp	r3, #43	; 0x2b
    3a4e:	f000 808b 	beq.w	3b68 <cbvprintf+0x16c>
    3a52:	d879      	bhi.n	3b48 <cbvprintf+0x14c>
    3a54:	2b20      	cmp	r3, #32
    3a56:	f000 808c 	beq.w	3b72 <cbvprintf+0x176>
    3a5a:	2b23      	cmp	r3, #35	; 0x23
    3a5c:	f000 808e 	beq.w	3b7c <cbvprintf+0x180>
	if (conv->flag_zero && conv->flag_dash) {
    3a60:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    3a64:	f003 0244 	and.w	r2, r3, #68	; 0x44
    3a68:	2a44      	cmp	r2, #68	; 0x44
    3a6a:	d103      	bne.n	3a74 <cbvprintf+0x78>
		conv->flag_zero = false;
    3a6c:	f36f 1386 	bfc	r3, #6, #1
    3a70:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	conv->width_present = true;
    3a74:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    3a78:	9612      	str	r6, [sp, #72]	; 0x48
    3a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3a7e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	if (*sp == '*') {
    3a82:	7833      	ldrb	r3, [r6, #0]
    3a84:	2b2a      	cmp	r3, #42	; 0x2a
    3a86:	d17e      	bne.n	3b86 <cbvprintf+0x18a>
		conv->width_star = true;
    3a88:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    3a8c:	f043 0301 	orr.w	r3, r3, #1
    3a90:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
		return ++sp;
    3a94:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
    3a96:	9312      	str	r3, [sp, #72]	; 0x48
	conv->prec_present = (*sp == '.');
    3a98:	781a      	ldrb	r2, [r3, #0]
    3a9a:	2a2e      	cmp	r2, #46	; 0x2e
    3a9c:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
    3aa0:	bf0c      	ite	eq
    3aa2:	2101      	moveq	r1, #1
    3aa4:	2100      	movne	r1, #0
    3aa6:	f361 0241 	bfi	r2, r1, #1, #1
    3aaa:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
	if (!conv->prec_present) {
    3aae:	d10b      	bne.n	3ac8 <cbvprintf+0xcc>
	++sp;
    3ab0:	1c5a      	adds	r2, r3, #1
    3ab2:	9212      	str	r2, [sp, #72]	; 0x48
	if (*sp == '*') {
    3ab4:	785a      	ldrb	r2, [r3, #1]
    3ab6:	2a2a      	cmp	r2, #42	; 0x2a
    3ab8:	d17b      	bne.n	3bb2 <cbvprintf+0x1b6>
		conv->prec_star = true;
    3aba:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
    3abe:	f042 0204 	orr.w	r2, r2, #4
    3ac2:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
		return ++sp;
    3ac6:	3302      	adds	r3, #2
	switch (*sp) {
    3ac8:	461a      	mov	r2, r3
    3aca:	f812 0b01 	ldrb.w	r0, [r2], #1
    3ace:	286c      	cmp	r0, #108	; 0x6c
    3ad0:	f000 80cf 	beq.w	3c72 <cbvprintf+0x276>
    3ad4:	d87d      	bhi.n	3bd2 <cbvprintf+0x1d6>
    3ad6:	2868      	cmp	r0, #104	; 0x68
    3ad8:	f000 8084 	beq.w	3be4 <cbvprintf+0x1e8>
    3adc:	286a      	cmp	r0, #106	; 0x6a
    3ade:	f000 80d2 	beq.w	3c86 <cbvprintf+0x28a>
    3ae2:	284c      	cmp	r0, #76	; 0x4c
    3ae4:	f000 80d6 	beq.w	3c94 <cbvprintf+0x298>
		conv->length_mod = LENGTH_NONE;
    3ae8:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
    3aec:	f36f 02c6 	bfc	r2, #3, #4
    3af0:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
		break;
    3af4:	461a      	mov	r2, r3
    3af6:	e080      	b.n	3bfa <cbvprintf+0x1fe>
		conv->specifier = *sp++;
    3af8:	f109 0202 	add.w	r2, r9, #2
    3afc:	9207      	str	r2, [sp, #28]
    3afe:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
		if (conv->width_star) {
    3b02:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    3b06:	07de      	lsls	r6, r3, #31
    3b08:	f140 816d 	bpl.w	3de6 <cbvprintf+0x3ea>
			width = va_arg(ap, int);
    3b0c:	f854 ab04 	ldr.w	sl, [r4], #4
			if (width < 0) {
    3b10:	f1ba 0f00 	cmp.w	sl, #0
    3b14:	da07      	bge.n	3b26 <cbvprintf+0x12a>
				conv->flag_dash = true;
    3b16:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
    3b1a:	f042 0204 	orr.w	r2, r2, #4
    3b1e:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
				width = -width;
    3b22:	f1ca 0a00 	rsb	sl, sl, #0
		if (conv->prec_star) {
    3b26:	0758      	lsls	r0, r3, #29
    3b28:	f140 8166 	bpl.w	3df8 <cbvprintf+0x3fc>
			int arg = va_arg(ap, int);
    3b2c:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    3b30:	2f00      	cmp	r7, #0
    3b32:	f280 8165 	bge.w	3e00 <cbvprintf+0x404>
				conv->prec_present = false;
    3b36:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    3b3a:	f36f 0341 	bfc	r3, #1, #1
    3b3e:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
		int precision = -1;
    3b42:	f04f 37ff 	mov.w	r7, #4294967295
    3b46:	e15b      	b.n	3e00 <cbvprintf+0x404>
		switch (*sp) {
    3b48:	2b2d      	cmp	r3, #45	; 0x2d
    3b4a:	d006      	beq.n	3b5a <cbvprintf+0x15e>
    3b4c:	2b30      	cmp	r3, #48	; 0x30
    3b4e:	d187      	bne.n	3a60 <cbvprintf+0x64>
			conv->flag_zero = true;
    3b50:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    3b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3b58:	e003      	b.n	3b62 <cbvprintf+0x166>
			conv->flag_dash = true;
    3b5a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    3b5e:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    3b62:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
			break;
    3b66:	e76e      	b.n	3a46 <cbvprintf+0x4a>
			conv->flag_plus = true;
    3b68:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    3b6c:	f043 0308 	orr.w	r3, r3, #8
    3b70:	e7f7      	b.n	3b62 <cbvprintf+0x166>
			conv->flag_space = true;
    3b72:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    3b76:	f043 0310 	orr.w	r3, r3, #16
    3b7a:	e7f2      	b.n	3b62 <cbvprintf+0x166>
			conv->flag_hash = true;
    3b7c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    3b80:	f043 0320 	orr.w	r3, r3, #32
    3b84:	e7ed      	b.n	3b62 <cbvprintf+0x166>
	size_t width = extract_decimal(&sp);
    3b86:	a812      	add	r0, sp, #72	; 0x48
    3b88:	f7ff fed2 	bl	3930 <extract_decimal>
	if (sp != wp) {
    3b8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3b8e:	42b3      	cmp	r3, r6
    3b90:	d081      	beq.n	3a96 <cbvprintf+0x9a>
		conv->unsupported |= ((conv->width_value < 0)
    3b92:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
		conv->width_value = width;
    3b96:	9017      	str	r0, [sp, #92]	; 0x5c
		conv->unsupported |= ((conv->width_value < 0)
    3b98:	f3c1 0240 	ubfx	r2, r1, #1, #1
    3b9c:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    3ba0:	0052      	lsls	r2, r2, #1
    3ba2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3ba6:	f001 017d 	and.w	r1, r1, #125	; 0x7d
    3baa:	430a      	orrs	r2, r1
    3bac:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
    3bb0:	e771      	b.n	3a96 <cbvprintf+0x9a>
	size_t prec = extract_decimal(&sp);
    3bb2:	a812      	add	r0, sp, #72	; 0x48
    3bb4:	f7ff febc 	bl	3930 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    3bb8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
	conv->prec_value = prec;
    3bbc:	9018      	str	r0, [sp, #96]	; 0x60
	conv->unsupported |= ((conv->prec_value < 0)
    3bbe:	f3c3 0240 	ubfx	r2, r3, #1, #1
    3bc2:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
    3bc6:	f360 0341 	bfi	r3, r0, #1, #1
    3bca:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	return sp;
    3bce:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3bd0:	e77a      	b.n	3ac8 <cbvprintf+0xcc>
	switch (*sp) {
    3bd2:	2874      	cmp	r0, #116	; 0x74
    3bd4:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
    3bd8:	d059      	beq.n	3c8e <cbvprintf+0x292>
    3bda:	287a      	cmp	r0, #122	; 0x7a
    3bdc:	d184      	bne.n	3ae8 <cbvprintf+0xec>
		conv->length_mod = LENGTH_Z;
    3bde:	460b      	mov	r3, r1
    3be0:	2106      	movs	r1, #6
    3be2:	e041      	b.n	3c68 <cbvprintf+0x26c>
		if (*++sp == 'h') {
    3be4:	7859      	ldrb	r1, [r3, #1]
    3be6:	2968      	cmp	r1, #104	; 0x68
    3be8:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
    3bec:	d13a      	bne.n	3c64 <cbvprintf+0x268>
			conv->length_mod = LENGTH_HH;
    3bee:	2201      	movs	r2, #1
			conv->length_mod = LENGTH_LL;
    3bf0:	f362 01c6 	bfi	r1, r2, #3, #4
    3bf4:	f88d 1059 	strb.w	r1, [sp, #89]	; 0x59
			++sp;
    3bf8:	1c9a      	adds	r2, r3, #2
	conv->specifier = *sp++;
    3bfa:	4613      	mov	r3, r2
    3bfc:	f813 2b01 	ldrb.w	r2, [r3], #1
    3c00:	9307      	str	r3, [sp, #28]
	switch (conv->specifier) {
    3c02:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    3c04:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
	switch (conv->specifier) {
    3c08:	f200 80c5 	bhi.w	3d96 <cbvprintf+0x39a>
    3c0c:	2a57      	cmp	r2, #87	; 0x57
    3c0e:	d84e      	bhi.n	3cae <cbvprintf+0x2b2>
    3c10:	2a41      	cmp	r2, #65	; 0x41
    3c12:	d004      	beq.n	3c1e <cbvprintf+0x222>
    3c14:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    3c18:	2b02      	cmp	r3, #2
    3c1a:	f200 80bc 	bhi.w	3d96 <cbvprintf+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    3c1e:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
			|| (conv->specifier == 'A');
    3c22:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    3c26:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    3c28:	f1a2 0a41 	sub.w	sl, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    3c2c:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    3c30:	f1da 0200 	rsbs	r2, sl, #0
		conv->specifier_a = (conv->specifier == 'a')
    3c34:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
		conv->specifier_cat = SPECIFIER_FP;
    3c38:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
			|| (conv->specifier == 'A');
    3c3c:	eb42 020a 	adc.w	r2, r2, sl
		conv->specifier_a = (conv->specifier == 'a')
    3c40:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    3c44:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    3c46:	f88d 1059 	strb.w	r1, [sp, #89]	; 0x59
		if (conv->specifier_a
    3c4a:	b2cb      	uxtb	r3, r1
    3c4c:	f100 80c9 	bmi.w	3de2 <cbvprintf+0x3e6>
		if (conv->length_mod == LENGTH_L) {
    3c50:	f003 0278 	and.w	r2, r3, #120	; 0x78
    3c54:	2a18      	cmp	r2, #24
    3c56:	f040 809b 	bne.w	3d90 <cbvprintf+0x394>
			conv->length_mod = LENGTH_NONE;
    3c5a:	f36f 03c6 	bfc	r3, #3, #4
    3c5e:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
    3c62:	e082      	b.n	3d6a <cbvprintf+0x36e>
			conv->length_mod = LENGTH_H;
    3c64:	460b      	mov	r3, r1
    3c66:	2102      	movs	r1, #2
			conv->length_mod = LENGTH_L;
    3c68:	f361 03c6 	bfi	r3, r1, #3, #4
    3c6c:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
    3c70:	e7c3      	b.n	3bfa <cbvprintf+0x1fe>
		if (*++sp == 'l') {
    3c72:	7859      	ldrb	r1, [r3, #1]
    3c74:	296c      	cmp	r1, #108	; 0x6c
    3c76:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
    3c7a:	d101      	bne.n	3c80 <cbvprintf+0x284>
			conv->length_mod = LENGTH_LL;
    3c7c:	2204      	movs	r2, #4
    3c7e:	e7b7      	b.n	3bf0 <cbvprintf+0x1f4>
			conv->length_mod = LENGTH_L;
    3c80:	460b      	mov	r3, r1
    3c82:	2103      	movs	r1, #3
    3c84:	e7f0      	b.n	3c68 <cbvprintf+0x26c>
		conv->length_mod = LENGTH_J;
    3c86:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    3c8a:	2105      	movs	r1, #5
    3c8c:	e7ec      	b.n	3c68 <cbvprintf+0x26c>
		conv->length_mod = LENGTH_T;
    3c8e:	460b      	mov	r3, r1
    3c90:	2107      	movs	r1, #7
    3c92:	e7e9      	b.n	3c68 <cbvprintf+0x26c>
		conv->unsupported = true;
    3c94:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    3c98:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    3c9c:	f023 0302 	bic.w	r3, r3, #2
    3ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    3ca4:	f043 0302 	orr.w	r3, r3, #2
    3ca8:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
		break;
    3cac:	e7a5      	b.n	3bfa <cbvprintf+0x1fe>
    3cae:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    3cb2:	2b20      	cmp	r3, #32
    3cb4:	d86f      	bhi.n	3d96 <cbvprintf+0x39a>
    3cb6:	a101      	add	r1, pc, #4	; (adr r1, 3cbc <cbvprintf+0x2c0>)
    3cb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    3cbc:	00003d6f 	.word	0x00003d6f
    3cc0:	00003d97 	.word	0x00003d97
    3cc4:	00003d97 	.word	0x00003d97
    3cc8:	00003d97 	.word	0x00003d97
    3ccc:	00003d97 	.word	0x00003d97
    3cd0:	00003d97 	.word	0x00003d97
    3cd4:	00003d97 	.word	0x00003d97
    3cd8:	00003d97 	.word	0x00003d97
    3cdc:	00003d97 	.word	0x00003d97
    3ce0:	00003c1f 	.word	0x00003c1f
    3ce4:	00003d97 	.word	0x00003d97
    3ce8:	00003d6f 	.word	0x00003d6f
    3cec:	00003d41 	.word	0x00003d41
    3cf0:	00003c1f 	.word	0x00003c1f
    3cf4:	00003c1f 	.word	0x00003c1f
    3cf8:	00003c1f 	.word	0x00003c1f
    3cfc:	00003d97 	.word	0x00003d97
    3d00:	00003d41 	.word	0x00003d41
    3d04:	00003d97 	.word	0x00003d97
    3d08:	00003d97 	.word	0x00003d97
    3d0c:	00003d97 	.word	0x00003d97
    3d10:	00003d97 	.word	0x00003d97
    3d14:	00003da5 	.word	0x00003da5
    3d18:	00003d6f 	.word	0x00003d6f
    3d1c:	00003dc5 	.word	0x00003dc5
    3d20:	00003d97 	.word	0x00003d97
    3d24:	00003d97 	.word	0x00003d97
    3d28:	00003dc5 	.word	0x00003dc5
    3d2c:	00003d97 	.word	0x00003d97
    3d30:	00003d6f 	.word	0x00003d6f
    3d34:	00003d97 	.word	0x00003d97
    3d38:	00003d97 	.word	0x00003d97
    3d3c:	00003d6f 	.word	0x00003d6f
		conv->specifier_cat = SPECIFIER_SINT;
    3d40:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
    3d44:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    3d46:	f361 0302 	bfi	r3, r1, #0, #3
    3d4a:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		if (conv->length_mod == LENGTH_UPPER_L) {
    3d4e:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    3d52:	f003 0378 	and.w	r3, r3, #120	; 0x78
    3d56:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    3d58:	bf02      	ittt	eq
    3d5a:	f89d 1058 	ldrbeq.w	r1, [sp, #88]	; 0x58
    3d5e:	f041 0101 	orreq.w	r1, r1, #1
    3d62:	f88d 1058 	strbeq.w	r1, [sp, #88]	; 0x58
		if (conv->specifier == 'c') {
    3d66:	2a63      	cmp	r2, #99	; 0x63
    3d68:	d005      	beq.n	3d76 <cbvprintf+0x37a>
	bool unsupported = false;
    3d6a:	2300      	movs	r3, #0
    3d6c:	e006      	b.n	3d7c <cbvprintf+0x380>
		conv->specifier_cat = SPECIFIER_UINT;
    3d6e:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
    3d72:	2102      	movs	r1, #2
    3d74:	e7e7      	b.n	3d46 <cbvprintf+0x34a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    3d76:	3b00      	subs	r3, #0
    3d78:	bf18      	it	ne
    3d7a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    3d7c:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
    3d80:	f3c2 0140 	ubfx	r1, r2, #1, #1
    3d84:	430b      	orrs	r3, r1
    3d86:	f363 0241 	bfi	r2, r3, #1, #1
    3d8a:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
	return sp;
    3d8e:	e6b8      	b.n	3b02 <cbvprintf+0x106>
		} else if ((conv->length_mod != LENGTH_NONE)
    3d90:	f013 0f38 	tst.w	r3, #56	; 0x38
    3d94:	d0e9      	beq.n	3d6a <cbvprintf+0x36e>
			conv->invalid = true;
    3d96:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    3d9a:	f043 0301 	orr.w	r3, r3, #1
    3d9e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    3da2:	e7e2      	b.n	3d6a <cbvprintf+0x36e>
		conv->specifier_cat = SPECIFIER_PTR;
    3da4:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
    3da8:	2203      	movs	r2, #3
    3daa:	f362 0302 	bfi	r3, r2, #0, #3
    3dae:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		if (conv->length_mod == LENGTH_UPPER_L) {
    3db2:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    3db6:	f003 0378 	and.w	r3, r3, #120	; 0x78
    3dba:	f1a3 0740 	sub.w	r7, r3, #64	; 0x40
    3dbe:	427b      	negs	r3, r7
    3dc0:	417b      	adcs	r3, r7
    3dc2:	e7db      	b.n	3d7c <cbvprintf+0x380>
		conv->specifier_cat = SPECIFIER_PTR;
    3dc4:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
    3dc8:	2203      	movs	r2, #3
    3dca:	f362 0302 	bfi	r3, r2, #0, #3
    3dce:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		if (conv->length_mod != LENGTH_NONE) {
    3dd2:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    3dd6:	f013 0f78 	tst.w	r3, #120	; 0x78
    3dda:	bf14      	ite	ne
    3ddc:	2301      	movne	r3, #1
    3dde:	2300      	moveq	r3, #0
    3de0:	e7cc      	b.n	3d7c <cbvprintf+0x380>
			unsupported = true;
    3de2:	2301      	movs	r3, #1
    3de4:	e7ca      	b.n	3d7c <cbvprintf+0x380>
		} else if (conv->width_present) {
    3de6:	f99d 2058 	ldrsb.w	r2, [sp, #88]	; 0x58
    3dea:	2a00      	cmp	r2, #0
			width = conv->width_value;
    3dec:	bfb4      	ite	lt
    3dee:	f8dd a05c 	ldrlt.w	sl, [sp, #92]	; 0x5c
		int width = -1;
    3df2:	f04f 3aff 	movge.w	sl, #4294967295
    3df6:	e696      	b.n	3b26 <cbvprintf+0x12a>
		} else if (conv->prec_present) {
    3df8:	0799      	lsls	r1, r3, #30
    3dfa:	f57f aea2 	bpl.w	3b42 <cbvprintf+0x146>
			precision = conv->prec_value;
    3dfe:	9f18      	ldr	r7, [sp, #96]	; 0x60
		conv->pad0_value = 0;
    3e00:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    3e02:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
		    && (conv->specifier_cat == SPECIFIER_FP)
    3e06:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    3e0a:	f003 0307 	and.w	r3, r3, #7
    3e0e:	2b04      	cmp	r3, #4
    3e10:	d109      	bne.n	3e26 <cbvprintf+0x42a>
		    && !conv->prec_present) {
    3e12:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    3e16:	079a      	lsls	r2, r3, #30
    3e18:	d405      	bmi.n	3e26 <cbvprintf+0x42a>
			if (conv->specifier_a) {
    3e1a:	f99d 3059 	ldrsb.w	r3, [sp, #89]	; 0x59
				precision = 6;
    3e1e:	2b00      	cmp	r3, #0
    3e20:	bfb4      	ite	lt
    3e22:	270d      	movlt	r7, #13
    3e24:	2706      	movge	r7, #6
			= (enum specifier_cat_enum)conv->specifier_cat;
    3e26:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
			= (enum length_mod_enum)conv->length_mod;
    3e2a:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
		enum specifier_cat_enum specifier_cat
    3e2e:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    3e32:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    3e34:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    3e38:	d136      	bne.n	3ea8 <cbvprintf+0x4ac>
			switch (length_mod) {
    3e3a:	1ecb      	subs	r3, r1, #3
    3e3c:	2b04      	cmp	r3, #4
    3e3e:	d820      	bhi.n	3e82 <cbvprintf+0x486>
    3e40:	e8df f003 	tbb	[pc, r3]
    3e44:	1f070703 	.word	0x1f070703
    3e48:	1f          	.byte	0x1f
    3e49:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    3e4a:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
    3e4e:	17d3      	asrs	r3, r2, #31
    3e50:	e004      	b.n	3e5c <cbvprintf+0x460>
					(sint_value_type)va_arg(ap, intmax_t);
    3e52:	3407      	adds	r4, #7
    3e54:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    3e58:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
    3e5c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		if (conv->invalid || conv->unsupported) {
    3e60:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
    3e64:	07b3      	lsls	r3, r6, #30
    3e66:	d055      	beq.n	3f14 <cbvprintf+0x518>
			OUTS(sp, fp);
    3e68:	9b07      	ldr	r3, [sp, #28]
    3e6a:	9806      	ldr	r0, [sp, #24]
    3e6c:	464a      	mov	r2, r9
    3e6e:	4641      	mov	r1, r8
    3e70:	f00b fb58 	bl	f524 <outs>
    3e74:	2800      	cmp	r0, #0
    3e76:	f2c0 837d 	blt.w	4574 <cbvprintf+0xb78>
    3e7a:	4405      	add	r5, r0
			while (pad_len-- > 0) {
    3e7c:	f8dd 901c 	ldr.w	r9, [sp, #28]
    3e80:	e5c4      	b.n	3a0c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    3e82:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
    3e86:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    3e88:	ea4f 73e2 	mov.w	r3, r2, asr #31
    3e8c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
			if (length_mod == LENGTH_HH) {
    3e90:	d105      	bne.n	3e9e <cbvprintf+0x4a2>
				value->uint = (unsigned char)value->uint;
    3e92:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
				value->uint = (unsigned short)value->uint;
    3e96:	9314      	str	r3, [sp, #80]	; 0x50
    3e98:	2300      	movs	r3, #0
    3e9a:	9315      	str	r3, [sp, #84]	; 0x54
    3e9c:	e7e0      	b.n	3e60 <cbvprintf+0x464>
			} else if (length_mod == LENGTH_H) {
    3e9e:	2902      	cmp	r1, #2
    3ea0:	d1de      	bne.n	3e60 <cbvprintf+0x464>
				value->sint = (short)value->sint;
    3ea2:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	; 0x50
    3ea6:	e7d2      	b.n	3e4e <cbvprintf+0x452>
		} else if (specifier_cat == SPECIFIER_UINT) {
    3ea8:	2b02      	cmp	r3, #2
    3eaa:	d123      	bne.n	3ef4 <cbvprintf+0x4f8>
			switch (length_mod) {
    3eac:	1ecb      	subs	r3, r1, #3
    3eae:	2b04      	cmp	r3, #4
    3eb0:	d813      	bhi.n	3eda <cbvprintf+0x4de>
    3eb2:	e8df f003 	tbb	[pc, r3]
    3eb6:	0a03      	.short	0x0a03
    3eb8:	120a      	.short	0x120a
    3eba:	12          	.byte	0x12
    3ebb:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    3ebc:	6822      	ldr	r2, [r4, #0]
    3ebe:	9214      	str	r2, [sp, #80]	; 0x50
    3ec0:	2300      	movs	r3, #0
    3ec2:	1d20      	adds	r0, r4, #4
    3ec4:	9315      	str	r3, [sp, #84]	; 0x54
					(uint_value_type)va_arg(ap, size_t);
    3ec6:	4604      	mov	r4, r0
    3ec8:	e7ca      	b.n	3e60 <cbvprintf+0x464>
					(uint_value_type)va_arg(ap,
    3eca:	3407      	adds	r4, #7
    3ecc:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
    3ed0:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    3ed4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
				break;
    3ed8:	e7f5      	b.n	3ec6 <cbvprintf+0x4ca>
					(uint_value_type)va_arg(ap, size_t);
    3eda:	f854 3b04 	ldr.w	r3, [r4], #4
    3ede:	9314      	str	r3, [sp, #80]	; 0x50
			if (length_mod == LENGTH_HH) {
    3ee0:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    3ee2:	f04f 0300 	mov.w	r3, #0
    3ee6:	9315      	str	r3, [sp, #84]	; 0x54
			if (length_mod == LENGTH_HH) {
    3ee8:	d0d3      	beq.n	3e92 <cbvprintf+0x496>
			} else if (length_mod == LENGTH_H) {
    3eea:	2902      	cmp	r1, #2
    3eec:	d1b8      	bne.n	3e60 <cbvprintf+0x464>
				value->uint = (unsigned short)value->uint;
    3eee:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    3ef2:	e7d0      	b.n	3e96 <cbvprintf+0x49a>
		} else if (specifier_cat == SPECIFIER_FP) {
    3ef4:	2b04      	cmp	r3, #4
    3ef6:	d107      	bne.n	3f08 <cbvprintf+0x50c>
			if (length_mod == LENGTH_UPPER_L) {
    3ef8:	3407      	adds	r4, #7
    3efa:	f024 0407 	bic.w	r4, r4, #7
    3efe:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
    3f02:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    3f06:	e7ab      	b.n	3e60 <cbvprintf+0x464>
		} else if (specifier_cat == SPECIFIER_PTR) {
    3f08:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    3f0a:	bf04      	itt	eq
    3f0c:	f854 3b04 	ldreq.w	r3, [r4], #4
    3f10:	9314      	streq	r3, [sp, #80]	; 0x50
    3f12:	e7a5      	b.n	3e60 <cbvprintf+0x464>
		switch (conv->specifier) {
    3f14:	f89d 905b 	ldrb.w	r9, [sp, #91]	; 0x5b
    3f18:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    3f1c:	d8ae      	bhi.n	3e7c <cbvprintf+0x480>
    3f1e:	f1b9 0f57 	cmp.w	r9, #87	; 0x57
    3f22:	f200 80a6 	bhi.w	4072 <cbvprintf+0x676>
    3f26:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    3f2a:	f000 80ed 	beq.w	4108 <cbvprintf+0x70c>
    3f2e:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
    3f32:	d9a3      	bls.n	3e7c <cbvprintf+0x480>
    3f34:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
    3f38:	d003      	beq.n	3f42 <cbvprintf+0x546>
    3f3a:	f1a9 0345 	sub.w	r3, r9, #69	; 0x45
    3f3e:	2b02      	cmp	r3, #2
    3f40:	d89c      	bhi.n	3e7c <cbvprintf+0x480>
	} u = {
    3f42:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
	if ((u.u64 & SIGN_MASK) != 0U) {
    3f46:	2a00      	cmp	r2, #0
    3f48:	f173 0100 	sbcs.w	r1, r3, #0
    3f4c:	f2c0 8186 	blt.w	425c <cbvprintf+0x860>
	} else if (conv->flag_plus) {
    3f50:	0731      	lsls	r1, r6, #28
    3f52:	f100 8185 	bmi.w	4260 <cbvprintf+0x864>
		*sign = ' ';
    3f56:	f016 0610 	ands.w	r6, r6, #16
    3f5a:	bf18      	it	ne
    3f5c:	2620      	movne	r6, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    3f5e:	f3c3 5b0a 	ubfx	fp, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    3f62:	f3c3 0313 	ubfx	r3, r3, #0, #20
    3f66:	9204      	str	r2, [sp, #16]
    3f68:	9305      	str	r3, [sp, #20]
    3f6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    3f6e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	bool is_subnormal = (expo == 0) && (fract != 0);
    3f72:	f1bb 0f00 	cmp.w	fp, #0
    3f76:	f040 8175 	bne.w	4264 <cbvprintf+0x868>
    3f7a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
    3f7e:	4313      	orrs	r3, r2
    3f80:	bf14      	ite	ne
    3f82:	f04f 0c01 	movne.w	ip, #1
    3f86:	f04f 0c00 	moveq.w	ip, #0
	fract <<= EXPONENT_BITS;
    3f8a:	9905      	ldr	r1, [sp, #20]
    3f8c:	02cb      	lsls	r3, r1, #11
    3f8e:	9904      	ldr	r1, [sp, #16]
    3f90:	02ca      	lsls	r2, r1, #11
    3f92:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
	if ((expo | fract) != 0) {
    3f96:	4658      	mov	r0, fp
    3f98:	ea4b 0102 	orr.w	r1, fp, r2
    3f9c:	910a      	str	r1, [sp, #40]	; 0x28
    3f9e:	17c1      	asrs	r1, r0, #31
    3fa0:	4319      	orrs	r1, r3
    3fa2:	910b      	str	r1, [sp, #44]	; 0x2c
    3fa4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
		c = 'f';
    3fa8:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
    3fac:	bf08      	it	eq
    3fae:	f04f 0966 	moveq.w	r9, #102	; 0x66
	if ((expo | fract) != 0) {
    3fb2:	4301      	orrs	r1, r0
	fract &= ~SIGN_MASK;
    3fb4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if ((expo | fract) != 0) {
    3fb8:	f000 81c8 	beq.w	434c <cbvprintf+0x950>
		if (is_subnormal) {
    3fbc:	f1bc 0f00 	cmp.w	ip, #0
    3fc0:	f040 8188 	bne.w	42d4 <cbvprintf+0x8d8>
		fract |= BIT_63;
    3fc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3fc6:	9302      	str	r3, [sp, #8]
    3fc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3fca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3fce:	9303      	str	r3, [sp, #12]
    3fd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3fd4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    3fd8:	2300      	movs	r3, #0
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    3fda:	f2ab 3bfe 	subw	fp, fp, #1022	; 0x3fe
		fract |= BIT_63;
    3fde:	461a      	mov	r2, r3
		fract *= 5U;
    3fe0:	2105      	movs	r1, #5
	while (expo < -2) {
    3fe2:	f11b 0f02 	cmn.w	fp, #2
    3fe6:	f2c0 817e 	blt.w	42e6 <cbvprintf+0x8ea>
    3fea:	b11b      	cbz	r3, 3ff4 <cbvprintf+0x5f8>
    3fec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3ff0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	while (expo > 0) {
    3ff4:	f1bb 0f00 	cmp.w	fp, #0
    3ff8:	e9dd 3110 	ldrd	r3, r1, [sp, #64]	; 0x40
    3ffc:	f300 818e 	bgt.w	431c <cbvprintf+0x920>
	fract >>= (4 - expo);
    4000:	9911      	ldr	r1, [sp, #68]	; 0x44
    4002:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4004:	f1cb 0004 	rsb	r0, fp, #4
    4008:	f10b 0b1c 	add.w	fp, fp, #28
    400c:	fa01 fb0b 	lsl.w	fp, r1, fp
    4010:	f1a0 0c20 	sub.w	ip, r0, #32
    4014:	40c3      	lsrs	r3, r0
    4016:	fa21 fc0c 	lsr.w	ip, r1, ip
    401a:	ea43 030b 	orr.w	r3, r3, fp
    401e:	ea43 030c 	orr.w	r3, r3, ip
    4022:	40c1      	lsrs	r1, r0
    4024:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
	if ((c == 'g') || (c == 'G')) {
    4028:	f009 03df 	and.w	r3, r9, #223	; 0xdf
    402c:	2b47      	cmp	r3, #71	; 0x47
    402e:	f040 8194 	bne.w	435a <cbvprintf+0x95e>
		if (decexp < (-4 + 1) || decexp > precision) {
    4032:	1cd0      	adds	r0, r2, #3
    4034:	db02      	blt.n	403c <cbvprintf+0x640>
    4036:	4297      	cmp	r7, r2
    4038:	f280 818b 	bge.w	4352 <cbvprintf+0x956>
			c += 'e' - 'g';  /* e or E */
    403c:	f1a9 0902 	sub.w	r9, r9, #2
			if (precision > 0) {
    4040:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
    4042:	fa5f f989 	uxtb.w	r9, r9
			if (precision > 0) {
    4046:	dd00      	ble.n	404a <cbvprintf+0x64e>
				precision--;
    4048:	3f01      	subs	r7, #1
		if (!conv->flag_hash && (precision > 0)) {
    404a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    404e:	0699      	lsls	r1, r3, #26
    4050:	f100 8183 	bmi.w	435a <cbvprintf+0x95e>
    4054:	2f00      	cmp	r7, #0
    4056:	bfd4      	ite	le
    4058:	2300      	movle	r3, #0
    405a:	2301      	movgt	r3, #1
	if (c == 'f') {
    405c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
	bool prune_zero = false;
    4060:	930c      	str	r3, [sp, #48]	; 0x30
	if (c == 'f') {
    4062:	f040 817c 	bne.w	435e <cbvprintf+0x962>
		if (decimals < 0) {
    4066:	19d3      	adds	r3, r2, r7
    4068:	f140 817a 	bpl.w	4360 <cbvprintf+0x964>
			decimals = 0;
    406c:	f04f 0b00 	mov.w	fp, #0
    4070:	e17a      	b.n	4368 <cbvprintf+0x96c>
    4072:	f1a9 0358 	sub.w	r3, r9, #88	; 0x58
    4076:	2b20      	cmp	r3, #32
    4078:	f63f af00 	bhi.w	3e7c <cbvprintf+0x480>
    407c:	a201      	add	r2, pc, #4	; (adr r2, 4084 <cbvprintf+0x688>)
    407e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4082:	bf00      	nop
    4084:	000041fd 	.word	0x000041fd
    4088:	00003e7d 	.word	0x00003e7d
    408c:	00003e7d 	.word	0x00003e7d
    4090:	00003e7d 	.word	0x00003e7d
    4094:	00003e7d 	.word	0x00003e7d
    4098:	00003e7d 	.word	0x00003e7d
    409c:	00003e7d 	.word	0x00003e7d
    40a0:	00003e7d 	.word	0x00003e7d
    40a4:	00003e7d 	.word	0x00003e7d
    40a8:	00003f43 	.word	0x00003f43
    40ac:	00003e7d 	.word	0x00003e7d
    40b0:	00004135 	.word	0x00004135
    40b4:	0000419d 	.word	0x0000419d
    40b8:	00003f43 	.word	0x00003f43
    40bc:	00003f43 	.word	0x00003f43
    40c0:	00003f43 	.word	0x00003f43
    40c4:	00003e7d 	.word	0x00003e7d
    40c8:	0000419d 	.word	0x0000419d
    40cc:	00003e7d 	.word	0x00003e7d
    40d0:	00003e7d 	.word	0x00003e7d
    40d4:	00003e7d 	.word	0x00003e7d
    40d8:	00003e7d 	.word	0x00003e7d
    40dc:	00004233 	.word	0x00004233
    40e0:	000041fd 	.word	0x000041fd
    40e4:	00004201 	.word	0x00004201
    40e8:	00003e7d 	.word	0x00003e7d
    40ec:	00003e7d 	.word	0x00003e7d
    40f0:	0000410f 	.word	0x0000410f
    40f4:	00003e7d 	.word	0x00003e7d
    40f8:	000041fd 	.word	0x000041fd
    40fc:	00003e7d 	.word	0x00003e7d
    4100:	00003e7d 	.word	0x00003e7d
    4104:	000041fd 	.word	0x000041fd
			OUTC('%');
    4108:	4641      	mov	r1, r8
    410a:	4648      	mov	r0, r9
    410c:	e48a      	b.n	3a24 <cbvprintf+0x28>
			if (precision >= 0) {
    410e:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    4110:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
			if (precision >= 0) {
    4114:	db0a      	blt.n	412c <cbvprintf+0x730>
				len = strnlen(bps, precision);
    4116:	4639      	mov	r1, r7
    4118:	4648      	mov	r0, r9
    411a:	f00e fa5a 	bl	125d2 <strnlen>
			bpe = bps + len;
    411e:	eb09 0b00 	add.w	fp, r9, r0
		char sign = 0;
    4122:	2600      	movs	r6, #0
		if (bps == NULL) {
    4124:	f1b9 0f00 	cmp.w	r9, #0
    4128:	d10c      	bne.n	4144 <cbvprintf+0x748>
    412a:	e6a7      	b.n	3e7c <cbvprintf+0x480>
				len = strlen(bps);
    412c:	4648      	mov	r0, r9
    412e:	f7fd f989 	bl	1444 <strlen>
    4132:	e7f4      	b.n	411e <cbvprintf+0x722>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    4134:	9b14      	ldr	r3, [sp, #80]	; 0x50
    4136:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		char sign = 0;
    413a:	2600      	movs	r6, #0
			bpe = buf + 1;
    413c:	f10d 0b6d 	add.w	fp, sp, #109	; 0x6d
				bps = encode_float(value->dbl, conv, precision,
    4140:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
		size_t nj_len = (bpe - bps);
    4144:	ebab 0209 	sub.w	r2, fp, r9
		if (sign != 0) {
    4148:	b106      	cbz	r6, 414c <cbvprintf+0x750>
			nj_len += 1U;
    414a:	3201      	adds	r2, #1
		if (conv->altform_0c) {
    414c:	f89d 005a 	ldrb.w	r0, [sp, #90]	; 0x5a
    4150:	06c3      	lsls	r3, r0, #27
    4152:	f140 8203 	bpl.w	455c <cbvprintf+0xb60>
			nj_len += 2U;
    4156:	3202      	adds	r2, #2
		nj_len += conv->pad0_value;
    4158:	9917      	ldr	r1, [sp, #92]	; 0x5c
		if (conv->pad_fp) {
    415a:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    415c:	440a      	add	r2, r1
			nj_len += conv->pad0_pre_exp;
    415e:	bf44      	itt	mi
    4160:	9918      	ldrmi	r1, [sp, #96]	; 0x60
    4162:	1852      	addmi	r2, r2, r1
		if (width > 0) {
    4164:	f1ba 0f00 	cmp.w	sl, #0
    4168:	f340 8211 	ble.w	458e <cbvprintf+0xb92>
			width -= (int)nj_len;
    416c:	ebaa 0a02 	sub.w	sl, sl, r2
			if (!conv->flag_dash) {
    4170:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
    4174:	0751      	lsls	r1, r2, #29
    4176:	f3c2 0780 	ubfx	r7, r2, #2, #1
    417a:	f100 8208 	bmi.w	458e <cbvprintf+0xb92>
				if (conv->flag_zero) {
    417e:	0653      	lsls	r3, r2, #25
    4180:	f140 81fb 	bpl.w	457a <cbvprintf+0xb7e>
					if (sign != 0) {
    4184:	b146      	cbz	r6, 4198 <cbvprintf+0x79c>
						OUTC(sign);
    4186:	9b06      	ldr	r3, [sp, #24]
    4188:	4641      	mov	r1, r8
    418a:	4630      	mov	r0, r6
    418c:	4798      	blx	r3
    418e:	2800      	cmp	r0, #0
    4190:	f2c0 81f0 	blt.w	4574 <cbvprintf+0xb78>
    4194:	3501      	adds	r5, #1
						sign = 0;
    4196:	463e      	mov	r6, r7
					pad = '0';
    4198:	2730      	movs	r7, #48	; 0x30
    419a:	e1ef      	b.n	457c <cbvprintf+0xb80>
			if (conv->flag_plus) {
    419c:	0730      	lsls	r0, r6, #28
    419e:	d42b      	bmi.n	41f8 <cbvprintf+0x7fc>
				sign = ' ';
    41a0:	f016 0610 	ands.w	r6, r6, #16
    41a4:	bf18      	it	ne
    41a6:	2620      	movne	r6, #32
			sint = value->sint;
    41a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
			if (sint < 0) {
    41ac:	2a00      	cmp	r2, #0
    41ae:	f173 0100 	sbcs.w	r1, r3, #0
    41b2:	da05      	bge.n	41c0 <cbvprintf+0x7c4>
				value->uint = (uint_value_type)-sint;
    41b4:	4252      	negs	r2, r2
    41b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    41ba:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
				sign = '-';
    41be:	262d      	movs	r6, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    41c0:	f10d 0385 	add.w	r3, sp, #133	; 0x85
    41c4:	9300      	str	r3, [sp, #0]
    41c6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    41ca:	ab1b      	add	r3, sp, #108	; 0x6c
    41cc:	aa16      	add	r2, sp, #88	; 0x58
    41ce:	f7ff fbc5 	bl	395c <encode_uint>
    41d2:	4681      	mov	r9, r0
			if (precision >= 0) {
    41d4:	2f00      	cmp	r7, #0
    41d6:	f10d 0385 	add.w	r3, sp, #133	; 0x85
    41da:	db0b      	blt.n	41f4 <cbvprintf+0x7f8>
				conv->flag_zero = false;
    41dc:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
				size_t len = bpe - bps;
    41e0:	eba3 0209 	sub.w	r2, r3, r9
				conv->flag_zero = false;
    41e4:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    41e8:	4297      	cmp	r7, r2
				conv->flag_zero = false;
    41ea:	f88d 1058 	strb.w	r1, [sp, #88]	; 0x58
				if (len < (size_t)precision) {
    41ee:	d901      	bls.n	41f4 <cbvprintf+0x7f8>
					conv->pad0_value = precision - (int)len;
    41f0:	1abf      	subs	r7, r7, r2
    41f2:	9717      	str	r7, [sp, #92]	; 0x5c
		const char *bpe = buf + sizeof(buf);
    41f4:	469b      	mov	fp, r3
    41f6:	e795      	b.n	4124 <cbvprintf+0x728>
				sign = '+';
    41f8:	262b      	movs	r6, #43	; 0x2b
    41fa:	e7d5      	b.n	41a8 <cbvprintf+0x7ac>
		switch (conv->specifier) {
    41fc:	2600      	movs	r6, #0
    41fe:	e7df      	b.n	41c0 <cbvprintf+0x7c4>
			if (value->ptr != NULL) {
    4200:	9814      	ldr	r0, [sp, #80]	; 0x50
    4202:	2800      	cmp	r0, #0
    4204:	f000 819f 	beq.w	4546 <cbvprintf+0xb4a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    4208:	f10d 0385 	add.w	r3, sp, #133	; 0x85
    420c:	9300      	str	r3, [sp, #0]
    420e:	aa16      	add	r2, sp, #88	; 0x58
    4210:	ab1b      	add	r3, sp, #108	; 0x6c
    4212:	2100      	movs	r1, #0
    4214:	f7ff fba2 	bl	395c <encode_uint>
				conv->altform_0c = true;
    4218:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
    421c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    4220:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    4224:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    4228:	4681      	mov	r9, r0
				conv->altform_0c = true;
    422a:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
		char sign = 0;
    422e:	2600      	movs	r6, #0
				goto prec_int_pad0;
    4230:	e7d0      	b.n	41d4 <cbvprintf+0x7d8>
				store_count(conv, value->ptr, count);
    4232:	9b14      	ldr	r3, [sp, #80]	; 0x50
	switch ((enum length_mod_enum)conv->length_mod) {
    4234:	2907      	cmp	r1, #7
    4236:	f63f ae21 	bhi.w	3e7c <cbvprintf+0x480>
    423a:	e8df f001 	tbb	[pc, r1]
    423e:	040d      	.short	0x040d
    4240:	08080d06 	.word	0x08080d06
    4244:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    4246:	701d      	strb	r5, [r3, #0]
		break;
    4248:	e618      	b.n	3e7c <cbvprintf+0x480>
		*(short *)dp = (short)count;
    424a:	801d      	strh	r5, [r3, #0]
		break;
    424c:	e616      	b.n	3e7c <cbvprintf+0x480>
		*(intmax_t *)dp = (intmax_t)count;
    424e:	4628      	mov	r0, r5
    4250:	17e9      	asrs	r1, r5, #31
    4252:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    4256:	e611      	b.n	3e7c <cbvprintf+0x480>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    4258:	601d      	str	r5, [r3, #0]
		break;
    425a:	e60f      	b.n	3e7c <cbvprintf+0x480>
		*sign = '-';
    425c:	262d      	movs	r6, #45	; 0x2d
    425e:	e67e      	b.n	3f5e <cbvprintf+0x562>
		*sign = '+';
    4260:	262b      	movs	r6, #43	; 0x2b
    4262:	e67c      	b.n	3f5e <cbvprintf+0x562>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    4264:	f240 73ff 	movw	r3, #2047	; 0x7ff
    4268:	459b      	cmp	fp, r3
    426a:	d12e      	bne.n	42ca <cbvprintf+0x8ce>
		if (fract == 0) {
    426c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    4270:	4bb8      	ldr	r3, [pc, #736]	; (4554 <cbvprintf+0xb58>)
    4272:	f819 3003 	ldrb.w	r3, [r9, r3]
    4276:	430a      	orrs	r2, r1
    4278:	f003 0303 	and.w	r3, r3, #3
    427c:	d117      	bne.n	42ae <cbvprintf+0x8b2>
			if (isupper((int)c)) {
    427e:	2b01      	cmp	r3, #1
				*buf++ = 'I';
    4280:	bf0b      	itete	eq
    4282:	f644 6349 	movweq	r3, #20041	; 0x4e49
				*buf++ = 'i';
    4286:	f646 6369 	movwne	r3, #28265	; 0x6e69
				*buf++ = 'I';
    428a:	f8ad 306c 	strheq.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'i';
    428e:	f8ad 306c 	strhne.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'F';
    4292:	bf0c      	ite	eq
    4294:	2346      	moveq	r3, #70	; 0x46
				*buf++ = 'f';
    4296:	2366      	movne	r3, #102	; 0x66
				*buf++ = 'n';
    4298:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
		conv->flag_zero = false;
    429c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    42a0:	f36f 1386 	bfc	r3, #6, #1
    42a4:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		*bpe = buf;
    42a8:	f10d 0b6f 	add.w	fp, sp, #111	; 0x6f
		return bps;
    42ac:	e748      	b.n	4140 <cbvprintf+0x744>
			if (isupper((int)c)) {
    42ae:	2b01      	cmp	r3, #1
				*buf++ = 'N';
    42b0:	bf0b      	itete	eq
    42b2:	f244 134e 	movweq	r3, #16718	; 0x414e
				*buf++ = 'n';
    42b6:	f246 136e 	movwne	r3, #24942	; 0x616e
				*buf++ = 'N';
    42ba:	f8ad 306c 	strheq.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'n';
    42be:	f8ad 306c 	strhne.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'N';
    42c2:	bf0c      	ite	eq
    42c4:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'n';
    42c6:	236e      	movne	r3, #110	; 0x6e
    42c8:	e7e6      	b.n	4298 <cbvprintf+0x89c>
	bool is_subnormal = (expo == 0) && (fract != 0);
    42ca:	f04f 0c00 	mov.w	ip, #0
    42ce:	e65c      	b.n	3f8a <cbvprintf+0x58e>
				expo--;
    42d0:	f10b 3bff 	add.w	fp, fp, #4294967295
			while (((fract <<= 1) & BIT_63) == 0) {
    42d4:	1892      	adds	r2, r2, r2
    42d6:	415b      	adcs	r3, r3
    42d8:	2a00      	cmp	r2, #0
    42da:	f173 0100 	sbcs.w	r1, r3, #0
    42de:	daf7      	bge.n	42d0 <cbvprintf+0x8d4>
    42e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    42e4:	e66e      	b.n	3fc4 <cbvprintf+0x5c8>
			fract >>= 1;
    42e6:	9b02      	ldr	r3, [sp, #8]
    42e8:	9803      	ldr	r0, [sp, #12]
    42ea:	085b      	lsrs	r3, r3, #1
    42ec:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    42f0:	0840      	lsrs	r0, r0, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    42f2:	f1b0 3f33 	cmp.w	r0, #858993459	; 0x33333333
    42f6:	46de      	mov	lr, fp
			fract >>= 1;
    42f8:	e9cd 3002 	strd	r3, r0, [sp, #8]
			expo++;
    42fc:	f10b 0b01 	add.w	fp, fp, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    4300:	d2f1      	bcs.n	42e6 <cbvprintf+0x8ea>
		fract *= 5U;
    4302:	fba3 bc01 	umull	fp, ip, r3, r1
    4306:	e9cd bc02 	strd	fp, ip, [sp, #8]
    430a:	9b03      	ldr	r3, [sp, #12]
    430c:	4348      	muls	r0, r1
    430e:	18c3      	adds	r3, r0, r3
    4310:	9303      	str	r3, [sp, #12]
		expo++;
    4312:	f10e 0b02 	add.w	fp, lr, #2
		decexp--;
    4316:	3a01      	subs	r2, #1
    4318:	2301      	movs	r3, #1
    431a:	e662      	b.n	3fe2 <cbvprintf+0x5e6>
		fract += 2;
    431c:	3302      	adds	r3, #2
    431e:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
    4322:	a810      	add	r0, sp, #64	; 0x40
		fract += 2;
    4324:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
    4328:	920c      	str	r2, [sp, #48]	; 0x30
		_ldiv5(&fract);
    432a:	f00b f8c4 	bl	f4b6 <_ldiv5>
		decexp++;
    432e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4330:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
		expo--;
    4334:	f10b 3bff 	add.w	fp, fp, #4294967295
		decexp++;
    4338:	3201      	adds	r2, #1
			fract <<= 1;
    433a:	1800      	adds	r0, r0, r0
    433c:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
    433e:	2800      	cmp	r0, #0
    4340:	f171 0300 	sbcs.w	r3, r1, #0
			expo--;
    4344:	f10b 3bff 	add.w	fp, fp, #4294967295
		} while (!(fract & BIT_63));
    4348:	daf7      	bge.n	433a <cbvprintf+0x93e>
    434a:	e651      	b.n	3ff0 <cbvprintf+0x5f4>
    434c:	2200      	movs	r2, #0
    434e:	4693      	mov	fp, r2
    4350:	e656      	b.n	4000 <cbvprintf+0x604>
			precision -= decexp;
    4352:	1abf      	subs	r7, r7, r2
			c = 'f';
    4354:	f04f 0966 	mov.w	r9, #102	; 0x66
    4358:	e677      	b.n	404a <cbvprintf+0x64e>
	bool prune_zero = false;
    435a:	2300      	movs	r3, #0
    435c:	e67e      	b.n	405c <cbvprintf+0x660>
		decimals = precision + 1;
    435e:	1c7b      	adds	r3, r7, #1
	if (decimals > 16) {
    4360:	2b10      	cmp	r3, #16
    4362:	bfa8      	it	ge
    4364:	2310      	movge	r3, #16
    4366:	469b      	mov	fp, r3
    4368:	2110      	movs	r1, #16
    436a:	910f      	str	r1, [sp, #60]	; 0x3c
	uint64_t round = BIT64(59); /* 0.5 */
    436c:	2000      	movs	r0, #0
    436e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    4372:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	while (decimals--) {
    4376:	f10b 3bff 	add.w	fp, fp, #4294967295
    437a:	f1bb 3fff 	cmp.w	fp, #4294967295
    437e:	e9dd 1012 	ldrd	r1, r0, [sp, #72]	; 0x48
    4382:	d11f      	bne.n	43c4 <cbvprintf+0x9c8>
	fract += round;
    4384:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4386:	18cb      	adds	r3, r1, r3
    4388:	9308      	str	r3, [sp, #32]
    438a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    438c:	eb40 0303 	adc.w	r3, r0, r3
    4390:	9309      	str	r3, [sp, #36]	; 0x24
	if (fract >= BIT64(60)) {
    4392:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
    4396:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
    439a:	f04f 30ff 	mov.w	r0, #4294967295
    439e:	4561      	cmp	r1, ip
    43a0:	bf08      	it	eq
    43a2:	4558      	cmpeq	r0, fp
    43a4:	d31a      	bcc.n	43dc <cbvprintf+0x9e0>
	fract += round;
    43a6:	4658      	mov	r0, fp
    43a8:	4661      	mov	r1, ip
    43aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	if (c == 'f') {
    43ae:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
    43b2:	d153      	bne.n	445c <cbvprintf+0xa60>
		if (decexp > 0) {
    43b4:	2a00      	cmp	r2, #0
    43b6:	dc20      	bgt.n	43fa <cbvprintf+0x9fe>
			*buf++ = '0';
    43b8:	2330      	movs	r3, #48	; 0x30
    43ba:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    43be:	f10d 0b6d 	add.w	fp, sp, #109	; 0x6d
    43c2:	e02b      	b.n	441c <cbvprintf+0xa20>
	*v >>= 1;
    43c4:	0849      	lsrs	r1, r1, #1
    43c6:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    43ca:	0840      	lsrs	r0, r0, #1
    43cc:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
	_ldiv5(v);
    43d0:	a812      	add	r0, sp, #72	; 0x48
    43d2:	920d      	str	r2, [sp, #52]	; 0x34
    43d4:	f00b f86f 	bl	f4b6 <_ldiv5>
    43d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
}
    43da:	e7cc      	b.n	4376 <cbvprintf+0x97a>
	*v >>= 1;
    43dc:	9b08      	ldr	r3, [sp, #32]
    43de:	920d      	str	r2, [sp, #52]	; 0x34
    43e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    43e2:	085b      	lsrs	r3, r3, #1
    43e4:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
    43e8:	0851      	lsrs	r1, r2, #1
	_ldiv5(v);
    43ea:	a810      	add	r0, sp, #64	; 0x40
	*v >>= 1;
    43ec:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
	_ldiv5(v);
    43f0:	f00b f861 	bl	f4b6 <_ldiv5>
		decexp++;
    43f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    43f6:	3201      	adds	r2, #1
    43f8:	e7d9      	b.n	43ae <cbvprintf+0x9b2>
	char *buf = bps;
    43fa:	f10d 0b6c 	add.w	fp, sp, #108	; 0x6c
			while (decexp > 0 && digit_count > 0) {
    43fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
    4400:	2900      	cmp	r1, #0
    4402:	dd09      	ble.n	4418 <cbvprintf+0xa1c>
				*buf++ = _get_digit(&fract, &digit_count);
    4404:	a90f      	add	r1, sp, #60	; 0x3c
    4406:	a810      	add	r0, sp, #64	; 0x40
    4408:	920d      	str	r2, [sp, #52]	; 0x34
    440a:	f00b f874 	bl	f4f6 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    440e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
				*buf++ = _get_digit(&fract, &digit_count);
    4410:	f80b 0b01 	strb.w	r0, [fp], #1
			while (decexp > 0 && digit_count > 0) {
    4414:	3a01      	subs	r2, #1
    4416:	d1f2      	bne.n	43fe <cbvprintf+0xa02>
			conv->pad0_value = decexp;
    4418:	9217      	str	r2, [sp, #92]	; 0x5c
			decexp = 0;
    441a:	2200      	movs	r2, #0
		if (conv->flag_hash || (precision > 0)) {
    441c:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
    4420:	0688      	lsls	r0, r1, #26
    4422:	d401      	bmi.n	4428 <cbvprintf+0xa2c>
    4424:	2f00      	cmp	r7, #0
    4426:	dd3f      	ble.n	44a8 <cbvprintf+0xaac>
			*buf++ = '.';
    4428:	465b      	mov	r3, fp
    442a:	212e      	movs	r1, #46	; 0x2e
    442c:	f803 1b01 	strb.w	r1, [r3], #1
		if (decexp < 0 && precision > 0) {
    4430:	b192      	cbz	r2, 4458 <cbvprintf+0xa5c>
    4432:	2f00      	cmp	r7, #0
    4434:	dd75      	ble.n	4522 <cbvprintf+0xb26>
			conv->pad0_value = -decexp;
    4436:	4251      	negs	r1, r2
    4438:	42b9      	cmp	r1, r7
    443a:	bfa8      	it	ge
    443c:	4639      	movge	r1, r7
			conv->pad_postdp = (conv->pad0_value > 0);
    443e:	f89d 005a 	ldrb.w	r0, [sp, #90]	; 0x5a
			conv->pad0_value = -decexp;
    4442:	9117      	str	r1, [sp, #92]	; 0x5c
			conv->pad_postdp = (conv->pad0_value > 0);
    4444:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    4446:	eba7 0701 	sub.w	r7, r7, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    444a:	bfd4      	ite	le
    444c:	2100      	movle	r1, #0
    444e:	2101      	movgt	r1, #1
    4450:	f361 1045 	bfi	r0, r1, #5, #1
    4454:	f88d 005a 	strb.w	r0, [sp, #90]	; 0x5a
			*buf++ = '.';
    4458:	469b      	mov	fp, r3
    445a:	e020      	b.n	449e <cbvprintf+0xaa2>
		*buf = _get_digit(&fract, &digit_count);
    445c:	a90f      	add	r1, sp, #60	; 0x3c
    445e:	a810      	add	r0, sp, #64	; 0x40
    4460:	920d      	str	r2, [sp, #52]	; 0x34
    4462:	f00b f848 	bl	f4f6 <_get_digit>
		if (*buf++ != '0') {
    4466:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		if (conv->flag_hash || (precision > 0)) {
    4468:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
		*buf = _get_digit(&fract, &digit_count);
    446c:	f88d 006c 	strb.w	r0, [sp, #108]	; 0x6c
		if (*buf++ != '0') {
    4470:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    4472:	bf18      	it	ne
    4474:	f102 32ff 	addne.w	r2, r2, #4294967295
		if (conv->flag_hash || (precision > 0)) {
    4478:	0699      	lsls	r1, r3, #26
    447a:	d401      	bmi.n	4480 <cbvprintf+0xa84>
    447c:	2f00      	cmp	r7, #0
    447e:	dd52      	ble.n	4526 <cbvprintf+0xb2a>
			*buf++ = '.';
    4480:	232e      	movs	r3, #46	; 0x2e
    4482:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
    4486:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
    448a:	e7e5      	b.n	4458 <cbvprintf+0xa5c>
		*buf++ = _get_digit(&fract, &digit_count);
    448c:	a90f      	add	r1, sp, #60	; 0x3c
    448e:	a810      	add	r0, sp, #64	; 0x40
    4490:	920d      	str	r2, [sp, #52]	; 0x34
    4492:	f00b f830 	bl	f4f6 <_get_digit>
    4496:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4498:	f80b 0b01 	strb.w	r0, [fp], #1
		precision--;
    449c:	3f01      	subs	r7, #1
	while (precision > 0 && digit_count > 0) {
    449e:	2f00      	cmp	r7, #0
    44a0:	dd02      	ble.n	44a8 <cbvprintf+0xaac>
    44a2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    44a4:	2900      	cmp	r1, #0
    44a6:	dcf1      	bgt.n	448c <cbvprintf+0xa90>
	if (prune_zero) {
    44a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    44aa:	2b00      	cmp	r3, #0
    44ac:	d13e      	bne.n	452c <cbvprintf+0xb30>
	conv->pad0_pre_exp = precision;
    44ae:	9718      	str	r7, [sp, #96]	; 0x60
	if ((c == 'e') || (c == 'E')) {
    44b0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
    44b4:	2945      	cmp	r1, #69	; 0x45
    44b6:	d122      	bne.n	44fe <cbvprintf+0xb02>
		if (decexp < 0) {
    44b8:	2a00      	cmp	r2, #0
		*buf++ = c;
    44ba:	4658      	mov	r0, fp
			decexp = -decexp;
    44bc:	bfba      	itte	lt
    44be:	4252      	neglt	r2, r2
			*buf++ = '-';
    44c0:	212d      	movlt	r1, #45	; 0x2d
			*buf++ = '+';
    44c2:	212b      	movge	r1, #43	; 0x2b
		if (decexp >= 100) {
    44c4:	2a63      	cmp	r2, #99	; 0x63
		*buf++ = c;
    44c6:	f800 9b02 	strb.w	r9, [r0], #2
			*buf++ = '-';
    44ca:	f88b 1001 	strb.w	r1, [fp, #1]
		if (decexp >= 100) {
    44ce:	dd0a      	ble.n	44e6 <cbvprintf+0xaea>
			*buf++ = (decexp / 100) + '0';
    44d0:	2764      	movs	r7, #100	; 0x64
    44d2:	fb92 f1f7 	sdiv	r1, r2, r7
    44d6:	f101 0c30 	add.w	ip, r1, #48	; 0x30
    44da:	f10b 0003 	add.w	r0, fp, #3
    44de:	f88b c002 	strb.w	ip, [fp, #2]
			decexp %= 100;
    44e2:	fb07 2211 	mls	r2, r7, r1, r2
		*buf++ = (decexp / 10) + '0';
    44e6:	270a      	movs	r7, #10
    44e8:	4683      	mov	fp, r0
    44ea:	fb92 f1f7 	sdiv	r1, r2, r7
		*buf++ = (decexp % 10) + '0';
    44ee:	fb07 2211 	mls	r2, r7, r1, r2
		*buf++ = (decexp / 10) + '0';
    44f2:	f101 0c30 	add.w	ip, r1, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    44f6:	3230      	adds	r2, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    44f8:	f80b cb02 	strb.w	ip, [fp], #2
		*buf++ = (decexp % 10) + '0';
    44fc:	7042      	strb	r2, [r0, #1]
		|| (conv->pad0_pre_exp > 0);
    44fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    4500:	2a00      	cmp	r2, #0
    4502:	dc1e      	bgt.n	4542 <cbvprintf+0xb46>
    4504:	9a18      	ldr	r2, [sp, #96]	; 0x60
    4506:	2a00      	cmp	r2, #0
    4508:	bfd4      	ite	le
    450a:	2200      	movle	r2, #0
    450c:	2201      	movgt	r2, #1
	conv->pad_fp = (conv->pad0_value > 0)
    450e:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
    4512:	f362 1186 	bfi	r1, r2, #6, #1
	*buf = 0;
    4516:	2200      	movs	r2, #0
	conv->pad_fp = (conv->pad0_value > 0)
    4518:	f88d 105a 	strb.w	r1, [sp, #90]	; 0x5a
	*buf = 0;
    451c:	f88b 2000 	strb.w	r2, [fp]
	return bps;
    4520:	e60e      	b.n	4140 <cbvprintf+0x744>
			*buf++ = '.';
    4522:	469b      	mov	fp, r3
    4524:	e7c0      	b.n	44a8 <cbvprintf+0xaac>
		if (*buf++ != '0') {
    4526:	f10d 0b6d 	add.w	fp, sp, #109	; 0x6d
    452a:	e7bd      	b.n	44a8 <cbvprintf+0xaac>
		conv->pad0_pre_exp = 0;
    452c:	2100      	movs	r1, #0
    452e:	9118      	str	r1, [sp, #96]	; 0x60
		while (*--buf == '0') {
    4530:	4658      	mov	r0, fp
    4532:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
    4536:	2930      	cmp	r1, #48	; 0x30
    4538:	d0fa      	beq.n	4530 <cbvprintf+0xb34>
		if (*buf != '.') {
    453a:	292e      	cmp	r1, #46	; 0x2e
    453c:	bf18      	it	ne
    453e:	4683      	movne	fp, r0
    4540:	e7b6      	b.n	44b0 <cbvprintf+0xab4>
		|| (conv->pad0_pre_exp > 0);
    4542:	2201      	movs	r2, #1
    4544:	e7e3      	b.n	450e <cbvprintf+0xb12>
			bpe = bps + 5;
    4546:	f8df b010 	ldr.w	fp, [pc, #16]	; 4558 <cbvprintf+0xb5c>
		char sign = 0;
    454a:	4606      	mov	r6, r0
			bps = "(nil)";
    454c:	f1ab 0905 	sub.w	r9, fp, #5
    4550:	e5f8      	b.n	4144 <cbvprintf+0x748>
    4552:	bf00      	nop
    4554:	00014c37 	.word	0x00014c37
    4558:	00013b9c 	.word	0x00013b9c
		} else if (conv->altform_0) {
    455c:	0707      	lsls	r7, r0, #28
			nj_len += 1U;
    455e:	bf48      	it	mi
    4560:	3201      	addmi	r2, #1
    4562:	e5f9      	b.n	4158 <cbvprintf+0x75c>
    4564:	930c      	str	r3, [sp, #48]	; 0x30
					OUTC(pad);
    4566:	4641      	mov	r1, r8
    4568:	9b06      	ldr	r3, [sp, #24]
    456a:	4638      	mov	r0, r7
    456c:	4798      	blx	r3
    456e:	2800      	cmp	r0, #0
    4570:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4572:	da05      	bge.n	4580 <cbvprintf+0xb84>
#undef OUTS
#undef OUTC
}
    4574:	b023      	add	sp, #140	; 0x8c
    4576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    457a:	2720      	movs	r7, #32
    457c:	eb0a 0305 	add.w	r3, sl, r5
    4580:	4652      	mov	r2, sl
				while (width-- > 0) {
    4582:	2a00      	cmp	r2, #0
    4584:	eba3 050a 	sub.w	r5, r3, sl
    4588:	f10a 3aff 	add.w	sl, sl, #4294967295
    458c:	dcea      	bgt.n	4564 <cbvprintf+0xb68>
		if (sign != 0) {
    458e:	b136      	cbz	r6, 459e <cbvprintf+0xba2>
			OUTC(sign);
    4590:	9b06      	ldr	r3, [sp, #24]
    4592:	4641      	mov	r1, r8
    4594:	4630      	mov	r0, r6
    4596:	4798      	blx	r3
    4598:	2800      	cmp	r0, #0
    459a:	dbeb      	blt.n	4574 <cbvprintf+0xb78>
    459c:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    459e:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
    45a2:	0650      	lsls	r0, r2, #25
    45a4:	d57d      	bpl.n	46a2 <cbvprintf+0xca6>
			if (conv->specifier_a) {
    45a6:	f99d 2059 	ldrsb.w	r2, [sp, #89]	; 0x59
    45aa:	2a00      	cmp	r2, #0
    45ac:	db2c      	blt.n	4608 <cbvprintf+0xc0c>
    45ae:	eba5 0509 	sub.w	r5, r5, r9
				while (isdigit((int)*cp)) {
    45b2:	f899 0000 	ldrb.w	r0, [r9]
    45b6:	4b5b      	ldr	r3, [pc, #364]	; (4724 <cbvprintf+0xd28>)
    45b8:	5cc2      	ldrb	r2, [r0, r3]
    45ba:	464e      	mov	r6, r9
    45bc:	0751      	lsls	r1, r2, #29
    45be:	eb05 0706 	add.w	r7, r5, r6
    45c2:	f109 0901 	add.w	r9, r9, #1
    45c6:	d43f      	bmi.n	4648 <cbvprintf+0xc4c>
				if (!conv->pad_postdp) {
    45c8:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
				pad_len = conv->pad0_value;
    45cc:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
				if (!conv->pad_postdp) {
    45d0:	0692      	lsls	r2, r2, #26
    45d2:	d408      	bmi.n	45e6 <cbvprintf+0xbea>
    45d4:	eb09 0507 	add.w	r5, r9, r7
    45d8:	464a      	mov	r2, r9
					while (pad_len-- > 0) {
    45da:	2a00      	cmp	r2, #0
    45dc:	eba5 0709 	sub.w	r7, r5, r9
    45e0:	f109 39ff 	add.w	r9, r9, #4294967295
    45e4:	dc36      	bgt.n	4654 <cbvprintf+0xc58>
				if (*cp == '.') {
    45e6:	7830      	ldrb	r0, [r6, #0]
    45e8:	282e      	cmp	r0, #46	; 0x2e
    45ea:	d10a      	bne.n	4602 <cbvprintf+0xc06>
					OUTC(*cp++);
    45ec:	9b06      	ldr	r3, [sp, #24]
    45ee:	4641      	mov	r1, r8
    45f0:	4798      	blx	r3
						OUTC('0');
    45f2:	2800      	cmp	r0, #0
    45f4:	dbbe      	blt.n	4574 <cbvprintf+0xb78>
					while (pad_len-- > 0) {
    45f6:	f1b9 0f00 	cmp.w	r9, #0
						OUTC('0');
    45fa:	f107 0701 	add.w	r7, r7, #1
					while (pad_len-- > 0) {
    45fe:	dc30      	bgt.n	4662 <cbvprintf+0xc66>
					OUTC(*cp++);
    4600:	3601      	adds	r6, #1
    4602:	46b1      	mov	r9, r6
    4604:	1bbf      	subs	r7, r7, r6
    4606:	e039      	b.n	467c <cbvprintf+0xc80>
    4608:	eba5 0709 	sub.w	r7, r5, r9
    460c:	464d      	mov	r5, r9
    460e:	eb07 0609 	add.w	r6, r7, r9
				while (*cp != 'p') {
    4612:	f819 0b01 	ldrb.w	r0, [r9], #1
    4616:	2870      	cmp	r0, #112	; 0x70
    4618:	d110      	bne.n	463c <cbvprintf+0xc40>
			while (pad_len-- > 0) {
    461a:	9f18      	ldr	r7, [sp, #96]	; 0x60
    461c:	4437      	add	r7, r6
    461e:	1bba      	subs	r2, r7, r6
    4620:	2a00      	cmp	r2, #0
    4622:	dc35      	bgt.n	4690 <cbvprintf+0xc94>
			OUTS(cp, bpe);
    4624:	9806      	ldr	r0, [sp, #24]
    4626:	465b      	mov	r3, fp
    4628:	462a      	mov	r2, r5
    462a:	4641      	mov	r1, r8
    462c:	f00a ff7a 	bl	f524 <outs>
    4630:	2800      	cmp	r0, #0
    4632:	db9f      	blt.n	4574 <cbvprintf+0xb78>
    4634:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    4636:	4605      	mov	r5, r0
    4638:	4482      	add	sl, r0
    463a:	e06c      	b.n	4716 <cbvprintf+0xd1a>
					OUTC(*cp++);
    463c:	9b06      	ldr	r3, [sp, #24]
    463e:	4641      	mov	r1, r8
    4640:	4798      	blx	r3
    4642:	2800      	cmp	r0, #0
    4644:	dae2      	bge.n	460c <cbvprintf+0xc10>
    4646:	e795      	b.n	4574 <cbvprintf+0xb78>
					OUTC(*cp++);
    4648:	9b06      	ldr	r3, [sp, #24]
    464a:	4641      	mov	r1, r8
    464c:	4798      	blx	r3
    464e:	2800      	cmp	r0, #0
    4650:	daaf      	bge.n	45b2 <cbvprintf+0xbb6>
    4652:	e78f      	b.n	4574 <cbvprintf+0xb78>
						OUTC('0');
    4654:	9b06      	ldr	r3, [sp, #24]
    4656:	4641      	mov	r1, r8
    4658:	2030      	movs	r0, #48	; 0x30
    465a:	4798      	blx	r3
    465c:	2800      	cmp	r0, #0
    465e:	dabb      	bge.n	45d8 <cbvprintf+0xbdc>
    4660:	e788      	b.n	4574 <cbvprintf+0xb78>
						OUTC('0');
    4662:	9b06      	ldr	r3, [sp, #24]
    4664:	4641      	mov	r1, r8
    4666:	2030      	movs	r0, #48	; 0x30
    4668:	4798      	blx	r3
    466a:	f109 39ff 	add.w	r9, r9, #4294967295
    466e:	e7c0      	b.n	45f2 <cbvprintf+0xbf6>
					OUTC(*cp++);
    4670:	9b06      	ldr	r3, [sp, #24]
    4672:	4641      	mov	r1, r8
    4674:	4798      	blx	r3
    4676:	2800      	cmp	r0, #0
    4678:	f6ff af7c 	blt.w	4574 <cbvprintf+0xb78>
				while (isdigit((int)*cp)) {
    467c:	4b29      	ldr	r3, [pc, #164]	; (4724 <cbvprintf+0xd28>)
    467e:	464d      	mov	r5, r9
    4680:	eb07 0609 	add.w	r6, r7, r9
    4684:	f819 0b01 	ldrb.w	r0, [r9], #1
    4688:	5cc2      	ldrb	r2, [r0, r3]
    468a:	0753      	lsls	r3, r2, #29
    468c:	d4f0      	bmi.n	4670 <cbvprintf+0xc74>
    468e:	e7c4      	b.n	461a <cbvprintf+0xc1e>
				OUTC('0');
    4690:	9b06      	ldr	r3, [sp, #24]
    4692:	4641      	mov	r1, r8
    4694:	2030      	movs	r0, #48	; 0x30
    4696:	4798      	blx	r3
    4698:	2800      	cmp	r0, #0
    469a:	f6ff af6b 	blt.w	4574 <cbvprintf+0xb78>
    469e:	3601      	adds	r6, #1
    46a0:	e7bd      	b.n	461e <cbvprintf+0xc22>
			if (conv->altform_0c | conv->altform_0) {
    46a2:	06d1      	lsls	r1, r2, #27
    46a4:	d401      	bmi.n	46aa <cbvprintf+0xcae>
    46a6:	0712      	lsls	r2, r2, #28
    46a8:	d507      	bpl.n	46ba <cbvprintf+0xcbe>
				OUTC('0');
    46aa:	9b06      	ldr	r3, [sp, #24]
    46ac:	4641      	mov	r1, r8
    46ae:	2030      	movs	r0, #48	; 0x30
    46b0:	4798      	blx	r3
    46b2:	2800      	cmp	r0, #0
    46b4:	f6ff af5e 	blt.w	4574 <cbvprintf+0xb78>
    46b8:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    46ba:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
    46be:	06d3      	lsls	r3, r2, #27
    46c0:	d508      	bpl.n	46d4 <cbvprintf+0xcd8>
				OUTC(conv->specifier);
    46c2:	f89d 005b 	ldrb.w	r0, [sp, #91]	; 0x5b
    46c6:	9b06      	ldr	r3, [sp, #24]
    46c8:	4641      	mov	r1, r8
    46ca:	4798      	blx	r3
    46cc:	2800      	cmp	r0, #0
    46ce:	f6ff af51 	blt.w	4574 <cbvprintf+0xb78>
    46d2:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    46d4:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    46d6:	442f      	add	r7, r5
    46d8:	1b7a      	subs	r2, r7, r5
    46da:	2a00      	cmp	r2, #0
    46dc:	dc0a      	bgt.n	46f4 <cbvprintf+0xcf8>
			OUTS(bps, bpe);
    46de:	9806      	ldr	r0, [sp, #24]
    46e0:	465b      	mov	r3, fp
    46e2:	464a      	mov	r2, r9
    46e4:	4641      	mov	r1, r8
    46e6:	f00a ff1d 	bl	f524 <outs>
    46ea:	2800      	cmp	r0, #0
    46ec:	f6ff af42 	blt.w	4574 <cbvprintf+0xb78>
    46f0:	4428      	add	r0, r5
    46f2:	e7a0      	b.n	4636 <cbvprintf+0xc3a>
				OUTC('0');
    46f4:	9b06      	ldr	r3, [sp, #24]
    46f6:	4641      	mov	r1, r8
    46f8:	2030      	movs	r0, #48	; 0x30
    46fa:	4798      	blx	r3
    46fc:	2800      	cmp	r0, #0
    46fe:	f6ff af39 	blt.w	4574 <cbvprintf+0xb78>
    4702:	3501      	adds	r5, #1
    4704:	e7e8      	b.n	46d8 <cbvprintf+0xcdc>
			OUTC(' ');
    4706:	9b06      	ldr	r3, [sp, #24]
    4708:	4641      	mov	r1, r8
    470a:	2020      	movs	r0, #32
    470c:	4798      	blx	r3
    470e:	2800      	cmp	r0, #0
    4710:	f6ff af30 	blt.w	4574 <cbvprintf+0xb78>
    4714:	3501      	adds	r5, #1
		while (width > 0) {
    4716:	ebaa 0305 	sub.w	r3, sl, r5
    471a:	2b00      	cmp	r3, #0
    471c:	dcf3      	bgt.n	4706 <cbvprintf+0xd0a>
    471e:	f7ff bbad 	b.w	3e7c <cbvprintf+0x480>
    4722:	bf00      	nop
    4724:	00014c37 	.word	0x00014c37

00004728 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    4728:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    472a:	4910      	ldr	r1, [pc, #64]	; (476c <enable_logger+0x44>)
    472c:	4810      	ldr	r0, [pc, #64]	; (4770 <enable_logger+0x48>)
{
    472e:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    4730:	2200      	movs	r2, #0
    4732:	f00d fda1 	bl	12278 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    4736:	4d0f      	ldr	r5, [pc, #60]	; (4774 <enable_logger+0x4c>)
    4738:	490f      	ldr	r1, [pc, #60]	; (4778 <enable_logger+0x50>)
    473a:	2200      	movs	r2, #0
    473c:	2300      	movs	r3, #0
    473e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    4742:	2400      	movs	r4, #0
    4744:	230e      	movs	r3, #14
    4746:	e9cd 3403 	strd	r3, r4, [sp, #12]
    474a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    474e:	4b0b      	ldr	r3, [pc, #44]	; (477c <enable_logger+0x54>)
    4750:	9400      	str	r4, [sp, #0]
    4752:	f44f 7240 	mov.w	r2, #768	; 0x300
    4756:	4628      	mov	r0, r5
    4758:	f007 fd1e 	bl	c198 <z_impl_k_thread_create>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread, *(uintptr_t *)&str, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    475c:	4908      	ldr	r1, [pc, #32]	; (4780 <enable_logger+0x58>)
    475e:	4628      	mov	r0, r5
    4760:	f00d fd4d 	bl	121fe <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    4764:	4620      	mov	r0, r4
    4766:	b009      	add	sp, #36	; 0x24
    4768:	bd30      	pop	{r4, r5, pc}
    476a:	bf00      	nop
    476c:	00004785 	.word	0x00004785
    4770:	200003f0 	.word	0x200003f0
    4774:	20000428 	.word	0x20000428
    4778:	20001620 	.word	0x20001620
    477c:	00004c21 	.word	0x00004c21
    4780:	00013b9d 	.word	0x00013b9d

00004784 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    4784:	4801      	ldr	r0, [pc, #4]	; (478c <log_process_thread_timer_expiry_fn+0x8>)
    4786:	f007 bf8f 	b.w	c6a8 <z_impl_k_sem_give>
    478a:	bf00      	nop
    478c:	200003dc 	.word	0x200003dc

00004790 <z_log_get_s_mask>:
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
    4790:	2920      	cmp	r1, #32
{
    4792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4794:	4605      	mov	r5, r0
    4796:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
    4798:	d908      	bls.n	47ac <z_log_get_s_mask+0x1c>
    479a:	4914      	ldr	r1, [pc, #80]	; (47ec <z_log_get_s_mask+0x5c>)
    479c:	4814      	ldr	r0, [pc, #80]	; (47f0 <z_log_get_s_mask+0x60>)
    479e:	2287      	movs	r2, #135	; 0x87
    47a0:	f00a fe11 	bl	f3c6 <printk>
    47a4:	4811      	ldr	r0, [pc, #68]	; (47ec <z_log_get_s_mask+0x5c>)
    47a6:	2187      	movs	r1, #135	; 0x87
    47a8:	f00a fed2 	bl	f550 <assert_post_action>
			arm = false;
    47ac:	2000      	movs	r0, #0
		} else if (arm && isalpha((int)curr)) {
    47ae:	4e11      	ldr	r6, [pc, #68]	; (47f4 <z_log_get_s_mask+0x64>)
			arm = false;
    47b0:	4603      	mov	r3, r0
    47b2:	4602      	mov	r2, r0
				mask |= BIT(arg);
    47b4:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
    47b6:	f815 1b01 	ldrb.w	r1, [r5], #1
    47ba:	b109      	cbz	r1, 47c0 <z_log_get_s_mask+0x30>
    47bc:	42a3      	cmp	r3, r4
    47be:	d300      	bcc.n	47c2 <z_log_get_s_mask+0x32>
}
    47c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (curr == '%') {
    47c2:	2925      	cmp	r1, #37	; 0x25
    47c4:	d102      	bne.n	47cc <z_log_get_s_mask+0x3c>
			arm = !arm;
    47c6:	f082 0201 	eor.w	r2, r2, #1
    47ca:	e7f4      	b.n	47b6 <z_log_get_s_mask+0x26>
		} else if (arm && isalpha((int)curr)) {
    47cc:	2a00      	cmp	r2, #0
    47ce:	d0f2      	beq.n	47b6 <z_log_get_s_mask+0x26>
    47d0:	f811 c006 	ldrb.w	ip, [r1, r6]
    47d4:	f01c 0f03 	tst.w	ip, #3
    47d8:	d0ed      	beq.n	47b6 <z_log_get_s_mask+0x26>
			if (curr == 's') {
    47da:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
    47dc:	bf04      	itt	eq
    47de:	fa07 f203 	lsleq.w	r2, r7, r3
    47e2:	4310      	orreq	r0, r2
			arg++;
    47e4:	3301      	adds	r3, #1
			arm = false;
    47e6:	2200      	movs	r2, #0
    47e8:	e7e5      	b.n	47b6 <z_log_get_s_mask+0x26>
    47ea:	bf00      	nop
    47ec:	00013ba5 	.word	0x00013ba5
    47f0:	00013904 	.word	0x00013904
    47f4:	00014c37 	.word	0x00014c37

000047f8 <log_core_init>:
	panic_mode = false;
    47f8:	4a0c      	ldr	r2, [pc, #48]	; (482c <log_core_init+0x34>)
    47fa:	2300      	movs	r3, #0
{
    47fc:	b510      	push	{r4, lr}
	panic_mode = false;
    47fe:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    4800:	4a0b      	ldr	r2, [pc, #44]	; (4830 <log_core_init+0x38>)
    4802:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    4804:	4b0b      	ldr	r3, [pc, #44]	; (4834 <log_core_init+0x3c>)
    4806:	4a0c      	ldr	r2, [pc, #48]	; (4838 <log_core_init+0x40>)
    4808:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    480a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    480e:	f000 fdb9 	bl	5384 <log_output_timestamp_freq_set>
		log_msg_pool_init();
    4812:	f000 fab1 	bl	4d78 <log_msg_pool_init>
		log_list_init(&list);
    4816:	4809      	ldr	r0, [pc, #36]	; (483c <log_core_init+0x44>)
    4818:	f00a fea2 	bl	f560 <log_list_init>
}
    481c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    4820:	4907      	ldr	r1, [pc, #28]	; (4840 <log_core_init+0x48>)
    4822:	4808      	ldr	r0, [pc, #32]	; (4844 <log_core_init+0x4c>)
    4824:	2304      	movs	r3, #4
    4826:	2228      	movs	r2, #40	; 0x28
    4828:	f00d bcc7 	b.w	121ba <k_mem_slab_init>
    482c:	20000f82 	.word	0x20000f82
    4830:	2000096c 	.word	0x2000096c
    4834:	20000048 	.word	0x20000048
    4838:	0000f5a5 	.word	0x0000f5a5
    483c:	20000974 	.word	0x20000974
    4840:	200032e0 	.word	0x200032e0
    4844:	2000097c 	.word	0x2000097c

00004848 <log_init>:
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    4848:	4b19      	ldr	r3, [pc, #100]	; (48b0 <log_init+0x68>)
    484a:	4a1a      	ldr	r2, [pc, #104]	; (48b4 <log_init+0x6c>)
    484c:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    484e:	2b9f      	cmp	r3, #159	; 0x9f
{
    4850:	b570      	push	{r4, r5, r6, lr}
    4852:	ea4f 1623 	mov.w	r6, r3, asr #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    4856:	d90a      	bls.n	486e <log_init+0x26>
    4858:	4917      	ldr	r1, [pc, #92]	; (48b8 <log_init+0x70>)
    485a:	4818      	ldr	r0, [pc, #96]	; (48bc <log_init+0x74>)
    485c:	f240 224a 	movw	r2, #586	; 0x24a
    4860:	f00a fdb1 	bl	f3c6 <printk>
    4864:	4814      	ldr	r0, [pc, #80]	; (48b8 <log_init+0x70>)
    4866:	f240 214a 	movw	r1, #586	; 0x24a
    486a:	f00a fe71 	bl	f550 <assert_post_action>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    486e:	f3bf 8f5b 	dmb	ish
    4872:	4b13      	ldr	r3, [pc, #76]	; (48c0 <log_init+0x78>)
    4874:	e853 5f00 	ldrex	r5, [r3]
    4878:	1c6a      	adds	r2, r5, #1
    487a:	e843 2100 	strex	r1, r2, [r3]
    487e:	2900      	cmp	r1, #0
    4880:	d1f8      	bne.n	4874 <log_init+0x2c>
    4882:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    4886:	b915      	cbnz	r5, 488e <log_init+0x46>
    4888:	4c0a      	ldr	r4, [pc, #40]	; (48b4 <log_init+0x6c>)
	for (i = 0; i < log_backend_count_get(); i++) {
    488a:	42b5      	cmp	r5, r6
    488c:	db00      	blt.n	4890 <log_init+0x48>
}
    488e:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    4890:	7b23      	ldrb	r3, [r4, #12]
    4892:	b153      	cbz	r3, 48aa <log_init+0x62>
			if (backend->api->init != NULL) {
    4894:	6823      	ldr	r3, [r4, #0]
    4896:	699b      	ldr	r3, [r3, #24]
    4898:	b10b      	cbz	r3, 489e <log_init+0x56>
				backend->api->init(backend);
    489a:	4620      	mov	r0, r4
    489c:	4798      	blx	r3
			log_backend_enable(backend,
    489e:	6863      	ldr	r3, [r4, #4]
    48a0:	2204      	movs	r2, #4
    48a2:	6819      	ldr	r1, [r3, #0]
    48a4:	4620      	mov	r0, r4
    48a6:	f000 fa45 	bl	4d34 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    48aa:	3501      	adds	r5, #1
    48ac:	3410      	adds	r4, #16
    48ae:	e7ec      	b.n	488a <log_init+0x42>
    48b0:	00013114 	.word	0x00013114
    48b4:	00013104 	.word	0x00013104
    48b8:	00013ba5 	.word	0x00013ba5
    48bc:	00013904 	.word	0x00013904
    48c0:	20000970 	.word	0x20000970

000048c4 <get_msg>:
{
    48c4:	b510      	push	{r4, lr}
	__asm__ volatile(
    48c6:	f04f 0320 	mov.w	r3, #32
    48ca:	f3ef 8411 	mrs	r4, BASEPRI
    48ce:	f383 8812 	msr	BASEPRI_MAX, r3
    48d2:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
    48d6:	4804      	ldr	r0, [pc, #16]	; (48e8 <get_msg+0x24>)
    48d8:	f00a fe52 	bl	f580 <log_list_head_get>
	__asm__ volatile(
    48dc:	f384 8811 	msr	BASEPRI, r4
    48e0:	f3bf 8f6f 	isb	sy
}
    48e4:	bd10      	pop	{r4, pc}
    48e6:	bf00      	nop
    48e8:	20000974 	.word	0x20000974

000048ec <z_log_notify_backend_enabled>:
{
    48ec:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    48ee:	4c04      	ldr	r4, [pc, #16]	; (4900 <z_log_notify_backend_enabled+0x14>)
    48f0:	7822      	ldrb	r2, [r4, #0]
    48f2:	b912      	cbnz	r2, 48fa <z_log_notify_backend_enabled+0xe>
    48f4:	4803      	ldr	r0, [pc, #12]	; (4904 <z_log_notify_backend_enabled+0x18>)
    48f6:	f007 fed7 	bl	c6a8 <z_impl_k_sem_give>
	backend_attached = true;
    48fa:	2301      	movs	r3, #1
    48fc:	7023      	strb	r3, [r4, #0]
}
    48fe:	bd10      	pop	{r4, pc}
    4900:	20000f81 	.word	0x20000f81
    4904:	200003dc 	.word	0x200003dc

00004908 <z_log_dropped>:
    4908:	4b0c      	ldr	r3, [pc, #48]	; (493c <z_log_dropped+0x34>)
    490a:	f3bf 8f5b 	dmb	ish
    490e:	e853 2f00 	ldrex	r2, [r3]
    4912:	3201      	adds	r2, #1
    4914:	e843 2100 	strex	r1, r2, [r3]
    4918:	2900      	cmp	r1, #0
    491a:	d1f8      	bne.n	490e <z_log_dropped+0x6>
    491c:	f3bf 8f5b 	dmb	ish
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4920:	f3bf 8f5b 	dmb	ish
    4924:	4b06      	ldr	r3, [pc, #24]	; (4940 <z_log_dropped+0x38>)
    4926:	e853 2f00 	ldrex	r2, [r3]
    492a:	3a01      	subs	r2, #1
    492c:	e843 2100 	strex	r1, r2, [r3]
    4930:	2900      	cmp	r1, #0
    4932:	d1f8      	bne.n	4926 <z_log_dropped+0x1e>
    4934:	f3bf 8f5b 	dmb	ish
}
    4938:	4770      	bx	lr
    493a:	bf00      	nop
    493c:	2000096c 	.word	0x2000096c
    4940:	20000968 	.word	0x20000968

00004944 <z_log_dropped_read_and_clear>:
}
    4944:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4946:	4b06      	ldr	r3, [pc, #24]	; (4960 <z_log_dropped_read_and_clear+0x1c>)
    4948:	f3bf 8f5b 	dmb	ish
    494c:	4602      	mov	r2, r0
    494e:	e853 0f00 	ldrex	r0, [r3]
    4952:	e843 2100 	strex	r1, r2, [r3]
    4956:	2900      	cmp	r1, #0
    4958:	d1f9      	bne.n	494e <z_log_dropped_read_and_clear+0xa>
    495a:	f3bf 8f5b 	dmb	ish
    495e:	4770      	bx	lr
    4960:	2000096c 	.word	0x2000096c

00004964 <dropped_notify>:
{
    4964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    4966:	f7ff ffed 	bl	4944 <z_log_dropped_read_and_clear>
    496a:	4c0b      	ldr	r4, [pc, #44]	; (4998 <dropped_notify+0x34>)
    496c:	4d0b      	ldr	r5, [pc, #44]	; (499c <dropped_notify+0x38>)
    496e:	1b2d      	subs	r5, r5, r4
    4970:	4607      	mov	r7, r0
    4972:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    4974:	2600      	movs	r6, #0
    4976:	42ae      	cmp	r6, r5
    4978:	db00      	blt.n	497c <dropped_notify+0x18>
}
    497a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
    497c:	4620      	mov	r0, r4
    497e:	f00a fe05 	bl	f58c <log_backend_is_active>
    4982:	b128      	cbz	r0, 4990 <dropped_notify+0x2c>
	if (backend->api->dropped != NULL) {
    4984:	6823      	ldr	r3, [r4, #0]
    4986:	691b      	ldr	r3, [r3, #16]
    4988:	b113      	cbz	r3, 4990 <dropped_notify+0x2c>
		backend->api->dropped(backend, cnt);
    498a:	4639      	mov	r1, r7
    498c:	4620      	mov	r0, r4
    498e:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    4990:	3601      	adds	r6, #1
    4992:	3410      	adds	r4, #16
    4994:	e7ef      	b.n	4976 <dropped_notify+0x12>
    4996:	bf00      	nop
    4998:	00013104 	.word	0x00013104
    499c:	00013114 	.word	0x00013114

000049a0 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    49a0:	4b17      	ldr	r3, [pc, #92]	; (4a00 <z_log_strdup+0x60>)
    49a2:	4298      	cmp	r0, r3
{
    49a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    49a6:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    49a8:	d302      	bcc.n	49b0 <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    49aa:	4b16      	ldr	r3, [pc, #88]	; (4a04 <z_log_strdup+0x64>)
    49ac:	4298      	cmp	r0, r3
    49ae:	d321      	bcc.n	49f4 <z_log_strdup+0x54>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    49b0:	4815      	ldr	r0, [pc, #84]	; (4a08 <z_log_strdup+0x68>)
    49b2:	2200      	movs	r2, #0
    49b4:	2300      	movs	r3, #0
    49b6:	a901      	add	r1, sp, #4
    49b8:	f007 faea 	bl	bf90 <k_mem_slab_alloc>
	if (err != 0) {
    49bc:	4605      	mov	r5, r0
    49be:	b9e0      	cbnz	r0, 49fa <z_log_strdup+0x5a>
    49c0:	2201      	movs	r2, #1
    49c2:	9b01      	ldr	r3, [sp, #4]
    49c4:	f3bf 8f5b 	dmb	ish
    49c8:	e853 1f00 	ldrex	r1, [r3]
    49cc:	e843 2000 	strex	r0, r2, [r3]
    49d0:	2800      	cmp	r0, #0
    49d2:	d1f9      	bne.n	49c8 <z_log_strdup+0x28>
    49d4:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    49d8:	9e01      	ldr	r6, [sp, #4]
    49da:	1d33      	adds	r3, r6, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    49dc:	221f      	movs	r2, #31
    49de:	4618      	mov	r0, r3
    49e0:	4621      	mov	r1, r4
    49e2:	f00d fde3 	bl	125ac <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    49e6:	227e      	movs	r2, #126	; 0x7e
    49e8:	4603      	mov	r3, r0
    49ea:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    49ee:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
	return dup->buf;
    49f2:	461c      	mov	r4, r3
}
    49f4:	4620      	mov	r0, r4
    49f6:	b002      	add	sp, #8
    49f8:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
    49fa:	4b04      	ldr	r3, [pc, #16]	; (4a0c <z_log_strdup+0x6c>)
    49fc:	e7f9      	b.n	49f2 <z_log_strdup+0x52>
    49fe:	bf00      	nop
    4a00:	00012e7c 	.word	0x00012e7c
    4a04:	00014d8c 	.word	0x00014d8c
    4a08:	2000097c 	.word	0x2000097c
    4a0c:	00013bd2 	.word	0x00013bd2

00004a10 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    4a10:	b148      	cbz	r0, 4a26 <log_is_strdup+0x16>
    4a12:	4b05      	ldr	r3, [pc, #20]	; (4a28 <log_is_strdup+0x18>)
    4a14:	4298      	cmp	r0, r3
    4a16:	d305      	bcc.n	4a24 <log_is_strdup+0x14>
    4a18:	33a0      	adds	r3, #160	; 0xa0
    4a1a:	4298      	cmp	r0, r3
    4a1c:	bf2c      	ite	cs
    4a1e:	2000      	movcs	r0, #0
    4a20:	2001      	movcc	r0, #1
    4a22:	4770      	bx	lr
    4a24:	2000      	movs	r0, #0
}
    4a26:	4770      	bx	lr
    4a28:	200032e0 	.word	0x200032e0

00004a2c <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    4a2c:	4b40      	ldr	r3, [pc, #256]	; (4b30 <z_impl_log_process+0x104>)
    4a2e:	781b      	ldrb	r3, [r3, #0]
{
    4a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4a34:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    4a36:	b903      	cbnz	r3, 4a3a <z_impl_log_process+0xe>
    4a38:	b1a0      	cbz	r0, 4a64 <z_impl_log_process+0x38>
	msg = get_msg();
    4a3a:	f7ff ff43 	bl	48c4 <get_msg>
	if (msg.msg) {
    4a3e:	4605      	mov	r5, r0
    4a40:	b118      	cbz	r0, 4a4a <z_impl_log_process+0x1e>
		if (!bypass) {
    4a42:	b194      	cbz	r4, 4a6a <z_impl_log_process+0x3e>
			log_msg_put(msg.msg);
    4a44:	4628      	mov	r0, r5
    4a46:	f00a feb1 	bl	f7ac <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
    4a4a:	b92c      	cbnz	r4, 4a58 <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
    4a4c:	4b39      	ldr	r3, [pc, #228]	; (4b34 <z_impl_log_process+0x108>)
	if (!bypass && z_log_dropped_pending()) {
    4a4e:	681b      	ldr	r3, [r3, #0]
    4a50:	2b00      	cmp	r3, #0
    4a52:	dd01      	ble.n	4a58 <z_impl_log_process+0x2c>
		dropped_notify();
    4a54:	f7ff ff86 	bl	4964 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    4a58:	4837      	ldr	r0, [pc, #220]	; (4b38 <z_impl_log_process+0x10c>)
    4a5a:	f00a fd8f 	bl	f57c <log_list_head_peek>
    4a5e:	1e04      	subs	r4, r0, #0
    4a60:	bf18      	it	ne
    4a62:	2401      	movne	r4, #1
}
    4a64:	4620      	mov	r0, r4
    4a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4a6a:	4b34      	ldr	r3, [pc, #208]	; (4b3c <z_impl_log_process+0x110>)
    4a6c:	f3bf 8f5b 	dmb	ish
    4a70:	e853 2f00 	ldrex	r2, [r3]
    4a74:	3a01      	subs	r2, #1
    4a76:	e843 2100 	strex	r1, r2, [r3]
    4a7a:	2900      	cmp	r1, #0
    4a7c:	d1f8      	bne.n	4a70 <z_impl_log_process+0x44>
    4a7e:	f3bf 8f5b 	dmb	ish
		    !panic_mode) {
    4a82:	4b2f      	ldr	r3, [pc, #188]	; (4b40 <z_impl_log_process+0x114>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
    4a84:	781b      	ldrb	r3, [r3, #0]
    4a86:	b9a3      	cbnz	r3, 4ab2 <z_impl_log_process+0x86>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    4a88:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    4a8a:	07db      	lsls	r3, r3, #31
    4a8c:	d411      	bmi.n	4ab2 <z_impl_log_process+0x86>
	msg_str = log_msg_str_get(msg);
    4a8e:	f00a fea0 	bl	f7d2 <log_msg_str_get>
    4a92:	4606      	mov	r6, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    4a94:	4628      	mov	r0, r5
    4a96:	f00a fe67 	bl	f768 <log_msg_nargs_get>
    4a9a:	4601      	mov	r1, r0
    4a9c:	4630      	mov	r0, r6
    4a9e:	f7ff fe77 	bl	4790 <z_log_get_s_mask>
	return (((const char *)addr >= (const char *)RO_START) &&
    4aa2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 4b54 <z_impl_log_process+0x128>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    4aa6:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 4b58 <z_impl_log_process+0x12c>
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
    4aaa:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 4b5c <z_impl_log_process+0x130>
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    4aae:	4606      	mov	r6, r0
	while (mask) {
    4ab0:	b936      	cbnz	r6, 4ac0 <z_impl_log_process+0x94>
	return __log_backends_end - __log_backends_start;
    4ab2:	4e24      	ldr	r6, [pc, #144]	; (4b44 <z_impl_log_process+0x118>)
    4ab4:	4f24      	ldr	r7, [pc, #144]	; (4b48 <z_impl_log_process+0x11c>)
    4ab6:	1bbf      	subs	r7, r7, r6
    4ab8:	113f      	asrs	r7, r7, #4
    4aba:	f04f 0800 	mov.w	r8, #0
    4abe:	e033      	b.n	4b28 <z_impl_log_process+0xfc>
		idx = 31 - __builtin_clz(mask);
    4ac0:	fab6 f786 	clz	r7, r6
    4ac4:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    4ac8:	4639      	mov	r1, r7
    4aca:	4628      	mov	r0, r5
    4acc:	f00a fe4f 	bl	f76e <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    4ad0:	4548      	cmp	r0, r9
		str = (const char *)log_msg_arg_get(msg, idx);
    4ad2:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    4ad4:	d302      	bcc.n	4adc <z_impl_log_process+0xb0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    4ad6:	4b1d      	ldr	r3, [pc, #116]	; (4b4c <z_impl_log_process+0x120>)
    4ad8:	4298      	cmp	r0, r3
    4ada:	d313      	bcc.n	4b04 <z_impl_log_process+0xd8>
    4adc:	4610      	mov	r0, r2
    4ade:	f7ff ff97 	bl	4a10 <log_is_strdup>
    4ae2:	b978      	cbnz	r0, 4b04 <z_impl_log_process+0xd8>
    4ae4:	4552      	cmp	r2, sl
    4ae6:	d00d      	beq.n	4b04 <z_impl_log_process+0xd8>
	return msg->hdr.ids.source_id;
    4ae8:	8969      	ldrh	r1, [r5, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
    4aea:	f3c1 1189 	ubfx	r1, r1, #6, #10
    4aee:	f000 f913 	bl	4d18 <log_source_name_get>
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
    4af2:	4817      	ldr	r0, [pc, #92]	; (4b50 <z_impl_log_process+0x124>)
    4af4:	4641      	mov	r1, r8
    4af6:	22d8      	movs	r2, #216	; 0xd8
    4af8:	f00a fc65 	bl	f3c6 <printk>
    4afc:	21d8      	movs	r1, #216	; 0xd8
    4afe:	4640      	mov	r0, r8
    4b00:	f00a fd26 	bl	f550 <assert_post_action>
		mask &= ~BIT(idx);
    4b04:	2301      	movs	r3, #1
    4b06:	fa03 f707 	lsl.w	r7, r3, r7
    4b0a:	ea26 0607 	bic.w	r6, r6, r7
    4b0e:	e7cf      	b.n	4ab0 <z_impl_log_process+0x84>
			if (log_backend_is_active(backend) &&
    4b10:	4630      	mov	r0, r6
    4b12:	f00a fd3b 	bl	f58c <log_backend_is_active>
    4b16:	b120      	cbz	r0, 4b22 <z_impl_log_process+0xf6>
	backend->api->put(backend, msg);
    4b18:	6833      	ldr	r3, [r6, #0]
    4b1a:	4629      	mov	r1, r5
    4b1c:	685b      	ldr	r3, [r3, #4]
    4b1e:	4630      	mov	r0, r6
    4b20:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    4b22:	f108 0801 	add.w	r8, r8, #1
    4b26:	3610      	adds	r6, #16
    4b28:	45b8      	cmp	r8, r7
    4b2a:	dbf1      	blt.n	4b10 <z_impl_log_process+0xe4>
    4b2c:	e78a      	b.n	4a44 <z_impl_log_process+0x18>
    4b2e:	bf00      	nop
    4b30:	20000f81 	.word	0x20000f81
    4b34:	2000096c 	.word	0x2000096c
    4b38:	20000974 	.word	0x20000974
    4b3c:	20000968 	.word	0x20000968
    4b40:	20000f82 	.word	0x20000f82
    4b44:	00013104 	.word	0x00013104
    4b48:	00013114 	.word	0x00013114
    4b4c:	00014d8c 	.word	0x00014d8c
    4b50:	00013904 	.word	0x00013904
    4b54:	00012e7c 	.word	0x00012e7c
    4b58:	00013bd2 	.word	0x00013bd2
    4b5c:	00013ba5 	.word	0x00013ba5

00004b60 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    4b60:	4b28      	ldr	r3, [pc, #160]	; (4c04 <msg_finalize+0xa4>)
{
    4b62:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
    4b64:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    4b66:	8141      	strh	r1, [r0, #10]
{
    4b68:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    4b6a:	4798      	blx	r3
    4b6c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    4b6e:	f04f 0320 	mov.w	r3, #32
    4b72:	f3ef 8511 	mrs	r5, BASEPRI
    4b76:	f383 8812 	msr	BASEPRI_MAX, r3
    4b7a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    4b7e:	4822      	ldr	r0, [pc, #136]	; (4c08 <msg_finalize+0xa8>)
    4b80:	4621      	mov	r1, r4
    4b82:	f00a fcf1 	bl	f568 <log_list_add_tail>
	__asm__ volatile(
    4b86:	f385 8811 	msr	BASEPRI, r5
    4b8a:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    4b8e:	f3bf 8f5b 	dmb	ish
    4b92:	4b1e      	ldr	r3, [pc, #120]	; (4c0c <msg_finalize+0xac>)
    4b94:	e853 2f00 	ldrex	r2, [r3]
    4b98:	1c51      	adds	r1, r2, #1
    4b9a:	e843 1000 	strex	r0, r1, [r3]
    4b9e:	2800      	cmp	r0, #0
    4ba0:	d1f8      	bne.n	4b94 <msg_finalize+0x34>
    4ba2:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    4ba6:	4b1a      	ldr	r3, [pc, #104]	; (4c10 <msg_finalize+0xb0>)
    4ba8:	781b      	ldrb	r3, [r3, #0]
    4baa:	b183      	cbz	r3, 4bce <msg_finalize+0x6e>
	__asm__ volatile(
    4bac:	f04f 0320 	mov.w	r3, #32
    4bb0:	f3ef 8411 	mrs	r4, BASEPRI
    4bb4:	f383 8812 	msr	BASEPRI_MAX, r3
    4bb8:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    4bbc:	2000      	movs	r0, #0
    4bbe:	f7ff ff35 	bl	4a2c <z_impl_log_process>
	__asm__ volatile(
    4bc2:	f384 8811 	msr	BASEPRI, r4
    4bc6:	f3bf 8f6f 	isb	sy
}
    4bca:	b003      	add	sp, #12
    4bcc:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && cnt == 0) {
    4bce:	4b11      	ldr	r3, [pc, #68]	; (4c14 <msg_finalize+0xb4>)
    4bd0:	681b      	ldr	r3, [r3, #0]
    4bd2:	2b00      	cmp	r3, #0
    4bd4:	d0f9      	beq.n	4bca <msg_finalize+0x6a>
    4bd6:	b952      	cbnz	r2, 4bee <msg_finalize+0x8e>
	z_impl_k_timer_start(timer, duration, period);
    4bd8:	2200      	movs	r2, #0
    4bda:	2300      	movs	r3, #0
    4bdc:	e9cd 2300 	strd	r2, r3, [sp]
    4be0:	480d      	ldr	r0, [pc, #52]	; (4c18 <msg_finalize+0xb8>)
    4be2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    4be6:	2300      	movs	r3, #0
    4be8:	f009 f924 	bl	de34 <z_impl_k_timer_start>
    4bec:	e7ed      	b.n	4bca <msg_finalize+0x6a>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    4bee:	2a0a      	cmp	r2, #10
    4bf0:	d1eb      	bne.n	4bca <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    4bf2:	4809      	ldr	r0, [pc, #36]	; (4c18 <msg_finalize+0xb8>)
    4bf4:	f00d fb4c 	bl	12290 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    4bf8:	4808      	ldr	r0, [pc, #32]	; (4c1c <msg_finalize+0xbc>)
}
    4bfa:	b003      	add	sp, #12
    4bfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    4c00:	f007 bd52 	b.w	c6a8 <z_impl_k_sem_give>
    4c04:	20000048 	.word	0x20000048
    4c08:	20000974 	.word	0x20000974
    4c0c:	20000968 	.word	0x20000968
    4c10:	20000f82 	.word	0x20000f82
    4c14:	2000099c 	.word	0x2000099c
    4c18:	200003f0 	.word	0x200003f0
    4c1c:	200003dc 	.word	0x200003dc

00004c20 <log_process_thread_func>:
	return __log_backends_end - __log_backends_start;
    4c20:	4b16      	ldr	r3, [pc, #88]	; (4c7c <log_process_thread_func+0x5c>)
    4c22:	4a17      	ldr	r2, [pc, #92]	; (4c80 <log_process_thread_func+0x60>)
    4c24:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    4c26:	2b00      	cmp	r3, #0
{
    4c28:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    4c2a:	dc0a      	bgt.n	4c42 <log_process_thread_func+0x22>
    4c2c:	4915      	ldr	r1, [pc, #84]	; (4c84 <log_process_thread_func+0x64>)
    4c2e:	4816      	ldr	r0, [pc, #88]	; (4c88 <log_process_thread_func+0x68>)
    4c30:	f240 42f1 	movw	r2, #1265	; 0x4f1
    4c34:	f00a fbc7 	bl	f3c6 <printk>
    4c38:	4812      	ldr	r0, [pc, #72]	; (4c84 <log_process_thread_func+0x64>)
    4c3a:	f240 41f1 	movw	r1, #1265	; 0x4f1
    4c3e:	f00a fc87 	bl	f550 <assert_post_action>
	log_init();
    4c42:	f7ff fe01 	bl	4848 <log_init>
	return z_impl_z_current_get();
    4c46:	f008 fcff 	bl	d648 <z_impl_z_current_get>
	proc_tid = process_tid;
    4c4a:	4b10      	ldr	r3, [pc, #64]	; (4c8c <log_process_thread_func+0x6c>)
    4c4c:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    4c4e:	b130      	cbz	r0, 4c5e <log_process_thread_func+0x3e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    4c50:	4b0f      	ldr	r3, [pc, #60]	; (4c90 <log_process_thread_func+0x70>)
	    process_tid &&
    4c52:	681b      	ldr	r3, [r3, #0]
    4c54:	2b09      	cmp	r3, #9
    4c56:	dd02      	ble.n	4c5e <log_process_thread_func+0x3e>
	z_impl_k_sem_give(sem);
    4c58:	480e      	ldr	r0, [pc, #56]	; (4c94 <log_process_thread_func+0x74>)
    4c5a:	f007 fd25 	bl	c6a8 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    4c5e:	4c0d      	ldr	r4, [pc, #52]	; (4c94 <log_process_thread_func+0x74>)
    4c60:	2000      	movs	r0, #0
    4c62:	f7ff fee3 	bl	4a2c <z_impl_log_process>
		if (log_process(false) == false) {
    4c66:	2800      	cmp	r0, #0
    4c68:	d1fa      	bne.n	4c60 <log_process_thread_func+0x40>
    4c6a:	f04f 32ff 	mov.w	r2, #4294967295
    4c6e:	f04f 33ff 	mov.w	r3, #4294967295
    4c72:	4620      	mov	r0, r4
    4c74:	f007 fd4e 	bl	c714 <z_impl_k_sem_take>
    4c78:	e7f2      	b.n	4c60 <log_process_thread_func+0x40>
    4c7a:	bf00      	nop
    4c7c:	00013114 	.word	0x00013114
    4c80:	00013104 	.word	0x00013104
    4c84:	00013ba5 	.word	0x00013ba5
    4c88:	00013904 	.word	0x00013904
    4c8c:	2000099c 	.word	0x2000099c
    4c90:	20000968 	.word	0x20000968
    4c94:	200003dc 	.word	0x200003dc

00004c98 <z_impl_log_panic>:
{
    4c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    4c9a:	4f0f      	ldr	r7, [pc, #60]	; (4cd8 <z_impl_log_panic+0x40>)
    4c9c:	783d      	ldrb	r5, [r7, #0]
    4c9e:	b975      	cbnz	r5, 4cbe <z_impl_log_panic+0x26>
    4ca0:	4c0e      	ldr	r4, [pc, #56]	; (4cdc <z_impl_log_panic+0x44>)
    4ca2:	4e0f      	ldr	r6, [pc, #60]	; (4ce0 <z_impl_log_panic+0x48>)
	log_init();
    4ca4:	f7ff fdd0 	bl	4848 <log_init>
    4ca8:	1b36      	subs	r6, r6, r4
    4caa:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    4cac:	42b5      	cmp	r5, r6
    4cae:	db07      	blt.n	4cc0 <z_impl_log_panic+0x28>
    4cb0:	2000      	movs	r0, #0
    4cb2:	f7ff febb 	bl	4a2c <z_impl_log_process>
		while (log_process(false) == true) {
    4cb6:	2800      	cmp	r0, #0
    4cb8:	d1fa      	bne.n	4cb0 <z_impl_log_panic+0x18>
	panic_mode = true;
    4cba:	2301      	movs	r3, #1
    4cbc:	703b      	strb	r3, [r7, #0]
}
    4cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
    4cc0:	4620      	mov	r0, r4
    4cc2:	f00a fc63 	bl	f58c <log_backend_is_active>
    4cc6:	b118      	cbz	r0, 4cd0 <z_impl_log_panic+0x38>
	backend->api->panic(backend);
    4cc8:	6823      	ldr	r3, [r4, #0]
    4cca:	4620      	mov	r0, r4
    4ccc:	695b      	ldr	r3, [r3, #20]
    4cce:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    4cd0:	3501      	adds	r5, #1
    4cd2:	3410      	adds	r4, #16
    4cd4:	e7ea      	b.n	4cac <z_impl_log_panic+0x14>
    4cd6:	bf00      	nop
    4cd8:	20000f82 	.word	0x20000f82
    4cdc:	00013104 	.word	0x00013104
    4ce0:	00013114 	.word	0x00013114

00004ce4 <z_log_free>:
{
    4ce4:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    4ce6:	3804      	subs	r0, #4
    4ce8:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4cea:	f3bf 8f5b 	dmb	ish
    4cee:	e850 3f00 	ldrex	r3, [r0]
    4cf2:	1e5a      	subs	r2, r3, #1
    4cf4:	e840 2100 	strex	r1, r2, [r0]
    4cf8:	2900      	cmp	r1, #0
    4cfa:	d1f8      	bne.n	4cee <z_log_free+0xa>
    4cfc:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    4d00:	2b01      	cmp	r3, #1
    4d02:	d103      	bne.n	4d0c <z_log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    4d04:	4803      	ldr	r0, [pc, #12]	; (4d14 <z_log_free+0x30>)
    4d06:	a901      	add	r1, sp, #4
    4d08:	f007 f99c 	bl	c044 <k_mem_slab_free>
}
    4d0c:	b003      	add	sp, #12
    4d0e:	f85d fb04 	ldr.w	pc, [sp], #4
    4d12:	bf00      	nop
    4d14:	2000097c 	.word	0x2000097c

00004d18 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    4d18:	4a04      	ldr	r2, [pc, #16]	; (4d2c <log_source_name_get+0x14>)
    4d1a:	4b05      	ldr	r3, [pc, #20]	; (4d30 <log_source_name_get+0x18>)
    4d1c:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    4d1e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    4d22:	bf34      	ite	cc
    4d24:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    4d28:	2000      	movcs	r0, #0
}
    4d2a:	4770      	bx	lr
    4d2c:	000130a4 	.word	0x000130a4
    4d30:	00013104 	.word	0x00013104

00004d34 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    4d34:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    4d36:	4c0d      	ldr	r4, [pc, #52]	; (4d6c <log_backend_enable+0x38>)
    4d38:	1b04      	subs	r4, r0, r4
    4d3a:	1124      	asrs	r4, r4, #4
    4d3c:	3401      	adds	r4, #1
{
    4d3e:	4605      	mov	r5, r0
    4d40:	460e      	mov	r6, r1

	log_backend_id_set(backend, id);
    4d42:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
    4d44:	b940      	cbnz	r0, 4d58 <log_backend_enable+0x24>
    4d46:	490a      	ldr	r1, [pc, #40]	; (4d70 <log_backend_enable+0x3c>)
    4d48:	480a      	ldr	r0, [pc, #40]	; (4d74 <log_backend_enable+0x40>)
    4d4a:	22d1      	movs	r2, #209	; 0xd1
    4d4c:	f00a fb3b 	bl	f3c6 <printk>
    4d50:	4807      	ldr	r0, [pc, #28]	; (4d70 <log_backend_enable+0x3c>)
    4d52:	21d1      	movs	r1, #209	; 0xd1
    4d54:	f00a fbfc 	bl	f550 <assert_post_action>
	backend->cb->id = id;
    4d58:	686b      	ldr	r3, [r5, #4]
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
    4d5a:	2201      	movs	r2, #1
	backend->cb->id = id;
    4d5c:	711c      	strb	r4, [r3, #4]
	backend->cb->ctx = ctx;
    4d5e:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    4d60:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    4d62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
    4d66:	f7ff bdc1 	b.w	48ec <z_log_notify_backend_enabled>
    4d6a:	bf00      	nop
    4d6c:	00013104 	.word	0x00013104
    4d70:	00013c1d 	.word	0x00013c1d
    4d74:	00013904 	.word	0x00013904

00004d78 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    4d78:	2320      	movs	r3, #32
    4d7a:	4902      	ldr	r1, [pc, #8]	; (4d84 <log_msg_pool_init+0xc>)
    4d7c:	4802      	ldr	r0, [pc, #8]	; (4d88 <log_msg_pool_init+0x10>)
    4d7e:	461a      	mov	r2, r3
    4d80:	f00d ba1b 	b.w	121ba <k_mem_slab_init>
    4d84:	20003380 	.word	0x20003380
    4d88:	200009a0 	.word	0x200009a0

00004d8c <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    4d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    4d8e:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    4d90:	4d09      	ldr	r5, [pc, #36]	; (4db8 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    4d92:	9301      	str	r3, [sp, #4]
    4d94:	2001      	movs	r0, #1
    4d96:	f7ff fe49 	bl	4a2c <z_impl_log_process>
    4d9a:	4604      	mov	r4, r0
			z_log_dropped();
    4d9c:	f7ff fdb4 	bl	4908 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    4da0:	2200      	movs	r2, #0
    4da2:	2300      	movs	r3, #0
    4da4:	a901      	add	r1, sp, #4
    4da6:	4628      	mov	r0, r5
    4da8:	f007 f8f2 	bl	bf90 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    4dac:	b108      	cbz	r0, 4db2 <log_msg_no_space_handle+0x26>
    4dae:	2c00      	cmp	r4, #0
    4db0:	d1f0      	bne.n	4d94 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
    4db2:	9801      	ldr	r0, [sp, #4]
    4db4:	b003      	add	sp, #12
    4db6:	bd30      	pop	{r4, r5, pc}
    4db8:	200009a0 	.word	0x200009a0

00004dbc <log_msg_chunk_alloc>:
{
    4dbc:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    4dbe:	2300      	movs	r3, #0
    4dc0:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    4dc2:	4807      	ldr	r0, [pc, #28]	; (4de0 <log_msg_chunk_alloc+0x24>)
    4dc4:	2200      	movs	r2, #0
    4dc6:	2300      	movs	r3, #0
    4dc8:	a901      	add	r1, sp, #4
    4dca:	f007 f8e1 	bl	bf90 <k_mem_slab_alloc>
	if (err != 0) {
    4dce:	b110      	cbz	r0, 4dd6 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    4dd0:	f7ff ffdc 	bl	4d8c <log_msg_no_space_handle>
    4dd4:	9001      	str	r0, [sp, #4]
}
    4dd6:	9801      	ldr	r0, [sp, #4]
    4dd8:	b003      	add	sp, #12
    4dda:	f85d fb04 	ldr.w	pc, [sp], #4
    4dde:	bf00      	nop
    4de0:	200009a0 	.word	0x200009a0

00004de4 <msg_free>:
{
    4de4:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    4de6:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    4de8:	7a45      	ldrb	r5, [r0, #9]
{
    4dea:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
    4dec:	092d      	lsrs	r5, r5, #4
{
    4dee:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    4df0:	07d8      	lsls	r0, r3, #31
    4df2:	d41c      	bmi.n	4e2e <msg_free+0x4a>
    4df4:	b1dd      	cbz	r5, 4e2e <msg_free+0x4a>
		uint32_t smask = 0U;
    4df6:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
    4df8:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    4dfa:	9801      	ldr	r0, [sp, #4]
    4dfc:	4631      	mov	r1, r6
    4dfe:	f00a fcb6 	bl	f76e <log_msg_arg_get>
    4e02:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    4e04:	f7ff fe04 	bl	4a10 <log_is_strdup>
    4e08:	b170      	cbz	r0, 4e28 <msg_free+0x44>
				if (smask == 0U) {
    4e0a:	b934      	cbnz	r4, 4e1a <msg_free+0x36>
					smask = z_log_get_s_mask(
    4e0c:	9b01      	ldr	r3, [sp, #4]
    4e0e:	4629      	mov	r1, r5
    4e10:	6918      	ldr	r0, [r3, #16]
    4e12:	f7ff fcbd 	bl	4790 <z_log_get_s_mask>
					if (smask == 0U) {
    4e16:	4604      	mov	r4, r0
    4e18:	b148      	cbz	r0, 4e2e <msg_free+0x4a>
				if (smask & BIT(i)) {
    4e1a:	fa24 f306 	lsr.w	r3, r4, r6
    4e1e:	07d9      	lsls	r1, r3, #31
    4e20:	d502      	bpl.n	4e28 <msg_free+0x44>
					z_log_free(buf);
    4e22:	4638      	mov	r0, r7
    4e24:	f7ff ff5e 	bl	4ce4 <z_log_free>
		for (i = 0U; i < nargs; i++) {
    4e28:	3601      	adds	r6, #1
    4e2a:	42ae      	cmp	r6, r5
    4e2c:	d3e5      	bcc.n	4dfa <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    4e2e:	9b01      	ldr	r3, [sp, #4]
    4e30:	7a1a      	ldrb	r2, [r3, #8]
    4e32:	0792      	lsls	r2, r2, #30
    4e34:	d504      	bpl.n	4e40 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    4e36:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    4e38:	4c08      	ldr	r4, [pc, #32]	; (4e5c <msg_free+0x78>)
    4e3a:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    4e3c:	9b03      	ldr	r3, [sp, #12]
    4e3e:	b92b      	cbnz	r3, 4e4c <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    4e40:	4806      	ldr	r0, [pc, #24]	; (4e5c <msg_free+0x78>)
    4e42:	a901      	add	r1, sp, #4
    4e44:	f007 f8fe 	bl	c044 <k_mem_slab_free>
}
    4e48:	b005      	add	sp, #20
    4e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    4e4c:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    4e4e:	a903      	add	r1, sp, #12
    4e50:	4620      	mov	r0, r4
    4e52:	f007 f8f7 	bl	c044 <k_mem_slab_free>
		cont = next;
    4e56:	9503      	str	r5, [sp, #12]
    4e58:	e7f0      	b.n	4e3c <msg_free+0x58>
    4e5a:	bf00      	nop
    4e5c:	200009a0 	.word	0x200009a0

00004e60 <log_msg_create_n>:
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, uint32_t nargs)
{
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
    4e60:	2a0e      	cmp	r2, #14
{
    4e62:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e66:	4681      	mov	r9, r0
    4e68:	4688      	mov	r8, r1
    4e6a:	4615      	mov	r5, r2
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
    4e6c:	d90a      	bls.n	4e84 <log_msg_create_n+0x24>
    4e6e:	492d      	ldr	r1, [pc, #180]	; (4f24 <log_msg_create_n+0xc4>)
    4e70:	482d      	ldr	r0, [pc, #180]	; (4f28 <log_msg_create_n+0xc8>)
    4e72:	f240 123b 	movw	r2, #315	; 0x13b
    4e76:	f00a faa6 	bl	f3c6 <printk>
    4e7a:	482a      	ldr	r0, [pc, #168]	; (4f24 <log_msg_create_n+0xc4>)
    4e7c:	f240 113b 	movw	r1, #315	; 0x13b
    4e80:	f00a fb66 	bl	f550 <assert_post_action>
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    4e84:	f7ff ff9a 	bl	4dbc <log_msg_chunk_alloc>

	if (msg != NULL) {
    4e88:	4604      	mov	r4, r0
    4e8a:	b330      	cbz	r0, 4eda <log_msg_create_n+0x7a>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    4e8c:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
    4e8e:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    4e90:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
    4e92:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    4e94:	8107      	strh	r7, [r0, #8]
    4e96:	d909      	bls.n	4eac <log_msg_create_n+0x4c>
	msg->hdr.params.generic.ext = 1;
    4e98:	2202      	movs	r2, #2
    4e9a:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
    4e9c:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
    4ea0:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
    4ea4:	6147      	str	r7, [r0, #20]
	while (n > 0) {
    4ea6:	f1ba 0f00 	cmp.w	sl, #0
    4eaa:	dc0e      	bgt.n	4eca <log_msg_create_n+0x6a>

	msg = msg_alloc(nargs);

	if (msg != NULL) {
		msg->str = str;
		msg->hdr.params.std.nargs = nargs;
    4eac:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
    4eae:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
    4eb2:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
    4eb6:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
    4eb8:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
    4eba:	d818      	bhi.n	4eee <log_msg_create_n+0x8e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    4ebc:	00aa      	lsls	r2, r5, #2
    4ebe:	4641      	mov	r1, r8
    4ec0:	f104 0014 	add.w	r0, r4, #20
    4ec4:	f00d fa10 	bl	122e8 <memcpy>
	while (nargs != 0U) {
    4ec8:	e007      	b.n	4eda <log_msg_create_n+0x7a>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
    4eca:	f7ff ff77 	bl	4dbc <log_msg_chunk_alloc>
		if (cont == NULL) {
    4ece:	4606      	mov	r6, r0
    4ed0:	b930      	cbnz	r0, 4ee0 <log_msg_create_n+0x80>
			msg_free(msg);
    4ed2:	4620      	mov	r0, r4
    4ed4:	f7ff ff86 	bl	4de4 <msg_free>
			return NULL;
    4ed8:	4634      	mov	r4, r6
		copy_args_to_msg(msg, args, nargs);
	}

	return msg;
}
    4eda:	4620      	mov	r0, r4
    4edc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
    4ee0:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
    4ee4:	f1aa 0a07 	sub.w	sl, sl, #7
    4ee8:	6007      	str	r7, [r0, #0]
		next = &cont->next;
    4eea:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
    4eec:	e7db      	b.n	4ea6 <log_msg_create_n+0x46>
    4eee:	f8d8 3000 	ldr.w	r3, [r8]
    4ef2:	61a3      	str	r3, [r4, #24]
    4ef4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct log_msg_cont *cont = msg->payload.ext.next;
    4ef8:	6967      	ldr	r7, [r4, #20]
    4efa:	61e3      	str	r3, [r4, #28]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
    4efc:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
    4efe:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
    4f02:	2d07      	cmp	r5, #7
    4f04:	462e      	mov	r6, r5
    4f06:	bf28      	it	cs
    4f08:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
    4f0a:	ea4f 0986 	mov.w	r9, r6, lsl #2
    4f0e:	4641      	mov	r1, r8
    4f10:	1d38      	adds	r0, r7, #4
    4f12:	464a      	mov	r2, r9
    4f14:	f00d f9e8 	bl	122e8 <memcpy>
	while (nargs != 0U) {
    4f18:	1bad      	subs	r5, r5, r6
		cont = cont->next;
    4f1a:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
    4f1c:	44c8      	add	r8, r9
	while (nargs != 0U) {
    4f1e:	d1f0      	bne.n	4f02 <log_msg_create_n+0xa2>
    4f20:	e7db      	b.n	4eda <log_msg_create_n+0x7a>
    4f22:	bf00      	nop
    4f24:	00013c4e 	.word	0x00013c4e
    4f28:	00013904 	.word	0x00013904

00004f2c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    4f2c:	b40e      	push	{r1, r2, r3}
    4f2e:	b503      	push	{r0, r1, lr}
    4f30:	ab03      	add	r3, sp, #12
    4f32:	4601      	mov	r1, r0
    4f34:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    4f38:	4804      	ldr	r0, [pc, #16]	; (4f4c <print_formatted+0x20>)
	va_start(args, fmt);
    4f3a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    4f3c:	f7fe fd5e 	bl	39fc <cbvprintf>
	va_end(args);

	return length;
}
    4f40:	b002      	add	sp, #8
    4f42:	f85d eb04 	ldr.w	lr, [sp], #4
    4f46:	b003      	add	sp, #12
    4f48:	4770      	bx	lr
    4f4a:	bf00      	nop
    4f4c:	000051b5 	.word	0x000051b5

00004f50 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    4f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f54:	b087      	sub	sp, #28
    4f56:	461f      	mov	r7, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    4f58:	f001 0301 	and.w	r3, r1, #1
{
    4f5c:	9205      	str	r2, [sp, #20]
    4f5e:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    4f62:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    4f66:	9304      	str	r3, [sp, #16]
{
    4f68:	4606      	mov	r6, r0
    4f6a:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    4f6c:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    4f70:	f001 0508 	and.w	r5, r1, #8
	const char *tag = z_log_get_tag();
    4f74:	f00a fb93 	bl	f69e <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    4f78:	4602      	mov	r2, r0
    4f7a:	2800      	cmp	r0, #0
    4f7c:	d044      	beq.n	5008 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    4f7e:	4939      	ldr	r1, [pc, #228]	; (5064 <prefix_print+0x114>)
    4f80:	4630      	mov	r0, r6
    4f82:	f7ff ffd3 	bl	4f2c <print_formatted>
    4f86:	4604      	mov	r4, r0
	}

	if (stamp) {
    4f88:	f1bb 0f00 	cmp.w	fp, #0
    4f8c:	d008      	beq.n	4fa0 <prefix_print+0x50>
	if (!format) {
    4f8e:	f018 0f44 	tst.w	r8, #68	; 0x44
    4f92:	d13b      	bne.n	500c <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    4f94:	4934      	ldr	r1, [pc, #208]	; (5068 <prefix_print+0x118>)
    4f96:	463a      	mov	r2, r7
    4f98:	4630      	mov	r0, r6
    4f9a:	f7ff ffc7 	bl	4f2c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    4f9e:	4404      	add	r4, r0
	if (color) {
    4fa0:	9b04      	ldr	r3, [sp, #16]
    4fa2:	b153      	cbz	r3, 4fba <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    4fa4:	4b31      	ldr	r3, [pc, #196]	; (506c <prefix_print+0x11c>)
		print_formatted(output, "%s", log_color);
    4fa6:	4932      	ldr	r1, [pc, #200]	; (5070 <prefix_print+0x120>)
		const char *log_color = start && (colors[level] != NULL) ?
    4fa8:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    4fac:	4b31      	ldr	r3, [pc, #196]	; (5074 <prefix_print+0x124>)
    4fae:	4630      	mov	r0, r6
    4fb0:	2a00      	cmp	r2, #0
    4fb2:	bf08      	it	eq
    4fb4:	461a      	moveq	r2, r3
    4fb6:	f7ff ffb9 	bl	4f2c <print_formatted>
	if (level_on) {
    4fba:	b13d      	cbz	r5, 4fcc <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    4fbc:	4b2e      	ldr	r3, [pc, #184]	; (5078 <prefix_print+0x128>)
    4fbe:	492f      	ldr	r1, [pc, #188]	; (507c <prefix_print+0x12c>)
    4fc0:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    4fc4:	4630      	mov	r0, r6
    4fc6:	f7ff ffb1 	bl	4f2c <print_formatted>
    4fca:	4605      	mov	r5, r0
	if (source_id >= 0) {
    4fcc:	f1ba 0f00 	cmp.w	sl, #0
    4fd0:	db16      	blt.n	5000 <prefix_print+0xb0>
		total += print_formatted(output,
    4fd2:	9b05      	ldr	r3, [sp, #20]
    4fd4:	2b00      	cmp	r3, #0
    4fd6:	d043      	beq.n	5060 <prefix_print+0x110>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    4fd8:	2301      	movs	r3, #1
    4fda:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    4fde:	4b28      	ldr	r3, [pc, #160]	; (5080 <prefix_print+0x130>)
    4fe0:	4f28      	ldr	r7, [pc, #160]	; (5084 <prefix_print+0x134>)
    4fe2:	f019 0f10 	tst.w	r9, #16
    4fe6:	bf18      	it	ne
    4fe8:	461f      	movne	r7, r3
    4fea:	4651      	mov	r1, sl
    4fec:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    4ff0:	f7ff fe92 	bl	4d18 <log_source_name_get>
    4ff4:	4639      	mov	r1, r7
    4ff6:	4602      	mov	r2, r0
    4ff8:	4630      	mov	r0, r6
    4ffa:	f7ff ff97 	bl	4f2c <print_formatted>
    4ffe:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    5000:	1928      	adds	r0, r5, r4
    5002:	b007      	add	sp, #28
    5004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    5008:	4604      	mov	r4, r0
    500a:	e7bd      	b.n	4f88 <prefix_print+0x38>
	} else if (freq != 0U) {
    500c:	4b1e      	ldr	r3, [pc, #120]	; (5088 <prefix_print+0x138>)
    500e:	6818      	ldr	r0, [r3, #0]
    5010:	2800      	cmp	r0, #0
    5012:	d0c4      	beq.n	4f9e <prefix_print+0x4e>
		timestamp /= timestamp_div;
    5014:	4b1d      	ldr	r3, [pc, #116]	; (508c <prefix_print+0x13c>)
    5016:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
    501a:	6819      	ldr	r1, [r3, #0]
    501c:	fbb7 f7f1 	udiv	r7, r7, r1
		total_seconds = timestamp / freq;
    5020:	fbb7 f1f0 	udiv	r1, r7, r0
		remainder = timestamp % freq;
    5024:	fb00 7711 	mls	r7, r0, r1, r7
    5028:	fbb1 f2fc 	udiv	r2, r1, ip
    502c:	fb0c 1c12 	mls	ip, ip, r2, r1
		ms = (remainder * 1000U) / freq;
    5030:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    5034:	434f      	muls	r7, r1
		mins = seconds / 60U;
    5036:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    503a:	fbb7 f8f0 	udiv	r8, r7, r0
    503e:	fb00 7718 	mls	r7, r0, r8, r7
    5042:	434f      	muls	r7, r1
		mins = seconds / 60U;
    5044:	fbbc f3fe 	udiv	r3, ip, lr
			length = print_formatted(output,
    5048:	fb0e c113 	mls	r1, lr, r3, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    504c:	fbb7 f0f0 	udiv	r0, r7, r0
			length = print_formatted(output,
    5050:	9100      	str	r1, [sp, #0]
    5052:	e9cd 8001 	strd	r8, r0, [sp, #4]
    5056:	490e      	ldr	r1, [pc, #56]	; (5090 <prefix_print+0x140>)
    5058:	4630      	mov	r0, r6
    505a:	f7ff ff67 	bl	4f2c <print_formatted>
    505e:	e79e      	b.n	4f9e <prefix_print+0x4e>
		total += print_formatted(output,
    5060:	4f08      	ldr	r7, [pc, #32]	; (5084 <prefix_print+0x134>)
    5062:	e7c2      	b.n	4fea <prefix_print+0x9a>
    5064:	00013c88 	.word	0x00013c88
    5068:	00013c8c 	.word	0x00013c8c
    506c:	000132b8 	.word	0x000132b8
    5070:	000146ab 	.word	0x000146ab
    5074:	00013c7a 	.word	0x00013c7a
    5078:	000132cc 	.word	0x000132cc
    507c:	00013cb1 	.word	0x00013cb1
    5080:	00013c84 	.word	0x00013c84
    5084:	00013c7f 	.word	0x00013c7f
    5088:	200009c0 	.word	0x200009c0
    508c:	200009c4 	.word	0x200009c4
    5090:	00013c95 	.word	0x00013c95

00005094 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    5094:	b538      	push	{r3, r4, r5, lr}
    5096:	460c      	mov	r4, r1
	if (color) {
    5098:	07e1      	lsls	r1, r4, #31
{
    509a:	4605      	mov	r5, r0
	if (color) {
    509c:	d503      	bpl.n	50a6 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    509e:	4a08      	ldr	r2, [pc, #32]	; (50c0 <postfix_print+0x2c>)
    50a0:	4908      	ldr	r1, [pc, #32]	; (50c4 <postfix_print+0x30>)
    50a2:	f7ff ff43 	bl	4f2c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    50a6:	06e2      	lsls	r2, r4, #27
    50a8:	d408      	bmi.n	50bc <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    50aa:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    50ac:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    50ae:	bf4c      	ite	mi
    50b0:	4905      	ldrmi	r1, [pc, #20]	; (50c8 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    50b2:	4906      	ldrpl	r1, [pc, #24]	; (50cc <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    50b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    50b8:	f7ff bf38 	b.w	4f2c <print_formatted>
}
    50bc:	bd38      	pop	{r3, r4, r5, pc}
    50be:	bf00      	nop
    50c0:	00013c7a 	.word	0x00013c7a
    50c4:	000146ab 	.word	0x000146ab
    50c8:	00013cb8 	.word	0x00013cb8
    50cc:	00013cb7 	.word	0x00013cb7

000050d0 <hexdump_line_print>:
{
    50d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    50d4:	461d      	mov	r5, r3
    50d6:	9b08      	ldr	r3, [sp, #32]
    50d8:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    50da:	06da      	lsls	r2, r3, #27
{
    50dc:	4604      	mov	r4, r0
    50de:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    50e0:	d405      	bmi.n	50ee <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    50e2:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    50e4:	bf4c      	ite	mi
    50e6:	492b      	ldrmi	r1, [pc, #172]	; (5194 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
    50e8:	492b      	ldrpl	r1, [pc, #172]	; (5198 <hexdump_line_print+0xc8>)
    50ea:	f7ff ff1f 	bl	4f2c <print_formatted>
		print_formatted(output, " ");
    50ee:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 51a0 <hexdump_line_print+0xd0>
{
    50f2:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    50f6:	45a8      	cmp	r8, r5
    50f8:	db2d      	blt.n	5156 <hexdump_line_print+0x86>
			print_formatted(output, "   ");
    50fa:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 51a4 <hexdump_line_print+0xd4>
			print_formatted(output, "%02x ", data[i]);
    50fe:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 51a8 <hexdump_line_print+0xd8>
			print_formatted(output, " ");
    5102:	f8df a09c 	ldr.w	sl, [pc, #156]	; 51a0 <hexdump_line_print+0xd0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5106:	2500      	movs	r5, #0
		if (i < length) {
    5108:	42bd      	cmp	r5, r7
    510a:	d232      	bcs.n	5172 <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
    510c:	5d72      	ldrb	r2, [r6, r5]
    510e:	4649      	mov	r1, r9
    5110:	4620      	mov	r0, r4
    5112:	f7ff ff0b 	bl	4f2c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5116:	3501      	adds	r5, #1
    5118:	2d10      	cmp	r5, #16
    511a:	d123      	bne.n	5164 <hexdump_line_print+0x94>
	print_formatted(output, "|");
    511c:	491f      	ldr	r1, [pc, #124]	; (519c <hexdump_line_print+0xcc>)
			print_formatted(output, " ");
    511e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 51a0 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
    5122:	f8df 9088 	ldr.w	r9, [pc, #136]	; 51ac <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
    5126:	f8df a088 	ldr.w	sl, [pc, #136]	; 51b0 <hexdump_line_print+0xe0>
	print_formatted(output, "|");
    512a:	4620      	mov	r0, r4
    512c:	f7ff fefe 	bl	4f2c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5130:	2500      	movs	r5, #0
		if (i < length) {
    5132:	42af      	cmp	r7, r5
    5134:	d929      	bls.n	518a <hexdump_line_print+0xba>
			char c = (char)data[i];
    5136:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
    5138:	f812 3009 	ldrb.w	r3, [r2, r9]
    513c:	f013 0f97 	tst.w	r3, #151	; 0x97
    5140:	bf08      	it	eq
    5142:	222e      	moveq	r2, #46	; 0x2e
    5144:	4651      	mov	r1, sl
    5146:	4620      	mov	r0, r4
    5148:	f7ff fef0 	bl	4f2c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    514c:	3501      	adds	r5, #1
    514e:	2d10      	cmp	r5, #16
    5150:	d114      	bne.n	517c <hexdump_line_print+0xac>
}
    5152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    5156:	4649      	mov	r1, r9
    5158:	4620      	mov	r0, r4
    515a:	f7ff fee7 	bl	4f2c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    515e:	f108 0801 	add.w	r8, r8, #1
    5162:	e7c8      	b.n	50f6 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    5164:	076a      	lsls	r2, r5, #29
    5166:	d1cf      	bne.n	5108 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    5168:	4651      	mov	r1, sl
    516a:	4620      	mov	r0, r4
    516c:	f7ff fede 	bl	4f2c <print_formatted>
    5170:	e7ca      	b.n	5108 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    5172:	4641      	mov	r1, r8
    5174:	4620      	mov	r0, r4
    5176:	f7ff fed9 	bl	4f2c <print_formatted>
    517a:	e7cc      	b.n	5116 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    517c:	076b      	lsls	r3, r5, #29
    517e:	d1d8      	bne.n	5132 <hexdump_line_print+0x62>
			print_formatted(output, " ");
    5180:	4641      	mov	r1, r8
    5182:	4620      	mov	r0, r4
    5184:	f7ff fed2 	bl	4f2c <print_formatted>
    5188:	e7d3      	b.n	5132 <hexdump_line_print+0x62>
			print_formatted(output, " ");
    518a:	4641      	mov	r1, r8
    518c:	4620      	mov	r0, r4
    518e:	f7ff fecd 	bl	4f2c <print_formatted>
    5192:	e7db      	b.n	514c <hexdump_line_print+0x7c>
    5194:	00013cb8 	.word	0x00013cb8
    5198:	00013cb7 	.word	0x00013cb7
    519c:	00013cc0 	.word	0x00013cc0
    51a0:	00014810 	.word	0x00014810
    51a4:	0001480e 	.word	0x0001480e
    51a8:	00013cba 	.word	0x00013cba
    51ac:	00014c37 	.word	0x00014c37
    51b0:	00013cc2 	.word	0x00013cc2

000051b4 <out_func>:
{
    51b4:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    51b6:	684b      	ldr	r3, [r1, #4]
    51b8:	681a      	ldr	r2, [r3, #0]
    51ba:	68cb      	ldr	r3, [r1, #12]
    51bc:	429a      	cmp	r2, r3
{
    51be:	4605      	mov	r5, r0
    51c0:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    51c2:	d102      	bne.n	51ca <out_func+0x16>
		log_output_flush(out_ctx);
    51c4:	4608      	mov	r0, r1
    51c6:	f00a fcc9 	bl	fb5c <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    51ca:	6863      	ldr	r3, [r4, #4]
    51cc:	f3bf 8f5b 	dmb	ish
    51d0:	e853 2f00 	ldrex	r2, [r3]
    51d4:	1c51      	adds	r1, r2, #1
    51d6:	e843 1000 	strex	r0, r1, [r3]
    51da:	2800      	cmp	r0, #0
    51dc:	d1f8      	bne.n	51d0 <out_func+0x1c>
    51de:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    51e2:	68a3      	ldr	r3, [r4, #8]
    51e4:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
    51e6:	6863      	ldr	r3, [r4, #4]
    51e8:	681a      	ldr	r2, [r3, #0]
    51ea:	68e3      	ldr	r3, [r4, #12]
    51ec:	429a      	cmp	r2, r3
    51ee:	d908      	bls.n	5202 <out_func+0x4e>
    51f0:	4905      	ldr	r1, [pc, #20]	; (5208 <out_func+0x54>)
    51f2:	4806      	ldr	r0, [pc, #24]	; (520c <out_func+0x58>)
    51f4:	2274      	movs	r2, #116	; 0x74
    51f6:	f00a f8e6 	bl	f3c6 <printk>
    51fa:	4803      	ldr	r0, [pc, #12]	; (5208 <out_func+0x54>)
    51fc:	2174      	movs	r1, #116	; 0x74
    51fe:	f00a f9a7 	bl	f550 <assert_post_action>
}
    5202:	2000      	movs	r0, #0
    5204:	bd38      	pop	{r3, r4, r5, pc}
    5206:	bf00      	nop
    5208:	00013cc5 	.word	0x00013cc5
    520c:	00013904 	.word	0x00013904

00005210 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    5210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    5214:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
    5216:	f013 0707 	ands.w	r7, r3, #7
{
    521a:	4616      	mov	r6, r2
    521c:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    521e:	7a0a      	ldrb	r2, [r1, #8]
    5220:	4604      	mov	r4, r0
    5222:	460d      	mov	r5, r1
			0 : prefix_print(output, flags, std_msg, timestamp,
    5224:	d020      	beq.n	5268 <log_output_msg_process+0x58>
	return msg->hdr.ids.source_id;
    5226:	8949      	ldrh	r1, [r1, #10]
    5228:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    522c:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5230:	43d2      	mvns	r2, r2
    5232:	e9cd 7300 	strd	r7, r3, [sp]
    5236:	9102      	str	r1, [sp, #8]
    5238:	68eb      	ldr	r3, [r5, #12]
    523a:	f002 0201 	and.w	r2, r2, #1
    523e:	4631      	mov	r1, r6
    5240:	f7ff fe86 	bl	4f50 <prefix_print>
    5244:	4681      	mov	r9, r0
    5246:	7a2b      	ldrb	r3, [r5, #8]
    5248:	43db      	mvns	r3, r3
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    524a:	f013 0801 	ands.w	r8, r3, #1
    524e:	d00d      	beq.n	526c <log_output_msg_process+0x5c>
		std_print(msg, output);
    5250:	4621      	mov	r1, r4
    5252:	4628      	mov	r0, r5
    5254:	f00a fb25 	bl	f8a2 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
    5258:	2f00      	cmp	r7, #0
    525a:	d03b      	beq.n	52d4 <log_output_msg_process+0xc4>
		postfix_print(output, flags, level);
    525c:	463a      	mov	r2, r7
    525e:	4631      	mov	r1, r6
    5260:	4620      	mov	r0, r4
    5262:	f7ff ff17 	bl	5094 <postfix_print>
    5266:	e035      	b.n	52d4 <log_output_msg_process+0xc4>
			0 : prefix_print(output, flags, std_msg, timestamp,
    5268:	46b9      	mov	r9, r7
    526a:	e7ec      	b.n	5246 <log_output_msg_process+0x36>
	} else if (raw_string) {
    526c:	2f00      	cmp	r7, #0
    526e:	d137      	bne.n	52e0 <log_output_msg_process+0xd0>
	__ASSERT_NO_MSG(output->size);
    5270:	68e3      	ldr	r3, [r4, #12]
    5272:	b953      	cbnz	r3, 528a <log_output_msg_process+0x7a>
    5274:	4929      	ldr	r1, [pc, #164]	; (531c <log_output_msg_process+0x10c>)
    5276:	482a      	ldr	r0, [pc, #168]	; (5320 <log_output_msg_process+0x110>)
    5278:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
    527c:	f00a f8a3 	bl	f3c6 <printk>
    5280:	4826      	ldr	r0, [pc, #152]	; (531c <log_output_msg_process+0x10c>)
    5282:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
    5286:	f00a f963 	bl	f550 <assert_post_action>
			0 : prefix_print(output, flags, std_msg, timestamp,
    528a:	2600      	movs	r6, #0
		length = output->size;
    528c:	68e3      	ldr	r3, [r4, #12]
    528e:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    5290:	aa06      	add	r2, sp, #24
    5292:	4633      	mov	r3, r6
    5294:	68a1      	ldr	r1, [r4, #8]
    5296:	4628      	mov	r0, r5
    5298:	f00a faef 	bl	f87a <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    529c:	9a06      	ldr	r2, [sp, #24]
    529e:	6863      	ldr	r3, [r4, #4]
    52a0:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    52a2:	b14a      	cbz	r2, 52b8 <log_output_msg_process+0xa8>
			eol = (output->buf[length - 1] == '\n');
    52a4:	68a3      	ldr	r3, [r4, #8]
    52a6:	4413      	add	r3, r2
    52a8:	f813 8c01 	ldrb.w	r8, [r3, #-1]
    52ac:	f1a8 030a 	sub.w	r3, r8, #10
    52b0:	f1d3 0800 	rsbs	r8, r3, #0
    52b4:	eb48 0803 	adc.w	r8, r8, r3
		log_output_flush(output);
    52b8:	4620      	mov	r0, r4
    52ba:	f00a fc4f 	bl	fb5c <log_output_flush>
		offset += length;
    52be:	9b06      	ldr	r3, [sp, #24]
    52c0:	441e      	add	r6, r3
	} while (length > 0);
    52c2:	2b00      	cmp	r3, #0
    52c4:	d1e2      	bne.n	528c <log_output_msg_process+0x7c>
	if (eol) {
    52c6:	f1b8 0f00 	cmp.w	r8, #0
    52ca:	d003      	beq.n	52d4 <log_output_msg_process+0xc4>
		print_formatted(output, "\r");
    52cc:	4915      	ldr	r1, [pc, #84]	; (5324 <log_output_msg_process+0x114>)
    52ce:	4620      	mov	r0, r4
    52d0:	f7ff fe2c 	bl	4f2c <print_formatted>
	}

	log_output_flush(output);
    52d4:	4620      	mov	r0, r4
    52d6:	f00a fc41 	bl	fb5c <log_output_flush>
}
    52da:	b00a      	add	sp, #40	; 0x28
    52dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
    52e0:	4628      	mov	r0, r5
    52e2:	f00a fa76 	bl	f7d2 <log_msg_str_get>
    52e6:	4910      	ldr	r1, [pc, #64]	; (5328 <log_output_msg_process+0x118>)
    52e8:	4602      	mov	r2, r0
    52ea:	4620      	mov	r0, r4
    52ec:	f7ff fe1e 	bl	4f2c <print_formatted>
		length = sizeof(buf);
    52f0:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    52f4:	aa05      	add	r2, sp, #20
    52f6:	4643      	mov	r3, r8
    52f8:	a906      	add	r1, sp, #24
    52fa:	4628      	mov	r0, r5
		length = sizeof(buf);
    52fc:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    5300:	f00a fabb 	bl	f87a <log_msg_hexdump_data_get>
		if (length) {
    5304:	9a05      	ldr	r2, [sp, #20]
    5306:	2a00      	cmp	r2, #0
    5308:	d0a8      	beq.n	525c <log_output_msg_process+0x4c>
			hexdump_line_print(output, buf, length,
    530a:	464b      	mov	r3, r9
    530c:	9600      	str	r6, [sp, #0]
    530e:	a906      	add	r1, sp, #24
    5310:	4620      	mov	r0, r4
    5312:	f7ff fedd 	bl	50d0 <hexdump_line_print>
			offset += length;
    5316:	9b05      	ldr	r3, [sp, #20]
    5318:	4498      	add	r8, r3
		length = sizeof(buf);
    531a:	e7eb      	b.n	52f4 <log_output_msg_process+0xe4>
    531c:	00013cc5 	.word	0x00013cc5
    5320:	00013904 	.word	0x00013904
    5324:	00013cf4 	.word	0x00013cf4
    5328:	000146ab 	.word	0x000146ab

0000532c <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    532c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    532e:	f242 730f 	movw	r3, #9999	; 0x270f
    5332:	428b      	cmp	r3, r1
    5334:	bf28      	it	cs
    5336:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    5338:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    533a:	4a0f      	ldr	r2, [pc, #60]	; (5378 <log_output_dropped_process+0x4c>)
{
    533c:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    533e:	2105      	movs	r1, #5
    5340:	4668      	mov	r0, sp
    5342:	f00a f84d 	bl	f3e0 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    5346:	6863      	ldr	r3, [r4, #4]
    5348:	490c      	ldr	r1, [pc, #48]	; (537c <log_output_dropped_process+0x50>)
    534a:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    534c:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    534e:	220b      	movs	r2, #11
    5350:	4628      	mov	r0, r5
    5352:	f00a fa99 	bl	f888 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    5356:	6863      	ldr	r3, [r4, #4]
    5358:	4632      	mov	r2, r6
    535a:	4669      	mov	r1, sp
    535c:	4628      	mov	r0, r5
    535e:	685b      	ldr	r3, [r3, #4]
    5360:	f00a fa92 	bl	f888 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    5364:	6863      	ldr	r3, [r4, #4]
    5366:	4906      	ldr	r1, [pc, #24]	; (5380 <log_output_dropped_process+0x54>)
    5368:	685b      	ldr	r3, [r3, #4]
    536a:	221b      	movs	r2, #27
    536c:	4628      	mov	r0, r5
    536e:	f00a fa8b 	bl	f888 <buffer_write>
		     output->control_block->ctx);
}
    5372:	b002      	add	sp, #8
    5374:	bd70      	pop	{r4, r5, r6, pc}
    5376:	bf00      	nop
    5378:	00013952 	.word	0x00013952
    537c:	00013d32 	.word	0x00013d32
    5380:	00013d16 	.word	0x00013d16

00005384 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    5384:	4a08      	ldr	r2, [pc, #32]	; (53a8 <log_output_timestamp_freq_set+0x24>)
{
    5386:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    5388:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    538a:	4c08      	ldr	r4, [pc, #32]	; (53ac <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    538c:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    538e:	2100      	movs	r1, #0
    5390:	42a0      	cmp	r0, r4
    5392:	d804      	bhi.n	539e <log_output_timestamp_freq_set+0x1a>
    5394:	b101      	cbz	r1, 5398 <log_output_timestamp_freq_set+0x14>
    5396:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    5398:	4b05      	ldr	r3, [pc, #20]	; (53b0 <log_output_timestamp_freq_set+0x2c>)
    539a:	6018      	str	r0, [r3, #0]
}
    539c:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    539e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    53a0:	005b      	lsls	r3, r3, #1
    53a2:	2101      	movs	r1, #1
    53a4:	e7f4      	b.n	5390 <log_output_timestamp_freq_set+0xc>
    53a6:	bf00      	nop
    53a8:	200009c4 	.word	0x200009c4
    53ac:	000f4240 	.word	0x000f4240
    53b0:	200009c0 	.word	0x200009c0

000053b4 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    53b4:	4b01      	ldr	r3, [pc, #4]	; (53bc <log_backend_rtt_init+0x8>)
    53b6:	2201      	movs	r2, #1
    53b8:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    53ba:	4770      	bx	lr
    53bc:	20000f93 	.word	0x20000f93

000053c0 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    53c0:	4b02      	ldr	r3, [pc, #8]	; (53cc <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    53c2:	4803      	ldr	r0, [pc, #12]	; (53d0 <panic+0x10>)
    53c4:	2201      	movs	r2, #1
    53c6:	701a      	strb	r2, [r3, #0]
    53c8:	f00a bbc8 	b.w	fb5c <log_output_flush>
    53cc:	20000f94 	.word	0x20000f94
    53d0:	000132fc 	.word	0x000132fc

000053d4 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    53d4:	4801      	ldr	r0, [pc, #4]	; (53dc <dropped+0x8>)
    53d6:	f7ff bfa9 	b.w	532c <log_output_dropped_process>
    53da:	bf00      	nop
    53dc:	000132fc 	.word	0x000132fc

000053e0 <put>:
{
    53e0:	b510      	push	{r4, lr}
	log_msg_get(msg);
    53e2:	4608      	mov	r0, r1
    53e4:	460c      	mov	r4, r1
    53e6:	f00a f9b2 	bl	f74e <log_msg_get>
	log_output_msg_process(output, msg, flags);
    53ea:	4805      	ldr	r0, [pc, #20]	; (5400 <put+0x20>)
    53ec:	4621      	mov	r1, r4
    53ee:	220f      	movs	r2, #15
    53f0:	f7ff ff0e 	bl	5210 <log_output_msg_process>
	log_msg_put(msg);
    53f4:	4620      	mov	r0, r4
}
    53f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    53fa:	f00a b9d7 	b.w	f7ac <log_msg_put>
    53fe:	bf00      	nop
    5400:	000132fc 	.word	0x000132fc

00005404 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    5404:	4b05      	ldr	r3, [pc, #20]	; (541c <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    5406:	781b      	ldrb	r3, [r3, #0]
    5408:	b11b      	cbz	r3, 5412 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    540a:	f241 3088 	movw	r0, #5000	; 0x1388
    540e:	f00c bf2f 	b.w	12270 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    5412:	20a4      	movs	r0, #164	; 0xa4
    5414:	2100      	movs	r1, #0
    5416:	f008 b8e7 	b.w	d5e8 <z_impl_k_sleep>
    541a:	bf00      	nop
    541c:	20000f94 	.word	0x20000f94

00005420 <data_out_block_mode>:
{
    5420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    5424:	f8df 9094 	ldr.w	r9, [pc, #148]	; 54bc <data_out_block_mode+0x9c>
	return z_impl_k_mutex_lock(mutex, timeout);
    5428:	f8df a094 	ldr.w	sl, [pc, #148]	; 54c0 <data_out_block_mode+0xa0>
{
    542c:	4680      	mov	r8, r0
    542e:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    5430:	2404      	movs	r4, #4
    5432:	46cb      	mov	fp, r9
		if (!is_sync_mode()) {
    5434:	f899 5000 	ldrb.w	r5, [r9]
    5438:	b9cd      	cbnz	r5, 546e <data_out_block_mode+0x4e>
    543a:	f04f 33ff 	mov.w	r3, #4294967295
    543e:	f04f 32ff 	mov.w	r2, #4294967295
    5442:	4650      	mov	r0, sl
    5444:	f006 ffbc 	bl	c3c0 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    5448:	463a      	mov	r2, r7
    544a:	4641      	mov	r1, r8
    544c:	4628      	mov	r0, r5
    544e:	f006 fb5d 	bl	bb0c <SEGGER_RTT_WriteSkipNoLock>
    5452:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
    5454:	4650      	mov	r0, sl
    5456:	f007 f88b 	bl	c570 <z_impl_k_mutex_unlock>
		if (ret) {
    545a:	4d17      	ldr	r5, [pc, #92]	; (54b8 <data_out_block_mode+0x98>)
    545c:	b1fe      	cbz	r6, 549e <data_out_block_mode+0x7e>
	host_present = true;
    545e:	2301      	movs	r3, #1
    5460:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    5462:	f89b 3000 	ldrb.w	r3, [fp]
    5466:	b96b      	cbnz	r3, 5484 <data_out_block_mode+0x64>
}
    5468:	4638      	mov	r0, r7
    546a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    546e:	463a      	mov	r2, r7
    5470:	4641      	mov	r1, r8
    5472:	2000      	movs	r0, #0
    5474:	f006 fb4a 	bl	bb0c <SEGGER_RTT_WriteSkipNoLock>
    5478:	4606      	mov	r6, r0
    547a:	e7ee      	b.n	545a <data_out_block_mode+0x3a>
	if (retry_cnt == 0) {
    547c:	b95c      	cbnz	r4, 5496 <data_out_block_mode+0x76>
		host_present = false;
    547e:	702c      	strb	r4, [r5, #0]
    5480:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    5484:	2000      	movs	r0, #0
    5486:	f006 fbc1 	bl	bc0c <SEGGER_RTT_HasDataUp>
    548a:	2800      	cmp	r0, #0
    548c:	d0ec      	beq.n	5468 <data_out_block_mode+0x48>
    548e:	782b      	ldrb	r3, [r5, #0]
    5490:	2b00      	cmp	r3, #0
    5492:	d1f3      	bne.n	547c <data_out_block_mode+0x5c>
    5494:	e7e8      	b.n	5468 <data_out_block_mode+0x48>
			on_failed_write(retry_cnt--);
    5496:	3c01      	subs	r4, #1
    5498:	f7ff ffb4 	bl	5404 <on_failed_write.part.0>
    549c:	e7f2      	b.n	5484 <data_out_block_mode+0x64>
		} else if (host_present) {
    549e:	782b      	ldrb	r3, [r5, #0]
    54a0:	b113      	cbz	r3, 54a8 <data_out_block_mode+0x88>
	if (retry_cnt == 0) {
    54a2:	3c01      	subs	r4, #1
    54a4:	d104      	bne.n	54b0 <data_out_block_mode+0x90>
		host_present = false;
    54a6:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    54a8:	782b      	ldrb	r3, [r5, #0]
    54aa:	2b00      	cmp	r3, #0
    54ac:	d1c2      	bne.n	5434 <data_out_block_mode+0x14>
    54ae:	e7db      	b.n	5468 <data_out_block_mode+0x48>
    54b0:	f7ff ffa8 	bl	5404 <on_failed_write.part.0>
    54b4:	e7f8      	b.n	54a8 <data_out_block_mode+0x88>
    54b6:	bf00      	nop
    54b8:	20000f93 	.word	0x20000f93
    54bc:	20000f94 	.word	0x20000f94
    54c0:	200003c8 	.word	0x200003c8

000054c4 <disk_init>:
	k_mutex_unlock(&mutex);
	return rc;
}

static int disk_init(const struct device *dev)
{
    54c4:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
    54c6:	4804      	ldr	r0, [pc, #16]	; (54d8 <disk_init+0x14>)
    54c8:	f00c fea5 	bl	12216 <z_impl_k_mutex_init>
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    54cc:	4b03      	ldr	r3, [pc, #12]	; (54dc <disk_init+0x18>)
	ARG_UNUSED(dev);

	k_mutex_init(&mutex);
	sys_dlist_init(&disk_access_list);
	return 0;
}
    54ce:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
    54d0:	e9c3 3300 	strd	r3, r3, [r3]
    54d4:	bd08      	pop	{r3, pc}
    54d6:	bf00      	nop
    54d8:	200009e4 	.word	0x200009e4
    54dc:	200009dc 	.word	0x200009dc

000054e0 <disk_access_get_di>:
{
    54e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    54e2:	4607      	mov	r7, r0
	size_t name_len = strlen(name);
    54e4:	f7fb ffae 	bl	1444 <strlen>
    54e8:	4606      	mov	r6, r0
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    54ea:	4d12      	ldr	r5, [pc, #72]	; (5534 <disk_access_get_di+0x54>)
	return z_impl_k_mutex_lock(mutex, timeout);
    54ec:	4812      	ldr	r0, [pc, #72]	; (5538 <disk_access_get_di+0x58>)
    54ee:	f04f 32ff 	mov.w	r2, #4294967295
    54f2:	f04f 33ff 	mov.w	r3, #4294967295
    54f6:	f006 ff63 	bl	c3c0 <z_impl_k_mutex_lock>
    54fa:	682c      	ldr	r4, [r5, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    54fc:	42ac      	cmp	r4, r5
    54fe:	d10e      	bne.n	551e <disk_access_get_di+0x3e>
	struct disk_info *disk = NULL, *itr;
    5500:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    5502:	480d      	ldr	r0, [pc, #52]	; (5538 <disk_access_get_di+0x58>)
    5504:	f007 f834 	bl	c570 <z_impl_k_mutex_unlock>
}
    5508:	4620      	mov	r0, r4
    550a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (strlen(itr->name) != name_len) {
    550c:	68a0      	ldr	r0, [r4, #8]
    550e:	f7fb ff99 	bl	1444 <strlen>
    5512:	42b0      	cmp	r0, r6
    5514:	d006      	beq.n	5524 <disk_access_get_di+0x44>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    5516:	686b      	ldr	r3, [r5, #4]
    5518:	429c      	cmp	r4, r3
    551a:	d0f1      	beq.n	5500 <disk_access_get_di+0x20>
    551c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_NODE(&disk_access_list, node) {
    551e:	2c00      	cmp	r4, #0
    5520:	d1f4      	bne.n	550c <disk_access_get_di+0x2c>
    5522:	e7ed      	b.n	5500 <disk_access_get_di+0x20>
		if (strncmp(name, itr->name, name_len) == 0) {
    5524:	68a1      	ldr	r1, [r4, #8]
    5526:	4632      	mov	r2, r6
    5528:	4638      	mov	r0, r7
    552a:	f00d f82d 	bl	12588 <strncmp>
    552e:	2800      	cmp	r0, #0
    5530:	d1f1      	bne.n	5516 <disk_access_get_di+0x36>
    5532:	e7e6      	b.n	5502 <disk_access_get_di+0x22>
    5534:	200009dc 	.word	0x200009dc
    5538:	200009e4 	.word	0x200009e4

0000553c <disk_access_register>:
{
    553c:	b538      	push	{r3, r4, r5, lr}
    553e:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    5540:	4817      	ldr	r0, [pc, #92]	; (55a0 <disk_access_register+0x64>)
    5542:	f04f 32ff 	mov.w	r2, #4294967295
    5546:	f04f 33ff 	mov.w	r3, #4294967295
    554a:	f006 ff39 	bl	c3c0 <z_impl_k_mutex_lock>
	if ((disk == NULL) || (disk->name == NULL)) {
    554e:	b10d      	cbz	r5, 5554 <disk_access_register+0x18>
    5550:	68a8      	ldr	r0, [r5, #8]
    5552:	b980      	cbnz	r0, 5576 <disk_access_register+0x3a>
    5554:	4913      	ldr	r1, [pc, #76]	; (55a4 <disk_access_register+0x68>)
    5556:	4b14      	ldr	r3, [pc, #80]	; (55a8 <disk_access_register+0x6c>)
		LOG_ERR("invalid disk interface!!");
    5558:	4814      	ldr	r0, [pc, #80]	; (55ac <disk_access_register+0x70>)
    555a:	1ac9      	subs	r1, r1, r3
    555c:	08c9      	lsrs	r1, r1, #3
    555e:	0189      	lsls	r1, r1, #6
    5560:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("disk interface already registered!!");
    5564:	f00a f822 	bl	f5ac <log_0>
		rc = -EINVAL;
    5568:	f06f 0415 	mvn.w	r4, #21
	return z_impl_k_mutex_unlock(mutex);
    556c:	480c      	ldr	r0, [pc, #48]	; (55a0 <disk_access_register+0x64>)
    556e:	f006 ffff 	bl	c570 <z_impl_k_mutex_unlock>
}
    5572:	4620      	mov	r0, r4
    5574:	bd38      	pop	{r3, r4, r5, pc}
	if (disk_access_get_di(disk->name) != NULL) {
    5576:	f7ff ffb3 	bl	54e0 <disk_access_get_di>
    557a:	4604      	mov	r4, r0
    557c:	b140      	cbz	r0, 5590 <disk_access_register+0x54>
    557e:	4909      	ldr	r1, [pc, #36]	; (55a4 <disk_access_register+0x68>)
    5580:	4b09      	ldr	r3, [pc, #36]	; (55a8 <disk_access_register+0x6c>)
		LOG_ERR("disk interface already registered!!");
    5582:	480b      	ldr	r0, [pc, #44]	; (55b0 <disk_access_register+0x74>)
    5584:	1ac9      	subs	r1, r1, r3
    5586:	08c9      	lsrs	r1, r1, #3
    5588:	0189      	lsls	r1, r1, #6
    558a:	f041 0101 	orr.w	r1, r1, #1
    558e:	e7e9      	b.n	5564 <disk_access_register+0x28>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    5590:	4b08      	ldr	r3, [pc, #32]	; (55b4 <disk_access_register+0x78>)
    5592:	685a      	ldr	r2, [r3, #4]

	node->next = list;
	node->prev = tail;
    5594:	e9c5 3200 	strd	r3, r2, [r5]

	tail->next = node;
    5598:	6015      	str	r5, [r2, #0]
	list->tail = node;
    559a:	605d      	str	r5, [r3, #4]
}
    559c:	e7e6      	b.n	556c <disk_access_register+0x30>
    559e:	bf00      	nop
    55a0:	200009e4 	.word	0x200009e4
    55a4:	000130b4 	.word	0x000130b4
    55a8:	000130a4 	.word	0x000130a4
    55ac:	00013d4e 	.word	0x00013d4e
    55b0:	00013d67 	.word	0x00013d67
    55b4:	200009dc 	.word	0x200009dc

000055b8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    55b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    55bc:	4605      	mov	r5, r0
	__asm__ volatile(
    55be:	f04f 0320 	mov.w	r3, #32
    55c2:	f3ef 8611 	mrs	r6, BASEPRI
    55c6:	f383 8812 	msr	BASEPRI_MAX, r3
    55ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    55ce:	481e      	ldr	r0, [pc, #120]	; (5648 <pm_state_notify+0x90>)
    55d0:	f006 fea8 	bl	c324 <z_spin_lock_valid>
    55d4:	b940      	cbnz	r0, 55e8 <pm_state_notify+0x30>
    55d6:	491d      	ldr	r1, [pc, #116]	; (564c <pm_state_notify+0x94>)
    55d8:	481d      	ldr	r0, [pc, #116]	; (5650 <pm_state_notify+0x98>)
    55da:	2281      	movs	r2, #129	; 0x81
    55dc:	f009 fef3 	bl	f3c6 <printk>
    55e0:	481a      	ldr	r0, [pc, #104]	; (564c <pm_state_notify+0x94>)
    55e2:	2181      	movs	r1, #129	; 0x81
    55e4:	f009 ffb4 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    55e8:	4817      	ldr	r0, [pc, #92]	; (5648 <pm_state_notify+0x90>)
    55ea:	f006 feb9 	bl	c360 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    55ee:	4b19      	ldr	r3, [pc, #100]	; (5654 <pm_state_notify+0x9c>)
    55f0:	681c      	ldr	r4, [r3, #0]
    55f2:	2c00      	cmp	r4, #0
    55f4:	bf38      	it	cc
    55f6:	2400      	movcc	r4, #0
    55f8:	b19c      	cbz	r4, 5622 <pm_state_notify+0x6a>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
    55fa:	4f17      	ldr	r7, [pc, #92]	; (5658 <pm_state_notify+0xa0>)
    55fc:	f8df 805c 	ldr.w	r8, [pc, #92]	; 565c <pm_state_notify+0xa4>
    5600:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    5604:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    5608:	2d00      	cmp	r5, #0
    560a:	bf08      	it	eq
    560c:	4613      	moveq	r3, r2
		if (callback) {
    560e:	b12b      	cbz	r3, 561c <pm_state_notify+0x64>
			callback(z_power_states[_current_cpu->id].state);
    5610:	f898 2014 	ldrb.w	r2, [r8, #20]
    5614:	fb09 f202 	mul.w	r2, r9, r2
    5618:	5cb8      	ldrb	r0, [r7, r2]
    561a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    561c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    561e:	2c00      	cmp	r4, #0
    5620:	d1f0      	bne.n	5604 <pm_state_notify+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5622:	4809      	ldr	r0, [pc, #36]	; (5648 <pm_state_notify+0x90>)
    5624:	f006 fe8c 	bl	c340 <z_spin_unlock_valid>
    5628:	b940      	cbnz	r0, 563c <pm_state_notify+0x84>
    562a:	4908      	ldr	r1, [pc, #32]	; (564c <pm_state_notify+0x94>)
    562c:	4808      	ldr	r0, [pc, #32]	; (5650 <pm_state_notify+0x98>)
    562e:	22ac      	movs	r2, #172	; 0xac
    5630:	f009 fec9 	bl	f3c6 <printk>
    5634:	4805      	ldr	r0, [pc, #20]	; (564c <pm_state_notify+0x94>)
    5636:	21ac      	movs	r1, #172	; 0xac
    5638:	f009 ff8a 	bl	f550 <assert_post_action>
	__asm__ volatile(
    563c:	f386 8811 	msr	BASEPRI, r6
    5640:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    5644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5648:	200009f8 	.word	0x200009f8
    564c:	00013b71 	.word	0x00013b71
    5650:	00013904 	.word	0x00013904
    5654:	200009fc 	.word	0x200009fc
    5658:	20000a08 	.word	0x20000a08
    565c:	20000c20 	.word	0x20000c20

00005660 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    5660:	f000 031f 	and.w	r3, r0, #31
    5664:	2201      	movs	r2, #1
    5666:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5668:	4b0a      	ldr	r3, [pc, #40]	; (5694 <atomic_test_and_set_bit.constprop.0+0x34>)
    566a:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    566e:	0940      	lsrs	r0, r0, #5
    5670:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    5674:	e850 3f00 	ldrex	r3, [r0]
    5678:	ea43 0102 	orr.w	r1, r3, r2
    567c:	e840 1c00 	strex	ip, r1, [r0]
    5680:	f1bc 0f00 	cmp.w	ip, #0
    5684:	d1f6      	bne.n	5674 <atomic_test_and_set_bit.constprop.0+0x14>
    5686:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    568a:	421a      	tst	r2, r3
}
    568c:	bf14      	ite	ne
    568e:	2001      	movne	r0, #1
    5690:	2000      	moveq	r0, #0
    5692:	4770      	bx	lr
    5694:	20000a14 	.word	0x20000a14

00005698 <pm_system_resume>:

void pm_system_resume(void)
{
    5698:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    569a:	4b1d      	ldr	r3, [pc, #116]	; (5710 <pm_system_resume+0x78>)
    569c:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    569e:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    56a2:	f005 031f 	and.w	r3, r5, #31
    56a6:	2201      	movs	r2, #1
    56a8:	409a      	lsls	r2, r3
    56aa:	4b1a      	ldr	r3, [pc, #104]	; (5714 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    56ac:	0969      	lsrs	r1, r5, #5
{
    56ae:	b085      	sub	sp, #20
    56b0:	43d0      	mvns	r0, r2
    56b2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    56b6:	e853 1f00 	ldrex	r1, [r3]
    56ba:	ea01 0400 	and.w	r4, r1, r0
    56be:	e843 4c00 	strex	ip, r4, [r3]
    56c2:	f1bc 0f00 	cmp.w	ip, #0
    56c6:	d1f6      	bne.n	56b6 <pm_system_resume+0x1e>
    56c8:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    56cc:	4211      	tst	r1, r2
    56ce:	d017      	beq.n	5700 <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
    56d0:	4c11      	ldr	r4, [pc, #68]	; (5718 <pm_system_resume+0x80>)
    56d2:	220c      	movs	r2, #12
    56d4:	fb02 4205 	mla	r2, r2, r5, r4
    56d8:	ca07      	ldmia	r2, {r0, r1, r2}
    56da:	ab01      	add	r3, sp, #4
    56dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    56e0:	4a0e      	ldr	r2, [pc, #56]	; (571c <pm_system_resume+0x84>)
    56e2:	b17a      	cbz	r2, 5704 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    56e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    56e8:	f00a facd 	bl	fc86 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    56ec:	2000      	movs	r0, #0
    56ee:	f7ff ff63 	bl	55b8 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    56f2:	230c      	movs	r3, #12
    56f4:	436b      	muls	r3, r5
    56f6:	2200      	movs	r2, #0
    56f8:	18e1      	adds	r1, r4, r3
    56fa:	50e2      	str	r2, [r4, r3]
    56fc:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
    5700:	b005      	add	sp, #20
    5702:	bd30      	pop	{r4, r5, pc}
    5704:	f382 8811 	msr	BASEPRI, r2
    5708:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    570c:	e7ee      	b.n	56ec <pm_system_resume+0x54>
    570e:	bf00      	nop
    5710:	20000c20 	.word	0x20000c20
    5714:	20000a04 	.word	0x20000a04
    5718:	20000a08 	.word	0x20000a08
    571c:	0000fc87 	.word	0x0000fc87

00005720 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    5720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    5724:	4b37      	ldr	r3, [pc, #220]	; (5804 <pm_system_suspend+0xe4>)
    5726:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 581c <pm_system_suspend+0xfc>
    572a:	7d1c      	ldrb	r4, [r3, #20]
{
    572c:	b088      	sub	sp, #32
    572e:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    5730:	4620      	mov	r0, r4
    5732:	f7ff ff95 	bl	5660 <atomic_test_and_set_bit.constprop.0>
    5736:	b960      	cbnz	r0, 5752 <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    5738:	466e      	mov	r6, sp
    573a:	463a      	mov	r2, r7
    573c:	4621      	mov	r1, r4
    573e:	4630      	mov	r0, r6
    5740:	f00a fa75 	bl	fc2e <pm_policy_next_state>
    5744:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    5748:	250c      	movs	r5, #12
    574a:	fb05 8504 	mla	r5, r5, r4, r8
    574e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    5752:	230c      	movs	r3, #12
    5754:	4363      	muls	r3, r4
    5756:	eb08 0203 	add.w	r2, r8, r3
    575a:	f818 0003 	ldrb.w	r0, [r8, r3]
    575e:	0965      	lsrs	r5, r4, #5
    5760:	f004 061f 	and.w	r6, r4, #31
    5764:	b3c8      	cbz	r0, 57da <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    5766:	1c7b      	adds	r3, r7, #1
    5768:	d00f      	beq.n	578a <pm_system_suspend+0x6a>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    576a:	f8d2 e008 	ldr.w	lr, [r2, #8]
    576e:	4826      	ldr	r0, [pc, #152]	; (5808 <pm_system_suspend+0xe8>)
    5770:	4a26      	ldr	r2, [pc, #152]	; (580c <pm_system_suspend+0xec>)
    5772:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    5776:	2100      	movs	r1, #0
    5778:	2300      	movs	r3, #0
    577a:	fbec 010e 	umlal	r0, r1, ip, lr
    577e:	f7fb fc9f 	bl	10c0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    5782:	2101      	movs	r1, #1
    5784:	1a38      	subs	r0, r7, r0
    5786:	f008 f98f 	bl	daa8 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    578a:	f007 f903 	bl	c994 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    578e:	2001      	movs	r0, #1
    5790:	f7ff ff12 	bl	55b8 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5794:	f3bf 8f5b 	dmb	ish
    5798:	4b1d      	ldr	r3, [pc, #116]	; (5810 <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    579a:	2201      	movs	r2, #1
    579c:	40b2      	lsls	r2, r6
    579e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    57a2:	e853 1f00 	ldrex	r1, [r3]
    57a6:	4311      	orrs	r1, r2
    57a8:	e843 1000 	strex	r0, r1, [r3]
    57ac:	2800      	cmp	r0, #0
    57ae:	d1f8      	bne.n	57a2 <pm_system_suspend+0x82>
    57b0:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    57b4:	230c      	movs	r3, #12
    57b6:	fb03 8404 	mla	r4, r3, r4, r8
    57ba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    57be:	ab05      	add	r3, sp, #20
    57c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    57c4:	4a13      	ldr	r2, [pc, #76]	; (5814 <pm_system_suspend+0xf4>)
    57c6:	b11a      	cbz	r2, 57d0 <pm_system_suspend+0xb0>
		pm_power_state_set(info);
    57c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    57cc:	f00a fa48 	bl	fc60 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    57d0:	f7ff ff62 	bl	5698 <pm_system_resume>
	k_sched_unlock();
    57d4:	f007 fd14 	bl	d200 <k_sched_unlock>
	bool ret = true;
    57d8:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    57da:	4a0f      	ldr	r2, [pc, #60]	; (5818 <pm_system_suspend+0xf8>)
    57dc:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    57e0:	2301      	movs	r3, #1
    57e2:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    57e4:	43db      	mvns	r3, r3
    57e6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    57ea:	e855 2f00 	ldrex	r2, [r5]
    57ee:	401a      	ands	r2, r3
    57f0:	e845 2100 	strex	r1, r2, [r5]
    57f4:	2900      	cmp	r1, #0
    57f6:	d1f8      	bne.n	57ea <pm_system_suspend+0xca>
    57f8:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    57fc:	b008      	add	sp, #32
    57fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5802:	bf00      	nop
    5804:	20000c20 	.word	0x20000c20
    5808:	000f423f 	.word	0x000f423f
    580c:	000f4240 	.word	0x000f4240
    5810:	20000a04 	.word	0x20000a04
    5814:	0000fc61 	.word	0x0000fc61
    5818:	20000a14 	.word	0x20000a14
    581c:	20000a08 	.word	0x20000a08

00005820 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    5820:	4901      	ldr	r1, [pc, #4]	; (5828 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    5822:	2210      	movs	r2, #16
	str	r2, [r1]
    5824:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    5826:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    5828:	e000ed10 	.word	0xe000ed10

0000582c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    582c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    582e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    5830:	f380 8811 	msr	BASEPRI, r0
	isb
    5834:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    5838:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    583c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    583e:	b662      	cpsie	i
	isb
    5840:	f3bf 8f6f 	isb	sy

	bx	lr
    5844:	4770      	bx	lr
    5846:	bf00      	nop

00005848 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    5848:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    584a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    584c:	f381 8811 	msr	BASEPRI, r1

	wfe
    5850:	bf20      	wfe

	msr	BASEPRI, r0
    5852:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    5856:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    5858:	4770      	bx	lr
    585a:	bf00      	nop

0000585c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    585c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    585e:	4606      	mov	r6, r0

	if (esf != NULL) {
    5860:	460c      	mov	r4, r1
    5862:	b301      	cbz	r1, 58a6 <z_arm_fatal_error+0x4a>
    5864:	4b13      	ldr	r3, [pc, #76]	; (58b4 <z_arm_fatal_error+0x58>)
    5866:	4d14      	ldr	r5, [pc, #80]	; (58b8 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    5868:	4814      	ldr	r0, [pc, #80]	; (58bc <z_arm_fatal_error+0x60>)
    586a:	1aed      	subs	r5, r5, r3
    586c:	08ed      	lsrs	r5, r5, #3
    586e:	01ad      	lsls	r5, r5, #6
    5870:	f045 0501 	orr.w	r5, r5, #1
    5874:	f8ad 5000 	strh.w	r5, [sp]
    5878:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    587c:	6809      	ldr	r1, [r1, #0]
    587e:	f009 fecf 	bl	f620 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    5882:	f8ad 5000 	strh.w	r5, [sp]
    5886:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    588a:	68e1      	ldr	r1, [r4, #12]
    588c:	480c      	ldr	r0, [pc, #48]	; (58c0 <z_arm_fatal_error+0x64>)
    588e:	f009 fec7 	bl	f620 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    5892:	69e1      	ldr	r1, [r4, #28]
    5894:	480b      	ldr	r0, [pc, #44]	; (58c4 <z_arm_fatal_error+0x68>)
    5896:	462a      	mov	r2, r5
    5898:	f009 fe95 	bl	f5c6 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    589c:	69a1      	ldr	r1, [r4, #24]
    589e:	480a      	ldr	r0, [pc, #40]	; (58c8 <z_arm_fatal_error+0x6c>)
    58a0:	462a      	mov	r2, r5
    58a2:	f009 fe90 	bl	f5c6 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    58a6:	4621      	mov	r1, r4
    58a8:	4630      	mov	r0, r6
}
    58aa:	b002      	add	sp, #8
    58ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    58b0:	f006 ba08 	b.w	bcc4 <z_fatal_error>
    58b4:	000130a4 	.word	0x000130a4
    58b8:	000130dc 	.word	0x000130dc
    58bc:	00013d93 	.word	0x00013d93
    58c0:	00013dc2 	.word	0x00013dc2
    58c4:	00013df1 	.word	0x00013df1
    58c8:	00013e00 	.word	0x00013e00

000058cc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    58cc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    58ce:	2b00      	cmp	r3, #0
    58d0:	db08      	blt.n	58e4 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    58d2:	2201      	movs	r2, #1
    58d4:	f000 001f 	and.w	r0, r0, #31
    58d8:	fa02 f000 	lsl.w	r0, r2, r0
    58dc:	095b      	lsrs	r3, r3, #5
    58de:	4a02      	ldr	r2, [pc, #8]	; (58e8 <arch_irq_enable+0x1c>)
    58e0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    58e4:	4770      	bx	lr
    58e6:	bf00      	nop
    58e8:	e000e100 	.word	0xe000e100

000058ec <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    58ec:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    58ee:	2b00      	cmp	r3, #0
    58f0:	db0d      	blt.n	590e <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    58f2:	2201      	movs	r2, #1
    58f4:	095b      	lsrs	r3, r3, #5
    58f6:	f000 001f 	and.w	r0, r0, #31
    58fa:	fa02 f000 	lsl.w	r0, r2, r0
    58fe:	3320      	adds	r3, #32
    5900:	4a03      	ldr	r2, [pc, #12]	; (5910 <arch_irq_disable+0x24>)
    5902:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    5906:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    590a:	f3bf 8f6f 	isb	sy
}
    590e:	4770      	bx	lr
    5910:	e000e100 	.word	0xe000e100

00005914 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    5914:	4b05      	ldr	r3, [pc, #20]	; (592c <arch_irq_is_enabled+0x18>)
    5916:	0942      	lsrs	r2, r0, #5
    5918:	f000 001f 	and.w	r0, r0, #31
    591c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    5920:	2301      	movs	r3, #1
    5922:	fa03 f000 	lsl.w	r0, r3, r0
}
    5926:	4010      	ands	r0, r2
    5928:	4770      	bx	lr
    592a:	bf00      	nop
    592c:	e000e100 	.word	0xe000e100

00005930 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    5930:	b538      	push	{r3, r4, r5, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    5932:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    5934:	2c07      	cmp	r4, #7
{
    5936:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    5938:	d908      	bls.n	594c <z_arm_irq_priority_set+0x1c>
    593a:	490e      	ldr	r1, [pc, #56]	; (5974 <z_arm_irq_priority_set+0x44>)
    593c:	480e      	ldr	r0, [pc, #56]	; (5978 <z_arm_irq_priority_set+0x48>)
    593e:	2259      	movs	r2, #89	; 0x59
    5940:	f009 fd41 	bl	f3c6 <printk>
    5944:	480b      	ldr	r0, [pc, #44]	; (5974 <z_arm_irq_priority_set+0x44>)
    5946:	2159      	movs	r1, #89	; 0x59
    5948:	f009 fe02 	bl	f550 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    594c:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    594e:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5950:	bfac      	ite	ge
    5952:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5956:	4b09      	ldrlt	r3, [pc, #36]	; (597c <z_arm_irq_priority_set+0x4c>)
    5958:	ea4f 1444 	mov.w	r4, r4, lsl #5
    595c:	bfb8      	it	lt
    595e:	f005 050f 	andlt.w	r5, r5, #15
    5962:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5964:	bfaa      	itet	ge
    5966:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    596a:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    596c:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    5970:	bd38      	pop	{r3, r4, r5, pc}
    5972:	bf00      	nop
    5974:	00013e2e 	.word	0x00013e2e
    5978:	00013904 	.word	0x00013904
    597c:	e000ed14 	.word	0xe000ed14

00005980 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    5980:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    5982:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    5984:	4b04      	ldr	r3, [pc, #16]	; (5998 <_arch_isr_direct_pm+0x18>)
    5986:	699a      	ldr	r2, [r3, #24]
    5988:	b11a      	cbz	r2, 5992 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    598a:	2200      	movs	r2, #0
    598c:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    598e:	f00c fc3b 	bl	12208 <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    5992:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    5994:	bd08      	pop	{r3, pc}
    5996:	bf00      	nop
    5998:	20000c20 	.word	0x20000c20

0000599c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    599c:	bf30      	wfi
    b z_SysNmiOnReset
    599e:	f7ff bffd 	b.w	599c <z_SysNmiOnReset>
    59a2:	bf00      	nop

000059a4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    59a4:	4a0b      	ldr	r2, [pc, #44]	; (59d4 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    59a6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    59a8:	4b0b      	ldr	r3, [pc, #44]	; (59d8 <z_arm_prep_c+0x34>)
    59aa:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    59ae:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    59b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    59b4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    59b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    59bc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    59c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    59c4:	f006 fa32 	bl	be2c <z_bss_zero>
	z_data_copy();
    59c8:	f007 fed8 	bl	d77c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    59cc:	f000 fb5c 	bl	6088 <z_arm_interrupt_init>
	z_cstart();
    59d0:	f006 fa36 	bl	be40 <z_cstart>
    59d4:	00000000 	.word	0x00000000
    59d8:	e000ed00 	.word	0xe000ed00

000059dc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    59dc:	4a09      	ldr	r2, [pc, #36]	; (5a04 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    59de:	490a      	ldr	r1, [pc, #40]	; (5a08 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    59e0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    59e2:	6809      	ldr	r1, [r1, #0]
    59e4:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    59e6:	4909      	ldr	r1, [pc, #36]	; (5a0c <arch_swap+0x30>)
	_current->arch.basepri = key;
    59e8:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    59ea:	684b      	ldr	r3, [r1, #4]
    59ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    59f0:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    59f2:	2300      	movs	r3, #0
    59f4:	f383 8811 	msr	BASEPRI, r3
    59f8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    59fc:	6893      	ldr	r3, [r2, #8]
}
    59fe:	6f98      	ldr	r0, [r3, #120]	; 0x78
    5a00:	4770      	bx	lr
    5a02:	bf00      	nop
    5a04:	20000c20 	.word	0x20000c20
    5a08:	000134dc 	.word	0x000134dc
    5a0c:	e000ed00 	.word	0xe000ed00

00005a10 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    5a10:	4912      	ldr	r1, [pc, #72]	; (5a5c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    5a12:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    5a14:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    5a18:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    5a1a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    5a1e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5a22:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    5a24:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    5a28:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    5a2c:	4f0c      	ldr	r7, [pc, #48]	; (5a60 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    5a2e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    5a32:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    5a34:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    5a36:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    5a38:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    5a3a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    5a3c:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    5a3e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    5a42:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    5a44:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    5a46:	f000 fbb5 	bl	61b4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    5a4a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    5a4e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    5a52:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    5a56:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    5a5a:	4770      	bx	lr
    ldr r1, =_kernel
    5a5c:	20000c20 	.word	0x20000c20
    ldr v4, =_SCS_ICSR
    5a60:	e000ed04 	.word	0xe000ed04

00005a64 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    5a64:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    5a68:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    5a6a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    5a6e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    5a72:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    5a74:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    5a78:	2902      	cmp	r1, #2
    beq _oops
    5a7a:	d0ff      	beq.n	5a7c <_oops>

00005a7c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    5a7c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    5a7e:	f00a f8db 	bl	fc38 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    5a82:	bd01      	pop	{r0, pc}

00005a84 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    5a84:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    5a88:	9b00      	ldr	r3, [sp, #0]
    5a8a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    5a8e:	490a      	ldr	r1, [pc, #40]	; (5ab8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    5a90:	9b01      	ldr	r3, [sp, #4]
    5a92:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    5a96:	9b02      	ldr	r3, [sp, #8]
    5a98:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    5a9c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    5aa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    5aa4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    5aa8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    5aac:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    5aae:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    5ab0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    5ab2:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    5ab4:	4770      	bx	lr
    5ab6:	bf00      	nop
    5ab8:	0000f4a3 	.word	0x0000f4a3

00005abc <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    5abc:	4a0b      	ldr	r2, [pc, #44]	; (5aec <z_check_thread_stack_fail+0x30>)
{
    5abe:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    5ac0:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    5ac2:	b190      	cbz	r0, 5aea <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    5ac4:	f113 0f16 	cmn.w	r3, #22
    5ac8:	6e40      	ldr	r0, [r0, #100]	; 0x64
    5aca:	d005      	beq.n	5ad8 <z_check_thread_stack_fail+0x1c>
    5acc:	f1a0 0220 	sub.w	r2, r0, #32
    5ad0:	429a      	cmp	r2, r3
    5ad2:	d806      	bhi.n	5ae2 <z_check_thread_stack_fail+0x26>
    5ad4:	4283      	cmp	r3, r0
    5ad6:	d204      	bcs.n	5ae2 <z_check_thread_stack_fail+0x26>
    5ad8:	4281      	cmp	r1, r0
    5ada:	bf2c      	ite	cs
    5adc:	2100      	movcs	r1, #0
    5ade:	2101      	movcc	r1, #1
    5ae0:	e000      	b.n	5ae4 <z_check_thread_stack_fail+0x28>
    5ae2:	2100      	movs	r1, #0
    5ae4:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    5ae6:	bf08      	it	eq
    5ae8:	2000      	moveq	r0, #0
}
    5aea:	4770      	bx	lr
    5aec:	20000c20 	.word	0x20000c20

00005af0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    5af0:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    5af2:	4b09      	ldr	r3, [pc, #36]	; (5b18 <arch_switch_to_main_thread+0x28>)
    5af4:	6098      	str	r0, [r3, #8]
{
    5af6:	460d      	mov	r5, r1
    5af8:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    5afa:	f000 fb5b 	bl	61b4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    5afe:	4620      	mov	r0, r4
    5b00:	f385 8809 	msr	PSP, r5
    5b04:	2100      	movs	r1, #0
    5b06:	b663      	cpsie	if
    5b08:	f381 8811 	msr	BASEPRI, r1
    5b0c:	f3bf 8f6f 	isb	sy
    5b10:	2200      	movs	r2, #0
    5b12:	2300      	movs	r3, #0
    5b14:	f009 fcc5 	bl	f4a2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    5b18:	20000c20 	.word	0x20000c20

00005b1c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    5b1c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    5b1e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    5b20:	4a0b      	ldr	r2, [pc, #44]	; (5b50 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    5b22:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    5b24:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    5b26:	bf1e      	ittt	ne
	movne	r1, #0
    5b28:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    5b2a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    5b2c:	f00c fb6c 	blne	12208 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    5b30:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    5b32:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    5b36:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    5b3a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    5b3e:	4905      	ldr	r1, [pc, #20]	; (5b54 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    5b40:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    5b42:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    5b44:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    5b46:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    5b4a:	4903      	ldr	r1, [pc, #12]	; (5b58 <_isr_wrapper+0x3c>)
	bx r1
    5b4c:	4708      	bx	r1
    5b4e:	0000      	.short	0x0000
	ldr r2, =_kernel
    5b50:	20000c20 	.word	0x20000c20
	ldr r1, =_sw_isr_table
    5b54:	00012f6c 	.word	0x00012f6c
	ldr r1, =z_arm_int_exit
    5b58:	00005b5d 	.word	0x00005b5d

00005b5c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    5b5c:	4b04      	ldr	r3, [pc, #16]	; (5b70 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    5b5e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    5b60:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    5b62:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    5b64:	d003      	beq.n	5b6e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    5b66:	4903      	ldr	r1, [pc, #12]	; (5b74 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    5b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    5b6c:	600a      	str	r2, [r1, #0]

00005b6e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    5b6e:	4770      	bx	lr
	ldr r3, =_kernel
    5b70:	20000c20 	.word	0x20000c20
	ldr r1, =_SCS_ICSR
    5b74:	e000ed04 	.word	0xe000ed04

00005b78 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    5b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b7c:	4b3d      	ldr	r3, [pc, #244]	; (5c74 <mem_manage_fault+0xfc>)
    5b7e:	4c3e      	ldr	r4, [pc, #248]	; (5c78 <mem_manage_fault+0x100>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    5b80:	4d3e      	ldr	r5, [pc, #248]	; (5c7c <mem_manage_fault+0x104>)
    5b82:	1ae4      	subs	r4, r4, r3
    5b84:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    5b86:	01a4      	lsls	r4, r4, #6
    5b88:	f044 0901 	orr.w	r9, r4, #1
{
    5b8c:	4607      	mov	r7, r0
    5b8e:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    5b90:	483b      	ldr	r0, [pc, #236]	; (5c80 <mem_manage_fault+0x108>)
    5b92:	4649      	mov	r1, r9
{
    5b94:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    5b96:	f009 fd09 	bl	f5ac <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    5b9a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5b9c:	06d3      	lsls	r3, r2, #27
    5b9e:	d503      	bpl.n	5ba8 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
    5ba0:	4838      	ldr	r0, [pc, #224]	; (5c84 <mem_manage_fault+0x10c>)
    5ba2:	4649      	mov	r1, r9
    5ba4:	f009 fd02 	bl	f5ac <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    5ba8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5baa:	0718      	lsls	r0, r3, #28
    5bac:	d504      	bpl.n	5bb8 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
    5bae:	4836      	ldr	r0, [pc, #216]	; (5c88 <mem_manage_fault+0x110>)
    5bb0:	f044 0101 	orr.w	r1, r4, #1
    5bb4:	f009 fcfa 	bl	f5ac <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    5bb8:	4d30      	ldr	r5, [pc, #192]	; (5c7c <mem_manage_fault+0x104>)
    5bba:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5bbc:	0799      	lsls	r1, r3, #30
    5bbe:	d424      	bmi.n	5c0a <mem_manage_fault+0x92>
	uint32_t mmfar = -EINVAL;
    5bc0:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    5bc4:	4d2d      	ldr	r5, [pc, #180]	; (5c7c <mem_manage_fault+0x104>)
    5bc6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5bc8:	07d3      	lsls	r3, r2, #31
    5bca:	d504      	bpl.n	5bd6 <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
    5bcc:	482f      	ldr	r0, [pc, #188]	; (5c8c <mem_manage_fault+0x114>)
    5bce:	f044 0101 	orr.w	r1, r4, #1
    5bd2:	f009 fceb 	bl	f5ac <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    5bd6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5bd8:	069d      	lsls	r5, r3, #26
    5bda:	d504      	bpl.n	5be6 <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
    5bdc:	482c      	ldr	r0, [pc, #176]	; (5c90 <mem_manage_fault+0x118>)
    5bde:	f044 0101 	orr.w	r1, r4, #1
    5be2:	f009 fce3 	bl	f5ac <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    5be6:	4d25      	ldr	r5, [pc, #148]	; (5c7c <mem_manage_fault+0x104>)
    5be8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5bea:	06d8      	lsls	r0, r3, #27
    5bec:	d425      	bmi.n	5c3a <mem_manage_fault+0xc2>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    5bee:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    5bf0:	0799      	lsls	r1, r3, #30
    5bf2:	d422      	bmi.n	5c3a <mem_manage_fault+0xc2>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    5bf4:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    5bf6:	4a21      	ldr	r2, [pc, #132]	; (5c7c <mem_manage_fault+0x104>)
    5bf8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5bfa:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    5bfe:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    5c00:	2300      	movs	r3, #0
    5c02:	7033      	strb	r3, [r6, #0]

	return reason;
}
    5c04:	4620      	mov	r0, r4
    5c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    5c0a:	f044 0a01 	orr.w	sl, r4, #1
    5c0e:	4821      	ldr	r0, [pc, #132]	; (5c94 <mem_manage_fault+0x11c>)
    5c10:	4651      	mov	r1, sl
    5c12:	f009 fccb 	bl	f5ac <log_0>
		uint32_t temp = SCB->MMFAR;
    5c16:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    5c1a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5c1c:	061a      	lsls	r2, r3, #24
    5c1e:	d5cf      	bpl.n	5bc0 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    5c20:	481d      	ldr	r0, [pc, #116]	; (5c98 <mem_manage_fault+0x120>)
    5c22:	4652      	mov	r2, sl
    5c24:	4649      	mov	r1, r9
    5c26:	f009 fcce 	bl	f5c6 <log_1>
			if (from_hard_fault != 0) {
    5c2a:	f1b8 0f00 	cmp.w	r8, #0
    5c2e:	d0c9      	beq.n	5bc4 <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    5c30:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5c32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    5c36:	62ab      	str	r3, [r5, #40]	; 0x28
    5c38:	e7c4      	b.n	5bc4 <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    5c3a:	686b      	ldr	r3, [r5, #4]
    5c3c:	051a      	lsls	r2, r3, #20
    5c3e:	d5d9      	bpl.n	5bf4 <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    5c40:	4639      	mov	r1, r7
    5c42:	4648      	mov	r0, r9
    5c44:	f7ff ff3a 	bl	5abc <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    5c48:	4604      	mov	r4, r0
    5c4a:	b118      	cbz	r0, 5c54 <mem_manage_fault+0xdc>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    5c4c:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    5c50:	2402      	movs	r4, #2
    5c52:	e7d0      	b.n	5bf6 <mem_manage_fault+0x7e>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    5c54:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5c56:	06db      	lsls	r3, r3, #27
    5c58:	d5cc      	bpl.n	5bf4 <mem_manage_fault+0x7c>
    5c5a:	4910      	ldr	r1, [pc, #64]	; (5c9c <mem_manage_fault+0x124>)
    5c5c:	4810      	ldr	r0, [pc, #64]	; (5ca0 <mem_manage_fault+0x128>)
    5c5e:	f240 1249 	movw	r2, #329	; 0x149
    5c62:	f009 fbb0 	bl	f3c6 <printk>
    5c66:	480d      	ldr	r0, [pc, #52]	; (5c9c <mem_manage_fault+0x124>)
    5c68:	f240 1149 	movw	r1, #329	; 0x149
    5c6c:	f009 fc70 	bl	f550 <assert_post_action>
    5c70:	e7c1      	b.n	5bf6 <mem_manage_fault+0x7e>
    5c72:	bf00      	nop
    5c74:	000130a4 	.word	0x000130a4
    5c78:	000130dc 	.word	0x000130dc
    5c7c:	e000ed00 	.word	0xe000ed00
    5c80:	00013e64 	.word	0x00013e64
    5c84:	00013e7a 	.word	0x00013e7a
    5c88:	00013ead 	.word	0x00013ead
    5c8c:	00013eee 	.word	0x00013eee
    5c90:	00013f0d 	.word	0x00013f0d
    5c94:	00013ec0 	.word	0x00013ec0
    5c98:	00013ed8 	.word	0x00013ed8
    5c9c:	00013f3c 	.word	0x00013f3c
    5ca0:	00013904 	.word	0x00013904

00005ca4 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    5ca4:	b570      	push	{r4, r5, r6, lr}
    5ca6:	4b23      	ldr	r3, [pc, #140]	; (5d34 <usage_fault.isra.0+0x90>)
    5ca8:	4c23      	ldr	r4, [pc, #140]	; (5d38 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    5caa:	4d24      	ldr	r5, [pc, #144]	; (5d3c <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    5cac:	4824      	ldr	r0, [pc, #144]	; (5d40 <usage_fault.isra.0+0x9c>)
    5cae:	1ae4      	subs	r4, r4, r3
    5cb0:	08e4      	lsrs	r4, r4, #3
    5cb2:	01a4      	lsls	r4, r4, #6
    5cb4:	f044 0601 	orr.w	r6, r4, #1
    5cb8:	4631      	mov	r1, r6
    5cba:	f009 fc77 	bl	f5ac <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    5cbe:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5cc0:	0193      	lsls	r3, r2, #6
    5cc2:	d503      	bpl.n	5ccc <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    5cc4:	481f      	ldr	r0, [pc, #124]	; (5d44 <usage_fault.isra.0+0xa0>)
    5cc6:	4631      	mov	r1, r6
    5cc8:	f009 fc70 	bl	f5ac <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    5ccc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5cce:	01dd      	lsls	r5, r3, #7
    5cd0:	d504      	bpl.n	5cdc <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    5cd2:	481d      	ldr	r0, [pc, #116]	; (5d48 <usage_fault.isra.0+0xa4>)
    5cd4:	f044 0101 	orr.w	r1, r4, #1
    5cd8:	f009 fc68 	bl	f5ac <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    5cdc:	4d17      	ldr	r5, [pc, #92]	; (5d3c <usage_fault.isra.0+0x98>)
    5cde:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5ce0:	0310      	lsls	r0, r2, #12
    5ce2:	d504      	bpl.n	5cee <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    5ce4:	4819      	ldr	r0, [pc, #100]	; (5d4c <usage_fault.isra.0+0xa8>)
    5ce6:	f044 0101 	orr.w	r1, r4, #1
    5cea:	f009 fc5f 	bl	f5ac <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    5cee:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5cf0:	0359      	lsls	r1, r3, #13
    5cf2:	d504      	bpl.n	5cfe <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    5cf4:	4816      	ldr	r0, [pc, #88]	; (5d50 <usage_fault.isra.0+0xac>)
    5cf6:	f044 0101 	orr.w	r1, r4, #1
    5cfa:	f009 fc57 	bl	f5ac <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    5cfe:	4d0f      	ldr	r5, [pc, #60]	; (5d3c <usage_fault.isra.0+0x98>)
    5d00:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5d02:	0392      	lsls	r2, r2, #14
    5d04:	d504      	bpl.n	5d10 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    5d06:	4813      	ldr	r0, [pc, #76]	; (5d54 <usage_fault.isra.0+0xb0>)
    5d08:	f044 0101 	orr.w	r1, r4, #1
    5d0c:	f009 fc4e 	bl	f5ac <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    5d10:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5d12:	03db      	lsls	r3, r3, #15
    5d14:	d504      	bpl.n	5d20 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    5d16:	4810      	ldr	r0, [pc, #64]	; (5d58 <usage_fault.isra.0+0xb4>)
    5d18:	f044 0101 	orr.w	r1, r4, #1
    5d1c:	f009 fc46 	bl	f5ac <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    5d20:	4a06      	ldr	r2, [pc, #24]	; (5d3c <usage_fault.isra.0+0x98>)
    5d22:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5d24:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    5d28:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    5d2c:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    5d2e:	2000      	movs	r0, #0
    5d30:	bd70      	pop	{r4, r5, r6, pc}
    5d32:	bf00      	nop
    5d34:	000130a4 	.word	0x000130a4
    5d38:	000130dc 	.word	0x000130dc
    5d3c:	e000ed00 	.word	0xe000ed00
    5d40:	00013f76 	.word	0x00013f76
    5d44:	00013f8e 	.word	0x00013f8e
    5d48:	00013fa1 	.word	0x00013fa1
    5d4c:	00013fbb 	.word	0x00013fbb
    5d50:	00013fd9 	.word	0x00013fd9
    5d54:	00013ffe 	.word	0x00013ffe
    5d58:	00014018 	.word	0x00014018

00005d5c <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    5d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d60:	4b2a      	ldr	r3, [pc, #168]	; (5e0c <bus_fault.isra.0+0xb0>)
    5d62:	4c2b      	ldr	r4, [pc, #172]	; (5e10 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    5d64:	4d2b      	ldr	r5, [pc, #172]	; (5e14 <bus_fault.isra.0+0xb8>)
    5d66:	1ae4      	subs	r4, r4, r3
    5d68:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    5d6a:	01a4      	lsls	r4, r4, #6
    5d6c:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    5d70:	4607      	mov	r7, r0
    5d72:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    5d74:	4828      	ldr	r0, [pc, #160]	; (5e18 <bus_fault.isra.0+0xbc>)
    5d76:	4641      	mov	r1, r8
    5d78:	f009 fc18 	bl	f5ac <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    5d7c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5d7e:	04d1      	lsls	r1, r2, #19
    5d80:	d503      	bpl.n	5d8a <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    5d82:	4826      	ldr	r0, [pc, #152]	; (5e1c <bus_fault.isra.0+0xc0>)
    5d84:	4641      	mov	r1, r8
    5d86:	f009 fc11 	bl	f5ac <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    5d8a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5d8c:	051a      	lsls	r2, r3, #20
    5d8e:	d504      	bpl.n	5d9a <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    5d90:	4823      	ldr	r0, [pc, #140]	; (5e20 <bus_fault.isra.0+0xc4>)
    5d92:	f044 0101 	orr.w	r1, r4, #1
    5d96:	f009 fc09 	bl	f5ac <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    5d9a:	4d1e      	ldr	r5, [pc, #120]	; (5e14 <bus_fault.isra.0+0xb8>)
    5d9c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5d9e:	059b      	lsls	r3, r3, #22
    5da0:	d512      	bpl.n	5dc8 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    5da2:	f044 0801 	orr.w	r8, r4, #1
    5da6:	481f      	ldr	r0, [pc, #124]	; (5e24 <bus_fault.isra.0+0xc8>)
    5da8:	4641      	mov	r1, r8
    5daa:	f009 fbff 	bl	f5ac <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    5dae:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    5db0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5db2:	0418      	lsls	r0, r3, #16
    5db4:	d508      	bpl.n	5dc8 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    5db6:	481c      	ldr	r0, [pc, #112]	; (5e28 <bus_fault.isra.0+0xcc>)
    5db8:	4642      	mov	r2, r8
    5dba:	f009 fc04 	bl	f5c6 <log_1>
			if (from_hard_fault != 0) {
    5dbe:	b11f      	cbz	r7, 5dc8 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    5dc0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5dc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    5dc6:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    5dc8:	4d12      	ldr	r5, [pc, #72]	; (5e14 <bus_fault.isra.0+0xb8>)
    5dca:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5dcc:	0559      	lsls	r1, r3, #21
    5dce:	d504      	bpl.n	5dda <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    5dd0:	4816      	ldr	r0, [pc, #88]	; (5e2c <bus_fault.isra.0+0xd0>)
    5dd2:	f044 0101 	orr.w	r1, r4, #1
    5dd6:	f009 fbe9 	bl	f5ac <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    5dda:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5ddc:	05da      	lsls	r2, r3, #23
    5dde:	d50d      	bpl.n	5dfc <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    5de0:	4813      	ldr	r0, [pc, #76]	; (5e30 <bus_fault.isra.0+0xd4>)
    5de2:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    5de6:	f009 fbe1 	bl	f5ac <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    5dea:	4a0a      	ldr	r2, [pc, #40]	; (5e14 <bus_fault.isra.0+0xb8>)
    5dec:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    5dee:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    5df0:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    5df4:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    5df6:	7030      	strb	r0, [r6, #0]
}
    5df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    5dfc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5dfe:	049b      	lsls	r3, r3, #18
    5e00:	d5f3      	bpl.n	5dea <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    5e02:	480c      	ldr	r0, [pc, #48]	; (5e34 <bus_fault.isra.0+0xd8>)
    5e04:	f044 0101 	orr.w	r1, r4, #1
    5e08:	e7ed      	b.n	5de6 <bus_fault.isra.0+0x8a>
    5e0a:	bf00      	nop
    5e0c:	000130a4 	.word	0x000130a4
    5e10:	000130dc 	.word	0x000130dc
    5e14:	e000ed00 	.word	0xe000ed00
    5e18:	00014043 	.word	0x00014043
    5e1c:	00014059 	.word	0x00014059
    5e20:	00013ead 	.word	0x00013ead
    5e24:	0001406a 	.word	0x0001406a
    5e28:	00014083 	.word	0x00014083
    5e2c:	00014098 	.word	0x00014098
    5e30:	000140b3 	.word	0x000140b3
    5e34:	00013f0d 	.word	0x00013f0d

00005e38 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    5e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5e3c:	4b78      	ldr	r3, [pc, #480]	; (6020 <z_arm_fault+0x1e8>)
    5e3e:	685e      	ldr	r6, [r3, #4]
{
    5e40:	b08a      	sub	sp, #40	; 0x28
    5e42:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5e44:	f3c6 0408 	ubfx	r4, r6, #0, #9
    5e48:	2700      	movs	r7, #0
    5e4a:	f387 8811 	msr	BASEPRI, r7
    5e4e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    5e52:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    5e56:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    5e5a:	d10d      	bne.n	5e78 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    5e5c:	f002 030c 	and.w	r3, r2, #12
    5e60:	2b08      	cmp	r3, #8
    5e62:	d116      	bne.n	5e92 <z_arm_fault+0x5a>
    5e64:	496f      	ldr	r1, [pc, #444]	; (6024 <z_arm_fault+0x1ec>)
    5e66:	4b70      	ldr	r3, [pc, #448]	; (6028 <z_arm_fault+0x1f0>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    5e68:	4870      	ldr	r0, [pc, #448]	; (602c <z_arm_fault+0x1f4>)
    5e6a:	1ac9      	subs	r1, r1, r3
    5e6c:	08c9      	lsrs	r1, r1, #3
    5e6e:	0189      	lsls	r1, r1, #6
    5e70:	f041 0101 	orr.w	r1, r1, #1
    5e74:	f009 fb9a 	bl	f5ac <log_0>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    5e78:	496d      	ldr	r1, [pc, #436]	; (6030 <z_arm_fault+0x1f8>)
    5e7a:	486e      	ldr	r0, [pc, #440]	; (6034 <z_arm_fault+0x1fc>)
    5e7c:	f240 32f2 	movw	r2, #1010	; 0x3f2
    5e80:	f009 faa1 	bl	f3c6 <printk>
    5e84:	486a      	ldr	r0, [pc, #424]	; (6030 <z_arm_fault+0x1f8>)
    5e86:	f240 31f2 	movw	r1, #1010	; 0x3f2
    5e8a:	f009 fb61 	bl	f550 <assert_post_action>
    5e8e:	2500      	movs	r5, #0
    5e90:	e005      	b.n	5e9e <z_arm_fault+0x66>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    5e92:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    5e94:	bf5c      	itt	pl
    5e96:	4605      	movpl	r5, r0
			*nested_exc = true;
    5e98:	2701      	movpl	r7, #1
	__ASSERT(esf != NULL,
    5e9a:	2d00      	cmp	r5, #0
    5e9c:	d0ec      	beq.n	5e78 <z_arm_fault+0x40>
	*recoverable = false;
    5e9e:	2300      	movs	r3, #0
    5ea0:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    5ea4:	1ee3      	subs	r3, r4, #3
    5ea6:	2b09      	cmp	r3, #9
    5ea8:	f200 80a1 	bhi.w	5fee <z_arm_fault+0x1b6>
    5eac:	e8df f003 	tbb	[pc, r3]
    5eb0:	76928e05 	.word	0x76928e05
    5eb4:	9f9f9f9f 	.word	0x9f9f9f9f
    5eb8:	969f      	.short	0x969f
    5eba:	4a5b      	ldr	r2, [pc, #364]	; (6028 <z_arm_fault+0x1f0>)
    5ebc:	4e59      	ldr	r6, [pc, #356]	; (6024 <z_arm_fault+0x1ec>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    5ebe:	485e      	ldr	r0, [pc, #376]	; (6038 <z_arm_fault+0x200>)
    5ec0:	1ab6      	subs	r6, r6, r2
    5ec2:	08f6      	lsrs	r6, r6, #3
    5ec4:	01b6      	lsls	r6, r6, #6
    5ec6:	f046 0601 	orr.w	r6, r6, #1
    5eca:	4631      	mov	r1, r6
    5ecc:	f009 fb6e 	bl	f5ac <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    5ed0:	4b53      	ldr	r3, [pc, #332]	; (6020 <z_arm_fault+0x1e8>)
    5ed2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    5ed4:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    5ed8:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    5edc:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    5ee0:	d005      	beq.n	5eee <z_arm_fault+0xb6>
		PR_EXC("  Bus fault on vector table read");
    5ee2:	4856      	ldr	r0, [pc, #344]	; (603c <z_arm_fault+0x204>)
    5ee4:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    5ee6:	f009 fb61 	bl	f5ac <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    5eea:	2400      	movs	r4, #0
}
    5eec:	e006      	b.n	5efc <z_arm_fault+0xc4>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    5eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5ef0:	2a00      	cmp	r2, #0
    5ef2:	da23      	bge.n	5f3c <z_arm_fault+0x104>
		PR_EXC("  Debug event");
    5ef4:	4852      	ldr	r0, [pc, #328]	; (6040 <z_arm_fault+0x208>)
    5ef6:	4631      	mov	r1, r6
    5ef8:	f009 fb58 	bl	f5ac <log_0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    5efc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5f00:	b9cb      	cbnz	r3, 5f36 <z_arm_fault+0xfe>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    5f02:	aa02      	add	r2, sp, #8
    5f04:	f105 0620 	add.w	r6, r5, #32
    5f08:	6828      	ldr	r0, [r5, #0]
    5f0a:	6869      	ldr	r1, [r5, #4]
    5f0c:	4613      	mov	r3, r2
    5f0e:	c303      	stmia	r3!, {r0, r1}
    5f10:	3508      	adds	r5, #8
    5f12:	42b5      	cmp	r5, r6
    5f14:	461a      	mov	r2, r3
    5f16:	d1f7      	bne.n	5f08 <z_arm_fault+0xd0>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    5f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5f1a:	2f00      	cmp	r7, #0
    5f1c:	d07b      	beq.n	6016 <z_arm_fault+0x1de>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    5f1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    5f22:	b922      	cbnz	r2, 5f2e <z_arm_fault+0xf6>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    5f24:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    5f28:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    5f2c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    5f2e:	a902      	add	r1, sp, #8
    5f30:	4620      	mov	r0, r4
    5f32:	f7ff fc93 	bl	585c <z_arm_fatal_error>
}
    5f36:	b00a      	add	sp, #40	; 0x28
    5f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    5f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5f3e:	005b      	lsls	r3, r3, #1
    5f40:	d53b      	bpl.n	5fba <z_arm_fault+0x182>
		PR_EXC("  Fault escalation (see below)");
    5f42:	4840      	ldr	r0, [pc, #256]	; (6044 <z_arm_fault+0x20c>)
    5f44:	4631      	mov	r1, r6
    5f46:	f009 fb31 	bl	f5ac <log_0>
	uint16_t fault_insn = *(ret_addr - 1);
    5f4a:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    5f4c:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    5f50:	f64d 7302 	movw	r3, #57090	; 0xdf02
    5f54:	429a      	cmp	r2, r3
    5f56:	d00d      	beq.n	5f74 <z_arm_fault+0x13c>
		} else if (SCB_MMFSR != 0) {
    5f58:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    5f5c:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    5f60:	781b      	ldrb	r3, [r3, #0]
    5f62:	b173      	cbz	r3, 5f82 <z_arm_fault+0x14a>
			reason = mem_manage_fault(esf, 1, recoverable);
    5f64:	f10d 0207 	add.w	r2, sp, #7
    5f68:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    5f6a:	4628      	mov	r0, r5
    5f6c:	f7ff fe04 	bl	5b78 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    5f70:	4604      	mov	r4, r0
		break;
    5f72:	e7c3      	b.n	5efc <z_arm_fault+0xc4>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    5f74:	6829      	ldr	r1, [r5, #0]
    5f76:	4834      	ldr	r0, [pc, #208]	; (6048 <z_arm_fault+0x210>)
    5f78:	4632      	mov	r2, r6
    5f7a:	f009 fb24 	bl	f5c6 <log_1>
			reason = esf->basic.r0;
    5f7e:	682c      	ldr	r4, [r5, #0]
    5f80:	e7bc      	b.n	5efc <z_arm_fault+0xc4>
		} else if (SCB_BFSR != 0) {
    5f82:	4b32      	ldr	r3, [pc, #200]	; (604c <z_arm_fault+0x214>)
    5f84:	781b      	ldrb	r3, [r3, #0]
    5f86:	b12b      	cbz	r3, 5f94 <z_arm_fault+0x15c>
			reason = bus_fault(esf, 1, recoverable);
    5f88:	f10d 0107 	add.w	r1, sp, #7
    5f8c:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    5f8e:	f7ff fee5 	bl	5d5c <bus_fault.isra.0>
    5f92:	e7ed      	b.n	5f70 <z_arm_fault+0x138>
		} else if (SCB_UFSR != 0) {
    5f94:	4b2e      	ldr	r3, [pc, #184]	; (6050 <z_arm_fault+0x218>)
    5f96:	881b      	ldrh	r3, [r3, #0]
    5f98:	b29b      	uxth	r3, r3
    5f9a:	b113      	cbz	r3, 5fa2 <z_arm_fault+0x16a>
		reason = usage_fault(esf);
    5f9c:	f7ff fe82 	bl	5ca4 <usage_fault.isra.0>
    5fa0:	e7e6      	b.n	5f70 <z_arm_fault+0x138>
			__ASSERT(0,
    5fa2:	4923      	ldr	r1, [pc, #140]	; (6030 <z_arm_fault+0x1f8>)
    5fa4:	4823      	ldr	r0, [pc, #140]	; (6034 <z_arm_fault+0x1fc>)
    5fa6:	f240 22c3 	movw	r2, #707	; 0x2c3
    5faa:	f009 fa0c 	bl	f3c6 <printk>
    5fae:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
    5fb2:	481f      	ldr	r0, [pc, #124]	; (6030 <z_arm_fault+0x1f8>)
    5fb4:	f009 facc 	bl	f550 <assert_post_action>
    5fb8:	e7a0      	b.n	5efc <z_arm_fault+0xc4>
    5fba:	491d      	ldr	r1, [pc, #116]	; (6030 <z_arm_fault+0x1f8>)
    5fbc:	481d      	ldr	r0, [pc, #116]	; (6034 <z_arm_fault+0x1fc>)
    5fbe:	f240 22c7 	movw	r2, #711	; 0x2c7
    5fc2:	f009 fa00 	bl	f3c6 <printk>
    5fc6:	f240 21c7 	movw	r1, #711	; 0x2c7
    5fca:	e7f2      	b.n	5fb2 <z_arm_fault+0x17a>
		reason = mem_manage_fault(esf, 0, recoverable);
    5fcc:	f10d 0207 	add.w	r2, sp, #7
    5fd0:	2100      	movs	r1, #0
    5fd2:	e7ca      	b.n	5f6a <z_arm_fault+0x132>
		reason = bus_fault(esf, 0, recoverable);
    5fd4:	f10d 0107 	add.w	r1, sp, #7
    5fd8:	2000      	movs	r0, #0
    5fda:	e7d8      	b.n	5f8e <z_arm_fault+0x156>
    5fdc:	4911      	ldr	r1, [pc, #68]	; (6024 <z_arm_fault+0x1ec>)
    5fde:	4b12      	ldr	r3, [pc, #72]	; (6028 <z_arm_fault+0x1f0>)
	PR_FAULT_INFO(
    5fe0:	481c      	ldr	r0, [pc, #112]	; (6054 <z_arm_fault+0x21c>)
    5fe2:	1ac9      	subs	r1, r1, r3
    5fe4:	08c9      	lsrs	r1, r1, #3
    5fe6:	0189      	lsls	r1, r1, #6
    5fe8:	f041 0101 	orr.w	r1, r1, #1
    5fec:	e77b      	b.n	5ee6 <z_arm_fault+0xae>
    5fee:	4a0e      	ldr	r2, [pc, #56]	; (6028 <z_arm_fault+0x1f0>)
    5ff0:	4b0c      	ldr	r3, [pc, #48]	; (6024 <z_arm_fault+0x1ec>)
	PR_FAULT_INFO("***** %s %d) *****",
    5ff2:	4819      	ldr	r0, [pc, #100]	; (6058 <z_arm_fault+0x220>)
    5ff4:	4919      	ldr	r1, [pc, #100]	; (605c <z_arm_fault+0x224>)
    5ff6:	1a9b      	subs	r3, r3, r2
    5ff8:	08db      	lsrs	r3, r3, #3
    5ffa:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    5ffe:	ea4f 1383 	mov.w	r3, r3, lsl #6
    6002:	bf18      	it	ne
    6004:	4601      	movne	r1, r0
    6006:	f043 0301 	orr.w	r3, r3, #1
    600a:	4815      	ldr	r0, [pc, #84]	; (6060 <z_arm_fault+0x228>)
    600c:	f1a4 0210 	sub.w	r2, r4, #16
    6010:	f009 faed 	bl	f5ee <log_2>
    6014:	e769      	b.n	5eea <z_arm_fault+0xb2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6016:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    601a:	f023 0301 	bic.w	r3, r3, #1
    601e:	e785      	b.n	5f2c <z_arm_fault+0xf4>
    6020:	e000ed00 	.word	0xe000ed00
    6024:	000130dc 	.word	0x000130dc
    6028:	000130a4 	.word	0x000130a4
    602c:	000140cb 	.word	0x000140cb
    6030:	00013f3c 	.word	0x00013f3c
    6034:	00013904 	.word	0x00013904
    6038:	000140f6 	.word	0x000140f6
    603c:	0001410d 	.word	0x0001410d
    6040:	0001412e 	.word	0x0001412e
    6044:	0001413c 	.word	0x0001413c
    6048:	0001415b 	.word	0x0001415b
    604c:	e000ed29 	.word	0xe000ed29
    6050:	e000ed2a 	.word	0xe000ed2a
    6054:	00014177 	.word	0x00014177
    6058:	000141b0 	.word	0x000141b0
    605c:	0001419b 	.word	0x0001419b
    6060:	000141c9 	.word	0x000141c9

00006064 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    6064:	4a02      	ldr	r2, [pc, #8]	; (6070 <z_arm_fault_init+0xc>)
    6066:	6953      	ldr	r3, [r2, #20]
    6068:	f043 0310 	orr.w	r3, r3, #16
    606c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    606e:	4770      	bx	lr
    6070:	e000ed00 	.word	0xe000ed00

00006074 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    6074:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    6078:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    607c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    607e:	4672      	mov	r2, lr
	bl z_arm_fault
    6080:	f7ff feda 	bl	5e38 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    6084:	bd01      	pop	{r0, pc}
    6086:	bf00      	nop

00006088 <z_arm_interrupt_init>:
    6088:	4804      	ldr	r0, [pc, #16]	; (609c <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    608a:	2300      	movs	r3, #0
    608c:	2120      	movs	r1, #32
    608e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    6090:	3301      	adds	r3, #1
    6092:	2b27      	cmp	r3, #39	; 0x27
    6094:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    6098:	d1f9      	bne.n	608e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    609a:	4770      	bx	lr
    609c:	e000e100 	.word	0xe000e100

000060a0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    60a0:	2000      	movs	r0, #0
    msr CONTROL, r0
    60a2:	f380 8814 	msr	CONTROL, r0
    isb
    60a6:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    60aa:	f00c fee1 	bl	12e70 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    60ae:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    60b0:	490d      	ldr	r1, [pc, #52]	; (60e8 <__start+0x48>)
    str r0, [r1]
    60b2:	6008      	str	r0, [r1, #0]
    dsb
    60b4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    60b8:	480c      	ldr	r0, [pc, #48]	; (60ec <__start+0x4c>)
    msr msp, r0
    60ba:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    60be:	f000 f829 	bl	6114 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    60c2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    60c4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    60c8:	4809      	ldr	r0, [pc, #36]	; (60f0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    60ca:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    60ce:	1840      	adds	r0, r0, r1
    msr PSP, r0
    60d0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    60d4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    60d8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    60da:	4308      	orrs	r0, r1
    msr CONTROL, r0
    60dc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    60e0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    60e4:	f7ff fc5e 	bl	59a4 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    60e8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    60ec:	20002940 	.word	0x20002940
    ldr r0, =z_interrupt_stacks
    60f0:	20002ac0 	.word	0x20002ac0

000060f4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    60f4:	4a06      	ldr	r2, [pc, #24]	; (6110 <z_arm_clear_arm_mpu_config+0x1c>)
    60f6:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    60f8:	2300      	movs	r3, #0
	int num_regions =
    60fa:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    60fe:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    6100:	428b      	cmp	r3, r1
    6102:	d100      	bne.n	6106 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    6104:	4770      	bx	lr
  MPU->RNR = rnr;
    6106:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    6108:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    610a:	3301      	adds	r3, #1
    610c:	e7f8      	b.n	6100 <z_arm_clear_arm_mpu_config+0xc>
    610e:	bf00      	nop
    6110:	e000ed90 	.word	0xe000ed90

00006114 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    6114:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    6116:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    6118:	2300      	movs	r3, #0
    611a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    611e:	f7ff ffe9 	bl	60f4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    6122:	4b14      	ldr	r3, [pc, #80]	; (6174 <z_arm_init_arch_hw_at_boot+0x60>)
    6124:	f04f 32ff 	mov.w	r2, #4294967295
    6128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    612c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    6130:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    6134:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    6138:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    613c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    6140:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    6144:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    6148:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    614c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    6150:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    6154:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    6158:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    615c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    6160:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    6164:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    6168:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    616a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    616e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    6172:	bd08      	pop	{r3, pc}
    6174:	e000e100 	.word	0xe000e100

00006178 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    6178:	4b06      	ldr	r3, [pc, #24]	; (6194 <z_impl_k_thread_abort+0x1c>)
    617a:	689b      	ldr	r3, [r3, #8]
    617c:	4283      	cmp	r3, r0
    617e:	d107      	bne.n	6190 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6180:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    6184:	b123      	cbz	r3, 6190 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6186:	4a04      	ldr	r2, [pc, #16]	; (6198 <z_impl_k_thread_abort+0x20>)
    6188:	6853      	ldr	r3, [r2, #4]
    618a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    618e:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    6190:	f007 ba60 	b.w	d654 <z_thread_abort>
    6194:	20000c20 	.word	0x20000c20
    6198:	e000ed00 	.word	0xe000ed00

0000619c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    619c:	4b02      	ldr	r3, [pc, #8]	; (61a8 <z_arm_configure_static_mpu_regions+0xc>)
    619e:	4a03      	ldr	r2, [pc, #12]	; (61ac <z_arm_configure_static_mpu_regions+0x10>)
    61a0:	4803      	ldr	r0, [pc, #12]	; (61b0 <z_arm_configure_static_mpu_regions+0x14>)
    61a2:	2101      	movs	r1, #1
    61a4:	f000 b884 	b.w	62b0 <arm_core_mpu_configure_static_mpu_regions>
    61a8:	20010000 	.word	0x20010000
    61ac:	20000000 	.word	0x20000000
    61b0:	0001330c 	.word	0x0001330c

000061b4 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    61b4:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    61b6:	4b05      	ldr	r3, [pc, #20]	; (61cc <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    61b8:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    61ba:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    61bc:	4a04      	ldr	r2, [pc, #16]	; (61d0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    61be:	2120      	movs	r1, #32
    61c0:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    61c4:	4618      	mov	r0, r3
    61c6:	2101      	movs	r1, #1
    61c8:	f000 b890 	b.w	62ec <arm_core_mpu_configure_dynamic_mpu_regions>
    61cc:	20000a18 	.word	0x20000a18
    61d0:	150b0000 	.word	0x150b0000

000061d4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    61d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    61d6:	4f28      	ldr	r7, [pc, #160]	; (6278 <mpu_configure_regions+0xa4>)
    61d8:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    61da:	2100      	movs	r1, #0
    61dc:	42b1      	cmp	r1, r6
    61de:	da14      	bge.n	620a <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    61e0:	6844      	ldr	r4, [r0, #4]
    61e2:	2c00      	cmp	r4, #0
    61e4:	d045      	beq.n	6272 <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    61e6:	b1c3      	cbz	r3, 621a <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    61e8:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    61ec:	ea14 0f0c 	tst.w	r4, ip
    61f0:	d00d      	beq.n	620e <mpu_configure_regions+0x3a>
    61f2:	4a22      	ldr	r2, [pc, #136]	; (627c <mpu_configure_regions+0xa8>)
    61f4:	4b22      	ldr	r3, [pc, #136]	; (6280 <mpu_configure_regions+0xac>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    61f6:	4823      	ldr	r0, [pc, #140]	; (6284 <mpu_configure_regions+0xb0>)
    61f8:	1ad2      	subs	r2, r2, r3
    61fa:	08d2      	lsrs	r2, r2, #3
    61fc:	0192      	lsls	r2, r2, #6
    61fe:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6202:	f009 f9e0 	bl	f5c6 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    6206:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    620a:	4610      	mov	r0, r2
    620c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    620e:	2c1f      	cmp	r4, #31
    6210:	d9ef      	bls.n	61f2 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    6212:	6805      	ldr	r5, [r0, #0]
		&&
    6214:	ea1c 0f05 	tst.w	ip, r5
    6218:	d1eb      	bne.n	61f2 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    621a:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    621c:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    621e:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
    6222:	6802      	ldr	r2, [r0, #0]
    6224:	d916      	bls.n	6254 <mpu_configure_regions+0x80>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    6226:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    622a:	d815      	bhi.n	6258 <mpu_configure_regions+0x84>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    622c:	3c01      	subs	r4, #1
    622e:	fab4 f484 	clz	r4, r4
    6232:	f1c4 041f 	rsb	r4, r4, #31
    6236:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    6238:	2d07      	cmp	r5, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    623a:	ea4c 0404 	orr.w	r4, ip, r4
    623e:	d90d      	bls.n	625c <mpu_configure_regions+0x88>
    6240:	4a0e      	ldr	r2, [pc, #56]	; (627c <mpu_configure_regions+0xa8>)
    6242:	4b0f      	ldr	r3, [pc, #60]	; (6280 <mpu_configure_regions+0xac>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6244:	4810      	ldr	r0, [pc, #64]	; (6288 <mpu_configure_regions+0xb4>)
    6246:	1ad2      	subs	r2, r2, r3
    6248:	08d2      	lsrs	r2, r2, #3
    624a:	0192      	lsls	r2, r2, #6
    624c:	f042 0201 	orr.w	r2, r2, #1
    6250:	4629      	mov	r1, r5
    6252:	e7d6      	b.n	6202 <mpu_configure_regions+0x2e>
		return REGION_32B;
    6254:	2408      	movs	r4, #8
    6256:	e7ef      	b.n	6238 <mpu_configure_regions+0x64>
		return REGION_4G;
    6258:	243e      	movs	r4, #62	; 0x3e
    625a:	e7ed      	b.n	6238 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    625c:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    6260:	432a      	orrs	r2, r5
    6262:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6266:	f044 0401 	orr.w	r4, r4, #1
    626a:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    626c:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    626e:	613c      	str	r4, [r7, #16]
		reg_index++;
    6270:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    6272:	3101      	adds	r1, #1
    6274:	300c      	adds	r0, #12
    6276:	e7b1      	b.n	61dc <mpu_configure_regions+0x8>
    6278:	e000ed90 	.word	0xe000ed90
    627c:	000130d4 	.word	0x000130d4
    6280:	000130a4 	.word	0x000130a4
    6284:	000141e0 	.word	0x000141e0
    6288:	00014203 	.word	0x00014203

0000628c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    628c:	4b03      	ldr	r3, [pc, #12]	; (629c <arm_core_mpu_enable+0x10>)
    628e:	2205      	movs	r2, #5
    6290:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    6292:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6296:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    629a:	4770      	bx	lr
    629c:	e000ed90 	.word	0xe000ed90

000062a0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    62a0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    62a4:	4b01      	ldr	r3, [pc, #4]	; (62ac <arm_core_mpu_disable+0xc>)
    62a6:	2200      	movs	r2, #0
    62a8:	605a      	str	r2, [r3, #4]
}
    62aa:	4770      	bx	lr
    62ac:	e000ed90 	.word	0xe000ed90

000062b0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    62b0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    62b2:	4c0b      	ldr	r4, [pc, #44]	; (62e0 <arm_core_mpu_configure_static_mpu_regions+0x30>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    62b4:	2301      	movs	r3, #1
    62b6:	7822      	ldrb	r2, [r4, #0]
    62b8:	f7ff ff8c 	bl	61d4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    62bc:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    62be:	3016      	adds	r0, #22
    62c0:	d10c      	bne.n	62dc <arm_core_mpu_configure_static_mpu_regions+0x2c>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    62c2:	4908      	ldr	r1, [pc, #32]	; (62e4 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    62c4:	4808      	ldr	r0, [pc, #32]	; (62e8 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    62c6:	f240 1211 	movw	r2, #273	; 0x111
    62ca:	f009 f87c 	bl	f3c6 <printk>
			regions_num);
	}
}
    62ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    62d2:	4804      	ldr	r0, [pc, #16]	; (62e4 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    62d4:	f240 1111 	movw	r1, #273	; 0x111
    62d8:	f009 b93a 	b.w	f550 <assert_post_action>
}
    62dc:	bd10      	pop	{r4, pc}
    62de:	bf00      	nop
    62e0:	20000f95 	.word	0x20000f95
    62e4:	00014229 	.word	0x00014229
    62e8:	00013904 	.word	0x00013904

000062ec <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    62ec:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    62ee:	4a0f      	ldr	r2, [pc, #60]	; (632c <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    62f0:	2300      	movs	r3, #0
    62f2:	7812      	ldrb	r2, [r2, #0]
    62f4:	f7ff ff6e 	bl	61d4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    62f8:	f110 0f16 	cmn.w	r0, #22
    62fc:	d008      	beq.n	6310 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    62fe:	4b0c      	ldr	r3, [pc, #48]	; (6330 <arm_core_mpu_configure_dynamic_mpu_regions+0x44>)
  MPU->RASR = 0U;
    6300:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    6302:	2807      	cmp	r0, #7
    6304:	dd00      	ble.n	6308 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    6306:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    6308:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    630a:	611a      	str	r2, [r3, #16]
    630c:	3001      	adds	r0, #1
    630e:	e7f8      	b.n	6302 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    6310:	4908      	ldr	r1, [pc, #32]	; (6334 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
    6312:	4809      	ldr	r0, [pc, #36]	; (6338 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    6314:	f44f 7298 	mov.w	r2, #304	; 0x130
    6318:	f009 f855 	bl	f3c6 <printk>
}
    631c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    6320:	4804      	ldr	r0, [pc, #16]	; (6334 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
    6322:	f44f 7198 	mov.w	r1, #304	; 0x130
    6326:	f009 b913 	b.w	f550 <assert_post_action>
    632a:	bf00      	nop
    632c:	20000f95 	.word	0x20000f95
    6330:	e000ed90 	.word	0xe000ed90
    6334:	00014229 	.word	0x00014229
    6338:	00013904 	.word	0x00013904

0000633c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    633c:	4920      	ldr	r1, [pc, #128]	; (63c0 <z_arm_mpu_init+0x84>)
{
    633e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    6340:	680c      	ldr	r4, [r1, #0]
    6342:	2c08      	cmp	r4, #8
    6344:	d90d      	bls.n	6362 <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    6346:	491f      	ldr	r1, [pc, #124]	; (63c4 <z_arm_mpu_init+0x88>)
    6348:	481f      	ldr	r0, [pc, #124]	; (63c8 <z_arm_mpu_init+0x8c>)
    634a:	f44f 72a4 	mov.w	r2, #328	; 0x148
    634e:	f009 f83a 	bl	f3c6 <printk>
    6352:	481c      	ldr	r0, [pc, #112]	; (63c4 <z_arm_mpu_init+0x88>)
    6354:	f44f 71a4 	mov.w	r1, #328	; 0x148
    6358:	f009 f8fa 	bl	f550 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    635c:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    6360:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    6362:	f7ff ff9d 	bl	62a0 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6366:	6848      	ldr	r0, [r1, #4]
    6368:	4918      	ldr	r1, [pc, #96]	; (63cc <z_arm_mpu_init+0x90>)
    636a:	2200      	movs	r2, #0
    636c:	4294      	cmp	r4, r2
    636e:	f100 000c 	add.w	r0, r0, #12
    6372:	d115      	bne.n	63a0 <z_arm_mpu_init+0x64>
	static_regions_num = mpu_config.num_regions;
    6374:	4b16      	ldr	r3, [pc, #88]	; (63d0 <z_arm_mpu_init+0x94>)
    6376:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    6378:	f7ff ff88 	bl	628c <arm_core_mpu_enable>
	__ASSERT(
    637c:	680b      	ldr	r3, [r1, #0]
    637e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    6382:	2b08      	cmp	r3, #8
    6384:	d00a      	beq.n	639c <z_arm_mpu_init+0x60>
    6386:	490f      	ldr	r1, [pc, #60]	; (63c4 <z_arm_mpu_init+0x88>)
    6388:	480f      	ldr	r0, [pc, #60]	; (63c8 <z_arm_mpu_init+0x8c>)
    638a:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
    638e:	f009 f81a 	bl	f3c6 <printk>
    6392:	480c      	ldr	r0, [pc, #48]	; (63c4 <z_arm_mpu_init+0x88>)
    6394:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    6398:	f009 f8da 	bl	f550 <assert_post_action>
	return 0;
    639c:	2000      	movs	r0, #0
    639e:	e7df      	b.n	6360 <z_arm_mpu_init+0x24>
    63a0:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    63a2:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    63a6:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    63aa:	4313      	orrs	r3, r2
    63ac:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    63b0:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    63b2:	f850 3c04 	ldr.w	r3, [r0, #-4]
    63b6:	f043 0301 	orr.w	r3, r3, #1
    63ba:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    63bc:	3201      	adds	r2, #1
    63be:	e7d5      	b.n	636c <z_arm_mpu_init+0x30>
    63c0:	00013318 	.word	0x00013318
    63c4:	00014229 	.word	0x00014229
    63c8:	00013904 	.word	0x00013904
    63cc:	e000ed90 	.word	0xe000ed90
    63d0:	20000f95 	.word	0x20000f95

000063d4 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
    63d4:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    63d6:	4b09      	ldr	r3, [pc, #36]	; (63fc <malloc_prepare+0x28>)
    63d8:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    63dc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    63e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    63e4:	d208      	bcs.n	63f8 <malloc_prepare+0x24>
    63e6:	4906      	ldr	r1, [pc, #24]	; (6400 <malloc_prepare+0x2c>)
    63e8:	4806      	ldr	r0, [pc, #24]	; (6404 <malloc_prepare+0x30>)
    63ea:	2281      	movs	r2, #129	; 0x81
    63ec:	f008 ffeb 	bl	f3c6 <printk>
    63f0:	4803      	ldr	r0, [pc, #12]	; (6400 <malloc_prepare+0x2c>)
    63f2:	2181      	movs	r1, #129	; 0x81
    63f4:	f009 f8ac 	bl	f550 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
    63f8:	2000      	movs	r0, #0
    63fa:	bd08      	pop	{r3, pc}
    63fc:	20003a00 	.word	0x20003a00
    6400:	00014260 	.word	0x00014260
    6404:	00013904 	.word	0x00013904

00006408 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    6408:	4b01      	ldr	r3, [pc, #4]	; (6410 <__stdout_hook_install+0x8>)
    640a:	6018      	str	r0, [r3, #0]
}
    640c:	4770      	bx	lr
    640e:	bf00      	nop
    6410:	2000004c 	.word	0x2000004c

00006414 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    6414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6416:	4f0a      	ldr	r7, [pc, #40]	; (6440 <z_impl_zephyr_write_stdout+0x2c>)
    6418:	460d      	mov	r5, r1
    641a:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    641c:	f1c0 0401 	rsb	r4, r0, #1
    6420:	19a3      	adds	r3, r4, r6
    6422:	429d      	cmp	r5, r3
    6424:	dc01      	bgt.n	642a <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    6426:	4628      	mov	r0, r5
    6428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    642a:	7873      	ldrb	r3, [r6, #1]
    642c:	2b0a      	cmp	r3, #10
    642e:	d102      	bne.n	6436 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    6430:	683b      	ldr	r3, [r7, #0]
    6432:	200d      	movs	r0, #13
    6434:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    6436:	683b      	ldr	r3, [r7, #0]
    6438:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    643c:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    643e:	e7ef      	b.n	6420 <z_impl_zephyr_write_stdout+0xc>
    6440:	2000004c 	.word	0x2000004c

00006444 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    6444:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    6446:	4c07      	ldr	r4, [pc, #28]	; (6464 <_sbrk+0x20>)
    6448:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    644a:	18c2      	adds	r2, r0, r3
    644c:	4806      	ldr	r0, [pc, #24]	; (6468 <_sbrk+0x24>)
    644e:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    6452:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
    6456:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
    6458:	bf3a      	itte	cc
    645a:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
    645c:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    645e:	f04f 30ff 	movcs.w	r0, #4294967295
	}

	return ret;
}
    6462:	bd10      	pop	{r4, pc}
    6464:	20000a24 	.word	0x20000a24
    6468:	20003a00 	.word	0x20003a00

0000646c <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
    646c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
    646e:	4604      	mov	r4, r0
    6470:	b950      	cbnz	r0, 6488 <__retarget_lock_acquire_recursive+0x1c>
    6472:	490a      	ldr	r1, [pc, #40]	; (649c <__retarget_lock_acquire_recursive+0x30>)
    6474:	480a      	ldr	r0, [pc, #40]	; (64a0 <__retarget_lock_acquire_recursive+0x34>)
    6476:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    647a:	f008 ffa4 	bl	f3c6 <printk>
    647e:	4807      	ldr	r0, [pc, #28]	; (649c <__retarget_lock_acquire_recursive+0x30>)
    6480:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    6484:	f009 f864 	bl	f550 <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
    6488:	f04f 32ff 	mov.w	r2, #4294967295
    648c:	4620      	mov	r0, r4
    648e:	f04f 33ff 	mov.w	r3, #4294967295
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
    6492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6496:	f005 bf93 	b.w	c3c0 <z_impl_k_mutex_lock>
    649a:	bf00      	nop
    649c:	00014260 	.word	0x00014260
    64a0:	00013904 	.word	0x00013904

000064a4 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
    64a4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
    64a6:	4604      	mov	r4, r0
    64a8:	b950      	cbnz	r0, 64c0 <__retarget_lock_release_recursive+0x1c>
    64aa:	4908      	ldr	r1, [pc, #32]	; (64cc <__retarget_lock_release_recursive+0x28>)
    64ac:	4808      	ldr	r0, [pc, #32]	; (64d0 <__retarget_lock_release_recursive+0x2c>)
    64ae:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    64b2:	f008 ff88 	bl	f3c6 <printk>
    64b6:	4805      	ldr	r0, [pc, #20]	; (64cc <__retarget_lock_release_recursive+0x28>)
    64b8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    64bc:	f009 f848 	bl	f550 <assert_post_action>
	return z_impl_k_mutex_unlock(mutex);
    64c0:	4620      	mov	r0, r4
	k_mutex_unlock((struct k_mutex *)lock);
}
    64c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    64c6:	f006 b853 	b.w	c570 <z_impl_k_mutex_unlock>
    64ca:	bf00      	nop
    64cc:	00014260 	.word	0x00014260
    64d0:	00013904 	.word	0x00013904

000064d4 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
    64d4:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    64d6:	211d      	movs	r1, #29
    64d8:	4804      	ldr	r0, [pc, #16]	; (64ec <__chk_fail+0x18>)
    64da:	f7ff ff9b 	bl	6414 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
    64de:	4040      	eors	r0, r0
    64e0:	f380 8811 	msr	BASEPRI, r0
    64e4:	f04f 0003 	mov.w	r0, #3
    64e8:	df02      	svc	2
	CODE_UNREACHABLE;
    64ea:	bf00      	nop
    64ec:	00014290 	.word	0x00014290

000064f0 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    64f0:	f04f 0220 	mov.w	r2, #32
    64f4:	f3ef 8311 	mrs	r3, BASEPRI
    64f8:	f382 8812 	msr	BASEPRI_MAX, r2
    64fc:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    6500:	4a04      	ldr	r2, [pc, #16]	; (6514 <nordicsemi_nrf52_init+0x24>)
    6502:	2101      	movs	r1, #1
    6504:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    6508:	f383 8811 	msr	BASEPRI, r3
    650c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    6510:	2000      	movs	r0, #0
    6512:	4770      	bx	lr
    6514:	4001e000 	.word	0x4001e000

00006518 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    6518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    651c:	b2c0      	uxtb	r0, r0
    651e:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    6522:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    6526:	4905      	ldr	r1, [pc, #20]	; (653c <sys_arch_reboot+0x24>)
    6528:	4b05      	ldr	r3, [pc, #20]	; (6540 <sys_arch_reboot+0x28>)
    652a:	68ca      	ldr	r2, [r1, #12]
    652c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6530:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    6532:	60cb      	str	r3, [r1, #12]
    6534:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    6538:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    653a:	e7fd      	b.n	6538 <sys_arch_reboot+0x20>
    653c:	e000ed00 	.word	0xe000ed00
    6540:	05fa0004 	.word	0x05fa0004

00006544 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    6544:	b120      	cbz	r0, 6550 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    6546:	4b03      	ldr	r3, [pc, #12]	; (6554 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    6548:	0180      	lsls	r0, r0, #6
    654a:	f043 0301 	orr.w	r3, r3, #1
    654e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    6550:	4770      	bx	lr
    6552:	bf00      	nop
    6554:	00013150 	.word	0x00013150

00006558 <registry_find>:

	return rv;
}

static struct registry_entry *registry_find(int type)
{
    6558:	4602      	mov	r2, r0
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
		struct registry_entry *ep = &registry[i];

		if ((ep->fstp != NULL) && (ep->type == type)) {
    655a:	4808      	ldr	r0, [pc, #32]	; (657c <registry_find+0x24>)
    655c:	6841      	ldr	r1, [r0, #4]
    655e:	4603      	mov	r3, r0
    6560:	b111      	cbz	r1, 6568 <registry_find+0x10>
    6562:	6801      	ldr	r1, [r0, #0]
    6564:	428a      	cmp	r2, r1
    6566:	d007      	beq.n	6578 <registry_find+0x20>
    6568:	68d8      	ldr	r0, [r3, #12]
    656a:	b128      	cbz	r0, 6578 <registry_find+0x20>
    656c:	6898      	ldr	r0, [r3, #8]
		struct registry_entry *ep = &registry[i];
    656e:	4b04      	ldr	r3, [pc, #16]	; (6580 <registry_find+0x28>)
    6570:	4282      	cmp	r2, r0
    6572:	bf0c      	ite	eq
    6574:	4618      	moveq	r0, r3
    6576:	2000      	movne	r0, #0
			return ep;
		}
	}
	return NULL;
}
    6578:	4770      	bx	lr
    657a:	bf00      	nop
    657c:	20000a44 	.word	0x20000a44
    6580:	20000a4c 	.word	0x20000a4c

00006584 <k_mutex_unlock.constprop.0>:
    6584:	4801      	ldr	r0, [pc, #4]	; (658c <k_mutex_unlock.constprop.0+0x8>)
    6586:	f005 bff3 	b.w	c570 <z_impl_k_mutex_unlock>
    658a:	bf00      	nop
    658c:	20000a30 	.word	0x20000a30

00006590 <k_mutex_lock.constprop.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
    6590:	4602      	mov	r2, r0
    6592:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    6594:	4801      	ldr	r0, [pc, #4]	; (659c <k_mutex_lock.constprop.0+0xc>)
    6596:	f005 bf13 	b.w	c3c0 <z_impl_k_mutex_lock>
    659a:	bf00      	nop
    659c:	20000a30 	.word	0x20000a30

000065a0 <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
    65a0:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
    65a2:	4804      	ldr	r0, [pc, #16]	; (65b4 <fs_init+0x14>)
    65a4:	f00b fe37 	bl	12216 <z_impl_k_mutex_init>
	list->head = (sys_dnode_t *)list;
    65a8:	4b03      	ldr	r3, [pc, #12]	; (65b8 <fs_init+0x18>)
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
    65aa:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
    65ac:	e9c3 3300 	strd	r3, r3, [r3]
    65b0:	bd08      	pop	{r3, pc}
    65b2:	bf00      	nop
    65b4:	20000a30 	.word	0x20000a30
    65b8:	20000a28 	.word	0x20000a28

000065bc <fs_get_mnt_point>:
{
    65bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    65c0:	4682      	mov	sl, r0
	size_t len, name_len = strlen(name);
    65c2:	4608      	mov	r0, r1
{
    65c4:	4688      	mov	r8, r1
    65c6:	4615      	mov	r5, r2
	size_t len, name_len = strlen(name);
    65c8:	f7fa ff3c 	bl	1444 <strlen>
	k_mutex_lock(&mutex, K_FOREVER);
    65cc:	f04f 31ff 	mov.w	r1, #4294967295
	size_t len, name_len = strlen(name);
    65d0:	4683      	mov	fp, r0
	k_mutex_lock(&mutex, K_FOREVER);
    65d2:	f04f 30ff 	mov.w	r0, #4294967295
    65d6:	f7ff ffdb 	bl	6590 <k_mutex_lock.constprop.0>
	return list->head == list;
    65da:	4b1b      	ldr	r3, [pc, #108]	; (6648 <fs_get_mnt_point+0x8c>)
    65dc:	681c      	ldr	r4, [r3, #0]
    65de:	4699      	mov	r9, r3
	return sys_dlist_is_empty(list) ? NULL : list->head;
    65e0:	429c      	cmp	r4, r3
    65e2:	bf08      	it	eq
    65e4:	2400      	moveq	r4, #0
	return (node == list->tail) ? NULL : node->next;
    65e6:	2300      	movs	r3, #0
    65e8:	461f      	mov	r7, r3
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
    65ea:	b95c      	cbnz	r4, 6604 <fs_get_mnt_point+0x48>
	k_mutex_unlock(&mutex);
    65ec:	f7ff ffca 	bl	6584 <k_mutex_unlock.constprop.0>
	if (mnt_p == NULL) {
    65f0:	b32f      	cbz	r7, 663e <fs_get_mnt_point+0x82>
	*mnt_pntp = mnt_p;
    65f2:	f8ca 7000 	str.w	r7, [sl]
	if (match_len)
    65f6:	b32d      	cbz	r5, 6644 <fs_get_mnt_point+0x88>
		*match_len = mnt_p->mountp_len;
    65f8:	69bb      	ldr	r3, [r7, #24]
    65fa:	602b      	str	r3, [r5, #0]
	return 0;
    65fc:	2000      	movs	r0, #0
}
    65fe:	b003      	add	sp, #12
    6600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		len = itr->mountp_len;
    6604:	69a6      	ldr	r6, [r4, #24]
		if ((len < longest_match) || (len > name_len)) {
    6606:	42b3      	cmp	r3, r6
    6608:	d813      	bhi.n	6632 <fs_get_mnt_point+0x76>
    660a:	45b3      	cmp	fp, r6
    660c:	d311      	bcc.n	6632 <fs_get_mnt_point+0x76>
		if ((len > 1) && (name[len] != '/') && (name[len] != '\0')) {
    660e:	2e01      	cmp	r6, #1
    6610:	d904      	bls.n	661c <fs_get_mnt_point+0x60>
    6612:	f818 2006 	ldrb.w	r2, [r8, r6]
    6616:	2a2f      	cmp	r2, #47	; 0x2f
    6618:	d000      	beq.n	661c <fs_get_mnt_point+0x60>
    661a:	b952      	cbnz	r2, 6632 <fs_get_mnt_point+0x76>
		if (strncmp(name, itr->mnt_point, len) == 0) {
    661c:	68e1      	ldr	r1, [r4, #12]
    661e:	9301      	str	r3, [sp, #4]
    6620:	4632      	mov	r2, r6
    6622:	4640      	mov	r0, r8
    6624:	f00b ffb0 	bl	12588 <strncmp>
    6628:	2800      	cmp	r0, #0
    662a:	9b01      	ldr	r3, [sp, #4]
    662c:	bf04      	itt	eq
    662e:	4627      	moveq	r7, r4
    6630:	4633      	moveq	r3, r6
    6632:	f8d9 2004 	ldr.w	r2, [r9, #4]
    6636:	4294      	cmp	r4, r2
    6638:	d0d8      	beq.n	65ec <fs_get_mnt_point+0x30>
    663a:	6824      	ldr	r4, [r4, #0]
    663c:	e7d5      	b.n	65ea <fs_get_mnt_point+0x2e>
		return -ENOENT;
    663e:	f06f 0001 	mvn.w	r0, #1
    6642:	e7dc      	b.n	65fe <fs_get_mnt_point+0x42>
	return 0;
    6644:	4628      	mov	r0, r5
    6646:	e7da      	b.n	65fe <fs_get_mnt_point+0x42>
    6648:	20000a28 	.word	0x20000a28

0000664c <fs_open>:
{
    664c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    664e:	4605      	mov	r5, r0
    6650:	4617      	mov	r7, r2
	if ((file_name == NULL) ||
    6652:	460e      	mov	r6, r1
    6654:	b971      	cbnz	r1, 6674 <fs_open+0x28>
    6656:	4b2b      	ldr	r3, [pc, #172]	; (6704 <fs_open+0xb8>)
    6658:	492b      	ldr	r1, [pc, #172]	; (6708 <fs_open+0xbc>)
		LOG_ERR("invalid file name!!");
    665a:	482c      	ldr	r0, [pc, #176]	; (670c <fs_open+0xc0>)
    665c:	1ac9      	subs	r1, r1, r3
    665e:	08c9      	lsrs	r1, r1, #3
    6660:	0189      	lsls	r1, r1, #6
    6662:	f041 0101 	orr.w	r1, r1, #1
    6666:	f008 ffa1 	bl	f5ac <log_0>
		return -EINVAL;
    666a:	f06f 0415 	mvn.w	r4, #21
}
    666e:	4620      	mov	r0, r4
    6670:	b003      	add	sp, #12
    6672:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(strlen(file_name) <= 1) || (file_name[0] != '/')) {
    6674:	4608      	mov	r0, r1
    6676:	f7fa fee5 	bl	1444 <strlen>
	if ((file_name == NULL) ||
    667a:	2801      	cmp	r0, #1
    667c:	d9eb      	bls.n	6656 <fs_open+0xa>
			(strlen(file_name) <= 1) || (file_name[0] != '/')) {
    667e:	7833      	ldrb	r3, [r6, #0]
    6680:	2b2f      	cmp	r3, #47	; 0x2f
    6682:	d1e8      	bne.n	6656 <fs_open+0xa>
	if (zfp->mp != NULL) {
    6684:	686a      	ldr	r2, [r5, #4]
    6686:	2a00      	cmp	r2, #0
    6688:	d132      	bne.n	66f0 <fs_open+0xa4>
	rc = fs_get_mnt_point(&mp, file_name, NULL);
    668a:	4631      	mov	r1, r6
    668c:	a801      	add	r0, sp, #4
    668e:	f7ff ff95 	bl	65bc <fs_get_mnt_point>
	if (rc < 0) {
    6692:	1e04      	subs	r4, r0, #0
    6694:	da0a      	bge.n	66ac <fs_open+0x60>
    6696:	4b1b      	ldr	r3, [pc, #108]	; (6704 <fs_open+0xb8>)
    6698:	491b      	ldr	r1, [pc, #108]	; (6708 <fs_open+0xbc>)
		LOG_ERR("mount point not found!!");
    669a:	481d      	ldr	r0, [pc, #116]	; (6710 <fs_open+0xc4>)
    669c:	1ac9      	subs	r1, r1, r3
    669e:	08c9      	lsrs	r1, r1, #3
    66a0:	0189      	lsls	r1, r1, #6
    66a2:	f041 0101 	orr.w	r1, r1, #1
    66a6:	f008 ff81 	bl	f5ac <log_0>
		return rc;
    66aa:	e7e0      	b.n	666e <fs_open+0x22>
	if (((mp->flags & FS_MOUNT_FLAG_READ_ONLY) != 0) &&
    66ac:	9b01      	ldr	r3, [sp, #4]
    66ae:	f893 2020 	ldrb.w	r2, [r3, #32]
    66b2:	0792      	lsls	r2, r2, #30
    66b4:	d502      	bpl.n	66bc <fs_open+0x70>
    66b6:	f017 0f12 	tst.w	r7, #18
    66ba:	d11c      	bne.n	66f6 <fs_open+0xaa>
	CHECKIF(mp->fs->open == NULL) {
    66bc:	69da      	ldr	r2, [r3, #28]
    66be:	6814      	ldr	r4, [r2, #0]
    66c0:	b1e4      	cbz	r4, 66fc <fs_open+0xb0>
	zfp->mp = mp;
    66c2:	606b      	str	r3, [r5, #4]
	rc = mp->fs->open(zfp, file_name, flags);
    66c4:	463a      	mov	r2, r7
    66c6:	4631      	mov	r1, r6
    66c8:	4628      	mov	r0, r5
    66ca:	47a0      	blx	r4
	if (rc < 0) {
    66cc:	1e04      	subs	r4, r0, #0
    66ce:	da0d      	bge.n	66ec <fs_open+0xa0>
    66d0:	4b0c      	ldr	r3, [pc, #48]	; (6704 <fs_open+0xb8>)
    66d2:	4a0d      	ldr	r2, [pc, #52]	; (6708 <fs_open+0xbc>)
		LOG_ERR("file open error (%d)", rc);
    66d4:	480f      	ldr	r0, [pc, #60]	; (6714 <fs_open+0xc8>)
    66d6:	1ad2      	subs	r2, r2, r3
    66d8:	08d2      	lsrs	r2, r2, #3
    66da:	0192      	lsls	r2, r2, #6
    66dc:	f042 0201 	orr.w	r2, r2, #1
    66e0:	4621      	mov	r1, r4
    66e2:	f008 ff70 	bl	f5c6 <log_1>
		zfp->mp = NULL;
    66e6:	2300      	movs	r3, #0
    66e8:	606b      	str	r3, [r5, #4]
		return rc;
    66ea:	e7c0      	b.n	666e <fs_open+0x22>
	zfp->flags = flags;
    66ec:	722f      	strb	r7, [r5, #8]
	return rc;
    66ee:	e7be      	b.n	666e <fs_open+0x22>
		return -EBUSY;
    66f0:	f06f 040f 	mvn.w	r4, #15
    66f4:	e7bb      	b.n	666e <fs_open+0x22>
		return -EROFS;
    66f6:	f06f 041d 	mvn.w	r4, #29
    66fa:	e7b8      	b.n	666e <fs_open+0x22>
		return -ENOTSUP;
    66fc:	f06f 0485 	mvn.w	r4, #133	; 0x85
    6700:	e7b5      	b.n	666e <fs_open+0x22>
    6702:	bf00      	nop
    6704:	000130a4 	.word	0x000130a4
    6708:	000130c4 	.word	0x000130c4
    670c:	000142c1 	.word	0x000142c1
    6710:	000142d5 	.word	0x000142d5
    6714:	000142ed 	.word	0x000142ed

00006718 <fs_close>:
{
    6718:	b538      	push	{r3, r4, r5, lr}
	if (zfp->mp == NULL) {
    671a:	6844      	ldr	r4, [r0, #4]
{
    671c:	4605      	mov	r5, r0
	if (zfp->mp == NULL) {
    671e:	b184      	cbz	r4, 6742 <fs_close+0x2a>
	CHECKIF(zfp->mp->fs->close == NULL) {
    6720:	69e3      	ldr	r3, [r4, #28]
    6722:	69db      	ldr	r3, [r3, #28]
    6724:	b193      	cbz	r3, 674c <fs_close+0x34>
	rc = zfp->mp->fs->close(zfp);
    6726:	4798      	blx	r3
	if (rc < 0) {
    6728:	1e04      	subs	r4, r0, #0
    672a:	da0c      	bge.n	6746 <fs_close+0x2e>
    672c:	4a09      	ldr	r2, [pc, #36]	; (6754 <fs_close+0x3c>)
    672e:	4b0a      	ldr	r3, [pc, #40]	; (6758 <fs_close+0x40>)
		LOG_ERR("file close error (%d)", rc);
    6730:	480a      	ldr	r0, [pc, #40]	; (675c <fs_close+0x44>)
    6732:	1ad2      	subs	r2, r2, r3
    6734:	08d2      	lsrs	r2, r2, #3
    6736:	0192      	lsls	r2, r2, #6
    6738:	f042 0201 	orr.w	r2, r2, #1
    673c:	4621      	mov	r1, r4
    673e:	f008 ff42 	bl	f5c6 <log_1>
}
    6742:	4620      	mov	r0, r4
    6744:	bd38      	pop	{r3, r4, r5, pc}
	zfp->mp = NULL;
    6746:	2300      	movs	r3, #0
    6748:	606b      	str	r3, [r5, #4]
	return rc;
    674a:	e7fa      	b.n	6742 <fs_close+0x2a>
		return -ENOTSUP;
    674c:	f06f 0485 	mvn.w	r4, #133	; 0x85
    6750:	e7f7      	b.n	6742 <fs_close+0x2a>
    6752:	bf00      	nop
    6754:	000130c4 	.word	0x000130c4
    6758:	000130a4 	.word	0x000130a4
    675c:	00014302 	.word	0x00014302

00006760 <fs_write>:
	if (zfp->mp == NULL) {
    6760:	6843      	ldr	r3, [r0, #4]
{
    6762:	b510      	push	{r4, lr}
	if (zfp->mp == NULL) {
    6764:	b193      	cbz	r3, 678c <fs_write+0x2c>
	CHECKIF(zfp->mp->fs->write == NULL) {
    6766:	69db      	ldr	r3, [r3, #28]
    6768:	689b      	ldr	r3, [r3, #8]
    676a:	b193      	cbz	r3, 6792 <fs_write+0x32>
	rc = zfp->mp->fs->write(zfp, ptr, size);
    676c:	4798      	blx	r3
	if (rc < 0) {
    676e:	1e04      	subs	r4, r0, #0
    6770:	da0a      	bge.n	6788 <fs_write+0x28>
    6772:	4a09      	ldr	r2, [pc, #36]	; (6798 <fs_write+0x38>)
    6774:	4b09      	ldr	r3, [pc, #36]	; (679c <fs_write+0x3c>)
		LOG_ERR("file write error (%d)", rc);
    6776:	480a      	ldr	r0, [pc, #40]	; (67a0 <fs_write+0x40>)
    6778:	1ad2      	subs	r2, r2, r3
    677a:	08d2      	lsrs	r2, r2, #3
    677c:	0192      	lsls	r2, r2, #6
    677e:	f042 0201 	orr.w	r2, r2, #1
    6782:	4621      	mov	r1, r4
    6784:	f008 ff1f 	bl	f5c6 <log_1>
}
    6788:	4620      	mov	r0, r4
    678a:	bd10      	pop	{r4, pc}
		return -EBADF;
    678c:	f06f 0408 	mvn.w	r4, #8
    6790:	e7fa      	b.n	6788 <fs_write+0x28>
		return -ENOTSUP;
    6792:	f06f 0485 	mvn.w	r4, #133	; 0x85
    6796:	e7f7      	b.n	6788 <fs_write+0x28>
    6798:	000130c4 	.word	0x000130c4
    679c:	000130a4 	.word	0x000130a4
    67a0:	00014318 	.word	0x00014318

000067a4 <fs_seek>:
	if (zfp->mp == NULL) {
    67a4:	6843      	ldr	r3, [r0, #4]
{
    67a6:	b510      	push	{r4, lr}
	if (zfp->mp == NULL) {
    67a8:	b193      	cbz	r3, 67d0 <fs_seek+0x2c>
	CHECKIF(zfp->mp->fs->lseek == NULL) {
    67aa:	69db      	ldr	r3, [r3, #28]
    67ac:	68db      	ldr	r3, [r3, #12]
    67ae:	b193      	cbz	r3, 67d6 <fs_seek+0x32>
	rc = zfp->mp->fs->lseek(zfp, offset, whence);
    67b0:	4798      	blx	r3
	if (rc < 0) {
    67b2:	1e04      	subs	r4, r0, #0
    67b4:	da0a      	bge.n	67cc <fs_seek+0x28>
    67b6:	4a09      	ldr	r2, [pc, #36]	; (67dc <fs_seek+0x38>)
    67b8:	4b09      	ldr	r3, [pc, #36]	; (67e0 <fs_seek+0x3c>)
		LOG_ERR("file seek error (%d)", rc);
    67ba:	480a      	ldr	r0, [pc, #40]	; (67e4 <fs_seek+0x40>)
    67bc:	1ad2      	subs	r2, r2, r3
    67be:	08d2      	lsrs	r2, r2, #3
    67c0:	0192      	lsls	r2, r2, #6
    67c2:	f042 0201 	orr.w	r2, r2, #1
    67c6:	4621      	mov	r1, r4
    67c8:	f008 fefd 	bl	f5c6 <log_1>
}
    67cc:	4620      	mov	r0, r4
    67ce:	bd10      	pop	{r4, pc}
		return -EBADF;
    67d0:	f06f 0408 	mvn.w	r4, #8
    67d4:	e7fa      	b.n	67cc <fs_seek+0x28>
		return -ENOTSUP;
    67d6:	f06f 0485 	mvn.w	r4, #133	; 0x85
    67da:	e7f7      	b.n	67cc <fs_seek+0x28>
    67dc:	000130c4 	.word	0x000130c4
    67e0:	000130a4 	.word	0x000130a4
    67e4:	0001432e 	.word	0x0001432e

000067e8 <fs_opendir>:
{
    67e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    67ea:	4605      	mov	r5, r0
	if ((abs_path == NULL) ||
    67ec:	460f      	mov	r7, r1
    67ee:	b971      	cbnz	r1, 680e <fs_opendir+0x26>
    67f0:	4b31      	ldr	r3, [pc, #196]	; (68b8 <fs_opendir+0xd0>)
    67f2:	4932      	ldr	r1, [pc, #200]	; (68bc <fs_opendir+0xd4>)
		LOG_ERR("invalid directory name!!");
    67f4:	4832      	ldr	r0, [pc, #200]	; (68c0 <fs_opendir+0xd8>)
    67f6:	1ac9      	subs	r1, r1, r3
    67f8:	08c9      	lsrs	r1, r1, #3
    67fa:	0189      	lsls	r1, r1, #6
    67fc:	f041 0101 	orr.w	r1, r1, #1
    6800:	f008 fed4 	bl	f5ac <log_0>
		return -EINVAL;
    6804:	f06f 0415 	mvn.w	r4, #21
}
    6808:	4620      	mov	r0, r4
    680a:	b003      	add	sp, #12
    680c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(strlen(abs_path) < 1) || (abs_path[0] != '/')) {
    680e:	4608      	mov	r0, r1
    6810:	f7fa fe18 	bl	1444 <strlen>
	if ((abs_path == NULL) ||
    6814:	2800      	cmp	r0, #0
    6816:	d0eb      	beq.n	67f0 <fs_opendir+0x8>
			(strlen(abs_path) < 1) || (abs_path[0] != '/')) {
    6818:	783b      	ldrb	r3, [r7, #0]
    681a:	2b2f      	cmp	r3, #47	; 0x2f
    681c:	d1e8      	bne.n	67f0 <fs_opendir+0x8>
	if (zdp->mp != NULL || zdp->dirp != NULL) {
    681e:	686b      	ldr	r3, [r5, #4]
    6820:	2b00      	cmp	r3, #0
    6822:	d142      	bne.n	68aa <fs_opendir+0xc2>
    6824:	682e      	ldr	r6, [r5, #0]
    6826:	2e00      	cmp	r6, #0
    6828:	d13f      	bne.n	68aa <fs_opendir+0xc2>
	if (strcmp(abs_path, "/") == 0) {
    682a:	4926      	ldr	r1, [pc, #152]	; (68c4 <fs_opendir+0xdc>)
    682c:	4638      	mov	r0, r7
    682e:	f7fa fdff 	bl	1430 <strcmp>
    6832:	4604      	mov	r4, r0
    6834:	b978      	cbnz	r0, 6856 <fs_opendir+0x6e>
		k_mutex_lock(&mutex, K_FOREVER);
    6836:	f04f 31ff 	mov.w	r1, #4294967295
    683a:	f04f 30ff 	mov.w	r0, #4294967295
    683e:	f7ff fea7 	bl	6590 <k_mutex_lock.constprop.0>
	return list->head == list;
    6842:	4a21      	ldr	r2, [pc, #132]	; (68c8 <fs_opendir+0xe0>)
		zdp->mp = NULL;
    6844:	606c      	str	r4, [r5, #4]
    6846:	6816      	ldr	r6, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6848:	4296      	cmp	r6, r2
    684a:	bf08      	it	eq
    684c:	4626      	moveq	r6, r4
		zdp->dirp = sys_dlist_peek_head(&fs_mnt_list);
    684e:	602e      	str	r6, [r5, #0]
		k_mutex_unlock(&mutex);
    6850:	f7ff fe98 	bl	6584 <k_mutex_unlock.constprop.0>
		return 0;
    6854:	e7d8      	b.n	6808 <fs_opendir+0x20>
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
    6856:	4632      	mov	r2, r6
    6858:	4639      	mov	r1, r7
    685a:	a801      	add	r0, sp, #4
    685c:	f7ff feae 	bl	65bc <fs_get_mnt_point>
	if (rc < 0) {
    6860:	1e04      	subs	r4, r0, #0
    6862:	da0a      	bge.n	687a <fs_opendir+0x92>
    6864:	4b14      	ldr	r3, [pc, #80]	; (68b8 <fs_opendir+0xd0>)
    6866:	4915      	ldr	r1, [pc, #84]	; (68bc <fs_opendir+0xd4>)
		LOG_ERR("mount point not found!!");
    6868:	4818      	ldr	r0, [pc, #96]	; (68cc <fs_opendir+0xe4>)
    686a:	1ac9      	subs	r1, r1, r3
    686c:	08c9      	lsrs	r1, r1, #3
    686e:	0189      	lsls	r1, r1, #6
    6870:	f041 0101 	orr.w	r1, r1, #1
    6874:	f008 fe9a 	bl	f5ac <log_0>
		return rc;
    6878:	e7c6      	b.n	6808 <fs_opendir+0x20>
	CHECKIF(mp->fs->opendir == NULL) {
    687a:	9a01      	ldr	r2, [sp, #4]
    687c:	69d3      	ldr	r3, [r2, #28]
    687e:	6a1b      	ldr	r3, [r3, #32]
    6880:	b1b3      	cbz	r3, 68b0 <fs_opendir+0xc8>
	zdp->mp = mp;
    6882:	606a      	str	r2, [r5, #4]
	rc = zdp->mp->fs->opendir(zdp, abs_path);
    6884:	4639      	mov	r1, r7
    6886:	4628      	mov	r0, r5
    6888:	4798      	blx	r3
	if (rc < 0) {
    688a:	1e04      	subs	r4, r0, #0
    688c:	dabc      	bge.n	6808 <fs_opendir+0x20>
    688e:	4b0a      	ldr	r3, [pc, #40]	; (68b8 <fs_opendir+0xd0>)
    6890:	4a0a      	ldr	r2, [pc, #40]	; (68bc <fs_opendir+0xd4>)
		LOG_ERR("directory open error (%d)", rc);
    6892:	480f      	ldr	r0, [pc, #60]	; (68d0 <fs_opendir+0xe8>)
    6894:	1ad2      	subs	r2, r2, r3
    6896:	08d2      	lsrs	r2, r2, #3
    6898:	0192      	lsls	r2, r2, #6
		zdp->dirp = NULL;
    689a:	e9c5 6600 	strd	r6, r6, [r5]
		LOG_ERR("directory open error (%d)", rc);
    689e:	f042 0201 	orr.w	r2, r2, #1
    68a2:	4621      	mov	r1, r4
    68a4:	f008 fe8f 	bl	f5c6 <log_1>
    68a8:	e7ae      	b.n	6808 <fs_opendir+0x20>
		return -EBUSY;
    68aa:	f06f 040f 	mvn.w	r4, #15
    68ae:	e7ab      	b.n	6808 <fs_opendir+0x20>
		return -ENOTSUP;
    68b0:	f06f 0485 	mvn.w	r4, #133	; 0x85
    68b4:	e7a8      	b.n	6808 <fs_opendir+0x20>
    68b6:	bf00      	nop
    68b8:	000130a4 	.word	0x000130a4
    68bc:	000130c4 	.word	0x000130c4
    68c0:	00014343 	.word	0x00014343
    68c4:	0001435c 	.word	0x0001435c
    68c8:	20000a28 	.word	0x20000a28
    68cc:	000142d5 	.word	0x000142d5
    68d0:	0001435e 	.word	0x0001435e

000068d4 <fs_readdir>:
{
    68d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (zdp->mp) {
    68d8:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
    68dc:	4606      	mov	r6, r0
    68de:	460d      	mov	r5, r1
	if (zdp->mp) {
    68e0:	f1b8 0f00 	cmp.w	r8, #0
    68e4:	d023      	beq.n	692e <fs_readdir+0x5a>
		CHECKIF(zdp->mp->fs->readdir == NULL) {
    68e6:	f8d8 301c 	ldr.w	r3, [r8, #28]
    68ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    68ec:	2b00      	cmp	r3, #0
    68ee:	d055      	beq.n	699c <fs_readdir+0xc8>
			if ((strcmp(entry->name, ".") != 0)
    68f0:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 69d4 <fs_readdir+0x100>
    68f4:	1c4f      	adds	r7, r1, #1
			rc = zdp->mp->fs->readdir(zdp, entry);
    68f6:	6873      	ldr	r3, [r6, #4]
    68f8:	69db      	ldr	r3, [r3, #28]
    68fa:	4629      	mov	r1, r5
    68fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    68fe:	4630      	mov	r0, r6
    6900:	4798      	blx	r3
			if (rc < 0) {
    6902:	1e04      	subs	r4, r0, #0
    6904:	db50      	blt.n	69a8 <fs_readdir+0xd4>
			if (entry->name[0] == 0) {
    6906:	786b      	ldrb	r3, [r5, #1]
    6908:	b173      	cbz	r3, 6928 <fs_readdir+0x54>
			if (entry->type != FS_DIR_ENTRY_DIR) {
    690a:	782b      	ldrb	r3, [r5, #0]
    690c:	2b01      	cmp	r3, #1
    690e:	d10b      	bne.n	6928 <fs_readdir+0x54>
			if ((strcmp(entry->name, ".") != 0)
    6910:	4641      	mov	r1, r8
    6912:	4638      	mov	r0, r7
    6914:	f7fa fd8c 	bl	1430 <strcmp>
    6918:	2800      	cmp	r0, #0
    691a:	d0ec      	beq.n	68f6 <fs_readdir+0x22>
			    && (strcmp(entry->name, "..") != 0)) {
    691c:	4928      	ldr	r1, [pc, #160]	; (69c0 <fs_readdir+0xec>)
    691e:	4638      	mov	r0, r7
    6920:	f7fa fd86 	bl	1430 <strcmp>
    6924:	2800      	cmp	r0, #0
    6926:	d0e6      	beq.n	68f6 <fs_readdir+0x22>
}
    6928:	4620      	mov	r0, r4
    692a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (zdp->dirp == NULL) {
    692e:	6804      	ldr	r4, [r0, #0]
    6930:	b90c      	cbnz	r4, 6936 <fs_readdir+0x62>
		entry->name[0] = 0;
    6932:	704c      	strb	r4, [r1, #1]
		return 0;
    6934:	e7f8      	b.n	6928 <fs_readdir+0x54>
	k_mutex_lock(&mutex, K_FOREVER);
    6936:	f04f 30ff 	mov.w	r0, #4294967295
    693a:	f04f 31ff 	mov.w	r1, #4294967295
    693e:	f7ff fe27 	bl	6590 <k_mutex_lock.constprop.0>
	return list->head == list;
    6942:	4b20      	ldr	r3, [pc, #128]	; (69c4 <fs_readdir+0xf0>)
    6944:	681f      	ldr	r7, [r3, #0]
    6946:	4699      	mov	r9, r3
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6948:	429f      	cmp	r7, r3
    694a:	bf08      	it	eq
    694c:	2700      	moveq	r7, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    694e:	685b      	ldr	r3, [r3, #4]
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
    6950:	b917      	cbnz	r7, 6958 <fs_readdir+0x84>
	sys_dnode_t *node, *next = NULL;
    6952:	46b8      	mov	r8, r7
	bool found = false;
    6954:	2400      	movs	r4, #0
    6956:	e016      	b.n	6986 <fs_readdir+0xb2>
		if (node == zdp->dirp) {
    6958:	6832      	ldr	r2, [r6, #0]
    695a:	4297      	cmp	r7, r2
    695c:	d11a      	bne.n	6994 <fs_readdir+0xc0>
			entry->type = FS_DIR_ENTRY_DIR;
    695e:	4628      	mov	r0, r5
    6960:	2401      	movs	r4, #1
    6962:	f800 4b01 	strb.w	r4, [r0], #1
			strncpy(entry->name, mnt->mnt_point + 1,
    6966:	68f9      	ldr	r1, [r7, #12]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    6968:	22ff      	movs	r2, #255	; 0xff
    696a:	4421      	add	r1, r4
    696c:	f00b fe1e 	bl	125ac <strncpy>
			entry->name[sizeof(entry->name) - 1] = 0;
    6970:	2300      	movs	r3, #0
    6972:	f885 3100 	strb.w	r3, [r5, #256]	; 0x100
			entry->size = 0;
    6976:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
	return (node == list->tail) ? NULL : node->next;
    697a:	f8d9 3004 	ldr.w	r3, [r9, #4]
    697e:	429f      	cmp	r7, r3
    6980:	d001      	beq.n	6986 <fs_readdir+0xb2>
    6982:	f8d7 8000 	ldr.w	r8, [r7]
	k_mutex_unlock(&mutex);
    6986:	f7ff fdfd 	bl	6584 <k_mutex_unlock.constprop.0>
	if (!found) {
    698a:	b154      	cbz	r4, 69a2 <fs_readdir+0xce>
	zdp->dirp = next;
    698c:	f8c6 8000 	str.w	r8, [r6]
	return 0;
    6990:	2400      	movs	r4, #0
    6992:	e7c9      	b.n	6928 <fs_readdir+0x54>
    6994:	429f      	cmp	r7, r3
    6996:	d0dd      	beq.n	6954 <fs_readdir+0x80>
    6998:	683f      	ldr	r7, [r7, #0]
    699a:	e7d9      	b.n	6950 <fs_readdir+0x7c>
			return  -ENOTSUP;
    699c:	f06f 0485 	mvn.w	r4, #133	; 0x85
    69a0:	e7c2      	b.n	6928 <fs_readdir+0x54>
		return -ENOENT;
    69a2:	f06f 0401 	mvn.w	r4, #1
    69a6:	e7bf      	b.n	6928 <fs_readdir+0x54>
    69a8:	4b07      	ldr	r3, [pc, #28]	; (69c8 <fs_readdir+0xf4>)
    69aa:	4a08      	ldr	r2, [pc, #32]	; (69cc <fs_readdir+0xf8>)
			LOG_ERR("directory read error (%d)", rc);
    69ac:	4808      	ldr	r0, [pc, #32]	; (69d0 <fs_readdir+0xfc>)
    69ae:	1ad2      	subs	r2, r2, r3
    69b0:	08d2      	lsrs	r2, r2, #3
    69b2:	0192      	lsls	r2, r2, #6
    69b4:	f042 0201 	orr.w	r2, r2, #1
    69b8:	4621      	mov	r1, r4
    69ba:	f008 fe04 	bl	f5c6 <log_1>
    69be:	e7b3      	b.n	6928 <fs_readdir+0x54>
    69c0:	00014378 	.word	0x00014378
    69c4:	20000a28 	.word	0x20000a28
    69c8:	000130a4 	.word	0x000130a4
    69cc:	000130c4 	.word	0x000130c4
    69d0:	0001437b 	.word	0x0001437b
    69d4:	00014379 	.word	0x00014379

000069d8 <fs_closedir>:
{
    69d8:	b538      	push	{r3, r4, r5, lr}
	if (zdp->mp == NULL) {
    69da:	6844      	ldr	r4, [r0, #4]
{
    69dc:	4605      	mov	r5, r0
	if (zdp->mp == NULL) {
    69de:	b914      	cbnz	r4, 69e6 <fs_closedir+0xe>
		zdp->dirp = NULL;
    69e0:	6004      	str	r4, [r0, #0]
}
    69e2:	4620      	mov	r0, r4
    69e4:	bd38      	pop	{r3, r4, r5, pc}
	CHECKIF(zdp->mp->fs->closedir == NULL) {
    69e6:	69e3      	ldr	r3, [r4, #28]
    69e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    69ea:	b193      	cbz	r3, 6a12 <fs_closedir+0x3a>
	rc = zdp->mp->fs->closedir(zdp);
    69ec:	4798      	blx	r3
	if (rc < 0) {
    69ee:	1e04      	subs	r4, r0, #0
    69f0:	da0b      	bge.n	6a0a <fs_closedir+0x32>
    69f2:	4b09      	ldr	r3, [pc, #36]	; (6a18 <fs_closedir+0x40>)
    69f4:	4a09      	ldr	r2, [pc, #36]	; (6a1c <fs_closedir+0x44>)
		LOG_ERR("directory close error (%d)", rc);
    69f6:	480a      	ldr	r0, [pc, #40]	; (6a20 <fs_closedir+0x48>)
    69f8:	1ad2      	subs	r2, r2, r3
    69fa:	08d2      	lsrs	r2, r2, #3
    69fc:	0192      	lsls	r2, r2, #6
    69fe:	f042 0201 	orr.w	r2, r2, #1
    6a02:	4621      	mov	r1, r4
    6a04:	f008 fddf 	bl	f5c6 <log_1>
		return rc;
    6a08:	e7eb      	b.n	69e2 <fs_closedir+0xa>
	zdp->mp = NULL;
    6a0a:	2300      	movs	r3, #0
	zdp->dirp = NULL;
    6a0c:	e9c5 3300 	strd	r3, r3, [r5]
	return rc;
    6a10:	e7e7      	b.n	69e2 <fs_closedir+0xa>
		return -ENOTSUP;
    6a12:	f06f 0485 	mvn.w	r4, #133	; 0x85
    6a16:	e7e4      	b.n	69e2 <fs_closedir+0xa>
    6a18:	000130a4 	.word	0x000130a4
    6a1c:	000130c4 	.word	0x000130c4
    6a20:	00014395 	.word	0x00014395

00006a24 <fs_mount>:
{
    6a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((mp == NULL) || (mp->mnt_point == NULL)) {
    6a28:	4604      	mov	r4, r0
    6a2a:	b108      	cbz	r0, 6a30 <fs_mount+0xc>
    6a2c:	68c0      	ldr	r0, [r0, #12]
    6a2e:	b970      	cbnz	r0, 6a4e <fs_mount+0x2a>
    6a30:	494e      	ldr	r1, [pc, #312]	; (6b6c <fs_mount+0x148>)
    6a32:	4b4f      	ldr	r3, [pc, #316]	; (6b70 <fs_mount+0x14c>)
		LOG_ERR("mount point not initialized!!");
    6a34:	484f      	ldr	r0, [pc, #316]	; (6b74 <fs_mount+0x150>)
    6a36:	1ac9      	subs	r1, r1, r3
    6a38:	08c9      	lsrs	r1, r1, #3
    6a3a:	0189      	lsls	r1, r1, #6
    6a3c:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("invalid mount point!!");
    6a40:	f008 fdb4 	bl	f5ac <log_0>
		return -EINVAL;
    6a44:	f06f 0515 	mvn.w	r5, #21
}
    6a48:	4628      	mov	r0, r5
    6a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = strlen(mp->mnt_point);
    6a4e:	f7fa fcf9 	bl	1444 <strlen>
	if ((len <= 1) || (mp->mnt_point[0] != '/')) {
    6a52:	2801      	cmp	r0, #1
	len = strlen(mp->mnt_point);
    6a54:	4607      	mov	r7, r0
	if ((len <= 1) || (mp->mnt_point[0] != '/')) {
    6a56:	d903      	bls.n	6a60 <fs_mount+0x3c>
    6a58:	68e3      	ldr	r3, [r4, #12]
    6a5a:	781b      	ldrb	r3, [r3, #0]
    6a5c:	2b2f      	cmp	r3, #47	; 0x2f
    6a5e:	d008      	beq.n	6a72 <fs_mount+0x4e>
    6a60:	4942      	ldr	r1, [pc, #264]	; (6b6c <fs_mount+0x148>)
    6a62:	4b43      	ldr	r3, [pc, #268]	; (6b70 <fs_mount+0x14c>)
		LOG_ERR("invalid mount point!!");
    6a64:	4844      	ldr	r0, [pc, #272]	; (6b78 <fs_mount+0x154>)
    6a66:	1ac9      	subs	r1, r1, r3
    6a68:	08c9      	lsrs	r1, r1, #3
    6a6a:	0189      	lsls	r1, r1, #6
    6a6c:	f041 0101 	orr.w	r1, r1, #1
    6a70:	e7e6      	b.n	6a40 <fs_mount+0x1c>
	return list->head == list;
    6a72:	4e42      	ldr	r6, [pc, #264]	; (6b7c <fs_mount+0x158>)
	k_mutex_lock(&mutex, K_FOREVER);
    6a74:	f04f 30ff 	mov.w	r0, #4294967295
    6a78:	f04f 31ff 	mov.w	r1, #4294967295
    6a7c:	f7ff fd88 	bl	6590 <k_mutex_lock.constprop.0>
    6a80:	6835      	ldr	r5, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6a82:	42b5      	cmp	r5, r6
    6a84:	d115      	bne.n	6ab2 <fs_mount+0x8e>
	fs = fs_type_get(mp->type);
    6a86:	68a5      	ldr	r5, [r4, #8]
	struct registry_entry *ep = registry_find(type);
    6a88:	4628      	mov	r0, r5
    6a8a:	f7ff fd65 	bl	6558 <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
    6a8e:	bb58      	cbnz	r0, 6ae8 <fs_mount+0xc4>
    6a90:	4b37      	ldr	r3, [pc, #220]	; (6b70 <fs_mount+0x14c>)
    6a92:	4936      	ldr	r1, [pc, #216]	; (6b6c <fs_mount+0x148>)
		LOG_ERR("requested file system type not registered!!");
    6a94:	483a      	ldr	r0, [pc, #232]	; (6b80 <fs_mount+0x15c>)
    6a96:	1ac9      	subs	r1, r1, r3
    6a98:	08c9      	lsrs	r1, r1, #3
    6a9a:	0189      	lsls	r1, r1, #6
    6a9c:	f041 0101 	orr.w	r1, r1, #1
    6aa0:	f008 fd84 	bl	f5ac <log_0>
		rc = -ENOENT;
    6aa4:	f06f 0501 	mvn.w	r5, #1
		goto mount_err;
    6aa8:	e01b      	b.n	6ae2 <fs_mount+0xbe>
	return (node == list->tail) ? NULL : node->next;
    6aaa:	6873      	ldr	r3, [r6, #4]
    6aac:	429d      	cmp	r5, r3
    6aae:	d0ea      	beq.n	6a86 <fs_mount+0x62>
    6ab0:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
    6ab2:	2d00      	cmp	r5, #0
    6ab4:	d0e7      	beq.n	6a86 <fs_mount+0x62>
		if (len != itr->mountp_len) {
    6ab6:	69ab      	ldr	r3, [r5, #24]
    6ab8:	42bb      	cmp	r3, r7
    6aba:	d1f6      	bne.n	6aaa <fs_mount+0x86>
		if (strncmp(mp->mnt_point, itr->mnt_point, len) == 0) {
    6abc:	68e9      	ldr	r1, [r5, #12]
    6abe:	68e0      	ldr	r0, [r4, #12]
    6ac0:	463a      	mov	r2, r7
    6ac2:	f00b fd61 	bl	12588 <strncmp>
    6ac6:	2800      	cmp	r0, #0
    6ac8:	d1ef      	bne.n	6aaa <fs_mount+0x86>
    6aca:	4b29      	ldr	r3, [pc, #164]	; (6b70 <fs_mount+0x14c>)
    6acc:	4927      	ldr	r1, [pc, #156]	; (6b6c <fs_mount+0x148>)
			LOG_ERR("mount point already exists!!");
    6ace:	482d      	ldr	r0, [pc, #180]	; (6b84 <fs_mount+0x160>)
    6ad0:	1ac9      	subs	r1, r1, r3
    6ad2:	08c9      	lsrs	r1, r1, #3
    6ad4:	0189      	lsls	r1, r1, #6
    6ad6:	f041 0101 	orr.w	r1, r1, #1
    6ada:	f008 fd67 	bl	f5ac <log_0>
			rc = -EBUSY;
    6ade:	f06f 050f 	mvn.w	r5, #15
	k_mutex_unlock(&mutex);
    6ae2:	f7ff fd4f 	bl	6584 <k_mutex_unlock.constprop.0>
	return rc;
    6ae6:	e7af      	b.n	6a48 <fs_mount+0x24>
	return (ep != NULL) ? ep->fstp : NULL;
    6ae8:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (fs == NULL) {
    6aec:	f1b8 0f00 	cmp.w	r8, #0
    6af0:	d0ce      	beq.n	6a90 <fs_mount+0x6c>
	CHECKIF(fs->mount == NULL) {
    6af2:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    6af6:	b96b      	cbnz	r3, 6b14 <fs_mount+0xf0>
    6af8:	4b1d      	ldr	r3, [pc, #116]	; (6b70 <fs_mount+0x14c>)
    6afa:	4a1c      	ldr	r2, [pc, #112]	; (6b6c <fs_mount+0x148>)
		LOG_ERR("fs type %d does not support mounting", mp->type);
    6afc:	4822      	ldr	r0, [pc, #136]	; (6b88 <fs_mount+0x164>)
    6afe:	1ad2      	subs	r2, r2, r3
    6b00:	08d2      	lsrs	r2, r2, #3
    6b02:	0192      	lsls	r2, r2, #6
    6b04:	4629      	mov	r1, r5
    6b06:	f042 0201 	orr.w	r2, r2, #1
    6b0a:	f008 fd5c 	bl	f5c6 <log_1>
		rc = -ENOTSUP;
    6b0e:	f06f 0585 	mvn.w	r5, #133	; 0x85
		goto mount_err;
    6b12:	e7e6      	b.n	6ae2 <fs_mount+0xbe>
	if (fs->unmount == NULL) {
    6b14:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
    6b18:	b973      	cbnz	r3, 6b38 <fs_mount+0x114>
    6b1a:	4a15      	ldr	r2, [pc, #84]	; (6b70 <fs_mount+0x14c>)
    6b1c:	4d13      	ldr	r5, [pc, #76]	; (6b6c <fs_mount+0x148>)
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
    6b1e:	68e0      	ldr	r0, [r4, #12]
    6b20:	1aad      	subs	r5, r5, r2
    6b22:	08ed      	lsrs	r5, r5, #3
    6b24:	f7fd ff3c 	bl	49a0 <z_log_strdup>
		LOG_WRN("mount path %s is not unmountable",
    6b28:	01ad      	lsls	r5, r5, #6
    6b2a:	f045 0502 	orr.w	r5, r5, #2
    6b2e:	4601      	mov	r1, r0
    6b30:	462a      	mov	r2, r5
    6b32:	4816      	ldr	r0, [pc, #88]	; (6b8c <fs_mount+0x168>)
    6b34:	f008 fd47 	bl	f5c6 <log_1>
	rc = fs->mount(mp);
    6b38:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    6b3c:	4620      	mov	r0, r4
    6b3e:	4798      	blx	r3
	if (rc < 0) {
    6b40:	1e05      	subs	r5, r0, #0
    6b42:	da0b      	bge.n	6b5c <fs_mount+0x138>
    6b44:	4b0a      	ldr	r3, [pc, #40]	; (6b70 <fs_mount+0x14c>)
    6b46:	4a09      	ldr	r2, [pc, #36]	; (6b6c <fs_mount+0x148>)
		LOG_ERR("fs mount error (%d)", rc);
    6b48:	4811      	ldr	r0, [pc, #68]	; (6b90 <fs_mount+0x16c>)
    6b4a:	1ad2      	subs	r2, r2, r3
    6b4c:	08d2      	lsrs	r2, r2, #3
    6b4e:	0192      	lsls	r2, r2, #6
    6b50:	f042 0201 	orr.w	r2, r2, #1
    6b54:	4629      	mov	r1, r5
    6b56:	f008 fd36 	bl	f5c6 <log_1>
		goto mount_err;
    6b5a:	e7c2      	b.n	6ae2 <fs_mount+0xbe>
	sys_dnode_t *const tail = list->tail;
    6b5c:	6873      	ldr	r3, [r6, #4]
	mp->fs = fs;
    6b5e:	e9c4 7806 	strd	r7, r8, [r4, #24]
	node->prev = tail;
    6b62:	e9c4 6300 	strd	r6, r3, [r4]
	tail->next = node;
    6b66:	601c      	str	r4, [r3, #0]
	list->tail = node;
    6b68:	6074      	str	r4, [r6, #4]
}
    6b6a:	e7ba      	b.n	6ae2 <fs_mount+0xbe>
    6b6c:	000130c4 	.word	0x000130c4
    6b70:	000130a4 	.word	0x000130a4
    6b74:	000143b0 	.word	0x000143b0
    6b78:	000143ce 	.word	0x000143ce
    6b7c:	20000a28 	.word	0x20000a28
    6b80:	00014401 	.word	0x00014401
    6b84:	000143e4 	.word	0x000143e4
    6b88:	0001442d 	.word	0x0001442d
    6b8c:	00014452 	.word	0x00014452
    6b90:	00014473 	.word	0x00014473

00006b94 <fs_register>:
{
    6b94:	b538      	push	{r3, r4, r5, lr}
    6b96:	4604      	mov	r4, r0
    6b98:	460d      	mov	r5, r1
	k_mutex_lock(&mutex, K_FOREVER);
    6b9a:	f04f 30ff 	mov.w	r0, #4294967295
    6b9e:	f04f 31ff 	mov.w	r1, #4294967295
    6ba2:	f7ff fcf5 	bl	6590 <k_mutex_lock.constprop.0>
	struct registry_entry *ep = registry_find(type);
    6ba6:	4620      	mov	r0, r4
    6ba8:	f7ff fcd6 	bl	6558 <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
    6bac:	b108      	cbz	r0, 6bb2 <fs_register+0x1e>
	if (fs_type_get(type) != NULL) {
    6bae:	6843      	ldr	r3, [r0, #4]
    6bb0:	b97b      	cbnz	r3, 6bd2 <fs_register+0x3e>
		if (ep->fstp == NULL) {
    6bb2:	4b0b      	ldr	r3, [pc, #44]	; (6be0 <fs_register+0x4c>)
    6bb4:	685a      	ldr	r2, [r3, #4]
    6bb6:	b112      	cbz	r2, 6bbe <fs_register+0x2a>
    6bb8:	68da      	ldr	r2, [r3, #12]
    6bba:	b96a      	cbnz	r2, 6bd8 <fs_register+0x44>
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
    6bbc:	2201      	movs	r2, #1
			ep->type = type;
    6bbe:	f843 4032 	str.w	r4, [r3, r2, lsl #3]
			ep->fstp = fstp;
    6bc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
			rv = 0;
    6bc6:	2400      	movs	r4, #0
			ep->fstp = fstp;
    6bc8:	605d      	str	r5, [r3, #4]
	k_mutex_unlock(&mutex);
    6bca:	f7ff fcdb 	bl	6584 <k_mutex_unlock.constprop.0>
}
    6bce:	4620      	mov	r0, r4
    6bd0:	bd38      	pop	{r3, r4, r5, pc}
		rc = -EALREADY;
    6bd2:	f06f 0477 	mvn.w	r4, #119	; 0x77
    6bd6:	e7f8      	b.n	6bca <fs_register+0x36>
	int rv = -ENOSPC;
    6bd8:	f06f 041b 	mvn.w	r4, #27
    6bdc:	e7f5      	b.n	6bca <fs_register+0x36>
    6bde:	bf00      	nop
    6be0:	20000a44 	.word	0x20000a44

00006be4 <fatfs_init>:

static int fatfs_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	return fs_register(FS_FATFS, &fatfs_fs);
    6be4:	4901      	ldr	r1, [pc, #4]	; (6bec <fatfs_init+0x8>)
    6be6:	2000      	movs	r0, #0
    6be8:	f7ff bfd4 	b.w	6b94 <fs_register>
    6bec:	00013338 	.word	0x00013338

00006bf0 <fatfs_mkdir>:
{
    6bf0:	b508      	push	{r3, lr}
	res = f_mkdir(&path[1]);
    6bf2:	1c48      	adds	r0, r1, #1
    6bf4:	f00b f807 	bl	11c06 <f_mkdir>
	switch (error) {
    6bf8:	2813      	cmp	r0, #19
    6bfa:	bf96      	itet	ls
    6bfc:	4b02      	ldrls	r3, [pc, #8]	; (6c08 <fatfs_mkdir+0x18>)
	res = f_mkdir(&path[1]);
    6bfe:	f06f 0004 	mvnhi.w	r0, #4
	return res;
    6c02:	5618      	ldrsbls	r0, [r3, r0]
}
    6c04:	bd08      	pop	{r3, pc}
    6c06:	bf00      	nop
    6c08:	0001448a 	.word	0x0001448a

00006c0c <fatfs_unlink>:
{
    6c0c:	b508      	push	{r3, lr}
	res = f_unlink(&path[1]);
    6c0e:	1c48      	adds	r0, r1, #1
    6c10:	f00a ff9b 	bl	11b4a <f_unlink>
	switch (error) {
    6c14:	2813      	cmp	r0, #19
    6c16:	bf96      	itet	ls
    6c18:	4b02      	ldrls	r3, [pc, #8]	; (6c24 <fatfs_unlink+0x18>)
	res = f_unlink(&path[1]);
    6c1a:	f06f 0004 	mvnhi.w	r0, #4
	return res;
    6c1e:	5618      	ldrsbls	r0, [r3, r0]
}
    6c20:	bd08      	pop	{r3, pc}
    6c22:	bf00      	nop
    6c24:	0001448a 	.word	0x0001448a

00006c28 <fatfs_rename>:
{
    6c28:	b530      	push	{r4, r5, lr}
	res = f_stat(&to[1], &fno);
    6c2a:	1c54      	adds	r4, r2, #1
{
    6c2c:	b0c9      	sub	sp, #292	; 0x124
    6c2e:	460d      	mov	r5, r1
	res = f_stat(&to[1], &fno);
    6c30:	4620      	mov	r0, r4
    6c32:	4669      	mov	r1, sp
    6c34:	f00a fe97 	bl	11966 <f_stat>
	if (FR_OK == res) {
    6c38:	b948      	cbnz	r0, 6c4e <fatfs_rename+0x26>
		res = f_unlink(&to[1]);
    6c3a:	4620      	mov	r0, r4
    6c3c:	f00a ff85 	bl	11b4a <f_unlink>
		if (FR_OK != res)
    6c40:	b128      	cbz	r0, 6c4e <fatfs_rename+0x26>
	switch (error) {
    6c42:	2813      	cmp	r0, #19
    6c44:	d908      	bls.n	6c58 <fatfs_rename+0x30>
{
    6c46:	f06f 0004 	mvn.w	r0, #4
}
    6c4a:	b049      	add	sp, #292	; 0x124
    6c4c:	bd30      	pop	{r4, r5, pc}
	res = f_rename(&from[1], &to[1]);
    6c4e:	4621      	mov	r1, r4
    6c50:	1c68      	adds	r0, r5, #1
    6c52:	f00b f895 	bl	11d80 <f_rename>
	switch (error) {
    6c56:	e7f4      	b.n	6c42 <fatfs_rename+0x1a>
    6c58:	4b01      	ldr	r3, [pc, #4]	; (6c60 <fatfs_rename+0x38>)
    6c5a:	5618      	ldrsb	r0, [r3, r0]
    6c5c:	e7f5      	b.n	6c4a <fatfs_rename+0x22>
    6c5e:	bf00      	nop
    6c60:	0001448a 	.word	0x0001448a

00006c64 <fatfs_unmount>:
	res = f_mount(NULL, &mountp->mnt_point[1], 0);
    6c64:	68c1      	ldr	r1, [r0, #12]
    6c66:	2200      	movs	r2, #0
{
    6c68:	b508      	push	{r3, lr}
	res = f_mount(NULL, &mountp->mnt_point[1], 0);
    6c6a:	3101      	adds	r1, #1
    6c6c:	4610      	mov	r0, r2
    6c6e:	f002 fed3 	bl	9a18 <f_mount>
	switch (error) {
    6c72:	2813      	cmp	r0, #19
    6c74:	bf96      	itet	ls
    6c76:	4b02      	ldrls	r3, [pc, #8]	; (6c80 <fatfs_unmount+0x1c>)
	res = f_mount(NULL, &mountp->mnt_point[1], 0);
    6c78:	f06f 0004 	mvnhi.w	r0, #4
    6c7c:	5618      	ldrsbls	r0, [r3, r0]
}
    6c7e:	bd08      	pop	{r3, pc}
    6c80:	0001448a 	.word	0x0001448a

00006c84 <fatfs_mount>:
{
    6c84:	b530      	push	{r4, r5, lr}
	res = f_mount((FATFS *)mountp->fs_data, &mountp->mnt_point[1], 1);
    6c86:	68c1      	ldr	r1, [r0, #12]
    6c88:	2201      	movs	r2, #1
{
    6c8a:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    6c8e:	4604      	mov	r4, r0
	res = f_mount((FATFS *)mountp->fs_data, &mountp->mnt_point[1], 1);
    6c90:	4411      	add	r1, r2
    6c92:	6900      	ldr	r0, [r0, #16]
    6c94:	f002 fec0 	bl	9a18 <f_mount>
	if (res == FR_NO_FILESYSTEM &&
    6c98:	280d      	cmp	r0, #13
    6c9a:	d119      	bne.n	6cd0 <fatfs_mount+0x4c>
	    (mountp->flags & FS_MOUNT_FLAG_READ_ONLY) != 0) {
    6c9c:	f894 3020 	ldrb.w	r3, [r4, #32]
	if (res == FR_NO_FILESYSTEM &&
    6ca0:	079a      	lsls	r2, r3, #30
    6ca2:	d426      	bmi.n	6cf2 <fatfs_mount+0x6e>
	if (res == FR_NO_FILESYSTEM &&
    6ca4:	07db      	lsls	r3, r3, #31
    6ca6:	d41a      	bmi.n	6cde <fatfs_mount+0x5a>
		MKFS_PARM mkfs_opt = {
    6ca8:	4b13      	ldr	r3, [pc, #76]	; (6cf8 <fatfs_mount+0x74>)
    6caa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6cac:	466d      	mov	r5, sp
    6cae:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		res = f_mkfs(&mountp->mnt_point[1], &mkfs_opt, work, sizeof(work));
    6cb2:	68e0      	ldr	r0, [r4, #12]
    6cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
    6cb8:	aa04      	add	r2, sp, #16
    6cba:	4629      	mov	r1, r5
    6cbc:	3001      	adds	r0, #1
    6cbe:	f002 fecf 	bl	9a60 <f_mkfs>
		if (res == FR_OK) {
    6cc2:	b988      	cbnz	r0, 6ce8 <fatfs_mount+0x64>
					&mountp->mnt_point[1], 1);
    6cc4:	68e1      	ldr	r1, [r4, #12]
			res = f_mount((FATFS *)mountp->fs_data,
    6cc6:	6920      	ldr	r0, [r4, #16]
    6cc8:	2201      	movs	r2, #1
    6cca:	4411      	add	r1, r2
    6ccc:	f002 fea4 	bl	9a18 <f_mount>
	if (res == FR_OK) {
    6cd0:	b950      	cbnz	r0, 6ce8 <fatfs_mount+0x64>
		mountp->flags |= FS_MOUNT_FLAG_USE_DISK_ACCESS;
    6cd2:	f894 3020 	ldrb.w	r3, [r4, #32]
    6cd6:	f043 0308 	orr.w	r3, r3, #8
    6cda:	f884 3020 	strb.w	r3, [r4, #32]
    6cde:	4b07      	ldr	r3, [pc, #28]	; (6cfc <fatfs_mount+0x78>)
    6ce0:	5618      	ldrsb	r0, [r3, r0]
}
    6ce2:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    6ce6:	bd30      	pop	{r4, r5, pc}
	switch (error) {
    6ce8:	2813      	cmp	r0, #19
    6cea:	d9f8      	bls.n	6cde <fatfs_mount+0x5a>
		return -EROFS;
    6cec:	f06f 0004 	mvn.w	r0, #4
    6cf0:	e7f7      	b.n	6ce2 <fatfs_mount+0x5e>
    6cf2:	f06f 001d 	mvn.w	r0, #29
    6cf6:	e7f4      	b.n	6ce2 <fatfs_mount+0x5e>
    6cf8:	00013140 	.word	0x00013140
    6cfc:	0001448a 	.word	0x0001448a

00006d00 <fatfs_closedir>:
{
    6d00:	b538      	push	{r3, r4, r5, lr}
    6d02:	4605      	mov	r5, r0
	res = f_closedir(zdp->dirp);
    6d04:	6800      	ldr	r0, [r0, #0]
    6d06:	f00a fe05 	bl	11914 <f_closedir>
	k_mem_slab_free(&fatfs_dirp_pool, &zdp->dirp);
    6d0a:	4629      	mov	r1, r5
	res = f_closedir(zdp->dirp);
    6d0c:	4604      	mov	r4, r0
	k_mem_slab_free(&fatfs_dirp_pool, &zdp->dirp);
    6d0e:	4805      	ldr	r0, [pc, #20]	; (6d24 <fatfs_closedir+0x24>)
    6d10:	f005 f998 	bl	c044 <k_mem_slab_free>
	switch (error) {
    6d14:	2c13      	cmp	r4, #19
    6d16:	bf96      	itet	ls
    6d18:	4b03      	ldrls	r3, [pc, #12]	; (6d28 <fatfs_closedir+0x28>)
	k_mem_slab_free(&fatfs_dirp_pool, &zdp->dirp);
    6d1a:	f06f 0004 	mvnhi.w	r0, #4
    6d1e:	5718      	ldrsbls	r0, [r3, r4]
}
    6d20:	bd38      	pop	{r3, r4, r5, pc}
    6d22:	bf00      	nop
    6d24:	20000374 	.word	0x20000374
    6d28:	0001448a 	.word	0x0001448a

00006d2c <fatfs_close>:
{
    6d2c:	b538      	push	{r3, r4, r5, lr}
    6d2e:	4604      	mov	r4, r0
	res = f_close(zfp->filep);
    6d30:	6800      	ldr	r0, [r0, #0]
    6d32:	f00a fca9 	bl	11688 <f_close>
	k_mem_slab_free(&fatfs_filep_pool, &zfp->filep);
    6d36:	4621      	mov	r1, r4
	res = f_close(zfp->filep);
    6d38:	4605      	mov	r5, r0
	k_mem_slab_free(&fatfs_filep_pool, &zfp->filep);
    6d3a:	4806      	ldr	r0, [pc, #24]	; (6d54 <fatfs_close+0x28>)
    6d3c:	f005 f982 	bl	c044 <k_mem_slab_free>
	zfp->filep = NULL;
    6d40:	2300      	movs	r3, #0
    6d42:	2d13      	cmp	r5, #19
    6d44:	6023      	str	r3, [r4, #0]
	switch (error) {
    6d46:	bf96      	itet	ls
    6d48:	4b03      	ldrls	r3, [pc, #12]	; (6d58 <fatfs_close+0x2c>)
	zfp->filep = NULL;
    6d4a:	f06f 0004 	mvnhi.w	r0, #4
    6d4e:	5758      	ldrsbls	r0, [r3, r5]
}
    6d50:	bd38      	pop	{r3, r4, r5, pc}
    6d52:	bf00      	nop
    6d54:	20000394 	.word	0x20000394
    6d58:	0001448a 	.word	0x0001448a

00006d5c <fatfs_sync>:
{
    6d5c:	b508      	push	{r3, lr}
	res = f_sync(zfp->filep);
    6d5e:	6800      	ldr	r0, [r0, #0]
    6d60:	f00a fbf6 	bl	11550 <f_sync>
	switch (error) {
    6d64:	2813      	cmp	r0, #19
    6d66:	bf96      	itet	ls
    6d68:	4b02      	ldrls	r3, [pc, #8]	; (6d74 <fatfs_sync+0x18>)
	res = f_sync(zfp->filep);
    6d6a:	f06f 0004 	mvnhi.w	r0, #4
	return res;
    6d6e:	5618      	ldrsbls	r0, [r3, r0]
}
    6d70:	bd08      	pop	{r3, pc}
    6d72:	bf00      	nop
    6d74:	0001448a 	.word	0x0001448a

00006d78 <fatfs_seek>:
	switch (whence) {
    6d78:	2a01      	cmp	r2, #1
{
    6d7a:	b538      	push	{r3, r4, r5, lr}
	switch (whence) {
    6d7c:	d005      	beq.n	6d8a <fatfs_seek+0x12>
    6d7e:	2a02      	cmp	r2, #2
    6d80:	d018      	beq.n	6db4 <fatfs_seek+0x3c>
    6d82:	b12a      	cbz	r2, 6d90 <fatfs_seek+0x18>
		return -EINVAL;
    6d84:	f06f 0015 	mvn.w	r0, #21
    6d88:	e013      	b.n	6db2 <fatfs_seek+0x3a>
		pos = f_tell((FIL *)zfp->filep) + offset;
    6d8a:	6803      	ldr	r3, [r0, #0]
    6d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		pos = f_size((FIL *)zfp->filep) + offset;
    6d8e:	4419      	add	r1, r3
	if ((pos < 0) || (pos > f_size((FIL *)zfp->filep))) {
    6d90:	2900      	cmp	r1, #0
    6d92:	dbf7      	blt.n	6d84 <fatfs_seek+0xc>
    6d94:	6800      	ldr	r0, [r0, #0]
    6d96:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    6d9a:	17cb      	asrs	r3, r1, #31
    6d9c:	429d      	cmp	r5, r3
    6d9e:	bf08      	it	eq
    6da0:	428c      	cmpeq	r4, r1
    6da2:	460a      	mov	r2, r1
    6da4:	d3ee      	bcc.n	6d84 <fatfs_seek+0xc>
	res = f_lseek(zfp->filep, pos);
    6da6:	f00a fc7c 	bl	116a2 <f_lseek>
	switch (error) {
    6daa:	2813      	cmp	r0, #19
    6dac:	d805      	bhi.n	6dba <fatfs_seek+0x42>
    6dae:	4b04      	ldr	r3, [pc, #16]	; (6dc0 <fatfs_seek+0x48>)
    6db0:	5618      	ldrsb	r0, [r3, r0]
}
    6db2:	bd38      	pop	{r3, r4, r5, pc}
		pos = f_size((FIL *)zfp->filep) + offset;
    6db4:	6803      	ldr	r3, [r0, #0]
    6db6:	691b      	ldr	r3, [r3, #16]
    6db8:	e7e9      	b.n	6d8e <fatfs_seek+0x16>
	res = f_lseek(zfp->filep, pos);
    6dba:	f06f 0004 	mvn.w	r0, #4
    6dbe:	e7f8      	b.n	6db2 <fatfs_seek+0x3a>
    6dc0:	0001448a 	.word	0x0001448a

00006dc4 <fatfs_truncate>:
{
    6dc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6dc6:	4604      	mov	r4, r0
	off_t cur_length = f_size((FIL *)zfp->filep);
    6dc8:	6800      	ldr	r0, [r0, #0]
	res = f_lseek(zfp->filep, length);
    6dca:	460a      	mov	r2, r1
    6dcc:	17cb      	asrs	r3, r1, #31
	off_t cur_length = f_size((FIL *)zfp->filep);
    6dce:	6907      	ldr	r7, [r0, #16]
{
    6dd0:	460d      	mov	r5, r1
	res = f_lseek(zfp->filep, length);
    6dd2:	f00a fc66 	bl	116a2 <f_lseek>
	if (res != FR_OK) {
    6dd6:	b120      	cbz	r0, 6de2 <fatfs_truncate+0x1e>
	switch (error) {
    6dd8:	2813      	cmp	r0, #19
    6dda:	d80a      	bhi.n	6df2 <fatfs_truncate+0x2e>
    6ddc:	4b13      	ldr	r3, [pc, #76]	; (6e2c <fatfs_truncate+0x68>)
    6dde:	5618      	ldrsb	r0, [r3, r0]
    6de0:	e009      	b.n	6df6 <fatfs_truncate+0x32>
	if (length < cur_length) {
    6de2:	42af      	cmp	r7, r5
    6de4:	6820      	ldr	r0, [r4, #0]
	off_t cur_length = f_size((FIL *)zfp->filep);
    6de6:	463e      	mov	r6, r7
	if (length < cur_length) {
    6de8:	dd07      	ble.n	6dfa <fatfs_truncate+0x36>
		res = f_truncate(zfp->filep);
    6dea:	f00a fe64 	bl	11ab6 <f_truncate>
	switch (error) {
    6dee:	2813      	cmp	r0, #19
    6df0:	ddf4      	ble.n	6ddc <fatfs_truncate+0x18>
		if (res != FR_OK) {
    6df2:	f06f 0004 	mvn.w	r0, #4
}
    6df6:	b003      	add	sp, #12
    6df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		res = f_lseek(zfp->filep, cur_length);
    6dfa:	463a      	mov	r2, r7
    6dfc:	17fb      	asrs	r3, r7, #31
		length = f_tell((FIL *)zfp->filep);
    6dfe:	6b85      	ldr	r5, [r0, #56]	; 0x38
		res = f_lseek(zfp->filep, cur_length);
    6e00:	f00a fc4f 	bl	116a2 <f_lseek>
		if (res != FR_OK) {
    6e04:	2800      	cmp	r0, #0
    6e06:	d1e7      	bne.n	6dd8 <fatfs_truncate+0x14>
		uint8_t c = 0U;
    6e08:	f88d 0003 	strb.w	r0, [sp, #3]
		for (int i = cur_length; i < length; i++) {
    6e0c:	42ae      	cmp	r6, r5
    6e0e:	db01      	blt.n	6e14 <fatfs_truncate+0x50>
    6e10:	2000      	movs	r0, #0
    6e12:	e7e3      	b.n	6ddc <fatfs_truncate+0x18>
			res = f_write(zfp->filep, &c, 1, &bw);
    6e14:	6820      	ldr	r0, [r4, #0]
    6e16:	ab01      	add	r3, sp, #4
    6e18:	2201      	movs	r2, #1
    6e1a:	f10d 0103 	add.w	r1, sp, #3
    6e1e:	f00a fab3 	bl	11388 <f_write>
			if (res != FR_OK) {
    6e22:	2800      	cmp	r0, #0
    6e24:	d1e3      	bne.n	6dee <fatfs_truncate+0x2a>
		for (int i = cur_length; i < length; i++) {
    6e26:	3601      	adds	r6, #1
    6e28:	e7f0      	b.n	6e0c <fatfs_truncate+0x48>
    6e2a:	bf00      	nop
    6e2c:	0001448a 	.word	0x0001448a

00006e30 <fatfs_write>:
{
    6e30:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (zfp->flags & FS_O_APPEND) {
    6e32:	7a03      	ldrb	r3, [r0, #8]
    6e34:	069b      	lsls	r3, r3, #26
{
    6e36:	4604      	mov	r4, r0
    6e38:	460d      	mov	r5, r1
    6e3a:	4616      	mov	r6, r2
	if (zfp->flags & FS_O_APPEND) {
    6e3c:	d40c      	bmi.n	6e58 <fatfs_write+0x28>
		res = f_write(zfp->filep, ptr, size, &bw);
    6e3e:	6820      	ldr	r0, [r4, #0]
    6e40:	ab01      	add	r3, sp, #4
    6e42:	4632      	mov	r2, r6
    6e44:	4629      	mov	r1, r5
    6e46:	f00a fa9f 	bl	11388 <f_write>
	if (res != FR_OK) {
    6e4a:	b168      	cbz	r0, 6e68 <fatfs_write+0x38>
	switch (error) {
    6e4c:	2813      	cmp	r0, #19
    6e4e:	dc0d      	bgt.n	6e6c <fatfs_write+0x3c>
    6e50:	4b08      	ldr	r3, [pc, #32]	; (6e74 <fatfs_write+0x44>)
    6e52:	5618      	ldrsb	r0, [r3, r0]
}
    6e54:	b002      	add	sp, #8
    6e56:	bd70      	pop	{r4, r5, r6, pc}
	off_t pos = f_size((FIL *)zfp->filep);
    6e58:	6800      	ldr	r0, [r0, #0]
		res = f_lseek(zfp->filep, pos);
    6e5a:	6902      	ldr	r2, [r0, #16]
    6e5c:	17d3      	asrs	r3, r2, #31
    6e5e:	f00a fc20 	bl	116a2 <f_lseek>
	if (res == FR_OK) {
    6e62:	2800      	cmp	r0, #0
    6e64:	d0eb      	beq.n	6e3e <fatfs_write+0xe>
    6e66:	e7f1      	b.n	6e4c <fatfs_write+0x1c>
		res = bw;
    6e68:	9801      	ldr	r0, [sp, #4]
    6e6a:	e7f3      	b.n	6e54 <fatfs_write+0x24>
{
    6e6c:	f06f 0004 	mvn.w	r0, #4
	return res;
    6e70:	e7f0      	b.n	6e54 <fatfs_write+0x24>
    6e72:	bf00      	nop
    6e74:	0001448a 	.word	0x0001448a

00006e78 <fatfs_read>:
{
    6e78:	b507      	push	{r0, r1, r2, lr}
	res = f_read(zfp->filep, ptr, size, &br);
    6e7a:	6800      	ldr	r0, [r0, #0]
    6e7c:	ab01      	add	r3, sp, #4
    6e7e:	f00a f9d1 	bl	11224 <f_read>
	if (res != FR_OK) {
    6e82:	b130      	cbz	r0, 6e92 <fatfs_read+0x1a>
	switch (error) {
    6e84:	2813      	cmp	r0, #19
    6e86:	d806      	bhi.n	6e96 <fatfs_read+0x1e>
    6e88:	4b04      	ldr	r3, [pc, #16]	; (6e9c <fatfs_read+0x24>)
    6e8a:	5618      	ldrsb	r0, [r3, r0]
}
    6e8c:	b003      	add	sp, #12
    6e8e:	f85d fb04 	ldr.w	pc, [sp], #4
	return br;
    6e92:	9801      	ldr	r0, [sp, #4]
    6e94:	e7fa      	b.n	6e8c <fatfs_read+0x14>
	if (res != FR_OK) {
    6e96:	f06f 0004 	mvn.w	r0, #4
    6e9a:	e7f7      	b.n	6e8c <fatfs_read+0x14>
    6e9c:	0001448a 	.word	0x0001448a

00006ea0 <fatfs_stat>:
{
    6ea0:	b530      	push	{r4, r5, lr}
    6ea2:	4608      	mov	r0, r1
    6ea4:	b0c9      	sub	sp, #292	; 0x124
	res = f_stat(&path[1], &fno);
    6ea6:	4669      	mov	r1, sp
    6ea8:	3001      	adds	r0, #1
{
    6eaa:	4615      	mov	r5, r2
	res = f_stat(&path[1], &fno);
    6eac:	f00a fd5b 	bl	11966 <f_stat>
	if (res == FR_OK) {
    6eb0:	4604      	mov	r4, r0
    6eb2:	b988      	cbnz	r0, 6ed8 <fatfs_stat+0x38>
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
    6eb4:	f89d 300c 	ldrb.w	r3, [sp, #12]
		entry->type = ((fno.fattrib & AM_DIR) ?
    6eb8:	4628      	mov	r0, r5
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
    6eba:	f3c3 1300 	ubfx	r3, r3, #4, #1
		entry->type = ((fno.fattrib & AM_DIR) ?
    6ebe:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    6ec2:	f10d 011a 	add.w	r1, sp, #26
    6ec6:	f00b fb57 	bl	12578 <strcpy>
		entry->size = fno.fsize;
    6eca:	9b00      	ldr	r3, [sp, #0]
    6ecc:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
    6ed0:	4b04      	ldr	r3, [pc, #16]	; (6ee4 <fatfs_stat+0x44>)
    6ed2:	5718      	ldrsb	r0, [r3, r4]
}
    6ed4:	b049      	add	sp, #292	; 0x124
    6ed6:	bd30      	pop	{r4, r5, pc}
	switch (error) {
    6ed8:	2813      	cmp	r0, #19
    6eda:	d9f9      	bls.n	6ed0 <fatfs_stat+0x30>
{
    6edc:	f06f 0004 	mvn.w	r0, #4
	return translate_error(res);
    6ee0:	e7f8      	b.n	6ed4 <fatfs_stat+0x34>
    6ee2:	bf00      	nop
    6ee4:	0001448a 	.word	0x0001448a

00006ee8 <fatfs_readdir>:
{
    6ee8:	b530      	push	{r4, r5, lr}
    6eea:	b0c9      	sub	sp, #292	; 0x124
	res = f_readdir(zdp->dirp, &fno);
    6eec:	6800      	ldr	r0, [r0, #0]
{
    6eee:	460c      	mov	r4, r1
	res = f_readdir(zdp->dirp, &fno);
    6ef0:	4669      	mov	r1, sp
    6ef2:	f00a fd18 	bl	11926 <f_readdir>
	if (res == FR_OK) {
    6ef6:	4605      	mov	r5, r0
    6ef8:	b990      	cbnz	r0, 6f20 <fatfs_readdir+0x38>
    6efa:	f10d 011a 	add.w	r1, sp, #26
    6efe:	1c60      	adds	r0, r4, #1
    6f00:	f00b fb3a 	bl	12578 <strcpy>
		if (entry->name[0] != 0) {
    6f04:	7863      	ldrb	r3, [r4, #1]
    6f06:	b13b      	cbz	r3, 6f18 <fatfs_readdir+0x30>
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
    6f08:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6f0c:	f3c3 1300 	ubfx	r3, r3, #4, #1
			entry->type = ((fno.fattrib & AM_DIR) ?
    6f10:	7023      	strb	r3, [r4, #0]
			entry->size = fno.fsize;
    6f12:	9b00      	ldr	r3, [sp, #0]
    6f14:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    6f18:	4b04      	ldr	r3, [pc, #16]	; (6f2c <fatfs_readdir+0x44>)
    6f1a:	5758      	ldrsb	r0, [r3, r5]
}
    6f1c:	b049      	add	sp, #292	; 0x124
    6f1e:	bd30      	pop	{r4, r5, pc}
	switch (error) {
    6f20:	2813      	cmp	r0, #19
    6f22:	d9f9      	bls.n	6f18 <fatfs_readdir+0x30>
{
    6f24:	f06f 0004 	mvn.w	r0, #4
	return translate_error(res);
    6f28:	e7f8      	b.n	6f1c <fatfs_readdir+0x34>
    6f2a:	bf00      	nop
    6f2c:	0001448a 	.word	0x0001448a

00006f30 <fatfs_opendir>:
{
    6f30:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (k_mem_slab_alloc(&fatfs_dirp_pool, &ptr, K_NO_WAIT) == 0) {
    6f32:	2200      	movs	r2, #0
{
    6f34:	4606      	mov	r6, r0
    6f36:	460c      	mov	r4, r1
	if (k_mem_slab_alloc(&fatfs_dirp_pool, &ptr, K_NO_WAIT) == 0) {
    6f38:	4811      	ldr	r0, [pc, #68]	; (6f80 <fatfs_opendir+0x50>)
    6f3a:	2300      	movs	r3, #0
    6f3c:	a901      	add	r1, sp, #4
    6f3e:	f005 f827 	bl	bf90 <k_mem_slab_alloc>
    6f42:	4605      	mov	r5, r0
    6f44:	b9a8      	cbnz	r0, 6f72 <fatfs_opendir+0x42>
__ssp_bos_icheck3(memset, void *, int)
    6f46:	4601      	mov	r1, r0
    6f48:	2250      	movs	r2, #80	; 0x50
    6f4a:	9801      	ldr	r0, [sp, #4]
    6f4c:	f00b f9da 	bl	12304 <memset>
		zdp->dirp = ptr;
    6f50:	9801      	ldr	r0, [sp, #4]
    6f52:	6030      	str	r0, [r6, #0]
	res = f_opendir(zdp->dirp, &path[1]);
    6f54:	1c61      	adds	r1, r4, #1
    6f56:	f00a fc96 	bl	11886 <f_opendir>
	if (res != FR_OK) {
    6f5a:	4604      	mov	r4, r0
    6f5c:	b130      	cbz	r0, 6f6c <fatfs_opendir+0x3c>
		k_mem_slab_free(&fatfs_dirp_pool, &ptr);
    6f5e:	4808      	ldr	r0, [pc, #32]	; (6f80 <fatfs_opendir+0x50>)
    6f60:	a901      	add	r1, sp, #4
    6f62:	f005 f86f 	bl	c044 <k_mem_slab_free>
		zdp->dirp = NULL;
    6f66:	2c13      	cmp	r4, #19
    6f68:	6035      	str	r5, [r6, #0]
	switch (error) {
    6f6a:	d806      	bhi.n	6f7a <fatfs_opendir+0x4a>
    6f6c:	4b05      	ldr	r3, [pc, #20]	; (6f84 <fatfs_opendir+0x54>)
    6f6e:	5718      	ldrsb	r0, [r3, r4]
    6f70:	e001      	b.n	6f76 <fatfs_opendir+0x46>
		return -ENOMEM;
    6f72:	f06f 000b 	mvn.w	r0, #11
}
    6f76:	b002      	add	sp, #8
    6f78:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    6f7a:	f06f 0004 	mvn.w	r0, #4
    6f7e:	e7fa      	b.n	6f76 <fatfs_opendir+0x46>
    6f80:	20000374 	.word	0x20000374
    6f84:	0001448a 	.word	0x0001448a

00006f88 <fatfs_open>:
{
    6f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (k_mem_slab_alloc(&fatfs_filep_pool, &ptr, K_NO_WAIT) == 0) {
    6f8a:	2300      	movs	r3, #0
{
    6f8c:	4606      	mov	r6, r0
    6f8e:	460c      	mov	r4, r1
	if (k_mem_slab_alloc(&fatfs_filep_pool, &ptr, K_NO_WAIT) == 0) {
    6f90:	4813      	ldr	r0, [pc, #76]	; (6fe0 <fatfs_open+0x58>)
{
    6f92:	4617      	mov	r7, r2
	if (k_mem_slab_alloc(&fatfs_filep_pool, &ptr, K_NO_WAIT) == 0) {
    6f94:	a901      	add	r1, sp, #4
    6f96:	2200      	movs	r2, #0
    6f98:	f004 fffa 	bl	bf90 <k_mem_slab_alloc>
    6f9c:	4605      	mov	r5, r0
    6f9e:	b9b8      	cbnz	r0, 6fd0 <fatfs_open+0x48>
    6fa0:	4601      	mov	r1, r0
    6fa2:	2250      	movs	r2, #80	; 0x50
    6fa4:	9801      	ldr	r0, [sp, #4]
    6fa6:	f00b f9ad 	bl	12304 <memset>
		zfp->filep = ptr;
    6faa:	9801      	ldr	r0, [sp, #4]
    6fac:	6030      	str	r0, [r6, #0]
	res = f_open(zfp->filep, &file_name[1], fs_mode);
    6fae:	1c61      	adds	r1, r4, #1
    6fb0:	f007 0213 	and.w	r2, r7, #19
    6fb4:	f00a f800 	bl	10fb8 <f_open>
	if (res != FR_OK) {
    6fb8:	4604      	mov	r4, r0
    6fba:	b130      	cbz	r0, 6fca <fatfs_open+0x42>
		k_mem_slab_free(&fatfs_filep_pool, &ptr);
    6fbc:	4808      	ldr	r0, [pc, #32]	; (6fe0 <fatfs_open+0x58>)
    6fbe:	a901      	add	r1, sp, #4
    6fc0:	f005 f840 	bl	c044 <k_mem_slab_free>
		zfp->filep = NULL;
    6fc4:	2c13      	cmp	r4, #19
    6fc6:	6035      	str	r5, [r6, #0]
	switch (error) {
    6fc8:	d806      	bhi.n	6fd8 <fatfs_open+0x50>
    6fca:	4b06      	ldr	r3, [pc, #24]	; (6fe4 <fatfs_open+0x5c>)
    6fcc:	5718      	ldrsb	r0, [r3, r4]
    6fce:	e001      	b.n	6fd4 <fatfs_open+0x4c>
		return -ENOMEM;
    6fd0:	f06f 000b 	mvn.w	r0, #11
}
    6fd4:	b003      	add	sp, #12
    6fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOMEM;
    6fd8:	f06f 0004 	mvn.w	r0, #4
    6fdc:	e7fa      	b.n	6fd4 <fatfs_open+0x4c>
    6fde:	bf00      	nop
    6fe0:	20000394 	.word	0x20000394
    6fe4:	0001448a 	.word	0x0001448a

00006fe8 <disk_spi_sdhc_access_ioctl>:
	return err;
}

static int disk_spi_sdhc_access_ioctl(struct disk_info *disk,
	uint8_t cmd, void *buf)
{
    6fe8:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev = disk->dev;
	struct sdhc_spi_data *data = dev->data;
    6fea:	6903      	ldr	r3, [r0, #16]
}

/* Converts disk status into an error code */
static inline int sdhc_map_disk_status(int status)
{
	return sdhc_map_flags(sdhc_disk_status_flags, status);
    6fec:	480c      	ldr	r0, [pc, #48]	; (7020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>)
    6fee:	691e      	ldr	r6, [r3, #16]
{
    6ff0:	460c      	mov	r4, r1
    6ff2:	7c31      	ldrb	r1, [r6, #16]
    6ff4:	4615      	mov	r5, r2
    6ff6:	f008 fea2 	bl	fd3e <sdhc_map_flags>
	int err;

	err = sdhc_map_disk_status(data->status);
	if (err != 0) {
    6ffa:	b948      	cbnz	r0, 7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>
		return err;
	}

	switch (cmd) {
    6ffc:	1e61      	subs	r1, r4, #1
    6ffe:	2904      	cmp	r1, #4
    7000:	d80a      	bhi.n	7018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>
    7002:	e8df f001 	tbb	[pc, r1]
    7006:	0603      	.short	0x0603
    7008:	0609      	.short	0x0609
    700a:	05          	.byte	0x05
    700b:	00          	.byte	0x00
	case DISK_IOCTL_CTRL_SYNC:
		break;
	case DISK_IOCTL_GET_SECTOR_COUNT:
		*(uint32_t *)buf = data->sector_count;
    700c:	68f3      	ldr	r3, [r6, #12]
		break;
	case DISK_IOCTL_GET_SECTOR_SIZE:
		*(uint32_t *)buf = SDMMC_DEFAULT_BLOCK_SIZE;
    700e:	602b      	str	r3, [r5, #0]
	default:
		return -EINVAL;
	}

	return 0;
}
    7010:	bd70      	pop	{r4, r5, r6, pc}
		*(uint32_t *)buf = SDMMC_DEFAULT_BLOCK_SIZE;
    7012:	f44f 7300 	mov.w	r3, #512	; 0x200
    7016:	e7fa      	b.n	700e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe>
		return -EINVAL;
    7018:	f06f 0015 	mvn.w	r0, #21
    701c:	e7f8      	b.n	7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>
    701e:	bf00      	nop
    7020:	00014539 	.word	0x00014539

00007024 <sdhc_spi_rx_bytes>:
{
    7024:	b510      	push	{r4, lr}
    7026:	4603      	mov	r3, r0
    7028:	b088      	sub	sp, #32
	struct spi_buf tx_bufs[] = {
    702a:	480a      	ldr	r0, [pc, #40]	; (7054 <sdhc_spi_rx_bytes+0x30>)
	struct spi_buf rx_bufs[] = {
    702c:	9205      	str	r2, [sp, #20]
	struct spi_buf tx_bufs[] = {
    702e:	e9cd 0200 	strd	r0, r2, [sp]
	const struct spi_buf_set tx = {
    7032:	2001      	movs	r0, #1
	const struct spi_buf_set rx = {
    7034:	aa04      	add	r2, sp, #16
	struct spi_buf rx_bufs[] = {
    7036:	e9cd 0103 	strd	r0, r1, [sp, #12]
	const struct spi_buf_set rx = {
    703a:	e9cd 2006 	strd	r2, r0, [sp, #24]
	const struct spi_buf_set tx = {
    703e:	f8cd d008 	str.w	sp, [sp, #8]
	return sdhc_spi_trace(data, -1,
    7042:	e9d3 0100 	ldrd	r0, r1, [r3]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
    7046:	6883      	ldr	r3, [r0, #8]
    7048:	aa02      	add	r2, sp, #8
    704a:	681c      	ldr	r4, [r3, #0]
    704c:	ab06      	add	r3, sp, #24
    704e:	47a0      	blx	r4
}
    7050:	b008      	add	sp, #32
    7052:	bd10      	pop	{r4, pc}
    7054:	00014541 	.word	0x00014541

00007058 <sdhc_spi_init>:
{
    7058:	b538      	push	{r3, r4, r5, lr}
    705a:	4604      	mov	r4, r0
	struct sdhc_spi_data *data = dev->data;
    705c:	6905      	ldr	r5, [r0, #16]
    705e:	4807      	ldr	r0, [pc, #28]	; (707c <sdhc_spi_init+0x24>)
    7060:	f004 fdfe 	bl	bc60 <z_impl_device_get_binding>
	struct sdhc_spi_data *data = dev->data;
    7064:	6923      	ldr	r3, [r4, #16]
	data->spi = device_get_binding(DT_BUS_LABEL(SPI_SDHC_NODE));
    7066:	6028      	str	r0, [r5, #0]
	const struct sdhc_spi_config *cfg = dev->config;
    7068:	6862      	ldr	r2, [r4, #4]

static int disk_spi_sdhc_init(const struct device *dev)
{
	sdhc_spi_set_status(dev, DISK_STATUS_UNINIT);

	spi_sdhc_disk.dev = dev;
    706a:	4805      	ldr	r0, [pc, #20]	; (7080 <sdhc_spi_init+0x28>)
		data->spi_cfg = &cfg->init_cfg;
    706c:	605a      	str	r2, [r3, #4]
	data->status = status;
    706e:	2101      	movs	r1, #1
    7070:	7419      	strb	r1, [r3, #16]
	spi_sdhc_disk.dev = dev;
    7072:	6104      	str	r4, [r0, #16]

	return disk_access_register(&spi_sdhc_disk);
    7074:	f7fe fa62 	bl	553c <disk_access_register>
}
    7078:	2000      	movs	r0, #0
    707a:	bd38      	pop	{r3, r4, r5, pc}
    707c:	00013989 	.word	0x00013989
    7080:	20000050 	.word	0x20000050

00007084 <sdhc_spi_rx_block>:
{
    7084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7088:	b088      	sub	sp, #32
    708a:	4605      	mov	r5, r0
    708c:	4688      	mov	r8, r1
    708e:	4616      	mov	r6, r2
	sdhc_retry_init(&retry, SDHC_READY_TIMEOUT, 0);
    7090:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    7094:	2200      	movs	r2, #0
    7096:	a806      	add	r0, sp, #24
    7098:	f008 fe90 	bl	fdbc <sdhc_retry_init>
		err = sdhc_spi_rx_u8(data);
    709c:	4628      	mov	r0, r5
    709e:	f008 fe82 	bl	fda6 <sdhc_spi_rx_u8>
		if (err != discard) {
    70a2:	28ff      	cmp	r0, #255	; 0xff
		err = sdhc_spi_rx_u8(data);
    70a4:	4604      	mov	r4, r0
		if (err != discard) {
    70a6:	d115      	bne.n	70d4 <sdhc_spi_rx_block+0x50>
	} while (sdhc_retry_ok(&retry));
    70a8:	a806      	add	r0, sp, #24
    70aa:	f008 fe54 	bl	fd56 <sdhc_retry_ok>
    70ae:	2800      	cmp	r0, #0
    70b0:	d1f4      	bne.n	709c <sdhc_spi_rx_block+0x18>
    70b2:	4b29      	ldr	r3, [pc, #164]	; (7158 <sdhc_spi_rx_block+0xd4>)
    70b4:	4a29      	ldr	r2, [pc, #164]	; (715c <sdhc_spi_rx_block+0xd8>)
	LOG_WRN("Timeout while waiting for !%d", discard);
    70b6:	482a      	ldr	r0, [pc, #168]	; (7160 <sdhc_spi_rx_block+0xdc>)
    70b8:	1ad2      	subs	r2, r2, r3
    70ba:	08d2      	lsrs	r2, r2, #3
    70bc:	0192      	lsls	r2, r2, #6
    70be:	4621      	mov	r1, r4
    70c0:	f042 0202 	orr.w	r2, r2, #2
    70c4:	f008 fa7f 	bl	f5c6 <log_1>
	return -ETIMEDOUT;
    70c8:	f06f 0473 	mvn.w	r4, #115	; 0x73
}
    70cc:	4620      	mov	r0, r4
    70ce:	b008      	add	sp, #32
    70d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (token < 0) {
    70d4:	2800      	cmp	r0, #0
    70d6:	dbf9      	blt.n	70cc <sdhc_spi_rx_block+0x48>
	if (token != SDHC_TOKEN_SINGLE) {
    70d8:	28fe      	cmp	r0, #254	; 0xfe
    70da:	d139      	bne.n	7150 <sdhc_spi_rx_block+0xcc>
		struct spi_buf tx_bufs[] = {
    70dc:	f8df a084 	ldr.w	sl, [pc, #132]	; 7164 <sdhc_spi_rx_block+0xe0>
	for (i = 0; i < len; i += sizeof(sdhc_ones)) {
    70e0:	2700      	movs	r7, #0
		const struct spi_buf_set tx = {
    70e2:	f04f 0901 	mov.w	r9, #1
		int remain = MIN(sizeof(sdhc_ones), len - i);
    70e6:	1bf3      	subs	r3, r6, r7
    70e8:	2b40      	cmp	r3, #64	; 0x40
    70ea:	bf28      	it	cs
    70ec:	2340      	movcs	r3, #64	; 0x40
		struct spi_buf rx_bufs[] = {
    70ee:	eb08 0207 	add.w	r2, r8, r7
		struct spi_buf tx_bufs[] = {
    70f2:	e9cd a300 	strd	sl, r3, [sp]
		struct spi_buf rx_bufs[] = {
    70f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
		const struct spi_buf_set rx = {
    70fa:	ab04      	add	r3, sp, #16
    70fc:	e9cd 3906 	strd	r3, r9, [sp, #24]
		err = sdhc_spi_trace(data, -1,
    7100:	e9d5 0100 	ldrd	r0, r1, [r5]
		const struct spi_buf_set tx = {
    7104:	f8cd d008 	str.w	sp, [sp, #8]
    7108:	f8cd 900c 	str.w	r9, [sp, #12]
    710c:	6883      	ldr	r3, [r0, #8]
    710e:	aa02      	add	r2, sp, #8
    7110:	681c      	ldr	r4, [r3, #0]
    7112:	ab06      	add	r3, sp, #24
    7114:	47a0      	blx	r4
		if (err != 0) {
    7116:	4604      	mov	r4, r0
    7118:	2800      	cmp	r0, #0
    711a:	d1d7      	bne.n	70cc <sdhc_spi_rx_block+0x48>
	for (i = 0; i < len; i += sizeof(sdhc_ones)) {
    711c:	3740      	adds	r7, #64	; 0x40
    711e:	42b7      	cmp	r7, r6
    7120:	dbe1      	blt.n	70e6 <sdhc_spi_rx_block+0x62>
	err = sdhc_spi_rx_bytes(data, crc, sizeof(crc));
    7122:	2203      	movs	r2, #3
    7124:	a906      	add	r1, sp, #24
    7126:	4628      	mov	r0, r5
    7128:	f7ff ff7c 	bl	7024 <sdhc_spi_rx_bytes>
	if (err != 0) {
    712c:	4604      	mov	r4, r0
    712e:	2800      	cmp	r0, #0
    7130:	d1cc      	bne.n	70cc <sdhc_spi_rx_block+0x48>
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_be16(const uint8_t src[2])
{
	return ((uint16_t)src[0] << 8) | src[1];
    7132:	f89d 3018 	ldrb.w	r3, [sp, #24]
    7136:	f89d 5019 	ldrb.w	r5, [sp, #25]
	if (sys_get_be16(crc) != crc16_itu_t(0, buf, len)) {
    713a:	4632      	mov	r2, r6
    713c:	4641      	mov	r1, r8
    713e:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    7142:	f008 f8f6 	bl	f332 <crc16_itu_t>
		return -EILSEQ;
    7146:	4285      	cmp	r5, r0
    7148:	bf18      	it	ne
    714a:	f06f 0489 	mvnne.w	r4, #137	; 0x89
    714e:	e7bd      	b.n	70cc <sdhc_spi_rx_block+0x48>
		return -EIO;
    7150:	f06f 0404 	mvn.w	r4, #4
    7154:	e7ba      	b.n	70cc <sdhc_spi_rx_block+0x48>
    7156:	bf00      	nop
    7158:	000130a4 	.word	0x000130a4
    715c:	000130ec 	.word	0x000130ec
    7160:	0001449e 	.word	0x0001449e
    7164:	00014541 	.word	0x00014541

00007168 <sdhc_spi_cmd_r1_raw>:
{
    7168:	b570      	push	{r4, r5, r6, lr}
    716a:	4605      	mov	r5, r0
    716c:	460e      	mov	r6, r1
	err = sdhc_spi_tx_cmd(data, cmd, payload);
    716e:	f008 fea4 	bl	feba <sdhc_spi_tx_cmd>
	if (err != 0) {
    7172:	4604      	mov	r4, r0
    7174:	b968      	cbnz	r0, 7192 <sdhc_spi_cmd_r1_raw+0x2a>
	err = sdhc_spi_skip_until_start(data);
    7176:	4628      	mov	r0, r5
    7178:	f008 fe38 	bl	fdec <sdhc_spi_skip_until_start>
	if (cmd != SDHC_SEND_CSD && cmd != SDHC_SEND_CID &&
    717c:	2e19      	cmp	r6, #25
	err = sdhc_spi_skip_until_start(data);
    717e:	4604      	mov	r4, r0
	if (cmd != SDHC_SEND_CSD && cmd != SDHC_SEND_CID &&
    7180:	d804      	bhi.n	718c <sdhc_spi_cmd_r1_raw+0x24>
    7182:	4905      	ldr	r1, [pc, #20]	; (7198 <sdhc_spi_cmd_r1_raw+0x30>)
    7184:	fa21 f606 	lsr.w	r6, r1, r6
    7188:	07f3      	lsls	r3, r6, #31
    718a:	d402      	bmi.n	7192 <sdhc_spi_cmd_r1_raw+0x2a>
		sdhc_spi_rx_u8(data);
    718c:	4628      	mov	r0, r5
    718e:	f008 fe0a 	bl	fda6 <sdhc_spi_rx_u8>
}
    7192:	4620      	mov	r0, r4
    7194:	bd70      	pop	{r4, r5, r6, pc}
    7196:	bf00      	nop
    7198:	03060600 	.word	0x03060600

0000719c <sdhc_spi_cmd_r1>:
{
    719c:	b508      	push	{r3, lr}
	return sdhc_map_r1_status(sdhc_spi_cmd_r1_raw(data, cmd, payload));
    719e:	f7ff ffe3 	bl	7168 <sdhc_spi_cmd_r1_raw>
}
    71a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return sdhc_map_r1_status(sdhc_spi_cmd_r1_raw(data, cmd, payload));
    71a6:	4601      	mov	r1, r0
}

/* Converts the R1 response flags into an error code */
static inline int sdhc_map_r1_status(int status)
{
	return sdhc_map_flags(sdhc_r1_flags, status);
    71a8:	4801      	ldr	r0, [pc, #4]	; (71b0 <sdhc_spi_cmd_r1+0x14>)
    71aa:	f008 bdc8 	b.w	fd3e <sdhc_map_flags>
    71ae:	bf00      	nop
    71b0:	00014581 	.word	0x00014581

000071b4 <sdhc_spi_write_multi.part.0>:
static int sdhc_spi_write_multi(struct sdhc_spi_data *data,
    71b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    71b8:	461e      	mov	r6, r3
	if (data->high_capacity) {
    71ba:	7a03      	ldrb	r3, [r0, #8]
static int sdhc_spi_write_multi(struct sdhc_spi_data *data,
    71bc:	4605      	mov	r5, r0
    71be:	460f      	mov	r7, r1
	if (data->high_capacity) {
    71c0:	b903      	cbnz	r3, 71c4 <sdhc_spi_write_multi.part.0+0x10>
		addr = sector * SDMMC_DEFAULT_BLOCK_SIZE;
    71c2:	0252      	lsls	r2, r2, #9
	err = sdhc_spi_cmd_r1(data, SDHC_WRITE_MULTIPLE_BLOCK, addr);
    71c4:	2119      	movs	r1, #25
    71c6:	4628      	mov	r0, r5
    71c8:	f7ff ffe8 	bl	719c <sdhc_spi_cmd_r1>
	if (err < 0) {
    71cc:	1e04      	subs	r4, r0, #0
    71ce:	db0d      	blt.n	71ec <sdhc_spi_write_multi.part.0+0x38>
}

/* Converts the data block response flags into an error code */
static inline int sdhc_map_data_status(int status)
{
	return sdhc_map_flags(sdhc_data_response_flags, status);
    71d0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 726c <sdhc_spi_write_multi.part.0+0xb8>
		block[0] = SDHC_TOKEN_MULTI_WRITE;
    71d4:	f04f 08fc 	mov.w	r8, #252	; 0xfc
	for (; count != 0U; count--) {
    71d8:	b986      	cbnz	r6, 71fc <sdhc_spi_write_multi.part.0+0x48>
	sdhc_spi_tx_cmd(data, SDHC_STOP_TRANSMISSION, 0);
    71da:	4632      	mov	r2, r6
    71dc:	210c      	movs	r1, #12
    71de:	4628      	mov	r0, r5
    71e0:	f008 fe6b 	bl	feba <sdhc_spi_tx_cmd>
	err = sdhc_spi_skip_until_ready(data);
    71e4:	4628      	mov	r0, r5
    71e6:	f008 fe33 	bl	fe50 <sdhc_spi_skip_until_ready>
    71ea:	4604      	mov	r4, r0
	spi_release(data->spi, data->spi_cfg);
    71ec:	e9d5 0100 	ldrd	r0, r1, [r5]
    71f0:	f008 fd7e 	bl	fcf0 <spi_release>
}
    71f4:	4620      	mov	r0, r4
    71f6:	b003      	add	sp, #12
    71f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = sdhc_spi_tx(data, block, 1);
    71fc:	2201      	movs	r2, #1
    71fe:	a901      	add	r1, sp, #4
    7200:	4628      	mov	r0, r5
		block[0] = SDHC_TOKEN_MULTI_WRITE;
    7202:	f88d 8004 	strb.w	r8, [sp, #4]
		err = sdhc_spi_tx(data, block, 1);
    7206:	f008 fe48 	bl	fe9a <sdhc_spi_tx>
		if (err != 0) {
    720a:	4604      	mov	r4, r0
    720c:	2800      	cmp	r0, #0
    720e:	d1ed      	bne.n	71ec <sdhc_spi_write_multi.part.0+0x38>
		err = sdhc_spi_tx(data, buf, SDMMC_DEFAULT_BLOCK_SIZE);
    7210:	f44f 7200 	mov.w	r2, #512	; 0x200
    7214:	4639      	mov	r1, r7
    7216:	4628      	mov	r0, r5
    7218:	f008 fe3f 	bl	fe9a <sdhc_spi_tx>
		if (err != 0) {
    721c:	4604      	mov	r4, r0
    721e:	2800      	cmp	r0, #0
    7220:	d1e4      	bne.n	71ec <sdhc_spi_write_multi.part.0+0x38>
		sys_put_be16(crc16_itu_t(0, buf, SDMMC_DEFAULT_BLOCK_SIZE),
    7222:	f44f 7200 	mov.w	r2, #512	; 0x200
    7226:	4639      	mov	r1, r7
    7228:	f008 f883 	bl	f332 <crc16_itu_t>
	dst[0] = val >> 8;
    722c:	ba40      	rev16	r0, r0
    722e:	f8ad 0004 	strh.w	r0, [sp, #4]
		err = sdhc_spi_tx(data, block, sizeof(block));
    7232:	2202      	movs	r2, #2
    7234:	a901      	add	r1, sp, #4
    7236:	4628      	mov	r0, r5
    7238:	f008 fe2f 	bl	fe9a <sdhc_spi_tx>
		if (err != 0) {
    723c:	4604      	mov	r4, r0
    723e:	2800      	cmp	r0, #0
    7240:	d1d4      	bne.n	71ec <sdhc_spi_write_multi.part.0+0x38>
		err = sdhc_map_data_status(sdhc_spi_rx_u8(data));
    7242:	4628      	mov	r0, r5
    7244:	f008 fdaf 	bl	fda6 <sdhc_spi_rx_u8>
    7248:	4601      	mov	r1, r0
    724a:	4648      	mov	r0, r9
    724c:	f008 fd77 	bl	fd3e <sdhc_map_flags>
		if (err != 0) {
    7250:	4604      	mov	r4, r0
    7252:	2800      	cmp	r0, #0
    7254:	d1ca      	bne.n	71ec <sdhc_spi_write_multi.part.0+0x38>
		err = sdhc_spi_skip_until_ready(data);
    7256:	4628      	mov	r0, r5
    7258:	f008 fdfa 	bl	fe50 <sdhc_spi_skip_until_ready>
		if (err != 0) {
    725c:	4604      	mov	r4, r0
    725e:	2800      	cmp	r0, #0
    7260:	d1c4      	bne.n	71ec <sdhc_spi_write_multi.part.0+0x38>
		buf += SDMMC_DEFAULT_BLOCK_SIZE;
    7262:	f507 7700 	add.w	r7, r7, #512	; 0x200
	for (; count != 0U; count--) {
    7266:	3e01      	subs	r6, #1
    7268:	e7b6      	b.n	71d8 <sdhc_spi_write_multi.part.0+0x24>
    726a:	bf00      	nop
    726c:	00014531 	.word	0x00014531

00007270 <sdhc_spi_write.part.0>:
static int sdhc_spi_write(struct sdhc_spi_data *data,
    7270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7274:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 7360 <sdhc_spi_write.part.0+0xf0>
	return sdhc_map_flags(sdhc_r1_flags, status);
    7278:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 7364 <sdhc_spi_write.part.0+0xf4>
    727c:	4605      	mov	r5, r0
    727e:	460f      	mov	r7, r1
    7280:	4616      	mov	r6, r2
    7282:	eb02 0803 	add.w	r8, r2, r3
	for (; count != 0U; count--) {
    7286:	4546      	cmp	r6, r8
    7288:	d108      	bne.n	729c <sdhc_spi_write.part.0+0x2c>
	err = 0;
    728a:	2400      	movs	r4, #0
	spi_release(data->spi, data->spi_cfg);
    728c:	e9d5 0100 	ldrd	r0, r1, [r5]
    7290:	f008 fd2e 	bl	fcf0 <spi_release>
}
    7294:	4620      	mov	r0, r4
    7296:	b003      	add	sp, #12
    7298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (data->high_capacity) {
    729c:	7a2b      	ldrb	r3, [r5, #8]
    729e:	2b00      	cmp	r3, #0
    72a0:	d15a      	bne.n	7358 <sdhc_spi_write.part.0+0xe8>
			addr = sector * SDMMC_DEFAULT_BLOCK_SIZE;
    72a2:	0272      	lsls	r2, r6, #9
		err = sdhc_spi_cmd_r1(data, SDHC_WRITE_BLOCK, addr);
    72a4:	2118      	movs	r1, #24
    72a6:	4628      	mov	r0, r5
    72a8:	f7ff ff78 	bl	719c <sdhc_spi_cmd_r1>
		if (err < 0) {
    72ac:	1e04      	subs	r4, r0, #0
    72ae:	dbed      	blt.n	728c <sdhc_spi_write.part.0+0x1c>
	buf[0] = SDHC_TOKEN_SINGLE;
    72b0:	23fe      	movs	r3, #254	; 0xfe
	err = sdhc_spi_tx(data, buf, 1);
    72b2:	2201      	movs	r2, #1
    72b4:	a901      	add	r1, sp, #4
    72b6:	4628      	mov	r0, r5
	buf[0] = SDHC_TOKEN_SINGLE;
    72b8:	f88d 3004 	strb.w	r3, [sp, #4]
	err = sdhc_spi_tx(data, buf, 1);
    72bc:	f008 fded 	bl	fe9a <sdhc_spi_tx>
	if (err != 0) {
    72c0:	4604      	mov	r4, r0
    72c2:	2800      	cmp	r0, #0
    72c4:	d1e2      	bne.n	728c <sdhc_spi_write.part.0+0x1c>
	err = sdhc_spi_tx(data, send, len);
    72c6:	f44f 7200 	mov.w	r2, #512	; 0x200
    72ca:	4639      	mov	r1, r7
    72cc:	4628      	mov	r0, r5
    72ce:	f008 fde4 	bl	fe9a <sdhc_spi_tx>
	if (err != 0) {
    72d2:	4604      	mov	r4, r0
    72d4:	2800      	cmp	r0, #0
    72d6:	d1d9      	bne.n	728c <sdhc_spi_write.part.0+0x1c>
	sys_put_be16(crc16_itu_t(0, send, len), buf);
    72d8:	f44f 7200 	mov.w	r2, #512	; 0x200
    72dc:	4639      	mov	r1, r7
    72de:	f008 f828 	bl	f332 <crc16_itu_t>
    72e2:	ba40      	rev16	r0, r0
    72e4:	f8ad 0004 	strh.w	r0, [sp, #4]
	err = sdhc_spi_tx(data, buf, sizeof(buf));
    72e8:	2202      	movs	r2, #2
    72ea:	a901      	add	r1, sp, #4
    72ec:	4628      	mov	r0, r5
    72ee:	f008 fdd4 	bl	fe9a <sdhc_spi_tx>
	if (err != 0) {
    72f2:	4604      	mov	r4, r0
    72f4:	2800      	cmp	r0, #0
    72f6:	d1c9      	bne.n	728c <sdhc_spi_write.part.0+0x1c>
	return sdhc_map_data_status(sdhc_spi_rx_u8(data));
    72f8:	4628      	mov	r0, r5
    72fa:	f008 fd54 	bl	fda6 <sdhc_spi_rx_u8>
    72fe:	4601      	mov	r1, r0
	return sdhc_map_flags(sdhc_data_response_flags, status);
    7300:	4648      	mov	r0, r9
    7302:	f008 fd1c 	bl	fd3e <sdhc_map_flags>
		if (err != 0) {
    7306:	4604      	mov	r4, r0
    7308:	2800      	cmp	r0, #0
    730a:	d1bf      	bne.n	728c <sdhc_spi_write.part.0+0x1c>
		err = sdhc_spi_skip_until_ready(data);
    730c:	4628      	mov	r0, r5
    730e:	f008 fd9f 	bl	fe50 <sdhc_spi_skip_until_ready>
		if (err != 0) {
    7312:	4604      	mov	r4, r0
    7314:	2800      	cmp	r0, #0
    7316:	d1b9      	bne.n	728c <sdhc_spi_write.part.0+0x1c>
	err = sdhc_spi_tx_cmd(data, cmd, payload);
    7318:	4602      	mov	r2, r0
    731a:	210d      	movs	r1, #13
    731c:	4628      	mov	r0, r5
    731e:	f008 fdcc 	bl	feba <sdhc_spi_tx_cmd>
	if (err != 0) {
    7322:	4604      	mov	r4, r0
    7324:	2800      	cmp	r0, #0
    7326:	d1b1      	bne.n	728c <sdhc_spi_write.part.0+0x1c>
	r1 = sdhc_map_r1_status(sdhc_spi_skip_until_start(data));
    7328:	4628      	mov	r0, r5
    732a:	f008 fd5f 	bl	fdec <sdhc_spi_skip_until_start>
    732e:	4601      	mov	r1, r0
	return sdhc_map_flags(sdhc_r1_flags, status);
    7330:	4650      	mov	r0, sl
    7332:	f008 fd04 	bl	fd3e <sdhc_map_flags>
    7336:	4604      	mov	r4, r0
	r2 = sdhc_spi_rx_u8(data);
    7338:	4628      	mov	r0, r5
    733a:	f008 fd34 	bl	fda6 <sdhc_spi_rx_u8>
    733e:	4683      	mov	fp, r0
	sdhc_spi_rx_u8(data);
    7340:	4628      	mov	r0, r5
    7342:	f008 fd30 	bl	fda6 <sdhc_spi_rx_u8>
	if (r1 < 0) {
    7346:	2c00      	cmp	r4, #0
    7348:	dba0      	blt.n	728c <sdhc_spi_write.part.0+0x1c>
		if (err != 0) {
    734a:	f1bb 0f00 	cmp.w	fp, #0
    734e:	d105      	bne.n	735c <sdhc_spi_write.part.0+0xec>
		buf += SDMMC_DEFAULT_BLOCK_SIZE;
    7350:	f507 7700 	add.w	r7, r7, #512	; 0x200
		sector++;
    7354:	3601      	adds	r6, #1
	for (; count != 0U; count--) {
    7356:	e796      	b.n	7286 <sdhc_spi_write.part.0+0x16>
    7358:	4632      	mov	r2, r6
    735a:	e7a3      	b.n	72a4 <sdhc_spi_write.part.0+0x34>
	r2 = sdhc_spi_rx_u8(data);
    735c:	465c      	mov	r4, fp
    735e:	e795      	b.n	728c <sdhc_spi_write.part.0+0x1c>
    7360:	00014531 	.word	0x00014531
    7364:	00014581 	.word	0x00014581

00007368 <disk_spi_sdhc_access_init>:
{
    7368:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct device *dev = disk->dev;
    736a:	6907      	ldr	r7, [r0, #16]
	sdhc_spi_tx(data, sdhc_ones, 10);
    736c:	4ca2      	ldr	r4, [pc, #648]	; (75f8 <disk_spi_sdhc_access_init+0x290>)
	struct sdhc_spi_data *data = dev->data;
    736e:	693d      	ldr	r5, [r7, #16]
	const struct sdhc_spi_config *cfg = dev->config;
    7370:	687b      	ldr	r3, [r7, #4]
		data->spi_cfg = &cfg->init_cfg;
    7372:	606b      	str	r3, [r5, #4]
{
    7374:	b093      	sub	sp, #76	; 0x4c
	data->status = status;
    7376:	2201      	movs	r2, #1
    7378:	742a      	strb	r2, [r5, #16]
	sdhc_retry_init(&retry, SDHC_INIT_TIMEOUT, SDHC_RETRY_DELAY);
    737a:	f241 3188 	movw	r1, #5000	; 0x1388
    737e:	2214      	movs	r2, #20
    7380:	a802      	add	r0, sp, #8
    7382:	f008 fd1b 	bl	fdbc <sdhc_retry_init>
    7386:	4e9d      	ldr	r6, [pc, #628]	; (75fc <disk_spi_sdhc_access_init+0x294>)
	sdhc_spi_tx(data, sdhc_ones, 10);
    7388:	220a      	movs	r2, #10
    738a:	4621      	mov	r1, r4
    738c:	4628      	mov	r0, r5
    738e:	f008 fd84 	bl	fe9a <sdhc_spi_tx>
	spi_release(data->spi, data->spi_cfg);
    7392:	e9d5 0100 	ldrd	r0, r1, [r5]
    7396:	f008 fcab 	bl	fcf0 <spi_release>
	return sdhc_map_r1_idle_status(sdhc_spi_cmd_r1_raw(data, cmd, payload));
    739a:	2200      	movs	r2, #0
    739c:	4611      	mov	r1, r2
    739e:	4628      	mov	r0, r5
    73a0:	f7ff fee2 	bl	7168 <sdhc_spi_cmd_r1_raw>
	if (status < 0) {
    73a4:	1e01      	subs	r1, r0, #0
    73a6:	db42      	blt.n	742e <disk_spi_sdhc_access_init+0xc6>
	if (status == SDHC_R1_IDLE) {
    73a8:	2901      	cmp	r1, #1
    73aa:	d004      	beq.n	73b6 <disk_spi_sdhc_access_init+0x4e>
	return sdhc_map_flags(sdhc_r1_flags, status);
    73ac:	4630      	mov	r0, r6
    73ae:	f008 fcc6 	bl	fd3e <sdhc_map_flags>
		if (err == 0) {
    73b2:	2800      	cmp	r0, #0
    73b4:	d13b      	bne.n	742e <disk_spi_sdhc_access_init+0xc6>
	err = sdhc_spi_tx_cmd(data, cmd, payload);
    73b6:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    73ba:	2108      	movs	r1, #8
    73bc:	4628      	mov	r0, r5
    73be:	f008 fd7c 	bl	feba <sdhc_spi_tx_cmd>
	if (err != 0) {
    73c2:	4606      	mov	r6, r0
    73c4:	b920      	cbnz	r0, 73d0 <disk_spi_sdhc_access_init+0x68>
    73c6:	a908      	add	r1, sp, #32
    73c8:	4628      	mov	r0, r5
    73ca:	f008 fd27 	bl	fe1c <sdhc_spi_cmd_r37_raw.part.0>
    73ce:	4606      	mov	r6, r0
	if (status < 0) {
    73d0:	2e00      	cmp	r6, #0
    73d2:	db13      	blt.n	73fc <disk_spi_sdhc_access_init+0x94>
	if (status == SDHC_R1_IDLE) {
    73d4:	2e01      	cmp	r6, #1
    73d6:	d005      	beq.n	73e4 <disk_spi_sdhc_access_init+0x7c>
	return sdhc_map_flags(sdhc_r1_flags, status);
    73d8:	4631      	mov	r1, r6
    73da:	4888      	ldr	r0, [pc, #544]	; (75fc <disk_spi_sdhc_access_init+0x294>)
    73dc:	f008 fcaf 	bl	fd3e <sdhc_map_flags>
	if (err != 0) {
    73e0:	4606      	mov	r6, r0
    73e2:	b958      	cbnz	r0, 73fc <disk_spi_sdhc_access_init+0x94>
	if ((cond & 0xFF) != SDHC_CHECK) {
    73e4:	9b08      	ldr	r3, [sp, #32]
    73e6:	b2da      	uxtb	r2, r3
    73e8:	2aaa      	cmp	r2, #170	; 0xaa
    73ea:	d11d      	bne.n	7428 <disk_spi_sdhc_access_init+0xc0>
	if ((cond & SDHC_VHS_MASK) != SDHC_VHS_3V3) {
    73ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
		return -ENOTSUP;
    73f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    73f4:	bf0c      	ite	eq
    73f6:	2600      	moveq	r6, #0
    73f8:	f06f 0685 	mvnne.w	r6, #133	; 0x85
	return sdhc_map_r1_idle_status(sdhc_spi_cmd_r1_raw(data, cmd, payload));
    73fc:	2201      	movs	r2, #1
    73fe:	213b      	movs	r1, #59	; 0x3b
    7400:	4628      	mov	r0, r5
    7402:	f7ff feb1 	bl	7168 <sdhc_spi_cmd_r1_raw>
	if (status < 0) {
    7406:	1e04      	subs	r4, r0, #0
    7408:	db07      	blt.n	741a <disk_spi_sdhc_access_init+0xb2>
	if (status == SDHC_R1_IDLE) {
    740a:	2c01      	cmp	r4, #1
    740c:	d017      	beq.n	743e <disk_spi_sdhc_access_init+0xd6>
	return sdhc_map_flags(sdhc_r1_flags, status);
    740e:	4621      	mov	r1, r4
    7410:	487a      	ldr	r0, [pc, #488]	; (75fc <disk_spi_sdhc_access_init+0x294>)
    7412:	f008 fc94 	bl	fd3e <sdhc_map_flags>
	if (err != 0) {
    7416:	4604      	mov	r4, r0
    7418:	b188      	cbz	r0, 743e <disk_spi_sdhc_access_init+0xd6>
	spi_release(data->spi, data->spi_cfg);
    741a:	e9d5 0100 	ldrd	r0, r1, [r5]
    741e:	f008 fc67 	bl	fcf0 <spi_release>
}
    7422:	4620      	mov	r0, r4
    7424:	b013      	add	sp, #76	; 0x4c
    7426:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOENT;
    7428:	f06f 0601 	mvn.w	r6, #1
    742c:	e7e6      	b.n	73fc <disk_spi_sdhc_access_init+0x94>
		if (!sdhc_retry_ok(&retry)) {
    742e:	a802      	add	r0, sp, #8
    7430:	f008 fc91 	bl	fd56 <sdhc_retry_ok>
    7434:	2800      	cmp	r0, #0
    7436:	d1a7      	bne.n	7388 <disk_spi_sdhc_access_init+0x20>
			return -ENOENT;
    7438:	f06f 0401 	mvn.w	r4, #1
    743c:	e7ed      	b.n	741a <disk_spi_sdhc_access_init+0xb2>
    743e:	2e00      	cmp	r6, #0
    7440:	bf0c      	ite	eq
    7442:	f04f 4480 	moveq.w	r4, #1073741824	; 0x40000000
    7446:	2400      	movne	r4, #0
		sdhc_spi_cmd_r1_raw(data, SDHC_APP_CMD, 0);
    7448:	2200      	movs	r2, #0
    744a:	2137      	movs	r1, #55	; 0x37
    744c:	4628      	mov	r0, r5
    744e:	f7ff fe8b 	bl	7168 <sdhc_spi_cmd_r1_raw>
		err = sdhc_spi_cmd_r1(data, SDHC_SEND_OP_COND, is_v2 ? SDHC_HCS : 0);
    7452:	4622      	mov	r2, r4
    7454:	2129      	movs	r1, #41	; 0x29
    7456:	4628      	mov	r0, r5
    7458:	f7ff fea0 	bl	719c <sdhc_spi_cmd_r1>
		if (err == 0) {
    745c:	2800      	cmp	r0, #0
    745e:	f000 8088 	beq.w	7572 <disk_spi_sdhc_access_init+0x20a>
	} while (sdhc_retry_ok(&retry));
    7462:	a802      	add	r0, sp, #8
    7464:	f008 fc77 	bl	fd56 <sdhc_retry_ok>
    7468:	2800      	cmp	r0, #0
    746a:	d1ed      	bne.n	7448 <disk_spi_sdhc_access_init+0xe0>
		return -ETIMEDOUT;
    746c:	f06f 0473 	mvn.w	r4, #115	; 0x73
    7470:	e7d3      	b.n	741a <disk_spi_sdhc_access_init+0xb2>
		data->high_capacity = false;
    7472:	2300      	movs	r3, #0
    7474:	722b      	strb	r3, [r5, #8]
		err = sdhc_spi_cmd_r1(data, SDHC_SET_BLOCK_SIZE, SDMMC_DEFAULT_BLOCK_SIZE);
    7476:	f44f 7200 	mov.w	r2, #512	; 0x200
    747a:	2110      	movs	r1, #16
    747c:	4628      	mov	r0, r5
    747e:	f7ff fe8d 	bl	719c <sdhc_spi_cmd_r1>
		if (err != 0) {
    7482:	4604      	mov	r4, r0
    7484:	2800      	cmp	r0, #0
    7486:	f000 809a 	beq.w	75be <disk_spi_sdhc_access_init+0x256>
    748a:	e7c6      	b.n	741a <disk_spi_sdhc_access_init+0xb2>
		readbllen = buf[5] & ((1 << 4) - 1);
    748c:	f89d 4015 	ldrb.w	r4, [sp, #21]
    7490:	f004 040f 	and.w	r4, r4, #15
		if ((readbllen < 9) || (readbllen > 11)) {
    7494:	f1a4 0309 	sub.w	r3, r4, #9
    7498:	2b02      	cmp	r3, #2
    749a:	f200 80aa 	bhi.w	75f2 <disk_spi_sdhc_access_init+0x28a>
		csize = (sys_get_be32(&buf[6]) >> 14) & ((1 << 12) - 1);
    749e:	f10d 0016 	add.w	r0, sp, #22
    74a2:	f008 fc1a 	bl	fcda <sys_get_be32>
	return ((uint16_t)src[0] << 8) | src[1];
    74a6:	f89d 2019 	ldrb.w	r2, [sp, #25]
    74aa:	f89d 301a 	ldrb.w	r3, [sp, #26]
		csizemult = (uint8_t) ((sys_get_be16(&buf[9]) >> 7) & ((1 << 3) - 1));
    74ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		csize = (sys_get_be32(&buf[6]) >> 14) & ((1 << 12) - 1);
    74b2:	f3c0 308b 	ubfx	r0, r0, #14, #12
		data->sector_count = ((csize + 1) << (csizemult + 2 + readbllen - 9));
    74b6:	f3c3 13c2 	ubfx	r3, r3, #7, #3
    74ba:	3c07      	subs	r4, #7
    74bc:	3001      	adds	r0, #1
    74be:	4423      	add	r3, r4
    74c0:	4098      	lsls	r0, r3
    74c2:	4b4f      	ldr	r3, [pc, #316]	; (7600 <disk_spi_sdhc_access_init+0x298>)
    74c4:	4e4f      	ldr	r6, [pc, #316]	; (7604 <disk_spi_sdhc_access_init+0x29c>)
		data->sector_count = (csize + 1) *
    74c6:	60e8      	str	r0, [r5, #12]
    74c8:	1af6      	subs	r6, r6, r3
    74ca:	08f6      	lsrs	r6, r6, #3
	LOG_INF("Found a ~%u MiB SDHC card.",
    74cc:	68e9      	ldr	r1, [r5, #12]
    74ce:	484e      	ldr	r0, [pc, #312]	; (7608 <disk_spi_sdhc_access_init+0x2a0>)
    74d0:	01b6      	lsls	r6, r6, #6
    74d2:	f046 0603 	orr.w	r6, r6, #3
    74d6:	4632      	mov	r2, r6
    74d8:	0ac9      	lsrs	r1, r1, #11
    74da:	f008 f874 	bl	f5c6 <log_1>
	err = sdhc_spi_cmd_r1(data, SDHC_SEND_CID, 0);
    74de:	2200      	movs	r2, #0
    74e0:	210a      	movs	r1, #10
    74e2:	4628      	mov	r0, r5
    74e4:	f7ff fe5a 	bl	719c <sdhc_spi_cmd_r1>
	if (err != 0) {
    74e8:	4604      	mov	r4, r0
    74ea:	2800      	cmp	r0, #0
    74ec:	d195      	bne.n	741a <disk_spi_sdhc_access_init+0xb2>
	err = sdhc_spi_rx_block(data, buf, sizeof(buf));
    74ee:	2210      	movs	r2, #16
    74f0:	eb0d 0102 	add.w	r1, sp, r2
    74f4:	4628      	mov	r0, r5
    74f6:	f7ff fdc5 	bl	7084 <sdhc_spi_rx_block>
	if (err != 0) {
    74fa:	4604      	mov	r4, r0
    74fc:	2800      	cmp	r0, #0
    74fe:	d18c      	bne.n	741a <disk_spi_sdhc_access_init+0xb2>
	LOG_INF("Manufacturer ID=%d OEM='%c%c' Name='%c%c%c%c%c' "
    7500:	f89d 3010 	ldrb.w	r3, [sp, #16]
    7504:	9308      	str	r3, [sp, #32]
    7506:	f89d 3011 	ldrb.w	r3, [sp, #17]
    750a:	9309      	str	r3, [sp, #36]	; 0x24
    750c:	f89d 3012 	ldrb.w	r3, [sp, #18]
    7510:	930a      	str	r3, [sp, #40]	; 0x28
    7512:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7516:	930b      	str	r3, [sp, #44]	; 0x2c
    7518:	f89d 3014 	ldrb.w	r3, [sp, #20]
    751c:	930c      	str	r3, [sp, #48]	; 0x30
    751e:	f89d 3015 	ldrb.w	r3, [sp, #21]
    7522:	930d      	str	r3, [sp, #52]	; 0x34
    7524:	f89d 3016 	ldrb.w	r3, [sp, #22]
    7528:	930e      	str	r3, [sp, #56]	; 0x38
    752a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    752e:	930f      	str	r3, [sp, #60]	; 0x3c
    7530:	f10d 0019 	add.w	r0, sp, #25
    7534:	f89d 3018 	ldrb.w	r3, [sp, #24]
    7538:	9310      	str	r3, [sp, #64]	; 0x40
    753a:	f008 fbce 	bl	fcda <sys_get_be32>
    753e:	4633      	mov	r3, r6
    7540:	9011      	str	r0, [sp, #68]	; 0x44
    7542:	220a      	movs	r2, #10
    7544:	4831      	ldr	r0, [pc, #196]	; (760c <disk_spi_sdhc_access_init+0x2a4>)
    7546:	a908      	add	r1, sp, #32
    7548:	f008 f886 	bl	f658 <log_n>
	const struct sdhc_spi_config *cfg = dev->config;
    754c:	687b      	ldr	r3, [r7, #4]
	struct sdhc_spi_data *data = dev->data;
    754e:	693a      	ldr	r2, [r7, #16]
		data->spi_cfg = &cfg->oper_cfg;
    7550:	330c      	adds	r3, #12
	data->status = status;
    7552:	7414      	strb	r4, [r2, #16]
		data->spi_cfg = &cfg->oper_cfg;
    7554:	6053      	str	r3, [r2, #4]
	return 0;
    7556:	e760      	b.n	741a <disk_spi_sdhc_access_init+0xb2>
		csize = sys_get_be32(&buf[6]) & ((1 << 22) - 1);
    7558:	f10d 0016 	add.w	r0, sp, #22
    755c:	f008 fbbd 	bl	fcda <sys_get_be32>
		if (csize < 4112) {
    7560:	f241 030f 	movw	r3, #4111	; 0x100f
		csize = sys_get_be32(&buf[6]) & ((1 << 22) - 1);
    7564:	f3c0 0015 	ubfx	r0, r0, #0, #22
		if (csize < 4112) {
    7568:	4298      	cmp	r0, r3
    756a:	d942      	bls.n	75f2 <disk_spi_sdhc_access_init+0x28a>
		data->sector_count = (csize + 1) *
    756c:	3001      	adds	r0, #1
    756e:	0280      	lsls	r0, r0, #10
    7570:	e7a7      	b.n	74c2 <disk_spi_sdhc_access_init+0x15a>
	ocr = 0;
    7572:	9001      	str	r0, [sp, #4]
	if (is_v2) {
    7574:	2e00      	cmp	r6, #0
    7576:	f47f af7c 	bne.w	7472 <disk_spi_sdhc_access_init+0x10a>
    757a:	4e20      	ldr	r6, [pc, #128]	; (75fc <disk_spi_sdhc_access_init+0x294>)
	err = sdhc_spi_tx_cmd(data, cmd, payload);
    757c:	213a      	movs	r1, #58	; 0x3a
    757e:	2200      	movs	r2, #0
    7580:	4628      	mov	r0, r5
    7582:	f008 fc9a 	bl	feba <sdhc_spi_tx_cmd>
	if (err != 0) {
    7586:	4601      	mov	r1, r0
    7588:	b920      	cbnz	r0, 7594 <disk_spi_sdhc_access_init+0x22c>
    758a:	a901      	add	r1, sp, #4
    758c:	4628      	mov	r0, r5
    758e:	f008 fc45 	bl	fe1c <sdhc_spi_cmd_r37_raw.part.0>
    7592:	4601      	mov	r1, r0
    7594:	4630      	mov	r0, r6
    7596:	f008 fbd2 	bl	fd3e <sdhc_map_flags>
			if (err != 0) {
    759a:	4604      	mov	r4, r0
    759c:	2800      	cmp	r0, #0
    759e:	f47f af3c 	bne.w	741a <disk_spi_sdhc_access_init+0xb2>
			if ((ocr & SDHC_BUSY) != 0U) {
    75a2:	9b01      	ldr	r3, [sp, #4]
    75a4:	2b00      	cmp	r3, #0
    75a6:	db04      	blt.n	75b2 <disk_spi_sdhc_access_init+0x24a>
		} while (sdhc_retry_ok(&retry));
    75a8:	a802      	add	r0, sp, #8
    75aa:	f008 fbd4 	bl	fd56 <sdhc_retry_ok>
    75ae:	2800      	cmp	r0, #0
    75b0:	d1e4      	bne.n	757c <disk_spi_sdhc_access_init+0x214>
	if ((ocr & SDHC_CCS) != 0U) {
    75b2:	9b01      	ldr	r3, [sp, #4]
    75b4:	005b      	lsls	r3, r3, #1
    75b6:	f57f af5c 	bpl.w	7472 <disk_spi_sdhc_access_init+0x10a>
		data->high_capacity = true;
    75ba:	2301      	movs	r3, #1
    75bc:	722b      	strb	r3, [r5, #8]
	err = sdhc_spi_cmd_r1(data, SDHC_SEND_CSD, 0);
    75be:	2200      	movs	r2, #0
    75c0:	2109      	movs	r1, #9
    75c2:	4628      	mov	r0, r5
    75c4:	f7ff fdea 	bl	719c <sdhc_spi_cmd_r1>
	if (err != 0) {
    75c8:	4604      	mov	r4, r0
    75ca:	2800      	cmp	r0, #0
    75cc:	f47f af25 	bne.w	741a <disk_spi_sdhc_access_init+0xb2>
	err = sdhc_spi_rx_block(data, buf, sizeof(buf));
    75d0:	2210      	movs	r2, #16
    75d2:	eb0d 0102 	add.w	r1, sp, r2
    75d6:	4628      	mov	r0, r5
    75d8:	f7ff fd54 	bl	7084 <sdhc_spi_rx_block>
	if (err != 0) {
    75dc:	4604      	mov	r4, r0
    75de:	2800      	cmp	r0, #0
    75e0:	f47f af1b 	bne.w	741a <disk_spi_sdhc_access_init+0xb2>
	structure = (buf[0] >> 6);
    75e4:	f89d 3010 	ldrb.w	r3, [sp, #16]
	switch (structure) {
    75e8:	099b      	lsrs	r3, r3, #6
    75ea:	f43f af4f 	beq.w	748c <disk_spi_sdhc_access_init+0x124>
    75ee:	2b01      	cmp	r3, #1
    75f0:	d0b2      	beq.n	7558 <disk_spi_sdhc_access_init+0x1f0>
			return -ENOTSUP;
    75f2:	f06f 0485 	mvn.w	r4, #133	; 0x85
    75f6:	e710      	b.n	741a <disk_spi_sdhc_access_init+0xb2>
    75f8:	00014541 	.word	0x00014541
    75fc:	00014581 	.word	0x00014581
    7600:	000130a4 	.word	0x000130a4
    7604:	000130ec 	.word	0x000130ec
    7608:	000144bc 	.word	0x000144bc
    760c:	000144d7 	.word	0x000144d7

00007610 <disk_spi_sdhc_access_read>:
{
    7610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7614:	4698      	mov	r8, r3
	struct sdhc_spi_data *data = dev->data;
    7616:	6903      	ldr	r3, [r0, #16]
	return sdhc_map_flags(sdhc_disk_status_flags, status);
    7618:	4814      	ldr	r0, [pc, #80]	; (766c <disk_spi_sdhc_access_read+0x5c>)
    761a:	691d      	ldr	r5, [r3, #16]
{
    761c:	460e      	mov	r6, r1
    761e:	7c29      	ldrb	r1, [r5, #16]
    7620:	4617      	mov	r7, r2
    7622:	f008 fb8c 	bl	fd3e <sdhc_map_flags>
	if (err != 0) {
    7626:	4604      	mov	r4, r0
    7628:	b938      	cbnz	r0, 763a <disk_spi_sdhc_access_read+0x2a>
    762a:	4643      	mov	r3, r8
    762c:	463a      	mov	r2, r7
    762e:	4631      	mov	r1, r6
    7630:	4628      	mov	r0, r5
    7632:	f008 fc68 	bl	ff06 <sdhc_spi_read.part.0>
	if (err != 0 && sdhc_is_retryable(err)) {
    7636:	4604      	mov	r4, r0
    7638:	b1a0      	cbz	r0, 7664 <disk_spi_sdhc_access_read+0x54>
    763a:	4620      	mov	r0, r4
    763c:	f008 fb5b 	bl	fcf6 <sdhc_is_retryable>
    7640:	b180      	cbz	r0, 7664 <disk_spi_sdhc_access_read+0x54>
		sdhc_spi_recover(data);
    7642:	4628      	mov	r0, r5
    7644:	f008 fc5b 	bl	fefe <sdhc_spi_recover>
    7648:	7c29      	ldrb	r1, [r5, #16]
    764a:	4808      	ldr	r0, [pc, #32]	; (766c <disk_spi_sdhc_access_read+0x5c>)
    764c:	f008 fb77 	bl	fd3e <sdhc_map_flags>
	if (err != 0) {
    7650:	4604      	mov	r4, r0
    7652:	b938      	cbnz	r0, 7664 <disk_spi_sdhc_access_read+0x54>
    7654:	4643      	mov	r3, r8
    7656:	463a      	mov	r2, r7
    7658:	4631      	mov	r1, r6
    765a:	4628      	mov	r0, r5
}
    765c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7660:	f008 bc51 	b.w	ff06 <sdhc_spi_read.part.0>
    7664:	4620      	mov	r0, r4
    7666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    766a:	bf00      	nop
    766c:	00014539 	.word	0x00014539

00007670 <disk_spi_sdhc_access_write>:
{
    7670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7674:	461e      	mov	r6, r3
	struct sdhc_spi_data *data = dev->data;
    7676:	6903      	ldr	r3, [r0, #16]
    7678:	4828      	ldr	r0, [pc, #160]	; (771c <disk_spi_sdhc_access_write+0xac>)
    767a:	691d      	ldr	r5, [r3, #16]
	if (count > 2) {
    767c:	2e02      	cmp	r6, #2
{
    767e:	460f      	mov	r7, r1
    7680:	4690      	mov	r8, r2
    7682:	7c29      	ldrb	r1, [r5, #16]
	if (count > 2) {
    7684:	d926      	bls.n	76d4 <disk_spi_sdhc_access_write+0x64>
    7686:	f008 fb5a 	bl	fd3e <sdhc_map_flags>
	if (err != 0) {
    768a:	4604      	mov	r4, r0
    768c:	b958      	cbnz	r0, 76a6 <disk_spi_sdhc_access_write+0x36>
    768e:	4633      	mov	r3, r6
    7690:	4642      	mov	r2, r8
    7692:	4639      	mov	r1, r7
    7694:	4628      	mov	r0, r5
    7696:	f7ff fd8d 	bl	71b4 <sdhc_spi_write_multi.part.0>
		if (err != 0 && sdhc_is_retryable(err)) {
    769a:	4604      	mov	r4, r0
    769c:	b918      	cbnz	r0, 76a6 <disk_spi_sdhc_access_write+0x36>
{
    769e:	2400      	movs	r4, #0
}
    76a0:	4620      	mov	r0, r4
    76a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (err != 0 && sdhc_is_retryable(err)) {
    76a6:	4620      	mov	r0, r4
    76a8:	f008 fb25 	bl	fcf6 <sdhc_is_retryable>
    76ac:	2800      	cmp	r0, #0
    76ae:	d0f7      	beq.n	76a0 <disk_spi_sdhc_access_write+0x30>
			sdhc_spi_recover(data);
    76b0:	4628      	mov	r0, r5
    76b2:	f008 fc24 	bl	fefe <sdhc_spi_recover>
    76b6:	7c29      	ldrb	r1, [r5, #16]
    76b8:	4818      	ldr	r0, [pc, #96]	; (771c <disk_spi_sdhc_access_write+0xac>)
    76ba:	f008 fb40 	bl	fd3e <sdhc_map_flags>
	if (err != 0) {
    76be:	4604      	mov	r4, r0
    76c0:	2800      	cmp	r0, #0
    76c2:	d1ed      	bne.n	76a0 <disk_spi_sdhc_access_write+0x30>
    76c4:	4633      	mov	r3, r6
    76c6:	4642      	mov	r2, r8
    76c8:	4639      	mov	r1, r7
    76ca:	4628      	mov	r0, r5
}
    76cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    76d0:	f7ff bd70 	b.w	71b4 <sdhc_spi_write_multi.part.0>
    76d4:	f008 fb33 	bl	fd3e <sdhc_map_flags>
	if (err != 0) {
    76d8:	4604      	mov	r4, r0
    76da:	b940      	cbnz	r0, 76ee <disk_spi_sdhc_access_write+0x7e>
    76dc:	4633      	mov	r3, r6
    76de:	4642      	mov	r2, r8
    76e0:	4639      	mov	r1, r7
    76e2:	4628      	mov	r0, r5
    76e4:	f7ff fdc4 	bl	7270 <sdhc_spi_write.part.0>
		if (err != 0 && sdhc_is_retryable(err)) {
    76e8:	4604      	mov	r4, r0
    76ea:	2800      	cmp	r0, #0
    76ec:	d0d7      	beq.n	769e <disk_spi_sdhc_access_write+0x2e>
    76ee:	4620      	mov	r0, r4
    76f0:	f008 fb01 	bl	fcf6 <sdhc_is_retryable>
    76f4:	2800      	cmp	r0, #0
    76f6:	d0d3      	beq.n	76a0 <disk_spi_sdhc_access_write+0x30>
			sdhc_spi_recover(data);
    76f8:	4628      	mov	r0, r5
    76fa:	f008 fc00 	bl	fefe <sdhc_spi_recover>
    76fe:	7c29      	ldrb	r1, [r5, #16]
    7700:	4806      	ldr	r0, [pc, #24]	; (771c <disk_spi_sdhc_access_write+0xac>)
    7702:	f008 fb1c 	bl	fd3e <sdhc_map_flags>
	if (err != 0) {
    7706:	4604      	mov	r4, r0
    7708:	2800      	cmp	r0, #0
    770a:	d1c9      	bne.n	76a0 <disk_spi_sdhc_access_write+0x30>
    770c:	4633      	mov	r3, r6
    770e:	4642      	mov	r2, r8
    7710:	4639      	mov	r1, r7
    7712:	4628      	mov	r0, r5
}
    7714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7718:	f7ff bdaa 	b.w	7270 <sdhc_spi_write.part.0>
    771c:	00014539 	.word	0x00014539

00007720 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    7720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    7724:	4c0e      	ldr	r4, [pc, #56]	; (7760 <onoff_start+0x40>)
    7726:	1b05      	subs	r5, r0, r4
    7728:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    772c:	250c      	movs	r5, #12
    772e:	435d      	muls	r5, r3
{
    7730:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    7732:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
    7736:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    7738:	4420      	add	r0, r4
    773a:	2140      	movs	r1, #64	; 0x40
    773c:	f008 fc0e 	bl	ff5c <set_starting_state>
	if (err < 0) {
    7740:	1e01      	subs	r1, r0, #0
    7742:	db08      	blt.n	7756 <onoff_start+0x36>
	subdata->cb = cb;
    7744:	4b07      	ldr	r3, [pc, #28]	; (7764 <onoff_start+0x44>)
    7746:	442c      	add	r4, r5
	subdata->user_data = user_data;
    7748:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    774c:	4b06      	ldr	r3, [pc, #24]	; (7768 <onoff_start+0x48>)
    774e:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    7750:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    7754:	4718      	bx	r3
		notify(mgr, err);
    7756:	4638      	mov	r0, r7
    7758:	4633      	mov	r3, r6
}
    775a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    775e:	4718      	bx	r3
    7760:	20000a78 	.word	0x20000a78
    7764:	0000ffbf 	.word	0x0000ffbf
    7768:	000133d0 	.word	0x000133d0

0000776c <get_status>:
{
    776c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    776e:	b2cc      	uxtb	r4, r1
    7770:	2c01      	cmp	r4, #1
{
    7772:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    7774:	d908      	bls.n	7788 <get_status+0x1c>
    7776:	4908      	ldr	r1, [pc, #32]	; (7798 <get_status+0x2c>)
    7778:	4808      	ldr	r0, [pc, #32]	; (779c <get_status+0x30>)
    777a:	2279      	movs	r2, #121	; 0x79
    777c:	f007 fe23 	bl	f3c6 <printk>
    7780:	4805      	ldr	r0, [pc, #20]	; (7798 <get_status+0x2c>)
    7782:	2179      	movs	r1, #121	; 0x79
    7784:	f007 fee4 	bl	f550 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    7788:	692b      	ldr	r3, [r5, #16]
    778a:	210c      	movs	r1, #12
    778c:	fb04 3401 	mla	r4, r4, r1, r3
    7790:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    7792:	f000 0007 	and.w	r0, r0, #7
    7796:	bd38      	pop	{r3, r4, r5, pc}
    7798:	00014591 	.word	0x00014591
    779c:	00013904 	.word	0x00013904

000077a0 <stop>:
{
    77a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    77a2:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    77a4:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    77a6:	6907      	ldr	r7, [r0, #16]
{
    77a8:	4605      	mov	r5, r0
    77aa:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    77ac:	d90a      	bls.n	77c4 <stop+0x24>
    77ae:	4918      	ldr	r1, [pc, #96]	; (7810 <stop+0x70>)
    77b0:	4818      	ldr	r0, [pc, #96]	; (7814 <stop+0x74>)
    77b2:	f240 124d 	movw	r2, #333	; 0x14d
    77b6:	f007 fe06 	bl	f3c6 <printk>
    77ba:	4815      	ldr	r0, [pc, #84]	; (7810 <stop+0x70>)
    77bc:	f240 114d 	movw	r1, #333	; 0x14d
    77c0:	f007 fec6 	bl	f550 <assert_post_action>
	__asm__ volatile(
    77c4:	f04f 0320 	mov.w	r3, #32
    77c8:	f3ef 8211 	mrs	r2, BASEPRI
    77cc:	f383 8812 	msr	BASEPRI_MAX, r3
    77d0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    77d4:	230c      	movs	r3, #12
    77d6:	fb03 7104 	mla	r1, r3, r4, r7
    77da:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    77dc:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    77e0:	d001      	beq.n	77e6 <stop+0x46>
    77e2:	428e      	cmp	r6, r1
    77e4:	d111      	bne.n	780a <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    77e6:	fb03 7304 	mla	r3, r3, r4, r7
    77ea:	2101      	movs	r1, #1
    77ec:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
    77ee:	2000      	movs	r0, #0
	__asm__ volatile(
    77f0:	f382 8811 	msr	BASEPRI, r2
    77f4:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    77f8:	b930      	cbnz	r0, 7808 <stop+0x68>
	get_sub_config(dev, type)->stop();
    77fa:	6869      	ldr	r1, [r5, #4]
    77fc:	230c      	movs	r3, #12
    77fe:	fb03 1404 	mla	r4, r3, r4, r1
    7802:	6863      	ldr	r3, [r4, #4]
    7804:	4798      	blx	r3
	return 0;
    7806:	2000      	movs	r0, #0
}
    7808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    780a:	f04f 30ff 	mov.w	r0, #4294967295
    780e:	e7ef      	b.n	77f0 <stop+0x50>
    7810:	00014591 	.word	0x00014591
    7814:	00013904 	.word	0x00013904

00007818 <onoff_stop>:
{
    7818:	b570      	push	{r4, r5, r6, lr}
    781a:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    781c:	4906      	ldr	r1, [pc, #24]	; (7838 <onoff_stop+0x20>)
    781e:	1a41      	subs	r1, r0, r1
{
    7820:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    7822:	1149      	asrs	r1, r1, #5
    7824:	4805      	ldr	r0, [pc, #20]	; (783c <onoff_stop+0x24>)
    7826:	2240      	movs	r2, #64	; 0x40
    7828:	f7ff ffba 	bl	77a0 <stop>
	notify(mgr, res);
    782c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    782e:	4601      	mov	r1, r0
	notify(mgr, res);
    7830:	4620      	mov	r0, r4
}
    7832:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    7836:	4718      	bx	r3
    7838:	20000a78 	.word	0x20000a78
    783c:	00012ef4 	.word	0x00012ef4

00007840 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    7840:	2200      	movs	r2, #0
{
    7842:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    7844:	2101      	movs	r1, #1
{
    7846:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    7848:	4610      	mov	r0, r2
    784a:	f7fe f871 	bl	5930 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    784e:	2000      	movs	r0, #0
    7850:	f7fe f83c 	bl	58cc <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    7854:	480f      	ldr	r0, [pc, #60]	; (7894 <clk_init+0x54>)
    7856:	f003 fa25 	bl	aca4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    785a:	4b0f      	ldr	r3, [pc, #60]	; (7898 <clk_init+0x58>)
    785c:	4298      	cmp	r0, r3
    785e:	d115      	bne.n	788c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    7860:	f003 fa40 	bl	ace4 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    7864:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    7866:	490d      	ldr	r1, [pc, #52]	; (789c <clk_init+0x5c>)
    7868:	4630      	mov	r0, r6
    786a:	f007 fe07 	bl	f47c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    786e:	2800      	cmp	r0, #0
    7870:	db0b      	blt.n	788a <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    7872:	2501      	movs	r5, #1
    7874:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    7876:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    7878:	4908      	ldr	r1, [pc, #32]	; (789c <clk_init+0x5c>)
    787a:	f104 0020 	add.w	r0, r4, #32
    787e:	f007 fdfd 	bl	f47c <onoff_manager_init>
		if (err < 0) {
    7882:	2800      	cmp	r0, #0
    7884:	db01      	blt.n	788a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    7886:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    7888:	2000      	movs	r0, #0
}
    788a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    788c:	f06f 0004 	mvn.w	r0, #4
    7890:	e7fb      	b.n	788a <clk_init+0x4a>
    7892:	bf00      	nop
    7894:	000078d5 	.word	0x000078d5
    7898:	0bad0000 	.word	0x0bad0000
    789c:	000133e8 	.word	0x000133e8

000078a0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    78a0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    78a2:	230c      	movs	r3, #12
    78a4:	4809      	ldr	r0, [pc, #36]	; (78cc <clkstarted_handle.constprop.0+0x2c>)
    78a6:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    78a8:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    78aa:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    78ac:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    78b0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    78b2:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    78b4:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    78b6:	4418      	add	r0, r3
    78b8:	f008 fb6e 	bl	ff98 <set_on_state>
	if (callback) {
    78bc:	b12d      	cbz	r5, 78ca <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    78be:	4632      	mov	r2, r6
    78c0:	462b      	mov	r3, r5
    78c2:	4803      	ldr	r0, [pc, #12]	; (78d0 <clkstarted_handle.constprop.0+0x30>)
}
    78c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    78c8:	4718      	bx	r3
}
    78ca:	bd70      	pop	{r4, r5, r6, pc}
    78cc:	20000a78 	.word	0x20000a78
    78d0:	00012ef4 	.word	0x00012ef4

000078d4 <clock_event_handler>:
	switch (event) {
    78d4:	2801      	cmp	r0, #1
{
    78d6:	b508      	push	{r3, lr}
	switch (event) {
    78d8:	d006      	beq.n	78e8 <clock_event_handler+0x14>
    78da:	2803      	cmp	r0, #3
    78dc:	d008      	beq.n	78f0 <clock_event_handler+0x1c>
    78de:	b9a0      	cbnz	r0, 790a <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    78e0:	4b0f      	ldr	r3, [pc, #60]	; (7920 <clock_event_handler+0x4c>)
    78e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    78e4:	075b      	lsls	r3, r3, #29
    78e6:	d119      	bne.n	791c <clock_event_handler+0x48>
}
    78e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    78ec:	f7ff bfd8 	b.w	78a0 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    78f0:	490c      	ldr	r1, [pc, #48]	; (7924 <clock_event_handler+0x50>)
    78f2:	480d      	ldr	r0, [pc, #52]	; (7928 <clock_event_handler+0x54>)
    78f4:	f240 225e 	movw	r2, #606	; 0x25e
    78f8:	f007 fd65 	bl	f3c6 <printk>
    78fc:	f240 215e 	movw	r1, #606	; 0x25e
}
    7900:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    7904:	4807      	ldr	r0, [pc, #28]	; (7924 <clock_event_handler+0x50>)
    7906:	f007 be23 	b.w	f550 <assert_post_action>
    790a:	4906      	ldr	r1, [pc, #24]	; (7924 <clock_event_handler+0x50>)
    790c:	4806      	ldr	r0, [pc, #24]	; (7928 <clock_event_handler+0x54>)
    790e:	f240 2262 	movw	r2, #610	; 0x262
    7912:	f007 fd58 	bl	f3c6 <printk>
    7916:	f240 2162 	movw	r1, #610	; 0x262
    791a:	e7f1      	b.n	7900 <clock_event_handler+0x2c>
}
    791c:	bd08      	pop	{r3, pc}
    791e:	bf00      	nop
    7920:	20000a78 	.word	0x20000a78
    7924:	00014591 	.word	0x00014591
    7928:	00013904 	.word	0x00013904

0000792c <generic_hfclk_start>:
{
    792c:	b508      	push	{r3, lr}
	__asm__ volatile(
    792e:	f04f 0320 	mov.w	r3, #32
    7932:	f3ef 8111 	mrs	r1, BASEPRI
    7936:	f383 8812 	msr	BASEPRI_MAX, r3
    793a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    793e:	4a12      	ldr	r2, [pc, #72]	; (7988 <generic_hfclk_start+0x5c>)
    7940:	6813      	ldr	r3, [r2, #0]
    7942:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    7946:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    794a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    794c:	d00c      	beq.n	7968 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    794e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7952:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    7956:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    795a:	f013 0301 	ands.w	r3, r3, #1
    795e:	d003      	beq.n	7968 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    7960:	480a      	ldr	r0, [pc, #40]	; (798c <generic_hfclk_start+0x60>)
    7962:	f008 fb19 	bl	ff98 <set_on_state>
			already_started = true;
    7966:	2301      	movs	r3, #1
	__asm__ volatile(
    7968:	f381 8811 	msr	BASEPRI, r1
    796c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    7970:	b123      	cbz	r3, 797c <generic_hfclk_start+0x50>
}
    7972:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    7976:	2000      	movs	r0, #0
    7978:	f7ff bf92 	b.w	78a0 <clkstarted_handle.constprop.0>
}
    797c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    7980:	2001      	movs	r0, #1
    7982:	f003 b9cb 	b.w	ad1c <nrfx_clock_start>
    7986:	bf00      	nop
    7988:	20000ad0 	.word	0x20000ad0
    798c:	20000ac0 	.word	0x20000ac0

00007990 <lfclk_start>:
{
    7990:	b510      	push	{r4, lr}
	if (!once) {
    7992:	4c07      	ldr	r4, [pc, #28]	; (79b0 <lfclk_start+0x20>)
    7994:	7823      	ldrb	r3, [r4, #0]
    7996:	b92b      	cbnz	r3, 79a4 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    7998:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    799c:	f00a fc68 	bl	12270 <z_impl_k_busy_wait>
		once = true;
    79a0:	2301      	movs	r3, #1
    79a2:	7023      	strb	r3, [r4, #0]
}
    79a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    79a8:	2000      	movs	r0, #0
    79aa:	f003 b9b7 	b.w	ad1c <nrfx_clock_start>
    79ae:	bf00      	nop
    79b0:	20000f96 	.word	0x20000f96

000079b4 <generic_hfclk_stop>:
    79b4:	4b09      	ldr	r3, [pc, #36]	; (79dc <generic_hfclk_stop+0x28>)
    79b6:	f3bf 8f5b 	dmb	ish
    79ba:	e853 2f00 	ldrex	r2, [r3]
    79be:	f022 0102 	bic.w	r1, r2, #2
    79c2:	e843 1000 	strex	r0, r1, [r3]
    79c6:	2800      	cmp	r0, #0
    79c8:	d1f7      	bne.n	79ba <generic_hfclk_stop+0x6>
    79ca:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    79ce:	07d3      	lsls	r3, r2, #31
    79d0:	d402      	bmi.n	79d8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    79d2:	2001      	movs	r0, #1
    79d4:	f003 ba0a 	b.w	adec <nrfx_clock_stop>
}
    79d8:	4770      	bx	lr
    79da:	bf00      	nop
    79dc:	20000ad0 	.word	0x20000ad0

000079e0 <api_blocking_start>:
{
    79e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    79e2:	2200      	movs	r2, #0
    79e4:	2301      	movs	r3, #1
    79e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    79ea:	4a09      	ldr	r2, [pc, #36]	; (7a10 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    79ec:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    79f0:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    79f2:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    79f6:	f008 faf1 	bl	ffdc <api_start>
	if (err < 0) {
    79fa:	2800      	cmp	r0, #0
    79fc:	db05      	blt.n	7a0a <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    79fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    7a02:	2300      	movs	r3, #0
    7a04:	4668      	mov	r0, sp
    7a06:	f004 fe85 	bl	c714 <z_impl_k_sem_take>
}
    7a0a:	b005      	add	sp, #20
    7a0c:	f85d fb04 	ldr.w	pc, [sp], #4
    7a10:	0000ffd7 	.word	0x0000ffd7

00007a14 <z_nrf_clock_control_get_onoff>:
}
    7a14:	4b02      	ldr	r3, [pc, #8]	; (7a20 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    7a16:	b2c0      	uxtb	r0, r0
}
    7a18:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    7a1c:	4770      	bx	lr
    7a1e:	bf00      	nop
    7a20:	20000a78 	.word	0x20000a78

00007a24 <z_nrf_clock_control_lf_on>:
{
    7a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    7a28:	4948      	ldr	r1, [pc, #288]	; (7b4c <z_nrf_clock_control_lf_on+0x128>)
    7a2a:	f3bf 8f5b 	dmb	ish
    7a2e:	4605      	mov	r5, r0
    7a30:	2201      	movs	r2, #1
    7a32:	e851 3f00 	ldrex	r3, [r1]
    7a36:	e841 2000 	strex	r0, r2, [r1]
    7a3a:	2800      	cmp	r0, #0
    7a3c:	d1f9      	bne.n	7a32 <z_nrf_clock_control_lf_on+0xe>
    7a3e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    7a42:	b99b      	cbnz	r3, 7a6c <z_nrf_clock_control_lf_on+0x48>
	*notify = (struct sys_notify){
    7a44:	4942      	ldr	r1, [pc, #264]	; (7b50 <z_nrf_clock_control_lf_on+0x12c>)
		err = onoff_request(mgr, &cli);
    7a46:	4843      	ldr	r0, [pc, #268]	; (7b54 <z_nrf_clock_control_lf_on+0x130>)
    7a48:	604b      	str	r3, [r1, #4]
    7a4a:	60cb      	str	r3, [r1, #12]
    7a4c:	608a      	str	r2, [r1, #8]
    7a4e:	f7fb feeb 	bl	3828 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    7a52:	2800      	cmp	r0, #0
    7a54:	da0a      	bge.n	7a6c <z_nrf_clock_control_lf_on+0x48>
    7a56:	4940      	ldr	r1, [pc, #256]	; (7b58 <z_nrf_clock_control_lf_on+0x134>)
    7a58:	4840      	ldr	r0, [pc, #256]	; (7b5c <z_nrf_clock_control_lf_on+0x138>)
    7a5a:	f44f 7208 	mov.w	r2, #544	; 0x220
    7a5e:	f007 fcb2 	bl	f3c6 <printk>
    7a62:	483d      	ldr	r0, [pc, #244]	; (7b58 <z_nrf_clock_control_lf_on+0x134>)
    7a64:	f44f 7108 	mov.w	r1, #544	; 0x220
    7a68:	f007 fd72 	bl	f550 <assert_post_action>
	switch (start_mode) {
    7a6c:	b3ad      	cbz	r5, 7ada <z_nrf_clock_control_lf_on+0xb6>
    7a6e:	1e6b      	subs	r3, r5, #1
    7a70:	2b01      	cmp	r3, #1
    7a72:	d856      	bhi.n	7b22 <z_nrf_clock_control_lf_on+0xfe>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    7a74:	2d01      	cmp	r5, #1
    7a76:	d107      	bne.n	7a88 <z_nrf_clock_control_lf_on+0x64>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    7a78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7a7c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    7a80:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    7a84:	2b01      	cmp	r3, #1
    7a86:	d028      	beq.n	7ada <z_nrf_clock_control_lf_on+0xb6>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    7a88:	f00a fbb3 	bl	121f2 <k_is_in_isr>
    7a8c:	4604      	mov	r4, r0
    7a8e:	b918      	cbnz	r0, 7a98 <z_nrf_clock_control_lf_on+0x74>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    7a90:	4b33      	ldr	r3, [pc, #204]	; (7b60 <z_nrf_clock_control_lf_on+0x13c>)
	int key = isr_mode ? irq_lock() : 0;
    7a92:	781b      	ldrb	r3, [r3, #0]
    7a94:	2b00      	cmp	r3, #0
    7a96:	d151      	bne.n	7b3c <z_nrf_clock_control_lf_on+0x118>
	__asm__ volatile(
    7a98:	f04f 0320 	mov.w	r3, #32
    7a9c:	f3ef 8611 	mrs	r6, BASEPRI
    7aa0:	f383 8812 	msr	BASEPRI_MAX, r3
    7aa4:	f3bf 8f6f 	isb	sy
    7aa8:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7aaa:	4f2e      	ldr	r7, [pc, #184]	; (7b64 <z_nrf_clock_control_lf_on+0x140>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7aac:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 7b68 <z_nrf_clock_control_lf_on+0x144>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7ab0:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 7b6c <z_nrf_clock_control_lf_on+0x148>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7ab4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7ab8:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7abc:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    7ac0:	03d2      	lsls	r2, r2, #15
    7ac2:	d50c      	bpl.n	7ade <z_nrf_clock_control_lf_on+0xba>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    7ac4:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    7ac8:	2b01      	cmp	r3, #1
    7aca:	d001      	beq.n	7ad0 <z_nrf_clock_control_lf_on+0xac>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    7acc:	2d01      	cmp	r5, #1
    7ace:	d106      	bne.n	7ade <z_nrf_clock_control_lf_on+0xba>
	if (isr_mode) {
    7ad0:	b30c      	cbz	r4, 7b16 <z_nrf_clock_control_lf_on+0xf2>
	__asm__ volatile(
    7ad2:	f386 8811 	msr	BASEPRI, r6
    7ad6:	f3bf 8f6f 	isb	sy
}
    7ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    7ade:	b1ac      	cbz	r4, 7b0c <z_nrf_clock_control_lf_on+0xe8>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    7ae0:	4630      	mov	r0, r6
    7ae2:	f7fd feb1 	bl	5848 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    7ae6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7aea:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    7aee:	2b00      	cmp	r3, #0
    7af0:	d1e0      	bne.n	7ab4 <z_nrf_clock_control_lf_on+0x90>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7af2:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    7af4:	2900      	cmp	r1, #0
    7af6:	d0dd      	beq.n	7ab4 <z_nrf_clock_control_lf_on+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7af8:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    7afa:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    7afc:	2301      	movs	r3, #1
    7afe:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    7b02:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7b06:	f8c9 3000 	str.w	r3, [r9]
}
    7b0a:	e7d3      	b.n	7ab4 <z_nrf_clock_control_lf_on+0x90>
	return z_impl_k_sleep(timeout);
    7b0c:	2100      	movs	r1, #0
    7b0e:	2021      	movs	r0, #33	; 0x21
    7b10:	f005 fd6a 	bl	d5e8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    7b14:	e7e7      	b.n	7ae6 <z_nrf_clock_control_lf_on+0xc2>
    p_reg->INTENSET = mask;
    7b16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7b1a:	2202      	movs	r2, #2
    7b1c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    7b20:	e7db      	b.n	7ada <z_nrf_clock_control_lf_on+0xb6>
		__ASSERT_NO_MSG(false);
    7b22:	490d      	ldr	r1, [pc, #52]	; (7b58 <z_nrf_clock_control_lf_on+0x134>)
    7b24:	480d      	ldr	r0, [pc, #52]	; (7b5c <z_nrf_clock_control_lf_on+0x138>)
    7b26:	f240 2232 	movw	r2, #562	; 0x232
    7b2a:	f007 fc4c 	bl	f3c6 <printk>
}
    7b2e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    7b32:	4809      	ldr	r0, [pc, #36]	; (7b58 <z_nrf_clock_control_lf_on+0x134>)
    7b34:	f240 2132 	movw	r1, #562	; 0x232
    7b38:	f007 bd0a 	b.w	f550 <assert_post_action>
    p_reg->INTENCLR = mask;
    7b3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7b40:	2202      	movs	r2, #2
    7b42:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    7b46:	4606      	mov	r6, r0
}
    7b48:	e7af      	b.n	7aaa <z_nrf_clock_control_lf_on+0x86>
    7b4a:	bf00      	nop
    7b4c:	20000ad4 	.word	0x20000ad4
    7b50:	20000a68 	.word	0x20000a68
    7b54:	20000a98 	.word	0x20000a98
    7b58:	00014591 	.word	0x00014591
    7b5c:	00013904 	.word	0x00013904
    7b60:	20001608 	.word	0x20001608
    7b64:	40000104 	.word	0x40000104
    7b68:	e000e100 	.word	0xe000e100
    7b6c:	40000008 	.word	0x40000008

00007b70 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    7b70:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    7b72:	4c04      	ldr	r4, [pc, #16]	; (7b84 <rtt_console_init+0x14>)
    7b74:	4620      	mov	r0, r4
    7b76:	f7fb fc59 	bl	342c <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    7b7a:	4620      	mov	r0, r4
    7b7c:	f7fe fc44 	bl	6408 <__stdout_hook_install>

	return 0;
}
    7b80:	2000      	movs	r0, #0
    7b82:	bd10      	pop	{r4, pc}
    7b84:	00007b89 	.word	0x00007b89

00007b88 <rtt_console_out>:
{
    7b88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    7b8c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 7bf0 <rtt_console_out+0x68>
    7b90:	4e16      	ldr	r6, [pc, #88]	; (7bec <rtt_console_out+0x64>)
	char c = (char)character;
    7b92:	f88d 0007 	strb.w	r0, [sp, #7]
{
    7b96:	4604      	mov	r4, r0
	char c = (char)character;
    7b98:	2503      	movs	r5, #3
    7b9a:	f04f 33ff 	mov.w	r3, #4294967295
    7b9e:	f04f 32ff 	mov.w	r2, #4294967295
    7ba2:	4640      	mov	r0, r8
    7ba4:	f004 fc0c 	bl	c3c0 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    7ba8:	2201      	movs	r2, #1
    7baa:	f10d 0107 	add.w	r1, sp, #7
    7bae:	2000      	movs	r0, #0
    7bb0:	f003 fff8 	bl	bba4 <SEGGER_RTT_WriteNoLock>
    7bb4:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    7bb6:	4640      	mov	r0, r8
    7bb8:	f004 fcda 	bl	c570 <z_impl_k_mutex_unlock>
		if (cnt) {
    7bbc:	b12f      	cbz	r7, 7bca <rtt_console_out+0x42>
			host_present = true;
    7bbe:	2301      	movs	r3, #1
    7bc0:	7033      	strb	r3, [r6, #0]
}
    7bc2:	4620      	mov	r0, r4
    7bc4:	b002      	add	sp, #8
    7bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    7bca:	7833      	ldrb	r3, [r6, #0]
    7bcc:	2b00      	cmp	r3, #0
    7bce:	d0f8      	beq.n	7bc2 <rtt_console_out+0x3a>
			if (max_cnt) {
    7bd0:	3d01      	subs	r5, #1
    7bd2:	d008      	beq.n	7be6 <rtt_console_out+0x5e>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    7bd4:	f00a fb0d 	bl	121f2 <k_is_in_isr>
    7bd8:	2800      	cmp	r0, #0
    7bda:	d1de      	bne.n	7b9a <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    7bdc:	2100      	movs	r1, #0
    7bde:	2042      	movs	r0, #66	; 0x42
    7be0:	f005 fd02 	bl	d5e8 <z_impl_k_sleep>
    7be4:	e7d9      	b.n	7b9a <rtt_console_out+0x12>
				host_present = false;
    7be6:	7035      	strb	r5, [r6, #0]
    7be8:	e7eb      	b.n	7bc2 <rtt_console_out+0x3a>
    7bea:	bf00      	nop
    7bec:	20000f97 	.word	0x20000f97
    7bf0:	200003c8 	.word	0x200003c8

00007bf4 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    7bf4:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    7bf6:	6905      	ldr	r5, [r0, #16]
{
    7bf8:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    7bfa:	460c      	mov	r4, r1
    7bfc:	b941      	cbnz	r1, 7c10 <gpio_nrfx_manage_callback+0x1c>
    7bfe:	491e      	ldr	r1, [pc, #120]	; (7c78 <gpio_nrfx_manage_callback+0x84>)
    7c00:	481e      	ldr	r0, [pc, #120]	; (7c7c <gpio_nrfx_manage_callback+0x88>)
    7c02:	2224      	movs	r2, #36	; 0x24
    7c04:	f007 fbdf 	bl	f3c6 <printk>
    7c08:	481b      	ldr	r0, [pc, #108]	; (7c78 <gpio_nrfx_manage_callback+0x84>)
    7c0a:	2124      	movs	r1, #36	; 0x24
    7c0c:	f007 fca0 	bl	f550 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    7c10:	6863      	ldr	r3, [r4, #4]
    7c12:	b943      	cbnz	r3, 7c26 <gpio_nrfx_manage_callback+0x32>
    7c14:	4918      	ldr	r1, [pc, #96]	; (7c78 <gpio_nrfx_manage_callback+0x84>)
    7c16:	4819      	ldr	r0, [pc, #100]	; (7c7c <gpio_nrfx_manage_callback+0x88>)
    7c18:	2225      	movs	r2, #37	; 0x25
    7c1a:	f007 fbd4 	bl	f3c6 <printk>
    7c1e:	4816      	ldr	r0, [pc, #88]	; (7c78 <gpio_nrfx_manage_callback+0x84>)
    7c20:	2125      	movs	r1, #37	; 0x25
    7c22:	f007 fc95 	bl	f550 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    7c26:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    7c28:	b15b      	cbz	r3, 7c42 <gpio_nrfx_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7c2a:	2200      	movs	r2, #0
    7c2c:	429c      	cmp	r4, r3
    7c2e:	d113      	bne.n	7c58 <gpio_nrfx_manage_callback+0x64>
Z_GENLIST_REMOVE(slist, snode)
    7c30:	6823      	ldr	r3, [r4, #0]
    7c32:	b95a      	cbnz	r2, 7c4c <gpio_nrfx_manage_callback+0x58>
    7c34:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    7c36:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    7c38:	4294      	cmp	r4, r2
    7c3a:	d100      	bne.n	7c3e <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
    7c3c:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    7c3e:	2300      	movs	r3, #0
    7c40:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    7c42:	b976      	cbnz	r6, 7c62 <gpio_nrfx_manage_callback+0x6e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    7c44:	2000      	movs	r0, #0
				     callback, set);
}
    7c46:	bd70      	pop	{r4, r5, r6, pc}
    7c48:	460b      	mov	r3, r1
    7c4a:	e7ef      	b.n	7c2c <gpio_nrfx_manage_callback+0x38>
    7c4c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    7c4e:	68ab      	ldr	r3, [r5, #8]
    7c50:	429c      	cmp	r4, r3
	list->tail = node;
    7c52:	bf08      	it	eq
    7c54:	60aa      	streq	r2, [r5, #8]
}
    7c56:	e7f2      	b.n	7c3e <gpio_nrfx_manage_callback+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    7c58:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7c5a:	461a      	mov	r2, r3
    7c5c:	2900      	cmp	r1, #0
    7c5e:	d1f3      	bne.n	7c48 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
    7c60:	b13e      	cbz	r6, 7c72 <gpio_nrfx_manage_callback+0x7e>
Z_GENLIST_PREPEND(slist, snode)
    7c62:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    7c64:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    7c66:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    7c68:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    7c6a:	2800      	cmp	r0, #0
    7c6c:	d1ea      	bne.n	7c44 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
    7c6e:	60ac      	str	r4, [r5, #8]
}
    7c70:	e7e9      	b.n	7c46 <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
    7c72:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    7c76:	e7e6      	b.n	7c46 <gpio_nrfx_manage_callback+0x52>
    7c78:	000145ee 	.word	0x000145ee
    7c7c:	00013904 	.word	0x00013904

00007c80 <gpio_nrfx_pin_interrupt_configure>:
{
    7c80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    7c82:	6840      	ldr	r0, [r0, #4]
    7c84:	7b05      	ldrb	r5, [r0, #12]
    7c86:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    7c8a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    7c8e:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    7c92:	f04f 0500 	mov.w	r5, #0
    7c96:	d104      	bne.n	7ca2 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    7c98:	4620      	mov	r0, r4
    7c9a:	f003 fbdb 	bl	b454 <nrfx_gpiote_trigger_disable>
	return 0;
    7c9e:	2000      	movs	r0, #0
    7ca0:	e04d      	b.n	7d3e <gpio_nrfx_pin_interrupt_configure+0xbe>
	if (mode == GPIO_INT_MODE_LEVEL) {
    7ca2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    7ca6:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    7caa:	d14a      	bne.n	7d42 <gpio_nrfx_pin_interrupt_configure+0xc2>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    7cac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    7cb0:	bf0c      	ite	eq
    7cb2:	2304      	moveq	r3, #4
    7cb4:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    7cb6:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    7cba:	6883      	ldr	r3, [r0, #8]
    7cbc:	fa23 f101 	lsr.w	r1, r3, r1
    7cc0:	07c9      	lsls	r1, r1, #31
    7cc2:	d44a      	bmi.n	7d5a <gpio_nrfx_pin_interrupt_configure+0xda>
    7cc4:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    7cc8:	d147      	bne.n	7d5a <gpio_nrfx_pin_interrupt_configure+0xda>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    7cca:	0966      	lsrs	r6, r4, #5
    7ccc:	bf0c      	ite	eq
    7cce:	f04f 33ff 	moveq.w	r3, #4294967295
    7cd2:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    7cd4:	f004 051f 	and.w	r5, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
    7cd8:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7cda:	07da      	lsls	r2, r3, #31
    7cdc:	d40a      	bmi.n	7cf4 <gpio_nrfx_pin_interrupt_configure+0x74>
    7cde:	4927      	ldr	r1, [pc, #156]	; (7d7c <gpio_nrfx_pin_interrupt_configure+0xfc>)
    7ce0:	4827      	ldr	r0, [pc, #156]	; (7d80 <gpio_nrfx_pin_interrupt_configure+0x100>)
    7ce2:	f240 2229 	movw	r2, #553	; 0x229
    7ce6:	f007 fb6e 	bl	f3c6 <printk>
    7cea:	4824      	ldr	r0, [pc, #144]	; (7d7c <gpio_nrfx_pin_interrupt_configure+0xfc>)
    7cec:	f240 2129 	movw	r1, #553	; 0x229
    7cf0:	f007 fc2e 	bl	f550 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7cf4:	b156      	cbz	r6, 7d0c <gpio_nrfx_pin_interrupt_configure+0x8c>
            NRFX_ASSERT(0);
    7cf6:	4921      	ldr	r1, [pc, #132]	; (7d7c <gpio_nrfx_pin_interrupt_configure+0xfc>)
    7cf8:	4821      	ldr	r0, [pc, #132]	; (7d80 <gpio_nrfx_pin_interrupt_configure+0x100>)
    7cfa:	f240 222e 	movw	r2, #558	; 0x22e
    7cfe:	f007 fb62 	bl	f3c6 <printk>
    7d02:	481e      	ldr	r0, [pc, #120]	; (7d7c <gpio_nrfx_pin_interrupt_configure+0xfc>)
    7d04:	f240 212e 	movw	r1, #558	; 0x22e
    7d08:	f007 fc22 	bl	f550 <assert_post_action>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    7d0c:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    7d10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7d14:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    7d18:	07db      	lsls	r3, r3, #31
    7d1a:	d41e      	bmi.n	7d5a <gpio_nrfx_pin_interrupt_configure+0xda>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    7d1c:	f10d 0507 	add.w	r5, sp, #7
    7d20:	4629      	mov	r1, r5
    7d22:	4620      	mov	r0, r4
    7d24:	f003 faca 	bl	b2bc <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    7d28:	4b16      	ldr	r3, [pc, #88]	; (7d84 <gpio_nrfx_pin_interrupt_configure+0x104>)
    7d2a:	4298      	cmp	r0, r3
    7d2c:	d114      	bne.n	7d58 <gpio_nrfx_pin_interrupt_configure+0xd8>
			err = nrfx_gpiote_channel_alloc(&ch);
    7d2e:	4628      	mov	r0, r5
    7d30:	f003 fb20 	bl	b374 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    7d34:	4b14      	ldr	r3, [pc, #80]	; (7d88 <gpio_nrfx_pin_interrupt_configure+0x108>)
    7d36:	4298      	cmp	r0, r3
    7d38:	d00e      	beq.n	7d58 <gpio_nrfx_pin_interrupt_configure+0xd8>
				return -ENOMEM;
    7d3a:	f06f 000b 	mvn.w	r0, #11
}
    7d3e:	b004      	add	sp, #16
    7d40:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    7d42:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    7d46:	d005      	beq.n	7d54 <gpio_nrfx_pin_interrupt_configure+0xd4>
    7d48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    7d4c:	bf0c      	ite	eq
    7d4e:	2302      	moveq	r3, #2
    7d50:	2301      	movne	r3, #1
    7d52:	e7b0      	b.n	7cb6 <gpio_nrfx_pin_interrupt_configure+0x36>
    7d54:	2303      	movs	r3, #3
    7d56:	e7ae      	b.n	7cb6 <gpio_nrfx_pin_interrupt_configure+0x36>
		trigger_config.p_in_channel = &ch;
    7d58:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    7d5a:	2300      	movs	r3, #0
    7d5c:	4619      	mov	r1, r3
    7d5e:	aa02      	add	r2, sp, #8
    7d60:	4620      	mov	r0, r4
    7d62:	f003 f98d 	bl	b080 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    7d66:	4b08      	ldr	r3, [pc, #32]	; (7d88 <gpio_nrfx_pin_interrupt_configure+0x108>)
    7d68:	4298      	cmp	r0, r3
    7d6a:	d104      	bne.n	7d76 <gpio_nrfx_pin_interrupt_configure+0xf6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    7d6c:	2101      	movs	r1, #1
    7d6e:	4620      	mov	r0, r4
    7d70:	f003 fb06 	bl	b380 <nrfx_gpiote_trigger_enable>
    7d74:	e793      	b.n	7c9e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
    7d76:	f06f 0004 	mvn.w	r0, #4
    7d7a:	e7e0      	b.n	7d3e <gpio_nrfx_pin_interrupt_configure+0xbe>
    7d7c:	0001461b 	.word	0x0001461b
    7d80:	00013904 	.word	0x00013904
    7d84:	0bad0004 	.word	0x0bad0004
    7d88:	0bad0000 	.word	0x0bad0000

00007d8c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    7d8c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    7d8e:	f003 fae1 	bl	b354 <nrfx_gpiote_is_init>
    7d92:	4604      	mov	r4, r0
    7d94:	b968      	cbnz	r0, 7db2 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    7d96:	f003 fab5 	bl	b304 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    7d9a:	4b08      	ldr	r3, [pc, #32]	; (7dbc <gpio_nrfx_init+0x30>)
    7d9c:	4298      	cmp	r0, r3
    7d9e:	d10a      	bne.n	7db6 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    7da0:	4807      	ldr	r0, [pc, #28]	; (7dc0 <gpio_nrfx_init+0x34>)
    7da2:	4621      	mov	r1, r4
    7da4:	f003 fa84 	bl	b2b0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    7da8:	4622      	mov	r2, r4
    7daa:	2105      	movs	r1, #5
    7dac:	2006      	movs	r0, #6
    7dae:	f7fd fdbf 	bl	5930 <z_arm_irq_priority_set>
		return 0;
    7db2:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    7db4:	bd10      	pop	{r4, pc}
		return -EIO;
    7db6:	f06f 0004 	mvn.w	r0, #4
    7dba:	e7fb      	b.n	7db4 <gpio_nrfx_init+0x28>
    7dbc:	0bad0000 	.word	0x0bad0000
    7dc0:	00007dc5 	.word	0x00007dc5

00007dc4 <nrfx_gpio_handler>:
{
    7dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    7dc8:	0943      	lsrs	r3, r0, #5
    7dca:	d12a      	bne.n	7e22 <nrfx_gpio_handler+0x5e>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    7dcc:	4b16      	ldr	r3, [pc, #88]	; (7e28 <nrfx_gpio_handler+0x64>)
    7dce:	685c      	ldr	r4, [r3, #4]
    7dd0:	b33c      	cbz	r4, 7e22 <nrfx_gpio_handler+0x5e>
    7dd2:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    7dd4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 7e30 <nrfx_gpio_handler+0x6c>
			__ASSERT(cb->handler, "No callback handler!");
    7dd8:	4f14      	ldr	r7, [pc, #80]	; (7e2c <nrfx_gpio_handler+0x68>)
    7dda:	f8df 9058 	ldr.w	r9, [pc, #88]	; 7e34 <nrfx_gpio_handler+0x70>
	gpio_fire_callbacks(list, port, BIT(pin));
    7dde:	2601      	movs	r6, #1
    7de0:	2d00      	cmp	r5, #0
    7de2:	fa06 f600 	lsl.w	r6, r6, r0
	return node->next;
    7de6:	bf38      	it	cc
    7de8:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    7dea:	68a3      	ldr	r3, [r4, #8]
    7dec:	421e      	tst	r6, r3
    7dee:	d010      	beq.n	7e12 <nrfx_gpio_handler+0x4e>
			__ASSERT(cb->handler, "No callback handler!");
    7df0:	6863      	ldr	r3, [r4, #4]
    7df2:	b943      	cbnz	r3, 7e06 <nrfx_gpio_handler+0x42>
    7df4:	4639      	mov	r1, r7
    7df6:	4648      	mov	r0, r9
    7df8:	2245      	movs	r2, #69	; 0x45
    7dfa:	f007 fae4 	bl	f3c6 <printk>
    7dfe:	2145      	movs	r1, #69	; 0x45
    7e00:	4638      	mov	r0, r7
    7e02:	f007 fba5 	bl	f550 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    7e06:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    7e0a:	4621      	mov	r1, r4
    7e0c:	4032      	ands	r2, r6
    7e0e:	4640      	mov	r0, r8
    7e10:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    7e12:	b135      	cbz	r5, 7e22 <nrfx_gpio_handler+0x5e>
    7e14:	682b      	ldr	r3, [r5, #0]
    7e16:	2b00      	cmp	r3, #0
    7e18:	bf38      	it	cc
    7e1a:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    7e1c:	462c      	mov	r4, r5
    7e1e:	461d      	mov	r5, r3
    7e20:	e7e3      	b.n	7dea <nrfx_gpio_handler+0x26>
}
    7e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7e26:	bf00      	nop
    7e28:	20000ad8 	.word	0x20000ad8
    7e2c:	000145ee 	.word	0x000145ee
    7e30:	00012f0c 	.word	0x00012f0c
    7e34:	00013904 	.word	0x00013904

00007e38 <gpio_nrfx_pin_configure>:
{
    7e38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    7e3c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    7e3e:	7b3b      	ldrb	r3, [r7, #12]
    7e40:	f001 051f 	and.w	r5, r1, #31
{
    7e44:	b085      	sub	sp, #20
    7e46:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    7e48:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    7e4c:	4614      	mov	r4, r2
    7e4e:	b9ca      	cbnz	r2, 7e84 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    7e50:	a902      	add	r1, sp, #8
    7e52:	4628      	mov	r0, r5
    7e54:	f003 fa32 	bl	b2bc <nrfx_gpiote_channel_get>
    7e58:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    7e5a:	4628      	mov	r0, r5
    7e5c:	f003 fb1c 	bl	b498 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    7e60:	4b48      	ldr	r3, [pc, #288]	; (7f84 <gpio_nrfx_pin_configure+0x14c>)
    7e62:	4298      	cmp	r0, r3
    7e64:	d004      	beq.n	7e70 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    7e66:	f06f 0004 	mvn.w	r0, #4
}
    7e6a:	b005      	add	sp, #20
    7e6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    7e70:	4284      	cmp	r4, r0
    7e72:	d105      	bne.n	7e80 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    7e74:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7e78:	f003 fa76 	bl	b368 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    7e7c:	42a0      	cmp	r0, r4
    7e7e:	d1f2      	bne.n	7e66 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    7e80:	2000      	movs	r0, #0
    7e82:	e7f2      	b.n	7e6a <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    7e84:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    7e88:	f10d 0103 	add.w	r1, sp, #3
    7e8c:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    7e8e:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    7e92:	f003 fa13 	bl	b2bc <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    7e96:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    7e98:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    7e9a:	aa02      	add	r2, sp, #8
    7e9c:	4649      	mov	r1, r9
    7e9e:	4628      	mov	r0, r5
    7ea0:	f003 f8ee 	bl	b080 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    7ea4:	4b37      	ldr	r3, [pc, #220]	; (7f84 <gpio_nrfx_pin_configure+0x14c>)
    7ea6:	4298      	cmp	r0, r3
    7ea8:	d002      	beq.n	7eb0 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    7eaa:	f06f 0015 	mvn.w	r0, #21
    7eae:	e7dc      	b.n	7e6a <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    7eb0:	4580      	cmp	r8, r0
    7eb2:	d103      	bne.n	7ebc <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    7eb4:	f89d 0003 	ldrb.w	r0, [sp, #3]
    7eb8:	f003 fa56 	bl	b368 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    7ebc:	05a3      	lsls	r3, r4, #22
    7ebe:	d54e      	bpl.n	7f5e <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    7ec0:	4b31      	ldr	r3, [pc, #196]	; (7f88 <gpio_nrfx_pin_configure+0x150>)
    7ec2:	4a32      	ldr	r2, [pc, #200]	; (7f8c <gpio_nrfx_pin_configure+0x154>)
    7ec4:	4023      	ands	r3, r4
    7ec6:	4293      	cmp	r3, r2
    7ec8:	d03a      	beq.n	7f40 <gpio_nrfx_pin_configure+0x108>
    7eca:	d80c      	bhi.n	7ee6 <gpio_nrfx_pin_configure+0xae>
    7ecc:	2b06      	cmp	r3, #6
    7ece:	d014      	beq.n	7efa <gpio_nrfx_pin_configure+0xc2>
    7ed0:	d804      	bhi.n	7edc <gpio_nrfx_pin_configure+0xa4>
    7ed2:	b193      	cbz	r3, 7efa <gpio_nrfx_pin_configure+0xc2>
    7ed4:	2b02      	cmp	r3, #2
    7ed6:	d1e8      	bne.n	7eaa <gpio_nrfx_pin_configure+0x72>
    7ed8:	2304      	movs	r3, #4
    7eda:	e00e      	b.n	7efa <gpio_nrfx_pin_configure+0xc2>
    7edc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    7ee0:	d1e3      	bne.n	7eaa <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    7ee2:	2301      	movs	r3, #1
    7ee4:	e009      	b.n	7efa <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    7ee6:	4a2a      	ldr	r2, [pc, #168]	; (7f90 <gpio_nrfx_pin_configure+0x158>)
    7ee8:	4293      	cmp	r3, r2
    7eea:	d02b      	beq.n	7f44 <gpio_nrfx_pin_configure+0x10c>
    7eec:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    7ef0:	d02a      	beq.n	7f48 <gpio_nrfx_pin_configure+0x110>
    7ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    7ef6:	d1d8      	bne.n	7eaa <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    7ef8:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    7efa:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    7efe:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    7f02:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    7f06:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    7f08:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    7f0c:	bf54      	ite	pl
    7f0e:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    7f12:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    7f14:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    7f16:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    7f1a:	d517      	bpl.n	7f4c <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    7f1c:	687b      	ldr	r3, [r7, #4]
    7f1e:	2101      	movs	r1, #1
    7f20:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    7f24:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    7f28:	2200      	movs	r2, #0
    7f2a:	a901      	add	r1, sp, #4
    7f2c:	4628      	mov	r0, r5
    7f2e:	f003 f94f 	bl	b1d0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    7f32:	4b14      	ldr	r3, [pc, #80]	; (7f84 <gpio_nrfx_pin_configure+0x14c>)
    7f34:	4298      	cmp	r0, r3
    7f36:	bf14      	ite	ne
    7f38:	f06f 0015 	mvnne.w	r0, #21
    7f3c:	2000      	moveq	r0, #0
    7f3e:	e794      	b.n	7e6a <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    7f40:	2307      	movs	r3, #7
    7f42:	e7da      	b.n	7efa <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    7f44:	2305      	movs	r3, #5
    7f46:	e7d8      	b.n	7efa <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    7f48:	2303      	movs	r3, #3
    7f4a:	e7d6      	b.n	7efa <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    7f4c:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    7f4e:	bf41      	itttt	mi
    7f50:	687b      	ldrmi	r3, [r7, #4]
    7f52:	2101      	movmi	r1, #1
    7f54:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    7f58:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    7f5c:	e7e4      	b.n	7f28 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    7f5e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    7f60:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    7f64:	bf54      	ite	pl
    7f66:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    7f6a:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    7f6c:	461a      	mov	r2, r3
    7f6e:	a901      	add	r1, sp, #4
    7f70:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    7f72:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    7f76:	f003 f883 	bl	b080 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    7f7a:	4b02      	ldr	r3, [pc, #8]	; (7f84 <gpio_nrfx_pin_configure+0x14c>)
    7f7c:	4298      	cmp	r0, r3
    7f7e:	f43f af7f 	beq.w	7e80 <gpio_nrfx_pin_configure+0x48>
    7f82:	e792      	b.n	7eaa <gpio_nrfx_pin_configure+0x72>
    7f84:	0bad0000 	.word	0x0bad0000
    7f88:	00f00006 	.word	0x00f00006
    7f8c:	00100006 	.word	0x00100006
    7f90:	00400002 	.word	0x00400002

00007f94 <gpio_pin_set_dt>:
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
    7f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return gpio_pin_set(spec->port, spec->pin, value);
    7f98:	6804      	ldr	r4, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    7f9a:	7903      	ldrb	r3, [r0, #4]
	const struct gpio_driver_data *const data =
    7f9c:	6927      	ldr	r7, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    7f9e:	2501      	movs	r5, #1
    7fa0:	409d      	lsls	r5, r3
    7fa2:	6863      	ldr	r3, [r4, #4]
    7fa4:	681b      	ldr	r3, [r3, #0]
    7fa6:	421d      	tst	r5, r3
{
    7fa8:	460e      	mov	r6, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    7faa:	d10a      	bne.n	7fc2 <gpio_pin_set_dt+0x2e>
    7fac:	4914      	ldr	r1, [pc, #80]	; (8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>)
    7fae:	4815      	ldr	r0, [pc, #84]	; (8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>)
    7fb0:	f240 42bb 	movw	r2, #1211	; 0x4bb
    7fb4:	f007 fa07 	bl	f3c6 <printk>
    7fb8:	4811      	ldr	r0, [pc, #68]	; (8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>)
    7fba:	f240 41bb 	movw	r1, #1211	; 0x4bb
    7fbe:	f007 fac7 	bl	f550 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    7fc2:	683b      	ldr	r3, [r7, #0]
    7fc4:	421d      	tst	r5, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    7fc6:	6863      	ldr	r3, [r4, #4]
    7fc8:	681b      	ldr	r3, [r3, #0]
    7fca:	bf18      	it	ne
    7fcc:	f086 0601 	eorne.w	r6, r6, #1
    7fd0:	421d      	tst	r5, r3
    7fd2:	d10a      	bne.n	7fea <gpio_pin_set_dt+0x56>
    7fd4:	490a      	ldr	r1, [pc, #40]	; (8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>)
    7fd6:	480b      	ldr	r0, [pc, #44]	; (8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>)
    7fd8:	f240 4291 	movw	r2, #1169	; 0x491
    7fdc:	f007 f9f3 	bl	f3c6 <printk>
    7fe0:	4807      	ldr	r0, [pc, #28]	; (8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>)
    7fe2:	f240 4191 	movw	r1, #1169	; 0x491
    7fe6:	f007 fab3 	bl	f550 <assert_post_action>
	if (value != 0)	{
    7fea:	b136      	cbz	r6, 7ffa <gpio_pin_set_dt+0x66>
	return api->port_set_bits_raw(port, pins);
    7fec:	68a3      	ldr	r3, [r4, #8]
    7fee:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    7ff0:	4629      	mov	r1, r5
    7ff2:	4620      	mov	r0, r4
}
    7ff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
    7ff8:	4718      	bx	r3
    7ffa:	68a3      	ldr	r3, [r4, #8]
    7ffc:	691b      	ldr	r3, [r3, #16]
    7ffe:	e7f7      	b.n	7ff0 <gpio_pin_set_dt+0x5c>
    8000:	000138da 	.word	0x000138da
    8004:	00013904 	.word	0x00013904

00008008 <spi_context_cs_configure_all>:
	k_sem_give(&ctx->sync);
#endif /* CONFIG_SPI_ASYNC */
}

static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
    8008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    800c:	6884      	ldr	r4, [r0, #8]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    800e:	4e41      	ldr	r6, [pc, #260]	; (8114 <spi_context_cs_configure_all+0x10c>)
    8010:	f8df a110 	ldr.w	sl, [pc, #272]	; 8124 <spi_context_cs_configure_all+0x11c>
{
    8014:	b085      	sub	sp, #20
    8016:	4607      	mov	r7, r0
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    8018:	e9d7 3202 	ldrd	r3, r2, [r7, #8]
    801c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    8020:	429c      	cmp	r4, r3
    8022:	d301      	bcc.n	8028 <spi_context_cs_configure_all+0x20>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
    8024:	2000      	movs	r0, #0
    8026:	e071      	b.n	810c <spi_context_cs_configure_all+0x104>
		if (!device_is_ready(cs_gpio->port)) {
    8028:	6820      	ldr	r0, [r4, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    802a:	f00a f8bc 	bl	121a6 <z_device_ready>
    802e:	2800      	cmp	r0, #0
    8030:	d05d      	beq.n	80ee <spi_context_cs_configure_all+0xe6>
	return gpio_pin_configure(spec->port,
    8032:	f8d4 9000 	ldr.w	r9, [r4]
    8036:	f894 b004 	ldrb.w	fp, [r4, #4]
				  spec->dt_flags | extra_flags);
    803a:	7965      	ldrb	r5, [r4, #5]
	const struct gpio_driver_api *api =
    803c:	f8d9 3008 	ldr.w	r3, [r9, #8]
    8040:	9302      	str	r3, [sp, #8]
	const struct gpio_driver_config *const cfg =
    8042:	f8d9 3004 	ldr.w	r3, [r9, #4]
    8046:	9303      	str	r3, [sp, #12]
	struct gpio_driver_data *data =
    8048:	f8d9 3010 	ldr.w	r3, [r9, #16]
    804c:	9301      	str	r3, [sp, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    804e:	f005 0330 	and.w	r3, r5, #48	; 0x30
    8052:	2b30      	cmp	r3, #48	; 0x30
    8054:	d10a      	bne.n	806c <spi_context_cs_configure_all+0x64>
    8056:	4631      	mov	r1, r6
    8058:	4650      	mov	r0, sl
    805a:	f240 22e1 	movw	r2, #737	; 0x2e1
    805e:	f007 f9b2 	bl	f3c6 <printk>
    8062:	f240 21e1 	movw	r1, #737	; 0x2e1
    8066:	4630      	mov	r0, r6
    8068:	f007 fa72 	bl	f550 <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    806c:	f005 0306 	and.w	r3, r5, #6
    8070:	2b04      	cmp	r3, #4
    8072:	d10a      	bne.n	808a <spi_context_cs_configure_all+0x82>
    8074:	4631      	mov	r1, r6
    8076:	4650      	mov	r0, sl
    8078:	f240 22e9 	movw	r2, #745	; 0x2e9
    807c:	f007 f9a3 	bl	f3c6 <printk>
    8080:	f240 21e9 	movw	r1, #745	; 0x2e9
    8084:	4630      	mov	r0, r6
    8086:	f007 fa63 	bl	f550 <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    808a:	9a03      	ldr	r2, [sp, #12]
    808c:	f04f 0801 	mov.w	r8, #1
    8090:	6812      	ldr	r2, [r2, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    8092:	07e8      	lsls	r0, r5, #31
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    8094:	fa08 f80b 	lsl.w	r8, r8, fp
	return gpio_pin_configure(spec->port,
    8098:	bf54      	ite	pl
    809a:	f445 55b0 	orrpl.w	r5, r5, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    809e:	f485 55d0 	eormi.w	r5, r5, #6656	; 0x1a00
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    80a2:	ea18 0f02 	tst.w	r8, r2
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    80a6:	f425 5380 	bic.w	r3, r5, #4096	; 0x1000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    80aa:	d10c      	bne.n	80c6 <spi_context_cs_configure_all+0xbe>
    80ac:	f240 22fd 	movw	r2, #765	; 0x2fd
    80b0:	4631      	mov	r1, r6
    80b2:	4650      	mov	r0, sl
    80b4:	9303      	str	r3, [sp, #12]
    80b6:	f007 f986 	bl	f3c6 <printk>
    80ba:	f240 21fd 	movw	r1, #765	; 0x2fd
    80be:	4630      	mov	r0, r6
    80c0:	f007 fa46 	bl	f550 <assert_post_action>
    80c4:	9b03      	ldr	r3, [sp, #12]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    80c6:	9a01      	ldr	r2, [sp, #4]
    80c8:	6812      	ldr	r2, [r2, #0]
    80ca:	07e9      	lsls	r1, r5, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    80cc:	9901      	ldr	r1, [sp, #4]
    80ce:	bf4c      	ite	mi
    80d0:	ea48 0202 	orrmi.w	r2, r8, r2
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    80d4:	ea22 0208 	bicpl.w	r2, r2, r8
    80d8:	600a      	str	r2, [r1, #0]
	return api->pin_configure(port, pin, flags);
    80da:	9a02      	ldr	r2, [sp, #8]
    80dc:	4659      	mov	r1, fp
    80de:	6815      	ldr	r5, [r2, #0]
    80e0:	4648      	mov	r0, r9
    80e2:	461a      	mov	r2, r3
    80e4:	47a8      	blx	r5
		if (ret < 0) {
    80e6:	2800      	cmp	r0, #0
    80e8:	db10      	blt.n	810c <spi_context_cs_configure_all+0x104>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    80ea:	3408      	adds	r4, #8
    80ec:	e794      	b.n	8018 <spi_context_cs_configure_all+0x10>
    80ee:	4a0a      	ldr	r2, [pc, #40]	; (8118 <spi_context_cs_configure_all+0x110>)
    80f0:	4b0a      	ldr	r3, [pc, #40]	; (811c <spi_context_cs_configure_all+0x114>)
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    80f2:	6821      	ldr	r1, [r4, #0]
    80f4:	480a      	ldr	r0, [pc, #40]	; (8120 <spi_context_cs_configure_all+0x118>)
    80f6:	6809      	ldr	r1, [r1, #0]
    80f8:	1a9b      	subs	r3, r3, r2
    80fa:	08db      	lsrs	r3, r3, #3
    80fc:	019b      	lsls	r3, r3, #6
    80fe:	7922      	ldrb	r2, [r4, #4]
    8100:	f043 0301 	orr.w	r3, r3, #1
    8104:	f007 fa73 	bl	f5ee <log_2>
			return -ENODEV;
    8108:	f06f 0012 	mvn.w	r0, #18
}
    810c:	b005      	add	sp, #20
    810e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8112:	bf00      	nop
    8114:	000138da 	.word	0x000138da
    8118:	000130a4 	.word	0x000130a4
    811c:	000130fc 	.word	0x000130fc
    8120:	0001464e 	.word	0x0001464e
    8124:	00013904 	.word	0x00013904

00008128 <transfer_next_chunk>:

	return 0;
}

static void transfer_next_chunk(const struct device *dev)
{
    8128:	b530      	push	{r4, r5, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    812a:	6905      	ldr	r5, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    812c:	6caa      	ldr	r2, [r5, #72]	; 0x48
    812e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
{
    8130:	b085      	sub	sp, #20
    8132:	b982      	cbnz	r2, 8156 <transfer_next_chunk+0x2e>
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
    8134:	bb73      	cbnz	r3, 8194 <transfer_next_chunk+0x6c>
	int error = 0;
    8136:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
    8138:	2200      	movs	r2, #0
    813a:	4611      	mov	r1, r2
    813c:	4628      	mov	r0, r5
    813e:	f007 ff9f 	bl	10080 <_spi_context_cs_control.isra.0>
	ctx->sync_status = status;
    8142:	632c      	str	r4, [r5, #48]	; 0x30
	z_impl_k_sem_give(sem);
    8144:	f105 0020 	add.w	r0, r5, #32
    8148:	f004 faae 	bl	c6a8 <z_impl_k_sem_give>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, error);
	dev_data->busy = false;
    814c:	2300      	movs	r3, #0
    814e:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
}
    8152:	b005      	add	sp, #20
    8154:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
    8156:	4611      	mov	r1, r2
    8158:	b113      	cbz	r3, 8160 <transfer_next_chunk+0x38>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    815a:	429a      	cmp	r2, r3
    815c:	bf28      	it	cs
    815e:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
    8160:	6c6c      	ldr	r4, [r5, #68]	; 0x44
		dev_data->chunk_len = chunk_len;
    8162:	65a9      	str	r1, [r5, #88]	; 0x58
		xfer.p_tx_buffer = ctx->tx_buf;
    8164:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
    8166:	b1bc      	cbz	r4, 8198 <transfer_next_chunk+0x70>
    8168:	2a00      	cmp	r2, #0
    816a:	bf18      	it	ne
    816c:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    816e:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    8170:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    8172:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    8174:	b192      	cbz	r2, 819c <transfer_next_chunk+0x74>
    8176:	2b00      	cmp	r3, #0
    8178:	bf18      	it	ne
    817a:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
    817c:	6840      	ldr	r0, [r0, #4]
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    817e:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
    8180:	2200      	movs	r2, #0
    8182:	4669      	mov	r1, sp
    8184:	f003 fbd2 	bl	b92c <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
    8188:	4b05      	ldr	r3, [pc, #20]	; (81a0 <transfer_next_chunk+0x78>)
    818a:	4298      	cmp	r0, r3
    818c:	d0e1      	beq.n	8152 <transfer_next_chunk+0x2a>
		error = -EIO;
    818e:	f06f 0404 	mvn.w	r4, #4
    8192:	e7d1      	b.n	8138 <transfer_next_chunk+0x10>
    8194:	4619      	mov	r1, r3
    8196:	e7e3      	b.n	8160 <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    8198:	4622      	mov	r2, r4
    819a:	e7e8      	b.n	816e <transfer_next_chunk+0x46>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    819c:	4613      	mov	r3, r2
    819e:	e7ed      	b.n	817c <transfer_next_chunk+0x54>
    81a0:	0bad0000 	.word	0x0bad0000

000081a4 <spi_nrfx_transceive>:

static int spi_nrfx_transceive(const struct device *dev,
			       const struct spi_config *spi_cfg,
			       const struct spi_buf_set *tx_bufs,
			       const struct spi_buf_set *rx_bufs)
{
    81a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    81a8:	469b      	mov	fp, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    81aa:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    81ac:	6904      	ldr	r4, [r0, #16]
    81ae:	049f      	lsls	r7, r3, #18
{
    81b0:	b089      	sub	sp, #36	; 0x24
    81b2:	4680      	mov	r8, r0
    81b4:	460e      	mov	r6, r1
    81b6:	4691      	mov	r9, r2
    81b8:	d433      	bmi.n	8222 <spi_nrfx_transceive+0x7e>
	return z_impl_k_sem_take(sem, timeout);
    81ba:	f04f 32ff 	mov.w	r2, #4294967295
    81be:	f04f 33ff 	mov.w	r3, #4294967295
    81c2:	f104 0010 	add.w	r0, r4, #16
    81c6:	f004 faa5 	bl	c714 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    81ca:	6066      	str	r6, [r4, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    81cc:	f8d8 a010 	ldr.w	sl, [r8, #16]
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
    81d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    81d4:	9300      	str	r3, [sp, #0]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    81d6:	f89a 305d 	ldrb.w	r3, [sl, #93]	; 0x5d
    81da:	9301      	str	r3, [sp, #4]
    81dc:	b123      	cbz	r3, 81e8 <spi_nrfx_transceive+0x44>
    81de:	f8da 3000 	ldr.w	r3, [sl]
    81e2:	429e      	cmp	r6, r3
    81e4:	f000 80c5 	beq.w	8372 <spi_nrfx_transceive+0x1ce>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    81e8:	88b7      	ldrh	r7, [r6, #4]
    81ea:	053d      	lsls	r5, r7, #20
    81ec:	d520      	bpl.n	8230 <spi_nrfx_transceive+0x8c>
    81ee:	4b98      	ldr	r3, [pc, #608]	; (8450 <spi_nrfx_transceive+0x2ac>)
    81f0:	4998      	ldr	r1, [pc, #608]	; (8454 <spi_nrfx_transceive+0x2b0>)
		LOG_ERR("Half-duplex not supported");
    81f2:	4899      	ldr	r0, [pc, #612]	; (8458 <spi_nrfx_transceive+0x2b4>)
    81f4:	1ac9      	subs	r1, r1, r3
    81f6:	08c9      	lsrs	r1, r1, #3
    81f8:	0189      	lsls	r1, r1, #6
    81fa:	f041 0101 	orr.w	r1, r1, #1
    81fe:	f007 f9d5 	bl	f5ac <log_0>
		return -ENOTSUP;
    8202:	f06f 0585 	mvn.w	r5, #133	; 0x85
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    8206:	6823      	ldr	r3, [r4, #0]
    8208:	889b      	ldrh	r3, [r3, #4]
    820a:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    820e:	d104      	bne.n	821a <spi_nrfx_transceive+0x76>
		ctx->owner = NULL;
    8210:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    8212:	f104 0010 	add.w	r0, r4, #16
    8216:	f004 fa47 	bl	c6a8 <z_impl_k_sem_give>
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL);
}
    821a:	4628      	mov	r0, r5
    821c:	b009      	add	sp, #36	; 0x24
    821e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    8222:	69a3      	ldr	r3, [r4, #24]
    8224:	2b00      	cmp	r3, #0
    8226:	d1c8      	bne.n	81ba <spi_nrfx_transceive+0x16>
		(k_sem_count_get(&ctx->lock) == 0) &&
    8228:	6863      	ldr	r3, [r4, #4]
    822a:	4299      	cmp	r1, r3
    822c:	d1c5      	bne.n	81ba <spi_nrfx_transceive+0x16>
    822e:	e7cd      	b.n	81cc <spi_nrfx_transceive+0x28>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    8230:	07f8      	lsls	r0, r7, #31
    8232:	d50e      	bpl.n	8252 <spi_nrfx_transceive+0xae>
    8234:	4a87      	ldr	r2, [pc, #540]	; (8454 <spi_nrfx_transceive+0x2b0>)
    8236:	4b86      	ldr	r3, [pc, #536]	; (8450 <spi_nrfx_transceive+0x2ac>)
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    8238:	f8d8 1000 	ldr.w	r1, [r8]
    823c:	4887      	ldr	r0, [pc, #540]	; (845c <spi_nrfx_transceive+0x2b8>)
    823e:	1ad2      	subs	r2, r2, r3
    8240:	08d2      	lsrs	r2, r2, #3
    8242:	0192      	lsls	r2, r2, #6
    8244:	f042 0201 	orr.w	r2, r2, #1
    8248:	f007 f9bd 	bl	f5c6 <log_1>
		return -EINVAL;
    824c:	f06f 0515 	mvn.w	r5, #21
    8250:	e7d9      	b.n	8206 <spi_nrfx_transceive+0x62>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    8252:	0739      	lsls	r1, r7, #28
    8254:	d50a      	bpl.n	826c <spi_nrfx_transceive+0xc8>
    8256:	497f      	ldr	r1, [pc, #508]	; (8454 <spi_nrfx_transceive+0x2b0>)
    8258:	4b7d      	ldr	r3, [pc, #500]	; (8450 <spi_nrfx_transceive+0x2ac>)
		LOG_ERR("Loopback mode is not supported");
    825a:	4881      	ldr	r0, [pc, #516]	; (8460 <spi_nrfx_transceive+0x2bc>)
    825c:	1ac9      	subs	r1, r1, r3
    825e:	08c9      	lsrs	r1, r1, #3
    8260:	0189      	lsls	r1, r1, #6
    8262:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    8266:	f007 f9a1 	bl	f5ac <log_0>
    826a:	e7ef      	b.n	824c <spi_nrfx_transceive+0xa8>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    826c:	f3c7 1345 	ubfx	r3, r7, #5, #6
    8270:	2b08      	cmp	r3, #8
    8272:	d008      	beq.n	8286 <spi_nrfx_transceive+0xe2>
    8274:	4977      	ldr	r1, [pc, #476]	; (8454 <spi_nrfx_transceive+0x2b0>)
    8276:	4b76      	ldr	r3, [pc, #472]	; (8450 <spi_nrfx_transceive+0x2ac>)
		LOG_ERR("Word sizes other than 8 bits are not supported");
    8278:	487a      	ldr	r0, [pc, #488]	; (8464 <spi_nrfx_transceive+0x2c0>)
    827a:	1ac9      	subs	r1, r1, r3
    827c:	08c9      	lsrs	r1, r1, #3
    827e:	0189      	lsls	r1, r1, #6
    8280:	f041 0101 	orr.w	r1, r1, #1
    8284:	e7ef      	b.n	8266 <spi_nrfx_transceive+0xc2>
	if (spi_cfg->frequency < 125000) {
    8286:	6835      	ldr	r5, [r6, #0]
    8288:	4b77      	ldr	r3, [pc, #476]	; (8468 <spi_nrfx_transceive+0x2c4>)
    828a:	429d      	cmp	r5, r3
    828c:	d808      	bhi.n	82a0 <spi_nrfx_transceive+0xfc>
    828e:	4971      	ldr	r1, [pc, #452]	; (8454 <spi_nrfx_transceive+0x2b0>)
    8290:	4b6f      	ldr	r3, [pc, #444]	; (8450 <spi_nrfx_transceive+0x2ac>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    8292:	4876      	ldr	r0, [pc, #472]	; (846c <spi_nrfx_transceive+0x2c8>)
    8294:	1ac9      	subs	r1, r1, r3
    8296:	08c9      	lsrs	r1, r1, #3
    8298:	0189      	lsls	r1, r1, #6
    829a:	f041 0101 	orr.w	r1, r1, #1
    829e:	e7e2      	b.n	8266 <spi_nrfx_transceive+0xc2>
	config = dev_config->def_config;
    82a0:	9b00      	ldr	r3, [sp, #0]
    82a2:	f103 0e08 	add.w	lr, r3, #8
    82a6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    82aa:	f10d 0c0c 	add.w	ip, sp, #12
    82ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    82b2:	f8de 3000 	ldr.w	r3, [lr]
    82b6:	f8cc 3000 	str.w	r3, [ip]
	if (frequency < 250000) {
    82ba:	4b6d      	ldr	r3, [pc, #436]	; (8470 <spi_nrfx_transceive+0x2cc>)
    82bc:	429d      	cmp	r5, r3
    82be:	d940      	bls.n	8342 <spi_nrfx_transceive+0x19e>
	} else if (frequency < 500000) {
    82c0:	4b6c      	ldr	r3, [pc, #432]	; (8474 <spi_nrfx_transceive+0x2d0>)
    82c2:	429d      	cmp	r5, r3
    82c4:	d940      	bls.n	8348 <spi_nrfx_transceive+0x1a4>
	} else if (frequency < 1000000) {
    82c6:	4b6c      	ldr	r3, [pc, #432]	; (8478 <spi_nrfx_transceive+0x2d4>)
    82c8:	429d      	cmp	r5, r3
    82ca:	d940      	bls.n	834e <spi_nrfx_transceive+0x1aa>
	} else if (frequency < 2000000) {
    82cc:	4b6b      	ldr	r3, [pc, #428]	; (847c <spi_nrfx_transceive+0x2d8>)
    82ce:	429d      	cmp	r5, r3
    82d0:	d940      	bls.n	8354 <spi_nrfx_transceive+0x1b0>
	} else if (frequency < 4000000) {
    82d2:	4b6b      	ldr	r3, [pc, #428]	; (8480 <spi_nrfx_transceive+0x2dc>)
    82d4:	429d      	cmp	r5, r3
    82d6:	d940      	bls.n	835a <spi_nrfx_transceive+0x1b6>
		return NRF_SPI_FREQ_8M;
    82d8:	4b6a      	ldr	r3, [pc, #424]	; (8484 <spi_nrfx_transceive+0x2e0>)
    82da:	429d      	cmp	r5, r3
    82dc:	bf34      	ite	cc
    82de:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
    82e2:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    82e6:	07ba      	lsls	r2, r7, #30
	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
    82e8:	9505      	str	r5, [sp, #20]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    82ea:	f007 0304 	and.w	r3, r7, #4
    82ee:	d537      	bpl.n	8360 <spi_nrfx_transceive+0x1bc>
			return NRF_SPI_MODE_2;
    82f0:	2b00      	cmp	r3, #0
    82f2:	bf14      	ite	ne
    82f4:	2303      	movne	r3, #3
    82f6:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
    82f8:	f88d 3018 	strb.w	r3, [sp, #24]
	if (dev_data->initialized) {
    82fc:	9b01      	ldr	r3, [sp, #4]
	if (operation & SPI_TRANSFER_LSB) {
    82fe:	f3c7 1700 	ubfx	r7, r7, #4, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
    8302:	f88d 7019 	strb.w	r7, [sp, #25]
	if (dev_data->initialized) {
    8306:	b12b      	cbz	r3, 8314 <spi_nrfx_transceive+0x170>
		nrfx_spi_uninit(&dev_config->spi);
    8308:	9800      	ldr	r0, [sp, #0]
    830a:	f003 fac3 	bl	b894 <nrfx_spi_uninit>
		dev_data->initialized = false;
    830e:	2300      	movs	r3, #0
    8310:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
	result = nrfx_spi_init(&dev_config->spi, &config,
    8314:	4653      	mov	r3, sl
    8316:	a903      	add	r1, sp, #12
    8318:	4a5b      	ldr	r2, [pc, #364]	; (8488 <spi_nrfx_transceive+0x2e4>)
    831a:	9800      	ldr	r0, [sp, #0]
    831c:	f003 f9fc 	bl	b718 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
    8320:	4b5a      	ldr	r3, [pc, #360]	; (848c <spi_nrfx_transceive+0x2e8>)
    8322:	4298      	cmp	r0, r3
	result = nrfx_spi_init(&dev_config->spi, &config,
    8324:	4601      	mov	r1, r0
	if (result != NRFX_SUCCESS) {
    8326:	d01f      	beq.n	8368 <spi_nrfx_transceive+0x1c4>
    8328:	4b49      	ldr	r3, [pc, #292]	; (8450 <spi_nrfx_transceive+0x2ac>)
    832a:	4a4a      	ldr	r2, [pc, #296]	; (8454 <spi_nrfx_transceive+0x2b0>)
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    832c:	4858      	ldr	r0, [pc, #352]	; (8490 <spi_nrfx_transceive+0x2ec>)
    832e:	1ad2      	subs	r2, r2, r3
    8330:	08d2      	lsrs	r2, r2, #3
    8332:	0192      	lsls	r2, r2, #6
    8334:	f042 0201 	orr.w	r2, r2, #1
    8338:	f007 f945 	bl	f5c6 <log_1>
		return -EIO;
    833c:	f06f 0504 	mvn.w	r5, #4
    8340:	e761      	b.n	8206 <spi_nrfx_transceive+0x62>
		return NRF_SPI_FREQ_125K;
    8342:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
    8346:	e7ce      	b.n	82e6 <spi_nrfx_transceive+0x142>
		return NRF_SPI_FREQ_250K;
    8348:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    834c:	e7cb      	b.n	82e6 <spi_nrfx_transceive+0x142>
		return NRF_SPI_FREQ_500K;
    834e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    8352:	e7c8      	b.n	82e6 <spi_nrfx_transceive+0x142>
		return NRF_SPI_FREQ_1M;
    8354:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8358:	e7c5      	b.n	82e6 <spi_nrfx_transceive+0x142>
		return NRF_SPI_FREQ_2M;
    835a:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    835e:	e7c2      	b.n	82e6 <spi_nrfx_transceive+0x142>
			return NRF_SPI_MODE_0;
    8360:	3b00      	subs	r3, #0
    8362:	bf18      	it	ne
    8364:	2301      	movne	r3, #1
    8366:	e7c7      	b.n	82f8 <spi_nrfx_transceive+0x154>
	dev_data->initialized = true;
    8368:	2301      	movs	r3, #1
    836a:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
	ctx->config = spi_cfg;
    836e:	f8ca 6000 	str.w	r6, [sl]
		dev_data->busy = true;
    8372:	2301      	movs	r3, #1
    8374:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    8378:	f1b9 0f00 	cmp.w	r9, #0
    837c:	d155      	bne.n	842a <spi_nrfx_transceive+0x286>
    837e:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    8382:	464a      	mov	r2, r9
    8384:	63a2      	str	r2, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    8386:	f104 0138 	add.w	r1, r4, #56	; 0x38
    838a:	f104 0248 	add.w	r2, r4, #72	; 0x48
    838e:	f104 0034 	add.w	r0, r4, #52	; 0x34
    8392:	f007 fe64 	bl	1005e <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
    8396:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    8398:	f1bb 0f00 	cmp.w	fp, #0
    839c:	d14d      	bne.n	843a <spi_nrfx_transceive+0x296>
    839e:	f8c4 b03c 	str.w	fp, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    83a2:	465b      	mov	r3, fp
    83a4:	6423      	str	r3, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    83a6:	f104 0250 	add.w	r2, r4, #80	; 0x50
    83aa:	f104 0140 	add.w	r1, r4, #64	; 0x40
    83ae:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    83b2:	f007 fe54 	bl	1005e <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    83b6:	2200      	movs	r2, #0
    83b8:	6322      	str	r2, [r4, #48]	; 0x30
	ctx->rx_buf = (uint8_t *)
    83ba:	64e0      	str	r0, [r4, #76]	; 0x4c
	_spi_context_cs_control(ctx, on, false);
    83bc:	2101      	movs	r1, #1
    83be:	4620      	mov	r0, r4
    83c0:	f007 fe5e 	bl	10080 <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
    83c4:	4640      	mov	r0, r8
    83c6:	f7ff feaf 	bl	8128 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    83ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    83cc:	6d21      	ldr	r1, [r4, #80]	; 0x50
			     ctx->config->frequency;
    83ce:	4625      	mov	r5, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    83d0:	428b      	cmp	r3, r1
    83d2:	bf38      	it	cc
    83d4:	460b      	movcc	r3, r1
    83d6:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
    83da:	4359      	muls	r1, r3
			     ctx->config->frequency;
    83dc:	f855 3b20 	ldr.w	r3, [r5], #32
		} else {
			return (t * to_hz + off) / from_hz;
    83e0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    83e4:	681b      	ldr	r3, [r3, #0]
    83e6:	fbb1 f1f3 	udiv	r1, r1, r3
    83ea:	f240 36e7 	movw	r6, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    83ee:	31c8      	adds	r1, #200	; 0xc8
    83f0:	2700      	movs	r7, #0
    83f2:	fbe0 6701 	umlal	r6, r7, r0, r1
    83f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    83fa:	2300      	movs	r3, #0
    83fc:	4630      	mov	r0, r6
    83fe:	4639      	mov	r1, r7
    8400:	f7f8 fe5e 	bl	10c0 <__aeabi_uldivmod>
    8404:	4602      	mov	r2, r0
    8406:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    8408:	4628      	mov	r0, r5
    840a:	f004 f983 	bl	c714 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
    840e:	b1e0      	cbz	r0, 844a <spi_nrfx_transceive+0x2a6>
    8410:	4b0f      	ldr	r3, [pc, #60]	; (8450 <spi_nrfx_transceive+0x2ac>)
    8412:	4910      	ldr	r1, [pc, #64]	; (8454 <spi_nrfx_transceive+0x2b0>)
		LOG_ERR("Timeout waiting for transfer complete");
    8414:	481f      	ldr	r0, [pc, #124]	; (8494 <spi_nrfx_transceive+0x2f0>)
    8416:	1ac9      	subs	r1, r1, r3
    8418:	08c9      	lsrs	r1, r1, #3
    841a:	0189      	lsls	r1, r1, #6
    841c:	f041 0101 	orr.w	r1, r1, #1
    8420:	f007 f8c4 	bl	f5ac <log_0>
		return -ETIMEDOUT;
    8424:	f06f 0573 	mvn.w	r5, #115	; 0x73
    8428:	e6ed      	b.n	8206 <spi_nrfx_transceive+0x62>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    842a:	f8d9 2000 	ldr.w	r2, [r9]
    842e:	6362      	str	r2, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    8430:	2a00      	cmp	r2, #0
    8432:	d0a7      	beq.n	8384 <spi_nrfx_transceive+0x1e0>
    8434:	f8d9 2004 	ldr.w	r2, [r9, #4]
    8438:	e7a4      	b.n	8384 <spi_nrfx_transceive+0x1e0>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    843a:	f8db 3000 	ldr.w	r3, [fp]
    843e:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    8440:	2b00      	cmp	r3, #0
    8442:	d0af      	beq.n	83a4 <spi_nrfx_transceive+0x200>
    8444:	f8db 3004 	ldr.w	r3, [fp, #4]
    8448:	e7ac      	b.n	83a4 <spi_nrfx_transceive+0x200>
	status = ctx->sync_status;
    844a:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return status;
    844c:	e6db      	b.n	8206 <spi_nrfx_transceive+0x62>
    844e:	bf00      	nop
    8450:	000130a4 	.word	0x000130a4
    8454:	000130fc 	.word	0x000130fc
    8458:	00014672 	.word	0x00014672
    845c:	0001468c 	.word	0x0001468c
    8460:	000146ae 	.word	0x000146ae
    8464:	000146cd 	.word	0x000146cd
    8468:	0001e847 	.word	0x0001e847
    846c:	000146fc 	.word	0x000146fc
    8470:	0003d08f 	.word	0x0003d08f
    8474:	0007a11f 	.word	0x0007a11f
    8478:	000f423f 	.word	0x000f423f
    847c:	001e847f 	.word	0x001e847f
    8480:	003d08ff 	.word	0x003d08ff
    8484:	007a1200 	.word	0x007a1200
    8488:	00008499 	.word	0x00008499
    848c:	0bad0000 	.word	0x0bad0000
    8490:	0001472d 	.word	0x0001472d
    8494:	00014754 	.word	0x00014754

00008498 <event_handler>:
{
    8498:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    849a:	7803      	ldrb	r3, [r0, #0]
{
    849c:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    849e:	2b00      	cmp	r3, #0
    84a0:	d153      	bne.n	854a <event_handler+0xb2>
	if (!ctx->tx_len) {
    84a2:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    84a4:	b163      	cbz	r3, 84c0 <event_handler+0x28>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    84a6:	6d8a      	ldr	r2, [r1, #88]	; 0x58
	if (len > ctx->tx_len) {
    84a8:	429a      	cmp	r2, r3
    84aa:	d91d      	bls.n	84e8 <event_handler+0x50>
    84ac:	4927      	ldr	r1, [pc, #156]	; (854c <event_handler+0xb4>)
    84ae:	4b28      	ldr	r3, [pc, #160]	; (8550 <event_handler+0xb8>)
		LOG_ERR("Update exceeds current buffer");
    84b0:	4828      	ldr	r0, [pc, #160]	; (8554 <event_handler+0xbc>)
    84b2:	1ac9      	subs	r1, r1, r3
    84b4:	08c9      	lsrs	r1, r1, #3
    84b6:	0189      	lsls	r1, r1, #6
    84b8:	f041 0101 	orr.w	r1, r1, #1
    84bc:	f007 f876 	bl	f5ac <log_0>
	if (!ctx->rx_len) {
    84c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    84c2:	b163      	cbz	r3, 84de <event_handler+0x46>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    84c4:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (len > ctx->rx_len) {
    84c6:	429a      	cmp	r2, r3
    84c8:	d926      	bls.n	8518 <event_handler+0x80>
    84ca:	4920      	ldr	r1, [pc, #128]	; (854c <event_handler+0xb4>)
    84cc:	4b20      	ldr	r3, [pc, #128]	; (8550 <event_handler+0xb8>)
		LOG_ERR("Update exceeds current buffer");
    84ce:	4821      	ldr	r0, [pc, #132]	; (8554 <event_handler+0xbc>)
    84d0:	1ac9      	subs	r1, r1, r3
    84d2:	08c9      	lsrs	r1, r1, #3
    84d4:	0189      	lsls	r1, r1, #6
    84d6:	f041 0101 	orr.w	r1, r1, #1
    84da:	f007 f867 	bl	f5ac <log_0>
		transfer_next_chunk(dev_data->dev);
    84de:	6d60      	ldr	r0, [r4, #84]	; 0x54
}
    84e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    84e4:	f7ff be20 	b.w	8128 <transfer_next_chunk>
	ctx->tx_len -= len;
    84e8:	1a9b      	subs	r3, r3, r2
    84ea:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->tx_len) {
    84ec:	b973      	cbnz	r3, 850c <event_handler+0x74>
		++ctx->current_tx;
    84ee:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    84f0:	3308      	adds	r3, #8
    84f2:	634b      	str	r3, [r1, #52]	; 0x34
		--ctx->tx_count;
    84f4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    84f6:	3b01      	subs	r3, #1
    84f8:	638b      	str	r3, [r1, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
    84fa:	f101 0248 	add.w	r2, r1, #72	; 0x48
    84fe:	f104 0034 	add.w	r0, r4, #52	; 0x34
    8502:	3138      	adds	r1, #56	; 0x38
    8504:	f007 fdab 	bl	1005e <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
    8508:	6460      	str	r0, [r4, #68]	; 0x44
    850a:	e7d9      	b.n	84c0 <event_handler+0x28>
	} else if (ctx->tx_buf) {
    850c:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    850e:	2b00      	cmp	r3, #0
    8510:	d0d6      	beq.n	84c0 <event_handler+0x28>
		ctx->tx_buf += dfs * len;
    8512:	4413      	add	r3, r2
    8514:	644b      	str	r3, [r1, #68]	; 0x44
    8516:	e7d3      	b.n	84c0 <event_handler+0x28>
	ctx->rx_len -= len;
    8518:	1a9b      	subs	r3, r3, r2
    851a:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
    851c:	b97b      	cbnz	r3, 853e <event_handler+0xa6>
		++ctx->current_rx;
    851e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    8520:	3308      	adds	r3, #8
    8522:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
    8524:	6c23      	ldr	r3, [r4, #64]	; 0x40
    8526:	3b01      	subs	r3, #1
    8528:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
    852a:	f104 0250 	add.w	r2, r4, #80	; 0x50
    852e:	f104 0140 	add.w	r1, r4, #64	; 0x40
    8532:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    8536:	f007 fd92 	bl	1005e <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
    853a:	64e0      	str	r0, [r4, #76]	; 0x4c
    853c:	e7cf      	b.n	84de <event_handler+0x46>
	} else if (ctx->rx_buf) {
    853e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    8540:	2b00      	cmp	r3, #0
    8542:	d0cc      	beq.n	84de <event_handler+0x46>
		ctx->rx_buf += dfs * len;
    8544:	4413      	add	r3, r2
    8546:	64e3      	str	r3, [r4, #76]	; 0x4c
    8548:	e7c9      	b.n	84de <event_handler+0x46>
}
    854a:	bd10      	pop	{r4, pc}
    854c:	000130fc 	.word	0x000130fc
    8550:	000130a4 	.word	0x000130a4
    8554:	0001477a 	.word	0x0001477a

00008558 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    8558:	4919      	ldr	r1, [pc, #100]	; (85c0 <sys_clock_timeout_handler+0x68>)
{
    855a:	b570      	push	{r4, r5, r6, lr}
    855c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    855e:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    8562:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    8564:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    8568:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    856c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    856e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    8572:	f04f 0500 	mov.w	r5, #0
    8576:	d20a      	bcs.n	858e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    8578:	4b12      	ldr	r3, [pc, #72]	; (85c4 <sys_clock_timeout_handler+0x6c>)
    857a:	6819      	ldr	r1, [r3, #0]
    857c:	060a      	lsls	r2, r1, #24
    857e:	0a0b      	lsrs	r3, r1, #8
    8580:	1992      	adds	r2, r2, r6
    8582:	4911      	ldr	r1, [pc, #68]	; (85c8 <sys_clock_timeout_handler+0x70>)
    8584:	f143 0300 	adc.w	r3, r3, #0
    8588:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    858c:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    858e:	f005 fac9 	bl	db24 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    8592:	00a3      	lsls	r3, r4, #2
    8594:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8598:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    859c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    85a0:	42b2      	cmp	r2, r6
    85a2:	d10b      	bne.n	85bc <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    85a4:	b91d      	cbnz	r5, 85ae <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    85a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    85aa:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    85ae:	4b07      	ldr	r3, [pc, #28]	; (85cc <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    85b0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    85b4:	fa00 f404 	lsl.w	r4, r0, r4
    85b8:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    85bc:	bd70      	pop	{r4, r5, r6, pc}
    85be:	bf00      	nop
    85c0:	200004c0 	.word	0x200004c0
    85c4:	20000aec 	.word	0x20000aec
    85c8:	200004a8 	.word	0x200004a8
    85cc:	40011000 	.word	0x40011000

000085d0 <compare_int_lock>:
{
    85d0:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    85d2:	2301      	movs	r3, #1
    85d4:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    85d6:	4a11      	ldr	r2, [pc, #68]	; (861c <compare_int_lock+0x4c>)
    85d8:	f3bf 8f5b 	dmb	ish
    85dc:	43dc      	mvns	r4, r3
    85de:	e852 1f00 	ldrex	r1, [r2]
    85e2:	ea01 0c04 	and.w	ip, r1, r4
    85e6:	e842 ce00 	strex	lr, ip, [r2]
    85ea:	f1be 0f00 	cmp.w	lr, #0
    85ee:	d1f6      	bne.n	85de <compare_int_lock+0xe>
    85f0:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    85f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    85f8:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    85fc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    8600:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    8604:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    8608:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    860c:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    8610:	420b      	tst	r3, r1
}
    8612:	bf14      	ite	ne
    8614:	2001      	movne	r0, #1
    8616:	2000      	moveq	r0, #0
    8618:	bd10      	pop	{r4, pc}
    861a:	bf00      	nop
    861c:	20000ae8 	.word	0x20000ae8

00008620 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    8620:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8622:	4a12      	ldr	r2, [pc, #72]	; (866c <compare_int_unlock.part.0+0x4c>)
    8624:	f3bf 8f5b 	dmb	ish
    8628:	4083      	lsls	r3, r0
    862a:	e852 1f00 	ldrex	r1, [r2]
    862e:	4319      	orrs	r1, r3
    8630:	e842 1c00 	strex	ip, r1, [r2]
    8634:	f1bc 0f00 	cmp.w	ip, #0
    8638:	d1f7      	bne.n	862a <compare_int_unlock.part.0+0xa>
    863a:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    863e:	4a0c      	ldr	r2, [pc, #48]	; (8670 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8644:	4083      	lsls	r3, r0
    8646:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    864a:	4b0a      	ldr	r3, [pc, #40]	; (8674 <compare_int_unlock.part.0+0x54>)
    864c:	f3bf 8f5b 	dmb	ish
    8650:	681b      	ldr	r3, [r3, #0]
    8652:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    8656:	fa23 f000 	lsr.w	r0, r3, r0
    865a:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    865c:	bf42      	ittt	mi
    865e:	4b06      	ldrmi	r3, [pc, #24]	; (8678 <compare_int_unlock.part.0+0x58>)
    8660:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    8664:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    8668:	4770      	bx	lr
    866a:	bf00      	nop
    866c:	20000ae8 	.word	0x20000ae8
    8670:	40011000 	.word	0x40011000
    8674:	20000ae4 	.word	0x20000ae4
    8678:	e000e100 	.word	0xe000e100

0000867c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    867c:	4b0d      	ldr	r3, [pc, #52]	; (86b4 <z_nrf_rtc_timer_read+0x38>)
    867e:	681b      	ldr	r3, [r3, #0]
    8680:	0a19      	lsrs	r1, r3, #8
    8682:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    8684:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    8688:	4b0b      	ldr	r3, [pc, #44]	; (86b8 <z_nrf_rtc_timer_read+0x3c>)
    868a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    868e:	18c0      	adds	r0, r0, r3
    8690:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    8694:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    8698:	d20a      	bcs.n	86b0 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    869a:	4b08      	ldr	r3, [pc, #32]	; (86bc <z_nrf_rtc_timer_read+0x40>)
    869c:	e9d3 2300 	ldrd	r2, r3, [r3]
    86a0:	4299      	cmp	r1, r3
    86a2:	bf08      	it	eq
    86a4:	4290      	cmpeq	r0, r2
    86a6:	d203      	bcs.n	86b0 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    86a8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    86ac:	f141 0100 	adc.w	r1, r1, #0
}
    86b0:	4770      	bx	lr
    86b2:	bf00      	nop
    86b4:	20000aec 	.word	0x20000aec
    86b8:	40011000 	.word	0x40011000
    86bc:	200004a8 	.word	0x200004a8

000086c0 <compare_set>:
{
    86c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    86c4:	b085      	sub	sp, #20
    86c6:	4616      	mov	r6, r2
    86c8:	461f      	mov	r7, r3
    86ca:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    86cc:	f7ff ff80 	bl	85d0 <compare_int_lock>
    86d0:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    86d2:	f7ff ffd3 	bl	867c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    86d6:	42b9      	cmp	r1, r7
    86d8:	bf08      	it	eq
    86da:	42b0      	cmpeq	r0, r6
    86dc:	d27f      	bcs.n	87de <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    86de:	ebb6 0800 	subs.w	r8, r6, r0
    86e2:	eb67 0901 	sbc.w	r9, r7, r1
    86e6:	2300      	movs	r3, #0
    86e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    86ec:	454b      	cmp	r3, r9
    86ee:	bf08      	it	eq
    86f0:	4542      	cmpeq	r2, r8
    86f2:	f0c0 8085 	bcc.w	8800 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
    86f6:	4b44      	ldr	r3, [pc, #272]	; (8808 <compare_set+0x148>)
    86f8:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    86fc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    8700:	429f      	cmp	r7, r3
    8702:	bf08      	it	eq
    8704:	4296      	cmpeq	r6, r2
    8706:	d054      	beq.n	87b2 <compare_set+0xf2>
    8708:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    870c:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    8710:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    8714:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8718:	fa0b f205 	lsl.w	r2, fp, r5
    871c:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    8720:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    8724:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8728:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    872a:	4a38      	ldr	r2, [pc, #224]	; (880c <compare_set+0x14c>)
    return p_reg->CC[ch];
    872c:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    8730:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    8734:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    8738:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    873c:	461c      	mov	r4, r3
    873e:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    8740:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    8744:	eba0 000a 	sub.w	r0, r0, sl
    8748:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    874c:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    8750:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    8752:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    8756:	d105      	bne.n	8764 <compare_set+0xa4>
    8758:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    875a:	2013      	movs	r0, #19
    875c:	f009 fd88 	bl	12270 <z_impl_k_busy_wait>
    8760:	4a2a      	ldr	r2, [pc, #168]	; (880c <compare_set+0x14c>)
    8762:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    8764:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    8766:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    876a:	eba4 000c 	sub.w	r0, r4, ip
    876e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    8772:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8776:	bf88      	it	hi
    8778:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    877a:	2000      	movs	r0, #0
    877c:	f8c8 0000 	str.w	r0, [r8]
    8780:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    8784:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    8788:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    878c:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    8790:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    8794:	4582      	cmp	sl, r0
    8796:	d006      	beq.n	87a6 <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    8798:	1a20      	subs	r0, r4, r0
    879a:	3802      	subs	r0, #2
    879c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    87a0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    87a4:	d819      	bhi.n	87da <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    87a6:	1ae4      	subs	r4, r4, r3
    87a8:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    87ac:	1932      	adds	r2, r6, r4
    87ae:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    87b2:	4c15      	ldr	r4, [pc, #84]	; (8808 <compare_set+0x148>)
    87b4:	0129      	lsls	r1, r5, #4
    87b6:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    87ba:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    87be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    87c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    87c2:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    87c4:	6043      	str	r3, [r0, #4]
	return ret;
    87c6:	2400      	movs	r4, #0
	if (key) {
    87c8:	9b01      	ldr	r3, [sp, #4]
    87ca:	b113      	cbz	r3, 87d2 <compare_set+0x112>
    87cc:	4628      	mov	r0, r5
    87ce:	f7ff ff27 	bl	8620 <compare_int_unlock.part.0>
}
    87d2:	4620      	mov	r0, r4
    87d4:	b005      	add	sp, #20
    87d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    87da:	4620      	mov	r0, r4
    87dc:	e7b0      	b.n	8740 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    87de:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    87e0:	4a0b      	ldr	r2, [pc, #44]	; (8810 <compare_set+0x150>)
    87e2:	f3bf 8f5b 	dmb	ish
    87e6:	40ab      	lsls	r3, r5
    87e8:	e852 1f00 	ldrex	r1, [r2]
    87ec:	4319      	orrs	r1, r3
    87ee:	e842 1000 	strex	r0, r1, [r2]
    87f2:	2800      	cmp	r0, #0
    87f4:	d1f8      	bne.n	87e8 <compare_set+0x128>
    87f6:	f3bf 8f5b 	dmb	ish
    87fa:	4632      	mov	r2, r6
    87fc:	463b      	mov	r3, r7
    87fe:	e7d8      	b.n	87b2 <compare_set+0xf2>
			return -EINVAL;
    8800:	f06f 0415 	mvn.w	r4, #21
    8804:	e7e0      	b.n	87c8 <compare_set+0x108>
    8806:	bf00      	nop
    8808:	200004b0 	.word	0x200004b0
    880c:	40011000 	.word	0x40011000
    8810:	20000ae4 	.word	0x20000ae4

00008814 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    8814:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    8816:	4b19      	ldr	r3, [pc, #100]	; (887c <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    8818:	4d19      	ldr	r5, [pc, #100]	; (8880 <sys_clock_driver_init+0x6c>)
    881a:	2400      	movs	r4, #0
    881c:	f04f 30ff 	mov.w	r0, #4294967295
    8820:	f04f 31ff 	mov.w	r1, #4294967295
    8824:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    8828:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    882c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8830:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8834:	4b13      	ldr	r3, [pc, #76]	; (8884 <sys_clock_driver_init+0x70>)
    8836:	2602      	movs	r6, #2
    8838:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    883c:	2101      	movs	r1, #1
    883e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    8842:	2011      	movs	r0, #17
    8844:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    8848:	4622      	mov	r2, r4
    884a:	f7fd f871 	bl	5930 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    884e:	2011      	movs	r0, #17
    8850:	f7fd f83c 	bl	58cc <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    8854:	4a0c      	ldr	r2, [pc, #48]	; (8888 <sys_clock_driver_init+0x74>)
    8856:	2301      	movs	r3, #1
    8858:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    885a:	4a0c      	ldr	r2, [pc, #48]	; (888c <sys_clock_driver_init+0x78>)
    885c:	602b      	str	r3, [r5, #0]
    885e:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    8860:	4b0b      	ldr	r3, [pc, #44]	; (8890 <sys_clock_driver_init+0x7c>)
    8862:	4a0c      	ldr	r2, [pc, #48]	; (8894 <sys_clock_driver_init+0x80>)
    8864:	9300      	str	r3, [sp, #0]
    8866:	9401      	str	r4, [sp, #4]
    8868:	2300      	movs	r3, #0
    886a:	4620      	mov	r0, r4
    886c:	f7ff ff28 	bl	86c0 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    8870:	4630      	mov	r0, r6
    8872:	f7ff f8d7 	bl	7a24 <z_nrf_clock_control_lf_on>

	return 0;
}
    8876:	4620      	mov	r0, r4
    8878:	b002      	add	sp, #8
    887a:	bd70      	pop	{r4, r5, r6, pc}
    887c:	200004b0 	.word	0x200004b0
    8880:	40011000 	.word	0x40011000
    8884:	e000e100 	.word	0xe000e100
    8888:	40011008 	.word	0x40011008
    888c:	20000ae8 	.word	0x20000ae8
    8890:	00008559 	.word	0x00008559
    8894:	007fffff 	.word	0x007fffff

00008898 <rtc_nrf_isr>:
{
    8898:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    889c:	4c34      	ldr	r4, [pc, #208]	; (8970 <rtc_nrf_isr+0xd8>)
    889e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    88a2:	079a      	lsls	r2, r3, #30
    88a4:	d509      	bpl.n	88ba <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    88a6:	4b33      	ldr	r3, [pc, #204]	; (8974 <rtc_nrf_isr+0xdc>)
    88a8:	681a      	ldr	r2, [r3, #0]
    88aa:	b132      	cbz	r2, 88ba <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    88ac:	2200      	movs	r2, #0
    88ae:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    88b0:	4a31      	ldr	r2, [pc, #196]	; (8978 <rtc_nrf_isr+0xe0>)
    88b2:	681b      	ldr	r3, [r3, #0]
    88b4:	6813      	ldr	r3, [r2, #0]
    88b6:	3301      	adds	r3, #1
    88b8:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    88ba:	f04f 0320 	mov.w	r3, #32
    88be:	f3ef 8211 	mrs	r2, BASEPRI
    88c2:	f383 8812 	msr	BASEPRI_MAX, r3
    88c6:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    88ca:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    88ce:	03db      	lsls	r3, r3, #15
    88d0:	d512      	bpl.n	88f8 <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    88d2:	f3bf 8f5b 	dmb	ish
    88d6:	4b29      	ldr	r3, [pc, #164]	; (897c <rtc_nrf_isr+0xe4>)
    88d8:	e853 1f00 	ldrex	r1, [r3]
    88dc:	f021 0001 	bic.w	r0, r1, #1
    88e0:	e843 0600 	strex	r6, r0, [r3]
    88e4:	2e00      	cmp	r6, #0
    88e6:	d1f7      	bne.n	88d8 <rtc_nrf_isr+0x40>
    88e8:	f3bf 8f5b 	dmb	ish
    88ec:	4b24      	ldr	r3, [pc, #144]	; (8980 <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    88ee:	2900      	cmp	r1, #0
    88f0:	d136      	bne.n	8960 <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    88f2:	6819      	ldr	r1, [r3, #0]
		if (result) {
    88f4:	2900      	cmp	r1, #0
    88f6:	d133      	bne.n	8960 <rtc_nrf_isr+0xc8>
{
    88f8:	2300      	movs	r3, #0
	__asm__ volatile(
    88fa:	f382 8811 	msr	BASEPRI, r2
    88fe:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    8902:	b353      	cbz	r3, 895a <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
    8904:	f7ff feba 	bl	867c <z_nrf_rtc_timer_read>
    8908:	4606      	mov	r6, r0
	__asm__ volatile(
    890a:	f04f 0320 	mov.w	r3, #32
    890e:	f3ef 8011 	mrs	r0, BASEPRI
    8912:	f383 8812 	msr	BASEPRI_MAX, r3
    8916:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    891a:	4b1a      	ldr	r3, [pc, #104]	; (8984 <rtc_nrf_isr+0xec>)
    891c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    8920:	4549      	cmp	r1, r9
    8922:	bf08      	it	eq
    8924:	4546      	cmpeq	r6, r8
    8926:	f04f 0200 	mov.w	r2, #0
    892a:	d31e      	bcc.n	896a <rtc_nrf_isr+0xd2>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    892c:	f04f 36ff 	mov.w	r6, #4294967295
    8930:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
    8934:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    8938:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    893c:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    893e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8942:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    8946:	f380 8811 	msr	BASEPRI, r0
    894a:	f3bf 8f6f 	isb	sy
		if (handler) {
    894e:	b121      	cbz	r1, 895a <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
    8950:	9500      	str	r5, [sp, #0]
    8952:	4642      	mov	r2, r8
    8954:	464b      	mov	r3, r9
    8956:	2000      	movs	r0, #0
    8958:	4788      	blx	r1
}
    895a:	b003      	add	sp, #12
    895c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    8960:	2100      	movs	r1, #0
    8962:	6019      	str	r1, [r3, #0]
    8964:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    8966:	2301      	movs	r3, #1
}
    8968:	e7c7      	b.n	88fa <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    896a:	4611      	mov	r1, r2
    896c:	e7eb      	b.n	8946 <rtc_nrf_isr+0xae>
    896e:	bf00      	nop
    8970:	40011000 	.word	0x40011000
    8974:	40011104 	.word	0x40011104
    8978:	20000aec 	.word	0x20000aec
    897c:	20000ae4 	.word	0x20000ae4
    8980:	40011140 	.word	0x40011140
    8984:	200004b0 	.word	0x200004b0

00008988 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    8988:	4b14      	ldr	r3, [pc, #80]	; (89dc <sys_clock_set_timeout+0x54>)
{
    898a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    898c:	f1b0 3fff 	cmp.w	r0, #4294967295
    8990:	bf08      	it	eq
    8992:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    8994:	1e44      	subs	r4, r0, #1
    8996:	2c00      	cmp	r4, #0
    8998:	dd1e      	ble.n	89d8 <sys_clock_set_timeout+0x50>
    899a:	429c      	cmp	r4, r3
    899c:	bfa8      	it	ge
    899e:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    89a0:	f7ff fe6c 	bl	867c <z_nrf_rtc_timer_read>
    89a4:	4b0e      	ldr	r3, [pc, #56]	; (89e0 <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    89a6:	490f      	ldr	r1, [pc, #60]	; (89e4 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    89a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    89ac:	1a80      	subs	r0, r0, r2
		ticks = 0;
    89ae:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    89b2:	bf28      	it	cs
    89b4:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    89b6:	3001      	adds	r0, #1
    89b8:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    89ba:	4808      	ldr	r0, [pc, #32]	; (89dc <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    89bc:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    89be:	4284      	cmp	r4, r0
    89c0:	bf28      	it	cs
    89c2:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    89c4:	1912      	adds	r2, r2, r4
    89c6:	f04f 0000 	mov.w	r0, #0
    89ca:	9001      	str	r0, [sp, #4]
    89cc:	f143 0300 	adc.w	r3, r3, #0
    89d0:	f7ff fe76 	bl	86c0 <compare_set>
}
    89d4:	b002      	add	sp, #8
    89d6:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    89d8:	2400      	movs	r4, #0
    89da:	e7e1      	b.n	89a0 <sys_clock_set_timeout+0x18>
    89dc:	007fffff 	.word	0x007fffff
    89e0:	200004c0 	.word	0x200004c0
    89e4:	00008559 	.word	0x00008559

000089e8 <sys_clock_elapsed>:
{
    89e8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    89ea:	f7ff fe47 	bl	867c <z_nrf_rtc_timer_read>
    89ee:	4b02      	ldr	r3, [pc, #8]	; (89f8 <sys_clock_elapsed+0x10>)
    89f0:	681b      	ldr	r3, [r3, #0]
}
    89f2:	1ac0      	subs	r0, r0, r3
    89f4:	bd08      	pop	{r3, pc}
    89f6:	bf00      	nop
    89f8:	200004c0 	.word	0x200004c0

000089fc <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    89fc:	b508      	push	{r3, lr}
	z_impl_log_panic();
    89fe:	f7fc f94b 	bl	4c98 <z_impl_log_panic>
    8a02:	4b06      	ldr	r3, [pc, #24]	; (8a1c <k_sys_fatal_error_handler+0x20>)
    8a04:	4906      	ldr	r1, [pc, #24]	; (8a20 <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    8a06:	4807      	ldr	r0, [pc, #28]	; (8a24 <k_sys_fatal_error_handler+0x28>)
    8a08:	1ac9      	subs	r1, r1, r3
    8a0a:	08c9      	lsrs	r1, r1, #3
    8a0c:	0189      	lsls	r1, r1, #6
    8a0e:	f041 0101 	orr.w	r1, r1, #1
    8a12:	f006 fdcb 	bl	f5ac <log_0>
		sys_arch_reboot(0);
    8a16:	2000      	movs	r0, #0
    8a18:	f7fd fd7e 	bl	6518 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    8a1c:	000130a4 	.word	0x000130a4
    8a20:	000130bc 	.word	0x000130bc
    8a24:	000147a5 	.word	0x000147a5

00008a28 <RADIO_IRQHandler>:
	irq_unlock(key);
}

static void radio_irq_handler(void)
{
	if (NRF_RADIO->EVENTS_READY &&
    8a28:	4b19      	ldr	r3, [pc, #100]	; (8a90 <RADIO_IRQHandler+0x68>)
			event_handler(&event);
		}
	}
}

ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    8a2a:	4668      	mov	r0, sp
    8a2c:	f020 0107 	bic.w	r1, r0, #7
	if (NRF_RADIO->EVENTS_READY &&
    8a30:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    8a34:	468d      	mov	sp, r1
    8a36:	b501      	push	{r0, lr}
	if (NRF_RADIO->EVENTS_READY &&
    8a38:	b14a      	cbz	r2, 8a4e <RADIO_IRQHandler+0x26>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_READY_Msk)) {
    8a3a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_READY &&
    8a3e:	07d0      	lsls	r0, r2, #31
		NRF_RADIO->EVENTS_READY = 0;
    8a40:	bf41      	itttt	mi
    8a42:	2200      	movmi	r2, #0
    8a44:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
		ESB_SYS_TIMER->TASKS_START;
    8a48:	f503 4310 	addmi.w	r3, r3, #36864	; 0x9000
    8a4c:	681b      	ldrmi	r3, [r3, #0]
	if (NRF_RADIO->EVENTS_END &&
    8a4e:	4b10      	ldr	r3, [pc, #64]	; (8a90 <RADIO_IRQHandler+0x68>)
    8a50:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    8a54:	b132      	cbz	r2, 8a64 <RADIO_IRQHandler+0x3c>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_END_Msk)) {
    8a56:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_END &&
    8a5a:	0711      	lsls	r1, r2, #28
		NRF_RADIO->EVENTS_END = 0;
    8a5c:	bf44      	itt	mi
    8a5e:	2200      	movmi	r2, #0
    8a60:	f8c3 210c 	strmi.w	r2, [r3, #268]	; 0x10c
	if (NRF_RADIO->EVENTS_DISABLED &&
    8a64:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    8a68:	b152      	cbz	r2, 8a80 <RADIO_IRQHandler+0x58>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_DISABLED_Msk)) {
    8a6a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_DISABLED &&
    8a6e:	06d2      	lsls	r2, r2, #27
    8a70:	d506      	bpl.n	8a80 <RADIO_IRQHandler+0x58>
		NRF_RADIO->EVENTS_DISABLED = 0;
    8a72:	2200      	movs	r2, #0
    8a74:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		if (on_radio_disabled) {
    8a78:	4b06      	ldr	r3, [pc, #24]	; (8a94 <RADIO_IRQHandler+0x6c>)
    8a7a:	681b      	ldr	r3, [r3, #0]
    8a7c:	b103      	cbz	r3, 8a80 <RADIO_IRQHandler+0x58>
			on_radio_disabled();
    8a7e:	4798      	blx	r3
{
	radio_irq_handler();

	ISR_DIRECT_PM();
    8a80:	f7fc ff7e 	bl	5980 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
    8a84:	f7fd f86a 	bl	5b5c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    8a88:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    8a8c:	4685      	mov	sp, r0
    8a8e:	4770      	bx	lr
    8a90:	40001000 	.word	0x40001000
    8a94:	20000afc 	.word	0x20000afc

00008a98 <SWI0_EGU0_IRQHandler>:

	return 1;
}


ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    8a98:	4668      	mov	r0, sp
    8a9a:	f020 0107 	bic.w	r1, r0, #7
    8a9e:	468d      	mov	sp, r1
    8aa0:	b531      	push	{r0, r4, r5, lr}
	event.tx_attempts = last_tx_attempts;
    8aa2:	4b1b      	ldr	r3, [pc, #108]	; (8b10 <SWI0_EGU0_IRQHandler+0x78>)
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    8aa4:	b082      	sub	sp, #8
	event.tx_attempts = last_tx_attempts;
    8aa6:	681b      	ldr	r3, [r3, #0]
    8aa8:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
    8aaa:	f04f 0320 	mov.w	r3, #32
    8aae:	f3ef 8111 	mrs	r1, BASEPRI
    8ab2:	f383 8812 	msr	BASEPRI_MAX, r3
    8ab6:	f3bf 8f6f 	isb	sy
	*interrupts = interrupt_flags;
    8aba:	4b16      	ldr	r3, [pc, #88]	; (8b14 <SWI0_EGU0_IRQHandler+0x7c>)
	interrupt_flags = 0;
    8abc:	2200      	movs	r2, #0
	*interrupts = interrupt_flags;
    8abe:	681d      	ldr	r5, [r3, #0]
	interrupt_flags = 0;
    8ac0:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    8ac2:	f381 8811 	msr	BASEPRI, r1
    8ac6:	f3bf 8f6f 	isb	sy
	if (event_handler != NULL) {
    8aca:	4c13      	ldr	r4, [pc, #76]	; (8b18 <SWI0_EGU0_IRQHandler+0x80>)
    8acc:	6823      	ldr	r3, [r4, #0]
    8ace:	b1ab      	cbz	r3, 8afc <SWI0_EGU0_IRQHandler+0x64>
		if (interrupts & INT_TX_SUCCESS_MSK) {
    8ad0:	07e9      	lsls	r1, r5, #31
    8ad2:	d503      	bpl.n	8adc <SWI0_EGU0_IRQHandler+0x44>
			event.evt_id = ESB_EVENT_TX_SUCCESS;
    8ad4:	f88d 2000 	strb.w	r2, [sp]
			event_handler(&event);
    8ad8:	4668      	mov	r0, sp
    8ada:	4798      	blx	r3
		if (interrupts & INT_TX_FAILED_MSK) {
    8adc:	07aa      	lsls	r2, r5, #30
    8ade:	d505      	bpl.n	8aec <SWI0_EGU0_IRQHandler+0x54>
			event.evt_id = ESB_EVENT_TX_FAILED;
    8ae0:	2301      	movs	r3, #1
    8ae2:	f88d 3000 	strb.w	r3, [sp]
			event_handler(&event);
    8ae6:	4668      	mov	r0, sp
    8ae8:	6823      	ldr	r3, [r4, #0]
    8aea:	4798      	blx	r3
		if (interrupts & INT_RX_DATA_RECEIVED_MSK) {
    8aec:	076b      	lsls	r3, r5, #29
    8aee:	d505      	bpl.n	8afc <SWI0_EGU0_IRQHandler+0x64>
			event.evt_id = ESB_EVENT_RX_RECEIVED;
    8af0:	2302      	movs	r3, #2
    8af2:	f88d 3000 	strb.w	r3, [sp]
			event_handler(&event);
    8af6:	4668      	mov	r0, sp
    8af8:	6823      	ldr	r3, [r4, #0]
    8afa:	4798      	blx	r3
{
	esb_evt_irq_handler();

	ISR_DIRECT_PM();
    8afc:	f7fc ff40 	bl	5980 <_arch_isr_direct_pm>
    8b00:	f7fd f82c 	bl	5b5c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    8b04:	b002      	add	sp, #8
    8b06:	e8bd 4031 	ldmia.w	sp!, {r0, r4, r5, lr}
    8b0a:	4685      	mov	sp, r0
    8b0c:	4770      	bx	lr
    8b0e:	bf00      	nop
    8b10:	20000af8 	.word	0x20000af8
    8b14:	20000af4 	.word	0x20000af4
    8b18:	20000af0 	.word	0x20000af0

00008b1c <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
    8b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
    8b1e:	6804      	ldr	r4, [r0, #0]
{
    8b20:	4605      	mov	r5, r0
	if (!tp) return vol;	/* Invalid path name? */
    8b22:	b37c      	cbz	r4, 8b84 <get_ldnumber+0x68>
    8b24:	4621      	mov	r1, r4
	do tc = *tt++; while (!IsTerminator(tc) && tc != ':');	/* Find a colon in the path */
    8b26:	f811 3b01 	ldrb.w	r3, [r1], #1
    8b2a:	2b1f      	cmp	r3, #31
    8b2c:	d92d      	bls.n	8b8a <get_ldnumber+0x6e>
    8b2e:	2b3a      	cmp	r3, #58	; 0x3a
    8b30:	d1f9      	bne.n	8b26 <get_ldnumber+0xa>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
    8b32:	7820      	ldrb	r0, [r4, #0]
    8b34:	3830      	subs	r0, #48	; 0x30
    8b36:	b2c3      	uxtb	r3, r0
    8b38:	2b09      	cmp	r3, #9
    8b3a:	d91e      	bls.n	8b7a <get_ldnumber+0x5e>
    8b3c:	4f16      	ldr	r7, [pc, #88]	; (8b98 <get_ldnumber+0x7c>)
    8b3e:	2000      	movs	r0, #0
		}
#if FF_STR_VOLUME_ID == 1	/* Arbitrary string is enabled */
		else {
			i = 0;
			do {
				sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
    8b40:	f857 cb04 	ldr.w	ip, [r7], #4
    8b44:	4626      	mov	r6, r4
				do {	/* Compare the volume ID with path name */
					c = *sp++; tc = *tp++;
    8b46:	f81c 3b01 	ldrb.w	r3, [ip], #1
    8b4a:	f816 2b01 	ldrb.w	r2, [r6], #1
					if (IsLower(c)) c -= 0x20;
    8b4e:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
    8b52:	f1be 0f19 	cmp.w	lr, #25
    8b56:	bf98      	it	ls
    8b58:	3b20      	subls	r3, #32
					if (IsLower(tc)) tc -= 0x20;
    8b5a:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
					if (IsLower(c)) c -= 0x20;
    8b5e:	bf98      	it	ls
    8b60:	b2db      	uxtbls	r3, r3
					if (IsLower(tc)) tc -= 0x20;
    8b62:	f1be 0f19 	cmp.w	lr, #25
    8b66:	bf9c      	itt	ls
    8b68:	3a20      	subls	r2, #32
    8b6a:	b2d2      	uxtbls	r2, r2
				} while (c && (TCHAR)c == tc);
    8b6c:	b17b      	cbz	r3, 8b8e <get_ldnumber+0x72>
    8b6e:	429a      	cmp	r2, r3
    8b70:	d0e9      	beq.n	8b46 <get_ldnumber+0x2a>
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
    8b72:	3001      	adds	r0, #1
    8b74:	2808      	cmp	r0, #8
    8b76:	d1e3      	bne.n	8b40 <get_ldnumber+0x24>
    8b78:	e004      	b.n	8b84 <get_ldnumber+0x68>
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
    8b7a:	1ca3      	adds	r3, r4, #2
    8b7c:	4299      	cmp	r1, r3
    8b7e:	d1dd      	bne.n	8b3c <get_ldnumber+0x20>
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
    8b80:	2807      	cmp	r0, #7
    8b82:	dd06      	ble.n	8b92 <get_ldnumber+0x76>
	if (!tp) return vol;	/* Invalid path name? */
    8b84:	f04f 30ff 	mov.w	r0, #4294967295
    8b88:	e004      	b.n	8b94 <get_ldnumber+0x78>
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
    8b8a:	2000      	movs	r0, #0
    8b8c:	e002      	b.n	8b94 <get_ldnumber+0x78>
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
    8b8e:	42b1      	cmp	r1, r6
    8b90:	d1ef      	bne.n	8b72 <get_ldnumber+0x56>
			*path = tt;		/* Snip the drive prefix off */
    8b92:	6029      	str	r1, [r5, #0]
}
    8b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8b96:	bf00      	nop
    8b98:	00013478 	.word	0x00013478

00008b9c <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
    8b9c:	b538      	push	{r3, r4, r5, lr}
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    8b9e:	2300      	movs	r3, #0
    8ba0:	70c3      	strb	r3, [r0, #3]
    8ba2:	f04f 33ff 	mov.w	r3, #4294967295
    8ba6:	6383      	str	r3, [r0, #56]	; 0x38
{
    8ba8:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
    8baa:	f007 fcd3 	bl	10554 <move_window>
    8bae:	2800      	cmp	r0, #0
    8bb0:	d169      	bne.n	8c86 <check_fs+0xea>
	rv = rv << 8 | ptr[0];
    8bb2:	f894 523b 	ldrb.w	r5, [r4, #571]	; 0x23b
    8bb6:	f894 023a 	ldrb.w	r0, [r4, #570]	; 0x23a
	sign = ld_word(fs->win + BS_55AA);
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
    8bba:	f64a 2355 	movw	r3, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
    8bbe:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
    8bc2:	429d      	cmp	r5, r3
    8bc4:	d040      	beq.n	8c48 <check_fs+0xac>
#endif
	b = fs->win[BS_JmpBoot];
    8bc6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
    8bca:	2beb      	cmp	r3, #235	; 0xeb
    8bcc:	d146      	bne.n	8c5c <check_fs+0xc0>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
    8bce:	f64a 2355 	movw	r3, #43605	; 0xaa55
    8bd2:	429d      	cmp	r5, r3
    8bd4:	d04d      	beq.n	8c72 <check_fs+0xd6>
	rv = rv << 8 | ptr[0];
    8bd6:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
    8bda:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
    8bde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			return 0;	/* It is an FAT32 VBR */
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
		b = fs->win[BPB_SecPerClus];
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
    8be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8be6:	d13d      	bne.n	8c64 <check_fs+0xc8>
		b = fs->win[BPB_SecPerClus];
    8be8:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
    8bec:	b3d3      	cbz	r3, 8c64 <check_fs+0xc8>
    8bee:	1e5a      	subs	r2, r3, #1
    8bf0:	421a      	tst	r2, r3
    8bf2:	d137      	bne.n	8c64 <check_fs+0xc8>
	rv = rv << 8 | ptr[0];
    8bf4:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
    8bf8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
    8bfc:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
    8c00:	d030      	beq.n	8c64 <check_fs+0xc8>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
    8c02:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
    8c06:	3b01      	subs	r3, #1
    8c08:	2b01      	cmp	r3, #1
    8c0a:	d82b      	bhi.n	8c64 <check_fs+0xc8>
	rv = rv << 8 | ptr[0];
    8c0c:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
    8c10:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
    8c14:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
    8c18:	d024      	beq.n	8c64 <check_fs+0xc8>
	rv = rv << 8 | ptr[0];
    8c1a:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
    8c1e:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
    8c22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8c26:	2b7f      	cmp	r3, #127	; 0x7f
    8c28:	d806      	bhi.n	8c38 <check_fs+0x9c>
    8c2a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    8c2e:	f007 fa9f 	bl	10170 <ld_dword>
    8c32:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    8c36:	d315      	bcc.n	8c64 <check_fs+0xc8>
	rv = rv << 8 | ptr[0];
    8c38:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
    8c3c:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
    8c40:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
    8c44:	d00e      	beq.n	8c64 <check_fs+0xc8>
    8c46:	e01c      	b.n	8c82 <check_fs+0xe6>
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
    8c48:	4910      	ldr	r1, [pc, #64]	; (8c8c <check_fs+0xf0>)
    8c4a:	220b      	movs	r2, #11
    8c4c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    8c50:	f009 fb3c 	bl	122cc <memcmp>
    8c54:	2800      	cmp	r0, #0
    8c56:	d1b6      	bne.n	8bc6 <check_fs+0x2a>
    8c58:	2001      	movs	r0, #1
    8c5a:	e009      	b.n	8c70 <check_fs+0xd4>
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
    8c5c:	3318      	adds	r3, #24
    8c5e:	b2db      	uxtb	r3, r3
    8c60:	2b01      	cmp	r3, #1
    8c62:	d9b4      	bls.n	8bce <check_fs+0x32>
				return 0;	/* It can be presumed an FAT VBR */
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
    8c64:	f64a 2055 	movw	r0, #43605	; 0xaa55
    8c68:	4285      	cmp	r5, r0
    8c6a:	bf0c      	ite	eq
    8c6c:	2002      	moveq	r0, #2
    8c6e:	2003      	movne	r0, #3
}
    8c70:	bd38      	pop	{r3, r4, r5, pc}
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
    8c72:	4907      	ldr	r1, [pc, #28]	; (8c90 <check_fs+0xf4>)
    8c74:	2208      	movs	r2, #8
    8c76:	f104 008e 	add.w	r0, r4, #142	; 0x8e
    8c7a:	f009 fb27 	bl	122cc <memcmp>
    8c7e:	2800      	cmp	r0, #0
    8c80:	d1a9      	bne.n	8bd6 <check_fs+0x3a>
			return 0;	/* It is an FAT32 VBR */
    8c82:	2000      	movs	r0, #0
    8c84:	e7f4      	b.n	8c70 <check_fs+0xd4>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
    8c86:	2004      	movs	r0, #4
    8c88:	e7f2      	b.n	8c70 <check_fs+0xd4>
    8c8a:	bf00      	nop
    8c8c:	000147c2 	.word	0x000147c2
    8c90:	000147f5 	.word	0x000147f5

00008c94 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
    8c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
    8c98:	2300      	movs	r3, #0
    8c9a:	600b      	str	r3, [r1, #0]
{
    8c9c:	460f      	mov	r7, r1
    8c9e:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
    8ca0:	f7ff ff3c 	bl	8b1c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    8ca4:	1e06      	subs	r6, r0, #0
    8ca6:	f2c0 81eb 	blt.w	9080 <mount_volume+0x3ec>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
    8caa:	4b86      	ldr	r3, [pc, #536]	; (8ec4 <mount_volume+0x230>)
    8cac:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
    8cb0:	2c00      	cmp	r4, #0
    8cb2:	f000 81e7 	beq.w	9084 <mount_volume+0x3f0>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
    8cb6:	603c      	str	r4, [r7, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
    8cb8:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
    8cba:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
    8cbe:	b16b      	cbz	r3, 8cdc <mount_volume+0x48>
		stat = disk_status(fs->pdrv);
    8cc0:	7860      	ldrb	r0, [r4, #1]
    8cc2:	f001 fd13 	bl	a6ec <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
    8cc6:	07c7      	lsls	r7, r0, #31
    8cc8:	d408      	bmi.n	8cdc <mount_volume+0x48>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
    8cca:	b11d      	cbz	r5, 8cd4 <mount_volume+0x40>
    8ccc:	f010 0504 	ands.w	r5, r0, #4
    8cd0:	d000      	beq.n	8cd4 <mount_volume+0x40>
				return FR_WRITE_PROTECTED;
    8cd2:	250a      	movs	r5, #10
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
    8cd4:	4628      	mov	r0, r5
    8cd6:	b004      	add	sp, #16
    8cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
    8cdc:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the filesystem object */
    8cde:	2300      	movs	r3, #0
    8ce0:	7023      	strb	r3, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
    8ce2:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
    8ce4:	f001 fd1e 	bl	a724 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
    8ce8:	07c6      	lsls	r6, r0, #31
    8cea:	f100 81cd 	bmi.w	9088 <mount_volume+0x3f4>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
    8cee:	b10d      	cbz	r5, 8cf4 <mount_volume+0x60>
    8cf0:	0741      	lsls	r1, r0, #29
    8cf2:	d4ee      	bmi.n	8cd2 <mount_volume+0x3e>
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
    8cf4:	2100      	movs	r1, #0
    8cf6:	4620      	mov	r0, r4
    8cf8:	f7ff ff50 	bl	8b9c <check_fs>
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
    8cfc:	2802      	cmp	r0, #2
    8cfe:	f040 80a3 	bne.w	8e48 <mount_volume+0x1b4>
    8d02:	466e      	mov	r6, sp
    8d04:	f204 2102 	addw	r1, r4, #514	; 0x202
    8d08:	f204 2742 	addw	r7, r4, #578	; 0x242
    8d0c:	4635      	mov	r5, r6
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
    8d0e:	4608      	mov	r0, r1
    8d10:	f007 fa2e 	bl	10170 <ld_dword>
    8d14:	3110      	adds	r1, #16
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
    8d16:	42b9      	cmp	r1, r7
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
    8d18:	f845 0b04 	str.w	r0, [r5], #4
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
    8d1c:	d1f7      	bne.n	8d0e <mount_volume+0x7a>
    8d1e:	2500      	movs	r5, #0
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
    8d20:	f856 1b04 	ldr.w	r1, [r6], #4
    8d24:	2900      	cmp	r1, #0
    8d26:	f000 8086 	beq.w	8e36 <mount_volume+0x1a2>
    8d2a:	4620      	mov	r0, r4
    8d2c:	f7ff ff36 	bl	8b9c <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
    8d30:	2801      	cmp	r0, #1
    8d32:	f200 8081 	bhi.w	8e38 <mount_volume+0x1a4>
	if (fmt == 1) {
    8d36:	2801      	cmp	r0, #1
	bsect = fs->winsect;					/* Volume offset */
    8d38:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if (fmt == 1) {
    8d3a:	f040 80cd 	bne.w	8ed8 <mount_volume+0x244>
    8d3e:	f104 0347 	add.w	r3, r4, #71	; 0x47
    8d42:	f104 027c 	add.w	r2, r4, #124	; 0x7c
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
    8d46:	f813 6b01 	ldrb.w	r6, [r3], #1
    8d4a:	2e00      	cmp	r6, #0
    8d4c:	f040 8081 	bne.w	8e52 <mount_volume+0x1be>
    8d50:	429a      	cmp	r2, r3
    8d52:	d1f8      	bne.n	8d46 <mount_volume+0xb2>
	rv = rv << 8 | ptr[0];
    8d54:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    8d58:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    8d5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
    8d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8d64:	d175      	bne.n	8e52 <mount_volume+0x1be>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
    8d66:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    8d6a:	2b09      	cmp	r3, #9
    8d6c:	d171      	bne.n	8e52 <mount_volume+0x1be>
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
    8d6e:	f104 0084 	add.w	r0, r4, #132	; 0x84
    8d72:	f007 fa05 	bl	10180 <ld_qword>
    8d76:	eb10 0805 	adds.w	r8, r0, r5
    8d7a:	f141 0900 	adc.w	r9, r1, #0
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */
    8d7e:	f1b9 0f01 	cmp.w	r9, #1
    8d82:	bf08      	it	eq
    8d84:	f1b8 0f00 	cmpeq.w	r8, #0
    8d88:	d263      	bcs.n	8e52 <mount_volume+0x1be>
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
    8d8a:	f104 0090 	add.w	r0, r4, #144	; 0x90
    8d8e:	f007 f9ef 	bl	10170 <ld_dword>
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
    8d92:	f894 a0aa 	ldrb.w	sl, [r4, #170]	; 0xaa
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
    8d96:	6220      	str	r0, [r4, #32]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
    8d98:	f1ba 0f01 	cmp.w	sl, #1
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
    8d9c:	f884 a002 	strb.w	sl, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
    8da0:	d157      	bne.n	8e52 <mount_volume+0x1be>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
    8da2:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
    8da6:	fa0a fa01 	lsl.w	sl, sl, r1
    8daa:	fa1f f38a 	uxth.w	r3, sl
    8dae:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768 sectors) */
    8db0:	2b00      	cmp	r3, #0
    8db2:	d04e      	beq.n	8e52 <mount_volume+0x1be>
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
    8db4:	f104 0098 	add.w	r0, r4, #152	; 0x98
    8db8:	f007 f9da 	bl	10170 <ld_dword>
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
    8dbc:	4b42      	ldr	r3, [pc, #264]	; (8ec8 <mount_volume+0x234>)
    8dbe:	4298      	cmp	r0, r3
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
    8dc0:	4601      	mov	r1, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
    8dc2:	d846      	bhi.n	8e52 <mount_volume+0x1be>
		fs->n_fatent = nclst + 2;
    8dc4:	1c83      	adds	r3, r0, #2
    8dc6:	61e3      	str	r3, [r4, #28]
		fs->volbase = bsect;
    8dc8:	6265      	str	r5, [r4, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
    8dca:	f104 0094 	add.w	r0, r4, #148	; 0x94
    8dce:	f007 f9cf 	bl	10170 <ld_dword>
    8dd2:	1947      	adds	r7, r0, r5
    8dd4:	6327      	str	r7, [r4, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
    8dd6:	f104 008c 	add.w	r0, r4, #140	; 0x8c
    8dda:	f007 f9c9 	bl	10170 <ld_dword>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
    8dde:	fa1f fa8a 	uxth.w	sl, sl
    8de2:	fb01 f10a 	mul.w	r1, r1, sl
    8de6:	187a      	adds	r2, r7, r1
    8de8:	f04f 0300 	mov.w	r3, #0
    8dec:	f143 0300 	adc.w	r3, r3, #0
    8df0:	4599      	cmp	r9, r3
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
    8df2:	4405      	add	r5, r0
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
    8df4:	bf08      	it	eq
    8df6:	4590      	cmpeq	r8, r2
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
    8df8:	62a5      	str	r5, [r4, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
    8dfa:	d32a      	bcc.n	8e52 <mount_volume+0x1be>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
    8dfc:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    8e00:	f007 f9b6 	bl	10170 <ld_dword>
		so = i = 0;
    8e04:	4635      	mov	r5, r6
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
    8e06:	62e0      	str	r0, [r4, #44]	; 0x2c
			if (i == 0) {
    8e08:	b965      	cbnz	r5, 8e24 <mount_volume+0x190>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
    8e0a:	8963      	ldrh	r3, [r4, #10]
    8e0c:	42b3      	cmp	r3, r6
    8e0e:	d920      	bls.n	8e52 <mount_volume+0x1be>
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
    8e10:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    8e12:	4620      	mov	r0, r4
    8e14:	f007 f9e1 	bl	101da <clst2sect>
    8e18:	1981      	adds	r1, r0, r6
    8e1a:	4620      	mov	r0, r4
    8e1c:	f007 fb9a 	bl	10554 <move_window>
    8e20:	b980      	cbnz	r0, 8e44 <mount_volume+0x1b0>
				so++;
    8e22:	3601      	adds	r6, #1
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
    8e24:	1963      	adds	r3, r4, r5
    8e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8e2a:	2b81      	cmp	r3, #129	; 0x81
    8e2c:	d013      	beq.n	8e56 <mount_volume+0x1c2>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
    8e2e:	3520      	adds	r5, #32
    8e30:	f3c5 0508 	ubfx	r5, r5, #0, #9
			if (i == 0) {
    8e34:	e7e8      	b.n	8e08 <mount_volume+0x174>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
    8e36:	2003      	movs	r0, #3
	} while (part == 0 && fmt >= 2 && ++i < 4);
    8e38:	3501      	adds	r5, #1
    8e3a:	2d04      	cmp	r5, #4
    8e3c:	f47f af70 	bne.w	8d20 <mount_volume+0x8c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    8e40:	2804      	cmp	r0, #4
    8e42:	d106      	bne.n	8e52 <mount_volume+0x1be>
    8e44:	2501      	movs	r5, #1
    8e46:	e745      	b.n	8cd4 <mount_volume+0x40>
    8e48:	2804      	cmp	r0, #4
    8e4a:	d0fb      	beq.n	8e44 <mount_volume+0x1b0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
    8e4c:	2801      	cmp	r0, #1
    8e4e:	f67f af72 	bls.w	8d36 <mount_volume+0xa2>
    8e52:	250d      	movs	r5, #13
    8e54:	e73e      	b.n	8cd4 <mount_volume+0x40>
		bcl = ld_dword(fs->win + i + 20);				/* Bitmap cluster */
    8e56:	f105 0014 	add.w	r0, r5, #20
    8e5a:	f104 063c 	add.w	r6, r4, #60	; 0x3c
    8e5e:	4430      	add	r0, r6
    8e60:	f007 f986 	bl	10170 <ld_dword>
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
    8e64:	2801      	cmp	r0, #1
		bcl = ld_dword(fs->win + i + 20);				/* Bitmap cluster */
    8e66:	4605      	mov	r5, r0
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
    8e68:	d9f3      	bls.n	8e52 <mount_volume+0x1be>
    8e6a:	69e3      	ldr	r3, [r4, #28]
    8e6c:	4283      	cmp	r3, r0
    8e6e:	d9f0      	bls.n	8e52 <mount_volume+0x1be>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
    8e70:	8962      	ldrh	r2, [r4, #10]
    8e72:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8e74:	1e83      	subs	r3, r0, #2
    8e76:	fb03 1302 	mla	r3, r3, r2, r1
    8e7a:	6363      	str	r3, [r4, #52]	; 0x34
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
    8e7c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    8e7e:	4620      	mov	r0, r4
    8e80:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
    8e84:	f007 fb66 	bl	10554 <move_window>
    8e88:	2800      	cmp	r0, #0
    8e8a:	d1db      	bne.n	8e44 <mount_volume+0x1b0>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
    8e8c:	f005 007f 	and.w	r0, r5, #127	; 0x7f
    8e90:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    8e94:	f007 f96c 	bl	10170 <ld_dword>
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
    8e98:	1c42      	adds	r2, r0, #1
    8e9a:	d003      	beq.n	8ea4 <mount_volume+0x210>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented? */
    8e9c:	3501      	adds	r5, #1
    8e9e:	42a8      	cmp	r0, r5
    8ea0:	d0ec      	beq.n	8e7c <mount_volume+0x1e8>
    8ea2:	e7d6      	b.n	8e52 <mount_volume+0x1be>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
    8ea4:	e9c4 0005 	strd	r0, r0, [r4, #20]
		fmt = FS_EXFAT;			/* FAT sub-type */
    8ea8:	2704      	movs	r7, #4
	fs->id = ++Fsid;		/* Volume mount ID */
    8eaa:	4a08      	ldr	r2, [pc, #32]	; (8ecc <mount_volume+0x238>)
	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
    8eac:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
    8eae:	8813      	ldrh	r3, [r2, #0]
    8eb0:	3301      	adds	r3, #1
    8eb2:	b29b      	uxth	r3, r3
    8eb4:	8013      	strh	r3, [r2, #0]
    8eb6:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
    8eb8:	4b05      	ldr	r3, [pc, #20]	; (8ed0 <mount_volume+0x23c>)
    8eba:	60e3      	str	r3, [r4, #12]
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
    8ebc:	4b05      	ldr	r3, [pc, #20]	; (8ed4 <mount_volume+0x240>)
    8ebe:	6123      	str	r3, [r4, #16]
	return FR_OK;
    8ec0:	2500      	movs	r5, #0
    8ec2:	e707      	b.n	8cd4 <mount_volume+0x40>
    8ec4:	20000b00 	.word	0x20000b00
    8ec8:	7ffffffd 	.word	0x7ffffffd
    8ecc:	20000c74 	.word	0x20000c74
    8ed0:	20000c76 	.word	0x20000c76
    8ed4:	20000f98 	.word	0x20000f98
	rv = rv << 8 | ptr[0];
    8ed8:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
    8edc:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
    8ee0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
    8ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8ee8:	d1b3      	bne.n	8e52 <mount_volume+0x1be>
	rv = rv << 8 | ptr[0];
    8eea:	f894 0053 	ldrb.w	r0, [r4, #83]	; 0x53
    8eee:	f894 1052 	ldrb.w	r1, [r4, #82]	; 0x52
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
    8ef2:	ea51 2100 	orrs.w	r1, r1, r0, lsl #8
    8ef6:	d104      	bne.n	8f02 <mount_volume+0x26e>
    8ef8:	f104 0060 	add.w	r0, r4, #96	; 0x60
    8efc:	f007 f938 	bl	10170 <ld_dword>
    8f00:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
    8f02:	f894 904c 	ldrb.w	r9, [r4, #76]	; 0x4c
		fs->fsize = fasize;
    8f06:	6221      	str	r1, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
    8f08:	f109 33ff 	add.w	r3, r9, #4294967295
    8f0c:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
    8f0e:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
    8f12:	d89e      	bhi.n	8e52 <mount_volume+0x1be>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
    8f14:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
    8f18:	8167      	strh	r7, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    8f1a:	2f00      	cmp	r7, #0
    8f1c:	d099      	beq.n	8e52 <mount_volume+0x1be>
    8f1e:	1e7b      	subs	r3, r7, #1
    8f20:	423b      	tst	r3, r7
    8f22:	d196      	bne.n	8e52 <mount_volume+0x1be>
	rv = rv << 8 | ptr[0];
    8f24:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
    8f28:	f894 604d 	ldrb.w	r6, [r4, #77]	; 0x4d
    8f2c:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    8f30:	0733      	lsls	r3, r6, #28
	rv = rv << 8 | ptr[0];
    8f32:	fa0f f886 	sxth.w	r8, r6
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
    8f36:	8126      	strh	r6, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    8f38:	d18b      	bne.n	8e52 <mount_volume+0x1be>
	rv = rv << 8 | ptr[0];
    8f3a:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    8f3e:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
    8f42:	ea53 2000 	orrs.w	r0, r3, r0, lsl #8
    8f46:	d103      	bne.n	8f50 <mount_volume+0x2bc>
    8f48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    8f4c:	f007 f910 	bl	10170 <ld_dword>
	rv = rv << 8 | ptr[0];
    8f50:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    8f54:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
    8f58:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
    8f5c:	f43f af79 	beq.w	8e52 <mount_volume+0x1be>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
    8f60:	fb01 f909 	mul.w	r9, r1, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
    8f64:	eb02 1c16 	add.w	ip, r2, r6, lsr #4
    8f68:	44cc      	add	ip, r9
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
    8f6a:	4560      	cmp	r0, ip
    8f6c:	f4ff af71 	bcc.w	8e52 <mount_volume+0x1be>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
    8f70:	eba0 030c 	sub.w	r3, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    8f74:	42bb      	cmp	r3, r7
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
    8f76:	fbb3 faf7 	udiv	sl, r3, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    8f7a:	f4ff af6a 	bcc.w	8e52 <mount_volume+0x1be>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
    8f7e:	4b47      	ldr	r3, [pc, #284]	; (909c <mount_volume+0x408>)
    8f80:	459a      	cmp	sl, r3
    8f82:	f63f af66 	bhi.w	8e52 <mount_volume+0x1be>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
    8f86:	f64f 73f5 	movw	r3, #65525	; 0xfff5
    8f8a:	459a      	cmp	sl, r3
    8f8c:	d97e      	bls.n	908c <mount_volume+0x3f8>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
    8f8e:	2703      	movs	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    8f90:	f10a 0a02 	add.w	sl, sl, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    8f94:	442a      	add	r2, r5
		fs->database = bsect + sysect;					/* Data start sector */
    8f96:	eb05 030c 	add.w	r3, r5, ip
		if (fmt == FS_FAT32) {
    8f9a:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    8f9c:	f8c4 a01c 	str.w	sl, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
    8fa0:	6265      	str	r5, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    8fa2:	62a2      	str	r2, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
    8fa4:	6323      	str	r3, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
    8fa6:	d15a      	bne.n	905e <mount_volume+0x3ca>
	rv = rv << 8 | ptr[0];
    8fa8:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
    8fac:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
    8fb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
    8fb4:	ea48 0803 	orr.w	r8, r8, r3
    8fb8:	fa0f f388 	sxth.w	r3, r8
    8fbc:	2b00      	cmp	r3, #0
    8fbe:	f47f af48 	bne.w	8e52 <mount_volume+0x1be>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
    8fc2:	f104 0068 	add.w	r0, r4, #104	; 0x68
    8fc6:	f007 f8d3 	bl	10170 <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
    8fca:	ea4f 038a 	mov.w	r3, sl, lsl #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
    8fce:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    8fd0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
    8fd4:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
    8fd8:	f4ff af3b 	bcc.w	8e52 <mount_volume+0x1be>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
    8fdc:	f04f 33ff 	mov.w	r3, #4294967295
    8fe0:	e9c4 3305 	strd	r3, r3, [r4, #20]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
    8fe4:	2f03      	cmp	r7, #3
		fs->fsi_flag = 0x80;
    8fe6:	f04f 0380 	mov.w	r3, #128	; 0x80
    8fea:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
    8fec:	f47f af5d 	bne.w	8eaa <mount_volume+0x216>
	rv = rv << 8 | ptr[0];
    8ff0:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
    8ff4:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
    8ff8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
    8ffc:	2b01      	cmp	r3, #1
    8ffe:	f47f af54 	bne.w	8eaa <mount_volume+0x216>
			&& move_window(fs, bsect + 1) == FR_OK)
    9002:	1c69      	adds	r1, r5, #1
    9004:	4620      	mov	r0, r4
    9006:	f007 faa5 	bl	10554 <move_window>
    900a:	2800      	cmp	r0, #0
    900c:	f47f af4d 	bne.w	8eaa <mount_volume+0x216>
	rv = rv << 8 | ptr[0];
    9010:	f894 223b 	ldrb.w	r2, [r4, #571]	; 0x23b
    9014:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
			fs->fsi_flag = 0;
    9018:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
    901a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
    901e:	f64a 2255 	movw	r2, #43605	; 0xaa55
    9022:	4293      	cmp	r3, r2
    9024:	f47f af41 	bne.w	8eaa <mount_volume+0x216>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
    9028:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    902c:	f007 f8a0 	bl	10170 <ld_dword>
    9030:	4b1b      	ldr	r3, [pc, #108]	; (90a0 <mount_volume+0x40c>)
    9032:	4298      	cmp	r0, r3
    9034:	f47f af39 	bne.w	8eaa <mount_volume+0x216>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
    9038:	f504 7008 	add.w	r0, r4, #544	; 0x220
    903c:	f007 f898 	bl	10170 <ld_dword>
    9040:	4b18      	ldr	r3, [pc, #96]	; (90a4 <mount_volume+0x410>)
    9042:	4298      	cmp	r0, r3
    9044:	f47f af31 	bne.w	8eaa <mount_volume+0x216>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
    9048:	f504 7009 	add.w	r0, r4, #548	; 0x224
    904c:	f007 f890 	bl	10170 <ld_dword>
    9050:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
    9052:	f504 700a 	add.w	r0, r4, #552	; 0x228
    9056:	f007 f88b 	bl	10170 <ld_dword>
    905a:	6160      	str	r0, [r4, #20]
    905c:	e725      	b.n	8eaa <mount_volume+0x216>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    905e:	2e00      	cmp	r6, #0
    9060:	f43f aef7 	beq.w	8e52 <mount_volume+0x1be>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    9064:	2f02      	cmp	r7, #2
    9066:	ea4f 034a 	mov.w	r3, sl, lsl #1
    906a:	bf18      	it	ne
    906c:	4453      	addne	r3, sl
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
    906e:	444a      	add	r2, r9
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    9070:	bf18      	it	ne
    9072:	f00a 0a01 	andne.w	sl, sl, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
    9076:	62e2      	str	r2, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    9078:	bf18      	it	ne
    907a:	eb0a 0353 	addne.w	r3, sl, r3, lsr #1
    907e:	e7a7      	b.n	8fd0 <mount_volume+0x33c>
	if (vol < 0) return FR_INVALID_DRIVE;
    9080:	250b      	movs	r5, #11
    9082:	e627      	b.n	8cd4 <mount_volume+0x40>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
    9084:	250c      	movs	r5, #12
    9086:	e625      	b.n	8cd4 <mount_volume+0x40>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    9088:	2503      	movs	r5, #3
    908a:	e623      	b.n	8cd4 <mount_volume+0x40>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
    908c:	f640 77f5 	movw	r7, #4085	; 0xff5
    9090:	45ba      	cmp	sl, r7
    9092:	bf8c      	ite	hi
    9094:	2702      	movhi	r7, #2
    9096:	2701      	movls	r7, #1
    9098:	e77a      	b.n	8f90 <mount_volume+0x2fc>
    909a:	bf00      	nop
    909c:	0ffffff5 	.word	0x0ffffff5
    90a0:	41615252 	.word	0x41615252
    90a4:	61417272 	.word	0x61417272

000090a8 <dir_read.constprop.0>:
static FRESULT dir_read (
    90a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BYTE ord = 0xFF, sum = 0xFF;
    90ac:	f04f 08ff 	mov.w	r8, #255	; 0xff
	FATFS *fs = dp->obj.fs;
    90b0:	6807      	ldr	r7, [r0, #0]
static FRESULT dir_read (
    90b2:	4606      	mov	r6, r0
	BYTE ord = 0xFF, sum = 0xFF;
    90b4:	4645      	mov	r5, r8
	FRESULT res = FR_NO_FILE;
    90b6:	2404      	movs	r4, #4
			if (uc != 0xFFFF) return 0;		/* Check filler */
    90b8:	f64f 79ff 	movw	r9, #65535	; 0xffff
	while (dp->sect) {
    90bc:	6bb1      	ldr	r1, [r6, #56]	; 0x38
    90be:	b919      	cbnz	r1, 90c8 <dir_read.constprop.0+0x20>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
    90c0:	2c00      	cmp	r4, #0
    90c2:	f000 8081 	beq.w	91c8 <dir_read.constprop.0+0x120>
    90c6:	e070      	b.n	91aa <dir_read.constprop.0+0x102>
		res = move_window(fs, dp->sect);
    90c8:	4638      	mov	r0, r7
    90ca:	f007 fa43 	bl	10554 <move_window>
		if (res != FR_OK) break;
    90ce:	4604      	mov	r4, r0
    90d0:	2800      	cmp	r0, #0
    90d2:	d16a      	bne.n	91aa <dir_read.constprop.0+0x102>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
    90d4:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
    90d6:	7803      	ldrb	r3, [r0, #0]
		if (b == 0) {
    90d8:	2b00      	cmp	r3, #0
    90da:	d07b      	beq.n	91d4 <dir_read.constprop.0+0x12c>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
    90dc:	783a      	ldrb	r2, [r7, #0]
    90de:	2a04      	cmp	r2, #4
    90e0:	d111      	bne.n	9106 <dir_read.constprop.0+0x5e>
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
    90e2:	2b85      	cmp	r3, #133	; 0x85
    90e4:	d15a      	bne.n	919c <dir_read.constprop.0+0xf4>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
    90e6:	6b33      	ldr	r3, [r6, #48]	; 0x30
    90e8:	64f3      	str	r3, [r6, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
    90ea:	4630      	mov	r0, r6
    90ec:	f007 feb9 	bl	10e62 <load_xdir>
					if (res == FR_OK) {
    90f0:	4604      	mov	r4, r0
    90f2:	2800      	cmp	r0, #0
    90f4:	d159      	bne.n	91aa <dir_read.constprop.0+0x102>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
    90f6:	693b      	ldr	r3, [r7, #16]
    90f8:	791b      	ldrb	r3, [r3, #4]
    90fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    90fe:	71b3      	strb	r3, [r6, #6]
}
    9100:	4620      	mov	r0, r4
    9102:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
    9106:	7ac2      	ldrb	r2, [r0, #11]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
    9108:	2be5      	cmp	r3, #229	; 0xe5
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
    910a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    910e:	71b2      	strb	r2, [r6, #6]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
    9110:	d050      	beq.n	91b4 <dir_read.constprop.0+0x10c>
    9112:	2b2e      	cmp	r3, #46	; 0x2e
    9114:	d04e      	beq.n	91b4 <dir_read.constprop.0+0x10c>
    9116:	f022 0120 	bic.w	r1, r2, #32
    911a:	2908      	cmp	r1, #8
    911c:	d04a      	beq.n	91b4 <dir_read.constprop.0+0x10c>
				if (attr == AM_LFN) {	/* An LFN entry is found */
    911e:	2a0f      	cmp	r2, #15
    9120:	d14d      	bne.n	91be <dir_read.constprop.0+0x116>
					if (b & LLEF) {		/* Is it start of an LFN sequence? */
    9122:	0659      	lsls	r1, r3, #25
    9124:	d544      	bpl.n	91b0 <dir_read.constprop.0+0x108>
						b &= (BYTE)~LLEF; ord = b;
    9126:	f003 05bf 	and.w	r5, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
    912a:	6b33      	ldr	r3, [r6, #48]	; 0x30
						sum = dp->dir[LDIR_Chksum];
    912c:	f890 800d 	ldrb.w	r8, [r0, #13]
						dp->blk_ofs = dp->dptr;
    9130:	64f3      	str	r3, [r6, #76]	; 0x4c
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    9132:	7b43      	ldrb	r3, [r0, #13]
    9134:	4543      	cmp	r3, r8
    9136:	d13d      	bne.n	91b4 <dir_read.constprop.0+0x10c>
	rv = rv << 8 | ptr[0];
    9138:	7ec2      	ldrb	r2, [r0, #27]
    913a:	7e83      	ldrb	r3, [r0, #26]
    913c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
    9140:	fa0f fc83 	sxth.w	ip, r3
    9144:	bbb3      	cbnz	r3, 91b4 <dir_read.constprop.0+0x10c>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
    9146:	7803      	ldrb	r3, [r0, #0]
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    9148:	68fc      	ldr	r4, [r7, #12]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
    914a:	f8df e08c 	ldr.w	lr, [pc, #140]	; 91d8 <dir_read.constprop.0+0x130>
    914e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    9152:	3b01      	subs	r3, #1
    9154:	220d      	movs	r2, #13
    9156:	4353      	muls	r3, r2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
    9158:	2101      	movs	r1, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
    915a:	f81e ab01 	ldrb.w	sl, [lr], #1
    915e:	eb00 020a 	add.w	r2, r0, sl
	rv = rv << 8 | ptr[0];
    9162:	f892 b001 	ldrb.w	fp, [r2, #1]
    9166:	f810 200a 	ldrb.w	r2, [r0, sl]
    916a:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
		if (wc != 0) {
    916e:	b319      	cbz	r1, 91b8 <dir_read.constprop.0+0x110>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
    9170:	2bff      	cmp	r3, #255	; 0xff
    9172:	d81f      	bhi.n	91b4 <dir_read.constprop.0+0x10c>
			lfnbuf[i++] = wc = uc;			/* Store it */
    9174:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	rv = rv << 8 | ptr[0];
    9178:	4611      	mov	r1, r2
			lfnbuf[i++] = wc = uc;			/* Store it */
    917a:	3301      	adds	r3, #1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
    917c:	f10c 0c01 	add.w	ip, ip, #1
    9180:	f1bc 0f0d 	cmp.w	ip, #13
    9184:	d1e9      	bne.n	915a <dir_read.constprop.0+0xb2>
	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not terminated */
    9186:	7802      	ldrb	r2, [r0, #0]
    9188:	0652      	lsls	r2, r2, #25
    918a:	d505      	bpl.n	9198 <dir_read.constprop.0+0xf0>
    918c:	b121      	cbz	r1, 9198 <dir_read.constprop.0+0xf0>
		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
    918e:	2bff      	cmp	r3, #255	; 0xff
    9190:	d810      	bhi.n	91b4 <dir_read.constprop.0+0x10c>
		lfnbuf[i] = 0;
    9192:	2200      	movs	r2, #0
    9194:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    9198:	3d01      	subs	r5, #1
    919a:	b2ed      	uxtb	r5, r5
		res = dir_next(dp, 0);		/* Next entry */
    919c:	2100      	movs	r1, #0
    919e:	4630      	mov	r0, r6
    91a0:	f007 fda6 	bl	10cf0 <dir_next>
		if (res != FR_OK) break;
    91a4:	4604      	mov	r4, r0
    91a6:	2800      	cmp	r0, #0
    91a8:	d088      	beq.n	90bc <dir_read.constprop.0+0x14>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
    91aa:	2300      	movs	r3, #0
    91ac:	63b3      	str	r3, [r6, #56]	; 0x38
    91ae:	e7a7      	b.n	9100 <dir_read.constprop.0+0x58>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    91b0:	42ab      	cmp	r3, r5
    91b2:	d0be      	beq.n	9132 <dir_read.constprop.0+0x8a>
    91b4:	25ff      	movs	r5, #255	; 0xff
    91b6:	e7f1      	b.n	919c <dir_read.constprop.0+0xf4>
			if (uc != 0xFFFF) return 0;		/* Check filler */
    91b8:	454a      	cmp	r2, r9
    91ba:	d0df      	beq.n	917c <dir_read.constprop.0+0xd4>
    91bc:	e7fa      	b.n	91b4 <dir_read.constprop.0+0x10c>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
    91be:	b92d      	cbnz	r5, 91cc <dir_read.constprop.0+0x124>
    91c0:	f007 f816 	bl	101f0 <sum_sfn>
    91c4:	4540      	cmp	r0, r8
    91c6:	d101      	bne.n	91cc <dir_read.constprop.0+0x124>
		res = move_window(fs, dp->sect);
    91c8:	2400      	movs	r4, #0
    91ca:	e799      	b.n	9100 <dir_read.constprop.0+0x58>
						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
    91cc:	f04f 33ff 	mov.w	r3, #4294967295
    91d0:	64f3      	str	r3, [r6, #76]	; 0x4c
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
    91d2:	e795      	b.n	9100 <dir_read.constprop.0+0x58>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
    91d4:	2404      	movs	r4, #4
    91d6:	e7e8      	b.n	91aa <dir_read.constprop.0+0x102>
    91d8:	000148b0 	.word	0x000148b0

000091dc <dir_find>:
{
    91dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
    91e0:	2100      	movs	r1, #0
{
    91e2:	b087      	sub	sp, #28
	FATFS *fs = dp->obj.fs;
    91e4:	f8d0 8000 	ldr.w	r8, [r0]
{
    91e8:	4604      	mov	r4, r0
	res = dir_sdi(dp, 0);			/* Rewind directory object */
    91ea:	f007 faa4 	bl	10736 <dir_sdi>
	if (res != FR_OK) return res;
    91ee:	4607      	mov	r7, r0
    91f0:	b970      	cbnz	r0, 9210 <dir_find+0x34>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
    91f2:	f898 3000 	ldrb.w	r3, [r8]
    91f6:	2b04      	cmp	r3, #4
    91f8:	d143      	bne.n	9282 <dir_find+0xa6>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
    91fa:	f8d8 000c 	ldr.w	r0, [r8, #12]
    91fe:	f007 f93e 	bl	1047e <xname_sum>
    9202:	4606      	mov	r6, r0
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
    9204:	4620      	mov	r0, r4
    9206:	f7ff ff4f 	bl	90a8 <dir_read.constprop.0>
    920a:	4605      	mov	r5, r0
    920c:	b120      	cbz	r0, 9218 <dir_find+0x3c>
    920e:	4607      	mov	r7, r0
}
    9210:	4638      	mov	r0, r7
    9212:	b007      	add	sp, #28
    9214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
    9218:	f8d8 3010 	ldr.w	r3, [r8, #16]
	rv = rv << 8 | ptr[0];
    921c:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
    9220:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
    9224:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9228:	4296      	cmp	r6, r2
    922a:	d1eb      	bne.n	9204 <dir_find+0x28>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
    922c:	f893 b023 	ldrb.w	fp, [r3, #35]	; 0x23
    9230:	f04f 0940 	mov.w	r9, #64	; 0x40
    9234:	455d      	cmp	r5, fp
    9236:	d107      	bne.n	9248 <dir_find+0x6c>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
    9238:	f8d8 300c 	ldr.w	r3, [r8, #12]
    923c:	b22d      	sxth	r5, r5
    923e:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    9242:	2b00      	cmp	r3, #0
    9244:	d1de      	bne.n	9204 <dir_find+0x28>
    9246:	e7e3      	b.n	9210 <dir_find+0x34>
				if ((di % SZDIRE) == 0) di += 2;
    9248:	f019 0f1f 	tst.w	r9, #31
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
    924c:	f8d8 3010 	ldr.w	r3, [r8, #16]
				if ((di % SZDIRE) == 0) di += 2;
    9250:	bf08      	it	eq
    9252:	f109 0902 	addeq.w	r9, r9, #2
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
    9256:	eb03 0209 	add.w	r2, r3, r9
	rv = rv << 8 | ptr[0];
    925a:	f813 3009 	ldrb.w	r3, [r3, r9]
    925e:	7850      	ldrb	r0, [r2, #1]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
    9260:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    9264:	f001 fb34 	bl	a8d0 <ff_wtoupper>
    9268:	f8d8 300c 	ldr.w	r3, [r8, #12]
    926c:	4682      	mov	sl, r0
    926e:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
    9272:	f001 fb2d 	bl	a8d0 <ff_wtoupper>
    9276:	4582      	cmp	sl, r0
    9278:	d1c4      	bne.n	9204 <dir_find+0x28>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
    927a:	f109 0902 	add.w	r9, r9, #2
    927e:	3501      	adds	r5, #1
    9280:	e7d8      	b.n	9234 <dir_find+0x58>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
    9282:	f04f 33ff 	mov.w	r3, #4294967295
    9286:	f04f 0bff 	mov.w	fp, #255	; 0xff
    928a:	64e3      	str	r3, [r4, #76]	; 0x4c
    928c:	46d9      	mov	r9, fp
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
    928e:	9302      	str	r3, [sp, #8]
		res = move_window(fs, dp->sect);
    9290:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    9292:	4640      	mov	r0, r8
    9294:	f007 f95e 	bl	10554 <move_window>
		if (res != FR_OK) break;
    9298:	2800      	cmp	r0, #0
    929a:	d16a      	bne.n	9372 <dir_find+0x196>
		c = dp->dir[DIR_Name];
    929c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
    929e:	782e      	ldrb	r6, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    92a0:	2e00      	cmp	r6, #0
    92a2:	f000 8088 	beq.w	93b6 <dir_find+0x1da>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
    92a6:	7aea      	ldrb	r2, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    92a8:	2ee5      	cmp	r6, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
    92aa:	f002 033f 	and.w	r3, r2, #63	; 0x3f
    92ae:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    92b0:	d003      	beq.n	92ba <dir_find+0xde>
    92b2:	0712      	lsls	r2, r2, #28
    92b4:	d504      	bpl.n	92c0 <dir_find+0xe4>
    92b6:	2b0f      	cmp	r3, #15
    92b8:	d004      	beq.n	92c4 <dir_find+0xe8>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
    92ba:	9b02      	ldr	r3, [sp, #8]
    92bc:	64e3      	str	r3, [r4, #76]	; 0x4c
    92be:	e05c      	b.n	937a <dir_find+0x19e>
			if (a == AM_LFN) {			/* An LFN entry is found */
    92c0:	2b0f      	cmp	r3, #15
    92c2:	d162      	bne.n	938a <dir_find+0x1ae>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
    92c4:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    92c8:	065b      	lsls	r3, r3, #25
    92ca:	d44c      	bmi.n	9366 <dir_find+0x18a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
    92cc:	0670      	lsls	r0, r6, #25
    92ce:	d552      	bpl.n	9376 <dir_find+0x19a>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
    92d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
						sum = dp->dir[LDIR_Chksum];
    92d2:	f895 b00d 	ldrb.w	fp, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
    92d6:	64e3      	str	r3, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
    92d8:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    92dc:	7b6b      	ldrb	r3, [r5, #13]
    92de:	455b      	cmp	r3, fp
    92e0:	d14b      	bne.n	937a <dir_find+0x19e>
	rv = rv << 8 | ptr[0];
    92e2:	7eea      	ldrb	r2, [r5, #27]
    92e4:	7eab      	ldrb	r3, [r5, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
    92e6:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
    92ea:	d146      	bne.n	937a <dir_find+0x19e>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
    92ec:	f895 9000 	ldrb.w	r9, [r5]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    92f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
    92f4:	9301      	str	r3, [sp, #4]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
    92f6:	f009 093f 	and.w	r9, r9, #63	; 0x3f
    92fa:	f109 33ff 	add.w	r3, r9, #4294967295
    92fe:	f04f 090d 	mov.w	r9, #13
    9302:	fb09 f903 	mul.w	r9, r9, r3
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
    9306:	4b2d      	ldr	r3, [pc, #180]	; (93bc <dir_find+0x1e0>)
    9308:	2201      	movs	r2, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
    930a:	f813 1b01 	ldrb.w	r1, [r3], #1
    930e:	1868      	adds	r0, r5, r1
	rv = rv << 8 | ptr[0];
    9310:	f815 a001 	ldrb.w	sl, [r5, r1]
    9314:	7840      	ldrb	r0, [r0, #1]
    9316:	ea4a 2a00 	orr.w	sl, sl, r0, lsl #8
		if (wc != 0) {
    931a:	b38a      	cbz	r2, 9380 <dir_find+0x1a4>
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
    931c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    9320:	9305      	str	r3, [sp, #20]
    9322:	d82a      	bhi.n	937a <dir_find+0x19e>
    9324:	4650      	mov	r0, sl
    9326:	f001 fad3 	bl	a8d0 <ff_wtoupper>
    932a:	9b01      	ldr	r3, [sp, #4]
    932c:	9004      	str	r0, [sp, #16]
    932e:	f109 0101 	add.w	r1, r9, #1
    9332:	f833 0019 	ldrh.w	r0, [r3, r9, lsl #1]
    9336:	9103      	str	r1, [sp, #12]
    9338:	f001 faca 	bl	a8d0 <ff_wtoupper>
    933c:	9a04      	ldr	r2, [sp, #16]
    933e:	4282      	cmp	r2, r0
    9340:	d11b      	bne.n	937a <dir_find+0x19e>
    9342:	9903      	ldr	r1, [sp, #12]
    9344:	9b05      	ldr	r3, [sp, #20]
	rv = rv << 8 | ptr[0];
    9346:	4652      	mov	r2, sl
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
    9348:	4689      	mov	r9, r1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
    934a:	491d      	ldr	r1, [pc, #116]	; (93c0 <dir_find+0x1e4>)
    934c:	4299      	cmp	r1, r3
    934e:	d1dc      	bne.n	930a <dir_find+0x12e>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
    9350:	782b      	ldrb	r3, [r5, #0]
    9352:	0659      	lsls	r1, r3, #25
    9354:	d504      	bpl.n	9360 <dir_find+0x184>
    9356:	b11a      	cbz	r2, 9360 <dir_find+0x184>
    9358:	9b01      	ldr	r3, [sp, #4]
    935a:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
    935e:	b963      	cbnz	r3, 937a <dir_find+0x19e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    9360:	3e01      	subs	r6, #1
    9362:	fa5f f986 	uxtb.w	r9, r6
		res = dir_next(dp, 0);	/* Next entry */
    9366:	2100      	movs	r1, #0
    9368:	4620      	mov	r0, r4
    936a:	f007 fcc1 	bl	10cf0 <dir_next>
	} while (res == FR_OK);
    936e:	2800      	cmp	r0, #0
    9370:	d08e      	beq.n	9290 <dir_find+0xb4>
    9372:	4607      	mov	r7, r0
    9374:	e74c      	b.n	9210 <dir_find+0x34>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    9376:	45b1      	cmp	r9, r6
    9378:	d0b0      	beq.n	92dc <dir_find+0x100>
    937a:	f04f 09ff 	mov.w	r9, #255	; 0xff
    937e:	e7f2      	b.n	9366 <dir_find+0x18a>
			if (uc != 0xFFFF) return 0;		/* Check filler */
    9380:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9384:	458a      	cmp	sl, r1
    9386:	d0e0      	beq.n	934a <dir_find+0x16e>
    9388:	e7f7      	b.n	937a <dir_find+0x19e>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
    938a:	f1b9 0f00 	cmp.w	r9, #0
    938e:	d105      	bne.n	939c <dir_find+0x1c0>
    9390:	4628      	mov	r0, r5
    9392:	f006 ff2d 	bl	101f0 <sum_sfn>
    9396:	4558      	cmp	r0, fp
    9398:	f43f af3a 	beq.w	9210 <dir_find+0x34>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
    939c:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    93a0:	07db      	lsls	r3, r3, #31
    93a2:	d48a      	bmi.n	92ba <dir_find+0xde>
    93a4:	220b      	movs	r2, #11
    93a6:	f104 0140 	add.w	r1, r4, #64	; 0x40
    93aa:	4628      	mov	r0, r5
    93ac:	f008 ff8e 	bl	122cc <memcmp>
    93b0:	2800      	cmp	r0, #0
    93b2:	d182      	bne.n	92ba <dir_find+0xde>
    93b4:	e72c      	b.n	9210 <dir_find+0x34>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    93b6:	2704      	movs	r7, #4
    93b8:	e72a      	b.n	9210 <dir_find+0x34>
    93ba:	bf00      	nop
    93bc:	000148b0 	.word	0x000148b0
    93c0:	000148bd 	.word	0x000148bd

000093c4 <follow_path>:
{
    93c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    93c8:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
    93ca:	6803      	ldr	r3, [r0, #0]
    93cc:	9301      	str	r3, [sp, #4]
{
    93ce:	4604      	mov	r4, r0
    93d0:	468a      	mov	sl, r1
		while (IsSeparator(*path)) path++;	/* Strip separators */
    93d2:	f811 3b01 	ldrb.w	r3, [r1], #1
    93d6:	2b2f      	cmp	r3, #47	; 0x2f
    93d8:	d0fa      	beq.n	93d0 <follow_path+0xc>
    93da:	2b5c      	cmp	r3, #92	; 0x5c
    93dc:	d0f8      	beq.n	93d0 <follow_path+0xc>
		dp->obj.sclust = 0;					/* Start from the root directory */
    93de:	2100      	movs	r1, #0
    93e0:	60a1      	str	r1, [r4, #8]
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
    93e2:	61e1      	str	r1, [r4, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    93e4:	f89a 3000 	ldrb.w	r3, [sl]
    93e8:	2b1f      	cmp	r3, #31
    93ea:	f200 80ea 	bhi.w	95c2 <follow_path+0x1fe>
		dp->fn[NSFLAG] = NS_NONAME;
    93ee:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
    93f0:	4620      	mov	r0, r4
		dp->fn[NSFLAG] = NS_NONAME;
    93f2:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
}
    93f6:	b005      	add	sp, #20
    93f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
    93fc:	f007 b99b 	b.w	10736 <dir_sdi>
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
    9400:	282f      	cmp	r0, #47	; 0x2f
    9402:	d012      	beq.n	942a <follow_path+0x66>
    9404:	285c      	cmp	r0, #92	; 0x5c
    9406:	d010      	beq.n	942a <follow_path+0x66>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
    9408:	287f      	cmp	r0, #127	; 0x7f
    940a:	d903      	bls.n	9414 <follow_path+0x50>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
    940c:	2fff      	cmp	r7, #255	; 0xff
    940e:	d108      	bne.n	9422 <follow_path+0x5e>
				break;
    9410:	2006      	movs	r0, #6
    9412:	e060      	b.n	94d6 <follow_path+0x112>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
    9414:	4601      	mov	r1, r0
    9416:	4899      	ldr	r0, [pc, #612]	; (967c <follow_path+0x2b8>)
    9418:	f009 f8a1 	bl	1255e <strchr>
    941c:	2800      	cmp	r0, #0
    941e:	d0f5      	beq.n	940c <follow_path+0x48>
    9420:	e7f6      	b.n	9410 <follow_path+0x4c>
		lfn[di++] = wc;				/* Store the Unicode character */
    9422:	f82b 5017 	strh.w	r5, [fp, r7, lsl #1]
	for (;;) {
    9426:	3701      	adds	r7, #1
		uc = tchar2uni(&p);			/* Get a character */
    9428:	e0cf      	b.n	95ca <follow_path+0x206>
    942a:	4652      	mov	r2, sl
		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
    942c:	7813      	ldrb	r3, [r2, #0]
    942e:	2b2f      	cmp	r3, #47	; 0x2f
    9430:	4692      	mov	sl, r2
    9432:	f102 0201 	add.w	r2, r2, #1
    9436:	d0f9      	beq.n	942c <follow_path+0x68>
    9438:	2b5c      	cmp	r3, #92	; 0x5c
    943a:	d0f7      	beq.n	942c <follow_path+0x68>
		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
    943c:	2b1f      	cmp	r3, #31
    943e:	bf8c      	ite	hi
    9440:	2500      	movhi	r5, #0
    9442:	2504      	movls	r5, #4
    9444:	e0d0      	b.n	95e8 <follow_path+0x224>
		wc = lfn[di - 1];
    9446:	f832 3017 	ldrh.w	r3, [r2, r7, lsl #1]
		if (wc != ' ' && wc != '.') break;
    944a:	2b20      	cmp	r3, #32
    944c:	d002      	beq.n	9454 <follow_path+0x90>
    944e:	2b2e      	cmp	r3, #46	; 0x2e
    9450:	f040 80cf 	bne.w	95f2 <follow_path+0x22e>
		di--;
    9454:	3f01      	subs	r7, #1
    9456:	e0c9      	b.n	95ec <follow_path+0x228>
		if (i >= ni || si == di) {		/* End of field? */
    9458:	4599      	cmp	r9, r3
    945a:	d205      	bcs.n	9468 <follow_path+0xa4>
    945c:	9a00      	ldr	r2, [sp, #0]
    945e:	42ba      	cmp	r2, r7
    9460:	d14b      	bne.n	94fa <follow_path+0x136>
			if (ni == 11) {				/* Name extension overflow? */
    9462:	2b0b      	cmp	r3, #11
    9464:	d140      	bne.n	94e8 <follow_path+0x124>
    9466:	e001      	b.n	946c <follow_path+0xa8>
    9468:	2b0b      	cmp	r3, #11
    946a:	d137      	bne.n	94dc <follow_path+0x118>
				cf |= NS_LOSS | NS_LFN;
    946c:	f045 0503 	orr.w	r5, r5, #3
				break;
    9470:	230b      	movs	r3, #11
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    9472:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    9476:	2ae5      	cmp	r2, #229	; 0xe5
    9478:	bf04      	itt	eq
    947a:	2205      	moveq	r2, #5
    947c:	f884 2040 	strbeq.w	r2, [r4, #64]	; 0x40
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
    9480:	2b08      	cmp	r3, #8
    9482:	bf04      	itt	eq
    9484:	ea4f 0888 	moveq.w	r8, r8, lsl #2
    9488:	fa5f f888 	uxtbeq.w	r8, r8
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
    948c:	f008 030c 	and.w	r3, r8, #12
    9490:	2b0c      	cmp	r3, #12
    9492:	d003      	beq.n	949c <follow_path+0xd8>
    9494:	f008 0303 	and.w	r3, r8, #3
    9498:	2b03      	cmp	r3, #3
    949a:	d101      	bne.n	94a0 <follow_path+0xdc>
    949c:	f045 0502 	orr.w	r5, r5, #2
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
    94a0:	07a9      	lsls	r1, r5, #30
    94a2:	d409      	bmi.n	94b8 <follow_path+0xf4>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
    94a4:	f018 0f01 	tst.w	r8, #1
    94a8:	bf18      	it	ne
    94aa:	f045 0510 	orrne.w	r5, r5, #16
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
    94ae:	f018 0f04 	tst.w	r8, #4
    94b2:	bf18      	it	ne
    94b4:	f045 0508 	orrne.w	r5, r5, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
    94b8:	f884 504b 	strb.w	r5, [r4, #75]	; 0x4b
			res = dir_find(dp);				/* Find an object with the segment name */
    94bc:	4620      	mov	r0, r4
    94be:	f7ff fe8d 	bl	91dc <dir_find>
			ns = dp->fn[NSFLAG];
    94c2:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
    94c6:	2800      	cmp	r0, #0
    94c8:	d063      	beq.n	9592 <follow_path+0x1ce>
				if (res == FR_NO_FILE) {	/* Object is not found */
    94ca:	2804      	cmp	r0, #4
    94cc:	d103      	bne.n	94d6 <follow_path+0x112>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    94ce:	f013 0f04 	tst.w	r3, #4
    94d2:	bf08      	it	eq
    94d4:	2005      	moveq	r0, #5
}
    94d6:	b005      	add	sp, #20
    94d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
    94dc:	9a00      	ldr	r2, [sp, #0]
    94de:	42ba      	cmp	r2, r7
    94e0:	d002      	beq.n	94e8 <follow_path+0x124>
    94e2:	f045 0503 	orr.w	r5, r5, #3
			if (si > di) break;						/* No name extension? */
    94e6:	d8c4      	bhi.n	9472 <follow_path+0xae>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
    94e8:	ea4f 0888 	mov.w	r8, r8, lsl #2
    94ec:	fa5f f888 	uxtb.w	r8, r8
			continue;
    94f0:	9700      	str	r7, [sp, #0]
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
    94f2:	230b      	movs	r3, #11
    94f4:	f04f 0908 	mov.w	r9, #8
			continue;
    94f8:	e0b0      	b.n	965c <follow_path+0x298>
		if (wc >= 0x80) {	/* Is this an extended character? */
    94fa:	2e7f      	cmp	r6, #127	; 0x7f
    94fc:	d914      	bls.n	9528 <follow_path+0x164>
			cf |= NS_LFN;	/* LFN entry needs to be created */
    94fe:	f045 0202 	orr.w	r2, r5, #2
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
    9502:	4630      	mov	r0, r6
    9504:	f240 11b5 	movw	r1, #437	; 0x1b5
    9508:	9303      	str	r3, [sp, #12]
			cf |= NS_LFN;	/* LFN entry needs to be created */
    950a:	9202      	str	r2, [sp, #8]
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
    950c:	f001 f9ac 	bl	a868 <ff_uni2oem>
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
    9510:	f010 0f80 	tst.w	r0, #128	; 0x80
    9514:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
    9518:	4606      	mov	r6, r0
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
    951a:	d014      	beq.n	9546 <follow_path+0x182>
    951c:	4958      	ldr	r1, [pc, #352]	; (9680 <follow_path+0x2bc>)
    951e:	f000 067f 	and.w	r6, r0, #127	; 0x7f
    9522:	5d8e      	ldrb	r6, [r1, r6]
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
    9524:	4615      	mov	r5, r2
    9526:	b336      	cbz	r6, 9576 <follow_path+0x1b2>
    9528:	4856      	ldr	r0, [pc, #344]	; (9684 <follow_path+0x2c0>)
    952a:	9302      	str	r3, [sp, #8]
    952c:	4631      	mov	r1, r6
    952e:	f009 f816 	bl	1255e <strchr>
    9532:	9b02      	ldr	r3, [sp, #8]
    9534:	b9f8      	cbnz	r0, 9576 <follow_path+0x1b2>
				if (IsUpper(wc)) {		/* ASCII upper case? */
    9536:	f1a6 0241 	sub.w	r2, r6, #65	; 0x41
    953a:	b292      	uxth	r2, r2
    953c:	2a19      	cmp	r2, #25
    953e:	d81e      	bhi.n	957e <follow_path+0x1ba>
					b |= 2;
    9540:	f048 0802 	orr.w	r8, r8, #2
				if (IsLower(wc)) {		/* ASCII lower case? */
    9544:	e010      	b.n	9568 <follow_path+0x1a4>
		if (wc >= 0x100) {				/* Is this a DBC? */
    9546:	28ff      	cmp	r0, #255	; 0xff
    9548:	d9ec      	bls.n	9524 <follow_path+0x160>
			if (i >= ni - 1) {			/* Field overflow? */
    954a:	1e59      	subs	r1, r3, #1
    954c:	4589      	cmp	r9, r1
    954e:	d303      	bcc.n	9558 <follow_path+0x194>
				cf |= NS_LOSS | NS_LFN;
    9550:	f045 0503 	orr.w	r5, r5, #3
				i = ni; continue;		/* Next field */
    9554:	4699      	mov	r9, r3
    9556:	e081      	b.n	965c <follow_path+0x298>
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
    9558:	eb04 0109 	add.w	r1, r4, r9
    955c:	0a00      	lsrs	r0, r0, #8
    955e:	f881 0040 	strb.w	r0, [r1, #64]	; 0x40
    9562:	f109 0901 	add.w	r9, r9, #1
    9566:	4615      	mov	r5, r2
		dp->fn[i++] = (BYTE)wc;
    9568:	eb04 0209 	add.w	r2, r4, r9
    956c:	f109 0901 	add.w	r9, r9, #1
    9570:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
    9574:	e072      	b.n	965c <follow_path+0x298>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    9576:	f045 0503 	orr.w	r5, r5, #3
    957a:	265f      	movs	r6, #95	; 0x5f
    957c:	e7f4      	b.n	9568 <follow_path+0x1a4>
				if (IsLower(wc)) {		/* ASCII lower case? */
    957e:	f1a6 0261 	sub.w	r2, r6, #97	; 0x61
    9582:	b292      	uxth	r2, r2
    9584:	2a19      	cmp	r2, #25
					b |= 1; wc -= 0x20;
    9586:	bf9e      	ittt	ls
    9588:	3e20      	subls	r6, #32
    958a:	f048 0801 	orrls.w	r8, r8, #1
    958e:	b2b6      	uxthls	r6, r6
    9590:	e7ea      	b.n	9568 <follow_path+0x1a4>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
    9592:	075a      	lsls	r2, r3, #29
    9594:	d49f      	bmi.n	94d6 <follow_path+0x112>
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
    9596:	79a3      	ldrb	r3, [r4, #6]
    9598:	06db      	lsls	r3, r3, #27
    959a:	d56c      	bpl.n	9676 <follow_path+0x2b2>
			if (fs->fs_type == FS_EXFAT) {	/* Save containing directory information for next dir */
    959c:	9b01      	ldr	r3, [sp, #4]
    959e:	7818      	ldrb	r0, [r3, #0]
    95a0:	2804      	cmp	r0, #4
    95a2:	d15d      	bne.n	9660 <follow_path+0x29c>
				dp->obj.c_scl = dp->obj.sclust;
    95a4:	68a3      	ldr	r3, [r4, #8]
    95a6:	6223      	str	r3, [r4, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
    95a8:	6923      	ldr	r3, [r4, #16]
    95aa:	79e2      	ldrb	r2, [r4, #7]
    95ac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    95b0:	4313      	orrs	r3, r2
    95b2:	6263      	str	r3, [r4, #36]	; 0x24
				dp->obj.c_ofs = dp->blk_ofs;
    95b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    95b6:	62a3      	str	r3, [r4, #40]	; 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
    95b8:	9b01      	ldr	r3, [sp, #4]
    95ba:	4621      	mov	r1, r4
    95bc:	6918      	ldr	r0, [r3, #16]
    95be:	f006 ff90 	bl	104e2 <init_alloc_info.isra.0>
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
    95c2:	6823      	ldr	r3, [r4, #0]
    95c4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
    95c8:	2700      	movs	r7, #0
	wc = (BYTE)*p++;			/* Get a byte */
    95ca:	f81a 0b01 	ldrb.w	r0, [sl], #1
	if (wc != 0) {
    95ce:	b150      	cbz	r0, 95e6 <follow_path+0x222>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
    95d0:	f240 11b5 	movw	r1, #437	; 0x1b5
    95d4:	f001 f968 	bl	a8a8 <ff_oem2uni>
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
    95d8:	4605      	mov	r5, r0
    95da:	2800      	cmp	r0, #0
    95dc:	f43f af18 	beq.w	9410 <follow_path+0x4c>
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
    95e0:	281f      	cmp	r0, #31
    95e2:	f63f af0d 	bhi.w	9400 <follow_path+0x3c>
		cf = NS_LAST;			/* Last segment */
    95e6:	2504      	movs	r5, #4
		wc = lfn[di - 1];
    95e8:	f1ab 0202 	sub.w	r2, fp, #2
	while (di) {					/* Snip off trailing spaces and dots if exist */
    95ec:	2f00      	cmp	r7, #0
    95ee:	f47f af2a 	bne.w	9446 <follow_path+0x82>
	lfn[di] = 0;							/* LFN is created into the working buffer */
    95f2:	2300      	movs	r3, #0
    95f4:	f82b 3017 	strh.w	r3, [fp, r7, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
    95f8:	2f00      	cmp	r7, #0
    95fa:	f43f af09 	beq.w	9410 <follow_path+0x4c>
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
    95fe:	f83b 1013 	ldrh.w	r1, [fp, r3, lsl #1]
    9602:	2920      	cmp	r1, #32
    9604:	461a      	mov	r2, r3
    9606:	f103 0301 	add.w	r3, r3, #1
    960a:	d0f8      	beq.n	95fe <follow_path+0x23a>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
    960c:	b90a      	cbnz	r2, 9612 <follow_path+0x24e>
    960e:	292e      	cmp	r1, #46	; 0x2e
    9610:	d101      	bne.n	9616 <follow_path+0x252>
    9612:	f045 0503 	orr.w	r5, r5, #3
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
    9616:	f1ab 0102 	sub.w	r1, fp, #2
    961a:	f831 3017 	ldrh.w	r3, [r1, r7, lsl #1]
    961e:	2b2e      	cmp	r3, #46	; 0x2e
    9620:	d001      	beq.n	9626 <follow_path+0x262>
    9622:	3f01      	subs	r7, #1
    9624:	d1f9      	bne.n	961a <follow_path+0x256>
    9626:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
    962a:	f04f 0900 	mov.w	r9, #0
    962e:	6463      	str	r3, [r4, #68]	; 0x44
    9630:	6423      	str	r3, [r4, #64]	; 0x40
    9632:	f8c4 3047 	str.w	r3, [r4, #71]	; 0x47
    9636:	46c8      	mov	r8, r9
    9638:	2308      	movs	r3, #8
		wc = lfn[si++];					/* Get an LFN character */
    963a:	f83b 6012 	ldrh.w	r6, [fp, r2, lsl #1]
    963e:	1c51      	adds	r1, r2, #1
    9640:	9100      	str	r1, [sp, #0]
		if (wc == 0) break;				/* Break on end of the LFN */
    9642:	2e00      	cmp	r6, #0
    9644:	f43f af15 	beq.w	9472 <follow_path+0xae>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
    9648:	2e20      	cmp	r6, #32
    964a:	d005      	beq.n	9658 <follow_path+0x294>
    964c:	2e2e      	cmp	r6, #46	; 0x2e
    964e:	f47f af03 	bne.w	9458 <follow_path+0x94>
    9652:	42b9      	cmp	r1, r7
    9654:	f43f af05 	beq.w	9462 <follow_path+0x9e>
			cf |= NS_LOSS | NS_LFN;
    9658:	f045 0503 	orr.w	r5, r5, #3
		dp->fn[i++] = (BYTE)wc;
    965c:	9a00      	ldr	r2, [sp, #0]
    965e:	e7ec      	b.n	963a <follow_path+0x276>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    9660:	9b01      	ldr	r3, [sp, #4]
    9662:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    9666:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9668:	f3c3 0308 	ubfx	r3, r3, #0, #9
    966c:	4419      	add	r1, r3
    966e:	f006 ff1e 	bl	104ae <ld_clust.isra.0>
    9672:	60a0      	str	r0, [r4, #8]
    9674:	e7a5      	b.n	95c2 <follow_path+0x1fe>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    9676:	2005      	movs	r0, #5
	return res;
    9678:	e72d      	b.n	94d6 <follow_path+0x112>
    967a:	bf00      	nop
    967c:	000147ce 	.word	0x000147ce
    9680:	00014830 	.word	0x00014830
    9684:	000147d7 	.word	0x000147d7

00009688 <dir_register>:
{
    9688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
    968c:	f890 b04b 	ldrb.w	fp, [r0, #75]	; 0x4b
    9690:	f01b 05a0 	ands.w	r5, fp, #160	; 0xa0
{
    9694:	b099      	sub	sp, #100	; 0x64
    9696:	4604      	mov	r4, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
    9698:	f040 8182 	bne.w	99a0 <dir_register+0x318>
	FATFS *fs = dp->obj.fs;
    969c:	6806      	ldr	r6, [r0, #0]
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
    969e:	68f2      	ldr	r2, [r6, #12]
    96a0:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
    96a4:	2b00      	cmp	r3, #0
    96a6:	d160      	bne.n	976a <dir_register+0xe2>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
    96a8:	7833      	ldrb	r3, [r6, #0]
    96aa:	2b04      	cmp	r3, #4
    96ac:	f040 809d 	bne.w	97ea <dir_register+0x162>
		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
    96b0:	230f      	movs	r3, #15
    96b2:	350e      	adds	r5, #14
		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
    96b4:	4620      	mov	r0, r4
		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
    96b6:	fbb5 f5f3 	udiv	r5, r5, r3
		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
    96ba:	1ca9      	adds	r1, r5, #2
    96bc:	f007 fb76 	bl	10dac <dir_alloc>
		if (res != FR_OK) return res;
    96c0:	4681      	mov	r9, r0
    96c2:	2800      	cmp	r0, #0
    96c4:	f040 808b 	bne.w	97de <dir_register+0x156>
		dp->blk_ofs = dp->dptr - SZDIRE * (n_ent - 1);	/* Set the allocated entry block offset */
    96c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    96ca:	3501      	adds	r5, #1
    96cc:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
    96d0:	79e3      	ldrb	r3, [r4, #7]
		dp->blk_ofs = dp->dptr - SZDIRE * (n_ent - 1);	/* Set the allocated entry block offset */
    96d2:	64e5      	str	r5, [r4, #76]	; 0x4c
		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
    96d4:	075f      	lsls	r7, r3, #29
    96d6:	d54a      	bpl.n	976e <dir_register+0xe6>
			dp->obj.stat &= ~4;
    96d8:	f023 0304 	bic.w	r3, r3, #4
    96dc:	71e3      	strb	r3, [r4, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
    96de:	4620      	mov	r0, r4
    96e0:	f007 f989 	bl	109f6 <fill_first_frag>
			if (res != FR_OK) return res;
    96e4:	2800      	cmp	r0, #0
    96e6:	d13e      	bne.n	9766 <dir_register+0xde>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
    96e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    96ea:	f04f 32ff 	mov.w	r2, #4294967295
    96ee:	4620      	mov	r0, r4
    96f0:	f007 f8eb 	bl	108ca <fill_last_frag>
			if (res != FR_OK) return res;
    96f4:	2800      	cmp	r0, #0
    96f6:	d136      	bne.n	9766 <dir_register+0xde>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
    96f8:	68a3      	ldr	r3, [r4, #8]
    96fa:	2b00      	cmp	r3, #0
    96fc:	d037      	beq.n	976e <dir_register+0xe6>
	dp->obj.fs = obj->fs;
    96fe:	6823      	ldr	r3, [r4, #0]
    9700:	9304      	str	r3, [sp, #16]
	dp->obj.sclust = obj->c_scl;
    9702:	6a23      	ldr	r3, [r4, #32]
    9704:	9306      	str	r3, [sp, #24]
	dp->obj.stat = (BYTE)obj->c_size;
    9706:	6a63      	ldr	r3, [r4, #36]	; 0x24
	dp->blk_ofs = obj->c_ofs;
    9708:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	dp->obj.stat = (BYTE)obj->c_size;
    970a:	f88d 3017 	strb.w	r3, [sp, #23]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
    970e:	a804      	add	r0, sp, #16
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
    9710:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    9714:	e9cd 3908 	strd	r3, r9, [sp, #32]
	dp->obj.n_frag = 0;
    9718:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
	dp->blk_ofs = obj->c_ofs;
    971c:	9117      	str	r1, [sp, #92]	; 0x5c
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
    971e:	f007 f80a 	bl	10736 <dir_sdi>
	if (res == FR_OK) {
    9722:	bb00      	cbnz	r0, 9766 <dir_register+0xde>
		res = load_xdir(dp);		/* Load the object's entry block */
    9724:	a804      	add	r0, sp, #16
    9726:	f007 fb9c 	bl	10e62 <load_xdir>
				if (res != FR_OK) return res;
    972a:	b9e0      	cbnz	r0, 9766 <dir_register+0xde>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
    972c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    9730:	8970      	ldrh	r0, [r6, #10]
    9732:	f44f 7100 	mov.w	r1, #512	; 0x200
    9736:	fbe1 2300 	umlal	r2, r3, r1, r0
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
    973a:	6930      	ldr	r0, [r6, #16]
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
    973c:	e9c4 2304 	strd	r2, r3, [r4, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
    9740:	3038      	adds	r0, #56	; 0x38
    9742:	f006 fd3b 	bl	101bc <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
    9746:	6930      	ldr	r0, [r6, #16]
    9748:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    974c:	3028      	adds	r0, #40	; 0x28
    974e:	f006 fd35 	bl	101bc <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;		/* Update the allocation status */
    9752:	79e3      	ldrb	r3, [r4, #7]
    9754:	6932      	ldr	r2, [r6, #16]
    9756:	f043 0301 	orr.w	r3, r3, #1
    975a:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
				res = store_xdir(&dj);				/* Store the object status */
    975e:	a804      	add	r0, sp, #16
    9760:	f007 fbfb 	bl	10f5a <store_xdir>
				if (res != FR_OK) return res;
    9764:	b118      	cbz	r0, 976e <dir_register+0xe6>
    9766:	4681      	mov	r9, r0
    9768:	e039      	b.n	97de <dir_register+0x156>
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
    976a:	3501      	adds	r5, #1
    976c:	e798      	b.n	96a0 <dir_register+0x18>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
    976e:	e9d6 5403 	ldrd	r5, r4, [r6, #12]
    9772:	2240      	movs	r2, #64	; 0x40
    9774:	2100      	movs	r1, #0
    9776:	4620      	mov	r0, r4
    9778:	f008 fdc4 	bl	12304 <memset>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
    977c:	2385      	movs	r3, #133	; 0x85
    977e:	7023      	strb	r3, [r4, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
    9780:	23c0      	movs	r3, #192	; 0xc0
    9782:	f884 3020 	strb.w	r3, [r4, #32]
	nlen = nc1 = 0; wc = 1;
    9786:	2001      	movs	r0, #1
    9788:	2300      	movs	r3, #0
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
    978a:	4619      	mov	r1, r3
	i = SZDIRE * 2;	/* Top of file_name entries */
    978c:	2240      	movs	r2, #64	; 0x40
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
    978e:	f04f 0cc1 	mov.w	ip, #193	; 0xc1
    9792:	469e      	mov	lr, r3
	*ptr++ = (BYTE)val;
    9794:	eb04 0800 	add.w	r8, r4, r0
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
    9798:	1c56      	adds	r6, r2, #1
    979a:	f804 c002 	strb.w	ip, [r4, r2]
    979e:	f804 e006 	strb.w	lr, [r4, r6]
    97a2:	3202      	adds	r2, #2
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
    97a4:	b120      	cbz	r0, 97b0 <dir_register+0x128>
    97a6:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
    97aa:	b108      	cbz	r0, 97b0 <dir_register+0x128>
    97ac:	3301      	adds	r3, #1
    97ae:	b2db      	uxtb	r3, r3
	*ptr++ = (BYTE)val; val >>= 8;
    97b0:	0a06      	lsrs	r6, r0, #8
    97b2:	54a0      	strb	r0, [r4, r2]
	*ptr++ = (BYTE)val;
    97b4:	f808 6002 	strb.w	r6, [r8, r2]
			i += 2;
    97b8:	3202      	adds	r2, #2
		} while (i % SZDIRE != 0);
    97ba:	06d6      	lsls	r6, r2, #27
    97bc:	d1f2      	bne.n	97a4 <dir_register+0x11c>
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
    97be:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
    97c2:	1c4f      	adds	r7, r1, #1
    97c4:	b97e      	cbnz	r6, 97e6 <dir_register+0x15e>
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
    97c6:	3102      	adds	r1, #2
	dirb[XDIR_NumName] = nlen;		/* Set name length */
    97c8:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
    97cc:	7061      	strb	r1, [r4, #1]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
    97ce:	4628      	mov	r0, r5
    97d0:	f006 fe55 	bl	1047e <xname_sum>
	*ptr++ = (BYTE)val; val >>= 8;
    97d4:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    97d8:	0a00      	lsrs	r0, r0, #8
	*ptr++ = (BYTE)val;
    97da:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
}
    97de:	4648      	mov	r0, r9
    97e0:	b019      	add	sp, #100	; 0x64
    97e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    97e6:	4639      	mov	r1, r7
    97e8:	e7d6      	b.n	9798 <dir_register+0x110>
	memcpy(sn, dp->fn, 12);
    97ea:	f104 0740 	add.w	r7, r4, #64	; 0x40
    97ee:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    97f2:	f10d 0a10 	add.w	sl, sp, #16
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    97f6:	f01b 0f01 	tst.w	fp, #1
    97fa:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
    97fe:	f000 80d7 	beq.w	99b0 <dir_register+0x328>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
    9802:	2340      	movs	r3, #64	; 0x40
    9804:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
    9808:	f04f 0801 	mov.w	r8, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    980c:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
    9810:	46bc      	mov	ip, r7
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
    9812:	68f3      	ldr	r3, [r6, #12]
    9814:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    9818:	f82c 2b02 	strh.w	r2, [ip], #2
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
    981c:	f1b8 0f05 	cmp.w	r8, #5
    9820:	ea4f 4212 	mov.w	r2, r2, lsr #16
    9824:	f88c 2000 	strb.w	r2, [ip]
    9828:	d95d      	bls.n	98e6 <dir_register+0x25e>
    982a:	1e98      	subs	r0, r3, #2
    982c:	4642      	mov	r2, r8
		while (*lfn) {	/* Create a CRC as hash value */
    982e:	f830 1f02 	ldrh.w	r1, [r0, #2]!
    9832:	2900      	cmp	r1, #0
    9834:	d145      	bne.n	98c2 <dir_register+0x23a>
    9836:	f10d 0c0f 	add.w	ip, sp, #15
    983a:	2107      	movs	r1, #7
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
    983c:	f002 0e0f 	and.w	lr, r2, #15
    9840:	f10e 0030 	add.w	r0, lr, #48	; 0x30
		if (c > '9') c += 7;
    9844:	2839      	cmp	r0, #57	; 0x39
    9846:	bf88      	it	hi
    9848:	f10e 0037 	addhi.w	r0, lr, #55	; 0x37
	} while (i && seq);
    984c:	3901      	subs	r1, #1
    984e:	4691      	mov	r9, r2
		ns[i--] = c;
    9850:	f80c 0901 	strb.w	r0, [ip], #-1
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
    9854:	ea4f 1212 	mov.w	r2, r2, lsr #4
	} while (i && seq);
    9858:	d002      	beq.n	9860 <dir_register+0x1d8>
    985a:	f1b9 0f0f 	cmp.w	r9, #15
    985e:	d8ed      	bhi.n	983c <dir_register+0x1b4>
	ns[i] = '~';
    9860:	ab18      	add	r3, sp, #96	; 0x60
    9862:	185a      	adds	r2, r3, r1
    9864:	207e      	movs	r0, #126	; 0x7e
    9866:	f802 0c58 	strb.w	r0, [r2, #-88]
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
    986a:	f104 003f 	add.w	r0, r4, #63	; 0x3f
    986e:	4684      	mov	ip, r0
    9870:	2200      	movs	r2, #0
    9872:	4291      	cmp	r1, r2
    9874:	d006      	beq.n	9884 <dir_register+0x1fc>
    9876:	f81c ef01 	ldrb.w	lr, [ip, #1]!
    987a:	f1be 0f20 	cmp.w	lr, #32
    987e:	f102 0901 	add.w	r9, r2, #1
    9882:	d132      	bne.n	98ea <dir_register+0x262>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    9884:	2907      	cmp	r1, #7
    9886:	bf9c      	itt	ls
    9888:	ab18      	addls	r3, sp, #96	; 0x60
    988a:	eb03 0c01 	addls.w	ip, r3, r1
    988e:	f102 0201 	add.w	r2, r2, #1
    9892:	bf96      	itet	ls
    9894:	f81c cc58 	ldrbls.w	ip, [ip, #-88]
    9898:	f04f 0c20 	movhi.w	ip, #32
    989c:	3101      	addls	r1, #1
	} while (j < 8);
    989e:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    98a0:	f800 c002 	strb.w	ip, [r0, r2]
	} while (j < 8);
    98a4:	d9ee      	bls.n	9884 <dir_register+0x1fc>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
    98a6:	4620      	mov	r0, r4
    98a8:	f7ff fc98 	bl	91dc <dir_find>
			if (res != FR_OK) break;
    98ac:	4681      	mov	r9, r0
    98ae:	2800      	cmp	r0, #0
    98b0:	d179      	bne.n	99a6 <dir_register+0x31e>
		for (n = 1; n < 100; n++) {
    98b2:	f108 0801 	add.w	r8, r8, #1
    98b6:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
    98ba:	d1a7      	bne.n	980c <dir_register+0x184>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    98bc:	f04f 0907 	mov.w	r9, #7
    98c0:	e78d      	b.n	97de <dir_register+0x156>
    98c2:	f04f 0c10 	mov.w	ip, #16
				sreg = (sreg << 1) + (wc & 1);
    98c6:	f001 0e01 	and.w	lr, r1, #1
    98ca:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
    98ce:	03d3      	lsls	r3, r2, #15
    98d0:	bf44      	itt	mi
    98d2:	f482 3288 	eormi.w	r2, r2, #69632	; 0x11000
    98d6:	f082 0221 	eormi.w	r2, r2, #33	; 0x21
			for (i = 0; i < 16; i++) {
    98da:	f1bc 0c01 	subs.w	ip, ip, #1
				wc >>= 1;
    98de:	ea4f 0151 	mov.w	r1, r1, lsr #1
			for (i = 0; i < 16; i++) {
    98e2:	d1f0      	bne.n	98c6 <dir_register+0x23e>
    98e4:	e7a3      	b.n	982e <dir_register+0x1a6>
    98e6:	4642      	mov	r2, r8
    98e8:	e7a5      	b.n	9836 <dir_register+0x1ae>
    98ea:	464a      	mov	r2, r9
    98ec:	e7c1      	b.n	9872 <dir_register+0x1ea>
		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
    98ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
    98f0:	4620      	mov	r0, r4
    98f2:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
    98f6:	f006 ff1e 	bl	10736 <dir_sdi>
		if (res == FR_OK) {
    98fa:	4681      	mov	r9, r0
    98fc:	2800      	cmp	r0, #0
    98fe:	f47f af6e 	bne.w	97de <dir_register+0x156>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
    9902:	4638      	mov	r0, r7
    9904:	f006 fc74 	bl	101f0 <sum_sfn>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
    9908:	f64f 78ff 	movw	r8, #65535	; 0xffff
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
    990c:	9001      	str	r0, [sp, #4]
				res = move_window(fs, dp->sect);
    990e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    9910:	4630      	mov	r0, r6
    9912:	f006 fe1f 	bl	10554 <move_window>
    9916:	4681      	mov	r9, r0
				if (res != FR_OK) break;
    9918:	2800      	cmp	r0, #0
    991a:	f47f af60 	bne.w	97de <dir_register+0x156>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
    991e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	dir[LDIR_Chksum] = sum;			/* Set checksum */
    9920:	9a01      	ldr	r2, [sp, #4]
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
    9922:	f8d6 e00c 	ldr.w	lr, [r6, #12]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
    9926:	735a      	strb	r2, [r3, #13]
    9928:	b2e9      	uxtb	r1, r5
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    992a:	f04f 020f 	mov.w	r2, #15
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
    992e:	f04f 0c0d 	mov.w	ip, #13
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    9932:	72da      	strb	r2, [r3, #11]
	dir[LDIR_Type] = 0;
    9934:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 9a14 <dir_register+0x38c>
    9938:	7318      	strb	r0, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
    993a:	1e4a      	subs	r2, r1, #1
    993c:	fb0c f202 	mul.w	r2, ip, r2
	*ptr++ = (BYTE)val; val >>= 8;
    9940:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
    9942:	76d8      	strb	r0, [r3, #27]
	s = wc = 0;
    9944:	4684      	mov	ip, r0
		st_word(dir + LfnOfs[s], wc);		/* Put it */
    9946:	f81a 9b01 	ldrb.w	r9, [sl], #1
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
    994a:	4540      	cmp	r0, r8
    994c:	bf18      	it	ne
    994e:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
    9952:	f803 0009 	strb.w	r0, [r3, r9]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
    9956:	eb03 0b09 	add.w	fp, r3, r9
	} while (++s < 13);
    995a:	f10c 0c01 	add.w	ip, ip, #1
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
    995e:	bf18      	it	ne
    9960:	3201      	addne	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
    9962:	ea4f 2910 	mov.w	r9, r0, lsr #8
		if (wc == 0) wc = 0xFFFF;			/* Padding characters for following items */
    9966:	2800      	cmp	r0, #0
    9968:	bf08      	it	eq
    996a:	4640      	moveq	r0, r8
	} while (++s < 13);
    996c:	f1bc 0f0d 	cmp.w	ip, #13
	*ptr++ = (BYTE)val;
    9970:	f88b 9001 	strb.w	r9, [fp, #1]
	} while (++s < 13);
    9974:	d1e7      	bne.n	9946 <dir_register+0x2be>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
    9976:	4540      	cmp	r0, r8
    9978:	d002      	beq.n	9980 <dir_register+0x2f8>
    997a:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
    997e:	b90a      	cbnz	r2, 9984 <dir_register+0x2fc>
    9980:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    9984:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
    9986:	2301      	movs	r3, #1
    9988:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
    998a:	2100      	movs	r1, #0
    998c:	4620      	mov	r0, r4
    998e:	f007 f9af 	bl	10cf0 <dir_next>
			} while (res == FR_OK && --n_ent);
    9992:	4681      	mov	r9, r0
    9994:	2800      	cmp	r0, #0
    9996:	f47f af22 	bne.w	97de <dir_register+0x156>
    999a:	3d01      	subs	r5, #1
    999c:	d1b7      	bne.n	990e <dir_register+0x286>
    999e:	e01b      	b.n	99d8 <dir_register+0x350>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
    99a0:	f04f 0906 	mov.w	r9, #6
    99a4:	e71b      	b.n	97de <dir_register+0x156>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    99a6:	2804      	cmp	r0, #4
    99a8:	f47f af19 	bne.w	97de <dir_register+0x156>
		dp->fn[NSFLAG] = sn[NSFLAG];
    99ac:	f884 b04b 	strb.w	fp, [r4, #75]	; 0x4b
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
    99b0:	f01b 0f02 	tst.w	fp, #2
    99b4:	bf1b      	ittet	ne
    99b6:	350c      	addne	r5, #12
    99b8:	210d      	movne	r1, #13
    99ba:	2501      	moveq	r5, #1
    99bc:	fbb5 f5f1 	udivne	r5, r5, r1
    99c0:	bf18      	it	ne
    99c2:	3501      	addne	r5, #1
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
    99c4:	4629      	mov	r1, r5
    99c6:	4620      	mov	r0, r4
    99c8:	f007 f9f0 	bl	10dac <dir_alloc>
	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
    99cc:	4681      	mov	r9, r0
    99ce:	2800      	cmp	r0, #0
    99d0:	f47f af05 	bne.w	97de <dir_register+0x156>
    99d4:	3d01      	subs	r5, #1
    99d6:	d18a      	bne.n	98ee <dir_register+0x266>
		res = move_window(fs, dp->sect);
    99d8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    99da:	4630      	mov	r0, r6
    99dc:	f006 fdba 	bl	10554 <move_window>
		if (res == FR_OK) {
    99e0:	4681      	mov	r9, r0
    99e2:	2800      	cmp	r0, #0
    99e4:	f47f aefb 	bne.w	97de <dir_register+0x156>
__ssp_bos_icheck3(memset, void *, int)
    99e8:	4601      	mov	r1, r0
    99ea:	2220      	movs	r2, #32
    99ec:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    99ee:	f008 fc89 	bl	12304 <memset>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    99f2:	cf03      	ldmia	r7!, {r0, r1}
    99f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    99f6:	6018      	str	r0, [r3, #0]
    99f8:	6059      	str	r1, [r3, #4]
    99fa:	78ba      	ldrb	r2, [r7, #2]
    99fc:	8839      	ldrh	r1, [r7, #0]
    99fe:	8119      	strh	r1, [r3, #8]
    9a00:	729a      	strb	r2, [r3, #10]
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
    9a02:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    9a06:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    9a08:	f003 0318 	and.w	r3, r3, #24
    9a0c:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
    9a0e:	2301      	movs	r3, #1
    9a10:	70f3      	strb	r3, [r6, #3]
    9a12:	e6e4      	b.n	97de <dir_register+0x156>
    9a14:	000148b0 	.word	0x000148b0

00009a18 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
    9a18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    9a1a:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
    9a1e:	a803      	add	r0, sp, #12
{
    9a20:	4614      	mov	r4, r2
	const TCHAR *rp = path;
    9a22:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
    9a24:	f7ff f87a 	bl	8b1c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    9a28:	2800      	cmp	r0, #0
    9a2a:	db15      	blt.n	9a58 <f_mount+0x40>
	cfs = FatFs[vol];					/* Pointer to fs object */
    9a2c:	4b0b      	ldr	r3, [pc, #44]	; (9a5c <f_mount+0x44>)
    9a2e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]

	if (cfs) {
    9a32:	b10a      	cbz	r2, 9a38 <f_mount+0x20>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    9a34:	2100      	movs	r1, #0
    9a36:	7011      	strb	r1, [r2, #0]
	}

	if (fs) {
    9a38:	9a01      	ldr	r2, [sp, #4]
    9a3a:	b10a      	cbz	r2, 9a40 <f_mount+0x28>
		fs->fs_type = 0;				/* Clear new fs object */
    9a3c:	2100      	movs	r1, #0
    9a3e:	7011      	strb	r1, [r2, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    9a40:	f843 2020 	str.w	r2, [r3, r0, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
    9a44:	b12c      	cbz	r4, 9a52 <f_mount+0x3a>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
    9a46:	2200      	movs	r2, #0
    9a48:	a901      	add	r1, sp, #4
    9a4a:	4668      	mov	r0, sp
    9a4c:	f7ff f922 	bl	8c94 <mount_volume>
    9a50:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
}
    9a52:	4620      	mov	r0, r4
    9a54:	b004      	add	sp, #16
    9a56:	bd10      	pop	{r4, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
    9a58:	240b      	movs	r4, #11
    9a5a:	e7fa      	b.n	9a52 <f_mount+0x3a>
    9a5c:	20000b00 	.word	0x20000b00

00009a60 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
    9a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a64:	b099      	sub	sp, #100	; 0x64
    9a66:	460d      	mov	r5, r1
    9a68:	9011      	str	r0, [sp, #68]	; 0x44
	DSTATUS ds;
	FRESULT fr;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
    9a6a:	a811      	add	r0, sp, #68	; 0x44
{
    9a6c:	4693      	mov	fp, r2
    9a6e:	9308      	str	r3, [sp, #32]
	vol = get_ldnumber(&path);					/* Get target logical drive */
    9a70:	f7ff f854 	bl	8b1c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    9a74:	2800      	cmp	r0, #0
    9a76:	f2c0 8627 	blt.w	a6c8 <f_mkfs+0xc68>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
    9a7a:	4bab      	ldr	r3, [pc, #684]	; (9d28 <f_mkfs+0x2c8>)
    9a7c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    9a80:	b10b      	cbz	r3, 9a86 <f_mkfs+0x26>
    9a82:	2200      	movs	r2, #0
    9a84:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);			/* Physical drive */
	ipart = LD2PT(vol);			/* Partition (0:create as new, 1..:get from partition table) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
    9a86:	4ba9      	ldr	r3, [pc, #676]	; (9d2c <f_mkfs+0x2cc>)
	pdrv = LD2PD(vol);			/* Physical drive */
    9a88:	fa5f fa80 	uxtb.w	sl, r0

	/* Get physical drive status (sz_drv, sz_blk, ss) */
	ds = disk_initialize(pdrv);
    9a8c:	4650      	mov	r0, sl
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
    9a8e:	2d00      	cmp	r5, #0
    9a90:	bf08      	it	eq
    9a92:	461d      	moveq	r5, r3
	ds = disk_initialize(pdrv);
    9a94:	f000 fe46 	bl	a724 <disk_initialize>
	if (ds & STA_NOINIT) return FR_NOT_READY;
    9a98:	07c4      	lsls	r4, r0, #31
    9a9a:	f100 8617 	bmi.w	a6cc <f_mkfs+0xc6c>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
    9a9e:	0740      	lsls	r0, r0, #29
    9aa0:	f100 8616 	bmi.w	a6d0 <f_mkfs+0xc70>
	sz_blk = opt->align;
    9aa4:	686b      	ldr	r3, [r5, #4]
    9aa6:	9312      	str	r3, [sp, #72]	; 0x48
	if (sz_blk == 0 && disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK) sz_blk = 1;
    9aa8:	b93b      	cbnz	r3, 9aba <f_mkfs+0x5a>
    9aaa:	aa12      	add	r2, sp, #72	; 0x48
    9aac:	2103      	movs	r1, #3
    9aae:	4650      	mov	r0, sl
    9ab0:	f000 fe98 	bl	a7e4 <disk_ioctl>
    9ab4:	b108      	cbz	r0, 9aba <f_mkfs+0x5a>
    9ab6:	2301      	movs	r3, #1
    9ab8:	9312      	str	r3, [sp, #72]	; 0x48
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;
    9aba:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9abc:	1e53      	subs	r3, r2, #1
    9abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9ac2:	d201      	bcs.n	9ac8 <f_mkfs+0x68>
    9ac4:	421a      	tst	r2, r3
    9ac6:	d001      	beq.n	9acc <f_mkfs+0x6c>
    9ac8:	2301      	movs	r3, #1
    9aca:	9312      	str	r3, [sp, #72]	; 0x48
#else
	ss = FF_MAX_SS;
#endif
	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
    9acc:	786b      	ldrb	r3, [r5, #1]
    9ace:	9302      	str	r3, [sp, #8]
    9ad0:	3b01      	subs	r3, #1
    9ad2:	2b01      	cmp	r3, #1
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
    9ad4:	f8d5 8008 	ldr.w	r8, [r5, #8]
    9ad8:	9b02      	ldr	r3, [sp, #8]
    9ada:	bf88      	it	hi
    9adc:	2301      	movhi	r3, #1
    9ade:	9302      	str	r3, [sp, #8]
    9ae0:	f108 33ff 	add.w	r3, r8, #4294967295
    9ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9ae8:	d22f      	bcs.n	9b4a <f_mkfs+0xea>
    9aea:	f018 0f0f 	tst.w	r8, #15
    9aee:	bf18      	it	ne
    9af0:	f44f 7800 	movne.w	r8, #512	; 0x200
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
    9af4:	68ec      	ldr	r4, [r5, #12]
    9af6:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    9afa:	d829      	bhi.n	9b50 <f_mkfs+0xf0>
    9afc:	1e63      	subs	r3, r4, #1
    9afe:	4223      	tst	r3, r4
    9b00:	bf18      	it	ne
    9b02:	2400      	movne	r4, #0
	sz_au /= ss;	/* Byte --> Sector */

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
    9b04:	9b08      	ldr	r3, [sp, #32]
    9b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9b0a:	f0c0 85e3 	bcc.w	a6d4 <f_mkfs+0xc74>
	buf = (BYTE*)work;		/* Working buffer */
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
    9b0e:	f1bb 0f00 	cmp.w	fp, #0
    9b12:	f000 85df 	beq.w	a6d4 <f_mkfs+0xc74>
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
    9b16:	782b      	ldrb	r3, [r5, #0]
    9b18:	9304      	str	r3, [sp, #16]
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    9b1a:	aa13      	add	r2, sp, #76	; 0x4c
	b_vol = sz_vol = 0;
    9b1c:	2300      	movs	r3, #0
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    9b1e:	2101      	movs	r1, #1
    9b20:	4650      	mov	r0, sl
	b_vol = sz_vol = 0;
    9b22:	9313      	str	r3, [sp, #76]	; 0x4c
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    9b24:	f000 fe5e 	bl	a7e4 <disk_ioctl>
    9b28:	2800      	cmp	r0, #0
    9b2a:	f040 80ea 	bne.w	9d02 <f_mkfs+0x2a2>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
    9b2e:	9b04      	ldr	r3, [sp, #16]
    9b30:	f013 0308 	ands.w	r3, r3, #8
    9b34:	930b      	str	r3, [sp, #44]	; 0x2c
    9b36:	d10d      	bne.n	9b54 <f_mkfs+0xf4>
    9b38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
    9b3a:	2b3f      	cmp	r3, #63	; 0x3f
    9b3c:	f240 8095 	bls.w	9c6a <f_mkfs+0x20a>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
    9b40:	3b3f      	subs	r3, #63	; 0x3f
    9b42:	9313      	str	r3, [sp, #76]	; 0x4c
    9b44:	233f      	movs	r3, #63	; 0x3f
	b_vol = sz_vol = 0;
    9b46:	9301      	str	r3, [sp, #4]
    9b48:	e005      	b.n	9b56 <f_mkfs+0xf6>
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
    9b4a:	f44f 7800 	mov.w	r8, #512	; 0x200
    9b4e:	e7d1      	b.n	9af4 <f_mkfs+0x94>
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
    9b50:	2400      	movs	r4, #0
    9b52:	e7d7      	b.n	9b04 <f_mkfs+0xa4>
	b_vol = sz_vol = 0;
    9b54:	9001      	str	r0, [sp, #4]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
    9b56:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    9b58:	2f7f      	cmp	r7, #127	; 0x7f
    9b5a:	f240 8405 	bls.w	a368 <f_mkfs+0x908>
	sz_au /= ss;	/* Byte --> Sector */
    9b5e:	0a63      	lsrs	r3, r4, #9
    9b60:	9300      	str	r3, [sp, #0]

	/* Now start to create an FAT volume at b_vol and sz_vol */

	do {	/* Pre-determine the FAT type */
		if (FF_FS_EXFAT && (fsopt & FM_EXFAT)) {	/* exFAT possible? */
    9b62:	9b04      	ldr	r3, [sp, #16]
    9b64:	0759      	lsls	r1, r3, #29
    9b66:	f140 8082 	bpl.w	9c6e <f_mkfs+0x20e>
			if ((fsopt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || sz_au > 128) {	/* exFAT only, vol >= 64MS or sz_au > 128S ? */
    9b6a:	f003 0307 	and.w	r3, r3, #7
    9b6e:	2b04      	cmp	r3, #4
    9b70:	d010      	beq.n	9b94 <f_mkfs+0x134>
    9b72:	f1b7 6f80 	cmp.w	r7, #67108864	; 0x4000000
    9b76:	f080 8086 	bcs.w	9c86 <f_mkfs+0x226>
    9b7a:	f5b4 3f81 	cmp.w	r4, #66048	; 0x10200
    9b7e:	f080 8082 	bcs.w	9c86 <f_mkfs+0x226>
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
    9b82:	9a04      	ldr	r2, [sp, #16]
    9b84:	9b04      	ldr	r3, [sp, #16]
    9b86:	0792      	lsls	r2, r2, #30
    9b88:	f003 0301 	and.w	r3, r3, #1
    9b8c:	d576      	bpl.n	9c7c <f_mkfs+0x21c>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
    9b8e:	f1c3 0303 	rsb	r3, r3, #3
    9b92:	b2db      	uxtb	r3, r3
	sz_buf = len / ss;		/* Size of working buffer [sector] */
    9b94:	9a08      	ldr	r2, [sp, #32]
    9b96:	0a52      	lsrs	r2, r2, #9
    9b98:	9205      	str	r2, [sp, #20]
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
		fsty = FS_FAT16;
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
    9b9a:	f107 42a0 	add.w	r2, r7, #1342177280	; 0x50000000
    9b9e:	f502 1204 	add.w	r2, r2, #2162688	; 0x210000

#if FF_FS_EXFAT
	if (fsty == FS_EXFAT) {	/* Create an exFAT volume */
    9ba2:	2b04      	cmp	r3, #4
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
    9ba4:	9206      	str	r2, [sp, #24]
	if (fsty == FS_EXFAT) {	/* Create an exFAT volume */
    9ba6:	f040 8333 	bne.w	a210 <f_mkfs+0x7b0>
		DWORD szb_bit, szb_case, sum, nbit, clu, clen[3];
		WCHAR ch, si;
		UINT j, st;

		if (sz_vol < 0x1000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume for exFAT? */
    9baa:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
    9bae:	f0c0 83db 	bcc.w	a368 <f_mkfs+0x908>
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Determine FAT location, data location and number of clusters */
		if (sz_au == 0) {	/* AU auto-selection */
    9bb2:	9b00      	ldr	r3, [sp, #0]
    9bb4:	b94b      	cbnz	r3, 9bca <f_mkfs+0x16a>
			sz_au = 8;
			if (sz_vol >= 0x80000) sz_au = 64;		/* >= 512Ks */
    9bb6:	f5b7 2f00 	cmp.w	r7, #524288	; 0x80000
    9bba:	d366      	bcc.n	9c8a <f_mkfs+0x22a>
			if (sz_vol >= 0x4000000) sz_au = 256;	/* >= 64Ms */
    9bbc:	f1b7 6f80 	cmp.w	r7, #67108864	; 0x4000000
    9bc0:	bf34      	ite	cc
    9bc2:	2340      	movcc	r3, #64	; 0x40
    9bc4:	f44f 7380 	movcs.w	r3, #256	; 0x100
			sz_au = 8;
    9bc8:	9300      	str	r3, [sp, #0]
		}
		b_fat = b_vol + 32;										/* FAT start at offset 32 */
    9bca:	9b01      	ldr	r3, [sp, #4]
		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 4 + ss - 1) / ss;	/* Number of FAT sectors */
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase block boundary */
    9bcc:	9912      	ldr	r1, [sp, #72]	; 0x48
		b_fat = b_vol + 32;										/* FAT start at offset 32 */
    9bce:	3320      	adds	r3, #32
    9bd0:	9304      	str	r3, [sp, #16]
		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 4 + ss - 1) / ss;	/* Number of FAT sectors */
    9bd2:	9b00      	ldr	r3, [sp, #0]
    9bd4:	fbb7 f3f3 	udiv	r3, r7, r3
    9bd8:	009b      	lsls	r3, r3, #2
    9bda:	f203 2307 	addw	r3, r3, #519	; 0x207
    9bde:	0a5a      	lsrs	r2, r3, #9
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase block boundary */
    9be0:	9804      	ldr	r0, [sp, #16]
		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 4 + ss - 1) / ss;	/* Number of FAT sectors */
    9be2:	920e      	str	r2, [sp, #56]	; 0x38
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase block boundary */
    9be4:	1e4a      	subs	r2, r1, #1
    9be6:	4402      	add	r2, r0
    9be8:	eb02 2353 	add.w	r3, r2, r3, lsr #9
    9bec:	4249      	negs	r1, r1
		if (b_data - b_vol >= sz_vol / 2) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
    9bee:	9a01      	ldr	r2, [sp, #4]
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase block boundary */
    9bf0:	400b      	ands	r3, r1
    9bf2:	9302      	str	r3, [sp, #8]
		if (b_data - b_vol >= sz_vol / 2) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
    9bf4:	1a9b      	subs	r3, r3, r2
    9bf6:	ebb3 0f57 	cmp.w	r3, r7, lsr #1
    9bfa:	930d      	str	r3, [sp, #52]	; 0x34
    9bfc:	f080 83b4 	bcs.w	a368 <f_mkfs+0x908>
		n_clst = (DWORD)(sz_vol - (b_data - b_vol)) / sz_au;	/* Number of clusters */
    9c00:	9b02      	ldr	r3, [sp, #8]
    9c02:	4417      	add	r7, r2
    9c04:	1aff      	subs	r7, r7, r3
    9c06:	9b00      	ldr	r3, [sp, #0]
    9c08:	fbb7 f3f3 	udiv	r3, r7, r3
		if (n_clst <16) LEAVE_MKFS(FR_MKFS_ABORTED);			/* Too few clusters? */
    9c0c:	f1a3 0210 	sub.w	r2, r3, #16
		n_clst = (DWORD)(sz_vol - (b_data - b_vol)) / sz_au;	/* Number of clusters */
    9c10:	930c      	str	r3, [sp, #48]	; 0x30
		if (n_clst <16) LEAVE_MKFS(FR_MKFS_ABORTED);			/* Too few clusters? */
    9c12:	4b47      	ldr	r3, [pc, #284]	; (9d30 <f_mkfs+0x2d0>)
    9c14:	429a      	cmp	r2, r3
    9c16:	f200 83a7 	bhi.w	a368 <f_mkfs+0x908>
		if (n_clst > MAX_EXFAT) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters? */

		szb_bit = (n_clst + 7) / 8;								/* Size of allocation bitmap */
    9c1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */

		/* Create a compressed up-case table */
		sect = b_data + sz_au * clen[0];	/* Table start sector */
    9c1c:	9902      	ldr	r1, [sp, #8]
		szb_bit = (n_clst + 7) / 8;								/* Size of allocation bitmap */
    9c1e:	3307      	adds	r3, #7
    9c20:	08da      	lsrs	r2, r3, #3
    9c22:	920f      	str	r2, [sp, #60]	; 0x3c
		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */
    9c24:	9a00      	ldr	r2, [sp, #0]
    9c26:	ea4f 2942 	mov.w	r9, r2, lsl #9
    9c2a:	f109 32ff 	add.w	r2, r9, #4294967295
    9c2e:	eb02 03d3 	add.w	r3, r2, r3, lsr #3
    9c32:	9209      	str	r2, [sp, #36]	; 0x24
		sect = b_data + sz_au * clen[0];	/* Table start sector */
    9c34:	9a00      	ldr	r2, [sp, #0]
		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */
    9c36:	fbb3 f3f9 	udiv	r3, r3, r9
		sect = b_data + sz_au * clen[0];	/* Table start sector */
    9c3a:	fb02 1703 	mla	r7, r2, r3, r1
				st = 0;
			}
			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);	/* Put it into the write buffer */
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
			i += 2; szb_case += 2;
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
    9c3e:	9a08      	ldr	r2, [sp, #32]
		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */
    9c40:	9303      	str	r3, [sp, #12]
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
    9c42:	2600      	movs	r6, #0
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
    9c44:	f422 78ff 	bic.w	r8, r2, #510	; 0x1fe
		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */
    9c48:	9315      	str	r3, [sp, #84]	; 0x54
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
    9c4a:	4635      	mov	r5, r6
    9c4c:	4634      	mov	r4, r6
		sum = 0;							/* Table checksum to be stored in the 82 entry */
    9c4e:	960a      	str	r6, [sp, #40]	; 0x28
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
    9c50:	9607      	str	r6, [sp, #28]
    9c52:	4633      	mov	r3, r6
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
    9c54:	f028 0801 	bic.w	r8, r8, #1
			switch (st) {
    9c58:	b1de      	cbz	r6, 9c92 <f_mkfs+0x232>
    9c5a:	2e01      	cmp	r6, #1
    9c5c:	d029      	beq.n	9cb2 <f_mkfs+0x252>
				ch = (WCHAR)j; si += (WCHAR)j;	/* Number of chars to skip */
    9c5e:	fa14 f485 	uxtah	r4, r4, r5
    9c62:	b2a8      	uxth	r0, r5
    9c64:	b2a4      	uxth	r4, r4
				st = 0;
    9c66:	2600      	movs	r6, #0
    9c68:	e02b      	b.n	9cc2 <f_mkfs+0x262>
	b_vol = sz_vol = 0;
    9c6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9c6c:	e76b      	b.n	9b46 <f_mkfs+0xe6>
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
    9c6e:	f5b4 3f81 	cmp.w	r4, #66048	; 0x10200
    9c72:	9b00      	ldr	r3, [sp, #0]
    9c74:	bf28      	it	cs
    9c76:	2380      	movcs	r3, #128	; 0x80
    9c78:	9300      	str	r3, [sp, #0]
    9c7a:	e782      	b.n	9b82 <f_mkfs+0x122>
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
    9c7c:	2b00      	cmp	r3, #0
    9c7e:	f000 852b 	beq.w	a6d8 <f_mkfs+0xc78>
		fsty = FS_FAT16;
    9c82:	2302      	movs	r3, #2
    9c84:	e786      	b.n	9b94 <f_mkfs+0x134>
				fsty = FS_EXFAT; break;
    9c86:	2304      	movs	r3, #4
    9c88:	e784      	b.n	9b94 <f_mkfs+0x134>
			sz_au = 8;
    9c8a:	2308      	movs	r3, #8
    9c8c:	e79c      	b.n	9bc8 <f_mkfs+0x168>
				n = (i + ss - 1) / ss;
				if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
				sect += n; i = 0;
    9c8e:	4603      	mov	r3, r0
    9c90:	e7e2      	b.n	9c58 <f_mkfs+0x1f8>
				ch = (WCHAR)ff_wtoupper(si);	/* Get an up-case char */
    9c92:	4620      	mov	r0, r4
    9c94:	9310      	str	r3, [sp, #64]	; 0x40
    9c96:	f000 fe1b 	bl	a8d0 <ff_wtoupper>
    9c9a:	b280      	uxth	r0, r0
				if (ch != si) {
    9c9c:	1c62      	adds	r2, r4, #1
    9c9e:	4284      	cmp	r4, r0
    9ca0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9ca2:	b292      	uxth	r2, r2
    9ca4:	d139      	bne.n	9d1a <f_mkfs+0x2ba>
				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get run length of no-case block */
    9ca6:	2501      	movs	r5, #1
    9ca8:	1966      	adds	r6, r4, r5
    9caa:	b2b6      	uxth	r6, r6
    9cac:	bb66      	cbnz	r6, 9d08 <f_mkfs+0x2a8>
				if (j >= 128) {
    9cae:	2d7f      	cmp	r5, #127	; 0x7f
    9cb0:	d835      	bhi.n	9d1e <f_mkfs+0x2be>
				if (--j == 0) st = 0;
    9cb2:	3d01      	subs	r5, #1
				ch = si++;		/* Fill the short run */
    9cb4:	f104 0201 	add.w	r2, r4, #1
				if (--j == 0) st = 0;
    9cb8:	4620      	mov	r0, r4
    9cba:	bf14      	ite	ne
    9cbc:	2601      	movne	r6, #1
    9cbe:	2600      	moveq	r6, #0
				ch = si++;		/* Fill the short run */
    9cc0:	b294      	uxth	r4, r2
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
    9cc2:	eb0b 0103 	add.w	r1, fp, r3
			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);	/* Put it into the write buffer */
    9cc6:	b2c2      	uxtb	r2, r0
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
    9cc8:	f3c0 200f 	ubfx	r0, r0, #8, #16
			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);	/* Put it into the write buffer */
    9ccc:	f80b 2003 	strb.w	r2, [fp, r3]
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
    9cd0:	7048      	strb	r0, [r1, #1]
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
    9cd2:	990a      	ldr	r1, [sp, #40]	; 0x28
    9cd4:	eb02 0271 	add.w	r2, r2, r1, ror #1
    9cd8:	eb00 0272 	add.w	r2, r0, r2, ror #1
    9cdc:	920a      	str	r2, [sp, #40]	; 0x28
			i += 2; szb_case += 2;
    9cde:	9a07      	ldr	r2, [sp, #28]
    9ce0:	3202      	adds	r2, #2
    9ce2:	9207      	str	r2, [sp, #28]
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
    9ce4:	b114      	cbz	r4, 9cec <f_mkfs+0x28c>
			i += 2; szb_case += 2;
    9ce6:	1c98      	adds	r0, r3, #2
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
    9ce8:	4580      	cmp	r8, r0
    9cea:	d1d0      	bne.n	9c8e <f_mkfs+0x22e>
				n = (i + ss - 1) / ss;
    9cec:	f203 2301 	addw	r3, r3, #513	; 0x201
    9cf0:	0a5b      	lsrs	r3, r3, #9
				if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    9cf2:	463a      	mov	r2, r7
    9cf4:	4659      	mov	r1, fp
    9cf6:	4650      	mov	r0, sl
    9cf8:	9310      	str	r3, [sp, #64]	; 0x40
    9cfa:	f000 fd51 	bl	a7a0 <disk_write>
    9cfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9d00:	b1c0      	cbz	r0, 9d34 <f_mkfs+0x2d4>
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    9d02:	2001      	movs	r0, #1
    9d04:	f000 bcdd 	b.w	a6c2 <f_mkfs+0xc62>
				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get run length of no-case block */
    9d08:	4630      	mov	r0, r6
    9d0a:	9310      	str	r3, [sp, #64]	; 0x40
    9d0c:	f000 fde0 	bl	a8d0 <ff_wtoupper>
    9d10:	4286      	cmp	r6, r0
    9d12:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9d14:	d1cb      	bne.n	9cae <f_mkfs+0x24e>
    9d16:	3501      	adds	r5, #1
    9d18:	e7c6      	b.n	9ca8 <f_mkfs+0x248>
					si++; break;		/* Store the up-case char if exist */
    9d1a:	4614      	mov	r4, r2
    9d1c:	e7d1      	b.n	9cc2 <f_mkfs+0x262>
					ch = 0xFFFF; st = 2; break;	/* Compress the no-case block if run is >= 128 chars */
    9d1e:	2602      	movs	r6, #2
    9d20:	f64f 70ff 	movw	r0, #65535	; 0xffff
    9d24:	e7cd      	b.n	9cc2 <f_mkfs+0x262>
    9d26:	bf00      	nop
    9d28:	20000b00 	.word	0x20000b00
    9d2c:	00013498 	.word	0x00013498
    9d30:	7fffffed 	.word	0x7fffffed
				sect += n; i = 0;
    9d34:	441f      	add	r7, r3
			}
		} while (si);
    9d36:	2c00      	cmp	r4, #0
    9d38:	d1a9      	bne.n	9c8e <f_mkfs+0x22e>
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
    9d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9d3c:	9a07      	ldr	r2, [sp, #28]
		clen[2] = 1;	/* Number of root dir clusters */

		/* Initialize the allocation bitmap */
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
    9d3e:	f8dd 8008 	ldr.w	r8, [sp, #8]
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
    9d42:	4413      	add	r3, r2
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
    9d44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
    9d46:	fbb3 f3f9 	udiv	r3, r3, r9
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
    9d4a:	f202 14ff 	addw	r4, r2, #511	; 0x1ff
		nbit = clen[0] + clen[1] + clen[2];				/* Number of clusters in-use by system (bitmap, up-case and root-dir) */
    9d4e:	9a03      	ldr	r2, [sp, #12]
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
    9d50:	9316      	str	r3, [sp, #88]	; 0x58
		clen[2] = 1;	/* Number of root dir clusters */
    9d52:	2701      	movs	r7, #1
		nbit = clen[0] + clen[1] + clen[2];				/* Number of clusters in-use by system (bitmap, up-case and root-dir) */
    9d54:	18d3      	adds	r3, r2, r3
    9d56:	9309      	str	r3, [sp, #36]	; 0x24
    9d58:	eb03 0907 	add.w	r9, r3, r7
		do {
			memset(buf, 0, sz_buf * ss);				/* Initialize bitmap buffer */
    9d5c:	9b08      	ldr	r3, [sp, #32]
		clen[2] = 1;	/* Number of root dir clusters */
    9d5e:	9717      	str	r7, [sp, #92]	; 0x5c
			memset(buf, 0, sz_buf * ss);				/* Initialize bitmap buffer */
    9d60:	f423 76ff 	bic.w	r6, r3, #510	; 0x1fe
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
    9d64:	0a64      	lsrs	r4, r4, #9
			memset(buf, 0, sz_buf * ss);				/* Initialize bitmap buffer */
    9d66:	f026 0601 	bic.w	r6, r6, #1
__ssp_bos_icheck3(memset, void *, int)
    9d6a:	4632      	mov	r2, r6
    9d6c:	2100      	movs	r1, #0
    9d6e:	4658      	mov	r0, fp
    9d70:	f008 fac8 	bl	12304 <memset>
    9d74:	464d      	mov	r5, r9
    9d76:	eba9 0305 	sub.w	r3, r9, r5
			for (i = 0; nbit != 0 && i / 8 < sz_buf * ss; buf[i / 8] |= 1 << (i % 8), i++, nbit--) ;	/* Mark used clusters */
    9d7a:	b12d      	cbz	r5, 9d88 <f_mkfs+0x328>
    9d7c:	ebb6 0fd3 	cmp.w	r6, r3, lsr #3
    9d80:	ea4f 02d3 	mov.w	r2, r3, lsr #3
    9d84:	f200 814d 	bhi.w	a022 <f_mkfs+0x5c2>
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
    9d88:	9b05      	ldr	r3, [sp, #20]
    9d8a:	42a3      	cmp	r3, r4
    9d8c:	bf28      	it	cs
    9d8e:	4623      	movcs	r3, r4
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    9d90:	4642      	mov	r2, r8
    9d92:	4659      	mov	r1, fp
    9d94:	4650      	mov	r0, sl
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
    9d96:	4699      	mov	r9, r3
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    9d98:	f000 fd02 	bl	a7a0 <disk_write>
    9d9c:	2800      	cmp	r0, #0
    9d9e:	d1b0      	bne.n	9d02 <f_mkfs+0x2a2>
			sect += n; nsect -= n;
		} while (nsect);
    9da0:	ebb4 0409 	subs.w	r4, r4, r9
			sect += n; nsect -= n;
    9da4:	44c8      	add	r8, r9
		} while (nsect);
    9da6:	f040 813a 	bne.w	a01e <f_mkfs+0x5be>

		/* Initialize the FAT */
		sect = b_fat; nsect = sz_fat;	/* Start of FAT and number of FAT sectors */
    9daa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
		j = nbit = clu = 0;
    9dac:	46a1      	mov	r9, r4
    9dae:	46a0      	mov	r8, r4
	*ptr++ = (BYTE)val; val >>= 8;
    9db0:	27ff      	movs	r7, #255	; 0xff
    9db2:	4632      	mov	r2, r6
    9db4:	2100      	movs	r1, #0
    9db6:	4658      	mov	r0, fp
    9db8:	f008 faa4 	bl	12304 <memset>
		do {
			memset(buf, 0, sz_buf * ss); i = 0;	/* Clear work area and reset write offset */
			if (clu == 0) {	/* Initialize FAT [0] and FAT[1] */
    9dbc:	f1b9 0f00 	cmp.w	r9, #0
    9dc0:	f040 814a 	bne.w	a058 <f_mkfs+0x5f8>
	*ptr++ = (BYTE)val; val >>= 8;
    9dc4:	f06f 0307 	mvn.w	r3, #7
    9dc8:	f88b 3000 	strb.w	r3, [fp]
	*ptr++ = (BYTE)val; val >>= 8;
    9dcc:	f88b 7001 	strb.w	r7, [fp, #1]
	*ptr++ = (BYTE)val; val >>= 8;
    9dd0:	f88b 7002 	strb.w	r7, [fp, #2]
	*ptr++ = (BYTE)val;
    9dd4:	f88b 7003 	strb.w	r7, [fp, #3]
	*ptr++ = (BYTE)val; val >>= 8;
    9dd8:	f88b 7004 	strb.w	r7, [fp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
    9ddc:	f88b 7005 	strb.w	r7, [fp, #5]
	*ptr++ = (BYTE)val; val >>= 8;
    9de0:	f88b 7006 	strb.w	r7, [fp, #6]
	*ptr++ = (BYTE)val;
    9de4:	f88b 7007 	strb.w	r7, [fp, #7]
				st_dword(buf + i, 0xFFFFFFF8); i += 4; clu++;
				st_dword(buf + i, 0xFFFFFFFF); i += 4; clu++;
    9de8:	f04f 0902 	mov.w	r9, #2
    9dec:	2208      	movs	r2, #8
			}
			do {			/* Create chains of bitmap, up-case and root dir */
				while (nbit != 0 && i < sz_buf * ss) {	/* Create a chain */
					st_dword(buf + i, (nbit > 1) ? clu + 1 : 0xFFFFFFFF);
					i += 4; clu++; nbit--;
    9dee:	4623      	mov	r3, r4
				while (nbit != 0 && i < sz_buf * ss) {	/* Create a chain */
    9df0:	f1b8 0f00 	cmp.w	r8, #0
    9df4:	f000 8132 	beq.w	a05c <f_mkfs+0x5fc>
    9df8:	4296      	cmp	r6, r2
    9dfa:	f200 811d 	bhi.w	a038 <f_mkfs+0x5d8>
				}
				if (nbit == 0 && j < 3) nbit = clen[j++];	/* Get next chain length */
			} while (nbit != 0 && i < sz_buf * ss);
			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
    9dfe:	9b05      	ldr	r3, [sp, #20]
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    9e00:	9a04      	ldr	r2, [sp, #16]
			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
    9e02:	42ab      	cmp	r3, r5
    9e04:	bf28      	it	cs
    9e06:	462b      	movcs	r3, r5
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    9e08:	4659      	mov	r1, fp
    9e0a:	4650      	mov	r0, sl
    9e0c:	9308      	str	r3, [sp, #32]
    9e0e:	f000 fcc7 	bl	a7a0 <disk_write>
    9e12:	2800      	cmp	r0, #0
    9e14:	f47f af75 	bne.w	9d02 <f_mkfs+0x2a2>
			sect += n; nsect -= n;
    9e18:	9a04      	ldr	r2, [sp, #16]
    9e1a:	9b08      	ldr	r3, [sp, #32]
    9e1c:	441a      	add	r2, r3
		} while (nsect);
    9e1e:	1aed      	subs	r5, r5, r3
			sect += n; nsect -= n;
    9e20:	9204      	str	r2, [sp, #16]
		} while (nsect);
    9e22:	d1c6      	bne.n	9db2 <f_mkfs+0x352>
    9e24:	4632      	mov	r2, r6
    9e26:	4629      	mov	r1, r5
    9e28:	4658      	mov	r0, fp
    9e2a:	f008 fa6b 	bl	12304 <memset>

		/* Initialize the root directory */
		memset(buf, 0, sz_buf * ss);
		buf[SZDIRE * 0 + 0] = ET_VLABEL;				/* Volume label entry (no label) */
    9e2e:	2383      	movs	r3, #131	; 0x83
    9e30:	f88b 3000 	strb.w	r3, [fp]
		buf[SZDIRE * 1 + 0] = ET_BITMAP;				/* Bitmap entry */
    9e34:	2381      	movs	r3, #129	; 0x81
    9e36:	f88b 3020 	strb.w	r3, [fp, #32]
	*ptr++ = (BYTE)val; val >>= 8;
    9e3a:	2302      	movs	r3, #2
		st_dword(buf + SZDIRE * 1 + 20, 2);				/*  cluster */
		st_dword(buf + SZDIRE * 1 + 24, szb_bit);		/*  size */
    9e3c:	990f      	ldr	r1, [sp, #60]	; 0x3c
	*ptr++ = (BYTE)val; val >>= 8;
    9e3e:	f88b 3034 	strb.w	r3, [fp, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
    9e42:	f88b 5035 	strb.w	r5, [fp, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
    9e46:	f88b 5036 	strb.w	r5, [fp, #54]	; 0x36
	*ptr++ = (BYTE)val;
    9e4a:	f88b 5037 	strb.w	r5, [fp, #55]	; 0x37
		st_dword(buf + SZDIRE * 1 + 24, szb_bit);		/*  size */
    9e4e:	f10b 0038 	add.w	r0, fp, #56	; 0x38
    9e52:	f006 f9ab 	bl	101ac <st_dword>
		buf[SZDIRE * 2 + 0] = ET_UPCASE;				/* Up-case table entry */
    9e56:	2382      	movs	r3, #130	; 0x82
		st_dword(buf + SZDIRE * 2 + 4, sum);			/*  sum */
    9e58:	990a      	ldr	r1, [sp, #40]	; 0x28
		buf[SZDIRE * 2 + 0] = ET_UPCASE;				/* Up-case table entry */
    9e5a:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
		st_dword(buf + SZDIRE * 2 + 4, sum);			/*  sum */
    9e5e:	f10b 0044 	add.w	r0, fp, #68	; 0x44
    9e62:	f006 f9a3 	bl	101ac <st_dword>
		st_dword(buf + SZDIRE * 2 + 20, 2 + clen[0]);	/*  cluster */
    9e66:	9903      	ldr	r1, [sp, #12]
    9e68:	f10b 0354 	add.w	r3, fp, #84	; 0x54
    9e6c:	4618      	mov	r0, r3
    9e6e:	3102      	adds	r1, #2
    9e70:	9304      	str	r3, [sp, #16]
    9e72:	f006 f99b 	bl	101ac <st_dword>
		st_dword(buf + SZDIRE * 2 + 24, szb_case);		/*  size */
    9e76:	f10b 0358 	add.w	r3, fp, #88	; 0x58
    9e7a:	9907      	ldr	r1, [sp, #28]
    9e7c:	9303      	str	r3, [sp, #12]
    9e7e:	4618      	mov	r0, r3
    9e80:	f006 f994 	bl	101ac <st_dword>
		sect = b_data + sz_au * (clen[0] + clen[1]); nsect = sz_au;	/* Start of the root directory and number of sectors */
    9e84:	9a00      	ldr	r2, [sp, #0]
    9e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9e88:	9902      	ldr	r1, [sp, #8]
    9e8a:	4691      	mov	r9, r2
    9e8c:	fb02 1503 	mla	r5, r2, r3, r1
		do {	/* Fill root directory sectors */
			n = (nsect > sz_buf) ? sz_buf : nsect;
    9e90:	9b05      	ldr	r3, [sp, #20]
    9e92:	454b      	cmp	r3, r9
    9e94:	bf28      	it	cs
    9e96:	464b      	movcs	r3, r9
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    9e98:	4659      	mov	r1, fp
    9e9a:	462a      	mov	r2, r5
    9e9c:	4650      	mov	r0, sl
			n = (nsect > sz_buf) ? sz_buf : nsect;
    9e9e:	461e      	mov	r6, r3
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    9ea0:	f000 fc7e 	bl	a7a0 <disk_write>
    9ea4:	4601      	mov	r1, r0
    9ea6:	2800      	cmp	r0, #0
    9ea8:	f47f af2b 	bne.w	9d02 <f_mkfs+0x2a2>
    9eac:	f44f 7200 	mov.w	r2, #512	; 0x200
    9eb0:	4658      	mov	r0, fp
    9eb2:	f008 fa27 	bl	12304 <memset>
			memset(buf, 0, ss);	/* Rest of entries are filled with zero */
			sect += n; nsect -= n;
		} while (nsect);
    9eb6:	ebb9 0906 	subs.w	r9, r9, r6
			sect += n; nsect -= n;
    9eba:	4435      	add	r5, r6
		} while (nsect);
    9ebc:	d1e8      	bne.n	9e90 <f_mkfs+0x430>

		/* Create two set of the exFAT VBR blocks */
		sect = b_vol;
    9ebe:	f8dd 8004 	ldr.w	r8, [sp, #4]
    9ec2:	2302      	movs	r3, #2
    9ec4:	2100      	movs	r1, #0
    9ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
    9eca:	4658      	mov	r0, fp
    9ecc:	9308      	str	r3, [sp, #32]
    9ece:	f008 fa19 	bl	12304 <memset>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    9ed2:	4ace      	ldr	r2, [pc, #824]	; (a20c <f_mkfs+0x7ac>)
    9ed4:	6813      	ldr	r3, [r2, #0]
    9ed6:	f8cb 3000 	str.w	r3, [fp]
    9eda:	6853      	ldr	r3, [r2, #4]
    9edc:	f8cb 3004 	str.w	r3, [fp, #4]
    9ee0:	8913      	ldrh	r3, [r2, #8]
    9ee2:	f8ab 3008 	strh.w	r3, [fp, #8]
    9ee6:	7a93      	ldrb	r3, [r2, #10]
    9ee8:	f88b 300a 	strb.w	r3, [fp, #10]
		for (n = 0; n < 2; n++) {
			/* Main record (+0) */
			memset(buf, 0, ss);
			memcpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
			st_qword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
    9eec:	9a01      	ldr	r2, [sp, #4]
    9eee:	2300      	movs	r3, #0
    9ef0:	f10b 0040 	add.w	r0, fp, #64	; 0x40
    9ef4:	f006 f962 	bl	101bc <st_qword>
			st_qword(buf + BPB_TotSecEx, sz_vol);					/* Volume size [sector] */
    9ef8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9efa:	2300      	movs	r3, #0
    9efc:	f10b 0048 	add.w	r0, fp, #72	; 0x48
    9f00:	f006 f95c 	bl	101bc <st_qword>
	*ptr++ = (BYTE)val; val >>= 8;
    9f04:	2320      	movs	r3, #32
    9f06:	f88b 3050 	strb.w	r3, [fp, #80]	; 0x50
			st_dword(buf + BPB_FatOfsEx, (DWORD)(b_fat - b_vol));	/* FAT offset [sector] */
			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
    9f0a:	990e      	ldr	r1, [sp, #56]	; 0x38
    9f0c:	9804      	ldr	r0, [sp, #16]
	*ptr++ = (BYTE)val; val >>= 8;
    9f0e:	f88b 9051 	strb.w	r9, [fp, #81]	; 0x51
	*ptr++ = (BYTE)val; val >>= 8;
    9f12:	f88b 9052 	strb.w	r9, [fp, #82]	; 0x52
	*ptr++ = (BYTE)val;
    9f16:	f88b 9053 	strb.w	r9, [fp, #83]	; 0x53
			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
    9f1a:	f006 f947 	bl	101ac <st_dword>
			st_dword(buf + BPB_DataOfsEx, (DWORD)(b_data - b_vol));	/* Data offset [sector] */
    9f1e:	990d      	ldr	r1, [sp, #52]	; 0x34
    9f20:	9803      	ldr	r0, [sp, #12]
    9f22:	f006 f943 	bl	101ac <st_dword>
			st_dword(buf + BPB_NumClusEx, n_clst);					/* Number of clusters */
    9f26:	990c      	ldr	r1, [sp, #48]	; 0x30
    9f28:	f10b 005c 	add.w	r0, fp, #92	; 0x5c
    9f2c:	f006 f93e 	bl	101ac <st_dword>
			st_dword(buf + BPB_RootClusEx, 2 + clen[0] + clen[1]);	/* Root dir cluster # */
    9f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9f32:	f10b 0060 	add.w	r0, fp, #96	; 0x60
    9f36:	1c99      	adds	r1, r3, #2
    9f38:	f006 f938 	bl	101ac <st_dword>
			st_dword(buf + BPB_VolIDEx, vsn);						/* VSN */
    9f3c:	9906      	ldr	r1, [sp, #24]
    9f3e:	f10b 0064 	add.w	r0, fp, #100	; 0x64
    9f42:	f006 f933 	bl	101ac <st_dword>
	*ptr++ = (BYTE)val;
    9f46:	f04f 0301 	mov.w	r3, #1
    9f4a:	f88b 3069 	strb.w	r3, [fp, #105]	; 0x69
	*ptr++ = (BYTE)val; val >>= 8;
    9f4e:	f88b 9068 	strb.w	r9, [fp, #104]	; 0x68
			st_word(buf + BPB_FSVerEx, 0x100);						/* Filesystem version (1.00) */
			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;	/* Log2 of sector size [byte] */
    9f52:	f88b 906c 	strb.w	r9, [fp, #108]	; 0x6c
    9f56:	230a      	movs	r3, #10
    9f58:	3b01      	subs	r3, #1
    9f5a:	f040 8092 	bne.w	a082 <f_mkfs+0x622>
			for (buf[BPB_SecPerClusEx] = 0, i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
    9f5e:	9c00      	ldr	r4, [sp, #0]
    9f60:	f88b 306d 	strb.w	r3, [fp, #109]	; 0x6d
    9f64:	0864      	lsrs	r4, r4, #1
    9f66:	f040 8092 	bne.w	a08e <f_mkfs+0x62e>
			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
    9f6a:	f04f 0301 	mov.w	r3, #1
    9f6e:	f88b 306e 	strb.w	r3, [fp, #110]	; 0x6e
			buf[BPB_DrvNumEx] = 0x80;				/* Drive number (for int13) */
    9f72:	2380      	movs	r3, #128	; 0x80
    9f74:	f88b 306f 	strb.w	r3, [fp, #111]	; 0x6f
	*ptr++ = (BYTE)val; val >>= 8;
    9f78:	23eb      	movs	r3, #235	; 0xeb
    9f7a:	f88b 3078 	strb.w	r3, [fp, #120]	; 0x78
	*ptr++ = (BYTE)val;
    9f7e:	23fe      	movs	r3, #254	; 0xfe
    9f80:	f88b 3079 	strb.w	r3, [fp, #121]	; 0x79
	*ptr++ = (BYTE)val; val >>= 8;
    9f84:	2355      	movs	r3, #85	; 0x55
    9f86:	f88b 31fe 	strb.w	r3, [fp, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
    9f8a:	23aa      	movs	r3, #170	; 0xaa
    9f8c:	f88b 31ff 	strb.w	r3, [fp, #511]	; 0x1ff
			st_word(buf + BS_BootCodeEx, 0xFEEB);	/* Boot code (x86) */
			st_word(buf + BS_55AA, 0xAA55);			/* Signature (placed here regardless of sector size) */
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
    9f90:	4625      	mov	r5, r4
    9f92:	4626      	mov	r6, r4
				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], sum);
    9f94:	f1a6 036a 	sub.w	r3, r6, #106	; 0x6a
    9f98:	2b01      	cmp	r3, #1
    9f9a:	d905      	bls.n	9fa8 <f_mkfs+0x548>
    9f9c:	2e70      	cmp	r6, #112	; 0x70
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
    9f9e:	bf1c      	itt	ne
    9fa0:	f81b 3006 	ldrbne.w	r3, [fp, r6]
    9fa4:	eb03 0575 	addne.w	r5, r3, r5, ror #1
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
    9fa8:	3601      	adds	r6, #1
    9faa:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    9fae:	d1f1      	bne.n	9f94 <f_mkfs+0x534>
			}
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    9fb0:	4659      	mov	r1, fp
    9fb2:	2301      	movs	r3, #1
    9fb4:	4642      	mov	r2, r8
    9fb6:	4650      	mov	r0, sl
    9fb8:	f000 fbf2 	bl	a7a0 <disk_write>
    9fbc:	f108 0701 	add.w	r7, r8, #1
    9fc0:	4601      	mov	r1, r0
    9fc2:	2800      	cmp	r0, #0
    9fc4:	f47f ae9d 	bne.w	9d02 <f_mkfs+0x2a2>
__ssp_bos_icheck3(memset, void *, int)
    9fc8:	4632      	mov	r2, r6
    9fca:	4658      	mov	r0, fp
    9fcc:	f008 f99a 	bl	12304 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
    9fd0:	2355      	movs	r3, #85	; 0x55
    9fd2:	f88b 31fe 	strb.w	r3, [fp, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
    9fd6:	23aa      	movs	r3, #170	; 0xaa
    9fd8:	f88b 31ff 	strb.w	r3, [fp, #511]	; 0x1ff
			/* Extended bootstrap record (+1..+8) */
			memset(buf, 0, ss);
			st_word(buf + ss - 2, 0xAA55);	/* Signature (placed at end of sector) */
			for (j = 1; j < 9; j++) {
    9fdc:	f10b 33ff 	add.w	r3, fp, #4294967295
    9fe0:	9305      	str	r3, [sp, #20]
    9fe2:	f20b 13ff 	addw	r3, fp, #511	; 0x1ff
    9fe6:	f108 0609 	add.w	r6, r8, #9
    9fea:	9302      	str	r3, [sp, #8]
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
    9fec:	9b05      	ldr	r3, [sp, #20]
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
    9fee:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    9ff2:	eb02 0575 	add.w	r5, r2, r5, ror #1
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
    9ff6:	9a02      	ldr	r2, [sp, #8]
    9ff8:	429a      	cmp	r2, r3
    9ffa:	d1f8      	bne.n	9fee <f_mkfs+0x58e>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    9ffc:	1c7b      	adds	r3, r7, #1
    9ffe:	9307      	str	r3, [sp, #28]
    a000:	4659      	mov	r1, fp
    a002:	2301      	movs	r3, #1
    a004:	463a      	mov	r2, r7
    a006:	4650      	mov	r0, sl
    a008:	f000 fbca 	bl	a7a0 <disk_write>
    a00c:	4601      	mov	r1, r0
    a00e:	2800      	cmp	r0, #0
    a010:	f47f ae77 	bne.w	9d02 <f_mkfs+0x2a2>
			for (j = 1; j < 9; j++) {
    a014:	9b07      	ldr	r3, [sp, #28]
    a016:	429e      	cmp	r6, r3
    a018:	d03f      	beq.n	a09a <f_mkfs+0x63a>
    a01a:	461f      	mov	r7, r3
    a01c:	e7e6      	b.n	9fec <f_mkfs+0x58c>
    a01e:	46a9      	mov	r9, r5
    a020:	e6a3      	b.n	9d6a <f_mkfs+0x30a>
			for (i = 0; nbit != 0 && i / 8 < sz_buf * ss; buf[i / 8] |= 1 << (i % 8), i++, nbit--) ;	/* Mark used clusters */
    a022:	f81b 1002 	ldrb.w	r1, [fp, r2]
    a026:	f003 0307 	and.w	r3, r3, #7
    a02a:	fa07 f303 	lsl.w	r3, r7, r3
    a02e:	430b      	orrs	r3, r1
    a030:	f80b 3002 	strb.w	r3, [fp, r2]
    a034:	3d01      	subs	r5, #1
    a036:	e69e      	b.n	9d76 <f_mkfs+0x316>
					st_dword(buf + i, (nbit > 1) ? clu + 1 : 0xFFFFFFFF);
    a038:	f1b8 0f01 	cmp.w	r8, #1
    a03c:	f109 0901 	add.w	r9, r9, #1
    a040:	eb0b 0002 	add.w	r0, fp, r2
    a044:	bf8c      	ite	hi
    a046:	4649      	movhi	r1, r9
    a048:	f04f 31ff 	movls.w	r1, #4294967295
    a04c:	f006 f8ae 	bl	101ac <st_dword>
					i += 4; clu++; nbit--;
    a050:	f108 38ff 	add.w	r8, r8, #4294967295
    a054:	3204      	adds	r2, #4
    a056:	e6ca      	b.n	9dee <f_mkfs+0x38e>
			memset(buf, 0, sz_buf * ss); i = 0;	/* Clear work area and reset write offset */
    a058:	2200      	movs	r2, #0
    a05a:	e6c8      	b.n	9dee <f_mkfs+0x38e>
				if (nbit == 0 && j < 3) nbit = clen[j++];	/* Get next chain length */
    a05c:	2c02      	cmp	r4, #2
    a05e:	f63f aece 	bhi.w	9dfe <f_mkfs+0x39e>
    a062:	a918      	add	r1, sp, #96	; 0x60
    a064:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    a068:	3401      	adds	r4, #1
    a06a:	f853 8c0c 	ldr.w	r8, [r3, #-12]
			} while (nbit != 0 && i < sz_buf * ss);
    a06e:	f1b8 0f00 	cmp.w	r8, #0
    a072:	f43f aec4 	beq.w	9dfe <f_mkfs+0x39e>
    a076:	4296      	cmp	r6, r2
    a078:	f63f aeb9 	bhi.w	9dee <f_mkfs+0x38e>
    a07c:	e6bf      	b.n	9dfe <f_mkfs+0x39e>
    a07e:	2301      	movs	r3, #1
    a080:	e720      	b.n	9ec4 <f_mkfs+0x464>
			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;	/* Log2 of sector size [byte] */
    a082:	f89b 206c 	ldrb.w	r2, [fp, #108]	; 0x6c
    a086:	3201      	adds	r2, #1
    a088:	f88b 206c 	strb.w	r2, [fp, #108]	; 0x6c
    a08c:	e764      	b.n	9f58 <f_mkfs+0x4f8>
			for (buf[BPB_SecPerClusEx] = 0, i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
    a08e:	f89b 306d 	ldrb.w	r3, [fp, #109]	; 0x6d
    a092:	3301      	adds	r3, #1
    a094:	f88b 306d 	strb.w	r3, [fp, #109]	; 0x6d
    a098:	e764      	b.n	9f64 <f_mkfs+0x504>
    a09a:	f44f 7200 	mov.w	r2, #512	; 0x200
    a09e:	4658      	mov	r0, fp
    a0a0:	f008 f930 	bl	12304 <memset>
			}
			/* OEM/Reserved record (+9..+10) */
			memset(buf, 0, ss);
			for ( ; j < 11; j++) {
    a0a4:	f108 070b 	add.w	r7, r8, #11
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
    a0a8:	9b05      	ldr	r3, [sp, #20]
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
    a0aa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    a0ae:	eb02 0575 	add.w	r5, r2, r5, ror #1
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
    a0b2:	9a02      	ldr	r2, [sp, #8]
    a0b4:	429a      	cmp	r2, r3
    a0b6:	d1f8      	bne.n	a0aa <f_mkfs+0x64a>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    a0b8:	2301      	movs	r3, #1
    a0ba:	4632      	mov	r2, r6
    a0bc:	4659      	mov	r1, fp
    a0be:	4650      	mov	r0, sl
    a0c0:	f106 0801 	add.w	r8, r6, #1
    a0c4:	f000 fb6c 	bl	a7a0 <disk_write>
    a0c8:	2800      	cmp	r0, #0
    a0ca:	f47f ae1a 	bne.w	9d02 <f_mkfs+0x2a2>
			for ( ; j < 11; j++) {
    a0ce:	4547      	cmp	r7, r8
    a0d0:	d001      	beq.n	a0d6 <f_mkfs+0x676>
    a0d2:	4646      	mov	r6, r8
    a0d4:	e7e8      	b.n	a0a8 <f_mkfs+0x648>
			}
			/* Sum record (+11) */
			for (i = 0; i < ss; i += 4) st_dword(buf + i, sum);		/* Fill with checksum value */
    a0d6:	eb0b 0004 	add.w	r0, fp, r4
    a0da:	4629      	mov	r1, r5
    a0dc:	3404      	adds	r4, #4
    a0de:	f006 f865 	bl	101ac <st_dword>
    a0e2:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    a0e6:	d1f6      	bne.n	a0d6 <f_mkfs+0x676>
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    a0e8:	2301      	movs	r3, #1
    a0ea:	463a      	mov	r2, r7
    a0ec:	4659      	mov	r1, fp
    a0ee:	4650      	mov	r0, sl
    a0f0:	f106 0802 	add.w	r8, r6, #2
    a0f4:	f000 fb54 	bl	a7a0 <disk_write>
    a0f8:	2800      	cmp	r0, #0
    a0fa:	f47f ae02 	bne.w	9d02 <f_mkfs+0x2a2>
		for (n = 0; n < 2; n++) {
    a0fe:	9b08      	ldr	r3, [sp, #32]
    a100:	2b01      	cmp	r3, #1
    a102:	d1bc      	bne.n	a07e <f_mkfs+0x61e>

	/* A FAT volume has been created here */

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;			/* exFAT */
    a104:	f04f 0807 	mov.w	r8, #7
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD */
    a108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a10a:	2b00      	cmp	r3, #0
    a10c:	f040 82d1 	bne.w	a6b2 <f_mkfs+0xc52>
			lba[0] = sz_vol; lba[1] = 0;
    a110:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a112:	9315      	str	r3, [sp, #84]	; 0x54
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
    a114:	aa14      	add	r2, sp, #80	; 0x50
			lba[0] = sz_vol; lba[1] = 0;
    a116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a118:	9316      	str	r3, [sp, #88]	; 0x58
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
    a11a:	2101      	movs	r1, #1
    a11c:	4650      	mov	r0, sl
    a11e:	f000 fb61 	bl	a7e4 <disk_ioctl>
    a122:	2800      	cmp	r0, #0
    a124:	f47f aded 	bne.w	9d02 <f_mkfs+0x2a2>
		sz_drv32 = (DWORD)sz_drv;
    a128:	9f14      	ldr	r7, [sp, #80]	; 0x50
    a12a:	2305      	movs	r3, #5
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
    a12c:	2608      	movs	r6, #8
    a12e:	f64f 423e 	movw	r2, #64574	; 0xfc3e
    a132:	fbb7 f1f6 	udiv	r1, r7, r6
    a136:	4291      	cmp	r1, r2
    a138:	f200 82a2 	bhi.w	a680 <f_mkfs+0xc20>
    a13c:	f44f 7200 	mov.w	r2, #512	; 0x200
    a140:	2100      	movs	r1, #0
    a142:	4658      	mov	r0, fp
    a144:	f008 f8de 	bl	12304 <memset>
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
    a148:	f50b 72fb 	add.w	r2, fp, #502	; 0x1f6
    a14c:	9200      	str	r2, [sp, #0]
    a14e:	223f      	movs	r2, #63	; 0x3f
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
    a150:	f04f 0964 	mov.w	r9, #100	; 0x64
    a154:	f50b 74e3 	add.w	r4, fp, #454	; 0x1c6
    a158:	fbb7 f3f9 	udiv	r3, r7, r9
			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
    a15c:	4691      	mov	r9, r2
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
    a15e:	9301      	str	r3, [sp, #4]
    a160:	ab15      	add	r3, sp, #84	; 0x54
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
    a162:	42ba      	cmp	r2, r7
    a164:	f080 8296 	bcs.w	a694 <f_mkfs+0xc34>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
    a168:	f853 5b04 	ldr.w	r5, [r3], #4
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
    a16c:	2d64      	cmp	r5, #100	; 0x64
    a16e:	d803      	bhi.n	a178 <f_mkfs+0x718>
    a170:	bf16      	itet	ne
    a172:	9901      	ldrne	r1, [sp, #4]
    a174:	463d      	moveq	r5, r7
    a176:	434d      	mulne	r5, r1
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
    a178:	1950      	adds	r0, r2, r5
    a17a:	bf2c      	ite	cs
    a17c:	2101      	movcs	r1, #1
    a17e:	2100      	movcc	r1, #0
    a180:	4287      	cmp	r7, r0
    a182:	d302      	bcc.n	a18a <f_mkfs+0x72a>
    a184:	2900      	cmp	r1, #0
    a186:	f000 8282 	beq.w	a68e <f_mkfs+0xc2e>
    a18a:	1abd      	subs	r5, r7, r2
			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
    a18c:	4611      	mov	r1, r2
    a18e:	4620      	mov	r0, r4
    a190:	9302      	str	r3, [sp, #8]
    a192:	f006 f80b 	bl	101ac <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
    a196:	4629      	mov	r1, r5
    a198:	1d20      	adds	r0, r4, #4
    a19a:	f006 f807 	bl	101ac <st_dword>
			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
    a19e:	fbb2 f1f9 	udiv	r1, r2, r9
    a1a2:	fbb1 f0f6 	udiv	r0, r1, r6
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
    a1a6:	fb06 1c10 	mls	ip, r6, r0, r1
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
    a1aa:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
    a1ae:	1a51      	subs	r1, r2, r1
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
    a1b0:	f804 cc07 	strb.w	ip, [r4, #-7]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
    a1b4:	ea4f 0c90 	mov.w	ip, r0, lsr #2
    a1b8:	f02c 0c3f 	bic.w	ip, ip, #63	; 0x3f
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
    a1bc:	3101      	adds	r1, #1
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
    a1be:	ea41 010c 	orr.w	r1, r1, ip
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
    a1c2:	442a      	add	r2, r5
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
    a1c4:	f804 1c06 	strb.w	r1, [r4, #-6]
			pte[PTE_StCyl] = (BYTE)cy;
    a1c8:	f804 0c05 	strb.w	r0, [r4, #-5]
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
    a1cc:	1e51      	subs	r1, r2, #1
    a1ce:	fbb1 f5f9 	udiv	r5, r1, r9
    a1d2:	fbb5 f0f6 	udiv	r0, r5, r6
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
    a1d6:	fb06 5c10 	mls	ip, r6, r0, r5
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
    a1da:	ebc5 1585 	rsb	r5, r5, r5, lsl #6
    a1de:	1b49      	subs	r1, r1, r5
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
    a1e0:	9b00      	ldr	r3, [sp, #0]
			pte[PTE_System] = sys;					/* System type */
    a1e2:	f804 8c04 	strb.w	r8, [r4, #-4]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
    a1e6:	0885      	lsrs	r5, r0, #2
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
    a1e8:	3101      	adds	r1, #1
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
    a1ea:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
    a1ee:	4329      	orrs	r1, r5
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
    a1f0:	42a3      	cmp	r3, r4
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
    a1f2:	f804 cc03 	strb.w	ip, [r4, #-3]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
    a1f6:	f804 1c02 	strb.w	r1, [r4, #-2]
			pte[PTE_EdCyl] = (BYTE)cy;
    a1fa:	f804 0c01 	strb.w	r0, [r4, #-1]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
    a1fe:	f000 8249 	beq.w	a694 <f_mkfs+0xc34>
    a202:	9b02      	ldr	r3, [sp, #8]
    a204:	3410      	adds	r4, #16
    a206:	2a00      	cmp	r2, #0
    a208:	d1ab      	bne.n	a162 <f_mkfs+0x702>
    a20a:	e243      	b.n	a694 <f_mkfs+0xc34>
    a20c:	000147c2 	.word	0x000147c2
			if (fsty == FS_FAT32) {	/* FAT32 volume */
    a210:	2b03      	cmp	r3, #3
    a212:	d156      	bne.n	a2c2 <f_mkfs+0x862>
				if (pau == 0) {	/* AU auto-selection */
    a214:	9b00      	ldr	r3, [sp, #0]
    a216:	2b00      	cmp	r3, #0
    a218:	d150      	bne.n	a2bc <f_mkfs+0x85c>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
    a21a:	4a54      	ldr	r2, [pc, #336]	; (a36c <f_mkfs+0x90c>)
    a21c:	0c79      	lsrs	r1, r7, #17
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
    a21e:	2401      	movs	r4, #1
    a220:	f832 3b02 	ldrh.w	r3, [r2], #2
    a224:	b10b      	cbz	r3, a22a <f_mkfs+0x7ca>
    a226:	428b      	cmp	r3, r1
    a228:	d946      	bls.n	a2b8 <f_mkfs+0x858>
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
    a22a:	fbb7 f3f4 	udiv	r3, r7, r4
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
    a22e:	009a      	lsls	r2, r3, #2
    a230:	f202 2207 	addw	r2, r2, #519	; 0x207
    a234:	0a52      	lsrs	r2, r2, #9
    a236:	9203      	str	r2, [sp, #12]
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
    a238:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
    a23c:	4a4c      	ldr	r2, [pc, #304]	; (a370 <f_mkfs+0x910>)
    a23e:	3bf6      	subs	r3, #246	; 0xf6
    a240:	4293      	cmp	r3, r2
    a242:	f200 8091 	bhi.w	a368 <f_mkfs+0x908>
				sz_dir = 0;		/* No static directory */
    a246:	2300      	movs	r3, #0
    a248:	9309      	str	r3, [sp, #36]	; 0x24
				sz_rsv = 32;	/* Number of reserved sectors */
    a24a:	f04f 0920 	mov.w	r9, #32
    a24e:	2503      	movs	r5, #3
			b_fat = b_vol + sz_rsv;						/* FAT base */
    a250:	9b01      	ldr	r3, [sp, #4]
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
    a252:	9912      	ldr	r1, [sp, #72]	; 0x48
			b_fat = b_vol + sz_rsv;						/* FAT base */
    a254:	eb03 0609 	add.w	r6, r3, r9
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
    a258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    a25c:	fb02 6203 	mla	r2, r2, r3, r6
    a260:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a262:	441a      	add	r2, r3
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
    a264:	1e4b      	subs	r3, r1, #1
    a266:	4413      	add	r3, r2
    a268:	4249      	negs	r1, r1
    a26a:	400b      	ands	r3, r1
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
    a26c:	2d03      	cmp	r5, #3
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
    a26e:	eba3 0302 	sub.w	r3, r3, r2
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
    a272:	d150      	bne.n	a316 <f_mkfs+0x8b6>
				sz_rsv += n; b_fat += n;
    a274:	4499      	add	r9, r3
    a276:	441e      	add	r6, r3
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
    a278:	9b01      	ldr	r3, [sp, #4]
    a27a:	ebc3 1304 	rsb	r3, r3, r4, lsl #4
    a27e:	441a      	add	r2, r3
    a280:	4297      	cmp	r7, r2
    a282:	d371      	bcc.n	a368 <f_mkfs+0x908>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
    a284:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a286:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    a28a:	1afb      	subs	r3, r7, r3
    a28c:	eba3 0309 	sub.w	r3, r3, r9
			if (fsty == FS_FAT32) {
    a290:	2d03      	cmp	r5, #3
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
    a292:	fb01 3312 	mls	r3, r1, r2, r3
    a296:	fbb3 f3f4 	udiv	r3, r3, r4
    a29a:	9307      	str	r3, [sp, #28]
			if (fsty == FS_FAT32) {
    a29c:	d14d      	bne.n	a33a <f_mkfs+0x8da>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
    a29e:	9a07      	ldr	r2, [sp, #28]
    a2a0:	f64f 73f5 	movw	r3, #65525	; 0xfff5
    a2a4:	429a      	cmp	r2, r3
    a2a6:	d86c      	bhi.n	a382 <f_mkfs+0x922>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
    a2a8:	9b00      	ldr	r3, [sp, #0]
    a2aa:	2b00      	cmp	r3, #0
    a2ac:	d15c      	bne.n	a368 <f_mkfs+0x908>
    a2ae:	2c01      	cmp	r4, #1
    a2b0:	d95a      	bls.n	a368 <f_mkfs+0x908>
    a2b2:	0863      	lsrs	r3, r4, #1
    a2b4:	9300      	str	r3, [sp, #0]
    a2b6:	e7ad      	b.n	a214 <f_mkfs+0x7b4>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
    a2b8:	0064      	lsls	r4, r4, #1
    a2ba:	e7b1      	b.n	a220 <f_mkfs+0x7c0>
    a2bc:	9c00      	ldr	r4, [sp, #0]
    a2be:	e7b4      	b.n	a22a <f_mkfs+0x7ca>
    a2c0:	9300      	str	r3, [sp, #0]
				if (pau == 0) {	/* au auto-selection */
    a2c2:	9b00      	ldr	r3, [sp, #0]
    a2c4:	bb2b      	cbnz	r3, a312 <f_mkfs+0x8b2>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
    a2c6:	4a2b      	ldr	r2, [pc, #172]	; (a374 <f_mkfs+0x914>)
    a2c8:	0b39      	lsrs	r1, r7, #12
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
    a2ca:	2401      	movs	r4, #1
    a2cc:	f832 3b02 	ldrh.w	r3, [r2], #2
    a2d0:	b10b      	cbz	r3, a2d6 <f_mkfs+0x876>
    a2d2:	428b      	cmp	r3, r1
    a2d4:	d91b      	bls.n	a30e <f_mkfs+0x8ae>
				if (n_clst > MAX_FAT12) {
    a2d6:	f640 72f5 	movw	r2, #4085	; 0xff5
				n_clst = (DWORD)sz_vol / pau;
    a2da:	fbb7 f3f4 	udiv	r3, r7, r4
				if (n_clst > MAX_FAT12) {
    a2de:	4293      	cmp	r3, r2
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
    a2e0:	bf9b      	ittet	ls
    a2e2:	eb03 0343 	addls.w	r3, r3, r3, lsl #1
    a2e6:	3301      	addls	r3, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
    a2e8:	3302      	addhi	r3, #2
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
    a2ea:	085b      	lsrls	r3, r3, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
    a2ec:	bf8c      	ite	hi
    a2ee:	005b      	lslhi	r3, r3, #1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
    a2f0:	3303      	addls	r3, #3
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
    a2f2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
    a2f6:	ea4f 2353 	mov.w	r3, r3, lsr #9
    a2fa:	9303      	str	r3, [sp, #12]
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
    a2fc:	f3c8 1316 	ubfx	r3, r8, #4, #23
    a300:	bf8c      	ite	hi
    a302:	2502      	movhi	r5, #2
					fsty = FS_FAT12;
    a304:	2501      	movls	r5, #1
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
    a306:	9309      	str	r3, [sp, #36]	; 0x24
				sz_rsv = 1;						/* Number of reserved sectors */
    a308:	f04f 0901 	mov.w	r9, #1
    a30c:	e7a0      	b.n	a250 <f_mkfs+0x7f0>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
    a30e:	0064      	lsls	r4, r4, #1
    a310:	e7dc      	b.n	a2cc <f_mkfs+0x86c>
    a312:	9c00      	ldr	r4, [sp, #0]
    a314:	e7df      	b.n	a2d6 <f_mkfs+0x876>
				if (n % n_fat) {	/* Adjust fractional error if needed */
    a316:	9802      	ldr	r0, [sp, #8]
    a318:	9902      	ldr	r1, [sp, #8]
    a31a:	fbb3 f1f1 	udiv	r1, r3, r1
    a31e:	fb00 3111 	mls	r1, r0, r1, r3
    a322:	b119      	cbz	r1, a32c <f_mkfs+0x8cc>
					n--; sz_rsv++; b_fat++;
    a324:	3b01      	subs	r3, #1
    a326:	f109 0901 	add.w	r9, r9, #1
    a32a:	3601      	adds	r6, #1
				sz_fat += n / n_fat;
    a32c:	9902      	ldr	r1, [sp, #8]
    a32e:	fbb3 f3f1 	udiv	r3, r3, r1
    a332:	9903      	ldr	r1, [sp, #12]
    a334:	4419      	add	r1, r3
    a336:	9103      	str	r1, [sp, #12]
    a338:	e79e      	b.n	a278 <f_mkfs+0x818>
			if (fsty == FS_FAT16) {
    a33a:	2d02      	cmp	r5, #2
    a33c:	f040 816a 	bne.w	a614 <f_mkfs+0xbb4>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
    a340:	9a07      	ldr	r2, [sp, #28]
    a342:	f64f 73f5 	movw	r3, #65525	; 0xfff5
    a346:	429a      	cmp	r2, r3
    a348:	d916      	bls.n	a378 <f_mkfs+0x918>
					if (sz_au == 0 && (pau * 2) <= 64) {
    a34a:	9b00      	ldr	r3, [sp, #0]
    a34c:	b913      	cbnz	r3, a354 <f_mkfs+0x8f4>
    a34e:	0063      	lsls	r3, r4, #1
    a350:	2b40      	cmp	r3, #64	; 0x40
    a352:	d9b5      	bls.n	a2c0 <f_mkfs+0x860>
					if ((fsopt & FM_FAT32)) {
    a354:	9b04      	ldr	r3, [sp, #16]
    a356:	079b      	lsls	r3, r3, #30
    a358:	f53f af5c 	bmi.w	a214 <f_mkfs+0x7b4>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
    a35c:	9b00      	ldr	r3, [sp, #0]
    a35e:	b91b      	cbnz	r3, a368 <f_mkfs+0x908>
    a360:	0063      	lsls	r3, r4, #1
    a362:	2b80      	cmp	r3, #128	; 0x80
    a364:	9300      	str	r3, [sp, #0]
    a366:	d9ac      	bls.n	a2c2 <f_mkfs+0x862>
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
    a368:	200e      	movs	r0, #14
    a36a:	e1aa      	b.n	a6c2 <f_mkfs+0xc62>
    a36c:	0001351e 	.word	0x0001351e
    a370:	0ffeffff 	.word	0x0ffeffff
    a374:	00013510 	.word	0x00013510
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
    a378:	9a07      	ldr	r2, [sp, #28]
    a37a:	f640 73f5 	movw	r3, #4085	; 0xff5
    a37e:	429a      	cmp	r2, r3
    a380:	d9ec      	bls.n	a35c <f_mkfs+0x8fc>
    a382:	f44f 7200 	mov.w	r2, #512	; 0x200
    a386:	2100      	movs	r1, #0
    a388:	4658      	mov	r0, fp
    a38a:	f007 ffbb 	bl	12304 <memset>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    a38e:	4bd3      	ldr	r3, [pc, #844]	; (a6dc <f_mkfs+0xc7c>)
	*ptr++ = (BYTE)val; val >>= 8;
    a390:	f88b 900e 	strb.w	r9, [fp, #14]
    a394:	681a      	ldr	r2, [r3, #0]
    a396:	f8cb 2000 	str.w	r2, [fp]
    a39a:	685a      	ldr	r2, [r3, #4]
    a39c:	f8cb 2004 	str.w	r2, [fp, #4]
    a3a0:	891a      	ldrh	r2, [r3, #8]
    a3a2:	7a9b      	ldrb	r3, [r3, #10]
    a3a4:	f88b 300a 	strb.w	r3, [fp, #10]
    a3a8:	2d03      	cmp	r5, #3
    a3aa:	f04f 0300 	mov.w	r3, #0
    a3ae:	bf08      	it	eq
    a3b0:	f04f 0800 	moveq.w	r8, #0
    a3b4:	f88b 300b 	strb.w	r3, [fp, #11]
	*ptr++ = (BYTE)val;
    a3b8:	2302      	movs	r3, #2
    a3ba:	f88b 300c 	strb.w	r3, [fp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
    a3be:	f3c9 2907 	ubfx	r9, r9, #8, #8
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
    a3c2:	9b02      	ldr	r3, [sp, #8]
	*ptr++ = (BYTE)val; val >>= 8;
    a3c4:	f88b 8011 	strb.w	r8, [fp, #17]
		if (sz_vol < 0x10000) {
    a3c8:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
	*ptr++ = (BYTE)val; val >>= 8;
    a3cc:	f3c8 2807 	ubfx	r8, r8, #8, #8
    a3d0:	f8ab 2008 	strh.w	r2, [fp, #8]
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
    a3d4:	f88b 400d 	strb.w	r4, [fp, #13]
	*ptr++ = (BYTE)val;
    a3d8:	f88b 900f 	strb.w	r9, [fp, #15]
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
    a3dc:	f88b 3010 	strb.w	r3, [fp, #16]
	*ptr++ = (BYTE)val;
    a3e0:	f88b 8012 	strb.w	r8, [fp, #18]
		if (sz_vol < 0x10000) {
    a3e4:	f080 811e 	bcs.w	a624 <f_mkfs+0xbc4>
	*ptr++ = (BYTE)val; val >>= 8;
    a3e8:	f88b 7013 	strb.w	r7, [fp, #19]
    a3ec:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
    a3f0:	f88b 7014 	strb.w	r7, [fp, #20]
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
    a3f4:	23f8      	movs	r3, #248	; 0xf8
    a3f6:	f88b 3015 	strb.w	r3, [fp, #21]
	*ptr++ = (BYTE)val; val >>= 8;
    a3fa:	233f      	movs	r3, #63	; 0x3f
	*ptr++ = (BYTE)val;
    a3fc:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
    a3fe:	f88b 3018 	strb.w	r3, [fp, #24]
    a402:	23ff      	movs	r3, #255	; 0xff
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
    a404:	9901      	ldr	r1, [sp, #4]
	*ptr++ = (BYTE)val;
    a406:	f88b 2019 	strb.w	r2, [fp, #25]
	*ptr++ = (BYTE)val; val >>= 8;
    a40a:	f88b 301a 	strb.w	r3, [fp, #26]
	*ptr++ = (BYTE)val;
    a40e:	f88b 201b 	strb.w	r2, [fp, #27]
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
    a412:	f10b 001c 	add.w	r0, fp, #28
    a416:	f005 fec9 	bl	101ac <st_dword>
		if (fsty == FS_FAT32) {
    a41a:	2d03      	cmp	r5, #3
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
    a41c:	9906      	ldr	r1, [sp, #24]
		if (fsty == FS_FAT32) {
    a41e:	f040 8107 	bne.w	a630 <f_mkfs+0xbd0>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
    a422:	f10b 0043 	add.w	r0, fp, #67	; 0x43
    a426:	f005 fec1 	bl	101ac <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
    a42a:	9903      	ldr	r1, [sp, #12]
    a42c:	f10b 0024 	add.w	r0, fp, #36	; 0x24
    a430:	f005 febc 	bl	101ac <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
    a434:	2302      	movs	r3, #2
    a436:	f88b 302c 	strb.w	r3, [fp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
    a43a:	2301      	movs	r3, #1
    a43c:	f88b 3030 	strb.w	r3, [fp, #48]	; 0x30
    a440:	2306      	movs	r3, #6
    a442:	f88b 3032 	strb.w	r3, [fp, #50]	; 0x32
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
    a446:	2380      	movs	r3, #128	; 0x80
    a448:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
    a44c:	2329      	movs	r3, #41	; 0x29
    a44e:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
    a452:	4ba3      	ldr	r3, [pc, #652]	; (a6e0 <f_mkfs+0xc80>)
	*ptr++ = (BYTE)val; val >>= 8;
    a454:	f88b 202d 	strb.w	r2, [fp, #45]	; 0x2d
	*ptr++ = (BYTE)val; val >>= 8;
    a458:	f88b 202e 	strb.w	r2, [fp, #46]	; 0x2e
	*ptr++ = (BYTE)val;
    a45c:	f88b 202f 	strb.w	r2, [fp, #47]	; 0x2f
	*ptr++ = (BYTE)val;
    a460:	f88b 2031 	strb.w	r2, [fp, #49]	; 0x31
    a464:	f88b 2033 	strb.w	r2, [fp, #51]	; 0x33
    a468:	f103 0110 	add.w	r1, r3, #16
    a46c:	f10b 0247 	add.w	r2, fp, #71	; 0x47
    a470:	f853 0b04 	ldr.w	r0, [r3], #4
    a474:	f842 0b04 	str.w	r0, [r2], #4
    a478:	428b      	cmp	r3, r1
    a47a:	d1f9      	bne.n	a470 <f_mkfs+0xa10>
    a47c:	8819      	ldrh	r1, [r3, #0]
    a47e:	789b      	ldrb	r3, [r3, #2]
    a480:	8011      	strh	r1, [r2, #0]
    a482:	7093      	strb	r3, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
    a484:	f04f 0955 	mov.w	r9, #85	; 0x55
	*ptr++ = (BYTE)val;
    a488:	f04f 08aa 	mov.w	r8, #170	; 0xaa
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
    a48c:	9a01      	ldr	r2, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
    a48e:	f88b 91fe 	strb.w	r9, [fp, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
    a492:	f88b 81ff 	strb.w	r8, [fp, #511]	; 0x1ff
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
    a496:	2301      	movs	r3, #1
    a498:	4659      	mov	r1, fp
    a49a:	4650      	mov	r0, sl
    a49c:	f000 f980 	bl	a7a0 <disk_write>
    a4a0:	4607      	mov	r7, r0
    a4a2:	2800      	cmp	r0, #0
    a4a4:	f47f ac2d 	bne.w	9d02 <f_mkfs+0x2a2>
		if (fsty == FS_FAT32) {
    a4a8:	2d03      	cmp	r5, #3
    a4aa:	d141      	bne.n	a530 <f_mkfs+0xad0>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
    a4ac:	9a01      	ldr	r2, [sp, #4]
    a4ae:	2301      	movs	r3, #1
    a4b0:	3206      	adds	r2, #6
    a4b2:	4659      	mov	r1, fp
    a4b4:	4650      	mov	r0, sl
    a4b6:	f000 f973 	bl	a7a0 <disk_write>
__ssp_bos_icheck3(memset, void *, int)
    a4ba:	f44f 7200 	mov.w	r2, #512	; 0x200
    a4be:	4639      	mov	r1, r7
    a4c0:	4658      	mov	r0, fp
    a4c2:	f007 ff1f 	bl	12304 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
    a4c6:	2352      	movs	r3, #82	; 0x52
    a4c8:	f88b 3000 	strb.w	r3, [fp]
	*ptr++ = (BYTE)val; val >>= 8;
    a4cc:	f88b 3001 	strb.w	r3, [fp, #1]
	*ptr++ = (BYTE)val; val >>= 8;
    a4d0:	2361      	movs	r3, #97	; 0x61
    a4d2:	f88b 3002 	strb.w	r3, [fp, #2]
	*ptr++ = (BYTE)val;
    a4d6:	f88b 31e7 	strb.w	r3, [fp, #487]	; 0x1e7
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
    a4da:	9b07      	ldr	r3, [sp, #28]
	*ptr++ = (BYTE)val;
    a4dc:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
    a4de:	2172      	movs	r1, #114	; 0x72
	*ptr++ = (BYTE)val;
    a4e0:	f88b 2003 	strb.w	r2, [fp, #3]
	*ptr++ = (BYTE)val; val >>= 8;
    a4e4:	f88b 11e4 	strb.w	r1, [fp, #484]	; 0x1e4
	*ptr++ = (BYTE)val; val >>= 8;
    a4e8:	f88b 11e5 	strb.w	r1, [fp, #485]	; 0x1e5
	*ptr++ = (BYTE)val; val >>= 8;
    a4ec:	f88b 21e6 	strb.w	r2, [fp, #486]	; 0x1e6
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
    a4f0:	1e59      	subs	r1, r3, #1
    a4f2:	f50b 70f4 	add.w	r0, fp, #488	; 0x1e8
    a4f6:	f005 fe59 	bl	101ac <st_dword>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
    a4fa:	9a01      	ldr	r2, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
    a4fc:	f88b 71ed 	strb.w	r7, [fp, #493]	; 0x1ed
	*ptr++ = (BYTE)val; val >>= 8;
    a500:	2302      	movs	r3, #2
    a502:	f88b 31ec 	strb.w	r3, [fp, #492]	; 0x1ec
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
    a506:	3207      	adds	r2, #7
    a508:	2301      	movs	r3, #1
    a50a:	4659      	mov	r1, fp
	*ptr++ = (BYTE)val; val >>= 8;
    a50c:	f88b 71ee 	strb.w	r7, [fp, #494]	; 0x1ee
	*ptr++ = (BYTE)val;
    a510:	f88b 71ef 	strb.w	r7, [fp, #495]	; 0x1ef
	*ptr++ = (BYTE)val; val >>= 8;
    a514:	f88b 91fe 	strb.w	r9, [fp, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
    a518:	f88b 81ff 	strb.w	r8, [fp, #511]	; 0x1ff
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
    a51c:	4650      	mov	r0, sl
    a51e:	f000 f93f 	bl	a7a0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
    a522:	9a01      	ldr	r2, [sp, #4]
    a524:	2301      	movs	r3, #1
    a526:	441a      	add	r2, r3
    a528:	4659      	mov	r1, fp
    a52a:	4650      	mov	r0, sl
    a52c:	f000 f938 	bl	a7a0 <disk_write>
    a530:	9b08      	ldr	r3, [sp, #32]
    a532:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
    a536:	f022 0201 	bic.w	r2, r2, #1
    a53a:	2100      	movs	r1, #0
    a53c:	4658      	mov	r0, fp
    a53e:	f007 fee1 	bl	12304 <memset>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
    a542:	2d01      	cmp	r5, #1
    a544:	4b67      	ldr	r3, [pc, #412]	; (a6e4 <f_mkfs+0xc84>)
    a546:	bf18      	it	ne
    a548:	f06f 0307 	mvnne.w	r3, #7
    a54c:	9301      	str	r3, [sp, #4]
    a54e:	2300      	movs	r3, #0
    a550:	9300      	str	r3, [sp, #0]
	*ptr++ = (BYTE)val; val >>= 8;
    a552:	27ff      	movs	r7, #255	; 0xff
			if (fsty == FS_FAT32) {
    a554:	2d03      	cmp	r5, #3
    a556:	f040 8088 	bne.w	a66a <f_mkfs+0xc0a>
	*ptr++ = (BYTE)val; val >>= 8;
    a55a:	f06f 0307 	mvn.w	r3, #7
    a55e:	f88b 3000 	strb.w	r3, [fp]
	*ptr++ = (BYTE)val;
    a562:	f04f 030f 	mov.w	r3, #15
	*ptr++ = (BYTE)val; val >>= 8;
    a566:	f88b 7001 	strb.w	r7, [fp, #1]
	*ptr++ = (BYTE)val; val >>= 8;
    a56a:	f88b 7002 	strb.w	r7, [fp, #2]
	*ptr++ = (BYTE)val;
    a56e:	f88b 7003 	strb.w	r7, [fp, #3]
	*ptr++ = (BYTE)val; val >>= 8;
    a572:	f88b 7004 	strb.w	r7, [fp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
    a576:	f88b 7005 	strb.w	r7, [fp, #5]
	*ptr++ = (BYTE)val; val >>= 8;
    a57a:	f88b 7006 	strb.w	r7, [fp, #6]
	*ptr++ = (BYTE)val;
    a57e:	f88b 7007 	strb.w	r7, [fp, #7]
	*ptr++ = (BYTE)val; val >>= 8;
    a582:	f88b 7008 	strb.w	r7, [fp, #8]
	*ptr++ = (BYTE)val; val >>= 8;
    a586:	f88b 7009 	strb.w	r7, [fp, #9]
	*ptr++ = (BYTE)val; val >>= 8;
    a58a:	f88b 700a 	strb.w	r7, [fp, #10]
	*ptr++ = (BYTE)val;
    a58e:	f88b 300b 	strb.w	r3, [fp, #11]
    a592:	f8dd 800c 	ldr.w	r8, [sp, #12]
				n = (nsect > sz_buf) ? sz_buf : nsect;
    a596:	9b05      	ldr	r3, [sp, #20]
    a598:	4543      	cmp	r3, r8
    a59a:	bf28      	it	cs
    a59c:	4643      	movcs	r3, r8
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    a59e:	4659      	mov	r1, fp
    a5a0:	4632      	mov	r2, r6
    a5a2:	4650      	mov	r0, sl
				n = (nsect > sz_buf) ? sz_buf : nsect;
    a5a4:	4699      	mov	r9, r3
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    a5a6:	f000 f8fb 	bl	a7a0 <disk_write>
    a5aa:	4601      	mov	r1, r0
    a5ac:	2800      	cmp	r0, #0
    a5ae:	f47f aba8 	bne.w	9d02 <f_mkfs+0x2a2>
    a5b2:	f44f 7200 	mov.w	r2, #512	; 0x200
    a5b6:	4658      	mov	r0, fp
    a5b8:	f007 fea4 	bl	12304 <memset>
			} while (nsect);
    a5bc:	ebb8 0809 	subs.w	r8, r8, r9
				sect += n; nsect -= n;
    a5c0:	444e      	add	r6, r9
			} while (nsect);
    a5c2:	d1e8      	bne.n	a596 <f_mkfs+0xb36>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
    a5c4:	9b00      	ldr	r3, [sp, #0]
    a5c6:	2201      	movs	r2, #1
    a5c8:	9200      	str	r2, [sp, #0]
    a5ca:	9a02      	ldr	r2, [sp, #8]
    a5cc:	3301      	adds	r3, #1
    a5ce:	429a      	cmp	r2, r3
    a5d0:	d8c0      	bhi.n	a554 <f_mkfs+0xaf4>
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
    a5d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a5d4:	2d03      	cmp	r5, #3
    a5d6:	bf18      	it	ne
    a5d8:	461c      	movne	r4, r3
			n = (nsect > sz_buf) ? sz_buf : nsect;
    a5da:	9b05      	ldr	r3, [sp, #20]
    a5dc:	42a3      	cmp	r3, r4
    a5de:	bf28      	it	cs
    a5e0:	4623      	movcs	r3, r4
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    a5e2:	4632      	mov	r2, r6
    a5e4:	4659      	mov	r1, fp
    a5e6:	4650      	mov	r0, sl
			n = (nsect > sz_buf) ? sz_buf : nsect;
    a5e8:	461f      	mov	r7, r3
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    a5ea:	f000 f8d9 	bl	a7a0 <disk_write>
    a5ee:	2800      	cmp	r0, #0
    a5f0:	f47f ab87 	bne.w	9d02 <f_mkfs+0x2a2>
		} while (nsect);
    a5f4:	1be4      	subs	r4, r4, r7
			sect += n; nsect -= n;
    a5f6:	443e      	add	r6, r7
		} while (nsect);
    a5f8:	d1ef      	bne.n	a5da <f_mkfs+0xb7a>
		if (fsty == FS_FAT32) {
    a5fa:	2d03      	cmp	r5, #3
    a5fc:	d03a      	beq.n	a674 <f_mkfs+0xc14>
			if (sz_vol >= 0x10000) {
    a5fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    a604:	d239      	bcs.n	a67a <f_mkfs+0xc1a>
				sys = (fsty == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 : FAT12 */
    a606:	2d02      	cmp	r5, #2
    a608:	bf0c      	ite	eq
    a60a:	f04f 0804 	moveq.w	r8, #4
    a60e:	f04f 0801 	movne.w	r8, #1
    a612:	e579      	b.n	a108 <f_mkfs+0x6a8>
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
    a614:	9a07      	ldr	r2, [sp, #28]
    a616:	f640 73f5 	movw	r3, #4085	; 0xff5
    a61a:	429a      	cmp	r2, r3
    a61c:	f63f aea4 	bhi.w	a368 <f_mkfs+0x908>
    a620:	2501      	movs	r5, #1
    a622:	e6ae      	b.n	a382 <f_mkfs+0x922>
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
    a624:	4639      	mov	r1, r7
    a626:	f10b 0020 	add.w	r0, fp, #32
    a62a:	f005 fdbf 	bl	101ac <st_dword>
    a62e:	e6e1      	b.n	a3f4 <f_mkfs+0x994>
			st_dword(buf + BS_VolID, vsn);				/* VSN */
    a630:	f10b 0027 	add.w	r0, fp, #39	; 0x27
    a634:	f005 fdba 	bl	101ac <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
    a638:	9b03      	ldr	r3, [sp, #12]
    a63a:	f88b 3016 	strb.w	r3, [fp, #22]
    a63e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	*ptr++ = (BYTE)val;
    a642:	f88b 3017 	strb.w	r3, [fp, #23]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
    a646:	2380      	movs	r3, #128	; 0x80
    a648:	f88b 3024 	strb.w	r3, [fp, #36]	; 0x24
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
    a64c:	2329      	movs	r3, #41	; 0x29
    a64e:	f88b 3026 	strb.w	r3, [fp, #38]	; 0x26
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    a652:	4b25      	ldr	r3, [pc, #148]	; (a6e8 <f_mkfs+0xc88>)
    a654:	f10b 022b 	add.w	r2, fp, #43	; 0x2b
    a658:	f103 0110 	add.w	r1, r3, #16
    a65c:	f853 0b04 	ldr.w	r0, [r3], #4
    a660:	f842 0b04 	str.w	r0, [r2], #4
    a664:	428b      	cmp	r3, r1
    a666:	d1f9      	bne.n	a65c <f_mkfs+0xbfc>
    a668:	e708      	b.n	a47c <f_mkfs+0xa1c>
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
    a66a:	9901      	ldr	r1, [sp, #4]
    a66c:	4658      	mov	r0, fp
    a66e:	f005 fd9d 	bl	101ac <st_dword>
    a672:	e78e      	b.n	a592 <f_mkfs+0xb32>
			sys = 0x0C;		/* FAT32X */
    a674:	f04f 080c 	mov.w	r8, #12
    a678:	e546      	b.n	a108 <f_mkfs+0x6a8>
				sys = 0x06;	/* FAT12/16 (large) */
    a67a:	f04f 0806 	mov.w	r8, #6
    a67e:	e543      	b.n	a108 <f_mkfs+0x6a8>
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
    a680:	0076      	lsls	r6, r6, #1
    a682:	3b01      	subs	r3, #1
    a684:	b2f6      	uxtb	r6, r6
    a686:	f47f ad54 	bne.w	a132 <f_mkfs+0x6d2>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
    a68a:	26ff      	movs	r6, #255	; 0xff
    a68c:	e556      	b.n	a13c <f_mkfs+0x6dc>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
    a68e:	2d00      	cmp	r5, #0
    a690:	f47f ad7c 	bne.w	a18c <f_mkfs+0x72c>
	*ptr++ = (BYTE)val; val >>= 8;
    a694:	2355      	movs	r3, #85	; 0x55
    a696:	f88b 31fe 	strb.w	r3, [fp, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
    a69a:	23aa      	movs	r3, #170	; 0xaa
    a69c:	f88b 31ff 	strb.w	r3, [fp, #511]	; 0x1ff
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
    a6a0:	2200      	movs	r2, #0
    a6a2:	2301      	movs	r3, #1
    a6a4:	4659      	mov	r1, fp
    a6a6:	4650      	mov	r0, sl
    a6a8:	f000 f87a 	bl	a7a0 <disk_write>
    a6ac:	2800      	cmp	r0, #0
    a6ae:	f47f ab28 	bne.w	9d02 <f_mkfs+0x2a2>
			fr = create_partition(pdrv, lba, sys, buf);
			if (fr != FR_OK) LEAVE_MKFS(fr);
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
    a6b2:	2200      	movs	r2, #0
    a6b4:	4611      	mov	r1, r2
    a6b6:	4650      	mov	r0, sl
    a6b8:	f000 f894 	bl	a7e4 <disk_ioctl>
	if (vol < 0) return FR_INVALID_DRIVE;
    a6bc:	3800      	subs	r0, #0
    a6be:	bf18      	it	ne
    a6c0:	2001      	movne	r0, #1

	LEAVE_MKFS(FR_OK);
}
    a6c2:	b019      	add	sp, #100	; 0x64
    a6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
    a6c8:	200b      	movs	r0, #11
    a6ca:	e7fa      	b.n	a6c2 <f_mkfs+0xc62>
	if (ds & STA_NOINIT) return FR_NOT_READY;
    a6cc:	2003      	movs	r0, #3
    a6ce:	e7f8      	b.n	a6c2 <f_mkfs+0xc62>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
    a6d0:	200a      	movs	r0, #10
    a6d2:	e7f6      	b.n	a6c2 <f_mkfs+0xc62>
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
    a6d4:	2011      	movs	r0, #17
    a6d6:	e7f4      	b.n	a6c2 <f_mkfs+0xc62>
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
    a6d8:	2013      	movs	r0, #19
    a6da:	e7f2      	b.n	a6c2 <f_mkfs+0xc62>
    a6dc:	000147de 	.word	0x000147de
    a6e0:	000147ea 	.word	0x000147ea
    a6e4:	00fffff8 	.word	0x00fffff8
    a6e8:	000147fe 	.word	0x000147fe

0000a6ec <disk_status>:
/* Get Drive Status                                                      */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE pdrv)
{
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");
    a6ec:	2807      	cmp	r0, #7
{
    a6ee:	b510      	push	{r4, lr}
    a6f0:	4604      	mov	r4, r0
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");
    a6f2:	d908      	bls.n	a706 <disk_status+0x1a>
    a6f4:	4908      	ldr	r1, [pc, #32]	; (a718 <disk_status+0x2c>)
    a6f6:	4809      	ldr	r0, [pc, #36]	; (a71c <disk_status+0x30>)
    a6f8:	2229      	movs	r2, #41	; 0x29
    a6fa:	f004 fe64 	bl	f3c6 <printk>
    a6fe:	4806      	ldr	r0, [pc, #24]	; (a718 <disk_status+0x2c>)
    a700:	2129      	movs	r1, #41	; 0x29
    a702:	f004 ff25 	bl	f550 <assert_post_action>

	if (disk_access_status(pdrv_str[pdrv]) != 0) {
    a706:	4b06      	ldr	r3, [pc, #24]	; (a720 <disk_status+0x34>)
    a708:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    a70c:	f005 fa41 	bl	fb92 <disk_access_status>
		return STA_NOINIT;
	} else {
		return RES_OK;
	}
}
    a710:	3800      	subs	r0, #0
    a712:	bf18      	it	ne
    a714:	2001      	movne	r0, #1
    a716:	bd10      	pop	{r4, pc}
    a718:	000148bd 	.word	0x000148bd
    a71c:	00013904 	.word	0x00013904
    a720:	000134a8 	.word	0x000134a8

0000a724 <disk_initialize>:
/* Initialize a Drive                                                    */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE pdrv)
{
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");
    a724:	2807      	cmp	r0, #7
{
    a726:	b510      	push	{r4, lr}
    a728:	4604      	mov	r4, r0
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");
    a72a:	d908      	bls.n	a73e <disk_initialize+0x1a>
    a72c:	4908      	ldr	r1, [pc, #32]	; (a750 <disk_initialize+0x2c>)
    a72e:	4809      	ldr	r0, [pc, #36]	; (a754 <disk_initialize+0x30>)
    a730:	2238      	movs	r2, #56	; 0x38
    a732:	f004 fe48 	bl	f3c6 <printk>
    a736:	4806      	ldr	r0, [pc, #24]	; (a750 <disk_initialize+0x2c>)
    a738:	2138      	movs	r1, #56	; 0x38
    a73a:	f004 ff09 	bl	f550 <assert_post_action>

	if (disk_access_init(pdrv_str[pdrv]) != 0) {
    a73e:	4b06      	ldr	r3, [pc, #24]	; (a758 <disk_initialize+0x34>)
    a740:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    a744:	f005 fa17 	bl	fb76 <disk_access_init>
		return STA_NOINIT;
	} else {
		return RES_OK;
	}
}
    a748:	3800      	subs	r0, #0
    a74a:	bf18      	it	ne
    a74c:	2001      	movne	r0, #1
    a74e:	bd10      	pop	{r4, pc}
    a750:	000148bd 	.word	0x000148bd
    a754:	00013904 	.word	0x00013904
    a758:	000134a8 	.word	0x000134a8

0000a75c <disk_read>:
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");
    a75c:	2807      	cmp	r0, #7
{
    a75e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a760:	4604      	mov	r4, r0
    a762:	460d      	mov	r5, r1
    a764:	4616      	mov	r6, r2
    a766:	461f      	mov	r7, r3
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");
    a768:	d908      	bls.n	a77c <disk_read+0x20>
    a76a:	490a      	ldr	r1, [pc, #40]	; (a794 <disk_read+0x38>)
    a76c:	480a      	ldr	r0, [pc, #40]	; (a798 <disk_read+0x3c>)
    a76e:	2247      	movs	r2, #71	; 0x47
    a770:	f004 fe29 	bl	f3c6 <printk>
    a774:	4807      	ldr	r0, [pc, #28]	; (a794 <disk_read+0x38>)
    a776:	2147      	movs	r1, #71	; 0x47
    a778:	f004 feea 	bl	f550 <assert_post_action>

	if (disk_access_read(pdrv_str[pdrv], buff, sector, count) != 0) {
    a77c:	4807      	ldr	r0, [pc, #28]	; (a79c <disk_read+0x40>)
    a77e:	463b      	mov	r3, r7
    a780:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    a784:	4632      	mov	r2, r6
    a786:	4629      	mov	r1, r5
    a788:	f005 fa11 	bl	fbae <disk_access_read>
		return RES_ERROR;
	} else {
		return RES_OK;
	}

}
    a78c:	3800      	subs	r0, #0
    a78e:	bf18      	it	ne
    a790:	2001      	movne	r0, #1
    a792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a794:	000148bd 	.word	0x000148bd
    a798:	00013904 	.word	0x00013904
    a79c:	000134a8 	.word	0x000134a8

0000a7a0 <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/
DRESULT disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");
    a7a0:	2807      	cmp	r0, #7
{
    a7a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a7a4:	4604      	mov	r4, r0
    a7a6:	460d      	mov	r5, r1
    a7a8:	4616      	mov	r6, r2
    a7aa:	461f      	mov	r7, r3
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");
    a7ac:	d908      	bls.n	a7c0 <disk_write+0x20>
    a7ae:	490a      	ldr	r1, [pc, #40]	; (a7d8 <disk_write+0x38>)
    a7b0:	480a      	ldr	r0, [pc, #40]	; (a7dc <disk_write+0x3c>)
    a7b2:	2256      	movs	r2, #86	; 0x56
    a7b4:	f004 fe07 	bl	f3c6 <printk>
    a7b8:	4807      	ldr	r0, [pc, #28]	; (a7d8 <disk_write+0x38>)
    a7ba:	2156      	movs	r1, #86	; 0x56
    a7bc:	f004 fec8 	bl	f550 <assert_post_action>

	if(disk_access_write(pdrv_str[pdrv], buff, sector, count) != 0) {
    a7c0:	4807      	ldr	r0, [pc, #28]	; (a7e0 <disk_write+0x40>)
    a7c2:	463b      	mov	r3, r7
    a7c4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    a7c8:	4632      	mov	r2, r6
    a7ca:	4629      	mov	r1, r5
    a7cc:	f005 fa06 	bl	fbdc <disk_access_write>
		return RES_ERROR;
	} else {
		return RES_OK;
	}
}
    a7d0:	3800      	subs	r0, #0
    a7d2:	bf18      	it	ne
    a7d4:	2001      	movne	r0, #1
    a7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a7d8:	000148bd 	.word	0x000148bd
    a7dc:	00013904 	.word	0x00013904
    a7e0:	000134a8 	.word	0x000134a8

0000a7e4 <disk_ioctl>:
/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE pdrv, BYTE cmd, void *buff)
{
    a7e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int ret = RES_OK;
	uint32_t sector_size = 0;
    a7e6:	2300      	movs	r3, #0

	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");
    a7e8:	2807      	cmp	r0, #7
{
    a7ea:	4604      	mov	r4, r0
    a7ec:	460e      	mov	r6, r1
    a7ee:	4615      	mov	r5, r2
	uint32_t sector_size = 0;
    a7f0:	9301      	str	r3, [sp, #4]
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");
    a7f2:	d908      	bls.n	a806 <disk_ioctl+0x22>
    a7f4:	4919      	ldr	r1, [pc, #100]	; (a85c <disk_ioctl+0x78>)
    a7f6:	481a      	ldr	r0, [pc, #104]	; (a860 <disk_ioctl+0x7c>)
    a7f8:	2268      	movs	r2, #104	; 0x68
    a7fa:	f004 fde4 	bl	f3c6 <printk>
    a7fe:	4817      	ldr	r0, [pc, #92]	; (a85c <disk_ioctl+0x78>)
    a800:	2168      	movs	r1, #104	; 0x68
    a802:	f004 fea5 	bl	f550 <assert_post_action>

	switch (cmd) {
    a806:	2e03      	cmp	r6, #3
    a808:	d824      	bhi.n	a854 <disk_ioctl+0x70>
    a80a:	e8df f006 	tbb	[pc, r6]
    a80e:	0d02      	.short	0x0d02
    a810:	2010      	.short	0x2010
	case CTRL_SYNC:
		if(disk_access_ioctl(pdrv_str[pdrv],
    a812:	462a      	mov	r2, r5
    a814:	2105      	movs	r1, #5
			ret = RES_ERROR;
		}
		break;

	case GET_BLOCK_SIZE:
		if (disk_access_ioctl(pdrv_str[pdrv],
    a816:	4b13      	ldr	r3, [pc, #76]	; (a864 <disk_ioctl+0x80>)
    a818:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    a81c:	f005 f9f5 	bl	fc0a <disk_access_ioctl>
    a820:	3800      	subs	r0, #0
    a822:	bf18      	it	ne
    a824:	2001      	movne	r0, #1
    a826:	e00f      	b.n	a848 <disk_ioctl+0x64>
		if (disk_access_ioctl(pdrv_str[pdrv],
    a828:	462a      	mov	r2, r5
    a82a:	2101      	movs	r1, #1
    a82c:	e7f3      	b.n	a816 <disk_ioctl+0x32>
		if ((disk_access_ioctl(pdrv_str[pdrv],
    a82e:	4b0d      	ldr	r3, [pc, #52]	; (a864 <disk_ioctl+0x80>)
    a830:	aa01      	add	r2, sp, #4
    a832:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    a836:	2102      	movs	r1, #2
    a838:	f005 f9e7 	bl	fc0a <disk_access_ioctl>
    a83c:	b960      	cbnz	r0, a858 <disk_ioctl+0x74>
			(sector_size == (uint16_t)sector_size)) {
    a83e:	9b01      	ldr	r3, [sp, #4]
				DISK_IOCTL_GET_SECTOR_SIZE, &sector_size) == 0) &&
    a840:	b29a      	uxth	r2, r3
    a842:	4293      	cmp	r3, r2
    a844:	d108      	bne.n	a858 <disk_ioctl+0x74>
			(sector_size == (uint16_t)sector_size)) {
    a846:	802b      	strh	r3, [r5, #0]
	default:
		ret = RES_PARERR;
		break;
	}
	return ret;
}
    a848:	b2c0      	uxtb	r0, r0
    a84a:	b002      	add	sp, #8
    a84c:	bd70      	pop	{r4, r5, r6, pc}
		if (disk_access_ioctl(pdrv_str[pdrv],
    a84e:	462a      	mov	r2, r5
    a850:	2104      	movs	r1, #4
    a852:	e7e0      	b.n	a816 <disk_ioctl+0x32>
			ret = RES_ERROR;
    a854:	2004      	movs	r0, #4
    a856:	e7f7      	b.n	a848 <disk_ioctl+0x64>
    a858:	2001      	movs	r0, #1
    a85a:	e7f5      	b.n	a848 <disk_ioctl+0x64>
    a85c:	000148bd 	.word	0x000148bd
    a860:	00013904 	.word	0x00013904
    a864:	000134a8 	.word	0x000134a8

0000a868 <ff_uni2oem>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    a868:	287f      	cmp	r0, #127	; 0x7f
{
    a86a:	b510      	push	{r4, lr}
	if (uni < 0x80) {	/* ASCII? */
    a86c:	d801      	bhi.n	a872 <ff_uni2oem+0xa>
		c = (WCHAR)uni;
    a86e:	b280      	uxth	r0, r0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    a870:	bd10      	pop	{r4, pc}
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    a872:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    a876:	d213      	bcs.n	a8a0 <ff_uni2oem+0x38>
    a878:	f240 13b5 	movw	r3, #437	; 0x1b5
    a87c:	4299      	cmp	r1, r3
    a87e:	d10f      	bne.n	a8a0 <ff_uni2oem+0x38>
    a880:	4908      	ldr	r1, [pc, #32]	; (a8a4 <ff_uni2oem+0x3c>)
    a882:	2200      	movs	r2, #0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    a884:	f831 4b02 	ldrh.w	r4, [r1], #2
    a888:	4284      	cmp	r4, r0
    a88a:	b293      	uxth	r3, r2
    a88c:	d103      	bne.n	a896 <ff_uni2oem+0x2e>
			c = (c + 0x80) & 0xFF;
    a88e:	f103 0080 	add.w	r0, r3, #128	; 0x80
    a892:	b2c0      	uxtb	r0, r0
    a894:	e7ec      	b.n	a870 <ff_uni2oem+0x8>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    a896:	3201      	adds	r2, #1
    a898:	2a80      	cmp	r2, #128	; 0x80
    a89a:	d1f3      	bne.n	a884 <ff_uni2oem+0x1c>
    a89c:	4613      	mov	r3, r2
    a89e:	e7f6      	b.n	a88e <ff_uni2oem+0x26>
	WCHAR c = 0;
    a8a0:	2000      	movs	r0, #0
    a8a2:	e7e5      	b.n	a870 <ff_uni2oem+0x8>
    a8a4:	000137da 	.word	0x000137da

0000a8a8 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    a8a8:	287f      	cmp	r0, #127	; 0x7f
    a8aa:	d90d      	bls.n	a8c8 <ff_oem2uni+0x20>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    a8ac:	f240 13b5 	movw	r3, #437	; 0x1b5
    a8b0:	4299      	cmp	r1, r3
    a8b2:	d108      	bne.n	a8c6 <ff_oem2uni+0x1e>
			if (oem < 0x100) c = p[oem - 0x80];
    a8b4:	28ff      	cmp	r0, #255	; 0xff
    a8b6:	d806      	bhi.n	a8c6 <ff_oem2uni+0x1e>
    a8b8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    a8bc:	4b03      	ldr	r3, [pc, #12]	; (a8cc <ff_oem2uni+0x24>)
    a8be:	3880      	subs	r0, #128	; 0x80
    a8c0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    a8c4:	4770      	bx	lr
	WCHAR c = 0;
    a8c6:	2000      	movs	r0, #0
		}
	}

	return c;
}
    a8c8:	4770      	bx	lr
    a8ca:	bf00      	nop
    a8cc:	000137da 	.word	0x000137da

0000a8d0 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    a8d0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
{
    a8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (uni < 0x10000) {	/* Is it in BMP? */
    a8d6:	d222      	bcs.n	a91e <ff_wtoupper+0x4e>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    a8d8:	4a1f      	ldr	r2, [pc, #124]	; (a958 <ff_wtoupper+0x88>)
    a8da:	4920      	ldr	r1, [pc, #128]	; (a95c <ff_wtoupper+0x8c>)
		uc = (WORD)uni;
    a8dc:	b283      	uxth	r3, r0
		p = uc < 0x1000 ? cvt1 : cvt2;
    a8de:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    a8e2:	bf28      	it	cs
    a8e4:	460a      	movcs	r2, r1
    a8e6:	1d11      	adds	r1, r2, #4
		for (;;) {
			bc = *p++;								/* Get the block base */
    a8e8:	f831 4c04 	ldrh.w	r4, [r1, #-4]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    a8ec:	460a      	mov	r2, r1
    a8ee:	b1ac      	cbz	r4, a91c <ff_wtoupper+0x4c>
    a8f0:	42a3      	cmp	r3, r4
    a8f2:	d313      	bcc.n	a91c <ff_wtoupper+0x4c>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    a8f4:	f831 5c02 	ldrh.w	r5, [r1, #-2]
    a8f8:	0a2e      	lsrs	r6, r5, #8
    a8fa:	b2ef      	uxtb	r7, r5
			if (uc < bc + nc) {	/* In the block? */
    a8fc:	fa54 f585 	uxtab	r5, r4, r5
    a900:	42a8      	cmp	r0, r5
    a902:	da22      	bge.n	a94a <ff_wtoupper+0x7a>
				switch (cmd) {
    a904:	2e08      	cmp	r6, #8
    a906:	d809      	bhi.n	a91c <ff_wtoupper+0x4c>
    a908:	e8df f006 	tbb	[pc, r6]
    a90c:	12100a05 	.word	0x12100a05
    a910:	1a181614 	.word	0x1a181614
    a914:	1c          	.byte	0x1c
    a915:	00          	.byte	0x00
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    a916:	1b00      	subs	r0, r0, r4
    a918:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
		}
		uni = uc;
    a91c:	4618      	mov	r0, r3
	}

	return uni;
}
    a91e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    a920:	1b1b      	subs	r3, r3, r4
    a922:	f003 0301 	and.w	r3, r3, #1
    a926:	1ac0      	subs	r0, r0, r3
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    a928:	b283      	uxth	r3, r0
    a92a:	e7f7      	b.n	a91c <ff_wtoupper+0x4c>
				case 2: uc -= 16; break;			/* Shift -16 */
    a92c:	3810      	subs	r0, #16
    a92e:	e7fb      	b.n	a928 <ff_wtoupper+0x58>
				case 3:	uc -= 32; break;			/* Shift -32 */
    a930:	3820      	subs	r0, #32
    a932:	e7f9      	b.n	a928 <ff_wtoupper+0x58>
				case 4:	uc -= 48; break;			/* Shift -48 */
    a934:	3830      	subs	r0, #48	; 0x30
    a936:	e7f7      	b.n	a928 <ff_wtoupper+0x58>
				case 5:	uc -= 26; break;			/* Shift -26 */
    a938:	381a      	subs	r0, #26
    a93a:	e7f5      	b.n	a928 <ff_wtoupper+0x58>
				case 6:	uc += 8; break;				/* Shift +8 */
    a93c:	3008      	adds	r0, #8
    a93e:	e7f3      	b.n	a928 <ff_wtoupper+0x58>
				case 7: uc -= 80; break;			/* Shift -80 */
    a940:	3850      	subs	r0, #80	; 0x50
    a942:	e7f1      	b.n	a928 <ff_wtoupper+0x58>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    a944:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
    a948:	e7ee      	b.n	a928 <ff_wtoupper+0x58>
			if (cmd == 0) p += nc;	/* Skip table if needed */
    a94a:	3104      	adds	r1, #4
    a94c:	2e00      	cmp	r6, #0
    a94e:	d1cb      	bne.n	a8e8 <ff_wtoupper+0x18>
    a950:	eb02 0247 	add.w	r2, r2, r7, lsl #1
    a954:	e7c7      	b.n	a8e6 <ff_wtoupper+0x16>
    a956:	bf00      	nop
    a958:	0001352c 	.word	0x0001352c
    a95c:	0001371e 	.word	0x0001371e

0000a960 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    a960:	4b04      	ldr	r3, [pc, #16]	; (a974 <nrf52_errata_108+0x14>)
    a962:	6818      	ldr	r0, [r3, #0]
    a964:	1c42      	adds	r2, r0, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    a966:	bf04      	itt	eq
    a968:	4b03      	ldreq	r3, [pc, #12]	; (a978 <nrf52_errata_108+0x18>)
    a96a:	7818      	ldrbeq	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
    a96c:	1f83      	subs	r3, r0, #6
    a96e:	4258      	negs	r0, r3
    a970:	4158      	adcs	r0, r3
    a972:	4770      	bx	lr
    a974:	10000130 	.word	0x10000130
    a978:	f0000fe0 	.word	0xf0000fe0

0000a97c <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    a97c:	4b07      	ldr	r3, [pc, #28]	; (a99c <nrf52_errata_16+0x20>)
    a97e:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    a980:	2b06      	cmp	r3, #6
    a982:	d109      	bne.n	a998 <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    a984:	4b06      	ldr	r3, [pc, #24]	; (a9a0 <nrf52_errata_16+0x24>)
    a986:	681b      	ldr	r3, [r3, #0]
    a988:	f3c3 1303 	ubfx	r3, r3, #4, #4
    a98c:	3b03      	subs	r3, #3
    a98e:	2b04      	cmp	r3, #4
    a990:	d802      	bhi.n	a998 <nrf52_errata_16+0x1c>
    a992:	4a04      	ldr	r2, [pc, #16]	; (a9a4 <nrf52_errata_16+0x28>)
    a994:	5cd0      	ldrb	r0, [r2, r3]
    a996:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    a998:	2000      	movs	r0, #0
    #endif
}
    a99a:	4770      	bx	lr
    a99c:	f0000fe0 	.word	0xf0000fe0
    a9a0:	f0000fe8 	.word	0xf0000fe8
    a9a4:	000148f6 	.word	0x000148f6

0000a9a8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    a9a8:	b508      	push	{r3, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    a9aa:	f7ff ffd9 	bl	a960 <nrf52_errata_108>
    a9ae:	b128      	cbz	r0, a9bc <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    a9b0:	4b6b      	ldr	r3, [pc, #428]	; (ab60 <SystemInit+0x1b8>)
    a9b2:	4a6c      	ldr	r2, [pc, #432]	; (ab64 <SystemInit+0x1bc>)
    a9b4:	681b      	ldr	r3, [r3, #0]
    a9b6:	f3c3 2304 	ubfx	r3, r3, #8, #5
    a9ba:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    a9bc:	f7ff ffde 	bl	a97c <nrf52_errata_16>
    a9c0:	b110      	cbz	r0, a9c8 <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    a9c2:	4b69      	ldr	r3, [pc, #420]	; (ab68 <SystemInit+0x1c0>)
    a9c4:	4a69      	ldr	r2, [pc, #420]	; (ab6c <SystemInit+0x1c4>)
    a9c6:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    a9c8:	f7ff ffca 	bl	a960 <nrf52_errata_108>
    a9cc:	b128      	cbz	r0, a9da <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    a9ce:	4b68      	ldr	r3, [pc, #416]	; (ab70 <SystemInit+0x1c8>)
    a9d0:	4a68      	ldr	r2, [pc, #416]	; (ab74 <SystemInit+0x1cc>)
    a9d2:	681b      	ldr	r3, [r3, #0]
    a9d4:	f3c3 3342 	ubfx	r3, r3, #13, #3
    a9d8:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    a9da:	f7ff ffcf 	bl	a97c <nrf52_errata_16>
    a9de:	b120      	cbz	r0, a9ea <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    a9e0:	4a65      	ldr	r2, [pc, #404]	; (ab78 <SystemInit+0x1d0>)
    a9e2:	68d3      	ldr	r3, [r2, #12]
    a9e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    a9e8:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    a9ea:	f7ff ffb9 	bl	a960 <nrf52_errata_108>
    a9ee:	b140      	cbz	r0, aa02 <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
    a9f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a9f4:	2200      	movs	r2, #0
    a9f6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    a9fa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    a9fe:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    aa02:	f7ff ffbb 	bl	a97c <nrf52_errata_16>
    aa06:	b110      	cbz	r0, aa0e <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    aa08:	4b5c      	ldr	r3, [pc, #368]	; (ab7c <SystemInit+0x1d4>)
    aa0a:	2203      	movs	r2, #3
    aa0c:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    aa0e:	f7ff ffb5 	bl	a97c <nrf52_errata_16>
    aa12:	b140      	cbz	r0, aa26 <SystemInit+0x7e>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    aa14:	4b5a      	ldr	r3, [pc, #360]	; (ab80 <SystemInit+0x1d8>)
    aa16:	2205      	movs	r2, #5
    aa18:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    aa1a:	2201      	movs	r2, #1
    aa1c:	679a      	str	r2, [r3, #120]	; 0x78
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    aa1e:	2200      	movs	r2, #0
    aa20:	609a      	str	r2, [r3, #8]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    aa22:	223f      	movs	r2, #63	; 0x3f
    aa24:	605a      	str	r2, [r3, #4]
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    aa26:	4b57      	ldr	r3, [pc, #348]	; (ab84 <SystemInit+0x1dc>)
    aa28:	681a      	ldr	r2, [r3, #0]
    aa2a:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    aa2c:	bf0b      	itete	eq
    aa2e:	4b56      	ldreq	r3, [pc, #344]	; (ab88 <SystemInit+0x1e0>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    aa30:	4b56      	ldrne	r3, [pc, #344]	; (ab8c <SystemInit+0x1e4>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    aa32:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
    aa34:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    aa36:	bf02      	ittt	eq
    aa38:	3308      	addeq	r3, #8
    aa3a:	681b      	ldreq	r3, [r3, #0]
    aa3c:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    aa40:	2a06      	cmp	r2, #6
    aa42:	d14d      	bne.n	aae0 <SystemInit+0x138>
            {
                switch(var2)
    aa44:	3b03      	subs	r3, #3
    aa46:	2b04      	cmp	r3, #4
    aa48:	d803      	bhi.n	aa52 <SystemInit+0xaa>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    aa4a:	4a51      	ldr	r2, [pc, #324]	; (ab90 <SystemInit+0x1e8>)
    aa4c:	5cd3      	ldrb	r3, [r2, r3]
    aa4e:	2b00      	cmp	r3, #0
    aa50:	d046      	beq.n	aae0 <SystemInit+0x138>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    aa52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    aa56:	4b4f      	ldr	r3, [pc, #316]	; (ab94 <SystemInit+0x1ec>)
    aa58:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    aa5c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    aa60:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    aa64:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    aa68:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    aa6c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    aa70:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    aa74:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    aa78:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    aa7c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    aa80:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    aa84:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    aa88:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    aa8c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    aa90:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    aa94:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    aa98:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    aa9c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    aaa0:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    aaa4:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    aaa8:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    aaac:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    aab0:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    aab4:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    aab8:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    aabc:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    aac0:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    aac4:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    aac8:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    aacc:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    aad0:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    aad4:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    aad8:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    aadc:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    aae0:	f7ff ff3e 	bl	a960 <nrf52_errata_108>
    aae4:	b128      	cbz	r0, aaf2 <SystemInit+0x14a>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    aae6:	4b2c      	ldr	r3, [pc, #176]	; (ab98 <SystemInit+0x1f0>)
    aae8:	4a2c      	ldr	r2, [pc, #176]	; (ab9c <SystemInit+0x1f4>)
    aaea:	681b      	ldr	r3, [r3, #0]
    aaec:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    aaf0:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    aaf2:	f7ff ff35 	bl	a960 <nrf52_errata_108>
    aaf6:	b148      	cbz	r0, ab0c <SystemInit+0x164>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    aaf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    aafc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    ab00:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    ab02:	bf44      	itt	mi
    ab04:	f06f 0201 	mvnmi.w	r2, #1
    ab08:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ab0c:	4b1d      	ldr	r3, [pc, #116]	; (ab84 <SystemInit+0x1dc>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    ab0e:	681b      	ldr	r3, [r3, #0]
    ab10:	2b06      	cmp	r3, #6
    ab12:	d120      	bne.n	ab56 <SystemInit+0x1ae>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    ab14:	4b1d      	ldr	r3, [pc, #116]	; (ab8c <SystemInit+0x1e4>)
    ab16:	681b      	ldr	r3, [r3, #0]
    ab18:	3b03      	subs	r3, #3
    ab1a:	2b04      	cmp	r3, #4
    ab1c:	d802      	bhi.n	ab24 <SystemInit+0x17c>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    ab1e:	4a20      	ldr	r2, [pc, #128]	; (aba0 <SystemInit+0x1f8>)
    ab20:	5cd3      	ldrb	r3, [r2, r3]
    ab22:	b143      	cbz	r3, ab36 <SystemInit+0x18e>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    ab24:	4a1f      	ldr	r2, [pc, #124]	; (aba4 <SystemInit+0x1fc>)
    ab26:	6813      	ldr	r3, [r2, #0]
    ab28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    ab2c:	6013      	str	r3, [r2, #0]
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ab2e:	4b15      	ldr	r3, [pc, #84]	; (ab84 <SystemInit+0x1dc>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    ab30:	681b      	ldr	r3, [r3, #0]
    ab32:	2b06      	cmp	r3, #6
    ab34:	d10f      	bne.n	ab56 <SystemInit+0x1ae>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    ab36:	4b15      	ldr	r3, [pc, #84]	; (ab8c <SystemInit+0x1e4>)
    ab38:	681b      	ldr	r3, [r3, #0]
    ab3a:	3b03      	subs	r3, #3
    ab3c:	2b04      	cmp	r3, #4
    ab3e:	d802      	bhi.n	ab46 <SystemInit+0x19e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    ab40:	4a19      	ldr	r2, [pc, #100]	; (aba8 <SystemInit+0x200>)
    ab42:	5cd3      	ldrb	r3, [r2, r3]
    ab44:	b13b      	cbz	r3, ab56 <SystemInit+0x1ae>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    ab46:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    ab4a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    ab4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ab52:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    ab56:	4b15      	ldr	r3, [pc, #84]	; (abac <SystemInit+0x204>)
    ab58:	4a15      	ldr	r2, [pc, #84]	; (abb0 <SystemInit+0x208>)
    ab5a:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    ab5c:	bd08      	pop	{r3, pc}
    ab5e:	bf00      	nop
    ab60:	10000324 	.word	0x10000324
    ab64:	40013540 	.word	0x40013540
    ab68:	4007c074 	.word	0x4007c074
    ab6c:	baadf00d 	.word	0xbaadf00d
    ab70:	10000244 	.word	0x10000244
    ab74:	4000053c 	.word	0x4000053c
    ab78:	e000edf0 	.word	0xe000edf0
    ab7c:	400005a0 	.word	0x400005a0
    ab80:	40005610 	.word	0x40005610
    ab84:	10000130 	.word	0x10000130
    ab88:	f0000fe0 	.word	0xf0000fe0
    ab8c:	10000134 	.word	0x10000134
    ab90:	000148e7 	.word	0x000148e7
    ab94:	4000c000 	.word	0x4000c000
    ab98:	10000258 	.word	0x10000258
    ab9c:	40000ee4 	.word	0x40000ee4
    aba0:	000148ec 	.word	0x000148ec
    aba4:	4000173c 	.word	0x4000173c
    aba8:	000148f1 	.word	0x000148f1
    abac:	20000124 	.word	0x20000124
    abb0:	03d09000 	.word	0x03d09000

0000abb4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    abb4:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    abb6:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    abb8:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    abba:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    abbe:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    abc0:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    abc4:	d014      	beq.n	abf0 <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    abc6:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    abca:	fa05 f204 	lsl.w	r2, r5, r4
    abce:	ea23 0202 	bic.w	r2, r3, r2
    abd2:	e850 6f00 	ldrex	r6, [r0]
    abd6:	429e      	cmp	r6, r3
    abd8:	d104      	bne.n	abe4 <nrfx_flag32_alloc+0x30>
    abda:	e840 2c00 	strex	ip, r2, [r0]
    abde:	f1bc 0f00 	cmp.w	ip, #0
    abe2:	d1f6      	bne.n	abd2 <nrfx_flag32_alloc+0x1e>
    abe4:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    abe8:	d1e6      	bne.n	abb8 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    abea:	4802      	ldr	r0, [pc, #8]	; (abf4 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
    abec:	700c      	strb	r4, [r1, #0]
}
    abee:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    abf0:	4801      	ldr	r0, [pc, #4]	; (abf8 <nrfx_flag32_alloc+0x44>)
    abf2:	e7fc      	b.n	abee <nrfx_flag32_alloc+0x3a>
    abf4:	0bad0000 	.word	0x0bad0000
    abf8:	0bad0002 	.word	0x0bad0002

0000abfc <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    abfc:	6803      	ldr	r3, [r0, #0]
    abfe:	40cb      	lsrs	r3, r1
    ac00:	07db      	lsls	r3, r3, #31
{
    ac02:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    ac04:	d415      	bmi.n	ac32 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    ac06:	2301      	movs	r3, #1
    ac08:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    ac0c:	6803      	ldr	r3, [r0, #0]
    ac0e:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    ac12:	ea41 0203 	orr.w	r2, r1, r3
    ac16:	e850 4f00 	ldrex	r4, [r0]
    ac1a:	429c      	cmp	r4, r3
    ac1c:	d104      	bne.n	ac28 <nrfx_flag32_free+0x2c>
    ac1e:	e840 2c00 	strex	ip, r2, [r0]
    ac22:	f1bc 0f00 	cmp.w	ip, #0
    ac26:	d1f6      	bne.n	ac16 <nrfx_flag32_free+0x1a>
    ac28:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    ac2c:	d1ee      	bne.n	ac0c <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    ac2e:	4802      	ldr	r0, [pc, #8]	; (ac38 <nrfx_flag32_free+0x3c>)
}
    ac30:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    ac32:	4802      	ldr	r0, [pc, #8]	; (ac3c <nrfx_flag32_free+0x40>)
    ac34:	e7fc      	b.n	ac30 <nrfx_flag32_free+0x34>
    ac36:	bf00      	nop
    ac38:	0bad0000 	.word	0x0bad0000
    ac3c:	0bad0004 	.word	0x0bad0004

0000ac40 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    ac40:	b508      	push	{r3, lr}
    switch (domain)
    ac42:	b170      	cbz	r0, ac62 <nrf_clock_is_running.constprop.0+0x22>
    ac44:	2801      	cmp	r0, #1
    ac46:	d01b      	beq.n	ac80 <nrf_clock_is_running.constprop.0+0x40>
            NRFX_ASSERT(0);
    ac48:	4914      	ldr	r1, [pc, #80]	; (ac9c <nrf_clock_is_running.constprop.0+0x5c>)
    ac4a:	4815      	ldr	r0, [pc, #84]	; (aca0 <nrf_clock_is_running.constprop.0+0x60>)
    ac4c:	f44f 724f 	mov.w	r2, #828	; 0x33c
    ac50:	f004 fbb9 	bl	f3c6 <printk>
    ac54:	4811      	ldr	r0, [pc, #68]	; (ac9c <nrf_clock_is_running.constprop.0+0x5c>)
    ac56:	f44f 714f 	mov.w	r1, #828	; 0x33c
    ac5a:	f004 fc79 	bl	f550 <assert_post_action>
            return false;
    ac5e:	2000      	movs	r0, #0
    ac60:	e00d      	b.n	ac7e <nrf_clock_is_running.constprop.0+0x3e>
            if (p_clk_src != NULL)
    ac62:	b131      	cbz	r1, ac72 <nrf_clock_is_running.constprop.0+0x32>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    ac64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ac68:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    ac6c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    ac70:	600b      	str	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    ac72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ac76:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    ac7a:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
    ac7e:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    ac80:	b131      	cbz	r1, ac90 <nrf_clock_is_running.constprop.0+0x50>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    ac82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ac86:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    ac8a:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    ac8e:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    ac90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ac94:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    ac98:	e7ef      	b.n	ac7a <nrf_clock_is_running.constprop.0+0x3a>
    ac9a:	bf00      	nop
    ac9c:	000148fb 	.word	0x000148fb
    aca0:	00013904 	.word	0x00013904

0000aca4 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    aca4:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    aca6:	4604      	mov	r4, r0
    aca8:	b940      	cbnz	r0, acbc <nrfx_clock_init+0x18>
    acaa:	4909      	ldr	r1, [pc, #36]	; (acd0 <nrfx_clock_init+0x2c>)
    acac:	4809      	ldr	r0, [pc, #36]	; (acd4 <nrfx_clock_init+0x30>)
    acae:	22bd      	movs	r2, #189	; 0xbd
    acb0:	f004 fb89 	bl	f3c6 <printk>
    acb4:	4806      	ldr	r0, [pc, #24]	; (acd0 <nrfx_clock_init+0x2c>)
    acb6:	21bd      	movs	r1, #189	; 0xbd
    acb8:	f004 fc4a 	bl	f550 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    acbc:	4b06      	ldr	r3, [pc, #24]	; (acd8 <nrfx_clock_init+0x34>)
    acbe:	791a      	ldrb	r2, [r3, #4]
    acc0:	b922      	cbnz	r2, accc <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    acc2:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    acc4:	4805      	ldr	r0, [pc, #20]	; (acdc <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
    acc6:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    acc8:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    acca:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    accc:	4804      	ldr	r0, [pc, #16]	; (ace0 <nrfx_clock_init+0x3c>)
    return err_code;
    acce:	e7fc      	b.n	acca <nrfx_clock_init+0x26>
    acd0:	0001492f 	.word	0x0001492f
    acd4:	00013904 	.word	0x00013904
    acd8:	20000b20 	.word	0x20000b20
    acdc:	0bad0000 	.word	0x0bad0000
    ace0:	0bad000c 	.word	0x0bad000c

0000ace4 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    ace4:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    ace6:	4b0a      	ldr	r3, [pc, #40]	; (ad10 <nrfx_clock_enable+0x2c>)
    ace8:	791b      	ldrb	r3, [r3, #4]
    acea:	b943      	cbnz	r3, acfe <nrfx_clock_enable+0x1a>
    acec:	4909      	ldr	r1, [pc, #36]	; (ad14 <nrfx_clock_enable+0x30>)
    acee:	480a      	ldr	r0, [pc, #40]	; (ad18 <nrfx_clock_enable+0x34>)
    acf0:	22d6      	movs	r2, #214	; 0xd6
    acf2:	f004 fb68 	bl	f3c6 <printk>
    acf6:	4807      	ldr	r0, [pc, #28]	; (ad14 <nrfx_clock_enable+0x30>)
    acf8:	21d6      	movs	r1, #214	; 0xd6
    acfa:	f004 fc29 	bl	f550 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    acfe:	2000      	movs	r0, #0
    ad00:	f7fa fe08 	bl	5914 <arch_irq_is_enabled>
    ad04:	b918      	cbnz	r0, ad0e <nrfx_clock_enable+0x2a>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    ad06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    ad0a:	f7fa bddf 	b.w	58cc <arch_irq_enable>
    ad0e:	bd08      	pop	{r3, pc}
    ad10:	20000b20 	.word	0x20000b20
    ad14:	0001492f 	.word	0x0001492f
    ad18:	00013904 	.word	0x00013904

0000ad1c <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    ad1c:	4b2b      	ldr	r3, [pc, #172]	; (adcc <nrfx_clock_start+0xb0>)
    ad1e:	791b      	ldrb	r3, [r3, #4]
{
    ad20:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ad22:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    ad24:	b953      	cbnz	r3, ad3c <nrfx_clock_start+0x20>
    ad26:	492a      	ldr	r1, [pc, #168]	; (add0 <nrfx_clock_start+0xb4>)
    ad28:	482a      	ldr	r0, [pc, #168]	; (add4 <nrfx_clock_start+0xb8>)
    ad2a:	f44f 7289 	mov.w	r2, #274	; 0x112
    ad2e:	f004 fb4a 	bl	f3c6 <printk>
    ad32:	4827      	ldr	r0, [pc, #156]	; (add0 <nrfx_clock_start+0xb4>)
    ad34:	f44f 7189 	mov.w	r1, #274	; 0x112
    ad38:	f004 fc0a 	bl	f550 <assert_post_action>
    switch (domain)
    ad3c:	b16c      	cbz	r4, ad5a <nrfx_clock_start+0x3e>
    ad3e:	2c01      	cmp	r4, #1
    ad40:	d039      	beq.n	adb6 <nrfx_clock_start+0x9a>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    ad42:	4923      	ldr	r1, [pc, #140]	; (add0 <nrfx_clock_start+0xb4>)
    ad44:	4823      	ldr	r0, [pc, #140]	; (add4 <nrfx_clock_start+0xb8>)
    ad46:	f44f 72a2 	mov.w	r2, #324	; 0x144
    ad4a:	f004 fb3c 	bl	f3c6 <printk>
    ad4e:	4820      	ldr	r0, [pc, #128]	; (add0 <nrfx_clock_start+0xb4>)
    ad50:	f44f 71a2 	mov.w	r1, #324	; 0x144
    ad54:	f004 fbfc 	bl	f550 <assert_post_action>
            break;
    }
}
    ad58:	e029      	b.n	adae <nrfx_clock_start+0x92>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    ad5a:	a901      	add	r1, sp, #4
    ad5c:	4620      	mov	r0, r4
    ad5e:	f7ff ff6f 	bl	ac40 <nrf_clock_is_running.constprop.0>
    ad62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ad66:	b320      	cbz	r0, adb2 <nrfx_clock_start+0x96>
    ad68:	9a01      	ldr	r2, [sp, #4]
    ad6a:	2a01      	cmp	r2, #1
    ad6c:	d121      	bne.n	adb2 <nrfx_clock_start+0x96>
    p_reg->LFCLKSRC = (uint32_t)(source);
    ad6e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ad72:	4b19      	ldr	r3, [pc, #100]	; (add8 <nrfx_clock_start+0xbc>)
    ad74:	2200      	movs	r2, #0
    ad76:	601a      	str	r2, [r3, #0]
    ad78:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    ad7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ad7e:	2202      	movs	r2, #2
    ad80:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
    ad84:	4a15      	ldr	r2, [pc, #84]	; (addc <nrfx_clock_start+0xc0>)
    ad86:	68d0      	ldr	r0, [r2, #12]
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    ad88:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
    ad8c:	60d3      	str	r3, [r2, #12]
    dwt_ctrl = DWT->CTRL;
    ad8e:	4b14      	ldr	r3, [pc, #80]	; (ade0 <nrfx_clock_start+0xc4>)
    ad90:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    ad92:	f044 0101 	orr.w	r1, r4, #1
    ad96:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
    ad98:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    ad9a:	6859      	ldr	r1, [r3, #4]
    ad9c:	1b49      	subs	r1, r1, r5
    ad9e:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
    ada2:	d3fa      	bcc.n	ad9a <nrfx_clock_start+0x7e>
    DWT->CTRL = dwt_ctrl;
    ada4:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ada6:	4b0f      	ldr	r3, [pc, #60]	; (ade4 <nrfx_clock_start+0xc8>)
    CoreDebug->DEMCR = core_debug;
    ada8:	60d0      	str	r0, [r2, #12]
    adaa:	2201      	movs	r2, #1
    adac:	601a      	str	r2, [r3, #0]
}
    adae:	b003      	add	sp, #12
    adb0:	bd30      	pop	{r4, r5, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    adb2:	2200      	movs	r2, #0
    adb4:	e7db      	b.n	ad6e <nrfx_clock_start+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    adb6:	4b0c      	ldr	r3, [pc, #48]	; (ade8 <nrfx_clock_start+0xcc>)
    adb8:	2200      	movs	r2, #0
    adba:	601a      	str	r2, [r3, #0]
    adbc:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    adbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    adc2:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    adc6:	601c      	str	r4, [r3, #0]
}
    adc8:	e7f1      	b.n	adae <nrfx_clock_start+0x92>
    adca:	bf00      	nop
    adcc:	20000b20 	.word	0x20000b20
    add0:	0001492f 	.word	0x0001492f
    add4:	00013904 	.word	0x00013904
    add8:	40000104 	.word	0x40000104
    addc:	e000edf0 	.word	0xe000edf0
    ade0:	e0001000 	.word	0xe0001000
    ade4:	40000008 	.word	0x40000008
    ade8:	40000100 	.word	0x40000100

0000adec <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    adec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    adee:	4d2e      	ldr	r5, [pc, #184]	; (aea8 <nrfx_clock_stop+0xbc>)
    adf0:	792a      	ldrb	r2, [r5, #4]
{
    adf2:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    adf4:	b952      	cbnz	r2, ae0c <nrfx_clock_stop+0x20>
    adf6:	492d      	ldr	r1, [pc, #180]	; (aeac <nrfx_clock_stop+0xc0>)
    adf8:	482d      	ldr	r0, [pc, #180]	; (aeb0 <nrfx_clock_stop+0xc4>)
    adfa:	f240 124b 	movw	r2, #331	; 0x14b
    adfe:	f004 fae2 	bl	f3c6 <printk>
    ae02:	482a      	ldr	r0, [pc, #168]	; (aeac <nrfx_clock_stop+0xc0>)
    ae04:	f240 114b 	movw	r1, #331	; 0x14b
    ae08:	f004 fba2 	bl	f550 <assert_post_action>
    switch (domain)
    ae0c:	b174      	cbz	r4, ae2c <nrfx_clock_stop+0x40>
    ae0e:	2c01      	cmp	r4, #1
    ae10:	d027      	beq.n	ae62 <nrfx_clock_stop+0x76>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    ae12:	4926      	ldr	r1, [pc, #152]	; (aeac <nrfx_clock_stop+0xc0>)
    ae14:	4826      	ldr	r0, [pc, #152]	; (aeb0 <nrfx_clock_stop+0xc4>)
    ae16:	f240 1267 	movw	r2, #359	; 0x167
    ae1a:	f004 fad4 	bl	f3c6 <printk>
    ae1e:	4823      	ldr	r0, [pc, #140]	; (aeac <nrfx_clock_stop+0xc0>)
    ae20:	f240 1167 	movw	r1, #359	; 0x167
    ae24:	f004 fb94 	bl	f550 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    ae28:	b003      	add	sp, #12
    ae2a:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    ae2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ae30:	2202      	movs	r2, #2
    ae32:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ae36:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    ae3a:	f503 7382 	add.w	r3, r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ae3e:	2201      	movs	r2, #1
    ae40:	681b      	ldr	r3, [r3, #0]
    ae42:	4b1c      	ldr	r3, [pc, #112]	; (aeb4 <nrfx_clock_stop+0xc8>)
    ae44:	f242 7410 	movw	r4, #10000	; 0x2710
    ae48:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    ae4a:	2100      	movs	r1, #0
    ae4c:	4608      	mov	r0, r1
    ae4e:	f7ff fef7 	bl	ac40 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    ae52:	2800      	cmp	r0, #0
    ae54:	d0e8      	beq.n	ae28 <nrfx_clock_stop+0x3c>
    ae56:	2001      	movs	r0, #1
    ae58:	f007 f882 	bl	11f60 <nrfx_busy_wait>
    ae5c:	3c01      	subs	r4, #1
    ae5e:	d1f4      	bne.n	ae4a <nrfx_clock_stop+0x5e>
    ae60:	e7e2      	b.n	ae28 <nrfx_clock_stop+0x3c>
    p_reg->INTENCLR = mask;
    ae62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ae66:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    ae68:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ae6c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    ae70:	f503 7380 	add.w	r3, r3, #256	; 0x100
    ae74:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ae76:	4b10      	ldr	r3, [pc, #64]	; (aeb8 <nrfx_clock_stop+0xcc>)
    ae78:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    ae7a:	f88d 4007 	strb.w	r4, [sp, #7]
    ae7e:	f242 7410 	movw	r4, #10000	; 0x2710
    ae82:	f10d 0107 	add.w	r1, sp, #7
    ae86:	2001      	movs	r0, #1
    ae88:	f7ff feda 	bl	ac40 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    ae8c:	b910      	cbnz	r0, ae94 <nrfx_clock_stop+0xa8>
            m_clock_cb.hfclk_started = false;
    ae8e:	2300      	movs	r3, #0
    ae90:	716b      	strb	r3, [r5, #5]
    ae92:	e7c9      	b.n	ae28 <nrfx_clock_stop+0x3c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    ae94:	f89d 0007 	ldrb.w	r0, [sp, #7]
    ae98:	2801      	cmp	r0, #1
    ae9a:	d1f8      	bne.n	ae8e <nrfx_clock_stop+0xa2>
    ae9c:	f007 f860 	bl	11f60 <nrfx_busy_wait>
    aea0:	3c01      	subs	r4, #1
    aea2:	d1ee      	bne.n	ae82 <nrfx_clock_stop+0x96>
    aea4:	e7f3      	b.n	ae8e <nrfx_clock_stop+0xa2>
    aea6:	bf00      	nop
    aea8:	20000b20 	.word	0x20000b20
    aeac:	0001492f 	.word	0x0001492f
    aeb0:	00013904 	.word	0x00013904
    aeb4:	4000000c 	.word	0x4000000c
    aeb8:	40000004 	.word	0x40000004

0000aebc <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    aebc:	4b16      	ldr	r3, [pc, #88]	; (af18 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    aebe:	b507      	push	{r0, r1, r2, lr}
    aec0:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    aec2:	b16a      	cbz	r2, aee0 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    aec4:	2200      	movs	r2, #0
    aec6:	601a      	str	r2, [r3, #0]
    aec8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    aeca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    aece:	2201      	movs	r2, #1
    aed0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    aed4:	4b11      	ldr	r3, [pc, #68]	; (af1c <nrfx_power_clock_irq_handler+0x60>)
    aed6:	7958      	ldrb	r0, [r3, #5]
    aed8:	b910      	cbnz	r0, aee0 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    aeda:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    aedc:	681b      	ldr	r3, [r3, #0]
    aede:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    aee0:	4b0f      	ldr	r3, [pc, #60]	; (af20 <nrfx_power_clock_irq_handler+0x64>)
    aee2:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    aee4:	b16a      	cbz	r2, af02 <nrfx_power_clock_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    aee6:	2000      	movs	r0, #0
    aee8:	6018      	str	r0, [r3, #0]
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    aeea:	a901      	add	r1, sp, #4
    aeec:	681b      	ldr	r3, [r3, #0]
    aeee:	f7ff fea7 	bl	ac40 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    aef2:	9a01      	ldr	r2, [sp, #4]
    aef4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    aef8:	b932      	cbnz	r2, af08 <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    aefa:	2201      	movs	r2, #1
    aefc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    af00:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    af02:	b003      	add	sp, #12
    af04:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
    af08:	2202      	movs	r2, #2
    af0a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    af0e:	4b03      	ldr	r3, [pc, #12]	; (af1c <nrfx_power_clock_irq_handler+0x60>)
    af10:	2001      	movs	r0, #1
    af12:	681b      	ldr	r3, [r3, #0]
    af14:	4798      	blx	r3
}
    af16:	e7f4      	b.n	af02 <nrfx_power_clock_irq_handler+0x46>
    af18:	40000100 	.word	0x40000100
    af1c:	20000b20 	.word	0x20000b20
    af20:	40000104 	.word	0x40000104

0000af24 <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    af24:	4b05      	ldr	r3, [pc, #20]	; (af3c <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    af26:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    af28:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    af2c:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
    af30:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
    af34:	4258      	negs	r0, r3
    af36:	4158      	adcs	r0, r3
    af38:	4770      	bx	lr
    af3a:	bf00      	nop
    af3c:	20000128 	.word	0x20000128

0000af40 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    af40:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    af42:	f100 0308 	add.w	r3, r0, #8
    af46:	4c0c      	ldr	r4, [pc, #48]	; (af78 <call_handler+0x38>)
    af48:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    af4c:	05da      	lsls	r2, r3, #23
{
    af4e:	4605      	mov	r5, r0
    af50:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    af52:	d507      	bpl.n	af64 <call_handler+0x24>
    af54:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    af58:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    af5c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    af60:	6852      	ldr	r2, [r2, #4]
    af62:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    af64:	68a3      	ldr	r3, [r4, #8]
    af66:	b12b      	cbz	r3, af74 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    af68:	68e2      	ldr	r2, [r4, #12]
    af6a:	4631      	mov	r1, r6
    af6c:	4628      	mov	r0, r5
    }
}
    af6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    af72:	4718      	bx	r3
}
    af74:	bd70      	pop	{r4, r5, r6, pc}
    af76:	bf00      	nop
    af78:	20000128 	.word	0x20000128

0000af7c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    af7c:	4b19      	ldr	r3, [pc, #100]	; (afe4 <release_handler+0x68>)
    af7e:	3008      	adds	r0, #8
{
    af80:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    af82:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    af86:	05d1      	lsls	r1, r2, #23
    af88:	d51d      	bpl.n	afc6 <release_handler+0x4a>
    af8a:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    af8e:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    af92:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    af96:	f103 0410 	add.w	r4, r3, #16
    af9a:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    af9c:	f834 2b02 	ldrh.w	r2, [r4], #2
    afa0:	f412 7f80 	tst.w	r2, #256	; 0x100
    afa4:	d003      	beq.n	afae <release_handler+0x32>
    afa6:	f3c2 2243 	ubfx	r2, r2, #9, #4
    afaa:	4291      	cmp	r1, r2
    afac:	d00b      	beq.n	afc6 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    afae:	3001      	adds	r0, #1
    afb0:	2820      	cmp	r0, #32
    afb2:	d1f3      	bne.n	af9c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    afb4:	2200      	movs	r2, #0
    afb6:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    afba:	480b      	ldr	r0, [pc, #44]	; (afe8 <release_handler+0x6c>)
    afbc:	f7ff fe1e 	bl	abfc <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    afc0:	4b0a      	ldr	r3, [pc, #40]	; (afec <release_handler+0x70>)
    afc2:	4298      	cmp	r0, r3
    afc4:	d100      	bne.n	afc8 <release_handler+0x4c>
}
    afc6:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    afc8:	4909      	ldr	r1, [pc, #36]	; (aff0 <release_handler+0x74>)
    afca:	480a      	ldr	r0, [pc, #40]	; (aff4 <release_handler+0x78>)
    afcc:	f44f 7299 	mov.w	r2, #306	; 0x132
    afd0:	f004 f9f9 	bl	f3c6 <printk>
}
    afd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    afd8:	4805      	ldr	r0, [pc, #20]	; (aff0 <release_handler+0x74>)
    afda:	f44f 7199 	mov.w	r1, #306	; 0x132
    afde:	f004 bab7 	b.w	f550 <assert_post_action>
    afe2:	bf00      	nop
    afe4:	20000128 	.word	0x20000128
    afe8:	2000017c 	.word	0x2000017c
    afec:	0bad0000 	.word	0x0bad0000
    aff0:	0001496c 	.word	0x0001496c
    aff4:	00013904 	.word	0x00013904

0000aff8 <pin_handler_trigger_uninit>:
{
    aff8:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    affa:	4c0a      	ldr	r4, [pc, #40]	; (b024 <pin_handler_trigger_uninit+0x2c>)
    affc:	f100 0508 	add.w	r5, r0, #8
    b000:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    b004:	069a      	lsls	r2, r3, #26
    b006:	d506      	bpl.n	b016 <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    b008:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    b00a:	4a07      	ldr	r2, [pc, #28]	; (b028 <pin_handler_trigger_uninit+0x30>)
    b00c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    b010:	2100      	movs	r1, #0
    b012:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
    b016:	f7ff ffb1 	bl	af7c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    b01a:	2300      	movs	r3, #0
    b01c:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    b020:	bd38      	pop	{r3, r4, r5, pc}
    b022:	bf00      	nop
    b024:	20000128 	.word	0x20000128
    b028:	40006000 	.word	0x40006000

0000b02c <nrf_gpio_pin_port_decode>:
{
    b02c:	b510      	push	{r4, lr}
    b02e:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    b030:	6800      	ldr	r0, [r0, #0]
    b032:	f006 ff97 	bl	11f64 <nrf_gpio_pin_present_check>
    b036:	b950      	cbnz	r0, b04e <nrf_gpio_pin_port_decode+0x22>
    b038:	490f      	ldr	r1, [pc, #60]	; (b078 <nrf_gpio_pin_port_decode+0x4c>)
    b03a:	4810      	ldr	r0, [pc, #64]	; (b07c <nrf_gpio_pin_port_decode+0x50>)
    b03c:	f240 2229 	movw	r2, #553	; 0x229
    b040:	f004 f9c1 	bl	f3c6 <printk>
    b044:	480c      	ldr	r0, [pc, #48]	; (b078 <nrf_gpio_pin_port_decode+0x4c>)
    b046:	f240 2129 	movw	r1, #553	; 0x229
    b04a:	f004 fa81 	bl	f550 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    b04e:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    b050:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    b054:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    b056:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    b058:	d00a      	beq.n	b070 <nrf_gpio_pin_port_decode+0x44>
            NRFX_ASSERT(0);
    b05a:	4907      	ldr	r1, [pc, #28]	; (b078 <nrf_gpio_pin_port_decode+0x4c>)
    b05c:	4807      	ldr	r0, [pc, #28]	; (b07c <nrf_gpio_pin_port_decode+0x50>)
    b05e:	f240 222e 	movw	r2, #558	; 0x22e
    b062:	f004 f9b0 	bl	f3c6 <printk>
    b066:	4804      	ldr	r0, [pc, #16]	; (b078 <nrf_gpio_pin_port_decode+0x4c>)
    b068:	f240 212e 	movw	r1, #558	; 0x22e
    b06c:	f004 fa70 	bl	f550 <assert_post_action>
}
    b070:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    b074:	bd10      	pop	{r4, pc}
    b076:	bf00      	nop
    b078:	0001461b 	.word	0x0001461b
    b07c:	00013904 	.word	0x00013904

0000b080 <nrfx_gpiote_input_configure>:
{
    b080:	b5f0      	push	{r4, r5, r6, r7, lr}
    b082:	4604      	mov	r4, r0
    b084:	b085      	sub	sp, #20
    b086:	4617      	mov	r7, r2
    b088:	461d      	mov	r5, r3
    if (p_input_config)
    b08a:	b1f1      	cbz	r1, b0ca <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    b08c:	f7ff ff4a 	bl	af24 <pin_is_task_output>
    b090:	b110      	cbz	r0, b098 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    b092:	484a      	ldr	r0, [pc, #296]	; (b1bc <nrfx_gpiote_input_configure+0x13c>)
}
    b094:	b005      	add	sp, #20
    b096:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    b098:	460b      	mov	r3, r1
    b09a:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    b09e:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    b0a2:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    b0a6:	f10d 020f 	add.w	r2, sp, #15
    b0aa:	f10d 010e 	add.w	r1, sp, #14
    b0ae:	4620      	mov	r0, r4
    b0b0:	f006 ff68 	bl	11f84 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    b0b4:	4a42      	ldr	r2, [pc, #264]	; (b1c0 <nrfx_gpiote_input_configure+0x140>)
    b0b6:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    b0ba:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    b0be:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    b0c2:	f043 0301 	orr.w	r3, r3, #1
    b0c6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    b0ca:	b197      	cbz	r7, b0f2 <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b0cc:	4b3c      	ldr	r3, [pc, #240]	; (b1c0 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    b0ce:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    b0d0:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b0d2:	f104 0008 	add.w	r0, r4, #8
    b0d6:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    b0da:	078f      	lsls	r7, r1, #30
    b0dc:	d50c      	bpl.n	b0f8 <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
    b0de:	2a00      	cmp	r2, #0
    b0e0:	d1d7      	bne.n	b092 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    b0e2:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    b0e6:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    b0ea:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    b0ee:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    b0f2:	bbcd      	cbnz	r5, b168 <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
    b0f4:	4833      	ldr	r0, [pc, #204]	; (b1c4 <nrfx_gpiote_input_configure+0x144>)
    b0f6:	e7cd      	b.n	b094 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    b0f8:	f021 0120 	bic.w	r1, r1, #32
    b0fc:	04c9      	lsls	r1, r1, #19
    b0fe:	0cc9      	lsrs	r1, r1, #19
    b100:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    b104:	2a00      	cmp	r2, #0
    b106:	d0ec      	beq.n	b0e2 <nrfx_gpiote_input_configure+0x62>
                if (!edge)
    b108:	2e03      	cmp	r6, #3
    b10a:	d8c2      	bhi.n	b092 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    b10c:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    b10e:	b92e      	cbnz	r6, b11c <nrfx_gpiote_input_configure+0x9c>
    b110:	4a2d      	ldr	r2, [pc, #180]	; (b1c8 <nrfx_gpiote_input_configure+0x148>)
    b112:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    b116:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    b11a:	e7e2      	b.n	b0e2 <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    b11c:	00ba      	lsls	r2, r7, #2
    b11e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    b122:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    b126:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    b12a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    b12e:	f02c 0c03 	bic.w	ip, ip, #3
    b132:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    b136:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    b13a:	f42c 3c47 	bic.w	ip, ip, #203776	; 0x31c00
    b13e:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    b142:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b146:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    b14a:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    b14e:	f40c 5cf8 	and.w	ip, ip, #7936	; 0x1f00
    b152:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    b156:	ea4c 0c0e 	orr.w	ip, ip, lr
    b15a:	f041 0120 	orr.w	r1, r1, #32
    b15e:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    b162:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    b166:	e7bc      	b.n	b0e2 <nrfx_gpiote_input_configure+0x62>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    b168:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    b16c:	4620      	mov	r0, r4
    b16e:	f7ff ff05 	bl	af7c <release_handler>
    if (!handler)
    b172:	2e00      	cmp	r6, #0
    b174:	d0be      	beq.n	b0f4 <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    b176:	4d12      	ldr	r5, [pc, #72]	; (b1c0 <nrfx_gpiote_input_configure+0x140>)
    b178:	682b      	ldr	r3, [r5, #0]
    b17a:	429e      	cmp	r6, r3
    b17c:	d104      	bne.n	b188 <nrfx_gpiote_input_configure+0x108>
    b17e:	686b      	ldr	r3, [r5, #4]
    b180:	429f      	cmp	r7, r3
    b182:	d101      	bne.n	b188 <nrfx_gpiote_input_configure+0x108>
    b184:	2200      	movs	r2, #0
    b186:	e00a      	b.n	b19e <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    b188:	4810      	ldr	r0, [pc, #64]	; (b1cc <nrfx_gpiote_input_configure+0x14c>)
    b18a:	f10d 010f 	add.w	r1, sp, #15
    b18e:	f7ff fd11 	bl	abb4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    b192:	4b0c      	ldr	r3, [pc, #48]	; (b1c4 <nrfx_gpiote_input_configure+0x144>)
    b194:	4298      	cmp	r0, r3
    b196:	f47f af7d 	bne.w	b094 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    b19a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    b19e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    b1a2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    b1a6:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    b1a8:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    b1aa:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    b1ae:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    b1b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b1b6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    b1ba:	e79b      	b.n	b0f4 <nrfx_gpiote_input_configure+0x74>
    b1bc:	0bad0004 	.word	0x0bad0004
    b1c0:	20000128 	.word	0x20000128
    b1c4:	0bad0000 	.word	0x0bad0000
    b1c8:	40006000 	.word	0x40006000
    b1cc:	2000017c 	.word	0x2000017c

0000b1d0 <nrfx_gpiote_output_configure>:
{
    b1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1d2:	4604      	mov	r4, r0
    b1d4:	b085      	sub	sp, #20
    b1d6:	4615      	mov	r5, r2
    if (p_config)
    b1d8:	b309      	cbz	r1, b21e <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b1da:	f100 0708 	add.w	r7, r0, #8
    b1de:	4e31      	ldr	r6, [pc, #196]	; (b2a4 <nrfx_gpiote_output_configure+0xd4>)
    b1e0:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    b1e4:	0798      	lsls	r0, r3, #30
    b1e6:	d401      	bmi.n	b1ec <nrfx_gpiote_output_configure+0x1c>
    b1e8:	069a      	lsls	r2, r3, #26
    b1ea:	d458      	bmi.n	b29e <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    b1ec:	f013 0f1c 	tst.w	r3, #28
    b1f0:	d002      	beq.n	b1f8 <nrfx_gpiote_output_configure+0x28>
    b1f2:	784b      	ldrb	r3, [r1, #1]
    b1f4:	2b01      	cmp	r3, #1
    b1f6:	d052      	beq.n	b29e <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    b1f8:	2301      	movs	r3, #1
    b1fa:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    b1fe:	2300      	movs	r3, #0
    b200:	e9cd 1300 	strd	r1, r3, [sp]
    b204:	1c4a      	adds	r2, r1, #1
    b206:	1c8b      	adds	r3, r1, #2
    b208:	4620      	mov	r0, r4
    b20a:	f10d 010f 	add.w	r1, sp, #15
    b20e:	f006 feb9 	bl	11f84 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    b212:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    b216:	f043 0303 	orr.w	r3, r3, #3
    b21a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    b21e:	b915      	cbnz	r5, b226 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    b220:	4821      	ldr	r0, [pc, #132]	; (b2a8 <nrfx_gpiote_output_configure+0xd8>)
}
    b222:	b005      	add	sp, #20
    b224:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b226:	4e1f      	ldr	r6, [pc, #124]	; (b2a4 <nrfx_gpiote_output_configure+0xd4>)
    b228:	f104 0708 	add.w	r7, r4, #8
    b22c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    b230:	0783      	lsls	r3, r0, #30
    b232:	d534      	bpl.n	b29e <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
    b234:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    b238:	4661      	mov	r1, ip
    b23a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    b23c:	f020 0020 	bic.w	r0, r0, #32
    b240:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    b244:	04c0      	lsls	r0, r0, #19
    b246:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    b24a:	0cc0      	lsrs	r0, r0, #19
    b24c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    b250:	2300      	movs	r3, #0
    b252:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    b256:	786a      	ldrb	r2, [r5, #1]
    b258:	2a00      	cmp	r2, #0
    b25a:	d0e1      	beq.n	b220 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    b25c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    b260:	78ad      	ldrb	r5, [r5, #2]
    b262:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    b266:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    b26a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b26e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    b272:	0223      	lsls	r3, r4, #8
    b274:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    b278:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b27a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    b27e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    b282:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b284:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    b286:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    b28a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b28e:	432b      	orrs	r3, r5
    b290:	f040 0020 	orr.w	r0, r0, #32
    b294:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    b298:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    b29c:	e7c0      	b.n	b220 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    b29e:	4803      	ldr	r0, [pc, #12]	; (b2ac <nrfx_gpiote_output_configure+0xdc>)
    b2a0:	e7bf      	b.n	b222 <nrfx_gpiote_output_configure+0x52>
    b2a2:	bf00      	nop
    b2a4:	20000128 	.word	0x20000128
    b2a8:	0bad0000 	.word	0x0bad0000
    b2ac:	0bad0004 	.word	0x0bad0004

0000b2b0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    b2b0:	4b01      	ldr	r3, [pc, #4]	; (b2b8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    b2b2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    b2b6:	4770      	bx	lr
    b2b8:	20000128 	.word	0x20000128

0000b2bc <nrfx_gpiote_channel_get>:
{
    b2bc:	b538      	push	{r3, r4, r5, lr}
    b2be:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    b2c0:	460d      	mov	r5, r1
    b2c2:	b951      	cbnz	r1, b2da <nrfx_gpiote_channel_get+0x1e>
    b2c4:	490a      	ldr	r1, [pc, #40]	; (b2f0 <nrfx_gpiote_channel_get+0x34>)
    b2c6:	480b      	ldr	r0, [pc, #44]	; (b2f4 <nrfx_gpiote_channel_get+0x38>)
    b2c8:	f240 2235 	movw	r2, #565	; 0x235
    b2cc:	f004 f87b 	bl	f3c6 <printk>
    b2d0:	4807      	ldr	r0, [pc, #28]	; (b2f0 <nrfx_gpiote_channel_get+0x34>)
    b2d2:	f240 2135 	movw	r1, #565	; 0x235
    b2d6:	f004 f93b 	bl	f550 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    b2da:	3408      	adds	r4, #8
    b2dc:	4b06      	ldr	r3, [pc, #24]	; (b2f8 <nrfx_gpiote_channel_get+0x3c>)
    b2de:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
    b2e2:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b2e4:	bf43      	ittte	mi
    b2e6:	0b5b      	lsrmi	r3, r3, #13
    b2e8:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
    b2ea:	4804      	ldrmi	r0, [pc, #16]	; (b2fc <nrfx_gpiote_channel_get+0x40>)
        return NRFX_ERROR_INVALID_PARAM;
    b2ec:	4804      	ldrpl	r0, [pc, #16]	; (b300 <nrfx_gpiote_channel_get+0x44>)
}
    b2ee:	bd38      	pop	{r3, r4, r5, pc}
    b2f0:	0001496c 	.word	0x0001496c
    b2f4:	00013904 	.word	0x00013904
    b2f8:	20000128 	.word	0x20000128
    b2fc:	0bad0000 	.word	0x0bad0000
    b300:	0bad0004 	.word	0x0bad0004

0000b304 <nrfx_gpiote_init>:
{
    b304:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    b306:	4c0e      	ldr	r4, [pc, #56]	; (b340 <nrfx_gpiote_init+0x3c>)
    b308:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    b30c:	b9b5      	cbnz	r5, b33c <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    b30e:	2240      	movs	r2, #64	; 0x40
    b310:	4629      	mov	r1, r5
    b312:	f104 0010 	add.w	r0, r4, #16
    b316:	f006 fff5 	bl	12304 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    b31a:	2006      	movs	r0, #6
    b31c:	f7fa fad6 	bl	58cc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b320:	4b08      	ldr	r3, [pc, #32]	; (b344 <nrfx_gpiote_init+0x40>)
    return err_code;
    b322:	4809      	ldr	r0, [pc, #36]	; (b348 <nrfx_gpiote_init+0x44>)
    b324:	601d      	str	r5, [r3, #0]
    b326:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    b328:	4b08      	ldr	r3, [pc, #32]	; (b34c <nrfx_gpiote_init+0x48>)
    b32a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    b32e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    b332:	2301      	movs	r3, #1
    b334:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    b338:	6563      	str	r3, [r4, #84]	; 0x54
}
    b33a:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    b33c:	4804      	ldr	r0, [pc, #16]	; (b350 <nrfx_gpiote_init+0x4c>)
    b33e:	e7fc      	b.n	b33a <nrfx_gpiote_init+0x36>
    b340:	20000128 	.word	0x20000128
    b344:	4000617c 	.word	0x4000617c
    b348:	0bad0000 	.word	0x0bad0000
    b34c:	40006000 	.word	0x40006000
    b350:	0bad0005 	.word	0x0bad0005

0000b354 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    b354:	4b03      	ldr	r3, [pc, #12]	; (b364 <nrfx_gpiote_is_init+0x10>)
    b356:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    b35a:	3800      	subs	r0, #0
    b35c:	bf18      	it	ne
    b35e:	2001      	movne	r0, #1
    b360:	4770      	bx	lr
    b362:	bf00      	nop
    b364:	20000128 	.word	0x20000128

0000b368 <nrfx_gpiote_channel_free>:
{
    b368:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    b36a:	4801      	ldr	r0, [pc, #4]	; (b370 <nrfx_gpiote_channel_free+0x8>)
    b36c:	f7ff bc46 	b.w	abfc <nrfx_flag32_free>
    b370:	20000178 	.word	0x20000178

0000b374 <nrfx_gpiote_channel_alloc>:
{
    b374:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    b376:	4801      	ldr	r0, [pc, #4]	; (b37c <nrfx_gpiote_channel_alloc+0x8>)
    b378:	f7ff bc1c 	b.w	abb4 <nrfx_flag32_alloc>
    b37c:	20000178 	.word	0x20000178

0000b380 <nrfx_gpiote_trigger_enable>:
{
    b380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    b382:	4d30      	ldr	r5, [pc, #192]	; (b444 <nrfx_gpiote_trigger_enable+0xc4>)
    b384:	f100 0708 	add.w	r7, r0, #8
{
    b388:	4604      	mov	r4, r0
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    b38a:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    NRFX_ASSERT(pin_has_trigger(pin));
    b38e:	f013 0f1c 	tst.w	r3, #28
{
    b392:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    b394:	d10a      	bne.n	b3ac <nrfx_gpiote_trigger_enable+0x2c>
    b396:	492c      	ldr	r1, [pc, #176]	; (b448 <nrfx_gpiote_trigger_enable+0xc8>)
    b398:	482c      	ldr	r0, [pc, #176]	; (b44c <nrfx_gpiote_trigger_enable+0xcc>)
    b39a:	f240 32df 	movw	r2, #991	; 0x3df
    b39e:	f004 f812 	bl	f3c6 <printk>
    b3a2:	4829      	ldr	r0, [pc, #164]	; (b448 <nrfx_gpiote_trigger_enable+0xc8>)
    b3a4:	f240 31df 	movw	r1, #991	; 0x3df
    b3a8:	f004 f8d2 	bl	f550 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    b3ac:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    b3b0:	0683      	lsls	r3, r0, #26
    b3b2:	d51f      	bpl.n	b3f4 <nrfx_gpiote_trigger_enable+0x74>
    b3b4:	f010 0302 	ands.w	r3, r0, #2
    b3b8:	d11c      	bne.n	b3f4 <nrfx_gpiote_trigger_enable+0x74>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b3ba:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    b3bc:	4608      	mov	r0, r1
    b3be:	f006 fddd 	bl	11f7c <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    b3c2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    b3c6:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b3ca:	6003      	str	r3, [r0, #0]
    b3cc:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    b3ce:	008b      	lsls	r3, r1, #2
    b3d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b3d4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    b3d8:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    b3dc:	f042 0201 	orr.w	r2, r2, #1
    b3e0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    b3e4:	b126      	cbz	r6, b3f0 <nrfx_gpiote_trigger_enable+0x70>
    p_reg->INTENSET = mask;
    b3e6:	4a1a      	ldr	r2, [pc, #104]	; (b450 <nrfx_gpiote_trigger_enable+0xd0>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    b3e8:	2301      	movs	r3, #1
    b3ea:	408b      	lsls	r3, r1
    b3ec:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    b3f0:	b003      	add	sp, #12
    b3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    b3f4:	b956      	cbnz	r6, b40c <nrfx_gpiote_trigger_enable+0x8c>
    b3f6:	4914      	ldr	r1, [pc, #80]	; (b448 <nrfx_gpiote_trigger_enable+0xc8>)
    b3f8:	4814      	ldr	r0, [pc, #80]	; (b44c <nrfx_gpiote_trigger_enable+0xcc>)
    b3fa:	f240 32ee 	movw	r2, #1006	; 0x3ee
    b3fe:	f003 ffe2 	bl	f3c6 <printk>
    b402:	4811      	ldr	r0, [pc, #68]	; (b448 <nrfx_gpiote_trigger_enable+0xc8>)
    b404:	f240 31ee 	movw	r1, #1006	; 0x3ee
    b408:	f004 f8a2 	bl	f550 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    b40c:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    b410:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    b414:	2b04      	cmp	r3, #4
    b416:	d010      	beq.n	b43a <nrfx_gpiote_trigger_enable+0xba>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    b418:	2b05      	cmp	r3, #5
    b41a:	d010      	beq.n	b43e <nrfx_gpiote_trigger_enable+0xbe>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b41c:	a801      	add	r0, sp, #4
    b41e:	9401      	str	r4, [sp, #4]
    b420:	f7ff fe04 	bl	b02c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    b424:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    b426:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    b42a:	40d9      	lsrs	r1, r3
    b42c:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    b430:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    b432:	4620      	mov	r0, r4
    b434:	f006 fdf1 	bl	1201a <nrf_gpio_cfg_sense_set>
}
    b438:	e7da      	b.n	b3f0 <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    b43a:	2103      	movs	r1, #3
    b43c:	e7f9      	b.n	b432 <nrfx_gpiote_trigger_enable+0xb2>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    b43e:	2102      	movs	r1, #2
    b440:	e7f7      	b.n	b432 <nrfx_gpiote_trigger_enable+0xb2>
    b442:	bf00      	nop
    b444:	20000128 	.word	0x20000128
    b448:	0001496c 	.word	0x0001496c
    b44c:	00013904 	.word	0x00013904
    b450:	40006000 	.word	0x40006000

0000b454 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    b454:	4b0e      	ldr	r3, [pc, #56]	; (b490 <nrfx_gpiote_trigger_disable+0x3c>)
    b456:	f100 0208 	add.w	r2, r0, #8
    b45a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    b45e:	0699      	lsls	r1, r3, #26
    b460:	d513      	bpl.n	b48a <nrfx_gpiote_trigger_disable+0x36>
    b462:	079a      	lsls	r2, r3, #30
    b464:	d411      	bmi.n	b48a <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b466:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    b468:	2201      	movs	r2, #1
    b46a:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    b46c:	009b      	lsls	r3, r3, #2
    b46e:	4909      	ldr	r1, [pc, #36]	; (b494 <nrfx_gpiote_trigger_disable+0x40>)
    b470:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b474:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    b478:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    b47c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    b480:	f022 0203 	bic.w	r2, r2, #3
    b484:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    b488:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    b48a:	2100      	movs	r1, #0
    b48c:	f006 bdc5 	b.w	1201a <nrf_gpio_cfg_sense_set>
    b490:	20000128 	.word	0x20000128
    b494:	40006000 	.word	0x40006000

0000b498 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    b498:	4b0e      	ldr	r3, [pc, #56]	; (b4d4 <nrfx_gpiote_pin_uninit+0x3c>)
    b49a:	f100 0208 	add.w	r2, r0, #8
{
    b49e:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    b4a0:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    b4a4:	07db      	lsls	r3, r3, #31
{
    b4a6:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    b4a8:	d511      	bpl.n	b4ce <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    b4aa:	f7ff ffd3 	bl	b454 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    b4ae:	4620      	mov	r0, r4
    b4b0:	f7ff fda2 	bl	aff8 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b4b4:	a801      	add	r0, sp, #4
    b4b6:	9401      	str	r4, [sp, #4]
    b4b8:	f7ff fdb8 	bl	b02c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    b4bc:	9b01      	ldr	r3, [sp, #4]
    b4be:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    b4c2:	2202      	movs	r2, #2
    b4c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    b4c8:	4803      	ldr	r0, [pc, #12]	; (b4d8 <nrfx_gpiote_pin_uninit+0x40>)
}
    b4ca:	b002      	add	sp, #8
    b4cc:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    b4ce:	4803      	ldr	r0, [pc, #12]	; (b4dc <nrfx_gpiote_pin_uninit+0x44>)
    b4d0:	e7fb      	b.n	b4ca <nrfx_gpiote_pin_uninit+0x32>
    b4d2:	bf00      	nop
    b4d4:	20000128 	.word	0x20000128
    b4d8:	0bad0000 	.word	0x0bad0000
    b4dc:	0bad0004 	.word	0x0bad0004

0000b4e0 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    b4e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b4e4:	4b57      	ldr	r3, [pc, #348]	; (b644 <nrfx_gpiote_irq_handler+0x164>)
    return p_reg->INTENSET & mask;
    b4e6:	4858      	ldr	r0, [pc, #352]	; (b648 <nrfx_gpiote_irq_handler+0x168>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    b4e8:	4958      	ldr	r1, [pc, #352]	; (b64c <nrfx_gpiote_irq_handler+0x16c>)
    uint32_t status = 0;
    b4ea:	2600      	movs	r6, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    b4ec:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b4ee:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b4f0:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    b4f2:	b135      	cbz	r5, b502 <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    b4f4:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    b4f8:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b4fa:	bf1e      	ittt	ne
    b4fc:	601c      	strne	r4, [r3, #0]
    b4fe:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    b500:	4316      	orrne	r6, r2
        }
        mask <<= 1;
    b502:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    b504:	428b      	cmp	r3, r1
        mask <<= 1;
    b506:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    b50a:	d1f1      	bne.n	b4f0 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b50c:	4f50      	ldr	r7, [pc, #320]	; (b650 <nrfx_gpiote_irq_handler+0x170>)
    b50e:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    b510:	b1ab      	cbz	r3, b53e <nrfx_gpiote_irq_handler+0x5e>
        *p_masks = gpio_regs[i]->LATCH;
    b512:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    b516:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    b51a:	9200      	str	r2, [sp, #0]
        gpio_regs[i]->LATCH = *p_masks;
    b51c:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    b520:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    b524:	9c00      	ldr	r4, [sp, #0]
    b526:	b964      	cbnz	r4, b542 <nrfx_gpiote_irq_handler+0x62>
        *p_masks = gpio_regs[i]->LATCH;
    b528:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b52c:	603c      	str	r4, [r7, #0]
    b52e:	683b      	ldr	r3, [r7, #0]
    b530:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    b534:	9300      	str	r3, [sp, #0]
        gpio_regs[i]->LATCH = *p_masks;
    b536:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        if (latch[port_idx])
    b53a:	2b00      	cmp	r3, #0
    b53c:	d1f0      	bne.n	b520 <nrfx_gpiote_irq_handler+0x40>
        mask &= ~NRFX_BIT(ch);
    b53e:	2401      	movs	r4, #1
    b540:	e07a      	b.n	b638 <nrfx_gpiote_irq_handler+0x158>
                uint32_t pin = NRF_CTZ(latch[i]);
    b542:	fa94 f4a4 	rbit	r4, r4
    b546:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    b54a:	4a42      	ldr	r2, [pc, #264]	; (b654 <nrfx_gpiote_irq_handler+0x174>)
    b54c:	9401      	str	r4, [sp, #4]
    b54e:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    b552:	08e0      	lsrs	r0, r4, #3
    b554:	f832 b013 	ldrh.w	fp, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
    b558:	f004 0307 	and.w	r3, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    b55c:	fa08 f103 	lsl.w	r1, r8, r3
    b560:	f81d 3000 	ldrb.w	r3, [sp, r0]
    b564:	ea23 0301 	bic.w	r3, r3, r1
    b568:	f80d 3000 	strb.w	r3, [sp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b56c:	a801      	add	r0, sp, #4
    b56e:	f7ff fd5d 	bl	b02c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    b572:	9b01      	ldr	r3, [sp, #4]
    b574:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    b578:	ea4f 099b 	mov.w	r9, fp, lsr #2
    b57c:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
    b580:	f3cb 0a82 	ubfx	sl, fp, #2, #3
    if (is_level(trigger))
    b584:	f019 0f04 	tst.w	r9, #4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    b588:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    b58a:	f3c5 4501 	ubfx	r5, r5, #16, #2
    if (is_level(trigger))
    b58e:	d023      	beq.n	b5d8 <nrfx_gpiote_irq_handler+0xf8>
        call_handler(pin, trigger);
    b590:	4651      	mov	r1, sl
    b592:	4620      	mov	r0, r4
    b594:	f7ff fcd4 	bl	af40 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b598:	a801      	add	r0, sp, #4
    b59a:	9401      	str	r4, [sp, #4]
    b59c:	f7ff fd46 	bl	b02c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    b5a0:	9b01      	ldr	r3, [sp, #4]
    b5a2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    b5a6:	b2ed      	uxtb	r5, r5
    b5a8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    b5ac:	f3c3 4301 	ubfx	r3, r3, #16, #2
    b5b0:	429d      	cmp	r5, r3
    b5b2:	d107      	bne.n	b5c4 <nrfx_gpiote_irq_handler+0xe4>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    b5b4:	2100      	movs	r1, #0
    b5b6:	4620      	mov	r0, r4
    b5b8:	f006 fd2f 	bl	1201a <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    b5bc:	4629      	mov	r1, r5
    b5be:	4620      	mov	r0, r4
    b5c0:	f006 fd2b 	bl	1201a <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b5c4:	a801      	add	r0, sp, #4
    b5c6:	9401      	str	r4, [sp, #4]
    b5c8:	f7ff fd30 	bl	b02c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    b5cc:	9b01      	ldr	r3, [sp, #4]
    b5ce:	fa08 f303 	lsl.w	r3, r8, r3
    b5d2:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
    b5d6:	e7a5      	b.n	b524 <nrfx_gpiote_irq_handler+0x44>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    b5d8:	2d02      	cmp	r5, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    b5da:	bf0c      	ite	eq
    b5dc:	2103      	moveq	r1, #3
    b5de:	2102      	movne	r1, #2
    b5e0:	4620      	mov	r0, r4
    b5e2:	f006 fd1a 	bl	1201a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    b5e6:	f1ba 0f03 	cmp.w	sl, #3
    b5ea:	d004      	beq.n	b5f6 <nrfx_gpiote_irq_handler+0x116>
    b5ec:	2d02      	cmp	r5, #2
    b5ee:	d107      	bne.n	b600 <nrfx_gpiote_irq_handler+0x120>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    b5f0:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    b5f4:	d1e6      	bne.n	b5c4 <nrfx_gpiote_irq_handler+0xe4>
            call_handler(pin, trigger);
    b5f6:	4659      	mov	r1, fp
    b5f8:	4620      	mov	r0, r4
    b5fa:	f7ff fca1 	bl	af40 <call_handler>
    b5fe:	e7e1      	b.n	b5c4 <nrfx_gpiote_irq_handler+0xe4>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    b600:	2d03      	cmp	r5, #3
    b602:	d1df      	bne.n	b5c4 <nrfx_gpiote_irq_handler+0xe4>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    b604:	f1ba 0f02 	cmp.w	sl, #2
    b608:	e7f4      	b.n	b5f4 <nrfx_gpiote_irq_handler+0x114>
        uint32_t ch = NRF_CTZ(mask);
    b60a:	fa96 f3a6 	rbit	r3, r6
    b60e:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    b612:	fa04 f203 	lsl.w	r2, r4, r3
    b616:	009b      	lsls	r3, r3, #2
    b618:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b61c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    b620:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    b624:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    b628:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    b62c:	f3c0 2004 	ubfx	r0, r0, #8, #5
    b630:	f3c1 4101 	ubfx	r1, r1, #16, #2
    b634:	f7ff fc84 	bl	af40 <call_handler>
    while (mask)
    b638:	2e00      	cmp	r6, #0
    b63a:	d1e6      	bne.n	b60a <nrfx_gpiote_irq_handler+0x12a>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    b63c:	b003      	add	sp, #12
    b63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b642:	bf00      	nop
    b644:	40006100 	.word	0x40006100
    b648:	40006000 	.word	0x40006000
    b64c:	40006120 	.word	0x40006120
    b650:	4000617c 	.word	0x4000617c
    b654:	20000128 	.word	0x20000128

0000b658 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    b658:	6803      	ldr	r3, [r0, #0]
    switch (port)
    b65a:	095a      	lsrs	r2, r3, #5
    b65c:	bf0c      	ite	eq
    b65e:	f04f 32ff 	moveq.w	r2, #4294967295
    b662:	2200      	movne	r2, #0
    pin_number &= 0x1F;
    b664:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
    b668:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    b66c:	07db      	lsls	r3, r3, #31
{
    b66e:	b510      	push	{r4, lr}
    b670:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    b672:	d40a      	bmi.n	b68a <nrf_gpio_pin_port_decode+0x32>
    b674:	490f      	ldr	r1, [pc, #60]	; (b6b4 <nrf_gpio_pin_port_decode+0x5c>)
    b676:	4810      	ldr	r0, [pc, #64]	; (b6b8 <nrf_gpio_pin_port_decode+0x60>)
    b678:	f240 2229 	movw	r2, #553	; 0x229
    b67c:	f003 fea3 	bl	f3c6 <printk>
    b680:	480c      	ldr	r0, [pc, #48]	; (b6b4 <nrf_gpio_pin_port_decode+0x5c>)
    b682:	f240 2129 	movw	r1, #553	; 0x229
    b686:	f003 ff63 	bl	f550 <assert_post_action>
    uint32_t pin_number = *p_pin;
    b68a:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    b68c:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    b690:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    b692:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    b694:	d00a      	beq.n	b6ac <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
    b696:	4907      	ldr	r1, [pc, #28]	; (b6b4 <nrf_gpio_pin_port_decode+0x5c>)
    b698:	4807      	ldr	r0, [pc, #28]	; (b6b8 <nrf_gpio_pin_port_decode+0x60>)
    b69a:	f240 222e 	movw	r2, #558	; 0x22e
    b69e:	f003 fe92 	bl	f3c6 <printk>
    b6a2:	4804      	ldr	r0, [pc, #16]	; (b6b4 <nrf_gpio_pin_port_decode+0x5c>)
    b6a4:	f240 212e 	movw	r1, #558	; 0x22e
    b6a8:	f003 ff52 	bl	f550 <assert_post_action>
}
    b6ac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    b6b0:	bd10      	pop	{r4, pc}
    b6b2:	bf00      	nop
    b6b4:	0001461b 	.word	0x0001461b
    b6b8:	00013904 	.word	0x00013904

0000b6bc <irq_handler>:
    p_cb->abort = true;
}

static void irq_handler(NRF_SPI_Type * p_spi, spi_control_block_t * p_cb)
{
    NRFX_ASSERT(p_cb->handler);
    b6bc:	680b      	ldr	r3, [r1, #0]
{
    b6be:	b570      	push	{r4, r5, r6, lr}
    b6c0:	4605      	mov	r5, r0
    b6c2:	460c      	mov	r4, r1
    NRFX_ASSERT(p_cb->handler);
    b6c4:	b953      	cbnz	r3, b6dc <irq_handler+0x20>
    b6c6:	4912      	ldr	r1, [pc, #72]	; (b710 <irq_handler+0x54>)
    b6c8:	4812      	ldr	r0, [pc, #72]	; (b714 <irq_handler+0x58>)
    b6ca:	f240 129b 	movw	r2, #411	; 0x19b
    b6ce:	f003 fe7a 	bl	f3c6 <printk>
    b6d2:	480f      	ldr	r0, [pc, #60]	; (b710 <irq_handler+0x54>)
    b6d4:	f240 119b 	movw	r1, #411	; 0x19b
    b6d8:	f003 ff3a 	bl	f550 <assert_post_action>
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_spi_event_clear(NRF_SPI_Type *  p_reg,
                                           nrf_spi_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b6dc:	2300      	movs	r3, #0
    b6de:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108

    nrf_spi_event_clear(p_spi, NRF_SPI_EVENT_READY);
    NRFX_LOG_DEBUG("Event: NRF_SPI_EVENT_READY.");

    if (!transfer_byte(p_spi, p_cb))
    b6e2:	4621      	mov	r1, r4
    b6e4:	4628      	mov	r0, r5
    b6e6:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    b6ea:	f006 fca5 	bl	12038 <transfer_byte>
    b6ee:	b970      	cbnz	r0, b70e <irq_handler+0x52>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    b6f0:	7fa0      	ldrb	r0, [r4, #30]
    b6f2:	28ff      	cmp	r0, #255	; 0xff
    b6f4:	d001      	beq.n	b6fa <irq_handler+0x3e>
        nrf_gpio_pin_set(pin_number);
    b6f6:	f006 fced 	bl	120d4 <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
    b6fa:	2300      	movs	r3, #0
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    b6fc:	4620      	mov	r0, r4
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
    b6fe:	7223      	strb	r3, [r4, #8]
    p_cb->transfer_in_progress = false;
    b700:	7763      	strb	r3, [r4, #29]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    b702:	6861      	ldr	r1, [r4, #4]
    b704:	f850 3b08 	ldr.w	r3, [r0], #8
    {
        finish_transfer(p_cb);
    }
}
    b708:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    b70c:	4718      	bx	r3
}
    b70e:	bd70      	pop	{r4, r5, r6, pc}
    b710:	000149aa 	.word	0x000149aa
    b714:	00013904 	.word	0x00013904

0000b718 <nrfx_spi_init>:
{
    b718:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    b71c:	4680      	mov	r8, r0
    b71e:	4691      	mov	r9, r2
    b720:	469a      	mov	sl, r3
    NRFX_ASSERT(p_config);
    b722:	460c      	mov	r4, r1
    b724:	b941      	cbnz	r1, b738 <nrfx_spi_init+0x20>
    b726:	4956      	ldr	r1, [pc, #344]	; (b880 <nrfx_spi_init+0x168>)
    b728:	4856      	ldr	r0, [pc, #344]	; (b884 <nrfx_spi_init+0x16c>)
    b72a:	227c      	movs	r2, #124	; 0x7c
    b72c:	f003 fe4b 	bl	f3c6 <printk>
    b730:	4853      	ldr	r0, [pc, #332]	; (b880 <nrfx_spi_init+0x168>)
    b732:	217c      	movs	r1, #124	; 0x7c
    b734:	f003 ff0c 	bl	f550 <assert_post_action>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    b738:	f898 5004 	ldrb.w	r5, [r8, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    b73c:	4e52      	ldr	r6, [pc, #328]	; (b888 <nrfx_spi_init+0x170>)
    b73e:	2028      	movs	r0, #40	; 0x28
    b740:	4368      	muls	r0, r5
    b742:	1831      	adds	r1, r6, r0
    b744:	7f0b      	ldrb	r3, [r1, #28]
    b746:	2b00      	cmp	r3, #0
    b748:	f040 8098 	bne.w	b87c <nrfx_spi_init+0x164>
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    b74c:	f8d8 7000 	ldr.w	r7, [r8]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    b750:	7be3      	ldrb	r3, [r4, #15]
    p_cb->handler = handler;
    b752:	f846 9000 	str.w	r9, [r6, r0]
    p_cb->p_context = p_context;
    b756:	f8c1 a004 	str.w	sl, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    b75a:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
    b75e:	78e2      	ldrb	r2, [r4, #3]
    b760:	778a      	strb	r2, [r1, #30]
    p_cb->orc = p_config->orc;
    b762:	7962      	ldrb	r2, [r4, #5]
    b764:	77ca      	strb	r2, [r1, #31]
    if (!p_config->skip_gpio_cfg)
    b766:	2b00      	cmp	r3, #0
    b768:	d140      	bne.n	b7ec <nrfx_spi_init+0xd4>
    if (value == 0)
    b76a:	7b23      	ldrb	r3, [r4, #12]
        nrf_gpio_pin_write(p_config->sck_pin,
    b76c:	7820      	ldrb	r0, [r4, #0]
    b76e:	2b01      	cmp	r3, #1
    b770:	d87b      	bhi.n	b86a <nrfx_spi_init+0x152>
        nrf_gpio_pin_clear(pin_number);
    b772:	f006 fca2 	bl	120ba <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
    b776:	7823      	ldrb	r3, [r4, #0]
    b778:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b77a:	a801      	add	r0, sp, #4
    b77c:	f7ff ff6c 	bl	b658 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    b780:	9b01      	ldr	r3, [sp, #4]
    b782:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    b786:	2201      	movs	r2, #1
    b788:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    b78c:	7860      	ldrb	r0, [r4, #1]
    b78e:	28ff      	cmp	r0, #255	; 0xff
    b790:	d00c      	beq.n	b7ac <nrfx_spi_init+0x94>
        nrf_gpio_pin_clear(pin_number);
    b792:	f006 fc92 	bl	120ba <nrf_gpio_pin_clear>
            nrf_gpio_cfg_output(p_config->mosi_pin);
    b796:	7863      	ldrb	r3, [r4, #1]
    b798:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b79a:	a801      	add	r0, sp, #4
    b79c:	f7ff ff5c 	bl	b658 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    b7a0:	9b01      	ldr	r3, [sp, #4]
    b7a2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    b7a6:	2203      	movs	r2, #3
    b7a8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    b7ac:	78a3      	ldrb	r3, [r4, #2]
    b7ae:	2bff      	cmp	r3, #255	; 0xff
    b7b0:	d00c      	beq.n	b7cc <nrfx_spi_init+0xb4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b7b2:	a801      	add	r0, sp, #4
            nrf_gpio_cfg_input(p_config->miso_pin, p_config->miso_pull);
    b7b4:	f894 900e 	ldrb.w	r9, [r4, #14]
    b7b8:	9301      	str	r3, [sp, #4]
    b7ba:	f7ff ff4d 	bl	b658 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    b7be:	9b01      	ldr	r3, [sp, #4]
    b7c0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    b7c4:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    b7c8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
    b7cc:	78e0      	ldrb	r0, [r4, #3]
    b7ce:	28ff      	cmp	r0, #255	; 0xff
    b7d0:	d00c      	beq.n	b7ec <nrfx_spi_init+0xd4>
        nrf_gpio_pin_set(pin_number);
    b7d2:	f006 fc7f 	bl	120d4 <nrf_gpio_pin_set>
            nrf_gpio_cfg_output(p_config->ss_pin);
    b7d6:	78e3      	ldrb	r3, [r4, #3]
    b7d8:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b7da:	a801      	add	r0, sp, #4
    b7dc:	f7ff ff3c 	bl	b658 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    b7e0:	9b01      	ldr	r3, [sp, #4]
    b7e2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    b7e6:	2203      	movs	r2, #3
    b7e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    b7ec:	7c23      	ldrb	r3, [r4, #16]
    b7ee:	b993      	cbnz	r3, b816 <nrfx_spi_init+0xfe>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    b7f0:	7863      	ldrb	r3, [r4, #1]
        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    b7f2:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPI_PIN_NOT_CONNECTED;
    b7f4:	2bff      	cmp	r3, #255	; 0xff
    b7f6:	bf18      	it	ne
    b7f8:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    b7fa:	78a3      	ldrb	r3, [r4, #2]
                                        uint32_t       miso_pin)
{
#if defined(SPI_PSEL_SCK_CONNECT_Pos)
    p_reg->PSEL.SCK = sck_pin;
#else
    p_reg->PSELSCK  = sck_pin;
    b7fc:	f8c7 1508 	str.w	r1, [r7, #1288]	; 0x508
                            : NRF_SPI_PIN_NOT_CONNECTED;
    b800:	bf08      	it	eq
    b802:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPI_PIN_NOT_CONNECTED;
    b806:	2bff      	cmp	r3, #255	; 0xff
    b808:	bf08      	it	eq
    b80a:	f04f 33ff 	moveq.w	r3, #4294967295
#endif

#if defined(SPI_PSEL_MOSI_CONNECT_Pos)
    p_reg->PSEL.MOSI = mosi_pin;
#else
    p_reg->PSELMOSI = mosi_pin;
    b80e:	f8c7 250c 	str.w	r2, [r7, #1292]	; 0x50c
#endif

#if defined(SPI_PSEL_MISO_CONNECT_Pos)
    p_reg->PSEL.MISO = miso_pin;
#else
    p_reg->PSELMISO = miso_pin;
    b812:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    b816:	68a3      	ldr	r3, [r4, #8]
    b818:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    b81c:	7b63      	ldrb	r3, [r4, #13]
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
    b81e:	7b22      	ldrb	r2, [r4, #12]
    b820:	3b00      	subs	r3, #0
    b822:	bf18      	it	ne
    b824:	2301      	movne	r3, #1
    switch (spi_mode)
    b826:	2a02      	cmp	r2, #2
    b828:	d022      	beq.n	b870 <nrfx_spi_init+0x158>
    b82a:	2a03      	cmp	r2, #3
    b82c:	d023      	beq.n	b876 <nrfx_spi_init+0x15e>
    b82e:	2a01      	cmp	r2, #1
    b830:	d101      	bne.n	b836 <nrfx_spi_init+0x11e>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    b832:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    b836:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    b83a:	2301      	movs	r3, #1
    b83c:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
    if (p_cb->handler)
    b840:	2328      	movs	r3, #40	; 0x28
    b842:	436b      	muls	r3, r5
    b844:	58f3      	ldr	r3, [r6, r3]
    b846:	b12b      	cbz	r3, b854 <nrfx_spi_init+0x13c>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    b848:	f8d8 0000 	ldr.w	r0, [r8]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    b84c:	f340 3007 	sbfx	r0, r0, #12, #8
    b850:	f7fa f83c 	bl	58cc <arch_irq_enable>
    p_cb->transfer_in_progress = false;
    b854:	2328      	movs	r3, #40	; 0x28
    b856:	fb03 6505 	mla	r5, r3, r5, r6
    b85a:	2300      	movs	r3, #0
    b85c:	776b      	strb	r3, [r5, #29]
    return err_code;
    b85e:	480b      	ldr	r0, [pc, #44]	; (b88c <nrfx_spi_init+0x174>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    b860:	2301      	movs	r3, #1
    b862:	772b      	strb	r3, [r5, #28]
}
    b864:	b002      	add	sp, #8
    b866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        nrf_gpio_pin_set(pin_number);
    b86a:	f006 fc33 	bl	120d4 <nrf_gpio_pin_set>
    b86e:	e782      	b.n	b776 <nrfx_spi_init+0x5e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    b870:	f043 0304 	orr.w	r3, r3, #4
        break;
    b874:	e7df      	b.n	b836 <nrfx_spi_init+0x11e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    b876:	f043 0306 	orr.w	r3, r3, #6
        break;
    b87a:	e7dc      	b.n	b836 <nrfx_spi_init+0x11e>
        return err_code;
    b87c:	4804      	ldr	r0, [pc, #16]	; (b890 <nrfx_spi_init+0x178>)
    b87e:	e7f1      	b.n	b864 <nrfx_spi_init+0x14c>
    b880:	000149aa 	.word	0x000149aa
    b884:	00013904 	.word	0x00013904
    b888:	20000b28 	.word	0x20000b28
    b88c:	0bad0000 	.word	0x0bad0000
    b890:	0bad0005 	.word	0x0bad0005

0000b894 <nrfx_spi_uninit>:
{
    b894:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    b896:	4d22      	ldr	r5, [pc, #136]	; (b920 <nrfx_spi_uninit+0x8c>)
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    b898:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    b89a:	2328      	movs	r3, #40	; 0x28
    b89c:	fb03 5304 	mla	r3, r3, r4, r5
{
    b8a0:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    b8a2:	7f1b      	ldrb	r3, [r3, #28]
    b8a4:	b943      	cbnz	r3, b8b8 <nrfx_spi_uninit+0x24>
    b8a6:	491f      	ldr	r1, [pc, #124]	; (b924 <nrfx_spi_uninit+0x90>)
    b8a8:	481f      	ldr	r0, [pc, #124]	; (b928 <nrfx_spi_uninit+0x94>)
    b8aa:	22c1      	movs	r2, #193	; 0xc1
    b8ac:	f003 fd8b 	bl	f3c6 <printk>
    b8b0:	481c      	ldr	r0, [pc, #112]	; (b924 <nrfx_spi_uninit+0x90>)
    b8b2:	21c1      	movs	r1, #193	; 0xc1
    b8b4:	f003 fe4c 	bl	f550 <assert_post_action>
    if (p_cb->handler)
    b8b8:	2328      	movs	r3, #40	; 0x28
    b8ba:	4363      	muls	r3, r4
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    b8bc:	6836      	ldr	r6, [r6, #0]
    if (p_cb->handler)
    b8be:	58eb      	ldr	r3, [r5, r3]
    b8c0:	b133      	cbz	r3, b8d0 <nrfx_spi_uninit+0x3c>
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    b8c2:	f346 3007 	sbfx	r0, r6, #12, #8
    b8c6:	f7fa f811 	bl	58ec <arch_irq_disable>
    p_reg->INTENCLR = mask;
    b8ca:	2304      	movs	r3, #4
    b8cc:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
    b8d0:	2300      	movs	r3, #0
    b8d2:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
    if (!p_cb->skip_gpio_cfg)
    b8d6:	2328      	movs	r3, #40	; 0x28
    b8d8:	fb03 5304 	mla	r3, r3, r4, r5
    b8dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    b8e0:	b9bb      	cbnz	r3, b912 <nrfx_spi_uninit+0x7e>
    return p_reg->PSELSCK;
    b8e2:	f8d6 0508 	ldr.w	r0, [r6, #1288]	; 0x508
        nrf_gpio_cfg_default(nrf_spi_sck_pin_get(p_spi));
    b8e6:	f006 fbda 	bl	1209e <nrf_gpio_cfg_default>
    return p_reg->PSELMISO;
    b8ea:	f8d6 0510 	ldr.w	r0, [r6, #1296]	; 0x510
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
    b8ee:	1c42      	adds	r2, r0, #1
    b8f0:	d001      	beq.n	b8f6 <nrfx_spi_uninit+0x62>
            nrf_gpio_cfg_default(miso_pin);
    b8f2:	f006 fbd4 	bl	1209e <nrf_gpio_cfg_default>
    return p_reg->PSELMOSI;
    b8f6:	f8d6 050c 	ldr.w	r0, [r6, #1292]	; 0x50c
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
    b8fa:	1c43      	adds	r3, r0, #1
    b8fc:	d001      	beq.n	b902 <nrfx_spi_uninit+0x6e>
            nrf_gpio_cfg_default(mosi_pin);
    b8fe:	f006 fbce 	bl	1209e <nrf_gpio_cfg_default>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    b902:	2328      	movs	r3, #40	; 0x28
    b904:	fb03 5304 	mla	r3, r3, r4, r5
    b908:	7f98      	ldrb	r0, [r3, #30]
    b90a:	28ff      	cmp	r0, #255	; 0xff
    b90c:	d001      	beq.n	b912 <nrfx_spi_uninit+0x7e>
            nrf_gpio_cfg_default(p_cb->ss_pin);
    b90e:	f006 fbc6 	bl	1209e <nrf_gpio_cfg_default>
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    b912:	2328      	movs	r3, #40	; 0x28
    b914:	fb03 5404 	mla	r4, r3, r4, r5
    b918:	2300      	movs	r3, #0
    b91a:	7723      	strb	r3, [r4, #28]
}
    b91c:	bd70      	pop	{r4, r5, r6, pc}
    b91e:	bf00      	nop
    b920:	20000b28 	.word	0x20000b28
    b924:	000149aa 	.word	0x000149aa
    b928:	00013904 	.word	0x00013904

0000b92c <nrfx_spi_xfer>:
{
    b92c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    b930:	4e50      	ldr	r6, [pc, #320]	; (ba74 <nrfx_spi_xfer+0x148>)
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    b932:	7905      	ldrb	r5, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    b934:	2328      	movs	r3, #40	; 0x28
    b936:	fb03 6305 	mla	r3, r3, r5, r6
{
    b93a:	4681      	mov	r9, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    b93c:	7f1b      	ldrb	r3, [r3, #28]
{
    b93e:	460c      	mov	r4, r1
    b940:	4690      	mov	r8, r2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    b942:	b953      	cbnz	r3, b95a <nrfx_spi_xfer+0x2e>
    b944:	494c      	ldr	r1, [pc, #304]	; (ba78 <nrfx_spi_xfer+0x14c>)
    b946:	484d      	ldr	r0, [pc, #308]	; (ba7c <nrfx_spi_xfer+0x150>)
    b948:	f44f 72b3 	mov.w	r2, #358	; 0x166
    b94c:	f003 fd3b 	bl	f3c6 <printk>
    b950:	4849      	ldr	r0, [pc, #292]	; (ba78 <nrfx_spi_xfer+0x14c>)
    b952:	f44f 71b3 	mov.w	r1, #358	; 0x166
    b956:	f003 fdfb 	bl	f550 <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    b95a:	6823      	ldr	r3, [r4, #0]
    b95c:	b963      	cbnz	r3, b978 <nrfx_spi_xfer+0x4c>
    b95e:	6863      	ldr	r3, [r4, #4]
    b960:	b153      	cbz	r3, b978 <nrfx_spi_xfer+0x4c>
    b962:	4945      	ldr	r1, [pc, #276]	; (ba78 <nrfx_spi_xfer+0x14c>)
    b964:	4845      	ldr	r0, [pc, #276]	; (ba7c <nrfx_spi_xfer+0x150>)
    b966:	f240 1267 	movw	r2, #359	; 0x167
    b96a:	f003 fd2c 	bl	f3c6 <printk>
    b96e:	4842      	ldr	r0, [pc, #264]	; (ba78 <nrfx_spi_xfer+0x14c>)
    b970:	f240 1167 	movw	r1, #359	; 0x167
    b974:	f003 fdec 	bl	f550 <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
    b978:	68a3      	ldr	r3, [r4, #8]
    b97a:	b963      	cbnz	r3, b996 <nrfx_spi_xfer+0x6a>
    b97c:	68e3      	ldr	r3, [r4, #12]
    b97e:	b153      	cbz	r3, b996 <nrfx_spi_xfer+0x6a>
    b980:	493d      	ldr	r1, [pc, #244]	; (ba78 <nrfx_spi_xfer+0x14c>)
    b982:	483e      	ldr	r0, [pc, #248]	; (ba7c <nrfx_spi_xfer+0x150>)
    b984:	f44f 72b4 	mov.w	r2, #360	; 0x168
    b988:	f003 fd1d 	bl	f3c6 <printk>
    b98c:	483a      	ldr	r0, [pc, #232]	; (ba78 <nrfx_spi_xfer+0x14c>)
    b98e:	f44f 71b4 	mov.w	r1, #360	; 0x168
    b992:	f003 fddd 	bl	f550 <assert_post_action>
    if (p_cb->transfer_in_progress)
    b996:	2328      	movs	r3, #40	; 0x28
    b998:	436b      	muls	r3, r5
    b99a:	18f2      	adds	r2, r6, r3
    b99c:	7f51      	ldrb	r1, [r2, #29]
    b99e:	2900      	cmp	r1, #0
    b9a0:	d165      	bne.n	ba6e <nrfx_spi_xfer+0x142>
        if (p_cb->handler)
    b9a2:	58f3      	ldr	r3, [r6, r3]
    b9a4:	b10b      	cbz	r3, b9aa <nrfx_spi_xfer+0x7e>
            p_cb->transfer_in_progress = true;
    b9a6:	2301      	movs	r3, #1
    b9a8:	7753      	strb	r3, [r2, #29]
    p_cb->evt.xfer_desc = *p_xfer_desc;
    b9aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    b9ae:	2728      	movs	r7, #40	; 0x28
    b9b0:	fb07 6705 	mla	r7, r7, r5, r6
    b9b4:	f107 0c0c 	add.w	ip, r7, #12
    b9b8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    b9bc:	7fb8      	ldrb	r0, [r7, #30]
    p_cb->abort = false;
    b9be:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    b9c0:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
    b9c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    b9c6:	d001      	beq.n	b9cc <nrfx_spi_xfer+0xa0>
        nrf_gpio_pin_clear(pin_number);
    b9c8:	f006 fb77 	bl	120ba <nrf_gpio_pin_clear>
    if (flags)
    b9cc:	2328      	movs	r3, #40	; 0x28
    b9ce:	f1b8 0f00 	cmp.w	r8, #0
    b9d2:	d006      	beq.n	b9e2 <nrfx_spi_xfer+0xb6>
        p_cb->transfer_in_progress = false;
    b9d4:	fb03 6505 	mla	r5, r3, r5, r6
        err_code = NRFX_ERROR_NOT_SUPPORTED;
    b9d8:	4829      	ldr	r0, [pc, #164]	; (ba80 <nrfx_spi_xfer+0x154>)
        p_cb->transfer_in_progress = false;
    b9da:	2300      	movs	r3, #0
    b9dc:	776b      	strb	r3, [r5, #29]
}
    b9de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
    b9e2:	f8d9 7000 	ldr.w	r7, [r9]
    p_cb->bytes_transferred = 0;
    b9e6:	fb03 6305 	mla	r3, r3, r5, r6
    p_reg->INTENCLR = mask;
    b9ea:	2204      	movs	r2, #4
    b9ec:	f8c7 2308 	str.w	r2, [r7, #776]	; 0x308
    b9f0:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b9f4:	f8c7 8108 	str.w	r8, [r7, #264]	; 0x108
    b9f8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
    b9fc:	6862      	ldr	r2, [r4, #4]
    nrf_spi_txd_set(p_spi,
    b9fe:	b192      	cbz	r2, ba26 <nrfx_spi_xfer+0xfa>
    ba00:	6823      	ldr	r3, [r4, #0]
    ba02:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
    ba04:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
    ba08:	2a01      	cmp	r2, #1
    ba0a:	d90e      	bls.n	ba2a <nrfx_spi_xfer+0xfe>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
    ba0c:	6823      	ldr	r3, [r4, #0]
    ba0e:	785b      	ldrb	r3, [r3, #1]
    ba10:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
    if (p_cb->handler)
    ba14:	2328      	movs	r3, #40	; 0x28
    ba16:	436b      	muls	r3, r5
    ba18:	58f4      	ldr	r4, [r6, r3]
    ba1a:	b174      	cbz	r4, ba3a <nrfx_spi_xfer+0x10e>
    p_reg->INTENSET = mask;
    ba1c:	2304      	movs	r3, #4
    ba1e:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
    ba22:	4818      	ldr	r0, [pc, #96]	; (ba84 <nrfx_spi_xfer+0x158>)
    ba24:	e7db      	b.n	b9de <nrfx_spi_xfer+0xb2>
    nrf_spi_txd_set(p_spi,
    ba26:	7fdb      	ldrb	r3, [r3, #31]
    ba28:	e7ec      	b.n	ba04 <nrfx_spi_xfer+0xd8>
    else if (p_xfer_desc->rx_length > 1)
    ba2a:	68e3      	ldr	r3, [r4, #12]
    ba2c:	2b01      	cmp	r3, #1
    ba2e:	d9f1      	bls.n	ba14 <nrfx_spi_xfer+0xe8>
        nrf_spi_txd_set(p_spi, p_cb->orc);
    ba30:	2328      	movs	r3, #40	; 0x28
    ba32:	fb03 6305 	mla	r3, r3, r5, r6
    p_reg->TXD = data;
    ba36:	7fdb      	ldrb	r3, [r3, #31]
    ba38:	e7ea      	b.n	ba10 <nrfx_spi_xfer+0xe4>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    ba3a:	eb05 0185 	add.w	r1, r5, r5, lsl #2
    ba3e:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ba42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
    ba46:	2b00      	cmp	r3, #0
    ba48:	d0fb      	beq.n	ba42 <nrfx_spi_xfer+0x116>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ba4a:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
    ba4e:	4638      	mov	r0, r7
    ba50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    ba54:	f006 faf0 	bl	12038 <transfer_byte>
    ba58:	2800      	cmp	r0, #0
    ba5a:	d1f2      	bne.n	ba42 <nrfx_spi_xfer+0x116>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    ba5c:	2328      	movs	r3, #40	; 0x28
    ba5e:	fb03 6505 	mla	r5, r3, r5, r6
    ba62:	7fa8      	ldrb	r0, [r5, #30]
    ba64:	28ff      	cmp	r0, #255	; 0xff
    ba66:	d0dc      	beq.n	ba22 <nrfx_spi_xfer+0xf6>
        nrf_gpio_pin_set(pin_number);
    ba68:	f006 fb34 	bl	120d4 <nrf_gpio_pin_set>
    ba6c:	e7d9      	b.n	ba22 <nrfx_spi_xfer+0xf6>
        return err_code;
    ba6e:	4806      	ldr	r0, [pc, #24]	; (ba88 <nrfx_spi_xfer+0x15c>)
    ba70:	e7b5      	b.n	b9de <nrfx_spi_xfer+0xb2>
    ba72:	bf00      	nop
    ba74:	20000b28 	.word	0x20000b28
    ba78:	000149aa 	.word	0x000149aa
    ba7c:	00013904 	.word	0x00013904
    ba80:	0bad0003 	.word	0x0bad0003
    ba84:	0bad0000 	.word	0x0bad0000
    ba88:	0bad000b 	.word	0x0bad000b

0000ba8c <nrfx_spi_0_irq_handler>:

#if NRFX_CHECK(NRFX_SPI0_ENABLED)
void nrfx_spi_0_irq_handler(void)
{
    irq_handler(NRF_SPI0, &m_cb[NRFX_SPI0_INST_IDX]);
    ba8c:	4901      	ldr	r1, [pc, #4]	; (ba94 <nrfx_spi_0_irq_handler+0x8>)
    ba8e:	4802      	ldr	r0, [pc, #8]	; (ba98 <nrfx_spi_0_irq_handler+0xc>)
    ba90:	f7ff be14 	b.w	b6bc <irq_handler>
    ba94:	20000b28 	.word	0x20000b28
    ba98:	40003000 	.word	0x40003000

0000ba9c <nrfx_spi_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
    ba9c:	4902      	ldr	r1, [pc, #8]	; (baa8 <nrfx_spi_1_irq_handler+0xc>)
    ba9e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    baa2:	f7ff be0b 	b.w	b6bc <irq_handler>
    baa6:	bf00      	nop
    baa8:	20000b50 	.word	0x20000b50

0000baac <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    baac:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    baae:	4c11      	ldr	r4, [pc, #68]	; (baf4 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    bab0:	4a11      	ldr	r2, [pc, #68]	; (baf8 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    bab2:	4912      	ldr	r1, [pc, #72]	; (bafc <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    bab4:	2303      	movs	r3, #3
    bab6:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    bab8:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    baba:	4b11      	ldr	r3, [pc, #68]	; (bb00 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    babc:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    babe:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    bac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    bac4:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    bac6:	2300      	movs	r3, #0
    bac8:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    baca:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    bacc:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    bace:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    bad0:	4a0c      	ldr	r2, [pc, #48]	; (bb04 <_DoInit+0x58>)
    bad2:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    bad4:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    bad6:	2210      	movs	r2, #16
    bad8:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    bada:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    badc:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    bade:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    bae0:	f006 fd4a 	bl	12578 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    bae4:	4908      	ldr	r1, [pc, #32]	; (bb08 <_DoInit+0x5c>)
    bae6:	4620      	mov	r0, r4
    bae8:	f006 fd46 	bl	12578 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    baec:	2320      	movs	r3, #32
    baee:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    baf0:	bd10      	pop	{r4, pc}
    baf2:	bf00      	nop
    baf4:	20000b78 	.word	0x20000b78
    baf8:	000149e5 	.word	0x000149e5
    bafc:	000149ee 	.word	0x000149ee
    bb00:	20001208 	.word	0x20001208
    bb04:	200011f8 	.word	0x200011f8
    bb08:	000149f2 	.word	0x000149f2

0000bb0c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    bb0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    bb10:	4f23      	ldr	r7, [pc, #140]	; (bba0 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    bb12:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    bb16:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    bb18:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    bb1c:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    bb1e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    bb20:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    bb22:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    bb24:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    bb26:	d834      	bhi.n	bb92 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    bb28:	f8d2 a020 	ldr.w	sl, [r2, #32]
    bb2c:	ebaa 0905 	sub.w	r9, sl, r5
    bb30:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    bb34:	4294      	cmp	r4, r2
    bb36:	d811      	bhi.n	bb5c <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    bb38:	f04f 0918 	mov.w	r9, #24
    bb3c:	fb06 9309 	mla	r3, r6, r9, r9
    bb40:	443b      	add	r3, r7
    bb42:	4622      	mov	r2, r4
    bb44:	6858      	ldr	r0, [r3, #4]
    bb46:	4641      	mov	r1, r8
    bb48:	4428      	add	r0, r5
    bb4a:	f006 fbcd 	bl	122e8 <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    bb4e:	fb09 7606 	mla	r6, r9, r6, r7
    bb52:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    bb54:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    bb56:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    bb58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    bb5c:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    bb5e:	429c      	cmp	r4, r3
    bb60:	d81b      	bhi.n	bb9a <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    bb62:	fb00 bb0b 	mla	fp, r0, fp, fp
    bb66:	44bb      	add	fp, r7
    bb68:	464a      	mov	r2, r9
    bb6a:	f8db 0004 	ldr.w	r0, [fp, #4]
    bb6e:	442c      	add	r4, r5
    bb70:	4428      	add	r0, r5
    bb72:	f006 fbb9 	bl	122e8 <memcpy>
      if (NumBytes) {
    bb76:	ebb4 040a 	subs.w	r4, r4, sl
    bb7a:	d006      	beq.n	bb8a <SEGGER_RTT_WriteSkipNoLock+0x7e>
    bb7c:	f8db 0004 	ldr.w	r0, [fp, #4]
    bb80:	4622      	mov	r2, r4
    bb82:	eb08 0109 	add.w	r1, r8, r9
    bb86:	f006 fbaf 	bl	122e8 <memcpy>
      pRing->WrOff = NumBytes;
    bb8a:	2018      	movs	r0, #24
    bb8c:	fb00 7606 	mla	r6, r0, r6, r7
    bb90:	e7e0      	b.n	bb54 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    bb92:	3b01      	subs	r3, #1
    bb94:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    bb96:	42a3      	cmp	r3, r4
    bb98:	d2ce      	bcs.n	bb38 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    bb9a:	2000      	movs	r0, #0
    bb9c:	e7dc      	b.n	bb58 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    bb9e:	bf00      	nop
    bba0:	20000b78 	.word	0x20000b78

0000bba4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    bba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    bba6:	4c18      	ldr	r4, [pc, #96]	; (bc08 <SEGGER_RTT_WriteNoLock+0x64>)
    bba8:	2318      	movs	r3, #24
    bbaa:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    bbae:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    bbb2:	4425      	add	r5, r4
  switch (pRing->Flags) {
    bbb4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    bbb6:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    bbb8:	460f      	mov	r7, r1
    bbba:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    bbbc:	d00f      	beq.n	bbde <SEGGER_RTT_WriteNoLock+0x3a>
    bbbe:	2c02      	cmp	r4, #2
    bbc0:	d01a      	beq.n	bbf8 <SEGGER_RTT_WriteNoLock+0x54>
    bbc2:	b9f4      	cbnz	r4, bc02 <SEGGER_RTT_WriteNoLock+0x5e>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    bbc4:	4628      	mov	r0, r5
    bbc6:	f006 fa92 	bl	120ee <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    bbca:	4286      	cmp	r6, r0
    bbcc:	d805      	bhi.n	bbda <SEGGER_RTT_WriteNoLock+0x36>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    bbce:	4632      	mov	r2, r6
    bbd0:	4639      	mov	r1, r7
    bbd2:	4628      	mov	r0, r5
    bbd4:	f006 fa99 	bl	1210a <_WriteNoCheck>
    bbd8:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    bbda:	4620      	mov	r0, r4
    bbdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    bbde:	4628      	mov	r0, r5
    bbe0:	f006 fa85 	bl	120ee <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    bbe4:	4286      	cmp	r6, r0
    bbe6:	4634      	mov	r4, r6
    bbe8:	bf28      	it	cs
    bbea:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    bbec:	4622      	mov	r2, r4
    bbee:	4639      	mov	r1, r7
    bbf0:	4628      	mov	r0, r5
    bbf2:	f006 fa8a 	bl	1210a <_WriteNoCheck>
    break;
    bbf6:	e7f0      	b.n	bbda <SEGGER_RTT_WriteNoLock+0x36>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    bbf8:	4628      	mov	r0, r5
}
    bbfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    bbfe:	f006 baa1 	b.w	12144 <_WriteBlocking>
  switch (pRing->Flags) {
    bc02:	2400      	movs	r4, #0
  return Status;
    bc04:	e7e9      	b.n	bbda <SEGGER_RTT_WriteNoLock+0x36>
    bc06:	bf00      	nop
    bc08:	20000b78 	.word	0x20000b78

0000bc0c <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    bc0c:	4b03      	ldr	r3, [pc, #12]	; (bc1c <SEGGER_RTT_HasDataUp+0x10>)
    bc0e:	2218      	movs	r2, #24
    bc10:	fb02 3300 	mla	r3, r2, r0, r3
    bc14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    bc16:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    bc18:	1a80      	subs	r0, r0, r2
    bc1a:	4770      	bx	lr
    bc1c:	20000b78 	.word	0x20000b78

0000bc20 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    bc20:	4b0e      	ldr	r3, [pc, #56]	; (bc5c <z_sys_init_run_level+0x3c>)
{
    bc22:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    bc24:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    bc28:	3001      	adds	r0, #1
    bc2a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    bc2e:	42a6      	cmp	r6, r4
    bc30:	d800      	bhi.n	bc34 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    bc32:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    bc34:	e9d4 3500 	ldrd	r3, r5, [r4]
    bc38:	4628      	mov	r0, r5
    bc3a:	4798      	blx	r3
		if (dev != NULL) {
    bc3c:	b165      	cbz	r5, bc58 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    bc3e:	68eb      	ldr	r3, [r5, #12]
    bc40:	b130      	cbz	r0, bc50 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    bc42:	2800      	cmp	r0, #0
    bc44:	bfb8      	it	lt
    bc46:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    bc48:	28ff      	cmp	r0, #255	; 0xff
    bc4a:	bfa8      	it	ge
    bc4c:	20ff      	movge	r0, #255	; 0xff
    bc4e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    bc50:	785a      	ldrb	r2, [r3, #1]
    bc52:	f042 0201 	orr.w	r2, r2, #1
    bc56:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    bc58:	3408      	adds	r4, #8
    bc5a:	e7e8      	b.n	bc2e <z_sys_init_run_level+0xe>
    bc5c:	000134c8 	.word	0x000134c8

0000bc60 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    bc60:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    bc62:	4605      	mov	r5, r0
    bc64:	b910      	cbnz	r0, bc6c <z_impl_device_get_binding+0xc>
		return NULL;
    bc66:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    bc68:	4620      	mov	r0, r4
    bc6a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    bc6c:	7803      	ldrb	r3, [r0, #0]
    bc6e:	2b00      	cmp	r3, #0
    bc70:	d0f9      	beq.n	bc66 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    bc72:	4a0f      	ldr	r2, [pc, #60]	; (bcb0 <z_impl_device_get_binding+0x50>)
    bc74:	4c0f      	ldr	r4, [pc, #60]	; (bcb4 <z_impl_device_get_binding+0x54>)
    bc76:	4616      	mov	r6, r2
    bc78:	4294      	cmp	r4, r2
    bc7a:	d108      	bne.n	bc8e <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    bc7c:	4c0d      	ldr	r4, [pc, #52]	; (bcb4 <z_impl_device_get_binding+0x54>)
    bc7e:	42b4      	cmp	r4, r6
    bc80:	d0f1      	beq.n	bc66 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    bc82:	4620      	mov	r0, r4
    bc84:	f006 fa8f 	bl	121a6 <z_device_ready>
    bc88:	b950      	cbnz	r0, bca0 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    bc8a:	3418      	adds	r4, #24
    bc8c:	e7f7      	b.n	bc7e <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    bc8e:	4620      	mov	r0, r4
    bc90:	f006 fa89 	bl	121a6 <z_device_ready>
    bc94:	b110      	cbz	r0, bc9c <z_impl_device_get_binding+0x3c>
    bc96:	6823      	ldr	r3, [r4, #0]
    bc98:	42ab      	cmp	r3, r5
    bc9a:	d0e5      	beq.n	bc68 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    bc9c:	3418      	adds	r4, #24
    bc9e:	e7eb      	b.n	bc78 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    bca0:	6821      	ldr	r1, [r4, #0]
    bca2:	4628      	mov	r0, r5
    bca4:	f7f5 fbc4 	bl	1430 <strcmp>
    bca8:	2800      	cmp	r0, #0
    bcaa:	d1ee      	bne.n	bc8a <z_impl_device_get_binding+0x2a>
    bcac:	e7dc      	b.n	bc68 <z_impl_device_get_binding+0x8>
    bcae:	bf00      	nop
    bcb0:	00012f6c 	.word	0x00012f6c
    bcb4:	00012ef4 	.word	0x00012ef4

0000bcb8 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    bcb8:	4b01      	ldr	r3, [pc, #4]	; (bcc0 <z_impl_z_errno+0x8>)
    bcba:	6898      	ldr	r0, [r3, #8]
}
    bcbc:	3060      	adds	r0, #96	; 0x60
    bcbe:	4770      	bx	lr
    bcc0:	20000c20 	.word	0x20000c20

0000bcc4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    bcc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    bcc8:	4605      	mov	r5, r0
    bcca:	460f      	mov	r7, r1
	__asm__ volatile(
    bccc:	f04f 0320 	mov.w	r3, #32
    bcd0:	f3ef 8811 	mrs	r8, BASEPRI
    bcd4:	f383 8812 	msr	BASEPRI_MAX, r3
    bcd8:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    bcdc:	f001 fcb4 	bl	d648 <z_impl_z_current_get>
    bce0:	4c25      	ldr	r4, [pc, #148]	; (bd78 <z_fatal_error+0xb4>)
    bce2:	4b26      	ldr	r3, [pc, #152]	; (bd7c <z_fatal_error+0xb8>)
    bce4:	1ae4      	subs	r4, r4, r3
    bce6:	2d04      	cmp	r5, #4
    bce8:	ea4f 04d4 	mov.w	r4, r4, lsr #3
    bcec:	bf96      	itet	ls
    bcee:	4a24      	ldrls	r2, [pc, #144]	; (bd80 <z_fatal_error+0xbc>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    bcf0:	4a24      	ldrhi	r2, [pc, #144]	; (bd84 <z_fatal_error+0xc0>)
    bcf2:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
    bcf6:	01a4      	lsls	r4, r4, #6
    bcf8:	f044 0301 	orr.w	r3, r4, #1
    bcfc:	4606      	mov	r6, r0
    bcfe:	f8ad 3000 	strh.w	r3, [sp]
    bd02:	4821      	ldr	r0, [pc, #132]	; (bd88 <z_fatal_error+0xc4>)
    bd04:	2300      	movs	r3, #0
    bd06:	4629      	mov	r1, r5
    bd08:	f003 fc8a 	bl	f620 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    bd0c:	b147      	cbz	r7, bd20 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    bd0e:	69fb      	ldr	r3, [r7, #28]
    bd10:	f3c3 0308 	ubfx	r3, r3, #0, #9
    bd14:	b123      	cbz	r3, bd20 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
    bd16:	481d      	ldr	r0, [pc, #116]	; (bd8c <z_fatal_error+0xc8>)
    bd18:	f044 0101 	orr.w	r1, r4, #1
    bd1c:	f003 fc46 	bl	f5ac <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    bd20:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    bd24:	b12e      	cbz	r6, bd32 <z_fatal_error+0x6e>
    bd26:	4630      	mov	r0, r6
    bd28:	f006 fa6c 	bl	12204 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    bd2c:	b108      	cbz	r0, bd32 <z_fatal_error+0x6e>
    bd2e:	7803      	ldrb	r3, [r0, #0]
    bd30:	b903      	cbnz	r3, bd34 <z_fatal_error+0x70>
		thread_name = "unknown";
    bd32:	4817      	ldr	r0, [pc, #92]	; (bd90 <z_fatal_error+0xcc>)
    bd34:	f7f8 fe34 	bl	49a0 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
    bd38:	4623      	mov	r3, r4
    bd3a:	4602      	mov	r2, r0
    bd3c:	4631      	mov	r1, r6
    bd3e:	4815      	ldr	r0, [pc, #84]	; (bd94 <z_fatal_error+0xd0>)
    bd40:	f003 fc55 	bl	f5ee <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    bd44:	4639      	mov	r1, r7
    bd46:	4628      	mov	r0, r5
    bd48:	f7fc fe58 	bl	89fc <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    bd4c:	2d04      	cmp	r5, #4
    bd4e:	d108      	bne.n	bd62 <z_fatal_error+0x9e>
    bd50:	4911      	ldr	r1, [pc, #68]	; (bd98 <z_fatal_error+0xd4>)
    bd52:	4812      	ldr	r0, [pc, #72]	; (bd9c <z_fatal_error+0xd8>)
    bd54:	228f      	movs	r2, #143	; 0x8f
    bd56:	f003 fb36 	bl	f3c6 <printk>
    bd5a:	480f      	ldr	r0, [pc, #60]	; (bd98 <z_fatal_error+0xd4>)
    bd5c:	218f      	movs	r1, #143	; 0x8f
    bd5e:	f003 fbf7 	bl	f550 <assert_post_action>
	__asm__ volatile(
    bd62:	f388 8811 	msr	BASEPRI, r8
    bd66:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    bd6a:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    bd6c:	b002      	add	sp, #8
    bd6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bd72:	f7fa ba01 	b.w	6178 <z_impl_k_thread_abort>
    bd76:	bf00      	nop
    bd78:	000130dc 	.word	0x000130dc
    bd7c:	000130a4 	.word	0x000130a4
    bd80:	000134e0 	.word	0x000134e0
    bd84:	000149f9 	.word	0x000149f9
    bd88:	00014a0f 	.word	0x00014a0f
    bd8c:	00014a37 	.word	0x00014a37
    bd90:	00014a07 	.word	0x00014a07
    bd94:	00014a58 	.word	0x00014a58
    bd98:	00014a70 	.word	0x00014a70
    bd9c:	00013904 	.word	0x00013904

0000bda0 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    bda0:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    bda2:	2300      	movs	r3, #0
{
    bda4:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    bda6:	2201      	movs	r2, #1
    bda8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    bdac:	220f      	movs	r2, #15
    bdae:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
    bdb2:	4c0d      	ldr	r4, [pc, #52]	; (bde8 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    bdb4:	4a0d      	ldr	r2, [pc, #52]	; (bdec <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    bdb6:	9301      	str	r3, [sp, #4]
    bdb8:	490d      	ldr	r1, [pc, #52]	; (bdf0 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    bdba:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
    bdbc:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    bdc0:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    bdc4:	f44f 75b0 	mov.w	r5, #352	; 0x160
    bdc8:	9300      	str	r3, [sp, #0]
    bdca:	fb05 1100 	mla	r1, r5, r0, r1
    bdce:	4b09      	ldr	r3, [pc, #36]	; (bdf4 <init_idle_thread+0x54>)
    bdd0:	f44f 72a0 	mov.w	r2, #320	; 0x140
    bdd4:	4620      	mov	r0, r4
    bdd6:	f000 f987 	bl	c0e8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    bdda:	7b63      	ldrb	r3, [r4, #13]
    bddc:	f023 0304 	bic.w	r3, r3, #4
    bde0:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    bde2:	b007      	add	sp, #28
    bde4:	bd30      	pop	{r4, r5, pc}
    bde6:	bf00      	nop
    bde8:	200004c8 	.word	0x200004c8
    bdec:	20000c20 	.word	0x20000c20
    bdf0:	20002960 	.word	0x20002960
    bdf4:	0000c371 	.word	0x0000c371

0000bdf8 <bg_thread_main>:
{
    bdf8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    bdfa:	4b0a      	ldr	r3, [pc, #40]	; (be24 <bg_thread_main+0x2c>)
    bdfc:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    bdfe:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    be00:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    be02:	f7ff ff0d 	bl	bc20 <z_sys_init_run_level>
	boot_banner();
    be06:	f002 f875 	bl	def4 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    be0a:	2003      	movs	r0, #3
    be0c:	f7ff ff08 	bl	bc20 <z_sys_init_run_level>
	z_init_static_threads();
    be10:	f000 fa08 	bl	c224 <z_init_static_threads>
	main();
    be14:	f7f6 ff9a 	bl	2d4c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    be18:	4a03      	ldr	r2, [pc, #12]	; (be28 <bg_thread_main+0x30>)
    be1a:	7b13      	ldrb	r3, [r2, #12]
    be1c:	f023 0301 	bic.w	r3, r3, #1
    be20:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    be22:	bd08      	pop	{r3, pc}
    be24:	20001608 	.word	0x20001608
    be28:	20000548 	.word	0x20000548

0000be2c <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    be2c:	4802      	ldr	r0, [pc, #8]	; (be38 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
    be2e:	4a03      	ldr	r2, [pc, #12]	; (be3c <z_bss_zero+0x10>)
    be30:	2100      	movs	r1, #0
    be32:	1a12      	subs	r2, r2, r0
    be34:	f006 ba66 	b.w	12304 <memset>
    be38:	200003f0 	.word	0x200003f0
    be3c:	20001610 	.word	0x20001610

0000be40 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    be40:	b580      	push	{r7, lr}
    be42:	b0a6      	sub	sp, #152	; 0x98
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    be44:	f7f8 fcd8 	bl	47f8 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    be48:	f8df 80d4 	ldr.w	r8, [pc, #212]	; bf20 <z_cstart+0xe0>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    be4c:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    be50:	4d2d      	ldr	r5, [pc, #180]	; (bf08 <z_cstart+0xc8>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    be52:	4e2e      	ldr	r6, [pc, #184]	; (bf0c <z_cstart+0xcc>)
    be54:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    be56:	f8df 90cc 	ldr.w	r9, [pc, #204]	; bf24 <z_cstart+0xe4>
    be5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    be5e:	2400      	movs	r4, #0
    be60:	616b      	str	r3, [r5, #20]
    be62:	23e0      	movs	r3, #224	; 0xe0
    be64:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    be68:	77ec      	strb	r4, [r5, #31]
    be6a:	762c      	strb	r4, [r5, #24]
    be6c:	766c      	strb	r4, [r5, #25]
    be6e:	76ac      	strb	r4, [r5, #26]
    be70:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    be74:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    be76:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    be7a:	626b      	str	r3, [r5, #36]	; 0x24
    be7c:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    be80:	f7fa f8f0 	bl	6064 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    be84:	f7f9 fccc 	bl	5820 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    be88:	f04f 33ff 	mov.w	r3, #4294967295
    be8c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    be8e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    be90:	f7fa fa54 	bl	633c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    be94:	f7fa f982 	bl	619c <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    be98:	f240 1301 	movw	r3, #257	; 0x101
    be9c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    bea0:	ab06      	add	r3, sp, #24
    bea2:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    bea4:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    bea8:	f006 f97c 	bl	121a4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    beac:	4620      	mov	r0, r4
    beae:	f7ff feb7 	bl	bc20 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    beb2:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    beb4:	4d16      	ldr	r5, [pc, #88]	; (bf10 <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    beb6:	f7ff feb3 	bl	bc20 <z_sys_init_run_level>
	z_sched_init();
    beba:	f001 fa75 	bl	d3a8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    bebe:	4b15      	ldr	r3, [pc, #84]	; (bf14 <z_cstart+0xd4>)
    bec0:	9305      	str	r3, [sp, #20]
    bec2:	2301      	movs	r3, #1
    bec4:	4914      	ldr	r1, [pc, #80]	; (bf18 <z_cstart+0xd8>)
    bec6:	9400      	str	r4, [sp, #0]
    bec8:	e9cd 4303 	strd	r4, r3, [sp, #12]
    becc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    bed0:	464b      	mov	r3, r9
    bed2:	e9cd 4401 	strd	r4, r4, [sp, #4]
    bed6:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    bed8:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    beda:	f000 f905 	bl	c0e8 <z_setup_new_thread>
    bede:	7b6a      	ldrb	r2, [r5, #13]
    bee0:	f022 0204 	bic.w	r2, r2, #4
    bee4:	736a      	strb	r2, [r5, #13]
    bee6:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
    bee8:	4628      	mov	r0, r5
    beea:	f000 ff1b 	bl	cd24 <z_ready_thread>
		init_idle_thread(i);
    beee:	4620      	mov	r0, r4
    bef0:	f7ff ff56 	bl	bda0 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    bef4:	4b09      	ldr	r3, [pc, #36]	; (bf1c <z_cstart+0xdc>)
    bef6:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    bef8:	464a      	mov	r2, r9
    befa:	4639      	mov	r1, r7
    befc:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    befe:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    bf00:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    bf04:	f7f9 fdf4 	bl	5af0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    bf08:	e000ed00 	.word	0xe000ed00
    bf0c:	20000c20 	.word	0x20000c20
    bf10:	20000548 	.word	0x20000548
    bf14:	00014adc 	.word	0x00014adc
    bf18:	20001940 	.word	0x20001940
    bf1c:	200004c8 	.word	0x200004c8
    bf20:	200032e0 	.word	0x200032e0
    bf24:	0000bdf9 	.word	0x0000bdf9

0000bf28 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    bf28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    bf2c:	4d14      	ldr	r5, [pc, #80]	; (bf80 <init_mem_slab_module+0x58>)
    bf2e:	4c15      	ldr	r4, [pc, #84]	; (bf84 <init_mem_slab_module+0x5c>)
    bf30:	4e15      	ldr	r6, [pc, #84]	; (bf88 <init_mem_slab_module+0x60>)
    bf32:	46a8      	mov	r8, r5
    bf34:	42ac      	cmp	r4, r5
    bf36:	d908      	bls.n	bf4a <init_mem_slab_module+0x22>
    bf38:	4814      	ldr	r0, [pc, #80]	; (bf8c <init_mem_slab_module+0x64>)
    bf3a:	4631      	mov	r1, r6
    bf3c:	223c      	movs	r2, #60	; 0x3c
    bf3e:	f003 fa42 	bl	f3c6 <printk>
    bf42:	213c      	movs	r1, #60	; 0x3c
    bf44:	4630      	mov	r0, r6
    bf46:	f003 fb03 	bl	f550 <assert_post_action>
    bf4a:	4544      	cmp	r4, r8
    bf4c:	d302      	bcc.n	bf54 <init_mem_slab_module+0x2c>
			goto out;
		}
		z_object_init(slab);
	}

out:
    bf4e:	2000      	movs	r0, #0
	return rc;
}
    bf50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    bf54:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    bf58:	ea42 0301 	orr.w	r3, r2, r1
    bf5c:	f013 0303 	ands.w	r3, r3, #3
    bf60:	d10b      	bne.n	bf7a <init_mem_slab_module+0x52>
	for (j = 0U; j < slab->num_blocks; j++) {
    bf62:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    bf64:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    bf66:	4283      	cmp	r3, r0
    bf68:	d101      	bne.n	bf6e <init_mem_slab_module+0x46>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    bf6a:	3420      	adds	r4, #32
    bf6c:	e7e2      	b.n	bf34 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    bf6e:	69a7      	ldr	r7, [r4, #24]
    bf70:	6017      	str	r7, [r2, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    bf72:	3301      	adds	r3, #1
		slab->free_list = p;
    bf74:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
    bf76:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    bf78:	e7f5      	b.n	bf66 <init_mem_slab_module+0x3e>
		return -EINVAL;
    bf7a:	f06f 0015 	mvn.w	r0, #21
	return rc;
    bf7e:	e7e7      	b.n	bf50 <init_mem_slab_module+0x28>
    bf80:	200003b4 	.word	0x200003b4
    bf84:	20000374 	.word	0x20000374
    bf88:	00014ae4 	.word	0x00014ae4
    bf8c:	00013904 	.word	0x00013904

0000bf90 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    bf90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    bf94:	4604      	mov	r4, r0
    bf96:	460d      	mov	r5, r1
    bf98:	4690      	mov	r8, r2
    bf9a:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    bf9c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    bfa0:	f04f 0320 	mov.w	r3, #32
    bfa4:	f3ef 8711 	mrs	r7, BASEPRI
    bfa8:	f383 8812 	msr	BASEPRI_MAX, r3
    bfac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bfb0:	4630      	mov	r0, r6
    bfb2:	f000 f9b7 	bl	c324 <z_spin_lock_valid>
    bfb6:	b940      	cbnz	r0, bfca <k_mem_slab_alloc+0x3a>
    bfb8:	491f      	ldr	r1, [pc, #124]	; (c038 <k_mem_slab_alloc+0xa8>)
    bfba:	4820      	ldr	r0, [pc, #128]	; (c03c <k_mem_slab_alloc+0xac>)
    bfbc:	2281      	movs	r2, #129	; 0x81
    bfbe:	f003 fa02 	bl	f3c6 <printk>
    bfc2:	481d      	ldr	r0, [pc, #116]	; (c038 <k_mem_slab_alloc+0xa8>)
    bfc4:	2181      	movs	r1, #129	; 0x81
    bfc6:	f003 fac3 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    bfca:	4630      	mov	r0, r6
    bfcc:	f000 f9c8 	bl	c360 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    bfd0:	69a3      	ldr	r3, [r4, #24]
    bfd2:	b1c3      	cbz	r3, c006 <k_mem_slab_alloc+0x76>
		/* take a free block */
		*mem = slab->free_list;
    bfd4:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    bfd6:	681b      	ldr	r3, [r3, #0]
    bfd8:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    bfda:	69e3      	ldr	r3, [r4, #28]
    bfdc:	3301      	adds	r3, #1
    bfde:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    bfe0:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bfe2:	4630      	mov	r0, r6
    bfe4:	f000 f9ac 	bl	c340 <z_spin_unlock_valid>
    bfe8:	b940      	cbnz	r0, bffc <k_mem_slab_alloc+0x6c>
    bfea:	4913      	ldr	r1, [pc, #76]	; (c038 <k_mem_slab_alloc+0xa8>)
    bfec:	4813      	ldr	r0, [pc, #76]	; (c03c <k_mem_slab_alloc+0xac>)
    bfee:	22ac      	movs	r2, #172	; 0xac
    bff0:	f003 f9e9 	bl	f3c6 <printk>
    bff4:	4810      	ldr	r0, [pc, #64]	; (c038 <k_mem_slab_alloc+0xa8>)
    bff6:	21ac      	movs	r1, #172	; 0xac
    bff8:	f003 faaa 	bl	f550 <assert_post_action>
	__asm__ volatile(
    bffc:	f387 8811 	msr	BASEPRI, r7
    c000:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    c004:	e013      	b.n	c02e <k_mem_slab_alloc+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    c006:	ea58 0209 	orrs.w	r2, r8, r9
    c00a:	d103      	bne.n	c014 <k_mem_slab_alloc+0x84>
		*mem = NULL;
    c00c:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    c00e:	f06f 040b 	mvn.w	r4, #11
    c012:	e7e6      	b.n	bfe2 <k_mem_slab_alloc+0x52>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    c014:	4622      	mov	r2, r4
    c016:	e9cd 8900 	strd	r8, r9, [sp]
    c01a:	4639      	mov	r1, r7
    c01c:	4630      	mov	r0, r6
    c01e:	f000 ffe9 	bl	cff4 <z_pend_curr>
		if (result == 0) {
    c022:	4604      	mov	r4, r0
    c024:	b918      	cbnz	r0, c02e <k_mem_slab_alloc+0x9e>
			*mem = _current->base.swap_data;
    c026:	4b06      	ldr	r3, [pc, #24]	; (c040 <k_mem_slab_alloc+0xb0>)
    c028:	689b      	ldr	r3, [r3, #8]
    c02a:	695b      	ldr	r3, [r3, #20]
    c02c:	602b      	str	r3, [r5, #0]
}
    c02e:	4620      	mov	r0, r4
    c030:	b003      	add	sp, #12
    c032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c036:	bf00      	nop
    c038:	00013b71 	.word	0x00013b71
    c03c:	00013904 	.word	0x00013904
    c040:	20000c20 	.word	0x20000c20

0000c044 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    c044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c048:	4604      	mov	r4, r0
    c04a:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    c04c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    c050:	f04f 0320 	mov.w	r3, #32
    c054:	f3ef 8711 	mrs	r7, BASEPRI
    c058:	f383 8812 	msr	BASEPRI_MAX, r3
    c05c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c060:	4630      	mov	r0, r6
    c062:	f000 f95f 	bl	c324 <z_spin_lock_valid>
    c066:	b940      	cbnz	r0, c07a <k_mem_slab_free+0x36>
    c068:	491d      	ldr	r1, [pc, #116]	; (c0e0 <k_mem_slab_free+0x9c>)
    c06a:	481e      	ldr	r0, [pc, #120]	; (c0e4 <k_mem_slab_free+0xa0>)
    c06c:	2281      	movs	r2, #129	; 0x81
    c06e:	f003 f9aa 	bl	f3c6 <printk>
    c072:	481b      	ldr	r0, [pc, #108]	; (c0e0 <k_mem_slab_free+0x9c>)
    c074:	2181      	movs	r1, #129	; 0x81
    c076:	f003 fa6b 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    c07a:	4630      	mov	r0, r6
    c07c:	f000 f970 	bl	c360 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    c080:	f8d4 8018 	ldr.w	r8, [r4, #24]
    c084:	f1b8 0f00 	cmp.w	r8, #0
    c088:	d10f      	bne.n	c0aa <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    c08a:	4620      	mov	r0, r4
    c08c:	f001 f94e 	bl	d32c <z_unpend_first_thread>

		if (pending_thread != NULL) {
    c090:	b158      	cbz	r0, c0aa <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    c092:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    c094:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    c096:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    c09a:	f000 fe43 	bl	cd24 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    c09e:	4639      	mov	r1, r7
    c0a0:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    c0a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    c0a6:	f000 bc3f 	b.w	c928 <z_reschedule>
	**(char ***) mem = slab->free_list;
    c0aa:	682b      	ldr	r3, [r5, #0]
    c0ac:	69a2      	ldr	r2, [r4, #24]
    c0ae:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    c0b0:	682b      	ldr	r3, [r5, #0]
    c0b2:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    c0b4:	69e3      	ldr	r3, [r4, #28]
    c0b6:	3b01      	subs	r3, #1
    c0b8:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c0ba:	4630      	mov	r0, r6
    c0bc:	f000 f940 	bl	c340 <z_spin_unlock_valid>
    c0c0:	b940      	cbnz	r0, c0d4 <k_mem_slab_free+0x90>
    c0c2:	4907      	ldr	r1, [pc, #28]	; (c0e0 <k_mem_slab_free+0x9c>)
    c0c4:	4807      	ldr	r0, [pc, #28]	; (c0e4 <k_mem_slab_free+0xa0>)
    c0c6:	22ac      	movs	r2, #172	; 0xac
    c0c8:	f003 f97d 	bl	f3c6 <printk>
    c0cc:	4804      	ldr	r0, [pc, #16]	; (c0e0 <k_mem_slab_free+0x9c>)
    c0ce:	21ac      	movs	r1, #172	; 0xac
    c0d0:	f003 fa3e 	bl	f550 <assert_post_action>
	__asm__ volatile(
    c0d4:	f387 8811 	msr	BASEPRI, r7
    c0d8:	f3bf 8f6f 	isb	sy
}
    c0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c0e0:	00013b71 	.word	0x00013b71
    c0e4:	00013904 	.word	0x00013904

0000c0e8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    c0e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c0ec:	b085      	sub	sp, #20
    c0ee:	4604      	mov	r4, r0
    c0f0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    c0f4:	f1b8 0f0f 	cmp.w	r8, #15
{
    c0f8:	460f      	mov	r7, r1
    c0fa:	4615      	mov	r5, r2
    c0fc:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    c0fe:	d132      	bne.n	c166 <z_setup_new_thread+0x7e>
    c100:	4b21      	ldr	r3, [pc, #132]	; (c188 <z_setup_new_thread+0xa0>)
    c102:	4599      	cmp	r9, r3
    c104:	d133      	bne.n	c16e <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    c106:	f104 0358 	add.w	r3, r4, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
    c10a:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    c10e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c110:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    c112:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    c114:	2304      	movs	r3, #4
    c116:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    c118:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    c11c:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    c120:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    c124:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    c126:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    c12a:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    c12c:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    c130:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c132:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    c134:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    c136:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c138:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    c13a:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    c13c:	464b      	mov	r3, r9
	node->prev = NULL;
    c13e:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    c142:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    c144:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    c146:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    c148:	4642      	mov	r2, r8
    c14a:	4639      	mov	r1, r7
    c14c:	4620      	mov	r0, r4
    c14e:	f7f9 fc99 	bl	5a84 <arch_new_thread>
	if (!_current) {
    c152:	4b0e      	ldr	r3, [pc, #56]	; (c18c <z_setup_new_thread+0xa4>)
	new_thread->init_data = NULL;
    c154:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    c156:	689b      	ldr	r3, [r3, #8]
    c158:	b103      	cbz	r3, c15c <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    c15a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    c15c:	6723      	str	r3, [r4, #112]	; 0x70
}
    c15e:	4640      	mov	r0, r8
    c160:	b005      	add	sp, #20
    c162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    c166:	f108 0310 	add.w	r3, r8, #16
    c16a:	2b1e      	cmp	r3, #30
    c16c:	d9cb      	bls.n	c106 <z_setup_new_thread+0x1e>
    c16e:	4908      	ldr	r1, [pc, #32]	; (c190 <z_setup_new_thread+0xa8>)
    c170:	4808      	ldr	r0, [pc, #32]	; (c194 <z_setup_new_thread+0xac>)
    c172:	f240 12ff 	movw	r2, #511	; 0x1ff
    c176:	f003 f926 	bl	f3c6 <printk>
    c17a:	4805      	ldr	r0, [pc, #20]	; (c190 <z_setup_new_thread+0xa8>)
    c17c:	f240 11ff 	movw	r1, #511	; 0x1ff
    c180:	f003 f9e6 	bl	f550 <assert_post_action>
    c184:	e7bf      	b.n	c106 <z_setup_new_thread+0x1e>
    c186:	bf00      	nop
    c188:	0000c371 	.word	0x0000c371
    c18c:	20000c20 	.word	0x20000c20
    c190:	00014b09 	.word	0x00014b09
    c194:	00013904 	.word	0x00013904

0000c198 <z_impl_k_thread_create>:
{
    c198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c19c:	b087      	sub	sp, #28
    c19e:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
    c1a2:	4604      	mov	r4, r0
    c1a4:	460d      	mov	r5, r1
    c1a6:	4690      	mov	r8, r2
    c1a8:	4699      	mov	r9, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    c1aa:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    c1ae:	b153      	cbz	r3, c1c6 <z_impl_k_thread_create+0x2e>
    c1b0:	4919      	ldr	r1, [pc, #100]	; (c218 <z_impl_k_thread_create+0x80>)
    c1b2:	481a      	ldr	r0, [pc, #104]	; (c21c <z_impl_k_thread_create+0x84>)
    c1b4:	f44f 721a 	mov.w	r2, #616	; 0x268
    c1b8:	f003 f905 	bl	f3c6 <printk>
    c1bc:	4816      	ldr	r0, [pc, #88]	; (c218 <z_impl_k_thread_create+0x80>)
    c1be:	f44f 711a 	mov.w	r1, #616	; 0x268
    c1c2:	f003 f9c5 	bl	f550 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    c1c6:	2300      	movs	r3, #0
    c1c8:	9305      	str	r3, [sp, #20]
    c1ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c1cc:	9304      	str	r3, [sp, #16]
    c1ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c1d0:	9303      	str	r3, [sp, #12]
    c1d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c1d4:	9302      	str	r3, [sp, #8]
    c1d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c1d8:	9301      	str	r3, [sp, #4]
    c1da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c1dc:	9300      	str	r3, [sp, #0]
    c1de:	4642      	mov	r2, r8
    c1e0:	464b      	mov	r3, r9
    c1e2:	4629      	mov	r1, r5
    c1e4:	4620      	mov	r0, r4
    c1e6:	f7ff ff7f 	bl	c0e8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    c1ea:	1c7b      	adds	r3, r7, #1
    c1ec:	bf08      	it	eq
    c1ee:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    c1f2:	d005      	beq.n	c200 <z_impl_k_thread_create+0x68>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    c1f4:	ea56 0307 	orrs.w	r3, r6, r7
    c1f8:	d106      	bne.n	c208 <z_impl_k_thread_create+0x70>
	z_sched_start(thread);
    c1fa:	4620      	mov	r0, r4
    c1fc:	f000 fdc8 	bl	cd90 <z_sched_start>
}
    c200:	4620      	mov	r0, r4
    c202:	b007      	add	sp, #28
    c204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    c208:	4905      	ldr	r1, [pc, #20]	; (c220 <z_impl_k_thread_create+0x88>)
    c20a:	4632      	mov	r2, r6
    c20c:	463b      	mov	r3, r7
    c20e:	f104 0018 	add.w	r0, r4, #24
    c212:	f001 fb1d 	bl	d850 <z_add_timeout>
    c216:	e7f3      	b.n	c200 <z_impl_k_thread_create+0x68>
    c218:	00014b09 	.word	0x00014b09
    c21c:	00013904 	.word	0x00013904
    c220:	0000ce15 	.word	0x0000ce15

0000c224 <z_init_static_threads>:
{
    c224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    c228:	4f39      	ldr	r7, [pc, #228]	; (c310 <z_init_static_threads+0xec>)
    c22a:	4d3a      	ldr	r5, [pc, #232]	; (c314 <z_init_static_threads+0xf0>)
    c22c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; c31c <z_init_static_threads+0xf8>
{
    c230:	b086      	sub	sp, #24
    c232:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    c234:	42bd      	cmp	r5, r7
    c236:	d90a      	bls.n	c24e <z_init_static_threads+0x2a>
    c238:	4837      	ldr	r0, [pc, #220]	; (c318 <z_init_static_threads+0xf4>)
    c23a:	4641      	mov	r1, r8
    c23c:	f240 22cf 	movw	r2, #719	; 0x2cf
    c240:	f003 f8c1 	bl	f3c6 <printk>
    c244:	f240 21cf 	movw	r1, #719	; 0x2cf
    c248:	4640      	mov	r0, r8
    c24a:	f003 f981 	bl	f550 <assert_post_action>
    c24e:	42b5      	cmp	r5, r6
    c250:	f105 0430 	add.w	r4, r5, #48	; 0x30
    c254:	d31d      	bcc.n	c292 <z_init_static_threads+0x6e>
	k_sched_lock();
    c256:	f000 fb9d 	bl	c994 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    c25a:	4c2e      	ldr	r4, [pc, #184]	; (c314 <z_init_static_threads+0xf0>)
    c25c:	4d2f      	ldr	r5, [pc, #188]	; (c31c <z_init_static_threads+0xf8>)
    c25e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; c318 <z_init_static_threads+0xf4>
    c262:	f240 38e7 	movw	r8, #999	; 0x3e7
    c266:	f04f 0900 	mov.w	r9, #0
    c26a:	42b4      	cmp	r4, r6
    c26c:	d90a      	bls.n	c284 <z_init_static_threads+0x60>
    c26e:	4629      	mov	r1, r5
    c270:	4650      	mov	r0, sl
    c272:	f240 22ee 	movw	r2, #750	; 0x2ee
    c276:	f003 f8a6 	bl	f3c6 <printk>
    c27a:	f240 21ee 	movw	r1, #750	; 0x2ee
    c27e:	4628      	mov	r0, r5
    c280:	f003 f966 	bl	f550 <assert_post_action>
    c284:	42b4      	cmp	r4, r6
    c286:	d321      	bcc.n	c2cc <z_init_static_threads+0xa8>
}
    c288:	b006      	add	sp, #24
    c28a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    c28e:	f000 bfb7 	b.w	d200 <k_sched_unlock>
		z_setup_new_thread(
    c292:	f854 3c04 	ldr.w	r3, [r4, #-4]
    c296:	9305      	str	r3, [sp, #20]
    c298:	f854 3c10 	ldr.w	r3, [r4, #-16]
    c29c:	9304      	str	r3, [sp, #16]
    c29e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    c2a2:	9303      	str	r3, [sp, #12]
    c2a4:	f854 3c18 	ldr.w	r3, [r4, #-24]
    c2a8:	9302      	str	r3, [sp, #8]
    c2aa:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    c2ae:	9301      	str	r3, [sp, #4]
    c2b0:	f854 3c20 	ldr.w	r3, [r4, #-32]
    c2b4:	9300      	str	r3, [sp, #0]
    c2b6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    c2ba:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    c2be:	f7ff ff13 	bl	c0e8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    c2c2:	f854 3c30 	ldr.w	r3, [r4, #-48]
    c2c6:	655d      	str	r5, [r3, #84]	; 0x54
    c2c8:	4625      	mov	r5, r4
    c2ca:	e7b3      	b.n	c234 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    c2cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c2ce:	1c5a      	adds	r2, r3, #1
    c2d0:	d00f      	beq.n	c2f2 <z_init_static_threads+0xce>
					    K_MSEC(thread_data->init_delay));
    c2d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    c2d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    c2da:	4640      	mov	r0, r8
    c2dc:	4649      	mov	r1, r9
    c2de:	fbc2 0103 	smlal	r0, r1, r2, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    c2e2:	4549      	cmp	r1, r9
    c2e4:	bf08      	it	eq
    c2e6:	4540      	cmpeq	r0, r8
			schedule_new_thread(thread_data->init_thread,
    c2e8:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    c2ea:	d104      	bne.n	c2f6 <z_init_static_threads+0xd2>
	z_sched_start(thread);
    c2ec:	4638      	mov	r0, r7
    c2ee:	f000 fd4f 	bl	cd90 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    c2f2:	3430      	adds	r4, #48	; 0x30
    c2f4:	e7b9      	b.n	c26a <z_init_static_threads+0x46>
    c2f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c2fa:	2300      	movs	r3, #0
    c2fc:	f7f4 fee0 	bl	10c0 <__aeabi_uldivmod>
    c300:	4602      	mov	r2, r0
    c302:	460b      	mov	r3, r1
    c304:	f107 0018 	add.w	r0, r7, #24
    c308:	4905      	ldr	r1, [pc, #20]	; (c320 <z_init_static_threads+0xfc>)
    c30a:	f001 faa1 	bl	d850 <z_add_timeout>
    c30e:	e7f0      	b.n	c2f2 <z_init_static_threads+0xce>
    c310:	20000374 	.word	0x20000374
    c314:	20000374 	.word	0x20000374
    c318:	00013904 	.word	0x00013904
    c31c:	00014b09 	.word	0x00014b09
    c320:	0000ce15 	.word	0x0000ce15

0000c324 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    c324:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    c326:	b138      	cbz	r0, c338 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    c328:	4b04      	ldr	r3, [pc, #16]	; (c33c <z_spin_lock_valid+0x18>)
    c32a:	7d1b      	ldrb	r3, [r3, #20]
    c32c:	f000 0003 	and.w	r0, r0, #3
    c330:	1ac0      	subs	r0, r0, r3
    c332:	bf18      	it	ne
    c334:	2001      	movne	r0, #1
    c336:	4770      	bx	lr
			return false;
		}
	}
	return true;
    c338:	2001      	movs	r0, #1
}
    c33a:	4770      	bx	lr
    c33c:	20000c20 	.word	0x20000c20

0000c340 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    c340:	4906      	ldr	r1, [pc, #24]	; (c35c <z_spin_unlock_valid+0x1c>)
{
    c342:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    c344:	688a      	ldr	r2, [r1, #8]
    c346:	7d08      	ldrb	r0, [r1, #20]
    c348:	6819      	ldr	r1, [r3, #0]
    c34a:	4302      	orrs	r2, r0
    c34c:	4291      	cmp	r1, r2
    c34e:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    c352:	bf04      	itt	eq
    c354:	6018      	streq	r0, [r3, #0]
	return true;
    c356:	2001      	moveq	r0, #1
}
    c358:	4770      	bx	lr
    c35a:	bf00      	nop
    c35c:	20000c20 	.word	0x20000c20

0000c360 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    c360:	4a02      	ldr	r2, [pc, #8]	; (c36c <z_spin_lock_set_owner+0xc>)
    c362:	7d11      	ldrb	r1, [r2, #20]
    c364:	6893      	ldr	r3, [r2, #8]
    c366:	430b      	orrs	r3, r1
    c368:	6003      	str	r3, [r0, #0]
}
    c36a:	4770      	bx	lr
    c36c:	20000c20 	.word	0x20000c20

0000c370 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    c370:	4c10      	ldr	r4, [pc, #64]	; (c3b4 <idle+0x44>)
    c372:	68a2      	ldr	r2, [r4, #8]
    c374:	f992 200e 	ldrsb.w	r2, [r2, #14]
    c378:	2a00      	cmp	r2, #0
{
    c37a:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    c37c:	da08      	bge.n	c390 <idle+0x20>
    c37e:	490e      	ldr	r1, [pc, #56]	; (c3b8 <idle+0x48>)
    c380:	480e      	ldr	r0, [pc, #56]	; (c3bc <idle+0x4c>)
    c382:	2227      	movs	r2, #39	; 0x27
    c384:	f003 f81f 	bl	f3c6 <printk>
    c388:	480b      	ldr	r0, [pc, #44]	; (c3b8 <idle+0x48>)
    c38a:	2127      	movs	r1, #39	; 0x27
    c38c:	f003 f8e0 	bl	f550 <assert_post_action>
	__asm__ volatile(
    c390:	f04f 0220 	mov.w	r2, #32
    c394:	f3ef 8311 	mrs	r3, BASEPRI
    c398:	f382 8812 	msr	BASEPRI_MAX, r2
    c39c:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    c3a0:	f001 fb4c 	bl	da3c <z_get_next_timeout_expiry>
    c3a4:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    c3a6:	f7f9 f9bb 	bl	5720 <pm_system_suspend>
    c3aa:	2800      	cmp	r0, #0
    c3ac:	d1f0      	bne.n	c390 <idle+0x20>
	arch_cpu_idle();
    c3ae:	f7f9 fa3d 	bl	582c <arch_cpu_idle>
}
    c3b2:	e7ed      	b.n	c390 <idle+0x20>
    c3b4:	20000c20 	.word	0x20000c20
    c3b8:	00014b2c 	.word	0x00014b2c
    c3bc:	00013904 	.word	0x00013904

0000c3c0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    c3c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c3c4:	4604      	mov	r4, r0
    c3c6:	4616      	mov	r6, r2
    c3c8:	461f      	mov	r7, r3
    c3ca:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    c3ce:	b143      	cbz	r3, c3e2 <z_impl_k_mutex_lock+0x22>
    c3d0:	4962      	ldr	r1, [pc, #392]	; (c55c <z_impl_k_mutex_lock+0x19c>)
    c3d2:	4863      	ldr	r0, [pc, #396]	; (c560 <z_impl_k_mutex_lock+0x1a0>)
    c3d4:	2265      	movs	r2, #101	; 0x65
    c3d6:	f002 fff6 	bl	f3c6 <printk>
    c3da:	4860      	ldr	r0, [pc, #384]	; (c55c <z_impl_k_mutex_lock+0x19c>)
    c3dc:	2165      	movs	r1, #101	; 0x65
    c3de:	f003 f8b7 	bl	f550 <assert_post_action>
    c3e2:	f04f 0320 	mov.w	r3, #32
    c3e6:	f3ef 8811 	mrs	r8, BASEPRI
    c3ea:	f383 8812 	msr	BASEPRI_MAX, r3
    c3ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c3f2:	485c      	ldr	r0, [pc, #368]	; (c564 <z_impl_k_mutex_lock+0x1a4>)
    c3f4:	f7ff ff96 	bl	c324 <z_spin_lock_valid>
    c3f8:	b940      	cbnz	r0, c40c <z_impl_k_mutex_lock+0x4c>
    c3fa:	495b      	ldr	r1, [pc, #364]	; (c568 <z_impl_k_mutex_lock+0x1a8>)
    c3fc:	4858      	ldr	r0, [pc, #352]	; (c560 <z_impl_k_mutex_lock+0x1a0>)
    c3fe:	2281      	movs	r2, #129	; 0x81
    c400:	f002 ffe1 	bl	f3c6 <printk>
    c404:	4858      	ldr	r0, [pc, #352]	; (c568 <z_impl_k_mutex_lock+0x1a8>)
    c406:	2181      	movs	r1, #129	; 0x81
    c408:	f003 f8a2 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    c40c:	4855      	ldr	r0, [pc, #340]	; (c564 <z_impl_k_mutex_lock+0x1a4>)
    c40e:	f7ff ffa7 	bl	c360 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    c412:	68e3      	ldr	r3, [r4, #12]
    c414:	4a55      	ldr	r2, [pc, #340]	; (c56c <z_impl_k_mutex_lock+0x1ac>)
    c416:	b1d3      	cbz	r3, c44e <z_impl_k_mutex_lock+0x8e>
    c418:	68a0      	ldr	r0, [r4, #8]
    c41a:	6891      	ldr	r1, [r2, #8]
    c41c:	4288      	cmp	r0, r1
    c41e:	d033      	beq.n	c488 <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    c420:	ea56 0307 	orrs.w	r3, r6, r7
    c424:	d132      	bne.n	c48c <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c426:	484f      	ldr	r0, [pc, #316]	; (c564 <z_impl_k_mutex_lock+0x1a4>)
    c428:	f7ff ff8a 	bl	c340 <z_spin_unlock_valid>
    c42c:	b940      	cbnz	r0, c440 <z_impl_k_mutex_lock+0x80>
    c42e:	494e      	ldr	r1, [pc, #312]	; (c568 <z_impl_k_mutex_lock+0x1a8>)
    c430:	484b      	ldr	r0, [pc, #300]	; (c560 <z_impl_k_mutex_lock+0x1a0>)
    c432:	22ac      	movs	r2, #172	; 0xac
    c434:	f002 ffc7 	bl	f3c6 <printk>
    c438:	484b      	ldr	r0, [pc, #300]	; (c568 <z_impl_k_mutex_lock+0x1a8>)
    c43a:	21ac      	movs	r1, #172	; 0xac
    c43c:	f003 f888 	bl	f550 <assert_post_action>
	__asm__ volatile(
    c440:	f388 8811 	msr	BASEPRI, r8
    c444:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    c448:	f06f 000f 	mvn.w	r0, #15
    c44c:	e019      	b.n	c482 <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
    c44e:	6891      	ldr	r1, [r2, #8]
    c450:	f991 100e 	ldrsb.w	r1, [r1, #14]
    c454:	4843      	ldr	r0, [pc, #268]	; (c564 <z_impl_k_mutex_lock+0x1a4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    c456:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    c458:	3301      	adds	r3, #1
    c45a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    c45c:	6893      	ldr	r3, [r2, #8]
    c45e:	60a3      	str	r3, [r4, #8]
    c460:	f7ff ff6e 	bl	c340 <z_spin_unlock_valid>
    c464:	b940      	cbnz	r0, c478 <z_impl_k_mutex_lock+0xb8>
    c466:	4940      	ldr	r1, [pc, #256]	; (c568 <z_impl_k_mutex_lock+0x1a8>)
    c468:	483d      	ldr	r0, [pc, #244]	; (c560 <z_impl_k_mutex_lock+0x1a0>)
    c46a:	22ac      	movs	r2, #172	; 0xac
    c46c:	f002 ffab 	bl	f3c6 <printk>
    c470:	483d      	ldr	r0, [pc, #244]	; (c568 <z_impl_k_mutex_lock+0x1a8>)
    c472:	21ac      	movs	r1, #172	; 0xac
    c474:	f003 f86c 	bl	f550 <assert_post_action>
    c478:	f388 8811 	msr	BASEPRI, r8
    c47c:	f3bf 8f6f 	isb	sy
		return 0;
    c480:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    c482:	b002      	add	sp, #8
    c484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    c488:	6921      	ldr	r1, [r4, #16]
    c48a:	e7e3      	b.n	c454 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    c48c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    c490:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    c494:	4299      	cmp	r1, r3
    c496:	bfa8      	it	ge
    c498:	4619      	movge	r1, r3
    c49a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    c49e:	4291      	cmp	r1, r2
    c4a0:	bfb8      	it	lt
    c4a2:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    c4a4:	428b      	cmp	r3, r1
    c4a6:	dd3f      	ble.n	c528 <z_impl_k_mutex_lock+0x168>
		return z_set_prio(mutex->owner, new_prio);
    c4a8:	f000 fdca 	bl	d040 <z_set_prio>
    c4ac:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    c4ae:	e9cd 6700 	strd	r6, r7, [sp]
    c4b2:	482c      	ldr	r0, [pc, #176]	; (c564 <z_impl_k_mutex_lock+0x1a4>)
    c4b4:	4622      	mov	r2, r4
    c4b6:	4641      	mov	r1, r8
    c4b8:	f000 fd9c 	bl	cff4 <z_pend_curr>
	if (got_mutex == 0) {
    c4bc:	2800      	cmp	r0, #0
    c4be:	d0e0      	beq.n	c482 <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
    c4c0:	f04f 0320 	mov.w	r3, #32
    c4c4:	f3ef 8611 	mrs	r6, BASEPRI
    c4c8:	f383 8812 	msr	BASEPRI_MAX, r3
    c4cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c4d0:	4824      	ldr	r0, [pc, #144]	; (c564 <z_impl_k_mutex_lock+0x1a4>)
    c4d2:	f7ff ff27 	bl	c324 <z_spin_lock_valid>
    c4d6:	b940      	cbnz	r0, c4ea <z_impl_k_mutex_lock+0x12a>
    c4d8:	4923      	ldr	r1, [pc, #140]	; (c568 <z_impl_k_mutex_lock+0x1a8>)
    c4da:	4821      	ldr	r0, [pc, #132]	; (c560 <z_impl_k_mutex_lock+0x1a0>)
    c4dc:	2281      	movs	r2, #129	; 0x81
    c4de:	f002 ff72 	bl	f3c6 <printk>
    c4e2:	4821      	ldr	r0, [pc, #132]	; (c568 <z_impl_k_mutex_lock+0x1a8>)
    c4e4:	2181      	movs	r1, #129	; 0x81
    c4e6:	f003 f833 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    c4ea:	481e      	ldr	r0, [pc, #120]	; (c564 <z_impl_k_mutex_lock+0x1a4>)
    c4ec:	f7ff ff38 	bl	c360 <z_spin_lock_set_owner>
	return list->head == list;
    c4f0:	6823      	ldr	r3, [r4, #0]
    c4f2:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c4f4:	429c      	cmp	r4, r3
    c4f6:	d00a      	beq.n	c50e <z_impl_k_mutex_lock+0x14e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    c4f8:	b14b      	cbz	r3, c50e <z_impl_k_mutex_lock+0x14e>
    c4fa:	f993 300e 	ldrsb.w	r3, [r3, #14]
    c4fe:	4299      	cmp	r1, r3
    c500:	bfa8      	it	ge
    c502:	4619      	movge	r1, r3
    c504:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    c508:	4299      	cmp	r1, r3
    c50a:	bfb8      	it	lt
    c50c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    c50e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    c510:	f990 300e 	ldrsb.w	r3, [r0, #14]
    c514:	4299      	cmp	r1, r3
    c516:	d109      	bne.n	c52c <z_impl_k_mutex_lock+0x16c>
	if (resched) {
    c518:	b16d      	cbz	r5, c536 <z_impl_k_mutex_lock+0x176>
		z_reschedule(&lock, key);
    c51a:	4812      	ldr	r0, [pc, #72]	; (c564 <z_impl_k_mutex_lock+0x1a4>)
    c51c:	4631      	mov	r1, r6
    c51e:	f000 fa03 	bl	c928 <z_reschedule>
	return -EAGAIN;
    c522:	f06f 000a 	mvn.w	r0, #10
    c526:	e7ac      	b.n	c482 <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
    c528:	2500      	movs	r5, #0
    c52a:	e7c0      	b.n	c4ae <z_impl_k_mutex_lock+0xee>
		return z_set_prio(mutex->owner, new_prio);
    c52c:	f000 fd88 	bl	d040 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    c530:	2800      	cmp	r0, #0
    c532:	d1f2      	bne.n	c51a <z_impl_k_mutex_lock+0x15a>
    c534:	e7f0      	b.n	c518 <z_impl_k_mutex_lock+0x158>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c536:	480b      	ldr	r0, [pc, #44]	; (c564 <z_impl_k_mutex_lock+0x1a4>)
    c538:	f7ff ff02 	bl	c340 <z_spin_unlock_valid>
    c53c:	b940      	cbnz	r0, c550 <z_impl_k_mutex_lock+0x190>
    c53e:	490a      	ldr	r1, [pc, #40]	; (c568 <z_impl_k_mutex_lock+0x1a8>)
    c540:	4807      	ldr	r0, [pc, #28]	; (c560 <z_impl_k_mutex_lock+0x1a0>)
    c542:	22ac      	movs	r2, #172	; 0xac
    c544:	f002 ff3f 	bl	f3c6 <printk>
    c548:	4807      	ldr	r0, [pc, #28]	; (c568 <z_impl_k_mutex_lock+0x1a8>)
    c54a:	21ac      	movs	r1, #172	; 0xac
    c54c:	f003 f800 	bl	f550 <assert_post_action>
	__asm__ volatile(
    c550:	f386 8811 	msr	BASEPRI, r6
    c554:	f3bf 8f6f 	isb	sy
    c558:	e7e3      	b.n	c522 <z_impl_k_mutex_lock+0x162>
    c55a:	bf00      	nop
    c55c:	00014b4d 	.word	0x00014b4d
    c560:	00013904 	.word	0x00013904
    c564:	20000c48 	.word	0x20000c48
    c568:	00013b71 	.word	0x00013b71
    c56c:	20000c20 	.word	0x20000c20

0000c570 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    c570:	b538      	push	{r3, r4, r5, lr}
    c572:	4604      	mov	r4, r0
    c574:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    c578:	b143      	cbz	r3, c58c <z_impl_k_mutex_unlock+0x1c>
    c57a:	4945      	ldr	r1, [pc, #276]	; (c690 <z_impl_k_mutex_unlock+0x120>)
    c57c:	4845      	ldr	r0, [pc, #276]	; (c694 <z_impl_k_mutex_unlock+0x124>)
    c57e:	22c7      	movs	r2, #199	; 0xc7
    c580:	f002 ff21 	bl	f3c6 <printk>
    c584:	4842      	ldr	r0, [pc, #264]	; (c690 <z_impl_k_mutex_unlock+0x120>)
    c586:	21c7      	movs	r1, #199	; 0xc7
    c588:	f002 ffe2 	bl	f550 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    c58c:	68a3      	ldr	r3, [r4, #8]
    c58e:	2b00      	cmp	r3, #0
    c590:	d078      	beq.n	c684 <z_impl_k_mutex_unlock+0x114>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    c592:	4d41      	ldr	r5, [pc, #260]	; (c698 <z_impl_k_mutex_unlock+0x128>)
    c594:	68aa      	ldr	r2, [r5, #8]
    c596:	4293      	cmp	r3, r2
    c598:	d177      	bne.n	c68a <z_impl_k_mutex_unlock+0x11a>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    c59a:	68e3      	ldr	r3, [r4, #12]
    c59c:	b943      	cbnz	r3, c5b0 <z_impl_k_mutex_unlock+0x40>
    c59e:	493c      	ldr	r1, [pc, #240]	; (c690 <z_impl_k_mutex_unlock+0x120>)
    c5a0:	483c      	ldr	r0, [pc, #240]	; (c694 <z_impl_k_mutex_unlock+0x124>)
    c5a2:	22df      	movs	r2, #223	; 0xdf
    c5a4:	f002 ff0f 	bl	f3c6 <printk>
    c5a8:	4839      	ldr	r0, [pc, #228]	; (c690 <z_impl_k_mutex_unlock+0x120>)
    c5aa:	21df      	movs	r1, #223	; 0xdf
    c5ac:	f002 ffd0 	bl	f550 <assert_post_action>
    c5b0:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    c5b4:	b143      	cbz	r3, c5c8 <z_impl_k_mutex_unlock+0x58>
    c5b6:	4939      	ldr	r1, [pc, #228]	; (c69c <z_impl_k_mutex_unlock+0x12c>)
    c5b8:	4836      	ldr	r0, [pc, #216]	; (c694 <z_impl_k_mutex_unlock+0x124>)
    c5ba:	22fd      	movs	r2, #253	; 0xfd
    c5bc:	f002 ff03 	bl	f3c6 <printk>
    c5c0:	4836      	ldr	r0, [pc, #216]	; (c69c <z_impl_k_mutex_unlock+0x12c>)
    c5c2:	21fd      	movs	r1, #253	; 0xfd
    c5c4:	f002 ffc4 	bl	f550 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    c5c8:	68ab      	ldr	r3, [r5, #8]
    c5ca:	7bdb      	ldrb	r3, [r3, #15]
    c5cc:	2b01      	cmp	r3, #1
    c5ce:	d108      	bne.n	c5e2 <z_impl_k_mutex_unlock+0x72>
    c5d0:	4932      	ldr	r1, [pc, #200]	; (c69c <z_impl_k_mutex_unlock+0x12c>)
    c5d2:	4830      	ldr	r0, [pc, #192]	; (c694 <z_impl_k_mutex_unlock+0x124>)
    c5d4:	22fe      	movs	r2, #254	; 0xfe
    c5d6:	f002 fef6 	bl	f3c6 <printk>
    c5da:	4830      	ldr	r0, [pc, #192]	; (c69c <z_impl_k_mutex_unlock+0x12c>)
    c5dc:	21fe      	movs	r1, #254	; 0xfe
    c5de:	f002 ffb7 	bl	f550 <assert_post_action>

	--_current->base.sched_locked;
    c5e2:	68aa      	ldr	r2, [r5, #8]
    c5e4:	7bd3      	ldrb	r3, [r2, #15]
    c5e6:	3b01      	subs	r3, #1
    c5e8:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    c5ea:	68e3      	ldr	r3, [r4, #12]
    c5ec:	2b01      	cmp	r3, #1
    c5ee:	d905      	bls.n	c5fc <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count--;
    c5f0:	3b01      	subs	r3, #1
    c5f2:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    c5f4:	f000 fe04 	bl	d200 <k_sched_unlock>

	return 0;
    c5f8:	2000      	movs	r0, #0
}
    c5fa:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    c5fc:	f04f 0320 	mov.w	r3, #32
    c600:	f3ef 8511 	mrs	r5, BASEPRI
    c604:	f383 8812 	msr	BASEPRI_MAX, r3
    c608:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c60c:	4824      	ldr	r0, [pc, #144]	; (c6a0 <z_impl_k_mutex_unlock+0x130>)
    c60e:	f7ff fe89 	bl	c324 <z_spin_lock_valid>
    c612:	b940      	cbnz	r0, c626 <z_impl_k_mutex_unlock+0xb6>
    c614:	4923      	ldr	r1, [pc, #140]	; (c6a4 <z_impl_k_mutex_unlock+0x134>)
    c616:	481f      	ldr	r0, [pc, #124]	; (c694 <z_impl_k_mutex_unlock+0x124>)
    c618:	2281      	movs	r2, #129	; 0x81
    c61a:	f002 fed4 	bl	f3c6 <printk>
    c61e:	4821      	ldr	r0, [pc, #132]	; (c6a4 <z_impl_k_mutex_unlock+0x134>)
    c620:	2181      	movs	r1, #129	; 0x81
    c622:	f002 ff95 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    c626:	481e      	ldr	r0, [pc, #120]	; (c6a0 <z_impl_k_mutex_unlock+0x130>)
    c628:	f7ff fe9a 	bl	c360 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    c62c:	68a0      	ldr	r0, [r4, #8]
    c62e:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    c630:	f990 300e 	ldrsb.w	r3, [r0, #14]
    c634:	4299      	cmp	r1, r3
    c636:	d001      	beq.n	c63c <z_impl_k_mutex_unlock+0xcc>
		return z_set_prio(mutex->owner, new_prio);
    c638:	f000 fd02 	bl	d040 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    c63c:	4620      	mov	r0, r4
    c63e:	f000 fe75 	bl	d32c <z_unpend_first_thread>
	mutex->owner = new_owner;
    c642:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    c644:	b158      	cbz	r0, c65e <z_impl_k_mutex_unlock+0xee>
		mutex->owner_orig_prio = new_owner->base.prio;
    c646:	f990 200e 	ldrsb.w	r2, [r0, #14]
    c64a:	6122      	str	r2, [r4, #16]
    c64c:	2200      	movs	r2, #0
    c64e:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    c650:	f000 fb68 	bl	cd24 <z_ready_thread>
		z_reschedule(&lock, key);
    c654:	4812      	ldr	r0, [pc, #72]	; (c6a0 <z_impl_k_mutex_unlock+0x130>)
    c656:	4629      	mov	r1, r5
    c658:	f000 f966 	bl	c928 <z_reschedule>
    c65c:	e7ca      	b.n	c5f4 <z_impl_k_mutex_unlock+0x84>
		mutex->lock_count = 0U;
    c65e:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c660:	480f      	ldr	r0, [pc, #60]	; (c6a0 <z_impl_k_mutex_unlock+0x130>)
    c662:	f7ff fe6d 	bl	c340 <z_spin_unlock_valid>
    c666:	b940      	cbnz	r0, c67a <z_impl_k_mutex_unlock+0x10a>
    c668:	490e      	ldr	r1, [pc, #56]	; (c6a4 <z_impl_k_mutex_unlock+0x134>)
    c66a:	480a      	ldr	r0, [pc, #40]	; (c694 <z_impl_k_mutex_unlock+0x124>)
    c66c:	22ac      	movs	r2, #172	; 0xac
    c66e:	f002 feaa 	bl	f3c6 <printk>
    c672:	480c      	ldr	r0, [pc, #48]	; (c6a4 <z_impl_k_mutex_unlock+0x134>)
    c674:	21ac      	movs	r1, #172	; 0xac
    c676:	f002 ff6b 	bl	f550 <assert_post_action>
	__asm__ volatile(
    c67a:	f385 8811 	msr	BASEPRI, r5
    c67e:	f3bf 8f6f 	isb	sy
    c682:	e7b7      	b.n	c5f4 <z_impl_k_mutex_unlock+0x84>
		return -EINVAL;
    c684:	f06f 0015 	mvn.w	r0, #21
    c688:	e7b7      	b.n	c5fa <z_impl_k_mutex_unlock+0x8a>
		return -EPERM;
    c68a:	f04f 30ff 	mov.w	r0, #4294967295
    c68e:	e7b4      	b.n	c5fa <z_impl_k_mutex_unlock+0x8a>
    c690:	00014b4d 	.word	0x00014b4d
    c694:	00013904 	.word	0x00013904
    c698:	20000c20 	.word	0x20000c20
    c69c:	00014b6f 	.word	0x00014b6f
    c6a0:	20000c48 	.word	0x20000c48
    c6a4:	00013b71 	.word	0x00013b71

0000c6a8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    c6a8:	b538      	push	{r3, r4, r5, lr}
    c6aa:	4604      	mov	r4, r0
	__asm__ volatile(
    c6ac:	f04f 0320 	mov.w	r3, #32
    c6b0:	f3ef 8511 	mrs	r5, BASEPRI
    c6b4:	f383 8812 	msr	BASEPRI_MAX, r3
    c6b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c6bc:	4812      	ldr	r0, [pc, #72]	; (c708 <z_impl_k_sem_give+0x60>)
    c6be:	f7ff fe31 	bl	c324 <z_spin_lock_valid>
    c6c2:	b940      	cbnz	r0, c6d6 <z_impl_k_sem_give+0x2e>
    c6c4:	4911      	ldr	r1, [pc, #68]	; (c70c <z_impl_k_sem_give+0x64>)
    c6c6:	4812      	ldr	r0, [pc, #72]	; (c710 <z_impl_k_sem_give+0x68>)
    c6c8:	2281      	movs	r2, #129	; 0x81
    c6ca:	f002 fe7c 	bl	f3c6 <printk>
    c6ce:	480f      	ldr	r0, [pc, #60]	; (c70c <z_impl_k_sem_give+0x64>)
    c6d0:	2181      	movs	r1, #129	; 0x81
    c6d2:	f002 ff3d 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    c6d6:	480c      	ldr	r0, [pc, #48]	; (c708 <z_impl_k_sem_give+0x60>)
    c6d8:	f7ff fe42 	bl	c360 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    c6dc:	4620      	mov	r0, r4
    c6de:	f000 fe25 	bl	d32c <z_unpend_first_thread>

	if (thread != NULL) {
    c6e2:	b148      	cbz	r0, c6f8 <z_impl_k_sem_give+0x50>
    c6e4:	2200      	movs	r2, #0
    c6e6:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    c6e8:	f000 fb1c 	bl	cd24 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    c6ec:	4629      	mov	r1, r5
    c6ee:	4806      	ldr	r0, [pc, #24]	; (c708 <z_impl_k_sem_give+0x60>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    c6f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    c6f4:	f000 b918 	b.w	c928 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    c6f8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    c6fc:	429a      	cmp	r2, r3
    c6fe:	bf18      	it	ne
    c700:	3301      	addne	r3, #1
    c702:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    c704:	e7f2      	b.n	c6ec <z_impl_k_sem_give+0x44>
    c706:	bf00      	nop
    c708:	20000c4c 	.word	0x20000c4c
    c70c:	00013b71 	.word	0x00013b71
    c710:	00013904 	.word	0x00013904

0000c714 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    c714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c716:	4604      	mov	r4, r0
    c718:	4616      	mov	r6, r2
    c71a:	461f      	mov	r7, r3
    c71c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    c720:	b15b      	cbz	r3, c73a <z_impl_k_sem_take+0x26>
    c722:	ea56 0307 	orrs.w	r3, r6, r7
    c726:	d008      	beq.n	c73a <z_impl_k_sem_take+0x26>
    c728:	492b      	ldr	r1, [pc, #172]	; (c7d8 <z_impl_k_sem_take+0xc4>)
    c72a:	482c      	ldr	r0, [pc, #176]	; (c7dc <z_impl_k_sem_take+0xc8>)
    c72c:	2279      	movs	r2, #121	; 0x79
    c72e:	f002 fe4a 	bl	f3c6 <printk>
    c732:	4829      	ldr	r0, [pc, #164]	; (c7d8 <z_impl_k_sem_take+0xc4>)
    c734:	2179      	movs	r1, #121	; 0x79
    c736:	f002 ff0b 	bl	f550 <assert_post_action>
    c73a:	f04f 0320 	mov.w	r3, #32
    c73e:	f3ef 8511 	mrs	r5, BASEPRI
    c742:	f383 8812 	msr	BASEPRI_MAX, r3
    c746:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c74a:	4825      	ldr	r0, [pc, #148]	; (c7e0 <z_impl_k_sem_take+0xcc>)
    c74c:	f7ff fdea 	bl	c324 <z_spin_lock_valid>
    c750:	b940      	cbnz	r0, c764 <z_impl_k_sem_take+0x50>
    c752:	4924      	ldr	r1, [pc, #144]	; (c7e4 <z_impl_k_sem_take+0xd0>)
    c754:	4821      	ldr	r0, [pc, #132]	; (c7dc <z_impl_k_sem_take+0xc8>)
    c756:	2281      	movs	r2, #129	; 0x81
    c758:	f002 fe35 	bl	f3c6 <printk>
    c75c:	4821      	ldr	r0, [pc, #132]	; (c7e4 <z_impl_k_sem_take+0xd0>)
    c75e:	2181      	movs	r1, #129	; 0x81
    c760:	f002 fef6 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    c764:	481e      	ldr	r0, [pc, #120]	; (c7e0 <z_impl_k_sem_take+0xcc>)
    c766:	f7ff fdfb 	bl	c360 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    c76a:	68a3      	ldr	r3, [r4, #8]
    c76c:	b1ab      	cbz	r3, c79a <z_impl_k_sem_take+0x86>
		sem->count--;
    c76e:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c770:	481b      	ldr	r0, [pc, #108]	; (c7e0 <z_impl_k_sem_take+0xcc>)
    c772:	60a3      	str	r3, [r4, #8]
    c774:	f7ff fde4 	bl	c340 <z_spin_unlock_valid>
    c778:	b940      	cbnz	r0, c78c <z_impl_k_sem_take+0x78>
    c77a:	491a      	ldr	r1, [pc, #104]	; (c7e4 <z_impl_k_sem_take+0xd0>)
    c77c:	4817      	ldr	r0, [pc, #92]	; (c7dc <z_impl_k_sem_take+0xc8>)
    c77e:	22ac      	movs	r2, #172	; 0xac
    c780:	f002 fe21 	bl	f3c6 <printk>
    c784:	4817      	ldr	r0, [pc, #92]	; (c7e4 <z_impl_k_sem_take+0xd0>)
    c786:	21ac      	movs	r1, #172	; 0xac
    c788:	f002 fee2 	bl	f550 <assert_post_action>
	__asm__ volatile(
    c78c:	f385 8811 	msr	BASEPRI, r5
    c790:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    c794:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    c796:	b003      	add	sp, #12
    c798:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    c79a:	ea56 0307 	orrs.w	r3, r6, r7
    c79e:	d113      	bne.n	c7c8 <z_impl_k_sem_take+0xb4>
    c7a0:	480f      	ldr	r0, [pc, #60]	; (c7e0 <z_impl_k_sem_take+0xcc>)
    c7a2:	f7ff fdcd 	bl	c340 <z_spin_unlock_valid>
    c7a6:	b940      	cbnz	r0, c7ba <z_impl_k_sem_take+0xa6>
    c7a8:	490e      	ldr	r1, [pc, #56]	; (c7e4 <z_impl_k_sem_take+0xd0>)
    c7aa:	480c      	ldr	r0, [pc, #48]	; (c7dc <z_impl_k_sem_take+0xc8>)
    c7ac:	22ac      	movs	r2, #172	; 0xac
    c7ae:	f002 fe0a 	bl	f3c6 <printk>
    c7b2:	480c      	ldr	r0, [pc, #48]	; (c7e4 <z_impl_k_sem_take+0xd0>)
    c7b4:	21ac      	movs	r1, #172	; 0xac
    c7b6:	f002 fecb 	bl	f550 <assert_post_action>
    c7ba:	f385 8811 	msr	BASEPRI, r5
    c7be:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    c7c2:	f06f 000f 	mvn.w	r0, #15
    c7c6:	e7e6      	b.n	c796 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    c7c8:	e9cd 6700 	strd	r6, r7, [sp]
    c7cc:	4622      	mov	r2, r4
    c7ce:	4629      	mov	r1, r5
    c7d0:	4803      	ldr	r0, [pc, #12]	; (c7e0 <z_impl_k_sem_take+0xcc>)
    c7d2:	f000 fc0f 	bl	cff4 <z_pend_curr>
	return ret;
    c7d6:	e7de      	b.n	c796 <z_impl_k_sem_take+0x82>
    c7d8:	00014b9a 	.word	0x00014b9a
    c7dc:	00013904 	.word	0x00013904
    c7e0:	20000c4c 	.word	0x20000c4c
    c7e4:	00013b71 	.word	0x00013b71

0000c7e8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    c7e8:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    c7ea:	4c08      	ldr	r4, [pc, #32]	; (c80c <z_reset_time_slice+0x24>)
    c7ec:	6823      	ldr	r3, [r4, #0]
    c7ee:	b15b      	cbz	r3, c808 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    c7f0:	f7fc f8fa 	bl	89e8 <sys_clock_elapsed>
    c7f4:	4603      	mov	r3, r0
    c7f6:	6820      	ldr	r0, [r4, #0]
    c7f8:	4a05      	ldr	r2, [pc, #20]	; (c810 <z_reset_time_slice+0x28>)
    c7fa:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    c7fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    c800:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    c802:	2100      	movs	r1, #0
    c804:	f001 b950 	b.w	daa8 <z_set_timeout_expiry>
}
    c808:	bd10      	pop	{r4, pc}
    c80a:	bf00      	nop
    c80c:	20000c5c 	.word	0x20000c5c
    c810:	20000c20 	.word	0x20000c20

0000c814 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    c814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c816:	4604      	mov	r4, r0
    c818:	460d      	mov	r5, r1
	__asm__ volatile(
    c81a:	f04f 0320 	mov.w	r3, #32
    c81e:	f3ef 8611 	mrs	r6, BASEPRI
    c822:	f383 8812 	msr	BASEPRI_MAX, r3
    c826:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c82a:	481e      	ldr	r0, [pc, #120]	; (c8a4 <k_sched_time_slice_set+0x90>)
    c82c:	f7ff fd7a 	bl	c324 <z_spin_lock_valid>
    c830:	b940      	cbnz	r0, c844 <k_sched_time_slice_set+0x30>
    c832:	491d      	ldr	r1, [pc, #116]	; (c8a8 <k_sched_time_slice_set+0x94>)
    c834:	481d      	ldr	r0, [pc, #116]	; (c8ac <k_sched_time_slice_set+0x98>)
    c836:	2281      	movs	r2, #129	; 0x81
    c838:	f002 fdc5 	bl	f3c6 <printk>
    c83c:	481a      	ldr	r0, [pc, #104]	; (c8a8 <k_sched_time_slice_set+0x94>)
    c83e:	2181      	movs	r1, #129	; 0x81
    c840:	f002 fe86 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    c844:	4817      	ldr	r0, [pc, #92]	; (c8a4 <k_sched_time_slice_set+0x90>)
    c846:	f7ff fd8b 	bl	c360 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    c84a:	4b19      	ldr	r3, [pc, #100]	; (c8b0 <k_sched_time_slice_set+0x9c>)
    c84c:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    c84e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    c852:	f240 30e7 	movw	r0, #999	; 0x3e7
    c856:	2100      	movs	r1, #0
    c858:	611a      	str	r2, [r3, #16]
    c85a:	fbe7 0104 	umlal	r0, r1, r7, r4
    c85e:	2300      	movs	r3, #0
    c860:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c864:	f7f4 fc2c 	bl	10c0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    c868:	2c00      	cmp	r4, #0
    c86a:	4b12      	ldr	r3, [pc, #72]	; (c8b4 <k_sched_time_slice_set+0xa0>)
    c86c:	dc16      	bgt.n	c89c <k_sched_time_slice_set+0x88>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    c86e:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    c870:	4b11      	ldr	r3, [pc, #68]	; (c8b8 <k_sched_time_slice_set+0xa4>)
    c872:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    c874:	f7ff ffb8 	bl	c7e8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c878:	480a      	ldr	r0, [pc, #40]	; (c8a4 <k_sched_time_slice_set+0x90>)
    c87a:	f7ff fd61 	bl	c340 <z_spin_unlock_valid>
    c87e:	b940      	cbnz	r0, c892 <k_sched_time_slice_set+0x7e>
    c880:	4909      	ldr	r1, [pc, #36]	; (c8a8 <k_sched_time_slice_set+0x94>)
    c882:	480a      	ldr	r0, [pc, #40]	; (c8ac <k_sched_time_slice_set+0x98>)
    c884:	22ac      	movs	r2, #172	; 0xac
    c886:	f002 fd9e 	bl	f3c6 <printk>
    c88a:	4807      	ldr	r0, [pc, #28]	; (c8a8 <k_sched_time_slice_set+0x94>)
    c88c:	21ac      	movs	r1, #172	; 0xac
    c88e:	f002 fe5f 	bl	f550 <assert_post_action>
	__asm__ volatile(
    c892:	f386 8811 	msr	BASEPRI, r6
    c896:	f3bf 8f6f 	isb	sy
	}
}
    c89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    c89c:	2802      	cmp	r0, #2
    c89e:	bfb8      	it	lt
    c8a0:	2002      	movlt	r0, #2
    c8a2:	e7e4      	b.n	c86e <k_sched_time_slice_set+0x5a>
    c8a4:	20000c54 	.word	0x20000c54
    c8a8:	00013b71 	.word	0x00013b71
    c8ac:	00013904 	.word	0x00013904
    c8b0:	20000c20 	.word	0x20000c20
    c8b4:	20000c5c 	.word	0x20000c5c
    c8b8:	20000c58 	.word	0x20000c58

0000c8bc <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    c8bc:	b538      	push	{r3, r4, r5, lr}
    c8be:	4604      	mov	r4, r0
	__asm__ volatile(
    c8c0:	f04f 0320 	mov.w	r3, #32
    c8c4:	f3ef 8511 	mrs	r5, BASEPRI
    c8c8:	f383 8812 	msr	BASEPRI_MAX, r3
    c8cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c8d0:	4812      	ldr	r0, [pc, #72]	; (c91c <z_unpend_thread_no_timeout+0x60>)
    c8d2:	f7ff fd27 	bl	c324 <z_spin_lock_valid>
    c8d6:	b940      	cbnz	r0, c8ea <z_unpend_thread_no_timeout+0x2e>
    c8d8:	4911      	ldr	r1, [pc, #68]	; (c920 <z_unpend_thread_no_timeout+0x64>)
    c8da:	4812      	ldr	r0, [pc, #72]	; (c924 <z_unpend_thread_no_timeout+0x68>)
    c8dc:	2281      	movs	r2, #129	; 0x81
    c8de:	f002 fd72 	bl	f3c6 <printk>
    c8e2:	480f      	ldr	r0, [pc, #60]	; (c920 <z_unpend_thread_no_timeout+0x64>)
    c8e4:	2181      	movs	r1, #129	; 0x81
    c8e6:	f002 fe33 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    c8ea:	480c      	ldr	r0, [pc, #48]	; (c91c <z_unpend_thread_no_timeout+0x60>)
    c8ec:	f7ff fd38 	bl	c360 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
    c8f0:	4620      	mov	r0, r4
    c8f2:	f000 f8c1 	bl	ca78 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c8f6:	4809      	ldr	r0, [pc, #36]	; (c91c <z_unpend_thread_no_timeout+0x60>)
    c8f8:	f7ff fd22 	bl	c340 <z_spin_unlock_valid>
    c8fc:	b940      	cbnz	r0, c910 <z_unpend_thread_no_timeout+0x54>
    c8fe:	4908      	ldr	r1, [pc, #32]	; (c920 <z_unpend_thread_no_timeout+0x64>)
    c900:	4808      	ldr	r0, [pc, #32]	; (c924 <z_unpend_thread_no_timeout+0x68>)
    c902:	22ac      	movs	r2, #172	; 0xac
    c904:	f002 fd5f 	bl	f3c6 <printk>
    c908:	4805      	ldr	r0, [pc, #20]	; (c920 <z_unpend_thread_no_timeout+0x64>)
    c90a:	21ac      	movs	r1, #172	; 0xac
    c90c:	f002 fe20 	bl	f550 <assert_post_action>
	__asm__ volatile(
    c910:	f385 8811 	msr	BASEPRI, r5
    c914:	f3bf 8f6f 	isb	sy
	}
}
    c918:	bd38      	pop	{r3, r4, r5, pc}
    c91a:	bf00      	nop
    c91c:	20000c54 	.word	0x20000c54
    c920:	00013b71 	.word	0x00013b71
    c924:	00013904 	.word	0x00013904

0000c928 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    c928:	b510      	push	{r4, lr}
    c92a:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    c92c:	460c      	mov	r4, r1
    c92e:	b9c1      	cbnz	r1, c962 <z_reschedule+0x3a>
    c930:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
    c934:	b9aa      	cbnz	r2, c962 <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
    c936:	4a14      	ldr	r2, [pc, #80]	; (c988 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
    c938:	69d1      	ldr	r1, [r2, #28]
    c93a:	6892      	ldr	r2, [r2, #8]
    c93c:	4291      	cmp	r1, r2
    c93e:	d010      	beq.n	c962 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c940:	f7ff fcfe 	bl	c340 <z_spin_unlock_valid>
    c944:	b940      	cbnz	r0, c958 <z_reschedule+0x30>
    c946:	4911      	ldr	r1, [pc, #68]	; (c98c <z_reschedule+0x64>)
    c948:	4811      	ldr	r0, [pc, #68]	; (c990 <z_reschedule+0x68>)
    c94a:	22c3      	movs	r2, #195	; 0xc3
    c94c:	f002 fd3b 	bl	f3c6 <printk>
    c950:	480e      	ldr	r0, [pc, #56]	; (c98c <z_reschedule+0x64>)
    c952:	21c3      	movs	r1, #195	; 0xc3
    c954:	f002 fdfc 	bl	f550 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    c958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
    c95c:	2000      	movs	r0, #0
    c95e:	f7f9 b83d 	b.w	59dc <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c962:	4618      	mov	r0, r3
    c964:	f7ff fcec 	bl	c340 <z_spin_unlock_valid>
    c968:	b940      	cbnz	r0, c97c <z_reschedule+0x54>
    c96a:	4908      	ldr	r1, [pc, #32]	; (c98c <z_reschedule+0x64>)
    c96c:	4808      	ldr	r0, [pc, #32]	; (c990 <z_reschedule+0x68>)
    c96e:	22ac      	movs	r2, #172	; 0xac
    c970:	f002 fd29 	bl	f3c6 <printk>
    c974:	4805      	ldr	r0, [pc, #20]	; (c98c <z_reschedule+0x64>)
    c976:	21ac      	movs	r1, #172	; 0xac
    c978:	f002 fdea 	bl	f550 <assert_post_action>
    c97c:	f384 8811 	msr	BASEPRI, r4
    c980:	f3bf 8f6f 	isb	sy
    c984:	bd10      	pop	{r4, pc}
    c986:	bf00      	nop
    c988:	20000c20 	.word	0x20000c20
    c98c:	00013b71 	.word	0x00013b71
    c990:	00013904 	.word	0x00013904

0000c994 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    c994:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    c996:	f04f 0320 	mov.w	r3, #32
    c99a:	f3ef 8511 	mrs	r5, BASEPRI
    c99e:	f383 8812 	msr	BASEPRI_MAX, r3
    c9a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c9a6:	4820      	ldr	r0, [pc, #128]	; (ca28 <k_sched_lock+0x94>)
    c9a8:	f7ff fcbc 	bl	c324 <z_spin_lock_valid>
    c9ac:	b940      	cbnz	r0, c9c0 <k_sched_lock+0x2c>
    c9ae:	491f      	ldr	r1, [pc, #124]	; (ca2c <k_sched_lock+0x98>)
    c9b0:	481f      	ldr	r0, [pc, #124]	; (ca30 <k_sched_lock+0x9c>)
    c9b2:	2281      	movs	r2, #129	; 0x81
    c9b4:	f002 fd07 	bl	f3c6 <printk>
    c9b8:	481c      	ldr	r0, [pc, #112]	; (ca2c <k_sched_lock+0x98>)
    c9ba:	2181      	movs	r1, #129	; 0x81
    c9bc:	f002 fdc8 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    c9c0:	4819      	ldr	r0, [pc, #100]	; (ca28 <k_sched_lock+0x94>)
    c9c2:	f7ff fccd 	bl	c360 <z_spin_lock_set_owner>
    c9c6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    c9ca:	b143      	cbz	r3, c9de <k_sched_lock+0x4a>
    c9cc:	4919      	ldr	r1, [pc, #100]	; (ca34 <k_sched_lock+0xa0>)
    c9ce:	4818      	ldr	r0, [pc, #96]	; (ca30 <k_sched_lock+0x9c>)
    c9d0:	22fd      	movs	r2, #253	; 0xfd
    c9d2:	f002 fcf8 	bl	f3c6 <printk>
    c9d6:	4817      	ldr	r0, [pc, #92]	; (ca34 <k_sched_lock+0xa0>)
    c9d8:	21fd      	movs	r1, #253	; 0xfd
    c9da:	f002 fdb9 	bl	f550 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    c9de:	4c16      	ldr	r4, [pc, #88]	; (ca38 <k_sched_lock+0xa4>)
    c9e0:	68a2      	ldr	r2, [r4, #8]
    c9e2:	7bd2      	ldrb	r2, [r2, #15]
    c9e4:	2a01      	cmp	r2, #1
    c9e6:	d108      	bne.n	c9fa <k_sched_lock+0x66>
    c9e8:	4912      	ldr	r1, [pc, #72]	; (ca34 <k_sched_lock+0xa0>)
    c9ea:	4811      	ldr	r0, [pc, #68]	; (ca30 <k_sched_lock+0x9c>)
    c9ec:	22fe      	movs	r2, #254	; 0xfe
    c9ee:	f002 fcea 	bl	f3c6 <printk>
    c9f2:	4810      	ldr	r0, [pc, #64]	; (ca34 <k_sched_lock+0xa0>)
    c9f4:	21fe      	movs	r1, #254	; 0xfe
    c9f6:	f002 fdab 	bl	f550 <assert_post_action>
	--_current->base.sched_locked;
    c9fa:	68a2      	ldr	r2, [r4, #8]
    c9fc:	7bd3      	ldrb	r3, [r2, #15]
    c9fe:	3b01      	subs	r3, #1
    ca00:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ca02:	4809      	ldr	r0, [pc, #36]	; (ca28 <k_sched_lock+0x94>)
    ca04:	f7ff fc9c 	bl	c340 <z_spin_unlock_valid>
    ca08:	b940      	cbnz	r0, ca1c <k_sched_lock+0x88>
    ca0a:	4908      	ldr	r1, [pc, #32]	; (ca2c <k_sched_lock+0x98>)
    ca0c:	4808      	ldr	r0, [pc, #32]	; (ca30 <k_sched_lock+0x9c>)
    ca0e:	22ac      	movs	r2, #172	; 0xac
    ca10:	f002 fcd9 	bl	f3c6 <printk>
    ca14:	4805      	ldr	r0, [pc, #20]	; (ca2c <k_sched_lock+0x98>)
    ca16:	21ac      	movs	r1, #172	; 0xac
    ca18:	f002 fd9a 	bl	f550 <assert_post_action>
	__asm__ volatile(
    ca1c:	f385 8811 	msr	BASEPRI, r5
    ca20:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    ca24:	bd38      	pop	{r3, r4, r5, pc}
    ca26:	bf00      	nop
    ca28:	20000c54 	.word	0x20000c54
    ca2c:	00013b71 	.word	0x00013b71
    ca30:	00013904 	.word	0x00013904
    ca34:	00014b6f 	.word	0x00014b6f
    ca38:	20000c20 	.word	0x20000c20

0000ca3c <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    ca3c:	4b0b      	ldr	r3, [pc, #44]	; (ca6c <z_priq_dumb_remove+0x30>)
    ca3e:	4299      	cmp	r1, r3
{
    ca40:	b510      	push	{r4, lr}
    ca42:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    ca44:	d10a      	bne.n	ca5c <z_priq_dumb_remove+0x20>
    ca46:	490a      	ldr	r1, [pc, #40]	; (ca70 <z_priq_dumb_remove+0x34>)
    ca48:	480a      	ldr	r0, [pc, #40]	; (ca74 <z_priq_dumb_remove+0x38>)
    ca4a:	f240 32e7 	movw	r2, #999	; 0x3e7
    ca4e:	f002 fcba 	bl	f3c6 <printk>
    ca52:	4807      	ldr	r0, [pc, #28]	; (ca70 <z_priq_dumb_remove+0x34>)
    ca54:	f240 31e7 	movw	r1, #999	; 0x3e7
    ca58:	f002 fd7a 	bl	f550 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    ca5c:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    ca60:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    ca62:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    ca64:	2300      	movs	r3, #0
	node->prev = NULL;
    ca66:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    ca6a:	bd10      	pop	{r4, pc}
    ca6c:	200004c8 	.word	0x200004c8
    ca70:	00014bba 	.word	0x00014bba
    ca74:	00013904 	.word	0x00013904

0000ca78 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    ca78:	6883      	ldr	r3, [r0, #8]
{
    ca7a:	b510      	push	{r4, lr}
    ca7c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    ca7e:	b953      	cbnz	r3, ca96 <unpend_thread_no_timeout+0x1e>
    ca80:	490a      	ldr	r1, [pc, #40]	; (caac <unpend_thread_no_timeout+0x34>)
    ca82:	480b      	ldr	r0, [pc, #44]	; (cab0 <unpend_thread_no_timeout+0x38>)
    ca84:	f240 2283 	movw	r2, #643	; 0x283
    ca88:	f002 fc9d 	bl	f3c6 <printk>
    ca8c:	4807      	ldr	r0, [pc, #28]	; (caac <unpend_thread_no_timeout+0x34>)
    ca8e:	f240 2183 	movw	r1, #643	; 0x283
    ca92:	f002 fd5d 	bl	f550 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    ca96:	68a0      	ldr	r0, [r4, #8]
    ca98:	4621      	mov	r1, r4
    ca9a:	f7ff ffcf 	bl	ca3c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    ca9e:	7b63      	ldrb	r3, [r4, #13]
    caa0:	f023 0302 	bic.w	r3, r3, #2
    caa4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    caa6:	2300      	movs	r3, #0
    caa8:	60a3      	str	r3, [r4, #8]
}
    caaa:	bd10      	pop	{r4, pc}
    caac:	00014bba 	.word	0x00014bba
    cab0:	00013904 	.word	0x00013904

0000cab4 <update_cache>:
{
    cab4:	b538      	push	{r3, r4, r5, lr}
    cab6:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    cab8:	4812      	ldr	r0, [pc, #72]	; (cb04 <update_cache+0x50>)
    caba:	4d13      	ldr	r5, [pc, #76]	; (cb08 <update_cache+0x54>)
    cabc:	f005 fbc8 	bl	12250 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    cac0:	4604      	mov	r4, r0
    cac2:	b900      	cbnz	r0, cac6 <update_cache+0x12>
    cac4:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    cac6:	b9aa      	cbnz	r2, caf4 <update_cache+0x40>
	__ASSERT(_current != NULL, "");
    cac8:	68ab      	ldr	r3, [r5, #8]
    caca:	b943      	cbnz	r3, cade <update_cache+0x2a>
    cacc:	490f      	ldr	r1, [pc, #60]	; (cb0c <update_cache+0x58>)
    cace:	4810      	ldr	r0, [pc, #64]	; (cb10 <update_cache+0x5c>)
    cad0:	2289      	movs	r2, #137	; 0x89
    cad2:	f002 fc78 	bl	f3c6 <printk>
    cad6:	480d      	ldr	r0, [pc, #52]	; (cb0c <update_cache+0x58>)
    cad8:	2189      	movs	r1, #137	; 0x89
    cada:	f002 fd39 	bl	f550 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    cade:	68ab      	ldr	r3, [r5, #8]
    cae0:	7b5a      	ldrb	r2, [r3, #13]
    cae2:	06d2      	lsls	r2, r2, #27
    cae4:	d106      	bne.n	caf4 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    cae6:	69a2      	ldr	r2, [r4, #24]
    cae8:	b922      	cbnz	r2, caf4 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
    caea:	89da      	ldrh	r2, [r3, #14]
    caec:	2a7f      	cmp	r2, #127	; 0x7f
    caee:	d901      	bls.n	caf4 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
    caf0:	61eb      	str	r3, [r5, #28]
}
    caf2:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    caf4:	68ab      	ldr	r3, [r5, #8]
    caf6:	42a3      	cmp	r3, r4
    caf8:	d001      	beq.n	cafe <update_cache+0x4a>
			z_reset_time_slice();
    cafa:	f7ff fe75 	bl	c7e8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    cafe:	61ec      	str	r4, [r5, #28]
}
    cb00:	e7f7      	b.n	caf2 <update_cache+0x3e>
    cb02:	bf00      	nop
    cb04:	20000c40 	.word	0x20000c40
    cb08:	20000c20 	.word	0x20000c20
    cb0c:	00014bba 	.word	0x00014bba
    cb10:	00013904 	.word	0x00013904

0000cb14 <move_thread_to_end_of_prio_q>:
{
    cb14:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    cb16:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    cb1a:	7b43      	ldrb	r3, [r0, #13]
    cb1c:	2a00      	cmp	r2, #0
{
    cb1e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    cb20:	da06      	bge.n	cb30 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    cb22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    cb26:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    cb28:	4601      	mov	r1, r0
    cb2a:	481f      	ldr	r0, [pc, #124]	; (cba8 <move_thread_to_end_of_prio_q+0x94>)
    cb2c:	f7ff ff86 	bl	ca3c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    cb30:	7b63      	ldrb	r3, [r4, #13]
    cb32:	f063 037f 	orn	r3, r3, #127	; 0x7f
    cb36:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    cb38:	4b1c      	ldr	r3, [pc, #112]	; (cbac <move_thread_to_end_of_prio_q+0x98>)
    cb3a:	429c      	cmp	r4, r3
    cb3c:	d108      	bne.n	cb50 <move_thread_to_end_of_prio_q+0x3c>
    cb3e:	491c      	ldr	r1, [pc, #112]	; (cbb0 <move_thread_to_end_of_prio_q+0x9c>)
    cb40:	481c      	ldr	r0, [pc, #112]	; (cbb4 <move_thread_to_end_of_prio_q+0xa0>)
    cb42:	22ba      	movs	r2, #186	; 0xba
    cb44:	f002 fc3f 	bl	f3c6 <printk>
    cb48:	4819      	ldr	r0, [pc, #100]	; (cbb0 <move_thread_to_end_of_prio_q+0x9c>)
    cb4a:	21ba      	movs	r1, #186	; 0xba
    cb4c:	f002 fd00 	bl	f550 <assert_post_action>
	return list->head == list;
    cb50:	4a19      	ldr	r2, [pc, #100]	; (cbb8 <move_thread_to_end_of_prio_q+0xa4>)
    cb52:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    cb54:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
    cb56:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cb5a:	428b      	cmp	r3, r1
    cb5c:	bf08      	it	eq
    cb5e:	2300      	moveq	r3, #0
    cb60:	2b00      	cmp	r3, #0
    cb62:	bf38      	it	cc
    cb64:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    cb66:	b1cb      	cbz	r3, cb9c <move_thread_to_end_of_prio_q+0x88>
	int32_t b1 = thread_1->base.prio;
    cb68:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    cb6c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    cb70:	4286      	cmp	r6, r0
    cb72:	d00f      	beq.n	cb94 <move_thread_to_end_of_prio_q+0x80>
		return b2 - b1;
    cb74:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    cb76:	2800      	cmp	r0, #0
    cb78:	dd0c      	ble.n	cb94 <move_thread_to_end_of_prio_q+0x80>
	sys_dnode_t *const prev = successor->prev;
    cb7a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    cb7c:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    cb80:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    cb82:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    cb84:	6890      	ldr	r0, [r2, #8]
    cb86:	1b03      	subs	r3, r0, r4
    cb88:	4258      	negs	r0, r3
}
    cb8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    cb8e:	4158      	adcs	r0, r3
    cb90:	f7ff bf90 	b.w	cab4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    cb94:	42ab      	cmp	r3, r5
    cb96:	d001      	beq.n	cb9c <move_thread_to_end_of_prio_q+0x88>
    cb98:	681b      	ldr	r3, [r3, #0]
    cb9a:	e7e4      	b.n	cb66 <move_thread_to_end_of_prio_q+0x52>
	node->prev = tail;
    cb9c:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
    cba0:	602c      	str	r4, [r5, #0]
	list->tail = node;
    cba2:	6254      	str	r4, [r2, #36]	; 0x24
}
    cba4:	e7ee      	b.n	cb84 <move_thread_to_end_of_prio_q+0x70>
    cba6:	bf00      	nop
    cba8:	20000c40 	.word	0x20000c40
    cbac:	200004c8 	.word	0x200004c8
    cbb0:	00014bba 	.word	0x00014bba
    cbb4:	00013904 	.word	0x00013904
    cbb8:	20000c20 	.word	0x20000c20

0000cbbc <z_time_slice>:
{
    cbbc:	b570      	push	{r4, r5, r6, lr}
    cbbe:	4604      	mov	r4, r0
	__asm__ volatile(
    cbc0:	f04f 0320 	mov.w	r3, #32
    cbc4:	f3ef 8511 	mrs	r5, BASEPRI
    cbc8:	f383 8812 	msr	BASEPRI_MAX, r3
    cbcc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cbd0:	4825      	ldr	r0, [pc, #148]	; (cc68 <z_time_slice+0xac>)
    cbd2:	f7ff fba7 	bl	c324 <z_spin_lock_valid>
    cbd6:	b940      	cbnz	r0, cbea <z_time_slice+0x2e>
    cbd8:	4924      	ldr	r1, [pc, #144]	; (cc6c <z_time_slice+0xb0>)
    cbda:	4825      	ldr	r0, [pc, #148]	; (cc70 <z_time_slice+0xb4>)
    cbdc:	2281      	movs	r2, #129	; 0x81
    cbde:	f002 fbf2 	bl	f3c6 <printk>
    cbe2:	4822      	ldr	r0, [pc, #136]	; (cc6c <z_time_slice+0xb0>)
    cbe4:	2181      	movs	r1, #129	; 0x81
    cbe6:	f002 fcb3 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    cbea:	481f      	ldr	r0, [pc, #124]	; (cc68 <z_time_slice+0xac>)
    cbec:	f7ff fbb8 	bl	c360 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    cbf0:	4b20      	ldr	r3, [pc, #128]	; (cc74 <z_time_slice+0xb8>)
    cbf2:	4a21      	ldr	r2, [pc, #132]	; (cc78 <z_time_slice+0xbc>)
    cbf4:	6898      	ldr	r0, [r3, #8]
    cbf6:	6811      	ldr	r1, [r2, #0]
    cbf8:	4288      	cmp	r0, r1
    cbfa:	4619      	mov	r1, r3
    cbfc:	d113      	bne.n	cc26 <z_time_slice+0x6a>
			z_reset_time_slice();
    cbfe:	f7ff fdf3 	bl	c7e8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cc02:	4819      	ldr	r0, [pc, #100]	; (cc68 <z_time_slice+0xac>)
    cc04:	f7ff fb9c 	bl	c340 <z_spin_unlock_valid>
    cc08:	b940      	cbnz	r0, cc1c <z_time_slice+0x60>
    cc0a:	4918      	ldr	r1, [pc, #96]	; (cc6c <z_time_slice+0xb0>)
    cc0c:	4818      	ldr	r0, [pc, #96]	; (cc70 <z_time_slice+0xb4>)
    cc0e:	22ac      	movs	r2, #172	; 0xac
    cc10:	f002 fbd9 	bl	f3c6 <printk>
    cc14:	4815      	ldr	r0, [pc, #84]	; (cc6c <z_time_slice+0xb0>)
    cc16:	21ac      	movs	r1, #172	; 0xac
    cc18:	f002 fc9a 	bl	f550 <assert_post_action>
	__asm__ volatile(
    cc1c:	f385 8811 	msr	BASEPRI, r5
    cc20:	f3bf 8f6f 	isb	sy
}
    cc24:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    cc26:	2600      	movs	r6, #0
    cc28:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    cc2a:	4a14      	ldr	r2, [pc, #80]	; (cc7c <z_time_slice+0xc0>)
    cc2c:	6812      	ldr	r2, [r2, #0]
    cc2e:	b1ba      	cbz	r2, cc60 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
    cc30:	89c2      	ldrh	r2, [r0, #14]
    cc32:	2a7f      	cmp	r2, #127	; 0x7f
    cc34:	d814      	bhi.n	cc60 <z_time_slice+0xa4>
		&& !z_is_thread_prevented_from_running(thread)
    cc36:	7b42      	ldrb	r2, [r0, #13]
    cc38:	06d2      	lsls	r2, r2, #27
    cc3a:	d111      	bne.n	cc60 <z_time_slice+0xa4>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    cc3c:	4a10      	ldr	r2, [pc, #64]	; (cc80 <z_time_slice+0xc4>)
    cc3e:	f990 600e 	ldrsb.w	r6, [r0, #14]
    cc42:	6812      	ldr	r2, [r2, #0]
    cc44:	4296      	cmp	r6, r2
    cc46:	db0b      	blt.n	cc60 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
    cc48:	4a0e      	ldr	r2, [pc, #56]	; (cc84 <z_time_slice+0xc8>)
    cc4a:	4290      	cmp	r0, r2
    cc4c:	d008      	beq.n	cc60 <z_time_slice+0xa4>
		if (ticks >= _current_cpu->slice_ticks) {
    cc4e:	691a      	ldr	r2, [r3, #16]
    cc50:	42a2      	cmp	r2, r4
    cc52:	dc02      	bgt.n	cc5a <z_time_slice+0x9e>
			move_thread_to_end_of_prio_q(_current);
    cc54:	f7ff ff5e 	bl	cb14 <move_thread_to_end_of_prio_q>
    cc58:	e7d1      	b.n	cbfe <z_time_slice+0x42>
			_current_cpu->slice_ticks -= ticks;
    cc5a:	1b12      	subs	r2, r2, r4
    cc5c:	611a      	str	r2, [r3, #16]
    cc5e:	e7d0      	b.n	cc02 <z_time_slice+0x46>
		_current_cpu->slice_ticks = 0;
    cc60:	2300      	movs	r3, #0
    cc62:	610b      	str	r3, [r1, #16]
    cc64:	e7cd      	b.n	cc02 <z_time_slice+0x46>
    cc66:	bf00      	nop
    cc68:	20000c54 	.word	0x20000c54
    cc6c:	00013b71 	.word	0x00013b71
    cc70:	00013904 	.word	0x00013904
    cc74:	20000c20 	.word	0x20000c20
    cc78:	20000c50 	.word	0x20000c50
    cc7c:	20000c5c 	.word	0x20000c5c
    cc80:	20000c58 	.word	0x20000c58
    cc84:	200004c8 	.word	0x200004c8

0000cc88 <ready_thread>:
{
    cc88:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    cc8a:	f990 200d 	ldrsb.w	r2, [r0, #13]
    cc8e:	7b43      	ldrb	r3, [r0, #13]
    cc90:	2a00      	cmp	r2, #0
{
    cc92:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    cc94:	db3d      	blt.n	cd12 <ready_thread+0x8a>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    cc96:	06da      	lsls	r2, r3, #27
    cc98:	d13b      	bne.n	cd12 <ready_thread+0x8a>
	return !sys_dnode_is_linked(&to->node);
    cc9a:	6985      	ldr	r5, [r0, #24]
    cc9c:	2d00      	cmp	r5, #0
    cc9e:	d138      	bne.n	cd12 <ready_thread+0x8a>
	thread->base.thread_state |= _THREAD_QUEUED;
    cca0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    cca4:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    cca6:	4b1b      	ldr	r3, [pc, #108]	; (cd14 <ready_thread+0x8c>)
    cca8:	4298      	cmp	r0, r3
    ccaa:	d108      	bne.n	ccbe <ready_thread+0x36>
    ccac:	491a      	ldr	r1, [pc, #104]	; (cd18 <ready_thread+0x90>)
    ccae:	481b      	ldr	r0, [pc, #108]	; (cd1c <ready_thread+0x94>)
    ccb0:	22ba      	movs	r2, #186	; 0xba
    ccb2:	f002 fb88 	bl	f3c6 <printk>
    ccb6:	4818      	ldr	r0, [pc, #96]	; (cd18 <ready_thread+0x90>)
    ccb8:	21ba      	movs	r1, #186	; 0xba
    ccba:	f002 fc49 	bl	f550 <assert_post_action>
	return list->head == list;
    ccbe:	4918      	ldr	r1, [pc, #96]	; (cd20 <ready_thread+0x98>)
    ccc0:	460b      	mov	r3, r1
    ccc2:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ccc6:	4298      	cmp	r0, r3
    ccc8:	bf18      	it	ne
    ccca:	4605      	movne	r5, r0
    cccc:	2d00      	cmp	r5, #0
    ccce:	461a      	mov	r2, r3
    ccd0:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    ccd2:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    ccd4:	bf38      	it	cc
    ccd6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ccd8:	b1b3      	cbz	r3, cd08 <ready_thread+0x80>
	int32_t b1 = thread_1->base.prio;
    ccda:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    ccde:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    cce2:	4286      	cmp	r6, r0
    cce4:	d00c      	beq.n	cd00 <ready_thread+0x78>
		return b2 - b1;
    cce6:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    cce8:	2800      	cmp	r0, #0
    ccea:	dd09      	ble.n	cd00 <ready_thread+0x78>
	sys_dnode_t *const prev = successor->prev;
    ccec:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    ccee:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    ccf2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    ccf4:	605c      	str	r4, [r3, #4]
}
    ccf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    ccfa:	2000      	movs	r0, #0
    ccfc:	f7ff beda 	b.w	cab4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    cd00:	42ab      	cmp	r3, r5
    cd02:	d001      	beq.n	cd08 <ready_thread+0x80>
    cd04:	681b      	ldr	r3, [r3, #0]
    cd06:	e7e7      	b.n	ccd8 <ready_thread+0x50>
	node->prev = tail;
    cd08:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    cd0c:	602c      	str	r4, [r5, #0]
	list->tail = node;
    cd0e:	624c      	str	r4, [r1, #36]	; 0x24
}
    cd10:	e7f1      	b.n	ccf6 <ready_thread+0x6e>
}
    cd12:	bd70      	pop	{r4, r5, r6, pc}
    cd14:	200004c8 	.word	0x200004c8
    cd18:	00014bba 	.word	0x00014bba
    cd1c:	00013904 	.word	0x00013904
    cd20:	20000c20 	.word	0x20000c20

0000cd24 <z_ready_thread>:
{
    cd24:	b538      	push	{r3, r4, r5, lr}
    cd26:	4604      	mov	r4, r0
	__asm__ volatile(
    cd28:	f04f 0320 	mov.w	r3, #32
    cd2c:	f3ef 8511 	mrs	r5, BASEPRI
    cd30:	f383 8812 	msr	BASEPRI_MAX, r3
    cd34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cd38:	4812      	ldr	r0, [pc, #72]	; (cd84 <z_ready_thread+0x60>)
    cd3a:	f7ff faf3 	bl	c324 <z_spin_lock_valid>
    cd3e:	b940      	cbnz	r0, cd52 <z_ready_thread+0x2e>
    cd40:	4911      	ldr	r1, [pc, #68]	; (cd88 <z_ready_thread+0x64>)
    cd42:	4812      	ldr	r0, [pc, #72]	; (cd8c <z_ready_thread+0x68>)
    cd44:	2281      	movs	r2, #129	; 0x81
    cd46:	f002 fb3e 	bl	f3c6 <printk>
    cd4a:	480f      	ldr	r0, [pc, #60]	; (cd88 <z_ready_thread+0x64>)
    cd4c:	2181      	movs	r1, #129	; 0x81
    cd4e:	f002 fbff 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    cd52:	480c      	ldr	r0, [pc, #48]	; (cd84 <z_ready_thread+0x60>)
    cd54:	f7ff fb04 	bl	c360 <z_spin_lock_set_owner>
			ready_thread(thread);
    cd58:	4620      	mov	r0, r4
    cd5a:	f7ff ff95 	bl	cc88 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cd5e:	4809      	ldr	r0, [pc, #36]	; (cd84 <z_ready_thread+0x60>)
    cd60:	f7ff faee 	bl	c340 <z_spin_unlock_valid>
    cd64:	b940      	cbnz	r0, cd78 <z_ready_thread+0x54>
    cd66:	4908      	ldr	r1, [pc, #32]	; (cd88 <z_ready_thread+0x64>)
    cd68:	4808      	ldr	r0, [pc, #32]	; (cd8c <z_ready_thread+0x68>)
    cd6a:	22ac      	movs	r2, #172	; 0xac
    cd6c:	f002 fb2b 	bl	f3c6 <printk>
    cd70:	4805      	ldr	r0, [pc, #20]	; (cd88 <z_ready_thread+0x64>)
    cd72:	21ac      	movs	r1, #172	; 0xac
    cd74:	f002 fbec 	bl	f550 <assert_post_action>
	__asm__ volatile(
    cd78:	f385 8811 	msr	BASEPRI, r5
    cd7c:	f3bf 8f6f 	isb	sy
}
    cd80:	bd38      	pop	{r3, r4, r5, pc}
    cd82:	bf00      	nop
    cd84:	20000c54 	.word	0x20000c54
    cd88:	00013b71 	.word	0x00013b71
    cd8c:	00013904 	.word	0x00013904

0000cd90 <z_sched_start>:
{
    cd90:	b538      	push	{r3, r4, r5, lr}
    cd92:	4604      	mov	r4, r0
	__asm__ volatile(
    cd94:	f04f 0320 	mov.w	r3, #32
    cd98:	f3ef 8511 	mrs	r5, BASEPRI
    cd9c:	f383 8812 	msr	BASEPRI_MAX, r3
    cda0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cda4:	4818      	ldr	r0, [pc, #96]	; (ce08 <z_sched_start+0x78>)
    cda6:	f7ff fabd 	bl	c324 <z_spin_lock_valid>
    cdaa:	b940      	cbnz	r0, cdbe <z_sched_start+0x2e>
    cdac:	4917      	ldr	r1, [pc, #92]	; (ce0c <z_sched_start+0x7c>)
    cdae:	4818      	ldr	r0, [pc, #96]	; (ce10 <z_sched_start+0x80>)
    cdb0:	2281      	movs	r2, #129	; 0x81
    cdb2:	f002 fb08 	bl	f3c6 <printk>
    cdb6:	4815      	ldr	r0, [pc, #84]	; (ce0c <z_sched_start+0x7c>)
    cdb8:	2181      	movs	r1, #129	; 0x81
    cdba:	f002 fbc9 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    cdbe:	4812      	ldr	r0, [pc, #72]	; (ce08 <z_sched_start+0x78>)
    cdc0:	f7ff face 	bl	c360 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    cdc4:	7b63      	ldrb	r3, [r4, #13]
    cdc6:	075a      	lsls	r2, r3, #29
    cdc8:	d411      	bmi.n	cdee <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cdca:	480f      	ldr	r0, [pc, #60]	; (ce08 <z_sched_start+0x78>)
    cdcc:	f7ff fab8 	bl	c340 <z_spin_unlock_valid>
    cdd0:	b940      	cbnz	r0, cde4 <z_sched_start+0x54>
    cdd2:	490e      	ldr	r1, [pc, #56]	; (ce0c <z_sched_start+0x7c>)
    cdd4:	480e      	ldr	r0, [pc, #56]	; (ce10 <z_sched_start+0x80>)
    cdd6:	22ac      	movs	r2, #172	; 0xac
    cdd8:	f002 faf5 	bl	f3c6 <printk>
    cddc:	480b      	ldr	r0, [pc, #44]	; (ce0c <z_sched_start+0x7c>)
    cdde:	21ac      	movs	r1, #172	; 0xac
    cde0:	f002 fbb6 	bl	f550 <assert_post_action>
	__asm__ volatile(
    cde4:	f385 8811 	msr	BASEPRI, r5
    cde8:	f3bf 8f6f 	isb	sy
}
    cdec:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    cdee:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    cdf2:	4620      	mov	r0, r4
    cdf4:	7363      	strb	r3, [r4, #13]
    cdf6:	f7ff ff47 	bl	cc88 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    cdfa:	4629      	mov	r1, r5
    cdfc:	4802      	ldr	r0, [pc, #8]	; (ce08 <z_sched_start+0x78>)
}
    cdfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    ce02:	f7ff bd91 	b.w	c928 <z_reschedule>
    ce06:	bf00      	nop
    ce08:	20000c54 	.word	0x20000c54
    ce0c:	00013b71 	.word	0x00013b71
    ce10:	00013904 	.word	0x00013904

0000ce14 <z_thread_timeout>:
{
    ce14:	b570      	push	{r4, r5, r6, lr}
    ce16:	4604      	mov	r4, r0
	__asm__ volatile(
    ce18:	f04f 0320 	mov.w	r3, #32
    ce1c:	f3ef 8611 	mrs	r6, BASEPRI
    ce20:	f383 8812 	msr	BASEPRI_MAX, r3
    ce24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ce28:	481b      	ldr	r0, [pc, #108]	; (ce98 <z_thread_timeout+0x84>)
    ce2a:	f7ff fa7b 	bl	c324 <z_spin_lock_valid>
    ce2e:	b940      	cbnz	r0, ce42 <z_thread_timeout+0x2e>
    ce30:	491a      	ldr	r1, [pc, #104]	; (ce9c <z_thread_timeout+0x88>)
    ce32:	481b      	ldr	r0, [pc, #108]	; (cea0 <z_thread_timeout+0x8c>)
    ce34:	2281      	movs	r2, #129	; 0x81
    ce36:	f002 fac6 	bl	f3c6 <printk>
    ce3a:	4818      	ldr	r0, [pc, #96]	; (ce9c <z_thread_timeout+0x88>)
    ce3c:	2181      	movs	r1, #129	; 0x81
    ce3e:	f002 fb87 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    ce42:	4815      	ldr	r0, [pc, #84]	; (ce98 <z_thread_timeout+0x84>)
    ce44:	f7ff fa8c 	bl	c360 <z_spin_lock_set_owner>
		if (!killed) {
    ce48:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    ce4c:	f013 0f28 	tst.w	r3, #40	; 0x28
    ce50:	d110      	bne.n	ce74 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
    ce52:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    ce56:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    ce5a:	b113      	cbz	r3, ce62 <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
    ce5c:	4628      	mov	r0, r5
    ce5e:	f7ff fe0b 	bl	ca78 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    ce62:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    ce66:	f023 0314 	bic.w	r3, r3, #20
    ce6a:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    ce6e:	4628      	mov	r0, r5
    ce70:	f7ff ff0a 	bl	cc88 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ce74:	4808      	ldr	r0, [pc, #32]	; (ce98 <z_thread_timeout+0x84>)
    ce76:	f7ff fa63 	bl	c340 <z_spin_unlock_valid>
    ce7a:	b940      	cbnz	r0, ce8e <z_thread_timeout+0x7a>
    ce7c:	4907      	ldr	r1, [pc, #28]	; (ce9c <z_thread_timeout+0x88>)
    ce7e:	4808      	ldr	r0, [pc, #32]	; (cea0 <z_thread_timeout+0x8c>)
    ce80:	22ac      	movs	r2, #172	; 0xac
    ce82:	f002 faa0 	bl	f3c6 <printk>
    ce86:	4805      	ldr	r0, [pc, #20]	; (ce9c <z_thread_timeout+0x88>)
    ce88:	21ac      	movs	r1, #172	; 0xac
    ce8a:	f002 fb61 	bl	f550 <assert_post_action>
	__asm__ volatile(
    ce8e:	f386 8811 	msr	BASEPRI, r6
    ce92:	f3bf 8f6f 	isb	sy
}
    ce96:	bd70      	pop	{r4, r5, r6, pc}
    ce98:	20000c54 	.word	0x20000c54
    ce9c:	00013b71 	.word	0x00013b71
    cea0:	00013904 	.word	0x00013904

0000cea4 <unready_thread>:
{
    cea4:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    cea6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    ceaa:	7b43      	ldrb	r3, [r0, #13]
    ceac:	2a00      	cmp	r2, #0
{
    ceae:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    ceb0:	da06      	bge.n	cec0 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ceb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ceb6:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    ceb8:	4601      	mov	r1, r0
    ceba:	4806      	ldr	r0, [pc, #24]	; (ced4 <unready_thread+0x30>)
    cebc:	f7ff fdbe 	bl	ca3c <z_priq_dumb_remove>
	update_cache(thread == _current);
    cec0:	4b05      	ldr	r3, [pc, #20]	; (ced8 <unready_thread+0x34>)
    cec2:	6898      	ldr	r0, [r3, #8]
    cec4:	1b03      	subs	r3, r0, r4
    cec6:	4258      	negs	r0, r3
}
    cec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    cecc:	4158      	adcs	r0, r3
    cece:	f7ff bdf1 	b.w	cab4 <update_cache>
    ced2:	bf00      	nop
    ced4:	20000c40 	.word	0x20000c40
    ced8:	20000c20 	.word	0x20000c20

0000cedc <add_to_waitq_locked>:
{
    cedc:	b538      	push	{r3, r4, r5, lr}
    cede:	4604      	mov	r4, r0
    cee0:	460d      	mov	r5, r1
	unready_thread(thread);
    cee2:	f7ff ffdf 	bl	cea4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    cee6:	7b63      	ldrb	r3, [r4, #13]
    cee8:	f043 0302 	orr.w	r3, r3, #2
    ceec:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    ceee:	b315      	cbz	r5, cf36 <add_to_waitq_locked+0x5a>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    cef0:	4b17      	ldr	r3, [pc, #92]	; (cf50 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
    cef2:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    cef4:	429c      	cmp	r4, r3
    cef6:	d108      	bne.n	cf0a <add_to_waitq_locked+0x2e>
    cef8:	4916      	ldr	r1, [pc, #88]	; (cf54 <add_to_waitq_locked+0x78>)
    cefa:	4817      	ldr	r0, [pc, #92]	; (cf58 <add_to_waitq_locked+0x7c>)
    cefc:	22ba      	movs	r2, #186	; 0xba
    cefe:	f002 fa62 	bl	f3c6 <printk>
    cf02:	4814      	ldr	r0, [pc, #80]	; (cf54 <add_to_waitq_locked+0x78>)
    cf04:	21ba      	movs	r1, #186	; 0xba
    cf06:	f002 fb23 	bl	f550 <assert_post_action>
	return list->head == list;
    cf0a:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cf0c:	429d      	cmp	r5, r3
    cf0e:	bf08      	it	eq
    cf10:	2300      	moveq	r3, #0
    cf12:	2b00      	cmp	r3, #0
    cf14:	bf38      	it	cc
    cf16:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    cf18:	b19b      	cbz	r3, cf42 <add_to_waitq_locked+0x66>
	int32_t b1 = thread_1->base.prio;
    cf1a:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    cf1e:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    cf22:	4291      	cmp	r1, r2
    cf24:	d008      	beq.n	cf38 <add_to_waitq_locked+0x5c>
		return b2 - b1;
    cf26:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    cf28:	2a00      	cmp	r2, #0
    cf2a:	dd05      	ble.n	cf38 <add_to_waitq_locked+0x5c>
	sys_dnode_t *const prev = successor->prev;
    cf2c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    cf2e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    cf32:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    cf34:	605c      	str	r4, [r3, #4]
}
    cf36:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    cf38:	686a      	ldr	r2, [r5, #4]
    cf3a:	4293      	cmp	r3, r2
    cf3c:	d001      	beq.n	cf42 <add_to_waitq_locked+0x66>
    cf3e:	681b      	ldr	r3, [r3, #0]
    cf40:	e7ea      	b.n	cf18 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const tail = list->tail;
    cf42:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    cf44:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    cf48:	601c      	str	r4, [r3, #0]
	list->tail = node;
    cf4a:	606c      	str	r4, [r5, #4]
    cf4c:	e7f3      	b.n	cf36 <add_to_waitq_locked+0x5a>
    cf4e:	bf00      	nop
    cf50:	200004c8 	.word	0x200004c8
    cf54:	00014bba 	.word	0x00014bba
    cf58:	00013904 	.word	0x00013904

0000cf5c <pend>:
{
    cf5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf60:	4604      	mov	r4, r0
    cf62:	460d      	mov	r5, r1
    cf64:	4616      	mov	r6, r2
    cf66:	461f      	mov	r7, r3
	__asm__ volatile(
    cf68:	f04f 0320 	mov.w	r3, #32
    cf6c:	f3ef 8811 	mrs	r8, BASEPRI
    cf70:	f383 8812 	msr	BASEPRI_MAX, r3
    cf74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cf78:	481a      	ldr	r0, [pc, #104]	; (cfe4 <pend+0x88>)
    cf7a:	f7ff f9d3 	bl	c324 <z_spin_lock_valid>
    cf7e:	b940      	cbnz	r0, cf92 <pend+0x36>
    cf80:	4919      	ldr	r1, [pc, #100]	; (cfe8 <pend+0x8c>)
    cf82:	481a      	ldr	r0, [pc, #104]	; (cfec <pend+0x90>)
    cf84:	2281      	movs	r2, #129	; 0x81
    cf86:	f002 fa1e 	bl	f3c6 <printk>
    cf8a:	4817      	ldr	r0, [pc, #92]	; (cfe8 <pend+0x8c>)
    cf8c:	2181      	movs	r1, #129	; 0x81
    cf8e:	f002 fadf 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    cf92:	4814      	ldr	r0, [pc, #80]	; (cfe4 <pend+0x88>)
    cf94:	f7ff f9e4 	bl	c360 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    cf98:	4620      	mov	r0, r4
    cf9a:	4629      	mov	r1, r5
    cf9c:	f7ff ff9e 	bl	cedc <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cfa0:	4810      	ldr	r0, [pc, #64]	; (cfe4 <pend+0x88>)
    cfa2:	f7ff f9cd 	bl	c340 <z_spin_unlock_valid>
    cfa6:	b940      	cbnz	r0, cfba <pend+0x5e>
    cfa8:	490f      	ldr	r1, [pc, #60]	; (cfe8 <pend+0x8c>)
    cfaa:	4810      	ldr	r0, [pc, #64]	; (cfec <pend+0x90>)
    cfac:	22ac      	movs	r2, #172	; 0xac
    cfae:	f002 fa0a 	bl	f3c6 <printk>
    cfb2:	480d      	ldr	r0, [pc, #52]	; (cfe8 <pend+0x8c>)
    cfb4:	21ac      	movs	r1, #172	; 0xac
    cfb6:	f002 facb 	bl	f550 <assert_post_action>
	__asm__ volatile(
    cfba:	f388 8811 	msr	BASEPRI, r8
    cfbe:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    cfc2:	1c7b      	adds	r3, r7, #1
    cfc4:	bf08      	it	eq
    cfc6:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    cfca:	d008      	beq.n	cfde <pend+0x82>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    cfcc:	4632      	mov	r2, r6
    cfce:	463b      	mov	r3, r7
    cfd0:	f104 0018 	add.w	r0, r4, #24
    cfd4:	4906      	ldr	r1, [pc, #24]	; (cff0 <pend+0x94>)
}
    cfd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cfda:	f000 bc39 	b.w	d850 <z_add_timeout>
    cfde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cfe2:	bf00      	nop
    cfe4:	20000c54 	.word	0x20000c54
    cfe8:	00013b71 	.word	0x00013b71
    cfec:	00013904 	.word	0x00013904
    cff0:	0000ce15 	.word	0x0000ce15

0000cff4 <z_pend_curr>:
{
    cff4:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    cff6:	4b0e      	ldr	r3, [pc, #56]	; (d030 <z_pend_curr+0x3c>)
{
    cff8:	4605      	mov	r5, r0
	pending_current = _current;
    cffa:	6898      	ldr	r0, [r3, #8]
    cffc:	4b0d      	ldr	r3, [pc, #52]	; (d034 <z_pend_curr+0x40>)
{
    cffe:	460c      	mov	r4, r1
	pending_current = _current;
    d000:	6018      	str	r0, [r3, #0]
{
    d002:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    d004:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    d008:	f7ff ffa8 	bl	cf5c <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d00c:	4628      	mov	r0, r5
    d00e:	f7ff f997 	bl	c340 <z_spin_unlock_valid>
    d012:	b940      	cbnz	r0, d026 <z_pend_curr+0x32>
    d014:	4908      	ldr	r1, [pc, #32]	; (d038 <z_pend_curr+0x44>)
    d016:	4809      	ldr	r0, [pc, #36]	; (d03c <z_pend_curr+0x48>)
    d018:	22c3      	movs	r2, #195	; 0xc3
    d01a:	f002 f9d4 	bl	f3c6 <printk>
    d01e:	4806      	ldr	r0, [pc, #24]	; (d038 <z_pend_curr+0x44>)
    d020:	21c3      	movs	r1, #195	; 0xc3
    d022:	f002 fa95 	bl	f550 <assert_post_action>
    d026:	4620      	mov	r0, r4
}
    d028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d02c:	f7f8 bcd6 	b.w	59dc <arch_swap>
    d030:	20000c20 	.word	0x20000c20
    d034:	20000c50 	.word	0x20000c50
    d038:	00013b71 	.word	0x00013b71
    d03c:	00013904 	.word	0x00013904

0000d040 <z_set_prio>:
{
    d040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d042:	4604      	mov	r4, r0
    d044:	460e      	mov	r6, r1
	__asm__ volatile(
    d046:	f04f 0320 	mov.w	r3, #32
    d04a:	f3ef 8711 	mrs	r7, BASEPRI
    d04e:	f383 8812 	msr	BASEPRI_MAX, r3
    d052:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d056:	4837      	ldr	r0, [pc, #220]	; (d134 <z_set_prio+0xf4>)
    d058:	f7ff f964 	bl	c324 <z_spin_lock_valid>
    d05c:	b940      	cbnz	r0, d070 <z_set_prio+0x30>
    d05e:	4936      	ldr	r1, [pc, #216]	; (d138 <z_set_prio+0xf8>)
    d060:	4836      	ldr	r0, [pc, #216]	; (d13c <z_set_prio+0xfc>)
    d062:	2281      	movs	r2, #129	; 0x81
    d064:	f002 f9af 	bl	f3c6 <printk>
    d068:	4833      	ldr	r0, [pc, #204]	; (d138 <z_set_prio+0xf8>)
    d06a:	2181      	movs	r1, #129	; 0x81
    d06c:	f002 fa70 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    d070:	4830      	ldr	r0, [pc, #192]	; (d134 <z_set_prio+0xf4>)
    d072:	f7ff f975 	bl	c360 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    d076:	7b63      	ldrb	r3, [r4, #13]
    d078:	06da      	lsls	r2, r3, #27
    d07a:	b276      	sxtb	r6, r6
    d07c:	d156      	bne.n	d12c <z_set_prio+0xec>
	return !sys_dnode_is_linked(&to->node);
    d07e:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
    d080:	2d00      	cmp	r5, #0
    d082:	d153      	bne.n	d12c <z_set_prio+0xec>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    d088:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    d08a:	482d      	ldr	r0, [pc, #180]	; (d140 <z_set_prio+0x100>)
    d08c:	4621      	mov	r1, r4
    d08e:	f7ff fcd5 	bl	ca3c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    d092:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    d094:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    d096:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d09a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    d09c:	4b29      	ldr	r3, [pc, #164]	; (d144 <z_set_prio+0x104>)
    d09e:	429c      	cmp	r4, r3
    d0a0:	d108      	bne.n	d0b4 <z_set_prio+0x74>
    d0a2:	4929      	ldr	r1, [pc, #164]	; (d148 <z_set_prio+0x108>)
    d0a4:	4825      	ldr	r0, [pc, #148]	; (d13c <z_set_prio+0xfc>)
    d0a6:	22ba      	movs	r2, #186	; 0xba
    d0a8:	f002 f98d 	bl	f3c6 <printk>
    d0ac:	4826      	ldr	r0, [pc, #152]	; (d148 <z_set_prio+0x108>)
    d0ae:	21ba      	movs	r1, #186	; 0xba
    d0b0:	f002 fa4e 	bl	f550 <assert_post_action>
	return list->head == list;
    d0b4:	4925      	ldr	r1, [pc, #148]	; (d14c <z_set_prio+0x10c>)
    d0b6:	460b      	mov	r3, r1
    d0b8:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d0bc:	4298      	cmp	r0, r3
    d0be:	bf18      	it	ne
    d0c0:	4605      	movne	r5, r0
    d0c2:	2d00      	cmp	r5, #0
    d0c4:	461a      	mov	r2, r3
    d0c6:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    d0c8:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    d0ca:	bf38      	it	cc
    d0cc:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d0ce:	b343      	cbz	r3, d122 <z_set_prio+0xe2>
	int32_t b1 = thread_1->base.prio;
    d0d0:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    d0d4:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    d0d8:	4286      	cmp	r6, r0
    d0da:	d01e      	beq.n	d11a <z_set_prio+0xda>
		return b2 - b1;
    d0dc:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    d0de:	2800      	cmp	r0, #0
    d0e0:	dd1b      	ble.n	d11a <z_set_prio+0xda>
	sys_dnode_t *const prev = successor->prev;
    d0e2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    d0e4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    d0e8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    d0ea:	605c      	str	r4, [r3, #4]
			update_cache(1);
    d0ec:	2001      	movs	r0, #1
    d0ee:	f7ff fce1 	bl	cab4 <update_cache>
    d0f2:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d0f4:	480f      	ldr	r0, [pc, #60]	; (d134 <z_set_prio+0xf4>)
    d0f6:	f7ff f923 	bl	c340 <z_spin_unlock_valid>
    d0fa:	b940      	cbnz	r0, d10e <z_set_prio+0xce>
    d0fc:	490e      	ldr	r1, [pc, #56]	; (d138 <z_set_prio+0xf8>)
    d0fe:	480f      	ldr	r0, [pc, #60]	; (d13c <z_set_prio+0xfc>)
    d100:	22ac      	movs	r2, #172	; 0xac
    d102:	f002 f960 	bl	f3c6 <printk>
    d106:	480c      	ldr	r0, [pc, #48]	; (d138 <z_set_prio+0xf8>)
    d108:	21ac      	movs	r1, #172	; 0xac
    d10a:	f002 fa21 	bl	f550 <assert_post_action>
	__asm__ volatile(
    d10e:	f387 8811 	msr	BASEPRI, r7
    d112:	f3bf 8f6f 	isb	sy
}
    d116:	4620      	mov	r0, r4
    d118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    d11a:	42ab      	cmp	r3, r5
    d11c:	d001      	beq.n	d122 <z_set_prio+0xe2>
    d11e:	681b      	ldr	r3, [r3, #0]
    d120:	e7d5      	b.n	d0ce <z_set_prio+0x8e>
	node->prev = tail;
    d122:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    d126:	602c      	str	r4, [r5, #0]
	list->tail = node;
    d128:	624c      	str	r4, [r1, #36]	; 0x24
}
    d12a:	e7df      	b.n	d0ec <z_set_prio+0xac>
			thread->base.prio = prio;
    d12c:	73a6      	strb	r6, [r4, #14]
    d12e:	2400      	movs	r4, #0
    d130:	e7e0      	b.n	d0f4 <z_set_prio+0xb4>
    d132:	bf00      	nop
    d134:	20000c54 	.word	0x20000c54
    d138:	00013b71 	.word	0x00013b71
    d13c:	00013904 	.word	0x00013904
    d140:	20000c40 	.word	0x20000c40
    d144:	200004c8 	.word	0x200004c8
    d148:	00014bba 	.word	0x00014bba
    d14c:	20000c20 	.word	0x20000c20

0000d150 <z_impl_k_thread_suspend>:
{
    d150:	b570      	push	{r4, r5, r6, lr}
    d152:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    d154:	3018      	adds	r0, #24
    d156:	f000 fc35 	bl	d9c4 <z_abort_timeout>
	__asm__ volatile(
    d15a:	f04f 0320 	mov.w	r3, #32
    d15e:	f3ef 8611 	mrs	r6, BASEPRI
    d162:	f383 8812 	msr	BASEPRI_MAX, r3
    d166:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d16a:	4820      	ldr	r0, [pc, #128]	; (d1ec <z_impl_k_thread_suspend+0x9c>)
    d16c:	f7ff f8da 	bl	c324 <z_spin_lock_valid>
    d170:	b940      	cbnz	r0, d184 <z_impl_k_thread_suspend+0x34>
    d172:	491f      	ldr	r1, [pc, #124]	; (d1f0 <z_impl_k_thread_suspend+0xa0>)
    d174:	481f      	ldr	r0, [pc, #124]	; (d1f4 <z_impl_k_thread_suspend+0xa4>)
    d176:	2281      	movs	r2, #129	; 0x81
    d178:	f002 f925 	bl	f3c6 <printk>
    d17c:	481c      	ldr	r0, [pc, #112]	; (d1f0 <z_impl_k_thread_suspend+0xa0>)
    d17e:	2181      	movs	r1, #129	; 0x81
    d180:	f002 f9e6 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    d184:	4819      	ldr	r0, [pc, #100]	; (d1ec <z_impl_k_thread_suspend+0x9c>)
    d186:	f7ff f8eb 	bl	c360 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    d18a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    d18e:	7b63      	ldrb	r3, [r4, #13]
    d190:	2a00      	cmp	r2, #0
    d192:	da06      	bge.n	d1a2 <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    d198:	4817      	ldr	r0, [pc, #92]	; (d1f8 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d19a:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    d19c:	4621      	mov	r1, r4
    d19e:	f7ff fc4d 	bl	ca3c <z_priq_dumb_remove>
		update_cache(thread == _current);
    d1a2:	4d16      	ldr	r5, [pc, #88]	; (d1fc <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    d1a4:	7b63      	ldrb	r3, [r4, #13]
    d1a6:	68a8      	ldr	r0, [r5, #8]
    d1a8:	f043 0310 	orr.w	r3, r3, #16
    d1ac:	7363      	strb	r3, [r4, #13]
    d1ae:	1b03      	subs	r3, r0, r4
    d1b0:	4258      	negs	r0, r3
    d1b2:	4158      	adcs	r0, r3
    d1b4:	f7ff fc7e 	bl	cab4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d1b8:	480c      	ldr	r0, [pc, #48]	; (d1ec <z_impl_k_thread_suspend+0x9c>)
    d1ba:	f7ff f8c1 	bl	c340 <z_spin_unlock_valid>
    d1be:	b940      	cbnz	r0, d1d2 <z_impl_k_thread_suspend+0x82>
    d1c0:	490b      	ldr	r1, [pc, #44]	; (d1f0 <z_impl_k_thread_suspend+0xa0>)
    d1c2:	480c      	ldr	r0, [pc, #48]	; (d1f4 <z_impl_k_thread_suspend+0xa4>)
    d1c4:	22ac      	movs	r2, #172	; 0xac
    d1c6:	f002 f8fe 	bl	f3c6 <printk>
    d1ca:	4809      	ldr	r0, [pc, #36]	; (d1f0 <z_impl_k_thread_suspend+0xa0>)
    d1cc:	21ac      	movs	r1, #172	; 0xac
    d1ce:	f002 f9bf 	bl	f550 <assert_post_action>
	__asm__ volatile(
    d1d2:	f386 8811 	msr	BASEPRI, r6
    d1d6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    d1da:	68ab      	ldr	r3, [r5, #8]
    d1dc:	42a3      	cmp	r3, r4
    d1de:	d103      	bne.n	d1e8 <z_impl_k_thread_suspend+0x98>
}
    d1e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    d1e4:	f005 b82a 	b.w	1223c <z_reschedule_unlocked>
}
    d1e8:	bd70      	pop	{r4, r5, r6, pc}
    d1ea:	bf00      	nop
    d1ec:	20000c54 	.word	0x20000c54
    d1f0:	00013b71 	.word	0x00013b71
    d1f4:	00013904 	.word	0x00013904
    d1f8:	20000c40 	.word	0x20000c40
    d1fc:	20000c20 	.word	0x20000c20

0000d200 <k_sched_unlock>:
{
    d200:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    d202:	f04f 0320 	mov.w	r3, #32
    d206:	f3ef 8511 	mrs	r5, BASEPRI
    d20a:	f383 8812 	msr	BASEPRI_MAX, r3
    d20e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d212:	4824      	ldr	r0, [pc, #144]	; (d2a4 <k_sched_unlock+0xa4>)
    d214:	f7ff f886 	bl	c324 <z_spin_lock_valid>
    d218:	b940      	cbnz	r0, d22c <k_sched_unlock+0x2c>
    d21a:	4923      	ldr	r1, [pc, #140]	; (d2a8 <k_sched_unlock+0xa8>)
    d21c:	4823      	ldr	r0, [pc, #140]	; (d2ac <k_sched_unlock+0xac>)
    d21e:	2281      	movs	r2, #129	; 0x81
    d220:	f002 f8d1 	bl	f3c6 <printk>
    d224:	4820      	ldr	r0, [pc, #128]	; (d2a8 <k_sched_unlock+0xa8>)
    d226:	2181      	movs	r1, #129	; 0x81
    d228:	f002 f992 	bl	f550 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    d22c:	4c20      	ldr	r4, [pc, #128]	; (d2b0 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
    d22e:	481d      	ldr	r0, [pc, #116]	; (d2a4 <k_sched_unlock+0xa4>)
    d230:	f7ff f896 	bl	c360 <z_spin_lock_set_owner>
    d234:	68a2      	ldr	r2, [r4, #8]
    d236:	7bd2      	ldrb	r2, [r2, #15]
    d238:	b952      	cbnz	r2, d250 <k_sched_unlock+0x50>
    d23a:	491e      	ldr	r1, [pc, #120]	; (d2b4 <k_sched_unlock+0xb4>)
    d23c:	481b      	ldr	r0, [pc, #108]	; (d2ac <k_sched_unlock+0xac>)
    d23e:	f240 3285 	movw	r2, #901	; 0x385
    d242:	f002 f8c0 	bl	f3c6 <printk>
    d246:	481b      	ldr	r0, [pc, #108]	; (d2b4 <k_sched_unlock+0xb4>)
    d248:	f240 3185 	movw	r1, #901	; 0x385
    d24c:	f002 f980 	bl	f550 <assert_post_action>
    d250:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    d254:	b153      	cbz	r3, d26c <k_sched_unlock+0x6c>
    d256:	4917      	ldr	r1, [pc, #92]	; (d2b4 <k_sched_unlock+0xb4>)
    d258:	4814      	ldr	r0, [pc, #80]	; (d2ac <k_sched_unlock+0xac>)
    d25a:	f240 3286 	movw	r2, #902	; 0x386
    d25e:	f002 f8b2 	bl	f3c6 <printk>
    d262:	4814      	ldr	r0, [pc, #80]	; (d2b4 <k_sched_unlock+0xb4>)
    d264:	f240 3186 	movw	r1, #902	; 0x386
    d268:	f002 f972 	bl	f550 <assert_post_action>
		++_current->base.sched_locked;
    d26c:	68a2      	ldr	r2, [r4, #8]
    d26e:	7bd3      	ldrb	r3, [r2, #15]
    d270:	3301      	adds	r3, #1
		update_cache(0);
    d272:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    d274:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    d276:	f7ff fc1d 	bl	cab4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d27a:	480a      	ldr	r0, [pc, #40]	; (d2a4 <k_sched_unlock+0xa4>)
    d27c:	f7ff f860 	bl	c340 <z_spin_unlock_valid>
    d280:	b940      	cbnz	r0, d294 <k_sched_unlock+0x94>
    d282:	4909      	ldr	r1, [pc, #36]	; (d2a8 <k_sched_unlock+0xa8>)
    d284:	4809      	ldr	r0, [pc, #36]	; (d2ac <k_sched_unlock+0xac>)
    d286:	22ac      	movs	r2, #172	; 0xac
    d288:	f002 f89d 	bl	f3c6 <printk>
    d28c:	4806      	ldr	r0, [pc, #24]	; (d2a8 <k_sched_unlock+0xa8>)
    d28e:	21ac      	movs	r1, #172	; 0xac
    d290:	f002 f95e 	bl	f550 <assert_post_action>
	__asm__ volatile(
    d294:	f385 8811 	msr	BASEPRI, r5
    d298:	f3bf 8f6f 	isb	sy
}
    d29c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    d2a0:	f004 bfcc 	b.w	1223c <z_reschedule_unlocked>
    d2a4:	20000c54 	.word	0x20000c54
    d2a8:	00013b71 	.word	0x00013b71
    d2ac:	00013904 	.word	0x00013904
    d2b0:	20000c20 	.word	0x20000c20
    d2b4:	00014bba 	.word	0x00014bba

0000d2b8 <z_unpend1_no_timeout>:
{
    d2b8:	b538      	push	{r3, r4, r5, lr}
    d2ba:	4604      	mov	r4, r0
	__asm__ volatile(
    d2bc:	f04f 0320 	mov.w	r3, #32
    d2c0:	f3ef 8511 	mrs	r5, BASEPRI
    d2c4:	f383 8812 	msr	BASEPRI_MAX, r3
    d2c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d2cc:	4814      	ldr	r0, [pc, #80]	; (d320 <z_unpend1_no_timeout+0x68>)
    d2ce:	f7ff f829 	bl	c324 <z_spin_lock_valid>
    d2d2:	b940      	cbnz	r0, d2e6 <z_unpend1_no_timeout+0x2e>
    d2d4:	4913      	ldr	r1, [pc, #76]	; (d324 <z_unpend1_no_timeout+0x6c>)
    d2d6:	4814      	ldr	r0, [pc, #80]	; (d328 <z_unpend1_no_timeout+0x70>)
    d2d8:	2281      	movs	r2, #129	; 0x81
    d2da:	f002 f874 	bl	f3c6 <printk>
    d2de:	4811      	ldr	r0, [pc, #68]	; (d324 <z_unpend1_no_timeout+0x6c>)
    d2e0:	2181      	movs	r1, #129	; 0x81
    d2e2:	f002 f935 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    d2e6:	480e      	ldr	r0, [pc, #56]	; (d320 <z_unpend1_no_timeout+0x68>)
    d2e8:	f7ff f83a 	bl	c360 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    d2ec:	4620      	mov	r0, r4
    d2ee:	f004 ffaf 	bl	12250 <z_priq_dumb_best>
		if (thread != NULL) {
    d2f2:	4604      	mov	r4, r0
    d2f4:	b108      	cbz	r0, d2fa <z_unpend1_no_timeout+0x42>
			unpend_thread_no_timeout(thread);
    d2f6:	f7ff fbbf 	bl	ca78 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d2fa:	4809      	ldr	r0, [pc, #36]	; (d320 <z_unpend1_no_timeout+0x68>)
    d2fc:	f7ff f820 	bl	c340 <z_spin_unlock_valid>
    d300:	b940      	cbnz	r0, d314 <z_unpend1_no_timeout+0x5c>
    d302:	4908      	ldr	r1, [pc, #32]	; (d324 <z_unpend1_no_timeout+0x6c>)
    d304:	4808      	ldr	r0, [pc, #32]	; (d328 <z_unpend1_no_timeout+0x70>)
    d306:	22ac      	movs	r2, #172	; 0xac
    d308:	f002 f85d 	bl	f3c6 <printk>
    d30c:	4805      	ldr	r0, [pc, #20]	; (d324 <z_unpend1_no_timeout+0x6c>)
    d30e:	21ac      	movs	r1, #172	; 0xac
    d310:	f002 f91e 	bl	f550 <assert_post_action>
	__asm__ volatile(
    d314:	f385 8811 	msr	BASEPRI, r5
    d318:	f3bf 8f6f 	isb	sy
}
    d31c:	4620      	mov	r0, r4
    d31e:	bd38      	pop	{r3, r4, r5, pc}
    d320:	20000c54 	.word	0x20000c54
    d324:	00013b71 	.word	0x00013b71
    d328:	00013904 	.word	0x00013904

0000d32c <z_unpend_first_thread>:
{
    d32c:	b538      	push	{r3, r4, r5, lr}
    d32e:	4604      	mov	r4, r0
	__asm__ volatile(
    d330:	f04f 0320 	mov.w	r3, #32
    d334:	f3ef 8511 	mrs	r5, BASEPRI
    d338:	f383 8812 	msr	BASEPRI_MAX, r3
    d33c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d340:	4816      	ldr	r0, [pc, #88]	; (d39c <z_unpend_first_thread+0x70>)
    d342:	f7fe ffef 	bl	c324 <z_spin_lock_valid>
    d346:	b940      	cbnz	r0, d35a <z_unpend_first_thread+0x2e>
    d348:	4915      	ldr	r1, [pc, #84]	; (d3a0 <z_unpend_first_thread+0x74>)
    d34a:	4816      	ldr	r0, [pc, #88]	; (d3a4 <z_unpend_first_thread+0x78>)
    d34c:	2281      	movs	r2, #129	; 0x81
    d34e:	f002 f83a 	bl	f3c6 <printk>
    d352:	4813      	ldr	r0, [pc, #76]	; (d3a0 <z_unpend_first_thread+0x74>)
    d354:	2181      	movs	r1, #129	; 0x81
    d356:	f002 f8fb 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    d35a:	4810      	ldr	r0, [pc, #64]	; (d39c <z_unpend_first_thread+0x70>)
    d35c:	f7ff f800 	bl	c360 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    d360:	4620      	mov	r0, r4
    d362:	f004 ff75 	bl	12250 <z_priq_dumb_best>
		if (thread != NULL) {
    d366:	4604      	mov	r4, r0
    d368:	b128      	cbz	r0, d376 <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
    d36a:	f7ff fb85 	bl	ca78 <unpend_thread_no_timeout>
    d36e:	f104 0018 	add.w	r0, r4, #24
    d372:	f000 fb27 	bl	d9c4 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d376:	4809      	ldr	r0, [pc, #36]	; (d39c <z_unpend_first_thread+0x70>)
    d378:	f7fe ffe2 	bl	c340 <z_spin_unlock_valid>
    d37c:	b940      	cbnz	r0, d390 <z_unpend_first_thread+0x64>
    d37e:	4908      	ldr	r1, [pc, #32]	; (d3a0 <z_unpend_first_thread+0x74>)
    d380:	4808      	ldr	r0, [pc, #32]	; (d3a4 <z_unpend_first_thread+0x78>)
    d382:	22ac      	movs	r2, #172	; 0xac
    d384:	f002 f81f 	bl	f3c6 <printk>
    d388:	4805      	ldr	r0, [pc, #20]	; (d3a0 <z_unpend_first_thread+0x74>)
    d38a:	21ac      	movs	r1, #172	; 0xac
    d38c:	f002 f8e0 	bl	f550 <assert_post_action>
	__asm__ volatile(
    d390:	f385 8811 	msr	BASEPRI, r5
    d394:	f3bf 8f6f 	isb	sy
}
    d398:	4620      	mov	r0, r4
    d39a:	bd38      	pop	{r3, r4, r5, pc}
    d39c:	20000c54 	.word	0x20000c54
    d3a0:	00013b71 	.word	0x00013b71
    d3a4:	00013904 	.word	0x00013904

0000d3a8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    d3a8:	4b04      	ldr	r3, [pc, #16]	; (d3bc <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    d3aa:	2100      	movs	r1, #0
    d3ac:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    d3b0:	e9c3 2208 	strd	r2, r2, [r3, #32]
    d3b4:	4608      	mov	r0, r1
    d3b6:	f7ff ba2d 	b.w	c814 <k_sched_time_slice_set>
    d3ba:	bf00      	nop
    d3bc:	20000c20 	.word	0x20000c20

0000d3c0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    d3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d3c2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    d3c6:	b153      	cbz	r3, d3de <z_impl_k_yield+0x1e>
    d3c8:	4939      	ldr	r1, [pc, #228]	; (d4b0 <z_impl_k_yield+0xf0>)
    d3ca:	483a      	ldr	r0, [pc, #232]	; (d4b4 <z_impl_k_yield+0xf4>)
    d3cc:	f240 42dc 	movw	r2, #1244	; 0x4dc
    d3d0:	f001 fff9 	bl	f3c6 <printk>
    d3d4:	4836      	ldr	r0, [pc, #216]	; (d4b0 <z_impl_k_yield+0xf0>)
    d3d6:	f240 41dc 	movw	r1, #1244	; 0x4dc
    d3da:	f002 f8b9 	bl	f550 <assert_post_action>
	__asm__ volatile(
    d3de:	f04f 0320 	mov.w	r3, #32
    d3e2:	f3ef 8611 	mrs	r6, BASEPRI
    d3e6:	f383 8812 	msr	BASEPRI_MAX, r3
    d3ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d3ee:	4832      	ldr	r0, [pc, #200]	; (d4b8 <z_impl_k_yield+0xf8>)
    d3f0:	f7fe ff98 	bl	c324 <z_spin_lock_valid>
    d3f4:	b940      	cbnz	r0, d408 <z_impl_k_yield+0x48>
    d3f6:	4931      	ldr	r1, [pc, #196]	; (d4bc <z_impl_k_yield+0xfc>)
    d3f8:	482e      	ldr	r0, [pc, #184]	; (d4b4 <z_impl_k_yield+0xf4>)
    d3fa:	2281      	movs	r2, #129	; 0x81
    d3fc:	f001 ffe3 	bl	f3c6 <printk>
    d400:	482e      	ldr	r0, [pc, #184]	; (d4bc <z_impl_k_yield+0xfc>)
    d402:	2181      	movs	r1, #129	; 0x81
    d404:	f002 f8a4 	bl	f550 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    d408:	4d2d      	ldr	r5, [pc, #180]	; (d4c0 <z_impl_k_yield+0x100>)
	z_spin_lock_set_owner(l);
    d40a:	482b      	ldr	r0, [pc, #172]	; (d4b8 <z_impl_k_yield+0xf8>)
    d40c:	f7fe ffa8 	bl	c360 <z_spin_lock_set_owner>
    d410:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d412:	7b4b      	ldrb	r3, [r1, #13]
    d414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    d418:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    d41a:	f105 0020 	add.w	r0, r5, #32
    d41e:	f7ff fb0d 	bl	ca3c <z_priq_dumb_remove>
	}
	queue_thread(_current);
    d422:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    d424:	7b63      	ldrb	r3, [r4, #13]
    d426:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d42a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    d42c:	4b25      	ldr	r3, [pc, #148]	; (d4c4 <z_impl_k_yield+0x104>)
    d42e:	429c      	cmp	r4, r3
    d430:	d108      	bne.n	d444 <z_impl_k_yield+0x84>
    d432:	491f      	ldr	r1, [pc, #124]	; (d4b0 <z_impl_k_yield+0xf0>)
    d434:	481f      	ldr	r0, [pc, #124]	; (d4b4 <z_impl_k_yield+0xf4>)
    d436:	22ba      	movs	r2, #186	; 0xba
    d438:	f001 ffc5 	bl	f3c6 <printk>
    d43c:	481c      	ldr	r0, [pc, #112]	; (d4b0 <z_impl_k_yield+0xf0>)
    d43e:	21ba      	movs	r1, #186	; 0xba
    d440:	f002 f886 	bl	f550 <assert_post_action>
	return list->head == list;
    d444:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d446:	4820      	ldr	r0, [pc, #128]	; (d4c8 <z_impl_k_yield+0x108>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    d448:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d44a:	4283      	cmp	r3, r0
    d44c:	bf08      	it	eq
    d44e:	2300      	moveq	r3, #0
    d450:	2b00      	cmp	r3, #0
    d452:	bf38      	it	cc
    d454:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d456:	b333      	cbz	r3, d4a6 <z_impl_k_yield+0xe6>
	int32_t b1 = thread_1->base.prio;
    d458:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    d45c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    d460:	4297      	cmp	r7, r2
    d462:	d01c      	beq.n	d49e <z_impl_k_yield+0xde>
		return b2 - b1;
    d464:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    d466:	2a00      	cmp	r2, #0
    d468:	dd19      	ble.n	d49e <z_impl_k_yield+0xde>
	sys_dnode_t *const prev = successor->prev;
    d46a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    d46c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    d470:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    d472:	605c      	str	r4, [r3, #4]
	update_cache(1);
    d474:	2001      	movs	r0, #1
    d476:	f7ff fb1d 	bl	cab4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d47a:	480f      	ldr	r0, [pc, #60]	; (d4b8 <z_impl_k_yield+0xf8>)
    d47c:	f7fe ff60 	bl	c340 <z_spin_unlock_valid>
    d480:	b940      	cbnz	r0, d494 <z_impl_k_yield+0xd4>
    d482:	490e      	ldr	r1, [pc, #56]	; (d4bc <z_impl_k_yield+0xfc>)
    d484:	480b      	ldr	r0, [pc, #44]	; (d4b4 <z_impl_k_yield+0xf4>)
    d486:	22c3      	movs	r2, #195	; 0xc3
    d488:	f001 ff9d 	bl	f3c6 <printk>
    d48c:	480b      	ldr	r0, [pc, #44]	; (d4bc <z_impl_k_yield+0xfc>)
    d48e:	21c3      	movs	r1, #195	; 0xc3
    d490:	f002 f85e 	bl	f550 <assert_post_action>
    d494:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    d496:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d49a:	f7f8 ba9f 	b.w	59dc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    d49e:	428b      	cmp	r3, r1
    d4a0:	d001      	beq.n	d4a6 <z_impl_k_yield+0xe6>
    d4a2:	681b      	ldr	r3, [r3, #0]
    d4a4:	e7d7      	b.n	d456 <z_impl_k_yield+0x96>
	node->prev = tail;
    d4a6:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    d4aa:	600c      	str	r4, [r1, #0]
	list->tail = node;
    d4ac:	626c      	str	r4, [r5, #36]	; 0x24
}
    d4ae:	e7e1      	b.n	d474 <z_impl_k_yield+0xb4>
    d4b0:	00014bba 	.word	0x00014bba
    d4b4:	00013904 	.word	0x00013904
    d4b8:	20000c54 	.word	0x20000c54
    d4bc:	00013b71 	.word	0x00013b71
    d4c0:	20000c20 	.word	0x20000c20
    d4c4:	200004c8 	.word	0x200004c8
    d4c8:	20000c40 	.word	0x20000c40

0000d4cc <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    d4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4d0:	4604      	mov	r4, r0
    d4d2:	460d      	mov	r5, r1
    d4d4:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    d4d8:	b153      	cbz	r3, d4f0 <z_tick_sleep+0x24>
    d4da:	493c      	ldr	r1, [pc, #240]	; (d5cc <z_tick_sleep+0x100>)
    d4dc:	483c      	ldr	r0, [pc, #240]	; (d5d0 <z_tick_sleep+0x104>)
    d4de:	f44f 629f 	mov.w	r2, #1272	; 0x4f8
    d4e2:	f001 ff70 	bl	f3c6 <printk>
    d4e6:	4839      	ldr	r0, [pc, #228]	; (d5cc <z_tick_sleep+0x100>)
    d4e8:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
    d4ec:	f002 f830 	bl	f550 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    d4f0:	ea54 0305 	orrs.w	r3, r4, r5
    d4f4:	d104      	bne.n	d500 <z_tick_sleep+0x34>
	z_impl_k_yield();
    d4f6:	f7ff ff63 	bl	d3c0 <z_impl_k_yield>
		k_yield();
		return 0;
    d4fa:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    d4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    d500:	f06f 0301 	mvn.w	r3, #1
    d504:	1b1e      	subs	r6, r3, r4
    d506:	f04f 33ff 	mov.w	r3, #4294967295
    d50a:	eb63 0705 	sbc.w	r7, r3, r5
    d50e:	2e01      	cmp	r6, #1
    d510:	f177 0300 	sbcs.w	r3, r7, #0
    d514:	da56      	bge.n	d5c4 <z_tick_sleep+0xf8>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    d516:	f004 fea5 	bl	12264 <sys_clock_tick_get_32>
    d51a:	1906      	adds	r6, r0, r4
    d51c:	f04f 0320 	mov.w	r3, #32
    d520:	f3ef 8811 	mrs	r8, BASEPRI
    d524:	f383 8812 	msr	BASEPRI_MAX, r3
    d528:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d52c:	4829      	ldr	r0, [pc, #164]	; (d5d4 <z_tick_sleep+0x108>)
    d52e:	f7fe fef9 	bl	c324 <z_spin_lock_valid>
    d532:	b940      	cbnz	r0, d546 <z_tick_sleep+0x7a>
    d534:	4928      	ldr	r1, [pc, #160]	; (d5d8 <z_tick_sleep+0x10c>)
    d536:	4826      	ldr	r0, [pc, #152]	; (d5d0 <z_tick_sleep+0x104>)
    d538:	2281      	movs	r2, #129	; 0x81
    d53a:	f001 ff44 	bl	f3c6 <printk>
    d53e:	4826      	ldr	r0, [pc, #152]	; (d5d8 <z_tick_sleep+0x10c>)
    d540:	2181      	movs	r1, #129	; 0x81
    d542:	f002 f805 	bl	f550 <assert_post_action>
	pending_current = _current;
    d546:	4f25      	ldr	r7, [pc, #148]	; (d5dc <z_tick_sleep+0x110>)
	z_spin_lock_set_owner(l);
    d548:	4822      	ldr	r0, [pc, #136]	; (d5d4 <z_tick_sleep+0x108>)
    d54a:	f7fe ff09 	bl	c360 <z_spin_lock_set_owner>
    d54e:	4b24      	ldr	r3, [pc, #144]	; (d5e0 <z_tick_sleep+0x114>)
    d550:	68b8      	ldr	r0, [r7, #8]
    d552:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    d554:	f7ff fca6 	bl	cea4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    d558:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    d55a:	4922      	ldr	r1, [pc, #136]	; (d5e4 <z_tick_sleep+0x118>)
    d55c:	4622      	mov	r2, r4
    d55e:	462b      	mov	r3, r5
    d560:	3018      	adds	r0, #24
    d562:	f000 f975 	bl	d850 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    d566:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d568:	481a      	ldr	r0, [pc, #104]	; (d5d4 <z_tick_sleep+0x108>)
    d56a:	7b53      	ldrb	r3, [r2, #13]
    d56c:	f043 0310 	orr.w	r3, r3, #16
    d570:	7353      	strb	r3, [r2, #13]
    d572:	f7fe fee5 	bl	c340 <z_spin_unlock_valid>
    d576:	b940      	cbnz	r0, d58a <z_tick_sleep+0xbe>
    d578:	4917      	ldr	r1, [pc, #92]	; (d5d8 <z_tick_sleep+0x10c>)
    d57a:	4815      	ldr	r0, [pc, #84]	; (d5d0 <z_tick_sleep+0x104>)
    d57c:	22c3      	movs	r2, #195	; 0xc3
    d57e:	f001 ff22 	bl	f3c6 <printk>
    d582:	4815      	ldr	r0, [pc, #84]	; (d5d8 <z_tick_sleep+0x10c>)
    d584:	21c3      	movs	r1, #195	; 0xc3
    d586:	f001 ffe3 	bl	f550 <assert_post_action>
    d58a:	4640      	mov	r0, r8
    d58c:	f7f8 fa26 	bl	59dc <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    d590:	68bb      	ldr	r3, [r7, #8]
    d592:	7b5b      	ldrb	r3, [r3, #13]
    d594:	06db      	lsls	r3, r3, #27
    d596:	d50a      	bpl.n	d5ae <z_tick_sleep+0xe2>
    d598:	490c      	ldr	r1, [pc, #48]	; (d5cc <z_tick_sleep+0x100>)
    d59a:	480d      	ldr	r0, [pc, #52]	; (d5d0 <z_tick_sleep+0x104>)
    d59c:	f240 5219 	movw	r2, #1305	; 0x519
    d5a0:	f001 ff11 	bl	f3c6 <printk>
    d5a4:	4809      	ldr	r0, [pc, #36]	; (d5cc <z_tick_sleep+0x100>)
    d5a6:	f240 5119 	movw	r1, #1305	; 0x519
    d5aa:	f001 ffd1 	bl	f550 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    d5ae:	f004 fe59 	bl	12264 <sys_clock_tick_get_32>
    d5b2:	1a30      	subs	r0, r6, r0
    d5b4:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
    d5b8:	2801      	cmp	r0, #1
    d5ba:	f171 0300 	sbcs.w	r3, r1, #0
    d5be:	bfb8      	it	lt
    d5c0:	2000      	movlt	r0, #0
    d5c2:	e79b      	b.n	d4fc <z_tick_sleep+0x30>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    d5c4:	f06f 0601 	mvn.w	r6, #1
    d5c8:	1b36      	subs	r6, r6, r4
    d5ca:	e7a7      	b.n	d51c <z_tick_sleep+0x50>
    d5cc:	00014bba 	.word	0x00014bba
    d5d0:	00013904 	.word	0x00013904
    d5d4:	20000c54 	.word	0x20000c54
    d5d8:	00013b71 	.word	0x00013b71
    d5dc:	20000c20 	.word	0x20000c20
    d5e0:	20000c50 	.word	0x20000c50
    d5e4:	0000ce15 	.word	0x0000ce15

0000d5e8 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    d5e8:	b538      	push	{r3, r4, r5, lr}
    d5ea:	4604      	mov	r4, r0
    d5ec:	460d      	mov	r5, r1
    d5ee:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    d5f2:	b153      	cbz	r3, d60a <z_impl_k_sleep+0x22>
    d5f4:	4911      	ldr	r1, [pc, #68]	; (d63c <z_impl_k_sleep+0x54>)
    d5f6:	4812      	ldr	r0, [pc, #72]	; (d640 <z_impl_k_sleep+0x58>)
    d5f8:	f44f 62a5 	mov.w	r2, #1320	; 0x528
    d5fc:	f001 fee3 	bl	f3c6 <printk>
    d600:	480e      	ldr	r0, [pc, #56]	; (d63c <z_impl_k_sleep+0x54>)
    d602:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    d606:	f001 ffa3 	bl	f550 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d60a:	1c6b      	adds	r3, r5, #1
    d60c:	bf08      	it	eq
    d60e:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    d612:	d106      	bne.n	d622 <z_impl_k_sleep+0x3a>
		k_thread_suspend(_current);
    d614:	4b0b      	ldr	r3, [pc, #44]	; (d644 <z_impl_k_sleep+0x5c>)
    d616:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    d618:	f7ff fd9a 	bl	d150 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    d61c:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    d620:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    d622:	4620      	mov	r0, r4
    d624:	4629      	mov	r1, r5
    d626:	f7ff ff51 	bl	d4cc <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    d62a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    d62e:	fb80 3403 	smull	r3, r4, r0, r3
    d632:	0bd8      	lsrs	r0, r3, #15
    d634:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
    d638:	e7f2      	b.n	d620 <z_impl_k_sleep+0x38>
    d63a:	bf00      	nop
    d63c:	00014bba 	.word	0x00014bba
    d640:	00013904 	.word	0x00013904
    d644:	20000c20 	.word	0x20000c20

0000d648 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    d648:	4b01      	ldr	r3, [pc, #4]	; (d650 <z_impl_z_current_get+0x8>)
    d64a:	6898      	ldr	r0, [r3, #8]
    d64c:	4770      	bx	lr
    d64e:	bf00      	nop
    d650:	20000c20 	.word	0x20000c20

0000d654 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    d654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d658:	4604      	mov	r4, r0
    d65a:	f04f 0320 	mov.w	r3, #32
    d65e:	f3ef 8611 	mrs	r6, BASEPRI
    d662:	f383 8812 	msr	BASEPRI_MAX, r3
    d666:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d66a:	483e      	ldr	r0, [pc, #248]	; (d764 <z_thread_abort+0x110>)
    d66c:	f7fe fe5a 	bl	c324 <z_spin_lock_valid>
    d670:	b940      	cbnz	r0, d684 <z_thread_abort+0x30>
    d672:	493d      	ldr	r1, [pc, #244]	; (d768 <z_thread_abort+0x114>)
    d674:	483d      	ldr	r0, [pc, #244]	; (d76c <z_thread_abort+0x118>)
    d676:	2281      	movs	r2, #129	; 0x81
    d678:	f001 fea5 	bl	f3c6 <printk>
    d67c:	483a      	ldr	r0, [pc, #232]	; (d768 <z_thread_abort+0x114>)
    d67e:	2181      	movs	r1, #129	; 0x81
    d680:	f001 ff66 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    d684:	4837      	ldr	r0, [pc, #220]	; (d764 <z_thread_abort+0x110>)
    d686:	f7fe fe6b 	bl	c360 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    d68a:	7b63      	ldrb	r3, [r4, #13]
    d68c:	071a      	lsls	r2, r3, #28
    d68e:	d512      	bpl.n	d6b6 <z_thread_abort+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d690:	4834      	ldr	r0, [pc, #208]	; (d764 <z_thread_abort+0x110>)
    d692:	f7fe fe55 	bl	c340 <z_spin_unlock_valid>
    d696:	b940      	cbnz	r0, d6aa <z_thread_abort+0x56>
    d698:	4933      	ldr	r1, [pc, #204]	; (d768 <z_thread_abort+0x114>)
    d69a:	4834      	ldr	r0, [pc, #208]	; (d76c <z_thread_abort+0x118>)
    d69c:	22ac      	movs	r2, #172	; 0xac
    d69e:	f001 fe92 	bl	f3c6 <printk>
    d6a2:	4831      	ldr	r0, [pc, #196]	; (d768 <z_thread_abort+0x114>)
    d6a4:	21ac      	movs	r1, #172	; 0xac
    d6a6:	f001 ff53 	bl	f550 <assert_post_action>
	__asm__ volatile(
    d6aa:	f386 8811 	msr	BASEPRI, r6
    d6ae:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    d6b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    d6b6:	f023 0220 	bic.w	r2, r3, #32
    d6ba:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    d6be:	09d2      	lsrs	r2, r2, #7
    d6c0:	d138      	bne.n	d734 <z_thread_abort+0xe0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    d6c2:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    d6c4:	68a3      	ldr	r3, [r4, #8]
    d6c6:	b113      	cbz	r3, d6ce <z_thread_abort+0x7a>
			unpend_thread_no_timeout(thread);
    d6c8:	4620      	mov	r0, r4
    d6ca:	f7ff f9d5 	bl	ca78 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    d6ce:	f104 0018 	add.w	r0, r4, #24
    d6d2:	f000 f977 	bl	d9c4 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    d6d6:	f104 0758 	add.w	r7, r4, #88	; 0x58
    d6da:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    d6de:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d6e0:	42bd      	cmp	r5, r7
    d6e2:	d000      	beq.n	d6e6 <z_thread_abort+0x92>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    d6e4:	bb85      	cbnz	r5, d748 <z_thread_abort+0xf4>
		update_cache(1);
    d6e6:	2001      	movs	r0, #1
    d6e8:	f7ff f9e4 	bl	cab4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    d6ec:	4b20      	ldr	r3, [pc, #128]	; (d770 <z_thread_abort+0x11c>)
    d6ee:	689b      	ldr	r3, [r3, #8]
    d6f0:	42a3      	cmp	r3, r4
    d6f2:	d1cd      	bne.n	d690 <z_thread_abort+0x3c>
    d6f4:	f3ef 8305 	mrs	r3, IPSR
    d6f8:	2b00      	cmp	r3, #0
    d6fa:	d1c9      	bne.n	d690 <z_thread_abort+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d6fc:	4819      	ldr	r0, [pc, #100]	; (d764 <z_thread_abort+0x110>)
    d6fe:	f7fe fe1f 	bl	c340 <z_spin_unlock_valid>
    d702:	b940      	cbnz	r0, d716 <z_thread_abort+0xc2>
    d704:	4918      	ldr	r1, [pc, #96]	; (d768 <z_thread_abort+0x114>)
    d706:	4819      	ldr	r0, [pc, #100]	; (d76c <z_thread_abort+0x118>)
    d708:	22c3      	movs	r2, #195	; 0xc3
    d70a:	f001 fe5c 	bl	f3c6 <printk>
    d70e:	4816      	ldr	r0, [pc, #88]	; (d768 <z_thread_abort+0x114>)
    d710:	21c3      	movs	r1, #195	; 0xc3
    d712:	f001 ff1d 	bl	f550 <assert_post_action>
    d716:	4630      	mov	r0, r6
    d718:	f7f8 f960 	bl	59dc <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    d71c:	4915      	ldr	r1, [pc, #84]	; (d774 <z_thread_abort+0x120>)
    d71e:	4813      	ldr	r0, [pc, #76]	; (d76c <z_thread_abort+0x118>)
    d720:	f240 624b 	movw	r2, #1611	; 0x64b
    d724:	f001 fe4f 	bl	f3c6 <printk>
    d728:	4812      	ldr	r0, [pc, #72]	; (d774 <z_thread_abort+0x120>)
    d72a:	f240 614b 	movw	r1, #1611	; 0x64b
    d72e:	f001 ff0f 	bl	f550 <assert_post_action>
    d732:	e7ad      	b.n	d690 <z_thread_abort+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d734:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    d738:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    d73c:	480e      	ldr	r0, [pc, #56]	; (d778 <z_thread_abort+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d73e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    d740:	4621      	mov	r1, r4
    d742:	f7ff f97b 	bl	ca3c <z_priq_dumb_remove>
}
    d746:	e7bd      	b.n	d6c4 <z_thread_abort+0x70>
		unpend_thread_no_timeout(thread);
    d748:	4628      	mov	r0, r5
    d74a:	f7ff f995 	bl	ca78 <unpend_thread_no_timeout>
    d74e:	f105 0018 	add.w	r0, r5, #24
    d752:	f000 f937 	bl	d9c4 <z_abort_timeout>
    d756:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    d75a:	4628      	mov	r0, r5
    d75c:	f7ff fa94 	bl	cc88 <ready_thread>
    d760:	e7bd      	b.n	d6de <z_thread_abort+0x8a>
    d762:	bf00      	nop
    d764:	20000c54 	.word	0x20000c54
    d768:	00013b71 	.word	0x00013b71
    d76c:	00013904 	.word	0x00013904
    d770:	20000c20 	.word	0x20000c20
    d774:	00014bba 	.word	0x00014bba
    d778:	20000c40 	.word	0x20000c40

0000d77c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    d77c:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    d77e:	4806      	ldr	r0, [pc, #24]	; (d798 <z_data_copy+0x1c>)
    d780:	4a06      	ldr	r2, [pc, #24]	; (d79c <z_data_copy+0x20>)
    d782:	4907      	ldr	r1, [pc, #28]	; (d7a0 <z_data_copy+0x24>)
    d784:	1a12      	subs	r2, r2, r0
    d786:	f004 fdaf 	bl	122e8 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    d78a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d78e:	4a05      	ldr	r2, [pc, #20]	; (d7a4 <z_data_copy+0x28>)
    d790:	4905      	ldr	r1, [pc, #20]	; (d7a8 <z_data_copy+0x2c>)
    d792:	4806      	ldr	r0, [pc, #24]	; (d7ac <z_data_copy+0x30>)
    d794:	f004 bda8 	b.w	122e8 <memcpy>
    d798:	20000000 	.word	0x20000000
    d79c:	200003ec 	.word	0x200003ec
    d7a0:	00014d8c 	.word	0x00014d8c
    d7a4:	00000000 	.word	0x00000000
    d7a8:	00014d8c 	.word	0x00014d8c
    d7ac:	20000000 	.word	0x20000000

0000d7b0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    d7b0:	4b03      	ldr	r3, [pc, #12]	; (d7c0 <elapsed+0x10>)
    d7b2:	681b      	ldr	r3, [r3, #0]
    d7b4:	b90b      	cbnz	r3, d7ba <elapsed+0xa>
    d7b6:	f7fb b917 	b.w	89e8 <sys_clock_elapsed>
}
    d7ba:	2000      	movs	r0, #0
    d7bc:	4770      	bx	lr
    d7be:	bf00      	nop
    d7c0:	20000c60 	.word	0x20000c60

0000d7c4 <remove_timeout>:
{
    d7c4:	b530      	push	{r4, r5, lr}
    d7c6:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    d7c8:	b168      	cbz	r0, d7e6 <remove_timeout+0x22>
    d7ca:	4a0a      	ldr	r2, [pc, #40]	; (d7f4 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    d7cc:	6852      	ldr	r2, [r2, #4]
    d7ce:	4290      	cmp	r0, r2
    d7d0:	d009      	beq.n	d7e6 <remove_timeout+0x22>
	if (next(t) != NULL) {
    d7d2:	b143      	cbz	r3, d7e6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    d7d4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    d7d8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    d7dc:	1912      	adds	r2, r2, r4
    d7de:	eb45 0101 	adc.w	r1, r5, r1
    d7e2:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    d7e6:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    d7e8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    d7ea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    d7ec:	2300      	movs	r3, #0
	node->prev = NULL;
    d7ee:	e9c0 3300 	strd	r3, r3, [r0]
}
    d7f2:	bd30      	pop	{r4, r5, pc}
    d7f4:	20000184 	.word	0x20000184

0000d7f8 <next_timeout>:

static int32_t next_timeout(void)
{
    d7f8:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    d7fa:	4b13      	ldr	r3, [pc, #76]	; (d848 <next_timeout+0x50>)
    d7fc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d7fe:	429c      	cmp	r4, r3
    d800:	bf08      	it	eq
    d802:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    d804:	f7ff ffd4 	bl	d7b0 <elapsed>
    d808:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    d80a:	b1bc      	cbz	r4, d83c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    d80c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    d810:	1b40      	subs	r0, r0, r5
    d812:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    d816:	2801      	cmp	r0, #1
    d818:	f171 0300 	sbcs.w	r3, r1, #0
    d81c:	db11      	blt.n	d842 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    d81e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    d822:	2300      	movs	r3, #0
    d824:	4282      	cmp	r2, r0
    d826:	eb73 0401 	sbcs.w	r4, r3, r1
    d82a:	da00      	bge.n	d82e <next_timeout+0x36>
    d82c:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    d82e:	4b07      	ldr	r3, [pc, #28]	; (d84c <next_timeout+0x54>)
    d830:	691b      	ldr	r3, [r3, #16]
    d832:	b113      	cbz	r3, d83a <next_timeout+0x42>
    d834:	4298      	cmp	r0, r3
    d836:	bfa8      	it	ge
    d838:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    d83a:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    d83c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    d840:	e7f5      	b.n	d82e <next_timeout+0x36>
    d842:	2000      	movs	r0, #0
    d844:	e7f3      	b.n	d82e <next_timeout+0x36>
    d846:	bf00      	nop
    d848:	20000184 	.word	0x20000184
    d84c:	20000c20 	.word	0x20000c20

0000d850 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    d850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d854:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d856:	1c6b      	adds	r3, r5, #1
    d858:	bf08      	it	eq
    d85a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    d85e:	4682      	mov	sl, r0
    d860:	468b      	mov	fp, r1
    d862:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d864:	f000 809c 	beq.w	d9a0 <z_add_timeout+0x150>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    d868:	6803      	ldr	r3, [r0, #0]
    d86a:	b143      	cbz	r3, d87e <z_add_timeout+0x2e>
    d86c:	494e      	ldr	r1, [pc, #312]	; (d9a8 <z_add_timeout+0x158>)
    d86e:	484f      	ldr	r0, [pc, #316]	; (d9ac <z_add_timeout+0x15c>)
    d870:	225d      	movs	r2, #93	; 0x5d
    d872:	f001 fda8 	bl	f3c6 <printk>
    d876:	484c      	ldr	r0, [pc, #304]	; (d9a8 <z_add_timeout+0x158>)
    d878:	215d      	movs	r1, #93	; 0x5d
    d87a:	f001 fe69 	bl	f550 <assert_post_action>
	to->fn = fn;
    d87e:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
    d882:	f04f 0320 	mov.w	r3, #32
    d886:	f3ef 8b11 	mrs	fp, BASEPRI
    d88a:	f383 8812 	msr	BASEPRI_MAX, r3
    d88e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d892:	4847      	ldr	r0, [pc, #284]	; (d9b0 <z_add_timeout+0x160>)
    d894:	f7fe fd46 	bl	c324 <z_spin_lock_valid>
    d898:	b940      	cbnz	r0, d8ac <z_add_timeout+0x5c>
    d89a:	4946      	ldr	r1, [pc, #280]	; (d9b4 <z_add_timeout+0x164>)
    d89c:	4843      	ldr	r0, [pc, #268]	; (d9ac <z_add_timeout+0x15c>)
    d89e:	2281      	movs	r2, #129	; 0x81
    d8a0:	f001 fd91 	bl	f3c6 <printk>
    d8a4:	4843      	ldr	r0, [pc, #268]	; (d9b4 <z_add_timeout+0x164>)
    d8a6:	2181      	movs	r1, #129	; 0x81
    d8a8:	f001 fe52 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    d8ac:	4840      	ldr	r0, [pc, #256]	; (d9b0 <z_add_timeout+0x160>)
    d8ae:	f7fe fd57 	bl	c360 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    d8b2:	f06f 0301 	mvn.w	r3, #1
    d8b6:	ebb3 0804 	subs.w	r8, r3, r4
    d8ba:	f04f 32ff 	mov.w	r2, #4294967295
    d8be:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    d8c2:	f1b8 0f00 	cmp.w	r8, #0
    d8c6:	f179 0100 	sbcs.w	r1, r9, #0
    d8ca:	db1c      	blt.n	d906 <z_add_timeout+0xb6>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    d8cc:	483a      	ldr	r0, [pc, #232]	; (d9b8 <z_add_timeout+0x168>)
    d8ce:	e9d0 1000 	ldrd	r1, r0, [r0]
    d8d2:	1a5b      	subs	r3, r3, r1
    d8d4:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    d8d8:	1b1e      	subs	r6, r3, r4
    d8da:	eb62 0705 	sbc.w	r7, r2, r5
    d8de:	2e01      	cmp	r6, #1
    d8e0:	f177 0300 	sbcs.w	r3, r7, #0
    d8e4:	bfbc      	itt	lt
    d8e6:	2601      	movlt	r6, #1
    d8e8:	2700      	movlt	r7, #0
    d8ea:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
    d8ee:	4a33      	ldr	r2, [pc, #204]	; (d9bc <z_add_timeout+0x16c>)
    d8f0:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d8f4:	4293      	cmp	r3, r2
    d8f6:	d11d      	bne.n	d934 <z_add_timeout+0xe4>
	node->prev = tail;
    d8f8:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
    d8fc:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
    d900:	f8c2 a004 	str.w	sl, [r2, #4]
}
    d904:	e02c      	b.n	d960 <z_add_timeout+0x110>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    d906:	f7ff ff53 	bl	d7b0 <elapsed>
    d90a:	1c63      	adds	r3, r4, #1
    d90c:	9300      	str	r3, [sp, #0]
    d90e:	f145 0300 	adc.w	r3, r5, #0
    d912:	9301      	str	r3, [sp, #4]
    d914:	e9dd 2300 	ldrd	r2, r3, [sp]
    d918:	1812      	adds	r2, r2, r0
    d91a:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    d91e:	e9ca 2304 	strd	r2, r3, [sl, #16]
    d922:	e7e4      	b.n	d8ee <z_add_timeout+0x9e>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    d924:	1be0      	subs	r0, r4, r7
    d926:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
    d92a:	42b3      	cmp	r3, r6
    d92c:	e9ca 0104 	strd	r0, r1, [sl, #16]
    d930:	d0e2      	beq.n	d8f8 <z_add_timeout+0xa8>
    d932:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    d934:	2b00      	cmp	r3, #0
    d936:	d0df      	beq.n	d8f8 <z_add_timeout+0xa8>
			if (t->dticks > to->dticks) {
    d938:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    d93c:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    d940:	42bc      	cmp	r4, r7
    d942:	eb75 0108 	sbcs.w	r1, r5, r8
    d946:	daed      	bge.n	d924 <z_add_timeout+0xd4>
				t->dticks -= to->dticks;
    d948:	1b38      	subs	r0, r7, r4
    d94a:	eb68 0105 	sbc.w	r1, r8, r5
    d94e:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    d952:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    d954:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
    d958:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    d95c:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
    d960:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d962:	4293      	cmp	r3, r2
    d964:	d00b      	beq.n	d97e <z_add_timeout+0x12e>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    d966:	459a      	cmp	sl, r3
    d968:	d109      	bne.n	d97e <z_add_timeout+0x12e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    d96a:	f7ff ff45 	bl	d7f8 <next_timeout>

			if (next_time == 0 ||
    d96e:	b118      	cbz	r0, d978 <z_add_timeout+0x128>
			    _current_cpu->slice_ticks != next_time) {
    d970:	4b13      	ldr	r3, [pc, #76]	; (d9c0 <z_add_timeout+0x170>)
			if (next_time == 0 ||
    d972:	691b      	ldr	r3, [r3, #16]
    d974:	4283      	cmp	r3, r0
    d976:	d002      	beq.n	d97e <z_add_timeout+0x12e>
				sys_clock_set_timeout(next_time, false);
    d978:	2100      	movs	r1, #0
    d97a:	f7fb f805 	bl	8988 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d97e:	480c      	ldr	r0, [pc, #48]	; (d9b0 <z_add_timeout+0x160>)
    d980:	f7fe fcde 	bl	c340 <z_spin_unlock_valid>
    d984:	b940      	cbnz	r0, d998 <z_add_timeout+0x148>
    d986:	490b      	ldr	r1, [pc, #44]	; (d9b4 <z_add_timeout+0x164>)
    d988:	4808      	ldr	r0, [pc, #32]	; (d9ac <z_add_timeout+0x15c>)
    d98a:	22ac      	movs	r2, #172	; 0xac
    d98c:	f001 fd1b 	bl	f3c6 <printk>
    d990:	4808      	ldr	r0, [pc, #32]	; (d9b4 <z_add_timeout+0x164>)
    d992:	21ac      	movs	r1, #172	; 0xac
    d994:	f001 fddc 	bl	f550 <assert_post_action>
	__asm__ volatile(
    d998:	f38b 8811 	msr	BASEPRI, fp
    d99c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    d9a0:	b003      	add	sp, #12
    d9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d9a6:	bf00      	nop
    d9a8:	00014bdc 	.word	0x00014bdc
    d9ac:	00013904 	.word	0x00013904
    d9b0:	20000c64 	.word	0x20000c64
    d9b4:	00013b71 	.word	0x00013b71
    d9b8:	200005c8 	.word	0x200005c8
    d9bc:	20000184 	.word	0x20000184
    d9c0:	20000c20 	.word	0x20000c20

0000d9c4 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    d9c4:	b538      	push	{r3, r4, r5, lr}
    d9c6:	4604      	mov	r4, r0
	__asm__ volatile(
    d9c8:	f04f 0320 	mov.w	r3, #32
    d9cc:	f3ef 8511 	mrs	r5, BASEPRI
    d9d0:	f383 8812 	msr	BASEPRI_MAX, r3
    d9d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d9d8:	4815      	ldr	r0, [pc, #84]	; (da30 <z_abort_timeout+0x6c>)
    d9da:	f7fe fca3 	bl	c324 <z_spin_lock_valid>
    d9de:	b940      	cbnz	r0, d9f2 <z_abort_timeout+0x2e>
    d9e0:	4914      	ldr	r1, [pc, #80]	; (da34 <z_abort_timeout+0x70>)
    d9e2:	4815      	ldr	r0, [pc, #84]	; (da38 <z_abort_timeout+0x74>)
    d9e4:	2281      	movs	r2, #129	; 0x81
    d9e6:	f001 fcee 	bl	f3c6 <printk>
    d9ea:	4812      	ldr	r0, [pc, #72]	; (da34 <z_abort_timeout+0x70>)
    d9ec:	2181      	movs	r1, #129	; 0x81
    d9ee:	f001 fdaf 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    d9f2:	480f      	ldr	r0, [pc, #60]	; (da30 <z_abort_timeout+0x6c>)
    d9f4:	f7fe fcb4 	bl	c360 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    d9f8:	6823      	ldr	r3, [r4, #0]
    d9fa:	b1b3      	cbz	r3, da2a <z_abort_timeout+0x66>
			remove_timeout(to);
    d9fc:	4620      	mov	r0, r4
    d9fe:	f7ff fee1 	bl	d7c4 <remove_timeout>
			ret = 0;
    da02:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    da04:	480a      	ldr	r0, [pc, #40]	; (da30 <z_abort_timeout+0x6c>)
    da06:	f7fe fc9b 	bl	c340 <z_spin_unlock_valid>
    da0a:	b940      	cbnz	r0, da1e <z_abort_timeout+0x5a>
    da0c:	4909      	ldr	r1, [pc, #36]	; (da34 <z_abort_timeout+0x70>)
    da0e:	480a      	ldr	r0, [pc, #40]	; (da38 <z_abort_timeout+0x74>)
    da10:	22ac      	movs	r2, #172	; 0xac
    da12:	f001 fcd8 	bl	f3c6 <printk>
    da16:	4807      	ldr	r0, [pc, #28]	; (da34 <z_abort_timeout+0x70>)
    da18:	21ac      	movs	r1, #172	; 0xac
    da1a:	f001 fd99 	bl	f550 <assert_post_action>
	__asm__ volatile(
    da1e:	f385 8811 	msr	BASEPRI, r5
    da22:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    da26:	4620      	mov	r0, r4
    da28:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    da2a:	f06f 0415 	mvn.w	r4, #21
    da2e:	e7e9      	b.n	da04 <z_abort_timeout+0x40>
    da30:	20000c64 	.word	0x20000c64
    da34:	00013b71 	.word	0x00013b71
    da38:	00013904 	.word	0x00013904

0000da3c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    da3c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    da3e:	f04f 0320 	mov.w	r3, #32
    da42:	f3ef 8511 	mrs	r5, BASEPRI
    da46:	f383 8812 	msr	BASEPRI_MAX, r3
    da4a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    da4e:	4813      	ldr	r0, [pc, #76]	; (da9c <z_get_next_timeout_expiry+0x60>)
    da50:	f7fe fc68 	bl	c324 <z_spin_lock_valid>
    da54:	b940      	cbnz	r0, da68 <z_get_next_timeout_expiry+0x2c>
    da56:	4912      	ldr	r1, [pc, #72]	; (daa0 <z_get_next_timeout_expiry+0x64>)
    da58:	4812      	ldr	r0, [pc, #72]	; (daa4 <z_get_next_timeout_expiry+0x68>)
    da5a:	2281      	movs	r2, #129	; 0x81
    da5c:	f001 fcb3 	bl	f3c6 <printk>
    da60:	480f      	ldr	r0, [pc, #60]	; (daa0 <z_get_next_timeout_expiry+0x64>)
    da62:	2181      	movs	r1, #129	; 0x81
    da64:	f001 fd74 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    da68:	480c      	ldr	r0, [pc, #48]	; (da9c <z_get_next_timeout_expiry+0x60>)
    da6a:	f7fe fc79 	bl	c360 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    da6e:	f7ff fec3 	bl	d7f8 <next_timeout>
    da72:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    da74:	4809      	ldr	r0, [pc, #36]	; (da9c <z_get_next_timeout_expiry+0x60>)
    da76:	f7fe fc63 	bl	c340 <z_spin_unlock_valid>
    da7a:	b940      	cbnz	r0, da8e <z_get_next_timeout_expiry+0x52>
    da7c:	4908      	ldr	r1, [pc, #32]	; (daa0 <z_get_next_timeout_expiry+0x64>)
    da7e:	4809      	ldr	r0, [pc, #36]	; (daa4 <z_get_next_timeout_expiry+0x68>)
    da80:	22ac      	movs	r2, #172	; 0xac
    da82:	f001 fca0 	bl	f3c6 <printk>
    da86:	4806      	ldr	r0, [pc, #24]	; (daa0 <z_get_next_timeout_expiry+0x64>)
    da88:	21ac      	movs	r1, #172	; 0xac
    da8a:	f001 fd61 	bl	f550 <assert_post_action>
	__asm__ volatile(
    da8e:	f385 8811 	msr	BASEPRI, r5
    da92:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    da96:	4620      	mov	r0, r4
    da98:	bd38      	pop	{r3, r4, r5, pc}
    da9a:	bf00      	nop
    da9c:	20000c64 	.word	0x20000c64
    daa0:	00013b71 	.word	0x00013b71
    daa4:	00013904 	.word	0x00013904

0000daa8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    daa8:	b570      	push	{r4, r5, r6, lr}
    daaa:	4604      	mov	r4, r0
    daac:	460d      	mov	r5, r1
	__asm__ volatile(
    daae:	f04f 0320 	mov.w	r3, #32
    dab2:	f3ef 8611 	mrs	r6, BASEPRI
    dab6:	f383 8812 	msr	BASEPRI_MAX, r3
    daba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dabe:	4816      	ldr	r0, [pc, #88]	; (db18 <z_set_timeout_expiry+0x70>)
    dac0:	f7fe fc30 	bl	c324 <z_spin_lock_valid>
    dac4:	b940      	cbnz	r0, dad8 <z_set_timeout_expiry+0x30>
    dac6:	4915      	ldr	r1, [pc, #84]	; (db1c <z_set_timeout_expiry+0x74>)
    dac8:	4815      	ldr	r0, [pc, #84]	; (db20 <z_set_timeout_expiry+0x78>)
    daca:	2281      	movs	r2, #129	; 0x81
    dacc:	f001 fc7b 	bl	f3c6 <printk>
    dad0:	4812      	ldr	r0, [pc, #72]	; (db1c <z_set_timeout_expiry+0x74>)
    dad2:	2181      	movs	r1, #129	; 0x81
    dad4:	f001 fd3c 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    dad8:	480f      	ldr	r0, [pc, #60]	; (db18 <z_set_timeout_expiry+0x70>)
    dada:	f7fe fc41 	bl	c360 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    dade:	f7ff fe8b 	bl	d7f8 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    dae2:	2801      	cmp	r0, #1
    dae4:	dd05      	ble.n	daf2 <z_set_timeout_expiry+0x4a>
    dae6:	42a0      	cmp	r0, r4
    dae8:	db03      	blt.n	daf2 <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    daea:	4629      	mov	r1, r5
    daec:	4620      	mov	r0, r4
    daee:	f7fa ff4b 	bl	8988 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    daf2:	4809      	ldr	r0, [pc, #36]	; (db18 <z_set_timeout_expiry+0x70>)
    daf4:	f7fe fc24 	bl	c340 <z_spin_unlock_valid>
    daf8:	b940      	cbnz	r0, db0c <z_set_timeout_expiry+0x64>
    dafa:	4908      	ldr	r1, [pc, #32]	; (db1c <z_set_timeout_expiry+0x74>)
    dafc:	4808      	ldr	r0, [pc, #32]	; (db20 <z_set_timeout_expiry+0x78>)
    dafe:	22ac      	movs	r2, #172	; 0xac
    db00:	f001 fc61 	bl	f3c6 <printk>
    db04:	4805      	ldr	r0, [pc, #20]	; (db1c <z_set_timeout_expiry+0x74>)
    db06:	21ac      	movs	r1, #172	; 0xac
    db08:	f001 fd22 	bl	f550 <assert_post_action>
	__asm__ volatile(
    db0c:	f386 8811 	msr	BASEPRI, r6
    db10:	f3bf 8f6f 	isb	sy
		}
	}
}
    db14:	bd70      	pop	{r4, r5, r6, pc}
    db16:	bf00      	nop
    db18:	20000c64 	.word	0x20000c64
    db1c:	00013b71 	.word	0x00013b71
    db20:	00013904 	.word	0x00013904

0000db24 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    db24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db28:	b085      	sub	sp, #20
    db2a:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    db2c:	f7ff f846 	bl	cbbc <z_time_slice>
	__asm__ volatile(
    db30:	f04f 0320 	mov.w	r3, #32
    db34:	f3ef 8911 	mrs	r9, BASEPRI
    db38:	f383 8812 	msr	BASEPRI_MAX, r3
    db3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    db40:	484e      	ldr	r0, [pc, #312]	; (dc7c <sys_clock_announce+0x158>)
    db42:	f7fe fbef 	bl	c324 <z_spin_lock_valid>
    db46:	b940      	cbnz	r0, db5a <sys_clock_announce+0x36>
    db48:	494d      	ldr	r1, [pc, #308]	; (dc80 <sys_clock_announce+0x15c>)
    db4a:	484e      	ldr	r0, [pc, #312]	; (dc84 <sys_clock_announce+0x160>)
    db4c:	2281      	movs	r2, #129	; 0x81
    db4e:	f001 fc3a 	bl	f3c6 <printk>
    db52:	484b      	ldr	r0, [pc, #300]	; (dc80 <sys_clock_announce+0x15c>)
    db54:	2181      	movs	r1, #129	; 0x81
    db56:	f001 fcfb 	bl	f550 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    db5a:	4e4b      	ldr	r6, [pc, #300]	; (dc88 <sys_clock_announce+0x164>)
    db5c:	4f4b      	ldr	r7, [pc, #300]	; (dc8c <sys_clock_announce+0x168>)
	z_spin_lock_set_owner(l);
    db5e:	4847      	ldr	r0, [pc, #284]	; (dc7c <sys_clock_announce+0x158>)
	return list->head == list;
    db60:	f8df a12c 	ldr.w	sl, [pc, #300]	; dc90 <sys_clock_announce+0x16c>
    db64:	f7fe fbfc 	bl	c360 <z_spin_lock_set_owner>
    db68:	46bb      	mov	fp, r7
    db6a:	6034      	str	r4, [r6, #0]
    db6c:	e9d7 3400 	ldrd	r3, r4, [r7]
    db70:	f8d6 c000 	ldr.w	ip, [r6]
    db74:	f8da 8000 	ldr.w	r8, [sl]
    db78:	4662      	mov	r2, ip
    db7a:	e9cd 3402 	strd	r3, r4, [sp, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    db7e:	45d0      	cmp	r8, sl
    db80:	ea4f 73e2 	mov.w	r3, r2, asr #31
    db84:	e9cd 2300 	strd	r2, r3, [sp]
    db88:	d011      	beq.n	dbae <sys_clock_announce+0x8a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    db8a:	f1b8 0f00 	cmp.w	r8, #0
    db8e:	d00e      	beq.n	dbae <sys_clock_announce+0x8a>
    db90:	e9d8 1204 	ldrd	r1, r2, [r8, #16]
    db94:	e9dd 3400 	ldrd	r3, r4, [sp]
    db98:	428b      	cmp	r3, r1
    db9a:	eb74 0302 	sbcs.w	r3, r4, r2
    db9e:	da2b      	bge.n	dbf8 <sys_clock_announce+0xd4>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    dba0:	9b00      	ldr	r3, [sp, #0]
    dba2:	1ac8      	subs	r0, r1, r3
    dba4:	9b01      	ldr	r3, [sp, #4]
    dba6:	eb62 0103 	sbc.w	r1, r2, r3
    dbaa:	e9c8 0104 	strd	r0, r1, [r8, #16]
	}

	curr_tick += announce_remaining;
    dbae:	9b00      	ldr	r3, [sp, #0]
    dbb0:	9a02      	ldr	r2, [sp, #8]
    dbb2:	9903      	ldr	r1, [sp, #12]
    dbb4:	189a      	adds	r2, r3, r2
    dbb6:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    dbb8:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
    dbbc:	eb41 0303 	adc.w	r3, r1, r3
    dbc0:	e9cb 2300 	strd	r2, r3, [fp]
	announce_remaining = 0;
    dbc4:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    dbc6:	f7ff fe17 	bl	d7f8 <next_timeout>
    dbca:	4621      	mov	r1, r4
    dbcc:	f7fa fedc 	bl	8988 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dbd0:	482a      	ldr	r0, [pc, #168]	; (dc7c <sys_clock_announce+0x158>)
    dbd2:	f7fe fbb5 	bl	c340 <z_spin_unlock_valid>
    dbd6:	b940      	cbnz	r0, dbea <sys_clock_announce+0xc6>
    dbd8:	4929      	ldr	r1, [pc, #164]	; (dc80 <sys_clock_announce+0x15c>)
    dbda:	482a      	ldr	r0, [pc, #168]	; (dc84 <sys_clock_announce+0x160>)
    dbdc:	22ac      	movs	r2, #172	; 0xac
    dbde:	f001 fbf2 	bl	f3c6 <printk>
    dbe2:	4827      	ldr	r0, [pc, #156]	; (dc80 <sys_clock_announce+0x15c>)
    dbe4:	21ac      	movs	r1, #172	; 0xac
    dbe6:	f001 fcb3 	bl	f550 <assert_post_action>
	__asm__ volatile(
    dbea:	f389 8811 	msr	BASEPRI, r9
    dbee:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    dbf2:	b005      	add	sp, #20
    dbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    dbf8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
		announce_remaining -= dt;
    dbfc:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    dc00:	1864      	adds	r4, r4, r1
		t->dticks = 0;
    dc02:	f04f 0200 	mov.w	r2, #0
    dc06:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    dc0a:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
		announce_remaining -= dt;
    dc0e:	6030      	str	r0, [r6, #0]
		t->dticks = 0;
    dc10:	e9c8 2304 	strd	r2, r3, [r8, #16]
		remove_timeout(t);
    dc14:	4640      	mov	r0, r8
		curr_tick += dt;
    dc16:	e9c7 4500 	strd	r4, r5, [r7]
		remove_timeout(t);
    dc1a:	f7ff fdd3 	bl	d7c4 <remove_timeout>
    dc1e:	4817      	ldr	r0, [pc, #92]	; (dc7c <sys_clock_announce+0x158>)
    dc20:	f7fe fb8e 	bl	c340 <z_spin_unlock_valid>
    dc24:	b940      	cbnz	r0, dc38 <sys_clock_announce+0x114>
    dc26:	4916      	ldr	r1, [pc, #88]	; (dc80 <sys_clock_announce+0x15c>)
    dc28:	4816      	ldr	r0, [pc, #88]	; (dc84 <sys_clock_announce+0x160>)
    dc2a:	22ac      	movs	r2, #172	; 0xac
    dc2c:	f001 fbcb 	bl	f3c6 <printk>
    dc30:	4813      	ldr	r0, [pc, #76]	; (dc80 <sys_clock_announce+0x15c>)
    dc32:	21ac      	movs	r1, #172	; 0xac
    dc34:	f001 fc8c 	bl	f550 <assert_post_action>
    dc38:	f389 8811 	msr	BASEPRI, r9
    dc3c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    dc40:	f8d8 3008 	ldr.w	r3, [r8, #8]
    dc44:	4640      	mov	r0, r8
    dc46:	4798      	blx	r3
	__asm__ volatile(
    dc48:	f04f 0320 	mov.w	r3, #32
    dc4c:	f3ef 8911 	mrs	r9, BASEPRI
    dc50:	f383 8812 	msr	BASEPRI_MAX, r3
    dc54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dc58:	4808      	ldr	r0, [pc, #32]	; (dc7c <sys_clock_announce+0x158>)
    dc5a:	f7fe fb63 	bl	c324 <z_spin_lock_valid>
    dc5e:	b940      	cbnz	r0, dc72 <sys_clock_announce+0x14e>
    dc60:	4907      	ldr	r1, [pc, #28]	; (dc80 <sys_clock_announce+0x15c>)
    dc62:	4808      	ldr	r0, [pc, #32]	; (dc84 <sys_clock_announce+0x160>)
    dc64:	2281      	movs	r2, #129	; 0x81
    dc66:	f001 fbae 	bl	f3c6 <printk>
    dc6a:	4805      	ldr	r0, [pc, #20]	; (dc80 <sys_clock_announce+0x15c>)
    dc6c:	2181      	movs	r1, #129	; 0x81
    dc6e:	f001 fc6f 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    dc72:	4802      	ldr	r0, [pc, #8]	; (dc7c <sys_clock_announce+0x158>)
    dc74:	f7fe fb74 	bl	c360 <z_spin_lock_set_owner>
	return k;
    dc78:	e778      	b.n	db6c <sys_clock_announce+0x48>
    dc7a:	bf00      	nop
    dc7c:	20000c64 	.word	0x20000c64
    dc80:	00013b71 	.word	0x00013b71
    dc84:	00013904 	.word	0x00013904
    dc88:	20000c60 	.word	0x20000c60
    dc8c:	200005c8 	.word	0x200005c8
    dc90:	20000184 	.word	0x20000184

0000dc94 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    dc94:	b570      	push	{r4, r5, r6, lr}
    dc96:	f04f 0320 	mov.w	r3, #32
    dc9a:	f3ef 8611 	mrs	r6, BASEPRI
    dc9e:	f383 8812 	msr	BASEPRI_MAX, r3
    dca2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dca6:	4816      	ldr	r0, [pc, #88]	; (dd00 <sys_clock_tick_get+0x6c>)
    dca8:	f7fe fb3c 	bl	c324 <z_spin_lock_valid>
    dcac:	b940      	cbnz	r0, dcc0 <sys_clock_tick_get+0x2c>
    dcae:	4915      	ldr	r1, [pc, #84]	; (dd04 <sys_clock_tick_get+0x70>)
    dcb0:	4815      	ldr	r0, [pc, #84]	; (dd08 <sys_clock_tick_get+0x74>)
    dcb2:	2281      	movs	r2, #129	; 0x81
    dcb4:	f001 fb87 	bl	f3c6 <printk>
    dcb8:	4812      	ldr	r0, [pc, #72]	; (dd04 <sys_clock_tick_get+0x70>)
    dcba:	2181      	movs	r1, #129	; 0x81
    dcbc:	f001 fc48 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    dcc0:	480f      	ldr	r0, [pc, #60]	; (dd00 <sys_clock_tick_get+0x6c>)
    dcc2:	f7fe fb4d 	bl	c360 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    dcc6:	f7fa fe8f 	bl	89e8 <sys_clock_elapsed>
    dcca:	4b10      	ldr	r3, [pc, #64]	; (dd0c <sys_clock_tick_get+0x78>)
    dccc:	e9d3 4500 	ldrd	r4, r5, [r3]
    dcd0:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dcd2:	480b      	ldr	r0, [pc, #44]	; (dd00 <sys_clock_tick_get+0x6c>)
    dcd4:	f145 0500 	adc.w	r5, r5, #0
    dcd8:	f7fe fb32 	bl	c340 <z_spin_unlock_valid>
    dcdc:	b940      	cbnz	r0, dcf0 <sys_clock_tick_get+0x5c>
    dcde:	4909      	ldr	r1, [pc, #36]	; (dd04 <sys_clock_tick_get+0x70>)
    dce0:	4809      	ldr	r0, [pc, #36]	; (dd08 <sys_clock_tick_get+0x74>)
    dce2:	22ac      	movs	r2, #172	; 0xac
    dce4:	f001 fb6f 	bl	f3c6 <printk>
    dce8:	4806      	ldr	r0, [pc, #24]	; (dd04 <sys_clock_tick_get+0x70>)
    dcea:	21ac      	movs	r1, #172	; 0xac
    dcec:	f001 fc30 	bl	f550 <assert_post_action>
	__asm__ volatile(
    dcf0:	f386 8811 	msr	BASEPRI, r6
    dcf4:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    dcf8:	4620      	mov	r0, r4
    dcfa:	4629      	mov	r1, r5
    dcfc:	bd70      	pop	{r4, r5, r6, pc}
    dcfe:	bf00      	nop
    dd00:	20000c64 	.word	0x20000c64
    dd04:	00013b71 	.word	0x00013b71
    dd08:	00013904 	.word	0x00013904
    dd0c:	200005c8 	.word	0x200005c8

0000dd10 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    dd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dd12:	4604      	mov	r4, r0
	__asm__ volatile(
    dd14:	f04f 0320 	mov.w	r3, #32
    dd18:	f3ef 8511 	mrs	r5, BASEPRI
    dd1c:	f383 8812 	msr	BASEPRI_MAX, r3
    dd20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dd24:	483f      	ldr	r0, [pc, #252]	; (de24 <z_timer_expiration_handler+0x114>)
    dd26:	f7fe fafd 	bl	c324 <z_spin_lock_valid>
    dd2a:	b940      	cbnz	r0, dd3e <z_timer_expiration_handler+0x2e>
    dd2c:	493e      	ldr	r1, [pc, #248]	; (de28 <z_timer_expiration_handler+0x118>)
    dd2e:	483f      	ldr	r0, [pc, #252]	; (de2c <z_timer_expiration_handler+0x11c>)
    dd30:	2281      	movs	r2, #129	; 0x81
    dd32:	f001 fb48 	bl	f3c6 <printk>
    dd36:	483c      	ldr	r0, [pc, #240]	; (de28 <z_timer_expiration_handler+0x118>)
    dd38:	2181      	movs	r1, #129	; 0x81
    dd3a:	f001 fc09 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    dd3e:	4839      	ldr	r0, [pc, #228]	; (de24 <z_timer_expiration_handler+0x114>)
    dd40:	f7fe fb0e 	bl	c360 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    dd44:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    dd48:	1c56      	adds	r6, r2, #1
    dd4a:	f143 0700 	adc.w	r7, r3, #0
    dd4e:	2f00      	cmp	r7, #0
    dd50:	bf08      	it	eq
    dd52:	2e02      	cmpeq	r6, #2
    dd54:	d303      	bcc.n	dd5e <z_timer_expiration_handler+0x4e>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    dd56:	4936      	ldr	r1, [pc, #216]	; (de30 <z_timer_expiration_handler+0x120>)
    dd58:	4620      	mov	r0, r4
    dd5a:	f7ff fd79 	bl	d850 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    dd5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    dd60:	3301      	adds	r3, #1
    dd62:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    dd64:	6a23      	ldr	r3, [r4, #32]
    dd66:	b35b      	cbz	r3, ddc0 <z_timer_expiration_handler+0xb0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dd68:	482e      	ldr	r0, [pc, #184]	; (de24 <z_timer_expiration_handler+0x114>)
    dd6a:	f7fe fae9 	bl	c340 <z_spin_unlock_valid>
    dd6e:	b940      	cbnz	r0, dd82 <z_timer_expiration_handler+0x72>
    dd70:	492d      	ldr	r1, [pc, #180]	; (de28 <z_timer_expiration_handler+0x118>)
    dd72:	482e      	ldr	r0, [pc, #184]	; (de2c <z_timer_expiration_handler+0x11c>)
    dd74:	22ac      	movs	r2, #172	; 0xac
    dd76:	f001 fb26 	bl	f3c6 <printk>
    dd7a:	482b      	ldr	r0, [pc, #172]	; (de28 <z_timer_expiration_handler+0x118>)
    dd7c:	21ac      	movs	r1, #172	; 0xac
    dd7e:	f001 fbe7 	bl	f550 <assert_post_action>
	__asm__ volatile(
    dd82:	f385 8811 	msr	BASEPRI, r5
    dd86:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    dd8a:	6a23      	ldr	r3, [r4, #32]
    dd8c:	4620      	mov	r0, r4
    dd8e:	4798      	blx	r3
	__asm__ volatile(
    dd90:	f04f 0320 	mov.w	r3, #32
    dd94:	f3ef 8511 	mrs	r5, BASEPRI
    dd98:	f383 8812 	msr	BASEPRI_MAX, r3
    dd9c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dda0:	4820      	ldr	r0, [pc, #128]	; (de24 <z_timer_expiration_handler+0x114>)
    dda2:	f7fe fabf 	bl	c324 <z_spin_lock_valid>
    dda6:	b940      	cbnz	r0, ddba <z_timer_expiration_handler+0xaa>
    dda8:	491f      	ldr	r1, [pc, #124]	; (de28 <z_timer_expiration_handler+0x118>)
    ddaa:	4820      	ldr	r0, [pc, #128]	; (de2c <z_timer_expiration_handler+0x11c>)
    ddac:	2281      	movs	r2, #129	; 0x81
    ddae:	f001 fb0a 	bl	f3c6 <printk>
    ddb2:	481d      	ldr	r0, [pc, #116]	; (de28 <z_timer_expiration_handler+0x118>)
    ddb4:	2181      	movs	r1, #129	; 0x81
    ddb6:	f001 fbcb 	bl	f550 <assert_post_action>
	z_spin_lock_set_owner(l);
    ddba:	481a      	ldr	r0, [pc, #104]	; (de24 <z_timer_expiration_handler+0x114>)
    ddbc:	f7fe fad0 	bl	c360 <z_spin_lock_set_owner>
	return list->head == list;
    ddc0:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ddc4:	42a6      	cmp	r6, r4
    ddc6:	d000      	beq.n	ddca <z_timer_expiration_handler+0xba>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    ddc8:	b98e      	cbnz	r6, ddee <z_timer_expiration_handler+0xde>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ddca:	4816      	ldr	r0, [pc, #88]	; (de24 <z_timer_expiration_handler+0x114>)
    ddcc:	f7fe fab8 	bl	c340 <z_spin_unlock_valid>
    ddd0:	b940      	cbnz	r0, dde4 <z_timer_expiration_handler+0xd4>
    ddd2:	4915      	ldr	r1, [pc, #84]	; (de28 <z_timer_expiration_handler+0x118>)
    ddd4:	4815      	ldr	r0, [pc, #84]	; (de2c <z_timer_expiration_handler+0x11c>)
    ddd6:	22ac      	movs	r2, #172	; 0xac
    ddd8:	f001 faf5 	bl	f3c6 <printk>
    dddc:	4812      	ldr	r0, [pc, #72]	; (de28 <z_timer_expiration_handler+0x118>)
    ddde:	21ac      	movs	r1, #172	; 0xac
    dde0:	f001 fbb6 	bl	f550 <assert_post_action>
	__asm__ volatile(
    dde4:	f385 8811 	msr	BASEPRI, r5
    dde8:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    ddec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
    ddee:	4630      	mov	r0, r6
    ddf0:	f7fe fd64 	bl	c8bc <z_unpend_thread_no_timeout>
    ddf4:	2300      	movs	r3, #0
    ddf6:	480b      	ldr	r0, [pc, #44]	; (de24 <z_timer_expiration_handler+0x114>)
    ddf8:	67b3      	str	r3, [r6, #120]	; 0x78
    ddfa:	f7fe faa1 	bl	c340 <z_spin_unlock_valid>
    ddfe:	b940      	cbnz	r0, de12 <z_timer_expiration_handler+0x102>
    de00:	4909      	ldr	r1, [pc, #36]	; (de28 <z_timer_expiration_handler+0x118>)
    de02:	480a      	ldr	r0, [pc, #40]	; (de2c <z_timer_expiration_handler+0x11c>)
    de04:	22ac      	movs	r2, #172	; 0xac
    de06:	f001 fade 	bl	f3c6 <printk>
    de0a:	4807      	ldr	r0, [pc, #28]	; (de28 <z_timer_expiration_handler+0x118>)
    de0c:	21ac      	movs	r1, #172	; 0xac
    de0e:	f001 fb9f 	bl	f550 <assert_post_action>
    de12:	f385 8811 	msr	BASEPRI, r5
    de16:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    de1a:	4630      	mov	r0, r6
}
    de1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    de20:	f7fe bf80 	b.w	cd24 <z_ready_thread>
    de24:	20000c68 	.word	0x20000c68
    de28:	00013b71 	.word	0x00013b71
    de2c:	00013904 	.word	0x00013904
    de30:	0000dd11 	.word	0x0000dd11

0000de34 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    de34:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
    de38:	4619      	mov	r1, r3
    de3a:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    de3c:	1c4c      	adds	r4, r1, #1
{
    de3e:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    de40:	bf08      	it	eq
    de42:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    de46:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    de4a:	4680      	mov	r8, r0
    de4c:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    de4e:	d04c      	beq.n	deea <z_impl_k_timer_start+0xb6>
    de50:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    de52:	1c6b      	adds	r3, r5, #1
    de54:	bf08      	it	eq
    de56:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    de5a:	4614      	mov	r4, r2
    de5c:	d019      	beq.n	de92 <z_impl_k_timer_start+0x5e>
    de5e:	ea54 0305 	orrs.w	r3, r4, r5
    de62:	d016      	beq.n	de92 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
    de64:	f06f 0301 	mvn.w	r3, #1
    de68:	ebb3 0a02 	subs.w	sl, r3, r2
    de6c:	f04f 33ff 	mov.w	r3, #4294967295
    de70:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    de74:	f1ba 0f00 	cmp.w	sl, #0
    de78:	f17b 0300 	sbcs.w	r3, fp, #0
    de7c:	da09      	bge.n	de92 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
    de7e:	f112 34ff 	adds.w	r4, r2, #4294967295
    de82:	f145 35ff 	adc.w	r5, r5, #4294967295
    de86:	2c01      	cmp	r4, #1
    de88:	f175 0300 	sbcs.w	r3, r5, #0
    de8c:	bfbc      	itt	lt
    de8e:	2401      	movlt	r4, #1
    de90:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    de92:	f06f 0301 	mvn.w	r3, #1
    de96:	1a1b      	subs	r3, r3, r0
    de98:	9300      	str	r3, [sp, #0]
    de9a:	f04f 33ff 	mov.w	r3, #4294967295
    de9e:	eb63 0301 	sbc.w	r3, r3, r1
    dea2:	9301      	str	r3, [sp, #4]
    dea4:	e9dd 2300 	ldrd	r2, r3, [sp]
    dea8:	2a00      	cmp	r2, #0
    deaa:	f173 0300 	sbcs.w	r3, r3, #0
    deae:	da0c      	bge.n	deca <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
    deb0:	f110 38ff 	adds.w	r8, r0, #4294967295
    deb4:	f141 39ff 	adc.w	r9, r1, #4294967295
    deb8:	f1b8 0f00 	cmp.w	r8, #0
    debc:	f179 0300 	sbcs.w	r3, r9, #0
    dec0:	bfbc      	itt	lt
    dec2:	f04f 0800 	movlt.w	r8, #0
    dec6:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
    deca:	4630      	mov	r0, r6
    decc:	f7ff fd7a 	bl	d9c4 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    ded0:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    ded2:	4907      	ldr	r1, [pc, #28]	; (def0 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
    ded4:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    ded6:	4642      	mov	r2, r8
    ded8:	464b      	mov	r3, r9
    deda:	4630      	mov	r0, r6
	timer->period = period;
    dedc:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
    dee0:	b002      	add	sp, #8
    dee2:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    dee6:	f7ff bcb3 	b.w	d850 <z_add_timeout>
}
    deea:	b002      	add	sp, #8
    deec:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    def0:	0000dd11 	.word	0x0000dd11

0000def4 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    def4:	4a02      	ldr	r2, [pc, #8]	; (df00 <boot_banner+0xc>)
    def6:	4903      	ldr	r1, [pc, #12]	; (df04 <boot_banner+0x10>)
    def8:	4803      	ldr	r0, [pc, #12]	; (df08 <boot_banner+0x14>)
    defa:	f001 ba64 	b.w	f3c6 <printk>
    defe:	bf00      	nop
    df00:	00013cb9 	.word	0x00013cb9
    df04:	00014c00 	.word	0x00014c00
    df08:	00014c0f 	.word	0x00014c0f

0000df0c <asin>:
    df0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    df10:	f8df 90a4 	ldr.w	r9, [pc, #164]	; dfb8 <asin+0xac>
    df14:	b08b      	sub	sp, #44	; 0x2c
    df16:	4604      	mov	r4, r0
    df18:	460d      	mov	r5, r1
    df1a:	f7f3 fbe5 	bl	16e8 <__ieee754_asin>
    df1e:	f999 3000 	ldrsb.w	r3, [r9]
    df22:	3301      	adds	r3, #1
    df24:	4606      	mov	r6, r0
    df26:	460f      	mov	r7, r1
    df28:	d010      	beq.n	df4c <asin+0x40>
    df2a:	4622      	mov	r2, r4
    df2c:	462b      	mov	r3, r5
    df2e:	4620      	mov	r0, r4
    df30:	4629      	mov	r1, r5
    df32:	f7f3 fa3f 	bl	13b4 <__aeabi_dcmpun>
    df36:	4680      	mov	r8, r0
    df38:	b940      	cbnz	r0, df4c <asin+0x40>
    df3a:	4620      	mov	r0, r4
    df3c:	4629      	mov	r1, r5
    df3e:	f000 f963 	bl	e208 <fabs>
    df42:	4b1a      	ldr	r3, [pc, #104]	; (dfac <asin+0xa0>)
    df44:	2200      	movs	r2, #0
    df46:	f7f2 fd67 	bl	a18 <__aeabi_dcmpgt>
    df4a:	b920      	cbnz	r0, df56 <asin+0x4a>
    df4c:	4630      	mov	r0, r6
    df4e:	4639      	mov	r1, r7
    df50:	b00b      	add	sp, #44	; 0x2c
    df52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    df56:	4b16      	ldr	r3, [pc, #88]	; (dfb0 <asin+0xa4>)
    df58:	4816      	ldr	r0, [pc, #88]	; (dfb4 <asin+0xa8>)
    df5a:	9301      	str	r3, [sp, #4]
    df5c:	2201      	movs	r2, #1
    df5e:	e9cd 4504 	strd	r4, r5, [sp, #16]
    df62:	e9cd 4502 	strd	r4, r5, [sp, #8]
    df66:	f8cd 8020 	str.w	r8, [sp, #32]
    df6a:	9200      	str	r2, [sp, #0]
    df6c:	f000 f952 	bl	e214 <nan>
    df70:	f999 3000 	ldrsb.w	r3, [r9]
    df74:	2b02      	cmp	r3, #2
    df76:	e9cd 0106 	strd	r0, r1, [sp, #24]
    df7a:	d00c      	beq.n	df96 <asin+0x8a>
    df7c:	4668      	mov	r0, sp
    df7e:	f000 f947 	bl	e210 <matherr>
    df82:	b140      	cbz	r0, df96 <asin+0x8a>
    df84:	9b08      	ldr	r3, [sp, #32]
    df86:	b95b      	cbnz	r3, dfa0 <asin+0x94>
    df88:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    df8c:	4630      	mov	r0, r6
    df8e:	4639      	mov	r1, r7
    df90:	b00b      	add	sp, #44	; 0x2c
    df92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    df96:	f001 fe61 	bl	fc5c <__errno>
    df9a:	2321      	movs	r3, #33	; 0x21
    df9c:	6003      	str	r3, [r0, #0]
    df9e:	e7f1      	b.n	df84 <asin+0x78>
    dfa0:	f001 fe5c 	bl	fc5c <__errno>
    dfa4:	9b08      	ldr	r3, [sp, #32]
    dfa6:	6003      	str	r3, [r0, #0]
    dfa8:	e7ee      	b.n	df88 <asin+0x7c>
    dfaa:	bf00      	nop
    dfac:	3ff00000 	.word	0x3ff00000
    dfb0:	000134f4 	.word	0x000134f4
    dfb4:	000134f8 	.word	0x000134f8
    dfb8:	2000035c 	.word	0x2000035c

0000dfbc <atan2>:
    dfbc:	f7f3 bdd8 	b.w	1b70 <__ieee754_atan2>

0000dfc0 <sqrt>:
    dfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dfc4:	b08b      	sub	sp, #44	; 0x2c
    dfc6:	4604      	mov	r4, r0
    dfc8:	460d      	mov	r5, r1
    dfca:	f000 f859 	bl	e080 <__ieee754_sqrt>
    dfce:	4b2a      	ldr	r3, [pc, #168]	; (e078 <sqrt+0xb8>)
    dfd0:	f993 b000 	ldrsb.w	fp, [r3]
    dfd4:	f1bb 3fff 	cmp.w	fp, #4294967295
    dfd8:	4606      	mov	r6, r0
    dfda:	460f      	mov	r7, r1
    dfdc:	d012      	beq.n	e004 <sqrt+0x44>
    dfde:	4622      	mov	r2, r4
    dfe0:	462b      	mov	r3, r5
    dfe2:	4620      	mov	r0, r4
    dfe4:	4629      	mov	r1, r5
    dfe6:	f7f3 f9e5 	bl	13b4 <__aeabi_dcmpun>
    dfea:	4682      	mov	sl, r0
    dfec:	b950      	cbnz	r0, e004 <sqrt+0x44>
    dfee:	f04f 0800 	mov.w	r8, #0
    dff2:	f04f 0900 	mov.w	r9, #0
    dff6:	4642      	mov	r2, r8
    dff8:	464b      	mov	r3, r9
    dffa:	4620      	mov	r0, r4
    dffc:	4629      	mov	r1, r5
    dffe:	f7f2 fced 	bl	9dc <__aeabi_dcmplt>
    e002:	b920      	cbnz	r0, e00e <sqrt+0x4e>
    e004:	4630      	mov	r0, r6
    e006:	4639      	mov	r1, r7
    e008:	b00b      	add	sp, #44	; 0x2c
    e00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e00e:	4b1b      	ldr	r3, [pc, #108]	; (e07c <sqrt+0xbc>)
    e010:	f8cd a020 	str.w	sl, [sp, #32]
    e014:	2201      	movs	r2, #1
    e016:	e9cd 4504 	strd	r4, r5, [sp, #16]
    e01a:	e9cd 4502 	strd	r4, r5, [sp, #8]
    e01e:	9200      	str	r2, [sp, #0]
    e020:	9301      	str	r3, [sp, #4]
    e022:	f1bb 0f00 	cmp.w	fp, #0
    e026:	d017      	beq.n	e058 <sqrt+0x98>
    e028:	4642      	mov	r2, r8
    e02a:	464b      	mov	r3, r9
    e02c:	4640      	mov	r0, r8
    e02e:	4649      	mov	r1, r9
    e030:	f7f2 fb8c 	bl	74c <__aeabi_ddiv>
    e034:	f1bb 0f02 	cmp.w	fp, #2
    e038:	e9cd 0106 	strd	r0, r1, [sp, #24]
    e03c:	d10e      	bne.n	e05c <sqrt+0x9c>
    e03e:	f001 fe0d 	bl	fc5c <__errno>
    e042:	2321      	movs	r3, #33	; 0x21
    e044:	6003      	str	r3, [r0, #0]
    e046:	9b08      	ldr	r3, [sp, #32]
    e048:	b983      	cbnz	r3, e06c <sqrt+0xac>
    e04a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    e04e:	4630      	mov	r0, r6
    e050:	4639      	mov	r1, r7
    e052:	b00b      	add	sp, #44	; 0x2c
    e054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e058:	e9cd 8906 	strd	r8, r9, [sp, #24]
    e05c:	4668      	mov	r0, sp
    e05e:	f000 f8d7 	bl	e210 <matherr>
    e062:	2800      	cmp	r0, #0
    e064:	d0eb      	beq.n	e03e <sqrt+0x7e>
    e066:	9b08      	ldr	r3, [sp, #32]
    e068:	2b00      	cmp	r3, #0
    e06a:	d0ee      	beq.n	e04a <sqrt+0x8a>
    e06c:	f001 fdf6 	bl	fc5c <__errno>
    e070:	9b08      	ldr	r3, [sp, #32]
    e072:	6003      	str	r3, [r0, #0]
    e074:	e7e9      	b.n	e04a <sqrt+0x8a>
    e076:	bf00      	nop
    e078:	2000035c 	.word	0x2000035c
    e07c:	000134fc 	.word	0x000134fc

0000e080 <__ieee754_sqrt>:
    e080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e084:	4f5f      	ldr	r7, [pc, #380]	; (e204 <__ieee754_sqrt+0x184>)
    e086:	ea37 0201 	bics.w	r2, r7, r1
    e08a:	460e      	mov	r6, r1
    e08c:	4605      	mov	r5, r0
    e08e:	f000 8097 	beq.w	e1c0 <__ieee754_sqrt+0x140>
    e092:	2900      	cmp	r1, #0
    e094:	460b      	mov	r3, r1
    e096:	4604      	mov	r4, r0
    e098:	dd4e      	ble.n	e138 <__ieee754_sqrt+0xb8>
    e09a:	1509      	asrs	r1, r1, #20
    e09c:	d05a      	beq.n	e154 <__ieee754_sqrt+0xd4>
    e09e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    e0a2:	07ca      	lsls	r2, r1, #31
    e0a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    e0a8:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
    e0ac:	d403      	bmi.n	e0b6 <__ieee754_sqrt+0x36>
    e0ae:	005b      	lsls	r3, r3, #1
    e0b0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
    e0b4:	0064      	lsls	r4, r4, #1
    e0b6:	0fe2      	lsrs	r2, r4, #31
    e0b8:	f04f 0c00 	mov.w	ip, #0
    e0bc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    e0c0:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    e0c4:	0064      	lsls	r4, r4, #1
    e0c6:	4666      	mov	r6, ip
    e0c8:	2516      	movs	r5, #22
    e0ca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    e0ce:	18b1      	adds	r1, r6, r2
    e0d0:	4299      	cmp	r1, r3
    e0d2:	dc02      	bgt.n	e0da <__ieee754_sqrt+0x5a>
    e0d4:	1a5b      	subs	r3, r3, r1
    e0d6:	188e      	adds	r6, r1, r2
    e0d8:	4494      	add	ip, r2
    e0da:	005b      	lsls	r3, r3, #1
    e0dc:	3d01      	subs	r5, #1
    e0de:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
    e0e2:	ea4f 0252 	mov.w	r2, r2, lsr #1
    e0e6:	ea4f 0444 	mov.w	r4, r4, lsl #1
    e0ea:	d1f0      	bne.n	e0ce <__ieee754_sqrt+0x4e>
    e0ec:	462f      	mov	r7, r5
    e0ee:	2020      	movs	r0, #32
    e0f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    e0f4:	e009      	b.n	e10a <__ieee754_sqrt+0x8a>
    e0f6:	d03d      	beq.n	e174 <__ieee754_sqrt+0xf4>
    e0f8:	0fe1      	lsrs	r1, r4, #31
    e0fa:	3801      	subs	r0, #1
    e0fc:	ea4f 0252 	mov.w	r2, r2, lsr #1
    e100:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    e104:	ea4f 0444 	mov.w	r4, r4, lsl #1
    e108:	d03d      	beq.n	e186 <__ieee754_sqrt+0x106>
    e10a:	42b3      	cmp	r3, r6
    e10c:	eb02 0105 	add.w	r1, r2, r5
    e110:	ddf1      	ble.n	e0f6 <__ieee754_sqrt+0x76>
    e112:	2900      	cmp	r1, #0
    e114:	eb01 0502 	add.w	r5, r1, r2
    e118:	db09      	blt.n	e12e <__ieee754_sqrt+0xae>
    e11a:	46b0      	mov	r8, r6
    e11c:	1b9b      	subs	r3, r3, r6
    e11e:	42a1      	cmp	r1, r4
    e120:	bf88      	it	hi
    e122:	f103 33ff 	addhi.w	r3, r3, #4294967295
    e126:	1a64      	subs	r4, r4, r1
    e128:	4417      	add	r7, r2
    e12a:	4646      	mov	r6, r8
    e12c:	e7e4      	b.n	e0f8 <__ieee754_sqrt+0x78>
    e12e:	2d00      	cmp	r5, #0
    e130:	dbf3      	blt.n	e11a <__ieee754_sqrt+0x9a>
    e132:	f106 0801 	add.w	r8, r6, #1
    e136:	e7f1      	b.n	e11c <__ieee754_sqrt+0x9c>
    e138:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
    e13c:	4302      	orrs	r2, r0
    e13e:	d057      	beq.n	e1f0 <__ieee754_sqrt+0x170>
    e140:	2900      	cmp	r1, #0
    e142:	d14b      	bne.n	e1dc <__ieee754_sqrt+0x15c>
    e144:	0ae2      	lsrs	r2, r4, #11
    e146:	3915      	subs	r1, #21
    e148:	0564      	lsls	r4, r4, #21
    e14a:	4613      	mov	r3, r2
    e14c:	2a00      	cmp	r2, #0
    e14e:	d0f9      	beq.n	e144 <__ieee754_sqrt+0xc4>
    e150:	02d7      	lsls	r7, r2, #11
    e152:	d452      	bmi.n	e1fa <__ieee754_sqrt+0x17a>
    e154:	2000      	movs	r0, #0
    e156:	005b      	lsls	r3, r3, #1
    e158:	02de      	lsls	r6, r3, #11
    e15a:	4605      	mov	r5, r0
    e15c:	f100 0001 	add.w	r0, r0, #1
    e160:	d5f9      	bpl.n	e156 <__ieee754_sqrt+0xd6>
    e162:	461a      	mov	r2, r3
    e164:	4623      	mov	r3, r4
    e166:	4084      	lsls	r4, r0
    e168:	f1c0 0020 	rsb	r0, r0, #32
    e16c:	40c3      	lsrs	r3, r0
    e16e:	4313      	orrs	r3, r2
    e170:	1b49      	subs	r1, r1, r5
    e172:	e794      	b.n	e09e <__ieee754_sqrt+0x1e>
    e174:	42a1      	cmp	r1, r4
    e176:	d8bf      	bhi.n	e0f8 <__ieee754_sqrt+0x78>
    e178:	2900      	cmp	r1, #0
    e17a:	eb01 0502 	add.w	r5, r1, r2
    e17e:	dbd6      	blt.n	e12e <__ieee754_sqrt+0xae>
    e180:	4698      	mov	r8, r3
    e182:	2300      	movs	r3, #0
    e184:	e7cf      	b.n	e126 <__ieee754_sqrt+0xa6>
    e186:	4323      	orrs	r3, r4
    e188:	d113      	bne.n	e1b2 <__ieee754_sqrt+0x132>
    e18a:	0878      	lsrs	r0, r7, #1
    e18c:	ea4f 036c 	mov.w	r3, ip, asr #1
    e190:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
    e194:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    e198:	f01c 0f01 	tst.w	ip, #1
    e19c:	bf18      	it	ne
    e19e:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
    e1a2:	eb03 550e 	add.w	r5, r3, lr, lsl #20
    e1a6:	4602      	mov	r2, r0
    e1a8:	462b      	mov	r3, r5
    e1aa:	4610      	mov	r0, r2
    e1ac:	4619      	mov	r1, r3
    e1ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e1b2:	1c7b      	adds	r3, r7, #1
    e1b4:	bf16      	itet	ne
    e1b6:	1c78      	addne	r0, r7, #1
    e1b8:	f10c 0c01 	addeq.w	ip, ip, #1
    e1bc:	0840      	lsrne	r0, r0, #1
    e1be:	e7e5      	b.n	e18c <__ieee754_sqrt+0x10c>
    e1c0:	4602      	mov	r2, r0
    e1c2:	460b      	mov	r3, r1
    e1c4:	f7f2 f998 	bl	4f8 <__aeabi_dmul>
    e1c8:	462a      	mov	r2, r5
    e1ca:	4633      	mov	r3, r6
    e1cc:	f7f1 ffde 	bl	18c <__adddf3>
    e1d0:	4602      	mov	r2, r0
    e1d2:	460b      	mov	r3, r1
    e1d4:	4610      	mov	r0, r2
    e1d6:	4619      	mov	r1, r3
    e1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e1dc:	4602      	mov	r2, r0
    e1de:	f7f1 ffd3 	bl	188 <__aeabi_dsub>
    e1e2:	4602      	mov	r2, r0
    e1e4:	460b      	mov	r3, r1
    e1e6:	f7f2 fab1 	bl	74c <__aeabi_ddiv>
    e1ea:	4602      	mov	r2, r0
    e1ec:	460b      	mov	r3, r1
    e1ee:	e7dc      	b.n	e1aa <__ieee754_sqrt+0x12a>
    e1f0:	4602      	mov	r2, r0
    e1f2:	4610      	mov	r0, r2
    e1f4:	4619      	mov	r1, r3
    e1f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e1fa:	4623      	mov	r3, r4
    e1fc:	2020      	movs	r0, #32
    e1fe:	f04f 35ff 	mov.w	r5, #4294967295
    e202:	e7b3      	b.n	e16c <__ieee754_sqrt+0xec>
    e204:	7ff00000 	.word	0x7ff00000

0000e208 <fabs>:
    e208:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    e20c:	4770      	bx	lr
    e20e:	bf00      	nop

0000e210 <matherr>:
    e210:	2000      	movs	r0, #0
    e212:	4770      	bx	lr

0000e214 <nan>:
    e214:	4901      	ldr	r1, [pc, #4]	; (e21c <nan+0x8>)
    e216:	2000      	movs	r0, #0
    e218:	4770      	bx	lr
    e21a:	bf00      	nop
    e21c:	7ff80000 	.word	0x7ff80000

0000e220 <malloc>:
    e220:	4b02      	ldr	r3, [pc, #8]	; (e22c <malloc+0xc>)
    e222:	4601      	mov	r1, r0
    e224:	6818      	ldr	r0, [r3, #0]
    e226:	f000 b851 	b.w	e2cc <_malloc_r>
    e22a:	bf00      	nop
    e22c:	2000018c 	.word	0x2000018c

0000e230 <_free_r>:
    e230:	b538      	push	{r3, r4, r5, lr}
    e232:	4605      	mov	r5, r0
    e234:	2900      	cmp	r1, #0
    e236:	d045      	beq.n	e2c4 <_free_r+0x94>
    e238:	f851 3c04 	ldr.w	r3, [r1, #-4]
    e23c:	1f0c      	subs	r4, r1, #4
    e23e:	2b00      	cmp	r3, #0
    e240:	bfb8      	it	lt
    e242:	18e4      	addlt	r4, r4, r3
    e244:	f000 fc62 	bl	eb0c <__malloc_lock>
    e248:	4a1f      	ldr	r2, [pc, #124]	; (e2c8 <_free_r+0x98>)
    e24a:	6813      	ldr	r3, [r2, #0]
    e24c:	4610      	mov	r0, r2
    e24e:	b933      	cbnz	r3, e25e <_free_r+0x2e>
    e250:	6063      	str	r3, [r4, #4]
    e252:	6014      	str	r4, [r2, #0]
    e254:	4628      	mov	r0, r5
    e256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e25a:	f000 bc5d 	b.w	eb18 <__malloc_unlock>
    e25e:	42a3      	cmp	r3, r4
    e260:	d90b      	bls.n	e27a <_free_r+0x4a>
    e262:	6821      	ldr	r1, [r4, #0]
    e264:	1862      	adds	r2, r4, r1
    e266:	4293      	cmp	r3, r2
    e268:	bf04      	itt	eq
    e26a:	681a      	ldreq	r2, [r3, #0]
    e26c:	685b      	ldreq	r3, [r3, #4]
    e26e:	6063      	str	r3, [r4, #4]
    e270:	bf04      	itt	eq
    e272:	1852      	addeq	r2, r2, r1
    e274:	6022      	streq	r2, [r4, #0]
    e276:	6004      	str	r4, [r0, #0]
    e278:	e7ec      	b.n	e254 <_free_r+0x24>
    e27a:	461a      	mov	r2, r3
    e27c:	685b      	ldr	r3, [r3, #4]
    e27e:	b10b      	cbz	r3, e284 <_free_r+0x54>
    e280:	42a3      	cmp	r3, r4
    e282:	d9fa      	bls.n	e27a <_free_r+0x4a>
    e284:	6811      	ldr	r1, [r2, #0]
    e286:	1850      	adds	r0, r2, r1
    e288:	42a0      	cmp	r0, r4
    e28a:	d10b      	bne.n	e2a4 <_free_r+0x74>
    e28c:	6820      	ldr	r0, [r4, #0]
    e28e:	4401      	add	r1, r0
    e290:	1850      	adds	r0, r2, r1
    e292:	4283      	cmp	r3, r0
    e294:	6011      	str	r1, [r2, #0]
    e296:	d1dd      	bne.n	e254 <_free_r+0x24>
    e298:	6818      	ldr	r0, [r3, #0]
    e29a:	685b      	ldr	r3, [r3, #4]
    e29c:	6053      	str	r3, [r2, #4]
    e29e:	4401      	add	r1, r0
    e2a0:	6011      	str	r1, [r2, #0]
    e2a2:	e7d7      	b.n	e254 <_free_r+0x24>
    e2a4:	d902      	bls.n	e2ac <_free_r+0x7c>
    e2a6:	230c      	movs	r3, #12
    e2a8:	602b      	str	r3, [r5, #0]
    e2aa:	e7d3      	b.n	e254 <_free_r+0x24>
    e2ac:	6820      	ldr	r0, [r4, #0]
    e2ae:	1821      	adds	r1, r4, r0
    e2b0:	428b      	cmp	r3, r1
    e2b2:	bf04      	itt	eq
    e2b4:	6819      	ldreq	r1, [r3, #0]
    e2b6:	685b      	ldreq	r3, [r3, #4]
    e2b8:	6063      	str	r3, [r4, #4]
    e2ba:	bf04      	itt	eq
    e2bc:	1809      	addeq	r1, r1, r0
    e2be:	6021      	streq	r1, [r4, #0]
    e2c0:	6054      	str	r4, [r2, #4]
    e2c2:	e7c7      	b.n	e254 <_free_r+0x24>
    e2c4:	bd38      	pop	{r3, r4, r5, pc}
    e2c6:	bf00      	nop
    e2c8:	20000c6c 	.word	0x20000c6c

0000e2cc <_malloc_r>:
    e2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e2ce:	1ccd      	adds	r5, r1, #3
    e2d0:	f025 0503 	bic.w	r5, r5, #3
    e2d4:	3508      	adds	r5, #8
    e2d6:	2d0c      	cmp	r5, #12
    e2d8:	bf38      	it	cc
    e2da:	250c      	movcc	r5, #12
    e2dc:	2d00      	cmp	r5, #0
    e2de:	4606      	mov	r6, r0
    e2e0:	db01      	blt.n	e2e6 <_malloc_r+0x1a>
    e2e2:	42a9      	cmp	r1, r5
    e2e4:	d903      	bls.n	e2ee <_malloc_r+0x22>
    e2e6:	230c      	movs	r3, #12
    e2e8:	6033      	str	r3, [r6, #0]
    e2ea:	2000      	movs	r0, #0
    e2ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e2ee:	f000 fc0d 	bl	eb0c <__malloc_lock>
    e2f2:	4921      	ldr	r1, [pc, #132]	; (e378 <_malloc_r+0xac>)
    e2f4:	680a      	ldr	r2, [r1, #0]
    e2f6:	4614      	mov	r4, r2
    e2f8:	b99c      	cbnz	r4, e322 <_malloc_r+0x56>
    e2fa:	4f20      	ldr	r7, [pc, #128]	; (e37c <_malloc_r+0xb0>)
    e2fc:	683b      	ldr	r3, [r7, #0]
    e2fe:	b923      	cbnz	r3, e30a <_malloc_r+0x3e>
    e300:	4621      	mov	r1, r4
    e302:	4630      	mov	r0, r6
    e304:	f000 fb8c 	bl	ea20 <_sbrk_r>
    e308:	6038      	str	r0, [r7, #0]
    e30a:	4629      	mov	r1, r5
    e30c:	4630      	mov	r0, r6
    e30e:	f000 fb87 	bl	ea20 <_sbrk_r>
    e312:	1c43      	adds	r3, r0, #1
    e314:	d123      	bne.n	e35e <_malloc_r+0x92>
    e316:	230c      	movs	r3, #12
    e318:	6033      	str	r3, [r6, #0]
    e31a:	4630      	mov	r0, r6
    e31c:	f000 fbfc 	bl	eb18 <__malloc_unlock>
    e320:	e7e3      	b.n	e2ea <_malloc_r+0x1e>
    e322:	6823      	ldr	r3, [r4, #0]
    e324:	1b5b      	subs	r3, r3, r5
    e326:	d417      	bmi.n	e358 <_malloc_r+0x8c>
    e328:	2b0b      	cmp	r3, #11
    e32a:	d903      	bls.n	e334 <_malloc_r+0x68>
    e32c:	6023      	str	r3, [r4, #0]
    e32e:	441c      	add	r4, r3
    e330:	6025      	str	r5, [r4, #0]
    e332:	e004      	b.n	e33e <_malloc_r+0x72>
    e334:	6863      	ldr	r3, [r4, #4]
    e336:	42a2      	cmp	r2, r4
    e338:	bf0c      	ite	eq
    e33a:	600b      	streq	r3, [r1, #0]
    e33c:	6053      	strne	r3, [r2, #4]
    e33e:	4630      	mov	r0, r6
    e340:	f000 fbea 	bl	eb18 <__malloc_unlock>
    e344:	f104 000b 	add.w	r0, r4, #11
    e348:	1d23      	adds	r3, r4, #4
    e34a:	f020 0007 	bic.w	r0, r0, #7
    e34e:	1ac2      	subs	r2, r0, r3
    e350:	d0cc      	beq.n	e2ec <_malloc_r+0x20>
    e352:	1a1b      	subs	r3, r3, r0
    e354:	50a3      	str	r3, [r4, r2]
    e356:	e7c9      	b.n	e2ec <_malloc_r+0x20>
    e358:	4622      	mov	r2, r4
    e35a:	6864      	ldr	r4, [r4, #4]
    e35c:	e7cc      	b.n	e2f8 <_malloc_r+0x2c>
    e35e:	1cc4      	adds	r4, r0, #3
    e360:	f024 0403 	bic.w	r4, r4, #3
    e364:	42a0      	cmp	r0, r4
    e366:	d0e3      	beq.n	e330 <_malloc_r+0x64>
    e368:	1a21      	subs	r1, r4, r0
    e36a:	4630      	mov	r0, r6
    e36c:	f000 fb58 	bl	ea20 <_sbrk_r>
    e370:	3001      	adds	r0, #1
    e372:	d1dd      	bne.n	e330 <_malloc_r+0x64>
    e374:	e7cf      	b.n	e316 <_malloc_r+0x4a>
    e376:	bf00      	nop
    e378:	20000c6c 	.word	0x20000c6c
    e37c:	20000c70 	.word	0x20000c70

0000e380 <_printf_float>:
    e380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e384:	b091      	sub	sp, #68	; 0x44
    e386:	460c      	mov	r4, r1
    e388:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    e38c:	4616      	mov	r6, r2
    e38e:	461f      	mov	r7, r3
    e390:	4605      	mov	r5, r0
    e392:	f000 fbb7 	bl	eb04 <_localeconv_r>
    e396:	6803      	ldr	r3, [r0, #0]
    e398:	9309      	str	r3, [sp, #36]	; 0x24
    e39a:	4618      	mov	r0, r3
    e39c:	f7f3 f852 	bl	1444 <strlen>
    e3a0:	2300      	movs	r3, #0
    e3a2:	930e      	str	r3, [sp, #56]	; 0x38
    e3a4:	f8d8 3000 	ldr.w	r3, [r8]
    e3a8:	900a      	str	r0, [sp, #40]	; 0x28
    e3aa:	3307      	adds	r3, #7
    e3ac:	f023 0307 	bic.w	r3, r3, #7
    e3b0:	f103 0208 	add.w	r2, r3, #8
    e3b4:	f894 9018 	ldrb.w	r9, [r4, #24]
    e3b8:	f8d4 b000 	ldr.w	fp, [r4]
    e3bc:	f8c8 2000 	str.w	r2, [r8]
    e3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    e3c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    e3c8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
    e3cc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
    e3d0:	930b      	str	r3, [sp, #44]	; 0x2c
    e3d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e3d4:	4b9c      	ldr	r3, [pc, #624]	; (e648 <_printf_float+0x2c8>)
    e3d6:	f04f 32ff 	mov.w	r2, #4294967295
    e3da:	4640      	mov	r0, r8
    e3dc:	f7f2 ffea 	bl	13b4 <__aeabi_dcmpun>
    e3e0:	bb70      	cbnz	r0, e440 <_printf_float+0xc0>
    e3e2:	4b99      	ldr	r3, [pc, #612]	; (e648 <_printf_float+0x2c8>)
    e3e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e3e6:	f04f 32ff 	mov.w	r2, #4294967295
    e3ea:	4640      	mov	r0, r8
    e3ec:	f7f2 fb00 	bl	9f0 <__aeabi_dcmple>
    e3f0:	bb30      	cbnz	r0, e440 <_printf_float+0xc0>
    e3f2:	2200      	movs	r2, #0
    e3f4:	2300      	movs	r3, #0
    e3f6:	4640      	mov	r0, r8
    e3f8:	4651      	mov	r1, sl
    e3fa:	f7f2 faef 	bl	9dc <__aeabi_dcmplt>
    e3fe:	b110      	cbz	r0, e406 <_printf_float+0x86>
    e400:	232d      	movs	r3, #45	; 0x2d
    e402:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    e406:	4b91      	ldr	r3, [pc, #580]	; (e64c <_printf_float+0x2cc>)
    e408:	4891      	ldr	r0, [pc, #580]	; (e650 <_printf_float+0x2d0>)
    e40a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    e40e:	bf94      	ite	ls
    e410:	4698      	movls	r8, r3
    e412:	4680      	movhi	r8, r0
    e414:	2303      	movs	r3, #3
    e416:	6123      	str	r3, [r4, #16]
    e418:	f02b 0304 	bic.w	r3, fp, #4
    e41c:	6023      	str	r3, [r4, #0]
    e41e:	f04f 0a00 	mov.w	sl, #0
    e422:	9700      	str	r7, [sp, #0]
    e424:	4633      	mov	r3, r6
    e426:	aa0f      	add	r2, sp, #60	; 0x3c
    e428:	4621      	mov	r1, r4
    e42a:	4628      	mov	r0, r5
    e42c:	f004 f810 	bl	12450 <_printf_common>
    e430:	3001      	adds	r0, #1
    e432:	f040 808f 	bne.w	e554 <_printf_float+0x1d4>
    e436:	f04f 30ff 	mov.w	r0, #4294967295
    e43a:	b011      	add	sp, #68	; 0x44
    e43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e440:	4642      	mov	r2, r8
    e442:	4653      	mov	r3, sl
    e444:	4640      	mov	r0, r8
    e446:	4651      	mov	r1, sl
    e448:	f7f2 ffb4 	bl	13b4 <__aeabi_dcmpun>
    e44c:	b140      	cbz	r0, e460 <_printf_float+0xe0>
    e44e:	f1ba 0f00 	cmp.w	sl, #0
    e452:	bfbc      	itt	lt
    e454:	232d      	movlt	r3, #45	; 0x2d
    e456:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
    e45a:	487e      	ldr	r0, [pc, #504]	; (e654 <_printf_float+0x2d4>)
    e45c:	4b7e      	ldr	r3, [pc, #504]	; (e658 <_printf_float+0x2d8>)
    e45e:	e7d4      	b.n	e40a <_printf_float+0x8a>
    e460:	6863      	ldr	r3, [r4, #4]
    e462:	1c5a      	adds	r2, r3, #1
    e464:	f009 01df 	and.w	r1, r9, #223	; 0xdf
    e468:	d142      	bne.n	e4f0 <_printf_float+0x170>
    e46a:	2306      	movs	r3, #6
    e46c:	6063      	str	r3, [r4, #4]
    e46e:	2200      	movs	r2, #0
    e470:	9206      	str	r2, [sp, #24]
    e472:	aa0e      	add	r2, sp, #56	; 0x38
    e474:	e9cd 9204 	strd	r9, r2, [sp, #16]
    e478:	aa0d      	add	r2, sp, #52	; 0x34
    e47a:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
    e47e:	9203      	str	r2, [sp, #12]
    e480:	f10d 0233 	add.w	r2, sp, #51	; 0x33
    e484:	e9cd 3201 	strd	r3, r2, [sp, #4]
    e488:	6023      	str	r3, [r4, #0]
    e48a:	6863      	ldr	r3, [r4, #4]
    e48c:	9300      	str	r3, [sp, #0]
    e48e:	4642      	mov	r2, r8
    e490:	4653      	mov	r3, sl
    e492:	4628      	mov	r0, r5
    e494:	910b      	str	r1, [sp, #44]	; 0x2c
    e496:	f003 ff3d 	bl	12314 <__cvt>
    e49a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e49c:	2947      	cmp	r1, #71	; 0x47
    e49e:	4680      	mov	r8, r0
    e4a0:	990d      	ldr	r1, [sp, #52]	; 0x34
    e4a2:	d108      	bne.n	e4b6 <_printf_float+0x136>
    e4a4:	1cc8      	adds	r0, r1, #3
    e4a6:	db02      	blt.n	e4ae <_printf_float+0x12e>
    e4a8:	6863      	ldr	r3, [r4, #4]
    e4aa:	4299      	cmp	r1, r3
    e4ac:	dd40      	ble.n	e530 <_printf_float+0x1b0>
    e4ae:	f1a9 0902 	sub.w	r9, r9, #2
    e4b2:	fa5f f989 	uxtb.w	r9, r9
    e4b6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    e4ba:	d81f      	bhi.n	e4fc <_printf_float+0x17c>
    e4bc:	3901      	subs	r1, #1
    e4be:	464a      	mov	r2, r9
    e4c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
    e4c4:	910d      	str	r1, [sp, #52]	; 0x34
    e4c6:	f003 ff85 	bl	123d4 <__exponent>
    e4ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e4cc:	1813      	adds	r3, r2, r0
    e4ce:	2a01      	cmp	r2, #1
    e4d0:	4682      	mov	sl, r0
    e4d2:	6123      	str	r3, [r4, #16]
    e4d4:	dc02      	bgt.n	e4dc <_printf_float+0x15c>
    e4d6:	6822      	ldr	r2, [r4, #0]
    e4d8:	07d2      	lsls	r2, r2, #31
    e4da:	d501      	bpl.n	e4e0 <_printf_float+0x160>
    e4dc:	3301      	adds	r3, #1
    e4de:	6123      	str	r3, [r4, #16]
    e4e0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    e4e4:	2b00      	cmp	r3, #0
    e4e6:	d09c      	beq.n	e422 <_printf_float+0xa2>
    e4e8:	232d      	movs	r3, #45	; 0x2d
    e4ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    e4ee:	e798      	b.n	e422 <_printf_float+0xa2>
    e4f0:	2947      	cmp	r1, #71	; 0x47
    e4f2:	d1bc      	bne.n	e46e <_printf_float+0xee>
    e4f4:	2b00      	cmp	r3, #0
    e4f6:	d1ba      	bne.n	e46e <_printf_float+0xee>
    e4f8:	2301      	movs	r3, #1
    e4fa:	e7b7      	b.n	e46c <_printf_float+0xec>
    e4fc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
    e500:	d118      	bne.n	e534 <_printf_float+0x1b4>
    e502:	2900      	cmp	r1, #0
    e504:	6863      	ldr	r3, [r4, #4]
    e506:	dd0b      	ble.n	e520 <_printf_float+0x1a0>
    e508:	6121      	str	r1, [r4, #16]
    e50a:	b913      	cbnz	r3, e512 <_printf_float+0x192>
    e50c:	6822      	ldr	r2, [r4, #0]
    e50e:	07d0      	lsls	r0, r2, #31
    e510:	d502      	bpl.n	e518 <_printf_float+0x198>
    e512:	3301      	adds	r3, #1
    e514:	440b      	add	r3, r1
    e516:	6123      	str	r3, [r4, #16]
    e518:	65a1      	str	r1, [r4, #88]	; 0x58
    e51a:	f04f 0a00 	mov.w	sl, #0
    e51e:	e7df      	b.n	e4e0 <_printf_float+0x160>
    e520:	b913      	cbnz	r3, e528 <_printf_float+0x1a8>
    e522:	6822      	ldr	r2, [r4, #0]
    e524:	07d2      	lsls	r2, r2, #31
    e526:	d501      	bpl.n	e52c <_printf_float+0x1ac>
    e528:	3302      	adds	r3, #2
    e52a:	e7f4      	b.n	e516 <_printf_float+0x196>
    e52c:	2301      	movs	r3, #1
    e52e:	e7f2      	b.n	e516 <_printf_float+0x196>
    e530:	f04f 0967 	mov.w	r9, #103	; 0x67
    e534:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e536:	4299      	cmp	r1, r3
    e538:	db05      	blt.n	e546 <_printf_float+0x1c6>
    e53a:	6823      	ldr	r3, [r4, #0]
    e53c:	6121      	str	r1, [r4, #16]
    e53e:	07d8      	lsls	r0, r3, #31
    e540:	d5ea      	bpl.n	e518 <_printf_float+0x198>
    e542:	1c4b      	adds	r3, r1, #1
    e544:	e7e7      	b.n	e516 <_printf_float+0x196>
    e546:	2900      	cmp	r1, #0
    e548:	bfd4      	ite	le
    e54a:	f1c1 0202 	rsble	r2, r1, #2
    e54e:	2201      	movgt	r2, #1
    e550:	4413      	add	r3, r2
    e552:	e7e0      	b.n	e516 <_printf_float+0x196>
    e554:	6823      	ldr	r3, [r4, #0]
    e556:	055a      	lsls	r2, r3, #21
    e558:	d407      	bmi.n	e56a <_printf_float+0x1ea>
    e55a:	6923      	ldr	r3, [r4, #16]
    e55c:	4642      	mov	r2, r8
    e55e:	4631      	mov	r1, r6
    e560:	4628      	mov	r0, r5
    e562:	47b8      	blx	r7
    e564:	3001      	adds	r0, #1
    e566:	d12b      	bne.n	e5c0 <_printf_float+0x240>
    e568:	e765      	b.n	e436 <_printf_float+0xb6>
    e56a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    e56e:	f240 80dc 	bls.w	e72a <_printf_float+0x3aa>
    e572:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    e576:	2200      	movs	r2, #0
    e578:	2300      	movs	r3, #0
    e57a:	f7f2 fa25 	bl	9c8 <__aeabi_dcmpeq>
    e57e:	2800      	cmp	r0, #0
    e580:	d033      	beq.n	e5ea <_printf_float+0x26a>
    e582:	4a36      	ldr	r2, [pc, #216]	; (e65c <_printf_float+0x2dc>)
    e584:	2301      	movs	r3, #1
    e586:	4631      	mov	r1, r6
    e588:	4628      	mov	r0, r5
    e58a:	47b8      	blx	r7
    e58c:	3001      	adds	r0, #1
    e58e:	f43f af52 	beq.w	e436 <_printf_float+0xb6>
    e592:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    e596:	429a      	cmp	r2, r3
    e598:	db02      	blt.n	e5a0 <_printf_float+0x220>
    e59a:	6823      	ldr	r3, [r4, #0]
    e59c:	07d8      	lsls	r0, r3, #31
    e59e:	d50f      	bpl.n	e5c0 <_printf_float+0x240>
    e5a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    e5a4:	4631      	mov	r1, r6
    e5a6:	4628      	mov	r0, r5
    e5a8:	47b8      	blx	r7
    e5aa:	3001      	adds	r0, #1
    e5ac:	f43f af43 	beq.w	e436 <_printf_float+0xb6>
    e5b0:	f04f 0800 	mov.w	r8, #0
    e5b4:	f104 091a 	add.w	r9, r4, #26
    e5b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e5ba:	3b01      	subs	r3, #1
    e5bc:	4543      	cmp	r3, r8
    e5be:	dc09      	bgt.n	e5d4 <_printf_float+0x254>
    e5c0:	6823      	ldr	r3, [r4, #0]
    e5c2:	079b      	lsls	r3, r3, #30
    e5c4:	f100 8101 	bmi.w	e7ca <_printf_float+0x44a>
    e5c8:	68e0      	ldr	r0, [r4, #12]
    e5ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e5cc:	4298      	cmp	r0, r3
    e5ce:	bfb8      	it	lt
    e5d0:	4618      	movlt	r0, r3
    e5d2:	e732      	b.n	e43a <_printf_float+0xba>
    e5d4:	2301      	movs	r3, #1
    e5d6:	464a      	mov	r2, r9
    e5d8:	4631      	mov	r1, r6
    e5da:	4628      	mov	r0, r5
    e5dc:	47b8      	blx	r7
    e5de:	3001      	adds	r0, #1
    e5e0:	f43f af29 	beq.w	e436 <_printf_float+0xb6>
    e5e4:	f108 0801 	add.w	r8, r8, #1
    e5e8:	e7e6      	b.n	e5b8 <_printf_float+0x238>
    e5ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e5ec:	2b00      	cmp	r3, #0
    e5ee:	dc37      	bgt.n	e660 <_printf_float+0x2e0>
    e5f0:	4a1a      	ldr	r2, [pc, #104]	; (e65c <_printf_float+0x2dc>)
    e5f2:	2301      	movs	r3, #1
    e5f4:	4631      	mov	r1, r6
    e5f6:	4628      	mov	r0, r5
    e5f8:	47b8      	blx	r7
    e5fa:	3001      	adds	r0, #1
    e5fc:	f43f af1b 	beq.w	e436 <_printf_float+0xb6>
    e600:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    e604:	4313      	orrs	r3, r2
    e606:	d102      	bne.n	e60e <_printf_float+0x28e>
    e608:	6823      	ldr	r3, [r4, #0]
    e60a:	07d9      	lsls	r1, r3, #31
    e60c:	d5d8      	bpl.n	e5c0 <_printf_float+0x240>
    e60e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    e612:	4631      	mov	r1, r6
    e614:	4628      	mov	r0, r5
    e616:	47b8      	blx	r7
    e618:	3001      	adds	r0, #1
    e61a:	f43f af0c 	beq.w	e436 <_printf_float+0xb6>
    e61e:	f04f 0900 	mov.w	r9, #0
    e622:	f104 0a1a 	add.w	sl, r4, #26
    e626:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e628:	425b      	negs	r3, r3
    e62a:	454b      	cmp	r3, r9
    e62c:	dc01      	bgt.n	e632 <_printf_float+0x2b2>
    e62e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e630:	e794      	b.n	e55c <_printf_float+0x1dc>
    e632:	2301      	movs	r3, #1
    e634:	4652      	mov	r2, sl
    e636:	4631      	mov	r1, r6
    e638:	4628      	mov	r0, r5
    e63a:	47b8      	blx	r7
    e63c:	3001      	adds	r0, #1
    e63e:	f43f aefa 	beq.w	e436 <_printf_float+0xb6>
    e642:	f109 0901 	add.w	r9, r9, #1
    e646:	e7ee      	b.n	e626 <_printf_float+0x2a6>
    e648:	7fefffff 	.word	0x7fefffff
    e64c:	00014d37 	.word	0x00014d37
    e650:	00013d0e 	.word	0x00013d0e
    e654:	00014d3f 	.word	0x00014d3f
    e658:	00014d3b 	.word	0x00014d3b
    e65c:	000147e8 	.word	0x000147e8
    e660:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e662:	6da3      	ldr	r3, [r4, #88]	; 0x58
    e664:	429a      	cmp	r2, r3
    e666:	bfa8      	it	ge
    e668:	461a      	movge	r2, r3
    e66a:	2a00      	cmp	r2, #0
    e66c:	4691      	mov	r9, r2
    e66e:	dc37      	bgt.n	e6e0 <_printf_float+0x360>
    e670:	f04f 0b00 	mov.w	fp, #0
    e674:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
    e678:	f104 021a 	add.w	r2, r4, #26
    e67c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
    e680:	ebaa 0309 	sub.w	r3, sl, r9
    e684:	455b      	cmp	r3, fp
    e686:	dc33      	bgt.n	e6f0 <_printf_float+0x370>
    e688:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    e68c:	429a      	cmp	r2, r3
    e68e:	db3b      	blt.n	e708 <_printf_float+0x388>
    e690:	6823      	ldr	r3, [r4, #0]
    e692:	07da      	lsls	r2, r3, #31
    e694:	d438      	bmi.n	e708 <_printf_float+0x388>
    e696:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e698:	990d      	ldr	r1, [sp, #52]	; 0x34
    e69a:	eba2 030a 	sub.w	r3, r2, sl
    e69e:	eba2 0901 	sub.w	r9, r2, r1
    e6a2:	4599      	cmp	r9, r3
    e6a4:	bfa8      	it	ge
    e6a6:	4699      	movge	r9, r3
    e6a8:	f1b9 0f00 	cmp.w	r9, #0
    e6ac:	dc34      	bgt.n	e718 <_printf_float+0x398>
    e6ae:	f04f 0800 	mov.w	r8, #0
    e6b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
    e6b6:	f104 0a1a 	add.w	sl, r4, #26
    e6ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    e6be:	1a9b      	subs	r3, r3, r2
    e6c0:	eba3 0309 	sub.w	r3, r3, r9
    e6c4:	4543      	cmp	r3, r8
    e6c6:	f77f af7b 	ble.w	e5c0 <_printf_float+0x240>
    e6ca:	2301      	movs	r3, #1
    e6cc:	4652      	mov	r2, sl
    e6ce:	4631      	mov	r1, r6
    e6d0:	4628      	mov	r0, r5
    e6d2:	47b8      	blx	r7
    e6d4:	3001      	adds	r0, #1
    e6d6:	f43f aeae 	beq.w	e436 <_printf_float+0xb6>
    e6da:	f108 0801 	add.w	r8, r8, #1
    e6de:	e7ec      	b.n	e6ba <_printf_float+0x33a>
    e6e0:	4613      	mov	r3, r2
    e6e2:	4631      	mov	r1, r6
    e6e4:	4642      	mov	r2, r8
    e6e6:	4628      	mov	r0, r5
    e6e8:	47b8      	blx	r7
    e6ea:	3001      	adds	r0, #1
    e6ec:	d1c0      	bne.n	e670 <_printf_float+0x2f0>
    e6ee:	e6a2      	b.n	e436 <_printf_float+0xb6>
    e6f0:	2301      	movs	r3, #1
    e6f2:	4631      	mov	r1, r6
    e6f4:	4628      	mov	r0, r5
    e6f6:	920b      	str	r2, [sp, #44]	; 0x2c
    e6f8:	47b8      	blx	r7
    e6fa:	3001      	adds	r0, #1
    e6fc:	f43f ae9b 	beq.w	e436 <_printf_float+0xb6>
    e700:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e702:	f10b 0b01 	add.w	fp, fp, #1
    e706:	e7b9      	b.n	e67c <_printf_float+0x2fc>
    e708:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    e70c:	4631      	mov	r1, r6
    e70e:	4628      	mov	r0, r5
    e710:	47b8      	blx	r7
    e712:	3001      	adds	r0, #1
    e714:	d1bf      	bne.n	e696 <_printf_float+0x316>
    e716:	e68e      	b.n	e436 <_printf_float+0xb6>
    e718:	464b      	mov	r3, r9
    e71a:	eb08 020a 	add.w	r2, r8, sl
    e71e:	4631      	mov	r1, r6
    e720:	4628      	mov	r0, r5
    e722:	47b8      	blx	r7
    e724:	3001      	adds	r0, #1
    e726:	d1c2      	bne.n	e6ae <_printf_float+0x32e>
    e728:	e685      	b.n	e436 <_printf_float+0xb6>
    e72a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e72c:	2a01      	cmp	r2, #1
    e72e:	dc01      	bgt.n	e734 <_printf_float+0x3b4>
    e730:	07db      	lsls	r3, r3, #31
    e732:	d537      	bpl.n	e7a4 <_printf_float+0x424>
    e734:	2301      	movs	r3, #1
    e736:	4642      	mov	r2, r8
    e738:	4631      	mov	r1, r6
    e73a:	4628      	mov	r0, r5
    e73c:	47b8      	blx	r7
    e73e:	3001      	adds	r0, #1
    e740:	f43f ae79 	beq.w	e436 <_printf_float+0xb6>
    e744:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    e748:	4631      	mov	r1, r6
    e74a:	4628      	mov	r0, r5
    e74c:	47b8      	blx	r7
    e74e:	3001      	adds	r0, #1
    e750:	f43f ae71 	beq.w	e436 <_printf_float+0xb6>
    e754:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    e758:	2200      	movs	r2, #0
    e75a:	2300      	movs	r3, #0
    e75c:	f7f2 f934 	bl	9c8 <__aeabi_dcmpeq>
    e760:	b9d8      	cbnz	r0, e79a <_printf_float+0x41a>
    e762:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e764:	f108 0201 	add.w	r2, r8, #1
    e768:	3b01      	subs	r3, #1
    e76a:	4631      	mov	r1, r6
    e76c:	4628      	mov	r0, r5
    e76e:	47b8      	blx	r7
    e770:	3001      	adds	r0, #1
    e772:	d10e      	bne.n	e792 <_printf_float+0x412>
    e774:	e65f      	b.n	e436 <_printf_float+0xb6>
    e776:	2301      	movs	r3, #1
    e778:	464a      	mov	r2, r9
    e77a:	4631      	mov	r1, r6
    e77c:	4628      	mov	r0, r5
    e77e:	47b8      	blx	r7
    e780:	3001      	adds	r0, #1
    e782:	f43f ae58 	beq.w	e436 <_printf_float+0xb6>
    e786:	f108 0801 	add.w	r8, r8, #1
    e78a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e78c:	3b01      	subs	r3, #1
    e78e:	4543      	cmp	r3, r8
    e790:	dcf1      	bgt.n	e776 <_printf_float+0x3f6>
    e792:	4653      	mov	r3, sl
    e794:	f104 0250 	add.w	r2, r4, #80	; 0x50
    e798:	e6e1      	b.n	e55e <_printf_float+0x1de>
    e79a:	f04f 0800 	mov.w	r8, #0
    e79e:	f104 091a 	add.w	r9, r4, #26
    e7a2:	e7f2      	b.n	e78a <_printf_float+0x40a>
    e7a4:	2301      	movs	r3, #1
    e7a6:	4642      	mov	r2, r8
    e7a8:	e7df      	b.n	e76a <_printf_float+0x3ea>
    e7aa:	2301      	movs	r3, #1
    e7ac:	464a      	mov	r2, r9
    e7ae:	4631      	mov	r1, r6
    e7b0:	4628      	mov	r0, r5
    e7b2:	47b8      	blx	r7
    e7b4:	3001      	adds	r0, #1
    e7b6:	f43f ae3e 	beq.w	e436 <_printf_float+0xb6>
    e7ba:	f108 0801 	add.w	r8, r8, #1
    e7be:	68e3      	ldr	r3, [r4, #12]
    e7c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e7c2:	1a5b      	subs	r3, r3, r1
    e7c4:	4543      	cmp	r3, r8
    e7c6:	dcf0      	bgt.n	e7aa <_printf_float+0x42a>
    e7c8:	e6fe      	b.n	e5c8 <_printf_float+0x248>
    e7ca:	f04f 0800 	mov.w	r8, #0
    e7ce:	f104 0919 	add.w	r9, r4, #25
    e7d2:	e7f4      	b.n	e7be <_printf_float+0x43e>

0000e7d4 <_printf_i>:
    e7d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    e7d8:	460c      	mov	r4, r1
    e7da:	4691      	mov	r9, r2
    e7dc:	7e27      	ldrb	r7, [r4, #24]
    e7de:	990c      	ldr	r1, [sp, #48]	; 0x30
    e7e0:	2f78      	cmp	r7, #120	; 0x78
    e7e2:	4680      	mov	r8, r0
    e7e4:	469a      	mov	sl, r3
    e7e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
    e7ea:	d807      	bhi.n	e7fc <_printf_i+0x28>
    e7ec:	2f62      	cmp	r7, #98	; 0x62
    e7ee:	d80a      	bhi.n	e806 <_printf_i+0x32>
    e7f0:	2f00      	cmp	r7, #0
    e7f2:	f000 80d8 	beq.w	e9a6 <_printf_i+0x1d2>
    e7f6:	2f58      	cmp	r7, #88	; 0x58
    e7f8:	f000 80a3 	beq.w	e942 <_printf_i+0x16e>
    e7fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
    e800:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    e804:	e03a      	b.n	e87c <_printf_i+0xa8>
    e806:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
    e80a:	2b15      	cmp	r3, #21
    e80c:	d8f6      	bhi.n	e7fc <_printf_i+0x28>
    e80e:	a001      	add	r0, pc, #4	; (adr r0, e814 <_printf_i+0x40>)
    e810:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    e814:	0000e86d 	.word	0x0000e86d
    e818:	0000e881 	.word	0x0000e881
    e81c:	0000e7fd 	.word	0x0000e7fd
    e820:	0000e7fd 	.word	0x0000e7fd
    e824:	0000e7fd 	.word	0x0000e7fd
    e828:	0000e7fd 	.word	0x0000e7fd
    e82c:	0000e881 	.word	0x0000e881
    e830:	0000e7fd 	.word	0x0000e7fd
    e834:	0000e7fd 	.word	0x0000e7fd
    e838:	0000e7fd 	.word	0x0000e7fd
    e83c:	0000e7fd 	.word	0x0000e7fd
    e840:	0000e98d 	.word	0x0000e98d
    e844:	0000e8b1 	.word	0x0000e8b1
    e848:	0000e96f 	.word	0x0000e96f
    e84c:	0000e7fd 	.word	0x0000e7fd
    e850:	0000e7fd 	.word	0x0000e7fd
    e854:	0000e9af 	.word	0x0000e9af
    e858:	0000e7fd 	.word	0x0000e7fd
    e85c:	0000e8b1 	.word	0x0000e8b1
    e860:	0000e7fd 	.word	0x0000e7fd
    e864:	0000e7fd 	.word	0x0000e7fd
    e868:	0000e977 	.word	0x0000e977
    e86c:	680b      	ldr	r3, [r1, #0]
    e86e:	1d1a      	adds	r2, r3, #4
    e870:	681b      	ldr	r3, [r3, #0]
    e872:	600a      	str	r2, [r1, #0]
    e874:	f104 0642 	add.w	r6, r4, #66	; 0x42
    e878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    e87c:	2301      	movs	r3, #1
    e87e:	e0a3      	b.n	e9c8 <_printf_i+0x1f4>
    e880:	6825      	ldr	r5, [r4, #0]
    e882:	6808      	ldr	r0, [r1, #0]
    e884:	062e      	lsls	r6, r5, #24
    e886:	f100 0304 	add.w	r3, r0, #4
    e88a:	d50a      	bpl.n	e8a2 <_printf_i+0xce>
    e88c:	6805      	ldr	r5, [r0, #0]
    e88e:	600b      	str	r3, [r1, #0]
    e890:	2d00      	cmp	r5, #0
    e892:	da03      	bge.n	e89c <_printf_i+0xc8>
    e894:	232d      	movs	r3, #45	; 0x2d
    e896:	426d      	negs	r5, r5
    e898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    e89c:	485e      	ldr	r0, [pc, #376]	; (ea18 <_printf_i+0x244>)
    e89e:	230a      	movs	r3, #10
    e8a0:	e019      	b.n	e8d6 <_printf_i+0x102>
    e8a2:	f015 0f40 	tst.w	r5, #64	; 0x40
    e8a6:	6805      	ldr	r5, [r0, #0]
    e8a8:	600b      	str	r3, [r1, #0]
    e8aa:	bf18      	it	ne
    e8ac:	b22d      	sxthne	r5, r5
    e8ae:	e7ef      	b.n	e890 <_printf_i+0xbc>
    e8b0:	680b      	ldr	r3, [r1, #0]
    e8b2:	6825      	ldr	r5, [r4, #0]
    e8b4:	1d18      	adds	r0, r3, #4
    e8b6:	6008      	str	r0, [r1, #0]
    e8b8:	0628      	lsls	r0, r5, #24
    e8ba:	d501      	bpl.n	e8c0 <_printf_i+0xec>
    e8bc:	681d      	ldr	r5, [r3, #0]
    e8be:	e002      	b.n	e8c6 <_printf_i+0xf2>
    e8c0:	0669      	lsls	r1, r5, #25
    e8c2:	d5fb      	bpl.n	e8bc <_printf_i+0xe8>
    e8c4:	881d      	ldrh	r5, [r3, #0]
    e8c6:	4854      	ldr	r0, [pc, #336]	; (ea18 <_printf_i+0x244>)
    e8c8:	2f6f      	cmp	r7, #111	; 0x6f
    e8ca:	bf0c      	ite	eq
    e8cc:	2308      	moveq	r3, #8
    e8ce:	230a      	movne	r3, #10
    e8d0:	2100      	movs	r1, #0
    e8d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    e8d6:	6866      	ldr	r6, [r4, #4]
    e8d8:	60a6      	str	r6, [r4, #8]
    e8da:	2e00      	cmp	r6, #0
    e8dc:	bfa2      	ittt	ge
    e8de:	6821      	ldrge	r1, [r4, #0]
    e8e0:	f021 0104 	bicge.w	r1, r1, #4
    e8e4:	6021      	strge	r1, [r4, #0]
    e8e6:	b90d      	cbnz	r5, e8ec <_printf_i+0x118>
    e8e8:	2e00      	cmp	r6, #0
    e8ea:	d04d      	beq.n	e988 <_printf_i+0x1b4>
    e8ec:	4616      	mov	r6, r2
    e8ee:	fbb5 f1f3 	udiv	r1, r5, r3
    e8f2:	fb03 5711 	mls	r7, r3, r1, r5
    e8f6:	5dc7      	ldrb	r7, [r0, r7]
    e8f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
    e8fc:	462f      	mov	r7, r5
    e8fe:	42bb      	cmp	r3, r7
    e900:	460d      	mov	r5, r1
    e902:	d9f4      	bls.n	e8ee <_printf_i+0x11a>
    e904:	2b08      	cmp	r3, #8
    e906:	d10b      	bne.n	e920 <_printf_i+0x14c>
    e908:	6823      	ldr	r3, [r4, #0]
    e90a:	07df      	lsls	r7, r3, #31
    e90c:	d508      	bpl.n	e920 <_printf_i+0x14c>
    e90e:	6923      	ldr	r3, [r4, #16]
    e910:	6861      	ldr	r1, [r4, #4]
    e912:	4299      	cmp	r1, r3
    e914:	bfde      	ittt	le
    e916:	2330      	movle	r3, #48	; 0x30
    e918:	f806 3c01 	strble.w	r3, [r6, #-1]
    e91c:	f106 36ff 	addle.w	r6, r6, #4294967295
    e920:	1b92      	subs	r2, r2, r6
    e922:	6122      	str	r2, [r4, #16]
    e924:	f8cd a000 	str.w	sl, [sp]
    e928:	464b      	mov	r3, r9
    e92a:	aa03      	add	r2, sp, #12
    e92c:	4621      	mov	r1, r4
    e92e:	4640      	mov	r0, r8
    e930:	f003 fd8e 	bl	12450 <_printf_common>
    e934:	3001      	adds	r0, #1
    e936:	d14c      	bne.n	e9d2 <_printf_i+0x1fe>
    e938:	f04f 30ff 	mov.w	r0, #4294967295
    e93c:	b004      	add	sp, #16
    e93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e942:	4835      	ldr	r0, [pc, #212]	; (ea18 <_printf_i+0x244>)
    e944:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
    e948:	6823      	ldr	r3, [r4, #0]
    e94a:	680e      	ldr	r6, [r1, #0]
    e94c:	061f      	lsls	r7, r3, #24
    e94e:	f856 5b04 	ldr.w	r5, [r6], #4
    e952:	600e      	str	r6, [r1, #0]
    e954:	d514      	bpl.n	e980 <_printf_i+0x1ac>
    e956:	07d9      	lsls	r1, r3, #31
    e958:	bf44      	itt	mi
    e95a:	f043 0320 	orrmi.w	r3, r3, #32
    e95e:	6023      	strmi	r3, [r4, #0]
    e960:	b91d      	cbnz	r5, e96a <_printf_i+0x196>
    e962:	6823      	ldr	r3, [r4, #0]
    e964:	f023 0320 	bic.w	r3, r3, #32
    e968:	6023      	str	r3, [r4, #0]
    e96a:	2310      	movs	r3, #16
    e96c:	e7b0      	b.n	e8d0 <_printf_i+0xfc>
    e96e:	6823      	ldr	r3, [r4, #0]
    e970:	f043 0320 	orr.w	r3, r3, #32
    e974:	6023      	str	r3, [r4, #0]
    e976:	2378      	movs	r3, #120	; 0x78
    e978:	4828      	ldr	r0, [pc, #160]	; (ea1c <_printf_i+0x248>)
    e97a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    e97e:	e7e3      	b.n	e948 <_printf_i+0x174>
    e980:	065e      	lsls	r6, r3, #25
    e982:	bf48      	it	mi
    e984:	b2ad      	uxthmi	r5, r5
    e986:	e7e6      	b.n	e956 <_printf_i+0x182>
    e988:	4616      	mov	r6, r2
    e98a:	e7bb      	b.n	e904 <_printf_i+0x130>
    e98c:	680b      	ldr	r3, [r1, #0]
    e98e:	6826      	ldr	r6, [r4, #0]
    e990:	6960      	ldr	r0, [r4, #20]
    e992:	1d1d      	adds	r5, r3, #4
    e994:	600d      	str	r5, [r1, #0]
    e996:	0635      	lsls	r5, r6, #24
    e998:	681b      	ldr	r3, [r3, #0]
    e99a:	d501      	bpl.n	e9a0 <_printf_i+0x1cc>
    e99c:	6018      	str	r0, [r3, #0]
    e99e:	e002      	b.n	e9a6 <_printf_i+0x1d2>
    e9a0:	0671      	lsls	r1, r6, #25
    e9a2:	d5fb      	bpl.n	e99c <_printf_i+0x1c8>
    e9a4:	8018      	strh	r0, [r3, #0]
    e9a6:	2300      	movs	r3, #0
    e9a8:	6123      	str	r3, [r4, #16]
    e9aa:	4616      	mov	r6, r2
    e9ac:	e7ba      	b.n	e924 <_printf_i+0x150>
    e9ae:	680b      	ldr	r3, [r1, #0]
    e9b0:	1d1a      	adds	r2, r3, #4
    e9b2:	600a      	str	r2, [r1, #0]
    e9b4:	681e      	ldr	r6, [r3, #0]
    e9b6:	6862      	ldr	r2, [r4, #4]
    e9b8:	2100      	movs	r1, #0
    e9ba:	4630      	mov	r0, r6
    e9bc:	f7f1 fb90 	bl	e0 <memchr>
    e9c0:	b108      	cbz	r0, e9c6 <_printf_i+0x1f2>
    e9c2:	1b80      	subs	r0, r0, r6
    e9c4:	6060      	str	r0, [r4, #4]
    e9c6:	6863      	ldr	r3, [r4, #4]
    e9c8:	6123      	str	r3, [r4, #16]
    e9ca:	2300      	movs	r3, #0
    e9cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    e9d0:	e7a8      	b.n	e924 <_printf_i+0x150>
    e9d2:	6923      	ldr	r3, [r4, #16]
    e9d4:	4632      	mov	r2, r6
    e9d6:	4649      	mov	r1, r9
    e9d8:	4640      	mov	r0, r8
    e9da:	47d0      	blx	sl
    e9dc:	3001      	adds	r0, #1
    e9de:	d0ab      	beq.n	e938 <_printf_i+0x164>
    e9e0:	6823      	ldr	r3, [r4, #0]
    e9e2:	079b      	lsls	r3, r3, #30
    e9e4:	d413      	bmi.n	ea0e <_printf_i+0x23a>
    e9e6:	68e0      	ldr	r0, [r4, #12]
    e9e8:	9b03      	ldr	r3, [sp, #12]
    e9ea:	4298      	cmp	r0, r3
    e9ec:	bfb8      	it	lt
    e9ee:	4618      	movlt	r0, r3
    e9f0:	e7a4      	b.n	e93c <_printf_i+0x168>
    e9f2:	2301      	movs	r3, #1
    e9f4:	4632      	mov	r2, r6
    e9f6:	4649      	mov	r1, r9
    e9f8:	4640      	mov	r0, r8
    e9fa:	47d0      	blx	sl
    e9fc:	3001      	adds	r0, #1
    e9fe:	d09b      	beq.n	e938 <_printf_i+0x164>
    ea00:	3501      	adds	r5, #1
    ea02:	68e3      	ldr	r3, [r4, #12]
    ea04:	9903      	ldr	r1, [sp, #12]
    ea06:	1a5b      	subs	r3, r3, r1
    ea08:	42ab      	cmp	r3, r5
    ea0a:	dcf2      	bgt.n	e9f2 <_printf_i+0x21e>
    ea0c:	e7eb      	b.n	e9e6 <_printf_i+0x212>
    ea0e:	2500      	movs	r5, #0
    ea10:	f104 0619 	add.w	r6, r4, #25
    ea14:	e7f5      	b.n	ea02 <_printf_i+0x22e>
    ea16:	bf00      	nop
    ea18:	00014d43 	.word	0x00014d43
    ea1c:	00014d54 	.word	0x00014d54

0000ea20 <_sbrk_r>:
    ea20:	b538      	push	{r3, r4, r5, lr}
    ea22:	4d06      	ldr	r5, [pc, #24]	; (ea3c <_sbrk_r+0x1c>)
    ea24:	2300      	movs	r3, #0
    ea26:	4604      	mov	r4, r0
    ea28:	4608      	mov	r0, r1
    ea2a:	602b      	str	r3, [r5, #0]
    ea2c:	f7f7 fd0a 	bl	6444 <_sbrk>
    ea30:	1c43      	adds	r3, r0, #1
    ea32:	d102      	bne.n	ea3a <_sbrk_r+0x1a>
    ea34:	682b      	ldr	r3, [r5, #0]
    ea36:	b103      	cbz	r3, ea3a <_sbrk_r+0x1a>
    ea38:	6023      	str	r3, [r4, #0]
    ea3a:	bd38      	pop	{r3, r4, r5, pc}
    ea3c:	2000160c 	.word	0x2000160c

0000ea40 <sniprintf>:
    ea40:	b40c      	push	{r2, r3}
    ea42:	b530      	push	{r4, r5, lr}
    ea44:	4b17      	ldr	r3, [pc, #92]	; (eaa4 <sniprintf+0x64>)
    ea46:	1e0c      	subs	r4, r1, #0
    ea48:	681d      	ldr	r5, [r3, #0]
    ea4a:	b09d      	sub	sp, #116	; 0x74
    ea4c:	da08      	bge.n	ea60 <sniprintf+0x20>
    ea4e:	238b      	movs	r3, #139	; 0x8b
    ea50:	602b      	str	r3, [r5, #0]
    ea52:	f04f 30ff 	mov.w	r0, #4294967295
    ea56:	b01d      	add	sp, #116	; 0x74
    ea58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ea5c:	b002      	add	sp, #8
    ea5e:	4770      	bx	lr
    ea60:	f44f 7302 	mov.w	r3, #520	; 0x208
    ea64:	f8ad 3014 	strh.w	r3, [sp, #20]
    ea68:	bf14      	ite	ne
    ea6a:	f104 33ff 	addne.w	r3, r4, #4294967295
    ea6e:	4623      	moveq	r3, r4
    ea70:	9304      	str	r3, [sp, #16]
    ea72:	9307      	str	r3, [sp, #28]
    ea74:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ea78:	9002      	str	r0, [sp, #8]
    ea7a:	9006      	str	r0, [sp, #24]
    ea7c:	f8ad 3016 	strh.w	r3, [sp, #22]
    ea80:	9a20      	ldr	r2, [sp, #128]	; 0x80
    ea82:	ab21      	add	r3, sp, #132	; 0x84
    ea84:	a902      	add	r1, sp, #8
    ea86:	4628      	mov	r0, r5
    ea88:	9301      	str	r3, [sp, #4]
    ea8a:	f000 f899 	bl	ebc0 <_svfiprintf_r>
    ea8e:	1c43      	adds	r3, r0, #1
    ea90:	bfbc      	itt	lt
    ea92:	238b      	movlt	r3, #139	; 0x8b
    ea94:	602b      	strlt	r3, [r5, #0]
    ea96:	2c00      	cmp	r4, #0
    ea98:	d0dd      	beq.n	ea56 <sniprintf+0x16>
    ea9a:	9b02      	ldr	r3, [sp, #8]
    ea9c:	2200      	movs	r2, #0
    ea9e:	701a      	strb	r2, [r3, #0]
    eaa0:	e7d9      	b.n	ea56 <sniprintf+0x16>
    eaa2:	bf00      	nop
    eaa4:	2000018c 	.word	0x2000018c

0000eaa8 <vsniprintf>:
    eaa8:	b507      	push	{r0, r1, r2, lr}
    eaaa:	9300      	str	r3, [sp, #0]
    eaac:	4613      	mov	r3, r2
    eaae:	460a      	mov	r2, r1
    eab0:	4601      	mov	r1, r0
    eab2:	4803      	ldr	r0, [pc, #12]	; (eac0 <vsniprintf+0x18>)
    eab4:	6800      	ldr	r0, [r0, #0]
    eab6:	f003 fd99 	bl	125ec <_vsniprintf_r>
    eaba:	b003      	add	sp, #12
    eabc:	f85d fb04 	ldr.w	pc, [sp], #4
    eac0:	2000018c 	.word	0x2000018c

0000eac4 <_vsiprintf_r>:
    eac4:	b500      	push	{lr}
    eac6:	b09b      	sub	sp, #108	; 0x6c
    eac8:	9100      	str	r1, [sp, #0]
    eaca:	9104      	str	r1, [sp, #16]
    eacc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ead0:	9105      	str	r1, [sp, #20]
    ead2:	9102      	str	r1, [sp, #8]
    ead4:	4905      	ldr	r1, [pc, #20]	; (eaec <_vsiprintf_r+0x28>)
    ead6:	9103      	str	r1, [sp, #12]
    ead8:	4669      	mov	r1, sp
    eada:	f000 f871 	bl	ebc0 <_svfiprintf_r>
    eade:	9b00      	ldr	r3, [sp, #0]
    eae0:	2200      	movs	r2, #0
    eae2:	701a      	strb	r2, [r3, #0]
    eae4:	b01b      	add	sp, #108	; 0x6c
    eae6:	f85d fb04 	ldr.w	pc, [sp], #4
    eaea:	bf00      	nop
    eaec:	ffff0208 	.word	0xffff0208

0000eaf0 <vsiprintf>:
    eaf0:	4613      	mov	r3, r2
    eaf2:	460a      	mov	r2, r1
    eaf4:	4601      	mov	r1, r0
    eaf6:	4802      	ldr	r0, [pc, #8]	; (eb00 <vsiprintf+0x10>)
    eaf8:	6800      	ldr	r0, [r0, #0]
    eafa:	f7ff bfe3 	b.w	eac4 <_vsiprintf_r>
    eafe:	bf00      	nop
    eb00:	2000018c 	.word	0x2000018c

0000eb04 <_localeconv_r>:
    eb04:	4800      	ldr	r0, [pc, #0]	; (eb08 <_localeconv_r+0x4>)
    eb06:	4770      	bx	lr
    eb08:	200002e0 	.word	0x200002e0

0000eb0c <__malloc_lock>:
    eb0c:	4801      	ldr	r0, [pc, #4]	; (eb14 <__malloc_lock+0x8>)
    eb0e:	f7f7 bcad 	b.w	646c <__retarget_lock_acquire_recursive>
    eb12:	bf00      	nop
    eb14:	200003b4 	.word	0x200003b4

0000eb18 <__malloc_unlock>:
    eb18:	4801      	ldr	r0, [pc, #4]	; (eb20 <__malloc_unlock+0x8>)
    eb1a:	f7f7 bcc3 	b.w	64a4 <__retarget_lock_release_recursive>
    eb1e:	bf00      	nop
    eb20:	200003b4 	.word	0x200003b4

0000eb24 <__pow5mult>:
    eb24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    eb28:	4615      	mov	r5, r2
    eb2a:	f012 0203 	ands.w	r2, r2, #3
    eb2e:	4606      	mov	r6, r0
    eb30:	460f      	mov	r7, r1
    eb32:	d007      	beq.n	eb44 <__pow5mult+0x20>
    eb34:	4c21      	ldr	r4, [pc, #132]	; (ebbc <__pow5mult+0x98>)
    eb36:	3a01      	subs	r2, #1
    eb38:	2300      	movs	r3, #0
    eb3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    eb3e:	f003 fe57 	bl	127f0 <__multadd>
    eb42:	4607      	mov	r7, r0
    eb44:	10ad      	asrs	r5, r5, #2
    eb46:	d035      	beq.n	ebb4 <__pow5mult+0x90>
    eb48:	6a74      	ldr	r4, [r6, #36]	; 0x24
    eb4a:	b93c      	cbnz	r4, eb5c <__pow5mult+0x38>
    eb4c:	2010      	movs	r0, #16
    eb4e:	f7ff fb67 	bl	e220 <malloc>
    eb52:	e9c0 4401 	strd	r4, r4, [r0, #4]
    eb56:	6270      	str	r0, [r6, #36]	; 0x24
    eb58:	6004      	str	r4, [r0, #0]
    eb5a:	60c4      	str	r4, [r0, #12]
    eb5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    eb60:	f8d8 4008 	ldr.w	r4, [r8, #8]
    eb64:	b94c      	cbnz	r4, eb7a <__pow5mult+0x56>
    eb66:	f240 2171 	movw	r1, #625	; 0x271
    eb6a:	4630      	mov	r0, r6
    eb6c:	f003 fecc 	bl	12908 <__i2b>
    eb70:	2300      	movs	r3, #0
    eb72:	f8c8 0008 	str.w	r0, [r8, #8]
    eb76:	4604      	mov	r4, r0
    eb78:	6003      	str	r3, [r0, #0]
    eb7a:	f04f 0900 	mov.w	r9, #0
    eb7e:	07eb      	lsls	r3, r5, #31
    eb80:	d50a      	bpl.n	eb98 <__pow5mult+0x74>
    eb82:	4639      	mov	r1, r7
    eb84:	4622      	mov	r2, r4
    eb86:	4630      	mov	r0, r6
    eb88:	f003 fec7 	bl	1291a <__multiply>
    eb8c:	4639      	mov	r1, r7
    eb8e:	4680      	mov	r8, r0
    eb90:	4630      	mov	r0, r6
    eb92:	f003 fe16 	bl	127c2 <_Bfree>
    eb96:	4647      	mov	r7, r8
    eb98:	106d      	asrs	r5, r5, #1
    eb9a:	d00b      	beq.n	ebb4 <__pow5mult+0x90>
    eb9c:	6820      	ldr	r0, [r4, #0]
    eb9e:	b938      	cbnz	r0, ebb0 <__pow5mult+0x8c>
    eba0:	4622      	mov	r2, r4
    eba2:	4621      	mov	r1, r4
    eba4:	4630      	mov	r0, r6
    eba6:	f003 feb8 	bl	1291a <__multiply>
    ebaa:	6020      	str	r0, [r4, #0]
    ebac:	f8c0 9000 	str.w	r9, [r0]
    ebb0:	4604      	mov	r4, r0
    ebb2:	e7e4      	b.n	eb7e <__pow5mult+0x5a>
    ebb4:	4638      	mov	r0, r7
    ebb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ebba:	bf00      	nop
    ebbc:	00013504 	.word	0x00013504

0000ebc0 <_svfiprintf_r>:
    ebc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ebc4:	4698      	mov	r8, r3
    ebc6:	898b      	ldrh	r3, [r1, #12]
    ebc8:	061b      	lsls	r3, r3, #24
    ebca:	b09d      	sub	sp, #116	; 0x74
    ebcc:	4607      	mov	r7, r0
    ebce:	460d      	mov	r5, r1
    ebd0:	4614      	mov	r4, r2
    ebd2:	d50e      	bpl.n	ebf2 <_svfiprintf_r+0x32>
    ebd4:	690b      	ldr	r3, [r1, #16]
    ebd6:	b963      	cbnz	r3, ebf2 <_svfiprintf_r+0x32>
    ebd8:	2140      	movs	r1, #64	; 0x40
    ebda:	f7ff fb77 	bl	e2cc <_malloc_r>
    ebde:	6028      	str	r0, [r5, #0]
    ebe0:	6128      	str	r0, [r5, #16]
    ebe2:	b920      	cbnz	r0, ebee <_svfiprintf_r+0x2e>
    ebe4:	230c      	movs	r3, #12
    ebe6:	603b      	str	r3, [r7, #0]
    ebe8:	f04f 30ff 	mov.w	r0, #4294967295
    ebec:	e0d1      	b.n	ed92 <_svfiprintf_r+0x1d2>
    ebee:	2340      	movs	r3, #64	; 0x40
    ebf0:	616b      	str	r3, [r5, #20]
    ebf2:	2300      	movs	r3, #0
    ebf4:	9309      	str	r3, [sp, #36]	; 0x24
    ebf6:	2320      	movs	r3, #32
    ebf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    ebfc:	f8cd 800c 	str.w	r8, [sp, #12]
    ec00:	2330      	movs	r3, #48	; 0x30
    ec02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; edac <_svfiprintf_r+0x1ec>
    ec06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    ec0a:	f04f 0901 	mov.w	r9, #1
    ec0e:	4623      	mov	r3, r4
    ec10:	469a      	mov	sl, r3
    ec12:	f813 2b01 	ldrb.w	r2, [r3], #1
    ec16:	b10a      	cbz	r2, ec1c <_svfiprintf_r+0x5c>
    ec18:	2a25      	cmp	r2, #37	; 0x25
    ec1a:	d1f9      	bne.n	ec10 <_svfiprintf_r+0x50>
    ec1c:	ebba 0b04 	subs.w	fp, sl, r4
    ec20:	d00b      	beq.n	ec3a <_svfiprintf_r+0x7a>
    ec22:	465b      	mov	r3, fp
    ec24:	4622      	mov	r2, r4
    ec26:	4629      	mov	r1, r5
    ec28:	4638      	mov	r0, r7
    ec2a:	f004 f85f 	bl	12cec <__ssputs_r>
    ec2e:	3001      	adds	r0, #1
    ec30:	f000 80aa 	beq.w	ed88 <_svfiprintf_r+0x1c8>
    ec34:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ec36:	445a      	add	r2, fp
    ec38:	9209      	str	r2, [sp, #36]	; 0x24
    ec3a:	f89a 3000 	ldrb.w	r3, [sl]
    ec3e:	2b00      	cmp	r3, #0
    ec40:	f000 80a2 	beq.w	ed88 <_svfiprintf_r+0x1c8>
    ec44:	2300      	movs	r3, #0
    ec46:	f04f 32ff 	mov.w	r2, #4294967295
    ec4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
    ec4e:	f10a 0a01 	add.w	sl, sl, #1
    ec52:	9304      	str	r3, [sp, #16]
    ec54:	9307      	str	r3, [sp, #28]
    ec56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    ec5a:	931a      	str	r3, [sp, #104]	; 0x68
    ec5c:	4654      	mov	r4, sl
    ec5e:	2205      	movs	r2, #5
    ec60:	f814 1b01 	ldrb.w	r1, [r4], #1
    ec64:	4851      	ldr	r0, [pc, #324]	; (edac <_svfiprintf_r+0x1ec>)
    ec66:	f7f1 fa3b 	bl	e0 <memchr>
    ec6a:	9a04      	ldr	r2, [sp, #16]
    ec6c:	b9d8      	cbnz	r0, eca6 <_svfiprintf_r+0xe6>
    ec6e:	06d0      	lsls	r0, r2, #27
    ec70:	bf44      	itt	mi
    ec72:	2320      	movmi	r3, #32
    ec74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    ec78:	0711      	lsls	r1, r2, #28
    ec7a:	bf44      	itt	mi
    ec7c:	232b      	movmi	r3, #43	; 0x2b
    ec7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    ec82:	f89a 3000 	ldrb.w	r3, [sl]
    ec86:	2b2a      	cmp	r3, #42	; 0x2a
    ec88:	d015      	beq.n	ecb6 <_svfiprintf_r+0xf6>
    ec8a:	9a07      	ldr	r2, [sp, #28]
    ec8c:	4654      	mov	r4, sl
    ec8e:	2000      	movs	r0, #0
    ec90:	f04f 0c0a 	mov.w	ip, #10
    ec94:	4621      	mov	r1, r4
    ec96:	f811 3b01 	ldrb.w	r3, [r1], #1
    ec9a:	3b30      	subs	r3, #48	; 0x30
    ec9c:	2b09      	cmp	r3, #9
    ec9e:	d94e      	bls.n	ed3e <_svfiprintf_r+0x17e>
    eca0:	b1b0      	cbz	r0, ecd0 <_svfiprintf_r+0x110>
    eca2:	9207      	str	r2, [sp, #28]
    eca4:	e014      	b.n	ecd0 <_svfiprintf_r+0x110>
    eca6:	eba0 0308 	sub.w	r3, r0, r8
    ecaa:	fa09 f303 	lsl.w	r3, r9, r3
    ecae:	4313      	orrs	r3, r2
    ecb0:	9304      	str	r3, [sp, #16]
    ecb2:	46a2      	mov	sl, r4
    ecb4:	e7d2      	b.n	ec5c <_svfiprintf_r+0x9c>
    ecb6:	9b03      	ldr	r3, [sp, #12]
    ecb8:	1d19      	adds	r1, r3, #4
    ecba:	681b      	ldr	r3, [r3, #0]
    ecbc:	9103      	str	r1, [sp, #12]
    ecbe:	2b00      	cmp	r3, #0
    ecc0:	bfbb      	ittet	lt
    ecc2:	425b      	neglt	r3, r3
    ecc4:	f042 0202 	orrlt.w	r2, r2, #2
    ecc8:	9307      	strge	r3, [sp, #28]
    ecca:	9307      	strlt	r3, [sp, #28]
    eccc:	bfb8      	it	lt
    ecce:	9204      	strlt	r2, [sp, #16]
    ecd0:	7823      	ldrb	r3, [r4, #0]
    ecd2:	2b2e      	cmp	r3, #46	; 0x2e
    ecd4:	d10c      	bne.n	ecf0 <_svfiprintf_r+0x130>
    ecd6:	7863      	ldrb	r3, [r4, #1]
    ecd8:	2b2a      	cmp	r3, #42	; 0x2a
    ecda:	d135      	bne.n	ed48 <_svfiprintf_r+0x188>
    ecdc:	9b03      	ldr	r3, [sp, #12]
    ecde:	1d1a      	adds	r2, r3, #4
    ece0:	681b      	ldr	r3, [r3, #0]
    ece2:	9203      	str	r2, [sp, #12]
    ece4:	2b00      	cmp	r3, #0
    ece6:	bfb8      	it	lt
    ece8:	f04f 33ff 	movlt.w	r3, #4294967295
    ecec:	3402      	adds	r4, #2
    ecee:	9305      	str	r3, [sp, #20]
    ecf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; edbc <_svfiprintf_r+0x1fc>
    ecf4:	7821      	ldrb	r1, [r4, #0]
    ecf6:	2203      	movs	r2, #3
    ecf8:	4650      	mov	r0, sl
    ecfa:	f7f1 f9f1 	bl	e0 <memchr>
    ecfe:	b140      	cbz	r0, ed12 <_svfiprintf_r+0x152>
    ed00:	2340      	movs	r3, #64	; 0x40
    ed02:	eba0 000a 	sub.w	r0, r0, sl
    ed06:	fa03 f000 	lsl.w	r0, r3, r0
    ed0a:	9b04      	ldr	r3, [sp, #16]
    ed0c:	4303      	orrs	r3, r0
    ed0e:	3401      	adds	r4, #1
    ed10:	9304      	str	r3, [sp, #16]
    ed12:	f814 1b01 	ldrb.w	r1, [r4], #1
    ed16:	4826      	ldr	r0, [pc, #152]	; (edb0 <_svfiprintf_r+0x1f0>)
    ed18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    ed1c:	2206      	movs	r2, #6
    ed1e:	f7f1 f9df 	bl	e0 <memchr>
    ed22:	2800      	cmp	r0, #0
    ed24:	d038      	beq.n	ed98 <_svfiprintf_r+0x1d8>
    ed26:	4b23      	ldr	r3, [pc, #140]	; (edb4 <_svfiprintf_r+0x1f4>)
    ed28:	bb1b      	cbnz	r3, ed72 <_svfiprintf_r+0x1b2>
    ed2a:	9b03      	ldr	r3, [sp, #12]
    ed2c:	3307      	adds	r3, #7
    ed2e:	f023 0307 	bic.w	r3, r3, #7
    ed32:	3308      	adds	r3, #8
    ed34:	9303      	str	r3, [sp, #12]
    ed36:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ed38:	4433      	add	r3, r6
    ed3a:	9309      	str	r3, [sp, #36]	; 0x24
    ed3c:	e767      	b.n	ec0e <_svfiprintf_r+0x4e>
    ed3e:	fb0c 3202 	mla	r2, ip, r2, r3
    ed42:	460c      	mov	r4, r1
    ed44:	2001      	movs	r0, #1
    ed46:	e7a5      	b.n	ec94 <_svfiprintf_r+0xd4>
    ed48:	2300      	movs	r3, #0
    ed4a:	3401      	adds	r4, #1
    ed4c:	9305      	str	r3, [sp, #20]
    ed4e:	4619      	mov	r1, r3
    ed50:	f04f 0c0a 	mov.w	ip, #10
    ed54:	4620      	mov	r0, r4
    ed56:	f810 2b01 	ldrb.w	r2, [r0], #1
    ed5a:	3a30      	subs	r2, #48	; 0x30
    ed5c:	2a09      	cmp	r2, #9
    ed5e:	d903      	bls.n	ed68 <_svfiprintf_r+0x1a8>
    ed60:	2b00      	cmp	r3, #0
    ed62:	d0c5      	beq.n	ecf0 <_svfiprintf_r+0x130>
    ed64:	9105      	str	r1, [sp, #20]
    ed66:	e7c3      	b.n	ecf0 <_svfiprintf_r+0x130>
    ed68:	fb0c 2101 	mla	r1, ip, r1, r2
    ed6c:	4604      	mov	r4, r0
    ed6e:	2301      	movs	r3, #1
    ed70:	e7f0      	b.n	ed54 <_svfiprintf_r+0x194>
    ed72:	ab03      	add	r3, sp, #12
    ed74:	9300      	str	r3, [sp, #0]
    ed76:	462a      	mov	r2, r5
    ed78:	4b0f      	ldr	r3, [pc, #60]	; (edb8 <_svfiprintf_r+0x1f8>)
    ed7a:	a904      	add	r1, sp, #16
    ed7c:	4638      	mov	r0, r7
    ed7e:	f7ff faff 	bl	e380 <_printf_float>
    ed82:	1c42      	adds	r2, r0, #1
    ed84:	4606      	mov	r6, r0
    ed86:	d1d6      	bne.n	ed36 <_svfiprintf_r+0x176>
    ed88:	89ab      	ldrh	r3, [r5, #12]
    ed8a:	065b      	lsls	r3, r3, #25
    ed8c:	f53f af2c 	bmi.w	ebe8 <_svfiprintf_r+0x28>
    ed90:	9809      	ldr	r0, [sp, #36]	; 0x24
    ed92:	b01d      	add	sp, #116	; 0x74
    ed94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed98:	ab03      	add	r3, sp, #12
    ed9a:	9300      	str	r3, [sp, #0]
    ed9c:	462a      	mov	r2, r5
    ed9e:	4b06      	ldr	r3, [pc, #24]	; (edb8 <_svfiprintf_r+0x1f8>)
    eda0:	a904      	add	r1, sp, #16
    eda2:	4638      	mov	r0, r7
    eda4:	f7ff fd16 	bl	e7d4 <_printf_i>
    eda8:	e7eb      	b.n	ed82 <_svfiprintf_r+0x1c2>
    edaa:	bf00      	nop
    edac:	00014d72 	.word	0x00014d72
    edb0:	00014d7c 	.word	0x00014d7c
    edb4:	0000e381 	.word	0x0000e381
    edb8:	00012ced 	.word	0x00012ced
    edbc:	00014d78 	.word	0x00014d78

0000edc0 <writeReg_bmx160>:

int writeReg_bmx160(bmx160_spi * bmxIMU_spi_p, uint8_t reg, uint8_t data)
{
    edc0:	b530      	push	{r4, r5, lr}
    edc2:	b089      	sub	sp, #36	; 0x24
    int result;
	const struct spi_buf buf[2] = {
    edc4:	f10d 0307 	add.w	r3, sp, #7
{
    edc8:	f88d 2006 	strb.w	r2, [sp, #6]
	const struct spi_buf buf[2] = {
    edcc:	9304      	str	r3, [sp, #16]
    edce:	2201      	movs	r2, #1
    edd0:	f10d 0306 	add.w	r3, sp, #6
    edd4:	e9cd 3206 	strd	r3, r2, [sp, #24]
{
    edd8:	4604      	mov	r4, r0
		{
			.buf = &data,
			.len = 1,
		}
	};
	const struct spi_buf_set tx = {
    edda:	ab04      	add	r3, sp, #16
{
    eddc:	f88d 1007 	strb.w	r1, [sp, #7]
	const struct spi_buf_set tx = {
    ede0:	9302      	str	r3, [sp, #8]
		.buffers = buf,
		.count = 2,
	};
	gpio_pin_set(bmxIMU_spi_p->gpio0_dev, bmxIMU_spi_p->spi_cs_pin, 1);
    ede2:	7c01      	ldrb	r1, [r0, #16]
    ede4:	6940      	ldr	r0, [r0, #20]
	const struct spi_buf buf[2] = {
    ede6:	9205      	str	r2, [sp, #20]
	const struct spi_buf_set tx = {
    ede8:	2302      	movs	r3, #2
    edea:	9303      	str	r3, [sp, #12]
	gpio_pin_set(bmxIMU_spi_p->gpio0_dev, bmxIMU_spi_p->spi_cs_pin, 1);
    edec:	f7f4 f9aa 	bl	3144 <gpio_pin_set>

	//result = spi_write_dt(bus, &tx);
	result = spi_write(bmxIMU_spi_p->spi_dev, &bmxIMU_spi_p->spi_cfg, &tx);
    edf0:	68e0      	ldr	r0, [r4, #12]
    edf2:	6883      	ldr	r3, [r0, #8]
    edf4:	aa02      	add	r2, sp, #8
    edf6:	681d      	ldr	r5, [r3, #0]
    edf8:	4621      	mov	r1, r4
    edfa:	2300      	movs	r3, #0
    edfc:	47a8      	blx	r5
	if (result) 
    edfe:	4605      	mov	r5, r0
    ee00:	b920      	cbnz	r0, ee0c <writeReg_bmx160+0x4c>
    {
        return result;
		//printk("SPI error: %d\n", result);
	}
    gpio_pin_set(bmxIMU_spi_p->gpio0_dev, bmxIMU_spi_p->spi_cs_pin, 0);
    ee02:	4602      	mov	r2, r0
    ee04:	7c21      	ldrb	r1, [r4, #16]
    ee06:	6960      	ldr	r0, [r4, #20]
    ee08:	f7f4 f99c 	bl	3144 <gpio_pin_set>
    return 0;
}
    ee0c:	4628      	mov	r0, r5
    ee0e:	b009      	add	sp, #36	; 0x24
    ee10:	bd30      	pop	{r4, r5, pc}

0000ee12 <setSensorMode_bmx160>:
{
    ee12:	b510      	push	{r4, lr}
    ee14:	4614      	mov	r4, r2
    writeReg_bmx160(bmxIMU_spi_p, BMX160_CMD_REG, data);
    ee16:	460a      	mov	r2, r1
    ee18:	217e      	movs	r1, #126	; 0x7e
    ee1a:	f7ff ffd1 	bl	edc0 <writeReg_bmx160>
    ee1e:	03e1      	lsls	r1, r4, #15
    ee20:	f240 30e7 	movw	r0, #999	; 0x3e7
    ee24:	2400      	movs	r4, #0
    ee26:	1808      	adds	r0, r1, r0
    ee28:	4621      	mov	r1, r4
    ee2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ee2e:	f04f 0300 	mov.w	r3, #0
    ee32:	eb44 0101 	adc.w	r1, r4, r1
    ee36:	f7f2 f943 	bl	10c0 <__aeabi_uldivmod>
}
    ee3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_sleep(timeout);
    ee3e:	f7fe bbd3 	b.w	d5e8 <z_impl_k_sleep>

0000ee42 <readReg_bmx160>:

int readReg_bmx160(bmx160_spi * bmxIMU_spi_p, uint8_t reg, uint8_t *data, size_t len)
{
    ee42:	b570      	push	{r4, r5, r6, lr}
    ee44:	b08c      	sub	sp, #48	; 0x30
    ee46:	4604      	mov	r4, r0
    int result;
	unsigned char tx_buffer[2] = { 0, 0};
    ee48:	2600      	movs	r6, #0
{
    ee4a:	4610      	mov	r0, r2

	tx_buffer[0] = 0x80 | reg;
    ee4c:	f061 017f 	orn	r1, r1, #127	; 0x7f

	const struct spi_buf tx_buf = {
    ee50:	2201      	movs	r2, #1
	const struct spi_buf_set tx = {
		.buffers = &tx_buf,
		.count = 1,
	};

	struct spi_buf rx_buf[2] = {
    ee52:	e9cd 030a 	strd	r0, r3, [sp, #40]	; 0x28
	unsigned char tx_buffer[2] = { 0, 0};
    ee56:	f8ad 6004 	strh.w	r6, [sp, #4]
			.buf = data,
			.len = len,
		}
	};

	const struct spi_buf_set rx = {
    ee5a:	ab08      	add	r3, sp, #32
	tx_buffer[0] = 0x80 | reg;
    ee5c:	f88d 1004 	strb.w	r1, [sp, #4]
	const struct spi_buf tx_buf = {
    ee60:	a901      	add	r1, sp, #4
	struct spi_buf rx_buf[2] = {
    ee62:	e9cd 1208 	strd	r1, r2, [sp, #32]
	const struct spi_buf tx_buf = {
    ee66:	9102      	str	r1, [sp, #8]
	const struct spi_buf_set rx = {
    ee68:	9306      	str	r3, [sp, #24]
		.buffers = rx_buf,
		.count = 2,
	};
	gpio_pin_set(bmxIMU_spi_p->gpio0_dev, bmxIMU_spi_p->spi_cs_pin, 1);
    ee6a:	7c21      	ldrb	r1, [r4, #16]
    ee6c:	6960      	ldr	r0, [r4, #20]
	const struct spi_buf tx_buf = {
    ee6e:	9203      	str	r2, [sp, #12]
	const struct spi_buf_set rx = {
    ee70:	2302      	movs	r3, #2
	const struct spi_buf_set tx = {
    ee72:	ad02      	add	r5, sp, #8
    ee74:	e9cd 5204 	strd	r5, r2, [sp, #16]
	const struct spi_buf_set rx = {
    ee78:	9307      	str	r3, [sp, #28]
	gpio_pin_set(bmxIMU_spi_p->gpio0_dev, bmxIMU_spi_p->spi_cs_pin, 1);
    ee7a:	f7f4 f963 	bl	3144 <gpio_pin_set>
	result = spi_transceive(bmxIMU_spi_p->spi_dev, &bmxIMU_spi_p->spi_cfg, &tx, &rx);
    ee7e:	68e0      	ldr	r0, [r4, #12]
    ee80:	6883      	ldr	r3, [r0, #8]
    ee82:	aa04      	add	r2, sp, #16
    ee84:	681d      	ldr	r5, [r3, #0]
    ee86:	4621      	mov	r1, r4
    ee88:	ab06      	add	r3, sp, #24
    ee8a:	47a8      	blx	r5
    gpio_pin_set(bmxIMU_spi_p->gpio0_dev, bmxIMU_spi_p->spi_cs_pin, 0);
    ee8c:	7c21      	ldrb	r1, [r4, #16]
    ee8e:	4605      	mov	r5, r0
    ee90:	4632      	mov	r2, r6
    ee92:	6960      	ldr	r0, [r4, #20]
    ee94:	f7f4 f956 	bl	3144 <gpio_pin_set>
	if (result) {
		return result;
	}

	return 0;
}
    ee98:	4628      	mov	r0, r5
    ee9a:	b00c      	add	sp, #48	; 0x30
    ee9c:	bd70      	pop	{r4, r5, r6, pc}

0000ee9e <getChipID_bmx160>:
{
    ee9e:	460a      	mov	r2, r1
    result = readReg_bmx160(bmxIMU_spi_p, BMX160_CHIP_ID_REG, chipID, 1);
    eea0:	2301      	movs	r3, #1
    eea2:	2100      	movs	r1, #0
    eea4:	f7ff bfcd 	b.w	ee42 <readReg_bmx160>

0000eea8 <begin_bmx160>:
{
    eea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t chipID = 0;
    eeaa:	2500      	movs	r5, #0
    readReg_bmx160(bmxIMU_spi_p, BMX160_STARTUP_WRITE_REG, NULL, 1);
    eeac:	2301      	movs	r3, #1
{
    eeae:	4604      	mov	r4, r0
    readReg_bmx160(bmxIMU_spi_p, BMX160_STARTUP_WRITE_REG, NULL, 1);
    eeb0:	462a      	mov	r2, r5
    eeb2:	217f      	movs	r1, #127	; 0x7f
    uint8_t chipID = 0;
    eeb4:	f88d 5007 	strb.w	r5, [sp, #7]
    readReg_bmx160(bmxIMU_spi_p, BMX160_STARTUP_WRITE_REG, NULL, 1);
    eeb8:	f7ff ffc3 	bl	ee42 <readReg_bmx160>
    getChipID_bmx160(bmxIMU_spi_p, &chipID);
    eebc:	f10d 0107 	add.w	r1, sp, #7
    eec0:	4620      	mov	r0, r4
    eec2:	f7ff ffec 	bl	ee9e <getChipID_bmx160>
    if(chipID != BMI160_CHIP_ID)
    eec6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    eeca:	2bd1      	cmp	r3, #209	; 0xd1
    eecc:	d11e      	bne.n	ef0c <begin_bmx160+0x64>
    setSensorMode_bmx160(bmxIMU_spi_p, bmx160_accel_normal_mode, BMX160_ACCEL_DELAY_MS);    
    eece:	2204      	movs	r2, #4
    eed0:	2111      	movs	r1, #17
    eed2:	4620      	mov	r0, r4
    eed4:	f7ff ff9d 	bl	ee12 <setSensorMode_bmx160>
    setSensorMode_bmx160(bmxIMU_spi_p, bmx160_gyro_normal_mode, BMX160_GRYO_DELAY_MS);  
    eed8:	2250      	movs	r2, #80	; 0x50
    eeda:	2115      	movs	r1, #21
    eedc:	4620      	mov	r0, r4
    eede:	f7ff ff98 	bl	ee12 <setSensorMode_bmx160>
    writeReg_bmx160(bmxIMU_spi_p, BMX160_ACC_CONF_REG, sentVal);
    eee2:	222c      	movs	r2, #44	; 0x2c
    eee4:	2140      	movs	r1, #64	; 0x40
    eee6:	4620      	mov	r0, r4
    eee8:	f7ff ff6a 	bl	edc0 <writeReg_bmx160>
    writeReg_bmx160(bmxIMU_spi_p, BMX160_GYR_CONF_REG, sentVal);
    eeec:	222c      	movs	r2, #44	; 0x2c
    eeee:	2142      	movs	r1, #66	; 0x42
    eef0:	4620      	mov	r0, r4
    eef2:	f7ff ff65 	bl	edc0 <writeReg_bmx160>
    setAccelRange_bmx160(bmxIMU_spi_p, bmx160_accelRange_4g);
    eef6:	2105      	movs	r1, #5
    eef8:	4620      	mov	r0, r4
    eefa:	f7f4 f95d 	bl	31b8 <setAccelRange_bmx160>
    setGyroRange_bmx160(bmxIMU_spi_p, bmx160_gyroRange_1000dps);
    eefe:	4620      	mov	r0, r4
    ef00:	2101      	movs	r1, #1
    ef02:	f7f4 f979 	bl	31f8 <setGyroRange_bmx160>
    return BMX160_OK;
    ef06:	4628      	mov	r0, r5
}
    ef08:	b003      	add	sp, #12
    ef0a:	bd30      	pop	{r4, r5, pc}
        return BMX160_WRONG_CHIP_ID;
    ef0c:	f06f 0062 	mvn.w	r0, #98	; 0x62
    ef10:	e7fa      	b.n	ef08 <begin_bmx160+0x60>

0000ef12 <quaternion_initialize>:
{
    ef12:	b510      	push	{r4, lr}
    return q;
    ef14:	6083      	str	r3, [r0, #8]
    ef16:	9b02      	ldr	r3, [sp, #8]
    ef18:	6001      	str	r1, [r0, #0]
    ef1a:	6042      	str	r2, [r0, #4]
    ef1c:	60c3      	str	r3, [r0, #12]
}
    ef1e:	bd10      	pop	{r4, pc}

0000ef20 <quaternion_product>:
{
    ef20:	b084      	sub	sp, #16
    ef22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef26:	9000      	str	r0, [sp, #0]
    ef28:	a80d      	add	r0, sp, #52	; 0x34
    ef2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ef2e:	9e11      	ldr	r6, [sp, #68]	; 0x44
    ef30:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    ef34:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
    ef38:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    ef3c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    ef3e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    ef42:	9d10      	ldr	r5, [sp, #64]	; 0x40
    ef44:	9c14      	ldr	r4, [sp, #80]	; 0x50
    q.a = (q1.a*q2.a) - (q1.b*q2.b) - (q1.c*q2.c) - (q1.d*q2.d);
    ef46:	4631      	mov	r1, r6
    ef48:	4658      	mov	r0, fp
    ef4a:	f7f1 fecd 	bl	ce8 <__aeabi_fmul>
    ef4e:	4641      	mov	r1, r8
    ef50:	9001      	str	r0, [sp, #4]
    ef52:	4648      	mov	r0, r9
    ef54:	f7f1 fec8 	bl	ce8 <__aeabi_fmul>
    ef58:	9a01      	ldr	r2, [sp, #4]
    ef5a:	4601      	mov	r1, r0
    ef5c:	4610      	mov	r0, r2
    ef5e:	f7f1 fdb9 	bl	ad4 <__aeabi_fsub>
    ef62:	4651      	mov	r1, sl
    ef64:	9001      	str	r0, [sp, #4]
    ef66:	4638      	mov	r0, r7
    ef68:	f7f1 febe 	bl	ce8 <__aeabi_fmul>
    ef6c:	9a01      	ldr	r2, [sp, #4]
    ef6e:	4601      	mov	r1, r0
    ef70:	4610      	mov	r0, r2
    ef72:	f7f1 fdaf 	bl	ad4 <__aeabi_fsub>
    ef76:	4621      	mov	r1, r4
    ef78:	9001      	str	r0, [sp, #4]
    ef7a:	4628      	mov	r0, r5
    ef7c:	f7f1 feb4 	bl	ce8 <__aeabi_fmul>
    ef80:	9a01      	ldr	r2, [sp, #4]
    ef82:	4601      	mov	r1, r0
    ef84:	4610      	mov	r0, r2
    ef86:	f7f1 fda5 	bl	ad4 <__aeabi_fsub>
    return q;
    ef8a:	9b00      	ldr	r3, [sp, #0]
    q.b = (q1.a*q2.b) + (q1.b*q2.a) + (q1.c*q2.d) - (q1.d*q2.c);
    ef8c:	4641      	mov	r1, r8
    return q;
    ef8e:	6018      	str	r0, [r3, #0]
    q.b = (q1.a*q2.b) + (q1.b*q2.a) + (q1.c*q2.d) - (q1.d*q2.c);
    ef90:	4658      	mov	r0, fp
    ef92:	f7f1 fea9 	bl	ce8 <__aeabi_fmul>
    ef96:	4631      	mov	r1, r6
    ef98:	9001      	str	r0, [sp, #4]
    ef9a:	4648      	mov	r0, r9
    ef9c:	f7f1 fea4 	bl	ce8 <__aeabi_fmul>
    efa0:	9a01      	ldr	r2, [sp, #4]
    efa2:	4601      	mov	r1, r0
    efa4:	4610      	mov	r0, r2
    efa6:	f7f1 fd97 	bl	ad8 <__addsf3>
    efaa:	4621      	mov	r1, r4
    efac:	9001      	str	r0, [sp, #4]
    efae:	4638      	mov	r0, r7
    efb0:	f7f1 fe9a 	bl	ce8 <__aeabi_fmul>
    efb4:	9a01      	ldr	r2, [sp, #4]
    efb6:	4601      	mov	r1, r0
    efb8:	4610      	mov	r0, r2
    efba:	f7f1 fd8d 	bl	ad8 <__addsf3>
    efbe:	4651      	mov	r1, sl
    efc0:	9001      	str	r0, [sp, #4]
    efc2:	4628      	mov	r0, r5
    efc4:	f7f1 fe90 	bl	ce8 <__aeabi_fmul>
    efc8:	9a01      	ldr	r2, [sp, #4]
    efca:	4601      	mov	r1, r0
    efcc:	4610      	mov	r0, r2
    efce:	f7f1 fd81 	bl	ad4 <__aeabi_fsub>
    return q;
    efd2:	9b00      	ldr	r3, [sp, #0]
    q.c = (q1.a*q2.c) - (q1.b*q2.d) + (q1.c*q2.a) + (q1.d*q2.b);
    efd4:	4651      	mov	r1, sl
    return q;
    efd6:	6058      	str	r0, [r3, #4]
    q.c = (q1.a*q2.c) - (q1.b*q2.d) + (q1.c*q2.a) + (q1.d*q2.b);
    efd8:	4658      	mov	r0, fp
    efda:	f7f1 fe85 	bl	ce8 <__aeabi_fmul>
    efde:	4621      	mov	r1, r4
    efe0:	9001      	str	r0, [sp, #4]
    efe2:	4648      	mov	r0, r9
    efe4:	f7f1 fe80 	bl	ce8 <__aeabi_fmul>
    efe8:	9a01      	ldr	r2, [sp, #4]
    efea:	4601      	mov	r1, r0
    efec:	4610      	mov	r0, r2
    efee:	f7f1 fd71 	bl	ad4 <__aeabi_fsub>
    eff2:	4631      	mov	r1, r6
    eff4:	9001      	str	r0, [sp, #4]
    eff6:	4638      	mov	r0, r7
    eff8:	f7f1 fe76 	bl	ce8 <__aeabi_fmul>
    effc:	9a01      	ldr	r2, [sp, #4]
    effe:	4601      	mov	r1, r0
    f000:	4610      	mov	r0, r2
    f002:	f7f1 fd69 	bl	ad8 <__addsf3>
    f006:	4641      	mov	r1, r8
    f008:	9001      	str	r0, [sp, #4]
    f00a:	4628      	mov	r0, r5
    f00c:	f7f1 fe6c 	bl	ce8 <__aeabi_fmul>
    f010:	9a01      	ldr	r2, [sp, #4]
    f012:	4601      	mov	r1, r0
    f014:	4610      	mov	r0, r2
    f016:	f7f1 fd5f 	bl	ad8 <__addsf3>
    return q;
    f01a:	9b00      	ldr	r3, [sp, #0]
    q.d = (q1.a*q2.d) + (q1.b*q2.c) - (q1.c*q2.b) + (q1.d*q2.a);
    f01c:	4621      	mov	r1, r4
    return q;
    f01e:	6098      	str	r0, [r3, #8]
    q.d = (q1.a*q2.d) + (q1.b*q2.c) - (q1.c*q2.b) + (q1.d*q2.a);
    f020:	4658      	mov	r0, fp
    f022:	f7f1 fe61 	bl	ce8 <__aeabi_fmul>
    f026:	4651      	mov	r1, sl
    f028:	4683      	mov	fp, r0
    f02a:	4648      	mov	r0, r9
    f02c:	f7f1 fe5c 	bl	ce8 <__aeabi_fmul>
    f030:	4601      	mov	r1, r0
    f032:	4658      	mov	r0, fp
    f034:	f7f1 fd50 	bl	ad8 <__addsf3>
    f038:	4641      	mov	r1, r8
    f03a:	4681      	mov	r9, r0
    f03c:	4638      	mov	r0, r7
    f03e:	f7f1 fe53 	bl	ce8 <__aeabi_fmul>
    f042:	4601      	mov	r1, r0
    f044:	4648      	mov	r0, r9
    f046:	f7f1 fd45 	bl	ad4 <__aeabi_fsub>
    f04a:	4631      	mov	r1, r6
    f04c:	4607      	mov	r7, r0
    f04e:	4628      	mov	r0, r5
    f050:	f7f1 fe4a 	bl	ce8 <__aeabi_fmul>
    f054:	4601      	mov	r1, r0
    f056:	4638      	mov	r0, r7
    f058:	f7f1 fd3e 	bl	ad8 <__addsf3>
    return q;
    f05c:	9b00      	ldr	r3, [sp, #0]
    f05e:	60d8      	str	r0, [r3, #12]
}
    f060:	4618      	mov	r0, r3
    f062:	b003      	add	sp, #12
    f064:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f068:	b004      	add	sp, #16
    f06a:	4770      	bx	lr

0000f06c <quaternion_rotate_vector>:
{
    f06c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f06e:	b09b      	sub	sp, #108	; 0x6c
    f070:	4605      	mov	r5, r0
    f072:	a807      	add	r0, sp, #28
    f074:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    return q;
    f078:	2300      	movs	r3, #0
    f07a:	930a      	str	r3, [sp, #40]	; 0x28
    f07c:	9b07      	ldr	r3, [sp, #28]
    f07e:	930b      	str	r3, [sp, #44]	; 0x2c
    f080:	9b08      	ldr	r3, [sp, #32]
    f082:	930c      	str	r3, [sp, #48]	; 0x30
    f084:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f086:	930d      	str	r3, [sp, #52]	; 0x34
    q2.b = -q1.b;
    f088:	9b21      	ldr	r3, [sp, #132]	; 0x84
    q2.d = -q1.d;
    f08a:	9f23      	ldr	r7, [sp, #140]	; 0x8c
    return q2;
    f08c:	9820      	ldr	r0, [sp, #128]	; 0x80
    f08e:	900e      	str	r0, [sp, #56]	; 0x38
    q2.b = -q1.b;
    f090:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
    q2.c = -q1.c;
    f094:	9b22      	ldr	r3, [sp, #136]	; 0x88
    return q2;
    f096:	920f      	str	r2, [sp, #60]	; 0x3c
    q2.c = -q1.c;
    f098:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    return q2;
    f09c:	9310      	str	r3, [sp, #64]	; 0x40
    q2.d = -q1.d;
    f09e:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
    Quaternion quaternion_rotated_vector = quaternion_product(quaternion_product(q, quaternion_vector),q_inverse);
    f0a2:	ab0a      	add	r3, sp, #40	; 0x28
    return q2;
    f0a4:	9111      	str	r1, [sp, #68]	; 0x44
    Quaternion quaternion_rotated_vector = quaternion_product(quaternion_product(q, quaternion_vector),q_inverse);
    f0a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    f0a8:	ac01      	add	r4, sp, #4
    f0aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    f0ae:	ae16      	add	r6, sp, #88	; 0x58
    f0b0:	9700      	str	r7, [sp, #0]
    f0b2:	ab20      	add	r3, sp, #128	; 0x80
    f0b4:	cb0e      	ldmia	r3, {r1, r2, r3}
    f0b6:	4630      	mov	r0, r6
    f0b8:	f7ff ff32 	bl	ef20 <quaternion_product>
    f0bc:	ab0e      	add	r3, sp, #56	; 0x38
    f0be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    f0c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    f0c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    f0c6:	9300      	str	r3, [sp, #0]
    f0c8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
    f0cc:	a812      	add	r0, sp, #72	; 0x48
    f0ce:	f7ff ff27 	bl	ef20 <quaternion_product>
    vector_ijk rotated = vector_3d_initialize(quaternion_rotated_vector.b,quaternion_rotated_vector.c,quaternion_rotated_vector.d);
    f0d2:	4628      	mov	r0, r5
    f0d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    f0d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    f0d8:	9913      	ldr	r1, [sp, #76]	; 0x4c
    f0da:	f000 f89a 	bl	f212 <vector_3d_initialize>
}
    f0de:	4628      	mov	r0, r5
    f0e0:	b01b      	add	sp, #108	; 0x6c
    f0e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f0e4 <sensor_gravity_normalized>:

vector_ijk sensor_gravity_normalized(int16_t ax, int16_t ay, int16_t az)
{
    f0e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f0e6:	4604      	mov	r4, r0
    vector_ijk result;
    result.a = ax;
    f0e8:	4608      	mov	r0, r1
{
    f0ea:	4616      	mov	r6, r2
    f0ec:	461d      	mov	r5, r3
    result.a = ax;
    f0ee:	f7f1 fda7 	bl	c40 <__aeabi_i2f>
    f0f2:	9001      	str	r0, [sp, #4]
    result.b = ay;
    f0f4:	4630      	mov	r0, r6
    f0f6:	f7f1 fda3 	bl	c40 <__aeabi_i2f>
    f0fa:	9002      	str	r0, [sp, #8]
    result.c = az;
    f0fc:	4628      	mov	r0, r5
    f0fe:	f7f1 fd9f 	bl	c40 <__aeabi_i2f>
    f102:	9003      	str	r0, [sp, #12]
    result = vector_3d_normalize(result);
    f104:	a801      	add	r0, sp, #4
    f106:	e890 000e 	ldmia.w	r0, {r1, r2, r3}
    f10a:	f000 f8dc 	bl	f2c6 <vector_3d_normalize>
    return result;
    f10e:	9b01      	ldr	r3, [sp, #4]
    f110:	6023      	str	r3, [r4, #0]
    f112:	9b02      	ldr	r3, [sp, #8]
    f114:	6063      	str	r3, [r4, #4]
    f116:	9b03      	ldr	r3, [sp, #12]
    f118:	60a3      	str	r3, [r4, #8]
}
    f11a:	4620      	mov	r0, r4
    f11c:	b004      	add	sp, #16
    f11e:	bd70      	pop	{r4, r5, r6, pc}

0000f120 <fuse_vector>:

vector_ijk fuse_vector(vector_ijk virtual_gravity, vector_ijk sensor_gravity)
{
    f120:	b530      	push	{r4, r5, lr}
    f122:	b08d      	sub	sp, #52	; 0x34
    f124:	ac09      	add	r4, sp, #36	; 0x24
    f126:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    f12a:	4605      	mov	r5, r0
    float fusion = fusion_coeffecient(virtual_gravity, sensor_gravity);
    f12c:	e9dd 0111 	ldrd	r0, r1, [sp, #68]	; 0x44
    f130:	e88d 0003 	stmia.w	sp, {r0, r1}
    f134:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f136:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    f13a:	f7f2 faa9 	bl	1690 <fusion_coeffecient>
    virtual_gravity = vector_3d_scale(virtual_gravity,fusion);
    f13e:	9000      	str	r0, [sp, #0]
    f140:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
    f144:	4620      	mov	r0, r4
    f146:	f000 f8a3 	bl	f290 <vector_3d_scale>
    vector_ijk result = vector_3d_sum(virtual_gravity,sensor_gravity);
    f14a:	ab10      	add	r3, sp, #64	; 0x40
    f14c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    f150:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    f154:	4628      	mov	r0, r5
    f156:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
    result = vector_3d_normalize(result);
    f15a:	ac04      	add	r4, sp, #16
    vector_ijk result = vector_3d_sum(virtual_gravity,sensor_gravity);
    f15c:	f000 f85e 	bl	f21c <vector_3d_sum>
    result = vector_3d_normalize(result);
    f160:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
    f164:	4620      	mov	r0, r4
    f166:	f000 f8ae 	bl	f2c6 <vector_3d_normalize>
    f16a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    f16e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    return result;
}
    f172:	4628      	mov	r0, r5
    f174:	b00d      	add	sp, #52	; 0x34
    f176:	bd30      	pop	{r4, r5, pc}

0000f178 <update_gravity_vector>:

vector_ijk update_gravity_vector(vector_ijk gravity_vector,float wx,float wy,float wz,float delta)
{
    f178:	b570      	push	{r4, r5, r6, lr}
    f17a:	b08c      	sub	sp, #48	; 0x30
    f17c:	ac05      	add	r4, sp, #20
    f17e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    Quaternion q_gyro = quaternion_from_gyro(wx,wy,wz,delta);
    f182:	ae08      	add	r6, sp, #32
    f184:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f186:	9a11      	ldr	r2, [sp, #68]	; 0x44
    f188:	9910      	ldr	r1, [sp, #64]	; 0x40
    f18a:	9300      	str	r3, [sp, #0]
{
    f18c:	4605      	mov	r5, r0
    Quaternion q_gyro = quaternion_from_gyro(wx,wy,wz,delta);
    f18e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f190:	4630      	mov	r0, r6
    f192:	f7f4 f8bf 	bl	3314 <quaternion_from_gyro>
    // Rotate ,initially (0,0,-1), if rotational speed is present
    gravity_vector = quaternion_rotate_vector(gravity_vector,q_gyro);
    f196:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    f19a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    f19e:	4620      	mov	r0, r4
    f1a0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
    f1a4:	f7ff ff62 	bl	f06c <quaternion_rotate_vector>
    return gravity_vector;
    f1a8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    f1ac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
    f1b0:	4628      	mov	r0, r5
    f1b2:	b00c      	add	sp, #48	; 0x30
    f1b4:	bd70      	pop	{r4, r5, r6, pc}

0000f1b6 <update_fused_vector>:

vector_ijk update_fused_vector(vector_ijk fused_vector, int16_t ax, int16_t ay, int16_t az,float wx,float wy,float wz,float delta)
{
    f1b6:	b5f0      	push	{r4, r5, r6, r7, lr}
    f1b8:	b08f      	sub	sp, #60	; 0x3c
    f1ba:	ac05      	add	r4, sp, #20
    f1bc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    // virtual_gravity is rotated fused_vector using data from gyro
    vector_ijk virtual_gravity = update_gravity_vector(fused_vector,wx,wy,wz,delta);
    f1c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    f1c2:	9303      	str	r3, [sp, #12]
    f1c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    f1c6:	9302      	str	r3, [sp, #8]
    f1c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
    f1ca:	9301      	str	r3, [sp, #4]
    f1cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f1ce:	9300      	str	r3, [sp, #0]
    f1d0:	ae08      	add	r6, sp, #32
    f1d2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
{
    f1d6:	4605      	mov	r5, r0
    // sensor_gravity is normalized accel data
    vector_ijk sensor_gravity = sensor_gravity_normalized(ax,ay,az);
    f1d8:	af0b      	add	r7, sp, #44	; 0x2c
    vector_ijk virtual_gravity = update_gravity_vector(fused_vector,wx,wy,wz,delta);
    f1da:	4630      	mov	r0, r6
    f1dc:	f7ff ffcc 	bl	f178 <update_gravity_vector>
    vector_ijk sensor_gravity = sensor_gravity_normalized(ax,ay,az);
    f1e0:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
    f1e4:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
    f1e8:	f9bd 1050 	ldrsh.w	r1, [sp, #80]	; 0x50
    f1ec:	4638      	mov	r0, r7
    f1ee:	f7ff ff79 	bl	f0e4 <sensor_gravity_normalized>
    fused_vector = fuse_vector(virtual_gravity,sensor_gravity);
    f1f2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    f1f6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    f1fa:	4620      	mov	r0, r4
    f1fc:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
    f200:	f7ff ff8e 	bl	f120 <fuse_vector>
    return fused_vector;
    f204:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    f208:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
    f20c:	4628      	mov	r0, r5
    f20e:	b00f      	add	sp, #60	; 0x3c
    f210:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f212 <vector_3d_initialize>:
{
    f212:	b510      	push	{r4, lr}
    return v;
    f214:	6001      	str	r1, [r0, #0]
    f216:	6042      	str	r2, [r0, #4]
    f218:	6083      	str	r3, [r0, #8]
}
    f21a:	bd10      	pop	{r4, pc}

0000f21c <vector_3d_sum>:
{
    f21c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f21e:	4604      	mov	r4, r0
    f220:	a804      	add	r0, sp, #16
    f222:	e900 000e 	stmdb	r0, {r1, r2, r3}
    v.b = v1.b + v2.b;
    f226:	9909      	ldr	r1, [sp, #36]	; 0x24
    f228:	9802      	ldr	r0, [sp, #8]
    f22a:	f7f1 fc55 	bl	ad8 <__addsf3>
    v.c = v1.c + v2.c;
    f22e:	990a      	ldr	r1, [sp, #40]	; 0x28
    v.b = v1.b + v2.b;
    f230:	4606      	mov	r6, r0
    v.c = v1.c + v2.c;
    f232:	9803      	ldr	r0, [sp, #12]
    f234:	f7f1 fc50 	bl	ad8 <__addsf3>
    v.a = v1.a + v2.a;
    f238:	9908      	ldr	r1, [sp, #32]
    v.c = v1.c + v2.c;
    f23a:	4605      	mov	r5, r0
    v.a = v1.a + v2.a;
    f23c:	9801      	ldr	r0, [sp, #4]
    f23e:	f7f1 fc4b 	bl	ad8 <__addsf3>
    return v;
    f242:	6020      	str	r0, [r4, #0]
}
    f244:	4620      	mov	r0, r4
    return v;
    f246:	6066      	str	r6, [r4, #4]
    f248:	60a5      	str	r5, [r4, #8]
}
    f24a:	b004      	add	sp, #16
    f24c:	bd70      	pop	{r4, r5, r6, pc}

0000f24e <vector_3d_dot_product>:
{
    f24e:	b082      	sub	sp, #8
    f250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f252:	ac04      	add	r4, sp, #16
    f254:	e904 0007 	stmdb	r4, {r0, r1, r2}
    f258:	9307      	str	r3, [sp, #28]
    return (v1.a*v2.a + v1.b*v2.b + v1.c*v2.c);
    f25a:	9907      	ldr	r1, [sp, #28]
    f25c:	9801      	ldr	r0, [sp, #4]
    f25e:	f7f1 fd43 	bl	ce8 <__aeabi_fmul>
    f262:	9908      	ldr	r1, [sp, #32]
    f264:	4604      	mov	r4, r0
    f266:	9802      	ldr	r0, [sp, #8]
    f268:	f7f1 fd3e 	bl	ce8 <__aeabi_fmul>
    f26c:	4601      	mov	r1, r0
    f26e:	4620      	mov	r0, r4
    f270:	f7f1 fc32 	bl	ad8 <__addsf3>
    f274:	9909      	ldr	r1, [sp, #36]	; 0x24
    f276:	4604      	mov	r4, r0
    f278:	9803      	ldr	r0, [sp, #12]
    f27a:	f7f1 fd35 	bl	ce8 <__aeabi_fmul>
    f27e:	4601      	mov	r1, r0
    f280:	4620      	mov	r0, r4
    f282:	f7f1 fc29 	bl	ad8 <__addsf3>
}
    f286:	b004      	add	sp, #16
    f288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f28c:	b002      	add	sp, #8
    f28e:	4770      	bx	lr

0000f290 <vector_3d_scale>:
{
    f290:	b5f0      	push	{r4, r5, r6, r7, lr}
    f292:	b085      	sub	sp, #20
    f294:	4604      	mov	r4, r0
    f296:	a804      	add	r0, sp, #16
    f298:	e900 000e 	stmdb	r0, {r1, r2, r3}
    f29c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    v2.b = v1.b*scale;
    f29e:	9902      	ldr	r1, [sp, #8]
    f2a0:	4638      	mov	r0, r7
    f2a2:	f7f1 fd21 	bl	ce8 <__aeabi_fmul>
    v2.c = v1.c*scale;
    f2a6:	9903      	ldr	r1, [sp, #12]
    v2.b = v1.b*scale;
    f2a8:	4606      	mov	r6, r0
    v2.c = v1.c*scale;
    f2aa:	4638      	mov	r0, r7
    f2ac:	f7f1 fd1c 	bl	ce8 <__aeabi_fmul>
    v2.a = v1.a*scale;
    f2b0:	4639      	mov	r1, r7
    v2.c = v1.c*scale;
    f2b2:	4605      	mov	r5, r0
    v2.a = v1.a*scale;
    f2b4:	9801      	ldr	r0, [sp, #4]
    f2b6:	f7f1 fd17 	bl	ce8 <__aeabi_fmul>
    return v2;
    f2ba:	6020      	str	r0, [r4, #0]
}
    f2bc:	4620      	mov	r0, r4
    return v2;
    f2be:	6066      	str	r6, [r4, #4]
    f2c0:	60a5      	str	r5, [r4, #8]
}
    f2c2:	b005      	add	sp, #20
    f2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f2c6 <vector_3d_normalize>:
{
    f2c6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    f2ca:	4604      	mov	r4, r0
    f2cc:	a804      	add	r0, sp, #16
    f2ce:	e900 000e 	stmdb	r0, {r1, r2, r3}
    f2d2:	f8dd 8004 	ldr.w	r8, [sp, #4]
    f2d6:	9f02      	ldr	r7, [sp, #8]
    f2d8:	9e03      	ldr	r6, [sp, #12]
    one_by_sqrt = InvSqrt(v1.a*v1.a + v1.b*v1.b + v1.c*v1.c);
    f2da:	4641      	mov	r1, r8
    f2dc:	4640      	mov	r0, r8
    f2de:	f7f1 fd03 	bl	ce8 <__aeabi_fmul>
    f2e2:	4639      	mov	r1, r7
    f2e4:	4605      	mov	r5, r0
    f2e6:	4638      	mov	r0, r7
    f2e8:	f7f1 fcfe 	bl	ce8 <__aeabi_fmul>
    f2ec:	4601      	mov	r1, r0
    f2ee:	4628      	mov	r0, r5
    f2f0:	f7f1 fbf2 	bl	ad8 <__addsf3>
    f2f4:	4631      	mov	r1, r6
    f2f6:	4605      	mov	r5, r0
    f2f8:	4630      	mov	r0, r6
    f2fa:	f7f1 fcf5 	bl	ce8 <__aeabi_fmul>
    f2fe:	4601      	mov	r1, r0
    f300:	4628      	mov	r0, r5
    f302:	f7f1 fbe9 	bl	ad8 <__addsf3>
    f306:	f7f4 f857 	bl	33b8 <InvSqrt>
    f30a:	4605      	mov	r5, r0
    v2.a = v1.a*one_by_sqrt;
    f30c:	4601      	mov	r1, r0
    f30e:	4640      	mov	r0, r8
    f310:	f7f1 fcea 	bl	ce8 <__aeabi_fmul>
    v2.b = v1.b*one_by_sqrt;
    f314:	4639      	mov	r1, r7
    return v2;
    f316:	6020      	str	r0, [r4, #0]
    v2.b = v1.b*one_by_sqrt;
    f318:	4628      	mov	r0, r5
    f31a:	f7f1 fce5 	bl	ce8 <__aeabi_fmul>
    v2.c = v1.c*one_by_sqrt;
    f31e:	4631      	mov	r1, r6
    return v2;
    f320:	6060      	str	r0, [r4, #4]
    v2.c = v1.c*one_by_sqrt;
    f322:	4628      	mov	r0, r5
    f324:	f7f1 fce0 	bl	ce8 <__aeabi_fmul>
    return v2;
    f328:	60a0      	str	r0, [r4, #8]
}
    f32a:	4620      	mov	r0, r4
    f32c:	b004      	add	sp, #16
    f32e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f332 <crc16_itu_t>:
	return seed;
}

uint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)
{
	for (; len > 0; len--) {
    f332:	440a      	add	r2, r1
    f334:	428a      	cmp	r2, r1
    f336:	d100      	bne.n	f33a <crc16_itu_t+0x8>
		seed ^= seed << 12U;
		seed ^= (seed & 0xffU) << 5U;
	}

	return seed;
}
    f338:	4770      	bx	lr
		seed ^= *src++;
    f33a:	f811 3b01 	ldrb.w	r3, [r1], #1
    f33e:	ba40      	rev16	r0, r0
    f340:	b280      	uxth	r0, r0
    f342:	4058      	eors	r0, r3
		seed ^= (seed & 0xffU) >> 4U;
    f344:	f3c0 1303 	ubfx	r3, r0, #4, #4
    f348:	4058      	eors	r0, r3
		seed ^= seed << 12U;
    f34a:	ea80 3000 	eor.w	r0, r0, r0, lsl #12
    f34e:	b283      	uxth	r3, r0
		seed ^= (seed & 0xffU) << 5U;
    f350:	0158      	lsls	r0, r3, #5
    f352:	f400 50ff 	and.w	r0, r0, #8160	; 0x1fe0
    f356:	4058      	eors	r0, r3
	for (; len > 0; len--) {
    f358:	e7ec      	b.n	f334 <crc16_itu_t+0x2>

0000f35a <crc7_be>:

#include <sys/crc.h>

uint8_t crc7_be(uint8_t seed, const uint8_t *src, size_t len)
{
	while (len--) {
    f35a:	440a      	add	r2, r1
    f35c:	4291      	cmp	r1, r2
    f35e:	d100      	bne.n	f362 <crc7_be+0x8>

		seed = (f << 1) ^ (f << 4);
	}

	return seed;
}
    f360:	4770      	bx	lr
		uint8_t e = seed ^ *src++;
    f362:	f811 3b01 	ldrb.w	r3, [r1], #1
    f366:	4058      	eors	r0, r3
		uint8_t f = e ^ (e >> 4) ^ (e >> 7);
    f368:	09c3      	lsrs	r3, r0, #7
    f36a:	ea83 1310 	eor.w	r3, r3, r0, lsr #4
		seed = (f << 1) ^ (f << 4);
    f36e:	4058      	eors	r0, r3
    f370:	0103      	lsls	r3, r0, #4
    f372:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
    f376:	b2c0      	uxtb	r0, r0
    f378:	e7f0      	b.n	f35c <crc7_be+0x2>

0000f37a <sys_notify_validate>:
	if (notify == NULL) {
    f37a:	4603      	mov	r3, r0
    f37c:	b158      	cbz	r0, f396 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    f37e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    f380:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    f384:	2a01      	cmp	r2, #1
    f386:	d003      	beq.n	f390 <sys_notify_validate+0x16>
    f388:	2a03      	cmp	r2, #3
    f38a:	d104      	bne.n	f396 <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    f38c:	6802      	ldr	r2, [r0, #0]
    f38e:	b112      	cbz	r2, f396 <sys_notify_validate+0x1c>
		notify->result = 0;
    f390:	2000      	movs	r0, #0
    f392:	6098      	str	r0, [r3, #8]
    f394:	4770      	bx	lr
		return -EINVAL;
    f396:	f06f 0015 	mvn.w	r0, #21
}
    f39a:	4770      	bx	lr

0000f39c <arch_printk_char_out>:
}
    f39c:	2000      	movs	r0, #0
    f39e:	4770      	bx	lr

0000f3a0 <str_out>:
{
    f3a0:	b530      	push	{r4, r5, lr}
    f3a2:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    f3a4:	680c      	ldr	r4, [r1, #0]
    f3a6:	1c55      	adds	r5, r2, #1
    f3a8:	b114      	cbz	r4, f3b0 <str_out+0x10>
    f3aa:	684b      	ldr	r3, [r1, #4]
    f3ac:	4293      	cmp	r3, r2
    f3ae:	dc01      	bgt.n	f3b4 <str_out+0x14>
		ctx->count++;
    f3b0:	608d      	str	r5, [r1, #8]
}
    f3b2:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    f3b4:	3b01      	subs	r3, #1
    f3b6:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    f3b8:	bf08      	it	eq
    f3ba:	2200      	moveq	r2, #0
    f3bc:	608d      	str	r5, [r1, #8]
    f3be:	bf0c      	ite	eq
    f3c0:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    f3c2:	54a0      	strbne	r0, [r4, r2]
    f3c4:	e7f5      	b.n	f3b2 <str_out+0x12>

0000f3c6 <printk>:
{
    f3c6:	b40f      	push	{r0, r1, r2, r3}
    f3c8:	b507      	push	{r0, r1, r2, lr}
    f3ca:	a904      	add	r1, sp, #16
    f3cc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    f3d0:	9101      	str	r1, [sp, #4]
	z_log_printk(fmt, ap);
    f3d2:	f000 f94c 	bl	f66e <z_log_printk>
}
    f3d6:	b003      	add	sp, #12
    f3d8:	f85d eb04 	ldr.w	lr, [sp], #4
    f3dc:	b004      	add	sp, #16
    f3de:	4770      	bx	lr

0000f3e0 <snprintk>:
{
    f3e0:	b40c      	push	{r2, r3}
    f3e2:	b507      	push	{r0, r1, r2, lr}
    f3e4:	ab04      	add	r3, sp, #16
    f3e6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    f3ea:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    f3ec:	f7f4 f824 	bl	3438 <vsnprintk>
}
    f3f0:	b003      	add	sp, #12
    f3f2:	f85d eb04 	ldr.w	lr, [sp], #4
    f3f6:	b002      	add	sp, #8
    f3f8:	4770      	bx	lr

0000f3fa <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    f3fa:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    f3fc:	f013 0307 	ands.w	r3, r3, #7
    f400:	d105      	bne.n	f40e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    f402:	6803      	ldr	r3, [r0, #0]
    f404:	2b00      	cmp	r3, #0
		evt = EVT_START;
    f406:	bf0c      	ite	eq
    f408:	2000      	moveq	r0, #0
    f40a:	2003      	movne	r0, #3
    f40c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    f40e:	2b02      	cmp	r3, #2
    f410:	d105      	bne.n	f41e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    f412:	8bc3      	ldrh	r3, [r0, #30]
    f414:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    f416:	bf14      	ite	ne
    f418:	2000      	movne	r0, #0
    f41a:	2004      	moveq	r0, #4
    f41c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    f41e:	2b01      	cmp	r3, #1
    f420:	d105      	bne.n	f42e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    f422:	6803      	ldr	r3, [r0, #0]
    f424:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    f426:	bf0c      	ite	eq
    f428:	2000      	moveq	r0, #0
    f42a:	2005      	movne	r0, #5
    f42c:	4770      	bx	lr
	int evt = EVT_NOP;
    f42e:	2000      	movs	r0, #0
}
    f430:	4770      	bx	lr

0000f432 <notify_one>:
{
    f432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f436:	460d      	mov	r5, r1
    f438:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    f43a:	4619      	mov	r1, r3
    f43c:	1d28      	adds	r0, r5, #4
{
    f43e:	4690      	mov	r8, r2
    f440:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    f442:	f7f3 ffd5 	bl	33f0 <sys_notify_finalize>
	if (cb) {
    f446:	4604      	mov	r4, r0
    f448:	b138      	cbz	r0, f45a <notify_one+0x28>
		cb(mgr, cli, state, res);
    f44a:	4633      	mov	r3, r6
    f44c:	4642      	mov	r2, r8
    f44e:	4629      	mov	r1, r5
    f450:	4638      	mov	r0, r7
    f452:	46a4      	mov	ip, r4
}
    f454:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    f458:	4760      	bx	ip
}
    f45a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f45e <validate_args>:
{
    f45e:	b510      	push	{r4, lr}
    f460:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    f462:	b140      	cbz	r0, f476 <validate_args+0x18>
    f464:	b139      	cbz	r1, f476 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    f466:	1d08      	adds	r0, r1, #4
    f468:	f7ff ff87 	bl	f37a <sys_notify_validate>
	if ((rv == 0)
    f46c:	b928      	cbnz	r0, f47a <validate_args+0x1c>
	    && ((cli->notify.flags
    f46e:	68a3      	ldr	r3, [r4, #8]
    f470:	f033 0303 	bics.w	r3, r3, #3
    f474:	d001      	beq.n	f47a <validate_args+0x1c>
		rv = -EINVAL;
    f476:	f06f 0015 	mvn.w	r0, #21
}
    f47a:	bd10      	pop	{r4, pc}

0000f47c <onoff_manager_init>:
{
    f47c:	b538      	push	{r3, r4, r5, lr}
    f47e:	460c      	mov	r4, r1
	if ((mgr == NULL)
    f480:	4605      	mov	r5, r0
    f482:	b158      	cbz	r0, f49c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    f484:	b151      	cbz	r1, f49c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    f486:	680b      	ldr	r3, [r1, #0]
    f488:	b143      	cbz	r3, f49c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    f48a:	684b      	ldr	r3, [r1, #4]
    f48c:	b133      	cbz	r3, f49c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    f48e:	2220      	movs	r2, #32
    f490:	2100      	movs	r1, #0
    f492:	f002 ff37 	bl	12304 <memset>
    f496:	612c      	str	r4, [r5, #16]
	return 0;
    f498:	2000      	movs	r0, #0
}
    f49a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    f49c:	f06f 0015 	mvn.w	r0, #21
    f4a0:	e7fb      	b.n	f49a <onoff_manager_init+0x1e>

0000f4a2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    f4a2:	4604      	mov	r4, r0
    f4a4:	b508      	push	{r3, lr}
    f4a6:	4608      	mov	r0, r1
    f4a8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    f4aa:	461a      	mov	r2, r3
    f4ac:	47a0      	blx	r4
	return z_impl_z_current_get();
    f4ae:	f7fe f8cb 	bl	d648 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    f4b2:	f7f6 fe61 	bl	6178 <z_impl_k_thread_abort>

0000f4b6 <_ldiv5>:
{
    f4b6:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
	uint32_t v_lo = *v;
    f4ba:	e9d0 2400 	ldrd	r2, r4, [r0]
	__asm__ ("" : "+r" (m));
    f4be:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
    f4c2:	fba2 bc03 	umull	fp, ip, r2, r3
    f4c6:	eb1b 0603 	adds.w	r6, fp, r3
    f4ca:	eb4c 0503 	adc.w	r5, ip, r3
	result >>= 32;
    f4ce:	462f      	mov	r7, r5
	result += (uint64_t)v_hi * m;
    f4d0:	fba4 4503 	umull	r4, r5, r4, r3
    f4d4:	eb1b 0204 	adds.w	r2, fp, r4
	result >>= 32;
    f4d8:	f04f 0600 	mov.w	r6, #0
	result += (uint64_t)v_hi * m;
    f4dc:	eb4c 0105 	adc.w	r1, ip, r5
    f4e0:	19d2      	adds	r2, r2, r7
    f4e2:	eb46 0101 	adc.w	r1, r6, r1
	result += (uint64_t)v_hi * m;
    f4e6:	1863      	adds	r3, r4, r1
	result >>= 32;
    f4e8:	4632      	mov	r2, r6
	result += (uint64_t)v_hi * m;
    f4ea:	eb45 0202 	adc.w	r2, r5, r2
	*v = result;
    f4ee:	e9c0 3200 	strd	r3, r2, [r0]
}
    f4f2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

0000f4f6 <_get_digit>:
	if (*digit_count > 0) {
    f4f6:	680b      	ldr	r3, [r1, #0]
    f4f8:	2b00      	cmp	r3, #0
{
    f4fa:	b570      	push	{r4, r5, r6, lr}
    f4fc:	4604      	mov	r4, r0
	if (*digit_count > 0) {
    f4fe:	dd0f      	ble.n	f520 <_get_digit+0x2a>
		*fr *= 10U;
    f500:	6822      	ldr	r2, [r4, #0]
    f502:	6840      	ldr	r0, [r0, #4]
		--*digit_count;
    f504:	3b01      	subs	r3, #1
    f506:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
    f508:	210a      	movs	r1, #10
    f50a:	fba2 5601 	umull	r5, r6, r2, r1
    f50e:	fb01 6600 	mla	r6, r1, r0, r6
		*fr &= (BIT64(60) - 1U);
    f512:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
    f516:	e9c4 5300 	strd	r5, r3, [r4]
		rval = ((*fr >> 60) & 0xF) + '0';
    f51a:	0f30      	lsrs	r0, r6, #28
    f51c:	3030      	adds	r0, #48	; 0x30
}
    f51e:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
    f520:	2030      	movs	r0, #48	; 0x30
    f522:	e7fc      	b.n	f51e <_get_digit+0x28>

0000f524 <outs>:
{
    f524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f528:	4607      	mov	r7, r0
    f52a:	4688      	mov	r8, r1
    f52c:	4615      	mov	r5, r2
    f52e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    f530:	4614      	mov	r4, r2
    f532:	42b4      	cmp	r4, r6
    f534:	eba4 0005 	sub.w	r0, r4, r5
    f538:	d302      	bcc.n	f540 <outs+0x1c>
    f53a:	b93e      	cbnz	r6, f54c <outs+0x28>
    f53c:	7823      	ldrb	r3, [r4, #0]
    f53e:	b12b      	cbz	r3, f54c <outs+0x28>
		int rc = out((int)*sp++, ctx);
    f540:	f814 0b01 	ldrb.w	r0, [r4], #1
    f544:	4641      	mov	r1, r8
    f546:	47b8      	blx	r7
		if (rc < 0) {
    f548:	2800      	cmp	r0, #0
    f54a:	daf2      	bge.n	f532 <outs+0xe>
}
    f54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f550 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    f550:	4040      	eors	r0, r0
    f552:	f380 8811 	msr	BASEPRI, r0
    f556:	f04f 0004 	mov.w	r0, #4
    f55a:	df02      	svc	2
}
    f55c:	4770      	bx	lr

0000f55e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    f55e:	4770      	bx	lr

0000f560 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
    f560:	2300      	movs	r3, #0
	list->head = NULL;
    f562:	e9c0 3300 	strd	r3, r3, [r0]
}
    f566:	4770      	bx	lr

0000f568 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
    f568:	6803      	ldr	r3, [r0, #0]
    f56a:	b923      	cbnz	r3, f576 <log_list_add_tail+0xe>
		list->head = msg;
    f56c:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
    f56e:	2300      	movs	r3, #0
	list->tail = msg;
    f570:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    f572:	600b      	str	r3, [r1, #0]
}
    f574:	4770      	bx	lr
		list->tail->next = msg;
    f576:	6843      	ldr	r3, [r0, #4]
    f578:	6019      	str	r1, [r3, #0]
    f57a:	e7f8      	b.n	f56e <log_list_add_tail+0x6>

0000f57c <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
    f57c:	6800      	ldr	r0, [r0, #0]
    f57e:	4770      	bx	lr

0000f580 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
    f580:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
    f582:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
    f584:	b108      	cbz	r0, f58a <log_list_head_get+0xa>
		list->head = list->head->next;
    f586:	6802      	ldr	r2, [r0, #0]
    f588:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
    f58a:	4770      	bx	lr

0000f58c <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    f58c:	6843      	ldr	r3, [r0, #4]
}
    f58e:	7958      	ldrb	r0, [r3, #5]
    f590:	4770      	bx	lr

0000f592 <z_log_msg_std_alloc>:
{
    f592:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    f594:	f7f5 fc12 	bl	4dbc <log_msg_chunk_alloc>
	if (msg != NULL) {
    f598:	b118      	cbz	r0, f5a2 <z_log_msg_std_alloc+0x10>
		msg->hdr.ref_cnt = 1;
    f59a:	2301      	movs	r3, #1
    f59c:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    f59e:	2300      	movs	r3, #0
    f5a0:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
    f5a2:	bd08      	pop	{r3, pc}

0000f5a4 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    f5a4:	f000 bdd3 	b.w	1014e <sys_clock_cycle_get_32>

0000f5a8 <dummy_timestamp>:
    f5a8:	2000      	movs	r0, #0
    f5aa:	4770      	bx	lr

0000f5ac <log_0>:
{
    f5ac:	b538      	push	{r3, r4, r5, lr}
    f5ae:	4605      	mov	r5, r0
    f5b0:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
    f5b2:	f7ff ffee 	bl	f592 <z_log_msg_std_alloc>

	if (msg != NULL) {
    f5b6:	b128      	cbz	r0, f5c4 <log_0+0x18>
		msg->str = str;
    f5b8:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
    f5ba:	4621      	mov	r1, r4
}
    f5bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
    f5c0:	f7f5 bace 	b.w	4b60 <msg_finalize>
}
    f5c4:	bd38      	pop	{r3, r4, r5, pc}

0000f5c6 <log_1>:
{
    f5c6:	b570      	push	{r4, r5, r6, lr}
    f5c8:	4606      	mov	r6, r0
    f5ca:	460d      	mov	r5, r1
    f5cc:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    f5ce:	f7ff ffe0 	bl	f592 <z_log_msg_std_alloc>

	if (msg != NULL) {
    f5d2:	b158      	cbz	r0, f5ec <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
    f5d4:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
    f5d6:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
    f5d8:	2101      	movs	r1, #1
    f5da:	f361 1207 	bfi	r2, r1, #4, #4
    f5de:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
    f5e0:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
    f5e2:	4621      	mov	r1, r4
}
    f5e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
    f5e8:	f7f5 baba 	b.w	4b60 <msg_finalize>
}
    f5ec:	bd70      	pop	{r4, r5, r6, pc}

0000f5ee <log_2>:
{
    f5ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f5f2:	4680      	mov	r8, r0
    f5f4:	460f      	mov	r7, r1
    f5f6:	4616      	mov	r6, r2
    f5f8:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    f5fa:	f7ff ffca 	bl	f592 <z_log_msg_std_alloc>

	if (msg != NULL) {
    f5fe:	b168      	cbz	r0, f61c <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
    f600:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
    f602:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
    f606:	2202      	movs	r2, #2
    f608:	f362 1307 	bfi	r3, r2, #4, #4
    f60c:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    f60e:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
    f612:	4629      	mov	r1, r5
}
    f614:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
    f618:	f7f5 baa2 	b.w	4b60 <msg_finalize>
}
    f61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f620 <log_3>:
{
    f620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f624:	4680      	mov	r8, r0
    f626:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    f62a:	460f      	mov	r7, r1
    f62c:	4616      	mov	r6, r2
    f62e:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    f630:	f7ff ffaf 	bl	f592 <z_log_msg_std_alloc>

	if (msg != NULL) {
    f634:	b170      	cbz	r0, f654 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
    f636:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
    f638:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
    f63c:	2203      	movs	r2, #3
    f63e:	f362 1307 	bfi	r3, r2, #4, #4
    f642:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    f644:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
    f648:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
    f64a:	4649      	mov	r1, r9
}
    f64c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
    f650:	f7f5 ba86 	b.w	4b60 <msg_finalize>
}
    f654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000f658 <log_n>:
{
    f658:	b510      	push	{r4, lr}
    f65a:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
    f65c:	f7f5 fc00 	bl	4e60 <log_msg_create_n>
		if (msg == NULL) {
    f660:	b120      	cbz	r0, f66c <log_n+0x14>
		msg_finalize(msg, src_level);
    f662:	4621      	mov	r1, r4
}
    f664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
    f668:	f7f5 ba7a 	b.w	4b60 <msg_finalize>
}
    f66c:	bd10      	pop	{r4, pc}

0000f66e <z_log_printk>:
{
    f66e:	b500      	push	{lr}
    f670:	b0a3      	sub	sp, #140	; 0x8c
    f672:	4602      	mov	r2, r0
    f674:	460b      	mov	r3, r1
			length = vsnprintk(str, sizeof(str), fmt, ap);
    f676:	a801      	add	r0, sp, #4
    f678:	2181      	movs	r1, #129	; 0x81
    f67a:	f7f3 fedd 	bl	3438 <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
    f67e:	2881      	cmp	r0, #129	; 0x81
    f680:	4602      	mov	r2, r0
    f682:	a901      	add	r1, sp, #4
    f684:	bf28      	it	cs
    f686:	2281      	movcs	r2, #129	; 0x81
    f688:	2000      	movs	r0, #0
    f68a:	f000 f8a4 	bl	f7d6 <log_msg_hexdump_create>
			if (msg == NULL) {
    f68e:	b118      	cbz	r0, f698 <z_log_printk+0x2a>
			msg_finalize(msg, src_level_union.structure);
    f690:	f04f 0100 	mov.w	r1, #0
    f694:	f7f5 fa64 	bl	4b60 <msg_finalize>
}
    f698:	b023      	add	sp, #140	; 0x8c
    f69a:	f85d fb04 	ldr.w	pc, [sp], #4

0000f69e <z_log_get_tag>:
}
    f69e:	2000      	movs	r0, #0
    f6a0:	4770      	bx	lr

0000f6a2 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    f6a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f6a6:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
    f6a8:	8903      	ldrh	r3, [r0, #8]
{
    f6aa:	f89d 7020 	ldrb.w	r7, [sp, #32]
    f6ae:	460e      	mov	r6, r1
    f6b0:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
    f6b2:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
    f6b6:	42a2      	cmp	r2, r4
    f6b8:	d803      	bhi.n	f6c2 <log_msg_hexdump_data_op+0x20>
		*length = 0;
    f6ba:	2300      	movs	r3, #0
    f6bc:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    f6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
    f6c2:	680b      	ldr	r3, [r1, #0]
    f6c4:	4423      	add	r3, r4
    f6c6:	4293      	cmp	r3, r2
		*length = available_len - offset;
    f6c8:	bf84      	itt	hi
    f6ca:	1b13      	subhi	r3, r2, r4
    f6cc:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    f6ce:	2a0c      	cmp	r2, #12
	req_len = *length;
    f6d0:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    f6d4:	d92a      	bls.n	f72c <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
    f6d6:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
    f6d8:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
    f6dc:	d82d      	bhi.n	f73a <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
    f6de:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    f6e0:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    f6e2:	454a      	cmp	r2, r9
    f6e4:	bf28      	it	cs
    f6e6:	464a      	movcs	r2, r9
    f6e8:	4615      	mov	r5, r2
		if (put_op) {
    f6ea:	4420      	add	r0, r4
    f6ec:	b317      	cbz	r7, f734 <log_msg_hexdump_data_op+0x92>
    f6ee:	4631      	mov	r1, r6
    f6f0:	f002 fdfa 	bl	122e8 <memcpy>
		req_len -= cpy_len;
    f6f4:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
    f6f8:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
    f6fa:	f1b9 0f00 	cmp.w	r9, #0
    f6fe:	d0de      	beq.n	f6be <log_msg_hexdump_data_op+0x1c>
    f700:	f1b8 0f00 	cmp.w	r8, #0
    f704:	d0db      	beq.n	f6be <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    f706:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    f70a:	454d      	cmp	r5, r9
    f70c:	bf28      	it	cs
    f70e:	464d      	movcs	r5, r9
		if (put_op) {
    f710:	1d20      	adds	r0, r4, #4
    f712:	4440      	add	r0, r8
    f714:	462a      	mov	r2, r5
    f716:	b1bf      	cbz	r7, f748 <log_msg_hexdump_data_op+0xa6>
    f718:	4631      	mov	r1, r6
    f71a:	f002 fde5 	bl	122e8 <memcpy>
		req_len -= cpy_len;
    f71e:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
    f722:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
    f726:	442e      	add	r6, r5
		offset = 0;
    f728:	2400      	movs	r4, #0
    f72a:	e7e6      	b.n	f6fa <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
    f72c:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
    f72e:	f04f 0800 	mov.w	r8, #0
    f732:	e7d6      	b.n	f6e2 <log_msg_hexdump_data_op+0x40>
    f734:	4601      	mov	r1, r0
    f736:	4630      	mov	r0, r6
    f738:	e7da      	b.n	f6f0 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
    f73a:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
    f73c:	2c1b      	cmp	r4, #27
    f73e:	d9dc      	bls.n	f6fa <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
    f740:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
    f744:	3c1c      	subs	r4, #28
    f746:	e7f9      	b.n	f73c <log_msg_hexdump_data_op+0x9a>
    f748:	4601      	mov	r1, r0
    f74a:	4630      	mov	r0, r6
    f74c:	e7e5      	b.n	f71a <log_msg_hexdump_data_op+0x78>

0000f74e <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    f74e:	3004      	adds	r0, #4
    f750:	f3bf 8f5b 	dmb	ish
    f754:	e850 3f00 	ldrex	r3, [r0]
    f758:	3301      	adds	r3, #1
    f75a:	e840 3200 	strex	r2, r3, [r0]
    f75e:	2a00      	cmp	r2, #0
    f760:	d1f8      	bne.n	f754 <log_msg_get+0x6>
    f762:	f3bf 8f5b 	dmb	ish
}
    f766:	4770      	bx	lr

0000f768 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    f768:	7a40      	ldrb	r0, [r0, #9]
}
    f76a:	0900      	lsrs	r0, r0, #4
    f76c:	4770      	bx	lr

0000f76e <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
    f76e:	7a43      	ldrb	r3, [r0, #9]
    f770:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
    f774:	ea4f 1213 	mov.w	r2, r3, lsr #4
    f778:	d216      	bcs.n	f7a8 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    f77a:	2a03      	cmp	r2, #3
    f77c:	d803      	bhi.n	f786 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
    f77e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    f782:	6948      	ldr	r0, [r1, #20]
    f784:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    f786:	2901      	cmp	r1, #1
    f788:	d803      	bhi.n	f792 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
    f78a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    f78e:	6988      	ldr	r0, [r1, #24]
    f790:	4770      	bx	lr
	cont = msg->payload.ext.next;
    f792:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    f794:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
    f796:	2906      	cmp	r1, #6
    f798:	d803      	bhi.n	f7a2 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
    f79a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    f79e:	6848      	ldr	r0, [r1, #4]
    f7a0:	4770      	bx	lr
		cont = cont->next;
    f7a2:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
    f7a4:	3907      	subs	r1, #7
		cont = cont->next;
    f7a6:	e7f6      	b.n	f796 <log_msg_arg_get+0x28>
		return 0;
    f7a8:	2000      	movs	r0, #0
}
    f7aa:	4770      	bx	lr

0000f7ac <log_msg_put>:
{
    f7ac:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    f7ae:	1d02      	adds	r2, r0, #4
    f7b0:	f3bf 8f5b 	dmb	ish
    f7b4:	e852 1f00 	ldrex	r1, [r2]
    f7b8:	3901      	subs	r1, #1
    f7ba:	e842 1c00 	strex	ip, r1, [r2]
    f7be:	f1bc 0f00 	cmp.w	ip, #0
    f7c2:	d1f7      	bne.n	f7b4 <log_msg_put+0x8>
    f7c4:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
    f7c8:	685b      	ldr	r3, [r3, #4]
    f7ca:	b90b      	cbnz	r3, f7d0 <log_msg_put+0x24>
		msg_free(msg);
    f7cc:	f7f5 bb0a 	b.w	4de4 <msg_free>
}
    f7d0:	4770      	bx	lr

0000f7d2 <log_msg_str_get>:
}
    f7d2:	6900      	ldr	r0, [r0, #16]
    f7d4:	4770      	bx	lr

0000f7d6 <log_msg_hexdump_create>:
{
    f7d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
    f7da:	f643 75ff 	movw	r5, #16383	; 0x3fff
    f7de:	4295      	cmp	r5, r2
{
    f7e0:	4680      	mov	r8, r0
    f7e2:	460e      	mov	r6, r1
    f7e4:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
    f7e6:	bf28      	it	cs
    f7e8:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
    f7ea:	f7f5 fae7 	bl	4dbc <log_msg_chunk_alloc>
	if (msg == NULL) {
    f7ee:	4604      	mov	r4, r0
    f7f0:	b378      	cbz	r0, f852 <log_msg_hexdump_create+0x7c>
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
    f7f2:	8902      	ldrh	r2, [r0, #8]
	msg->str = str;
    f7f4:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
    f7f8:	2301      	movs	r3, #1
    f7fa:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
    f7fc:	00ab      	lsls	r3, r5, #2
    f7fe:	f043 0301 	orr.w	r3, r3, #1
    f802:	f002 0202 	and.w	r2, r2, #2
    f806:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    f808:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
    f80a:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    f80c:	f100 0814 	add.w	r8, r0, #20
    f810:	d916      	bls.n	f840 <log_msg_hexdump_create+0x6a>
    f812:	6833      	ldr	r3, [r6, #0]
		msg->hdr.params.generic.ext = 1;
    f814:	7a02      	ldrb	r2, [r0, #8]
    f816:	6183      	str	r3, [r0, #24]
    f818:	6873      	ldr	r3, [r6, #4]
    f81a:	61c3      	str	r3, [r0, #28]
    f81c:	f042 0202 	orr.w	r2, r2, #2
		msg->payload.ext.next = NULL;
    f820:	2300      	movs	r3, #0
    f822:	6143      	str	r3, [r0, #20]
		msg->hdr.params.generic.ext = 1;
    f824:	7202      	strb	r2, [r0, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    f826:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    f828:	3d08      	subs	r5, #8
	while (length > 0) {
    f82a:	4699      	mov	r9, r3
    f82c:	b18d      	cbz	r5, f852 <log_msg_hexdump_create+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
    f82e:	f7f5 fac5 	bl	4dbc <log_msg_chunk_alloc>
		if (cont == NULL) {
    f832:	4607      	mov	r7, r0
    f834:	b980      	cbnz	r0, f858 <log_msg_hexdump_create+0x82>
			msg_free(msg);
    f836:	4620      	mov	r0, r4
    f838:	f7f5 fad4 	bl	4de4 <msg_free>
			return NULL;
    f83c:	463c      	mov	r4, r7
    f83e:	e008      	b.n	f852 <log_msg_hexdump_create+0x7c>
    f840:	462a      	mov	r2, r5
    f842:	4631      	mov	r1, r6
    f844:	4640      	mov	r0, r8
    f846:	f002 fd4f 	bl	122e8 <memcpy>
		msg->hdr.params.generic.ext = 0;
    f84a:	7a23      	ldrb	r3, [r4, #8]
    f84c:	f36f 0341 	bfc	r3, #1, #1
    f850:	7223      	strb	r3, [r4, #8]
}
    f852:	4620      	mov	r0, r4
    f854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
    f858:	2d1c      	cmp	r5, #28
    f85a:	462f      	mov	r7, r5
    f85c:	bf28      	it	cs
    f85e:	271c      	movcs	r7, #28
		*prev_cont = cont;
    f860:	f8c8 0000 	str.w	r0, [r8]
    f864:	4631      	mov	r1, r6
		cont->next = NULL;
    f866:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
    f86a:	4680      	mov	r8, r0
    f86c:	463a      	mov	r2, r7
    f86e:	3004      	adds	r0, #4
    f870:	f002 fd3a 	bl	122e8 <memcpy>
		data += chunk_length;
    f874:	443e      	add	r6, r7
		length -= chunk_length;
    f876:	1bed      	subs	r5, r5, r7
    f878:	e7d8      	b.n	f82c <log_msg_hexdump_create+0x56>

0000f87a <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
    f87a:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    f87c:	2400      	movs	r4, #0
    f87e:	9400      	str	r4, [sp, #0]
    f880:	f7ff ff0f 	bl	f6a2 <log_msg_hexdump_data_op>
}
    f884:	b002      	add	sp, #8
    f886:	bd10      	pop	{r4, pc}

0000f888 <buffer_write>:
{
    f888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f88a:	4606      	mov	r6, r0
    f88c:	460d      	mov	r5, r1
    f88e:	4614      	mov	r4, r2
    f890:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    f892:	4621      	mov	r1, r4
    f894:	4628      	mov	r0, r5
    f896:	463a      	mov	r2, r7
    f898:	47b0      	blx	r6
	} while (len != 0);
    f89a:	1a24      	subs	r4, r4, r0
		buf += processed;
    f89c:	4405      	add	r5, r0
	} while (len != 0);
    f89e:	d1f8      	bne.n	f892 <buffer_write+0xa>
}
    f8a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f8a2 <std_print>:
{
    f8a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f8a6:	b08e      	sub	sp, #56	; 0x38
    f8a8:	af0e      	add	r7, sp, #56	; 0x38
    f8aa:	4680      	mov	r8, r0
    f8ac:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
    f8ae:	f7ff ff90 	bl	f7d2 <log_msg_str_get>
    f8b2:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
    f8b4:	4640      	mov	r0, r8
    f8b6:	f7ff ff57 	bl	f768 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
    f8ba:	0083      	lsls	r3, r0, #2
    f8bc:	3307      	adds	r3, #7
    f8be:	f023 0307 	bic.w	r3, r3, #7
    f8c2:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
    f8c6:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
    f8c8:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
    f8ca:	f04f 0900 	mov.w	r9, #0
    f8ce:	45d1      	cmp	r9, sl
    f8d0:	d116      	bne.n	f900 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
    f8d2:	4640      	mov	r0, r8
    f8d4:	f7ff ff48 	bl	f768 <log_msg_nargs_get>
    f8d8:	280f      	cmp	r0, #15
    f8da:	d81e      	bhi.n	f91a <std_print+0x78>
    f8dc:	e8df f010 	tbh	[pc, r0, lsl #1]
    f8e0:	00200019 	.word	0x00200019
    f8e4:	002d0026 	.word	0x002d0026
    f8e8:	00410036 	.word	0x00410036
    f8ec:	005d004e 	.word	0x005d004e
    f8f0:	0081006e 	.word	0x0081006e
    f8f4:	00ad0096 	.word	0x00ad0096
    f8f8:	00e100c6 	.word	0x00e100c6
    f8fc:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
    f900:	4649      	mov	r1, r9
    f902:	4640      	mov	r0, r8
    f904:	f7ff ff33 	bl	f76e <log_msg_arg_get>
    f908:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
    f90c:	f109 0901 	add.w	r9, r9, #1
    f910:	e7dd      	b.n	f8ce <std_print+0x2c>
		print_formatted(output, str);
    f912:	4631      	mov	r1, r6
    f914:	4628      	mov	r0, r5
    f916:	f7f5 fb09 	bl	4f2c <print_formatted>
}
    f91a:	46bd      	mov	sp, r7
    f91c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
    f920:	6822      	ldr	r2, [r4, #0]
    f922:	4631      	mov	r1, r6
    f924:	4628      	mov	r0, r5
    f926:	f7f5 fb01 	bl	4f2c <print_formatted>
		break;
    f92a:	e7f6      	b.n	f91a <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
    f92c:	e9d4 2300 	ldrd	r2, r3, [r4]
    f930:	4631      	mov	r1, r6
    f932:	4628      	mov	r0, r5
    f934:	f7f5 fafa 	bl	4f2c <print_formatted>
		break;
    f938:	e7ef      	b.n	f91a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
    f93a:	68a3      	ldr	r3, [r4, #8]
    f93c:	9300      	str	r3, [sp, #0]
    f93e:	e9d4 2300 	ldrd	r2, r3, [r4]
    f942:	4631      	mov	r1, r6
    f944:	4628      	mov	r0, r5
    f946:	f7f5 faf1 	bl	4f2c <print_formatted>
		break;
    f94a:	e7e6      	b.n	f91a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    f94c:	68e3      	ldr	r3, [r4, #12]
    f94e:	9301      	str	r3, [sp, #4]
    f950:	68a3      	ldr	r3, [r4, #8]
    f952:	9300      	str	r3, [sp, #0]
    f954:	e9d4 2300 	ldrd	r2, r3, [r4]
    f958:	4631      	mov	r1, r6
    f95a:	4628      	mov	r0, r5
    f95c:	f7f5 fae6 	bl	4f2c <print_formatted>
		break;
    f960:	e7db      	b.n	f91a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    f962:	6923      	ldr	r3, [r4, #16]
    f964:	9302      	str	r3, [sp, #8]
    f966:	68e3      	ldr	r3, [r4, #12]
    f968:	9301      	str	r3, [sp, #4]
    f96a:	68a3      	ldr	r3, [r4, #8]
    f96c:	9300      	str	r3, [sp, #0]
    f96e:	e9d4 2300 	ldrd	r2, r3, [r4]
    f972:	4631      	mov	r1, r6
    f974:	4628      	mov	r0, r5
    f976:	f7f5 fad9 	bl	4f2c <print_formatted>
		break;
    f97a:	e7ce      	b.n	f91a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    f97c:	6963      	ldr	r3, [r4, #20]
    f97e:	9303      	str	r3, [sp, #12]
    f980:	6923      	ldr	r3, [r4, #16]
    f982:	9302      	str	r3, [sp, #8]
    f984:	68e3      	ldr	r3, [r4, #12]
    f986:	9301      	str	r3, [sp, #4]
    f988:	68a3      	ldr	r3, [r4, #8]
    f98a:	9300      	str	r3, [sp, #0]
    f98c:	e9d4 2300 	ldrd	r2, r3, [r4]
    f990:	4631      	mov	r1, r6
    f992:	4628      	mov	r0, r5
    f994:	f7f5 faca 	bl	4f2c <print_formatted>
		break;
    f998:	e7bf      	b.n	f91a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    f99a:	69a3      	ldr	r3, [r4, #24]
    f99c:	9304      	str	r3, [sp, #16]
    f99e:	6963      	ldr	r3, [r4, #20]
    f9a0:	9303      	str	r3, [sp, #12]
    f9a2:	6923      	ldr	r3, [r4, #16]
    f9a4:	9302      	str	r3, [sp, #8]
    f9a6:	68e3      	ldr	r3, [r4, #12]
    f9a8:	9301      	str	r3, [sp, #4]
    f9aa:	68a3      	ldr	r3, [r4, #8]
    f9ac:	9300      	str	r3, [sp, #0]
    f9ae:	e9d4 2300 	ldrd	r2, r3, [r4]
    f9b2:	4631      	mov	r1, r6
    f9b4:	4628      	mov	r0, r5
    f9b6:	f7f5 fab9 	bl	4f2c <print_formatted>
		break;
    f9ba:	e7ae      	b.n	f91a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    f9bc:	69e3      	ldr	r3, [r4, #28]
    f9be:	9305      	str	r3, [sp, #20]
    f9c0:	69a3      	ldr	r3, [r4, #24]
    f9c2:	9304      	str	r3, [sp, #16]
    f9c4:	6963      	ldr	r3, [r4, #20]
    f9c6:	9303      	str	r3, [sp, #12]
    f9c8:	6923      	ldr	r3, [r4, #16]
    f9ca:	9302      	str	r3, [sp, #8]
    f9cc:	68e3      	ldr	r3, [r4, #12]
    f9ce:	9301      	str	r3, [sp, #4]
    f9d0:	68a3      	ldr	r3, [r4, #8]
    f9d2:	9300      	str	r3, [sp, #0]
    f9d4:	e9d4 2300 	ldrd	r2, r3, [r4]
    f9d8:	4631      	mov	r1, r6
    f9da:	4628      	mov	r0, r5
    f9dc:	f7f5 faa6 	bl	4f2c <print_formatted>
		break;
    f9e0:	e79b      	b.n	f91a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    f9e2:	6a23      	ldr	r3, [r4, #32]
    f9e4:	9306      	str	r3, [sp, #24]
    f9e6:	69e3      	ldr	r3, [r4, #28]
    f9e8:	9305      	str	r3, [sp, #20]
    f9ea:	69a3      	ldr	r3, [r4, #24]
    f9ec:	9304      	str	r3, [sp, #16]
    f9ee:	6963      	ldr	r3, [r4, #20]
    f9f0:	9303      	str	r3, [sp, #12]
    f9f2:	6923      	ldr	r3, [r4, #16]
    f9f4:	9302      	str	r3, [sp, #8]
    f9f6:	68e3      	ldr	r3, [r4, #12]
    f9f8:	9301      	str	r3, [sp, #4]
    f9fa:	68a3      	ldr	r3, [r4, #8]
    f9fc:	9300      	str	r3, [sp, #0]
    f9fe:	e9d4 2300 	ldrd	r2, r3, [r4]
    fa02:	4631      	mov	r1, r6
    fa04:	4628      	mov	r0, r5
    fa06:	f7f5 fa91 	bl	4f2c <print_formatted>
		break;
    fa0a:	e786      	b.n	f91a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    fa0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fa0e:	9307      	str	r3, [sp, #28]
    fa10:	6a23      	ldr	r3, [r4, #32]
    fa12:	9306      	str	r3, [sp, #24]
    fa14:	69e3      	ldr	r3, [r4, #28]
    fa16:	9305      	str	r3, [sp, #20]
    fa18:	69a3      	ldr	r3, [r4, #24]
    fa1a:	9304      	str	r3, [sp, #16]
    fa1c:	6963      	ldr	r3, [r4, #20]
    fa1e:	9303      	str	r3, [sp, #12]
    fa20:	6923      	ldr	r3, [r4, #16]
    fa22:	9302      	str	r3, [sp, #8]
    fa24:	68e3      	ldr	r3, [r4, #12]
    fa26:	9301      	str	r3, [sp, #4]
    fa28:	68a3      	ldr	r3, [r4, #8]
    fa2a:	9300      	str	r3, [sp, #0]
    fa2c:	e9d4 2300 	ldrd	r2, r3, [r4]
    fa30:	4631      	mov	r1, r6
    fa32:	4628      	mov	r0, r5
    fa34:	f7f5 fa7a 	bl	4f2c <print_formatted>
		break;
    fa38:	e76f      	b.n	f91a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    fa3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    fa3c:	9308      	str	r3, [sp, #32]
    fa3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fa40:	9307      	str	r3, [sp, #28]
    fa42:	6a23      	ldr	r3, [r4, #32]
    fa44:	9306      	str	r3, [sp, #24]
    fa46:	69e3      	ldr	r3, [r4, #28]
    fa48:	9305      	str	r3, [sp, #20]
    fa4a:	69a3      	ldr	r3, [r4, #24]
    fa4c:	9304      	str	r3, [sp, #16]
    fa4e:	6963      	ldr	r3, [r4, #20]
    fa50:	9303      	str	r3, [sp, #12]
    fa52:	6923      	ldr	r3, [r4, #16]
    fa54:	9302      	str	r3, [sp, #8]
    fa56:	68e3      	ldr	r3, [r4, #12]
    fa58:	9301      	str	r3, [sp, #4]
    fa5a:	68a3      	ldr	r3, [r4, #8]
    fa5c:	9300      	str	r3, [sp, #0]
    fa5e:	e9d4 2300 	ldrd	r2, r3, [r4]
    fa62:	4631      	mov	r1, r6
    fa64:	4628      	mov	r0, r5
    fa66:	f7f5 fa61 	bl	4f2c <print_formatted>
		break;
    fa6a:	e756      	b.n	f91a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    fa6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    fa6e:	9309      	str	r3, [sp, #36]	; 0x24
    fa70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    fa72:	9308      	str	r3, [sp, #32]
    fa74:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fa76:	9307      	str	r3, [sp, #28]
    fa78:	6a23      	ldr	r3, [r4, #32]
    fa7a:	9306      	str	r3, [sp, #24]
    fa7c:	69e3      	ldr	r3, [r4, #28]
    fa7e:	9305      	str	r3, [sp, #20]
    fa80:	69a3      	ldr	r3, [r4, #24]
    fa82:	9304      	str	r3, [sp, #16]
    fa84:	6963      	ldr	r3, [r4, #20]
    fa86:	9303      	str	r3, [sp, #12]
    fa88:	6923      	ldr	r3, [r4, #16]
    fa8a:	9302      	str	r3, [sp, #8]
    fa8c:	68e3      	ldr	r3, [r4, #12]
    fa8e:	9301      	str	r3, [sp, #4]
    fa90:	68a3      	ldr	r3, [r4, #8]
    fa92:	9300      	str	r3, [sp, #0]
    fa94:	e9d4 2300 	ldrd	r2, r3, [r4]
    fa98:	4631      	mov	r1, r6
    fa9a:	4628      	mov	r0, r5
    fa9c:	f7f5 fa46 	bl	4f2c <print_formatted>
		break;
    faa0:	e73b      	b.n	f91a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    faa2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    faa4:	930a      	str	r3, [sp, #40]	; 0x28
    faa6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    faa8:	9309      	str	r3, [sp, #36]	; 0x24
    faaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    faac:	9308      	str	r3, [sp, #32]
    faae:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fab0:	9307      	str	r3, [sp, #28]
    fab2:	6a23      	ldr	r3, [r4, #32]
    fab4:	9306      	str	r3, [sp, #24]
    fab6:	69e3      	ldr	r3, [r4, #28]
    fab8:	9305      	str	r3, [sp, #20]
    faba:	69a3      	ldr	r3, [r4, #24]
    fabc:	9304      	str	r3, [sp, #16]
    fabe:	6963      	ldr	r3, [r4, #20]
    fac0:	9303      	str	r3, [sp, #12]
    fac2:	6923      	ldr	r3, [r4, #16]
    fac4:	9302      	str	r3, [sp, #8]
    fac6:	68e3      	ldr	r3, [r4, #12]
    fac8:	9301      	str	r3, [sp, #4]
    faca:	68a3      	ldr	r3, [r4, #8]
    facc:	9300      	str	r3, [sp, #0]
    face:	e9d4 2300 	ldrd	r2, r3, [r4]
    fad2:	4631      	mov	r1, r6
    fad4:	4628      	mov	r0, r5
    fad6:	f7f5 fa29 	bl	4f2c <print_formatted>
		break;
    fada:	e71e      	b.n	f91a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    fadc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    fade:	930b      	str	r3, [sp, #44]	; 0x2c
    fae0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    fae2:	930a      	str	r3, [sp, #40]	; 0x28
    fae4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    fae6:	9309      	str	r3, [sp, #36]	; 0x24
    fae8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    faea:	9308      	str	r3, [sp, #32]
    faec:	6a63      	ldr	r3, [r4, #36]	; 0x24
    faee:	9307      	str	r3, [sp, #28]
    faf0:	6a23      	ldr	r3, [r4, #32]
    faf2:	9306      	str	r3, [sp, #24]
    faf4:	69e3      	ldr	r3, [r4, #28]
    faf6:	9305      	str	r3, [sp, #20]
    faf8:	69a3      	ldr	r3, [r4, #24]
    fafa:	9304      	str	r3, [sp, #16]
    fafc:	6963      	ldr	r3, [r4, #20]
    fafe:	9303      	str	r3, [sp, #12]
    fb00:	6923      	ldr	r3, [r4, #16]
    fb02:	9302      	str	r3, [sp, #8]
    fb04:	68e3      	ldr	r3, [r4, #12]
    fb06:	9301      	str	r3, [sp, #4]
    fb08:	68a3      	ldr	r3, [r4, #8]
    fb0a:	9300      	str	r3, [sp, #0]
    fb0c:	e9d4 2300 	ldrd	r2, r3, [r4]
    fb10:	4631      	mov	r1, r6
    fb12:	4628      	mov	r0, r5
    fb14:	f7f5 fa0a 	bl	4f2c <print_formatted>
		break;
    fb18:	e6ff      	b.n	f91a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    fb1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    fb1c:	930c      	str	r3, [sp, #48]	; 0x30
    fb1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    fb20:	930b      	str	r3, [sp, #44]	; 0x2c
    fb22:	6b23      	ldr	r3, [r4, #48]	; 0x30
    fb24:	930a      	str	r3, [sp, #40]	; 0x28
    fb26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    fb28:	9309      	str	r3, [sp, #36]	; 0x24
    fb2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    fb2c:	9308      	str	r3, [sp, #32]
    fb2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fb30:	9307      	str	r3, [sp, #28]
    fb32:	6a23      	ldr	r3, [r4, #32]
    fb34:	9306      	str	r3, [sp, #24]
    fb36:	69e3      	ldr	r3, [r4, #28]
    fb38:	9305      	str	r3, [sp, #20]
    fb3a:	69a3      	ldr	r3, [r4, #24]
    fb3c:	9304      	str	r3, [sp, #16]
    fb3e:	6963      	ldr	r3, [r4, #20]
    fb40:	9303      	str	r3, [sp, #12]
    fb42:	6923      	ldr	r3, [r4, #16]
    fb44:	9302      	str	r3, [sp, #8]
    fb46:	68e3      	ldr	r3, [r4, #12]
    fb48:	9301      	str	r3, [sp, #4]
    fb4a:	68a3      	ldr	r3, [r4, #8]
    fb4c:	9300      	str	r3, [sp, #0]
    fb4e:	e9d4 2300 	ldrd	r2, r3, [r4]
    fb52:	4631      	mov	r1, r6
    fb54:	4628      	mov	r0, r5
    fb56:	f7f5 f9e9 	bl	4f2c <print_formatted>
}
    fb5a:	e6de      	b.n	f91a <std_print+0x78>

0000fb5c <log_output_flush>:
		     output->control_block->offset,
    fb5c:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    fb5e:	6881      	ldr	r1, [r0, #8]
{
    fb60:	b510      	push	{r4, lr}
    fb62:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    fb64:	e9d2 2300 	ldrd	r2, r3, [r2]
    fb68:	6800      	ldr	r0, [r0, #0]
    fb6a:	f7ff fe8d 	bl	f888 <buffer_write>
	output->control_block->offset = 0;
    fb6e:	6863      	ldr	r3, [r4, #4]
    fb70:	2200      	movs	r2, #0
    fb72:	601a      	str	r2, [r3, #0]
}
    fb74:	bd10      	pop	{r4, pc}

0000fb76 <disk_access_init>:
{
    fb76:	b510      	push	{r4, lr}
	struct disk_info *disk = disk_access_get_di(pdrv);
    fb78:	f7f5 fcb2 	bl	54e0 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
    fb7c:	b130      	cbz	r0, fb8c <disk_access_init+0x16>
    fb7e:	68c3      	ldr	r3, [r0, #12]
    fb80:	b123      	cbz	r3, fb8c <disk_access_init+0x16>
				(disk->ops->init != NULL)) {
    fb82:	681b      	ldr	r3, [r3, #0]
	if ((disk != NULL) && (disk->ops != NULL) &&
    fb84:	b113      	cbz	r3, fb8c <disk_access_init+0x16>
}
    fb86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rc = disk->ops->init(disk);
    fb8a:	4718      	bx	r3
}
    fb8c:	f06f 0015 	mvn.w	r0, #21
    fb90:	bd10      	pop	{r4, pc}

0000fb92 <disk_access_status>:
{
    fb92:	b510      	push	{r4, lr}
	struct disk_info *disk = disk_access_get_di(pdrv);
    fb94:	f7f5 fca4 	bl	54e0 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
    fb98:	b130      	cbz	r0, fba8 <disk_access_status+0x16>
    fb9a:	68c3      	ldr	r3, [r0, #12]
    fb9c:	b123      	cbz	r3, fba8 <disk_access_status+0x16>
				(disk->ops->status != NULL)) {
    fb9e:	685b      	ldr	r3, [r3, #4]
	if ((disk != NULL) && (disk->ops != NULL) &&
    fba0:	b113      	cbz	r3, fba8 <disk_access_status+0x16>
}
    fba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rc = disk->ops->status(disk);
    fba6:	4718      	bx	r3
}
    fba8:	f06f 0015 	mvn.w	r0, #21
    fbac:	bd10      	pop	{r4, pc}

0000fbae <disk_access_read>:
{
    fbae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fbb2:	460d      	mov	r5, r1
    fbb4:	4616      	mov	r6, r2
    fbb6:	461f      	mov	r7, r3
	struct disk_info *disk = disk_access_get_di(pdrv);
    fbb8:	f7f5 fc92 	bl	54e0 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
    fbbc:	b150      	cbz	r0, fbd4 <disk_access_read+0x26>
    fbbe:	68c3      	ldr	r3, [r0, #12]
    fbc0:	b143      	cbz	r3, fbd4 <disk_access_read+0x26>
				(disk->ops->read != NULL)) {
    fbc2:	689c      	ldr	r4, [r3, #8]
	if ((disk != NULL) && (disk->ops != NULL) &&
    fbc4:	b134      	cbz	r4, fbd4 <disk_access_read+0x26>
		rc = disk->ops->read(disk, data_buf, start_sector, num_sector);
    fbc6:	463b      	mov	r3, r7
    fbc8:	4632      	mov	r2, r6
    fbca:	4629      	mov	r1, r5
    fbcc:	46a4      	mov	ip, r4
}
    fbce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = disk->ops->read(disk, data_buf, start_sector, num_sector);
    fbd2:	4760      	bx	ip
}
    fbd4:	f06f 0015 	mvn.w	r0, #21
    fbd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000fbdc <disk_access_write>:
{
    fbdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fbe0:	460d      	mov	r5, r1
    fbe2:	4616      	mov	r6, r2
    fbe4:	461f      	mov	r7, r3
	struct disk_info *disk = disk_access_get_di(pdrv);
    fbe6:	f7f5 fc7b 	bl	54e0 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
    fbea:	b150      	cbz	r0, fc02 <disk_access_write+0x26>
    fbec:	68c3      	ldr	r3, [r0, #12]
    fbee:	b143      	cbz	r3, fc02 <disk_access_write+0x26>
				(disk->ops->write != NULL)) {
    fbf0:	68dc      	ldr	r4, [r3, #12]
	if ((disk != NULL) && (disk->ops != NULL) &&
    fbf2:	b134      	cbz	r4, fc02 <disk_access_write+0x26>
		rc = disk->ops->write(disk, data_buf, start_sector, num_sector);
    fbf4:	463b      	mov	r3, r7
    fbf6:	4632      	mov	r2, r6
    fbf8:	4629      	mov	r1, r5
    fbfa:	46a4      	mov	ip, r4
}
    fbfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = disk->ops->write(disk, data_buf, start_sector, num_sector);
    fc00:	4760      	bx	ip
}
    fc02:	f06f 0015 	mvn.w	r0, #21
    fc06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000fc0a <disk_access_ioctl>:
{
    fc0a:	b570      	push	{r4, r5, r6, lr}
    fc0c:	460c      	mov	r4, r1
    fc0e:	4615      	mov	r5, r2
	struct disk_info *disk = disk_access_get_di(pdrv);
    fc10:	f7f5 fc66 	bl	54e0 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
    fc14:	b140      	cbz	r0, fc28 <__kernel_ram_size+0x18>
    fc16:	68c3      	ldr	r3, [r0, #12]
    fc18:	b133      	cbz	r3, fc28 <__kernel_ram_size+0x18>
				(disk->ops->ioctl != NULL)) {
    fc1a:	691b      	ldr	r3, [r3, #16]
	if ((disk != NULL) && (disk->ops != NULL) &&
    fc1c:	b123      	cbz	r3, fc28 <__kernel_ram_size+0x18>
		rc = disk->ops->ioctl(disk, cmd, buf);
    fc1e:	462a      	mov	r2, r5
    fc20:	4621      	mov	r1, r4
}
    fc22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rc = disk->ops->ioctl(disk, cmd, buf);
    fc26:	4718      	bx	r3
}
    fc28:	f06f 0015 	mvn.w	r0, #21
    fc2c:	bd70      	pop	{r4, r5, r6, pc}

0000fc2e <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    fc2e:	2200      	movs	r2, #0
    fc30:	e9c0 2200 	strd	r2, r2, [r0]
    fc34:	6082      	str	r2, [r0, #8]
}
    fc36:	4770      	bx	lr

0000fc38 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    fc38:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    fc3a:	6800      	ldr	r0, [r0, #0]
    fc3c:	f7f5 be0e 	b.w	585c <z_arm_fatal_error>

0000fc40 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    fc40:	2100      	movs	r1, #0
    fc42:	2001      	movs	r0, #1
    fc44:	f7f5 be0a 	b.w	585c <z_arm_fatal_error>

0000fc48 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    fc48:	b508      	push	{r3, lr}
	handler();
    fc4a:	f7f5 fea7 	bl	599c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    fc4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    fc52:	f7f5 bf83 	b.w	5b5c <z_arm_exc_exit>

0000fc56 <_stdout_hook_default>:
}
    fc56:	f04f 30ff 	mov.w	r0, #4294967295
    fc5a:	4770      	bx	lr

0000fc5c <__errno>:
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    fc5c:	f7fc b82c 	b.w	bcb8 <z_impl_z_errno>

0000fc60 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    fc60:	b084      	sub	sp, #16
    fc62:	ab04      	add	r3, sp, #16
    fc64:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    fc68:	f89d 3004 	ldrb.w	r3, [sp, #4]
    fc6c:	2b06      	cmp	r3, #6
    fc6e:	d108      	bne.n	fc82 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    fc70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fc74:	2201      	movs	r2, #1
    fc76:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    fc7a:	f3bf 8f4f 	dsb	sy
        __WFE();
    fc7e:	bf20      	wfe
    while (true)
    fc80:	e7fd      	b.n	fc7e <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    fc82:	b004      	add	sp, #16
    fc84:	4770      	bx	lr

0000fc86 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    fc86:	b084      	sub	sp, #16
    fc88:	ab04      	add	r3, sp, #16
    fc8a:	e903 0007 	stmdb	r3, {r0, r1, r2}
    fc8e:	2300      	movs	r3, #0
    fc90:	f383 8811 	msr	BASEPRI, r3
    fc94:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    fc98:	b004      	add	sp, #16
    fc9a:	4770      	bx	lr

0000fc9c <fatfs_tell>:
	return f_tell((FIL *)zfp->filep);
    fc9c:	6803      	ldr	r3, [r0, #0]
}
    fc9e:	6b98      	ldr	r0, [r3, #56]	; 0x38
    fca0:	4770      	bx	lr

0000fca2 <fatfs_statvfs>:
{
    fca2:	b513      	push	{r0, r1, r4, lr}
	res = f_getfree(&mountp->mnt_point[1], &f_bfree, &fs);
    fca4:	68c0      	ldr	r0, [r0, #12]
{
    fca6:	4614      	mov	r4, r2
	DWORD f_bfree = 0;
    fca8:	2300      	movs	r3, #0
	res = f_getfree(&mountp->mnt_point[1], &f_bfree, &fs);
    fcaa:	466a      	mov	r2, sp
    fcac:	a901      	add	r1, sp, #4
    fcae:	3001      	adds	r0, #1
	DWORD f_bfree = 0;
    fcb0:	9301      	str	r3, [sp, #4]
	res = f_getfree(&mountp->mnt_point[1], &f_bfree, &fs);
    fcb2:	f001 fe77 	bl	119a4 <f_getfree>
	if (res != FR_OK) {
    fcb6:	b968      	cbnz	r0, fcd4 <fatfs_statvfs+0x32>
	stat->f_bfree = f_bfree;
    fcb8:	9b01      	ldr	r3, [sp, #4]
	stat->f_frsize = fs->csize * stat->f_bsize;
    fcba:	9a00      	ldr	r2, [sp, #0]
	stat->f_bfree = f_bfree;
    fcbc:	60e3      	str	r3, [r4, #12]
	stat->f_bsize = FF_MIN_SS;
    fcbe:	f44f 7300 	mov.w	r3, #512	; 0x200
    fcc2:	6023      	str	r3, [r4, #0]
	stat->f_frsize = fs->csize * stat->f_bsize;
    fcc4:	8953      	ldrh	r3, [r2, #10]
    fcc6:	025b      	lsls	r3, r3, #9
    fcc8:	6063      	str	r3, [r4, #4]
	stat->f_blocks = (fs->n_fatent - 2);
    fcca:	69d3      	ldr	r3, [r2, #28]
    fccc:	3b02      	subs	r3, #2
    fcce:	60a3      	str	r3, [r4, #8]
}
    fcd0:	b002      	add	sp, #8
    fcd2:	bd10      	pop	{r4, pc}
		return -EIO;
    fcd4:	f06f 0004 	mvn.w	r0, #4
    fcd8:	e7fa      	b.n	fcd0 <fatfs_statvfs+0x2e>

0000fcda <sys_get_be32>:
    fcda:	7803      	ldrb	r3, [r0, #0]
    fcdc:	7842      	ldrb	r2, [r0, #1]
    fcde:	7881      	ldrb	r1, [r0, #2]
 *
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_be32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    fce0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	return ((uint16_t)src[0] << 8) | src[1];
    fce4:	78c3      	ldrb	r3, [r0, #3]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    fce6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
    fcea:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
    fcee:	4770      	bx	lr

0000fcf0 <spi_release>:
				     const struct spi_config *config)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->release(dev, config);
    fcf0:	6883      	ldr	r3, [r0, #8]
    fcf2:	685b      	ldr	r3, [r3, #4]
    fcf4:	4718      	bx	r3

0000fcf6 <sdhc_is_retryable>:
	switch (err) {
    fcf6:	f110 0f74 	cmn.w	r0, #116	; 0x74
    fcfa:	d007      	beq.n	fd0c <sdhc_is_retryable+0x16>
    fcfc:	1d43      	adds	r3, r0, #5
    fcfe:	d005      	beq.n	fd0c <sdhc_is_retryable+0x16>
    fd00:	f110 0f8a 	cmn.w	r0, #138	; 0x8a
    fd04:	bf14      	ite	ne
    fd06:	2000      	movne	r0, #0
    fd08:	2001      	moveq	r0, #1
    fd0a:	4770      	bx	lr
    fd0c:	2001      	movs	r0, #1
}
    fd0e:	4770      	bx	lr

0000fd10 <disk_spi_sdhc_access_status>:
	struct sdhc_spi_data *data = dev->data;
    fd10:	6903      	ldr	r3, [r0, #16]
	return data->status;
    fd12:	691b      	ldr	r3, [r3, #16]
}
    fd14:	7c18      	ldrb	r0, [r3, #16]
    fd16:	4770      	bx	lr

0000fd18 <k_msleep>:
{
    fd18:	b538      	push	{r3, r4, r5, lr}
    fd1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    fd1e:	f240 34e7 	movw	r4, #999	; 0x3e7
    fd22:	2500      	movs	r5, #0
    fd24:	fbc1 4500 	smlal	r4, r5, r1, r0
    fd28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fd2c:	2300      	movs	r3, #0
    fd2e:	4620      	mov	r0, r4
    fd30:	4629      	mov	r1, r5
    fd32:	f7f1 f9c5 	bl	10c0 <__aeabi_uldivmod>
}
    fd36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
    fd3a:	f7fd bc55 	b.w	d5e8 <z_impl_k_sleep>

0000fd3e <sdhc_map_flags>:
{
    fd3e:	4603      	mov	r3, r0
	if (flags < 0) {
    fd40:	1e08      	subs	r0, r1, #0
    fd42:	da01      	bge.n	fd48 <sdhc_map_flags+0xa>
    fd44:	4770      	bx	lr
	for (; map->mask != 0U; map++) {
    fd46:	3302      	adds	r3, #2
    fd48:	781a      	ldrb	r2, [r3, #0]
    fd4a:	b10a      	cbz	r2, fd50 <sdhc_map_flags+0x12>
		if ((flags & map->mask) == map->mask) {
    fd4c:	4382      	bics	r2, r0
    fd4e:	d1fa      	bne.n	fd46 <sdhc_map_flags+0x8>
	return -map->err;
    fd50:	7858      	ldrb	r0, [r3, #1]
    fd52:	4240      	negs	r0, r0
}
    fd54:	4770      	bx	lr

0000fd56 <sdhc_retry_ok>:

/* Called at the end of a retry loop.  Returns if the minimum try
 * count and timeout has passed.  Delays/yields on retry.
 */
static inline bool sdhc_retry_ok(struct sdhc_retry *retry)
{
    fd56:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
	int32_t remain = retry->end - k_uptime_get_32();
    fd5a:	6805      	ldr	r5, [r0, #0]
{
    fd5c:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
    fd5e:	f002 fa85 	bl	1226c <z_impl_k_uptime_ticks>

	if (retry->tries < SDHC_MIN_TRIES) {
    fd62:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
    fd66:	2b13      	cmp	r3, #19
    fd68:	dc08      	bgt.n	fd7c <sdhc_retry_ok+0x26>
		retry->tries++;
		if (retry->sleep != 0U) {
    fd6a:	88e0      	ldrh	r0, [r4, #6]
		retry->tries++;
    fd6c:	3301      	adds	r3, #1
    fd6e:	80a3      	strh	r3, [r4, #4]
		if (retry->sleep != 0U) {
    fd70:	b108      	cbz	r0, fd76 <sdhc_retry_ok+0x20>
		return true;
	}

	if (remain >= 0) {
		if (retry->sleep > 0) {
			k_msleep(retry->sleep);
    fd72:	f7ff ffd1 	bl	fd18 <k_msleep>
		return true;
    fd76:	2001      	movs	r0, #1

		return true;
	}

	return false;
}
    fd78:	e8bd 8878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, pc}
    fd7c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    fd80:	fba0 bc06 	umull	fp, ip, r0, r6
    fd84:	fb06 cc01 	mla	ip, r6, r1, ip
    fd88:	ea4f 32db 	mov.w	r2, fp, lsr #15
    fd8c:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
	int32_t remain = retry->end - k_uptime_get_32();
    fd90:	1aad      	subs	r5, r5, r2
	if (remain >= 0) {
    fd92:	2d00      	cmp	r5, #0
    fd94:	db05      	blt.n	fda2 <sdhc_retry_ok+0x4c>
		if (retry->sleep > 0) {
    fd96:	88e0      	ldrh	r0, [r4, #6]
    fd98:	2800      	cmp	r0, #0
    fd9a:	d1ea      	bne.n	fd72 <sdhc_retry_ok+0x1c>
	z_impl_k_yield();
    fd9c:	f7fd fb10 	bl	d3c0 <z_impl_k_yield>
    fda0:	e7e9      	b.n	fd76 <sdhc_retry_ok+0x20>
	return false;
    fda2:	2000      	movs	r0, #0
    fda4:	e7e8      	b.n	fd78 <sdhc_retry_ok+0x22>

0000fda6 <sdhc_spi_rx_u8>:
{
    fda6:	b507      	push	{r0, r1, r2, lr}
	int err = sdhc_spi_rx_bytes(data, buf, sizeof(buf));
    fda8:	2201      	movs	r2, #1
    fdaa:	a901      	add	r1, sp, #4
    fdac:	f7f7 f93a 	bl	7024 <sdhc_spi_rx_bytes>
	if (err != 0) {
    fdb0:	b908      	cbnz	r0, fdb6 <sdhc_spi_rx_u8+0x10>
	return buf[0];
    fdb2:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
    fdb6:	b003      	add	sp, #12
    fdb8:	f85d fb04 	ldr.w	pc, [sp], #4

0000fdbc <sdhc_retry_init>:
{
    fdbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fdc0:	4606      	mov	r6, r0
    fdc2:	460f      	mov	r7, r1
    fdc4:	4690      	mov	r8, r2
	return z_impl_k_uptime_ticks();
    fdc6:	f002 fa51 	bl	1226c <z_impl_k_uptime_ticks>
    fdca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    fdce:	fba0 4503 	umull	r4, r5, r0, r3
    fdd2:	fb03 5501 	mla	r5, r3, r1, r5
    fdd6:	0be1      	lsrs	r1, r4, #15
    fdd8:	ea41 4145 	orr.w	r1, r1, r5, lsl #17
	retry->end = k_uptime_get_32() + timeout;
    fddc:	440f      	add	r7, r1
	retry->tries = 0;
    fdde:	2300      	movs	r3, #0
	retry->end = k_uptime_get_32() + timeout;
    fde0:	6037      	str	r7, [r6, #0]
	retry->tries = 0;
    fde2:	80b3      	strh	r3, [r6, #4]
	retry->sleep = sleep;
    fde4:	f8a6 8006 	strh.w	r8, [r6, #6]
}
    fde8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000fdec <sdhc_spi_skip_until_start>:
{
    fdec:	b513      	push	{r0, r1, r4, lr}
	sdhc_retry_init(&retry, SDHC_READY_TIMEOUT, 0);
    fdee:	2200      	movs	r2, #0
{
    fdf0:	4604      	mov	r4, r0
	sdhc_retry_init(&retry, SDHC_READY_TIMEOUT, 0);
    fdf2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    fdf6:	4668      	mov	r0, sp
    fdf8:	f7ff ffe0 	bl	fdbc <sdhc_retry_init>
		status = sdhc_spi_rx_u8(data);
    fdfc:	4620      	mov	r0, r4
    fdfe:	f7ff ffd2 	bl	fda6 <sdhc_spi_rx_u8>
		if (status < 0) {
    fe02:	2800      	cmp	r0, #0
    fe04:	db08      	blt.n	fe18 <sdhc_spi_skip_until_start+0x2c>
		if ((status & SDHC_START) == 0) {
    fe06:	0603      	lsls	r3, r0, #24
    fe08:	d506      	bpl.n	fe18 <sdhc_spi_skip_until_start+0x2c>
	} while (sdhc_retry_ok(&retry));
    fe0a:	4668      	mov	r0, sp
    fe0c:	f7ff ffa3 	bl	fd56 <sdhc_retry_ok>
    fe10:	2800      	cmp	r0, #0
    fe12:	d1f3      	bne.n	fdfc <sdhc_spi_skip_until_start+0x10>
	return -ETIMEDOUT;
    fe14:	f06f 0073 	mvn.w	r0, #115	; 0x73
}
    fe18:	b002      	add	sp, #8
    fe1a:	bd10      	pop	{r4, pc}

0000fe1c <sdhc_spi_cmd_r37_raw.part.0>:
static int sdhc_spi_cmd_r37_raw(struct sdhc_spi_data *data,
    fe1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fe1e:	4605      	mov	r5, r0
    fe20:	460f      	mov	r7, r1
	status = sdhc_spi_skip_until_start(data);
    fe22:	f7ff ffe3 	bl	fdec <sdhc_spi_skip_until_start>
	err = sdhc_spi_rx_bytes(data, buf, sizeof(buf));
    fe26:	2204      	movs	r2, #4
    fe28:	eb0d 0102 	add.w	r1, sp, r2
	status = sdhc_spi_skip_until_start(data);
    fe2c:	4606      	mov	r6, r0
	err = sdhc_spi_rx_bytes(data, buf, sizeof(buf));
    fe2e:	4628      	mov	r0, r5
    fe30:	f7f7 f8f8 	bl	7024 <sdhc_spi_rx_bytes>
    fe34:	4604      	mov	r4, r0
	*reply = sys_get_be32(buf);
    fe36:	a801      	add	r0, sp, #4
    fe38:	f7ff ff4f 	bl	fcda <sys_get_be32>
    fe3c:	6038      	str	r0, [r7, #0]
	sdhc_spi_rx_u8(data);
    fe3e:	4628      	mov	r0, r5
    fe40:	f7ff ffb1 	bl	fda6 <sdhc_spi_rx_u8>
}
    fe44:	2c00      	cmp	r4, #0
    fe46:	bf14      	ite	ne
    fe48:	4620      	movne	r0, r4
    fe4a:	4630      	moveq	r0, r6
    fe4c:	b003      	add	sp, #12
    fe4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000fe50 <sdhc_spi_skip_until_ready>:
{
    fe50:	b513      	push	{r0, r1, r4, lr}
	sdhc_retry_init(&retry, SDHC_READY_TIMEOUT, 0);
    fe52:	2200      	movs	r2, #0
{
    fe54:	4604      	mov	r4, r0
	sdhc_retry_init(&retry, SDHC_READY_TIMEOUT, 0);
    fe56:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    fe5a:	4668      	mov	r0, sp
    fe5c:	f7ff ffae 	bl	fdbc <sdhc_retry_init>
		status = sdhc_spi_rx_u8(data);
    fe60:	4620      	mov	r0, r4
    fe62:	f7ff ffa0 	bl	fda6 <sdhc_spi_rx_u8>
		if (status < 0) {
    fe66:	2800      	cmp	r0, #0
    fe68:	db07      	blt.n	fe7a <sdhc_spi_skip_until_ready+0x2a>
		if (status == 0) {
    fe6a:	d108      	bne.n	fe7e <sdhc_spi_skip_until_ready+0x2e>
	} while (sdhc_retry_ok(&retry));
    fe6c:	4668      	mov	r0, sp
    fe6e:	f7ff ff72 	bl	fd56 <sdhc_retry_ok>
    fe72:	2800      	cmp	r0, #0
    fe74:	d1f4      	bne.n	fe60 <sdhc_spi_skip_until_ready+0x10>
	return -ETIMEDOUT;
    fe76:	f06f 0073 	mvn.w	r0, #115	; 0x73
}
    fe7a:	b002      	add	sp, #8
    fe7c:	bd10      	pop	{r4, pc}
		if (status == 0xFF) {
    fe7e:	28ff      	cmp	r0, #255	; 0xff
    fe80:	d101      	bne.n	fe86 <sdhc_spi_skip_until_ready+0x36>
			return 0;
    fe82:	2000      	movs	r0, #0
    fe84:	e7f9      	b.n	fe7a <sdhc_spi_skip_until_ready+0x2a>
		status = sdhc_spi_rx_u8(data);
    fe86:	4620      	mov	r0, r4
    fe88:	f7ff ff8d 	bl	fda6 <sdhc_spi_rx_u8>
		if (status < 0) {
    fe8c:	2800      	cmp	r0, #0
    fe8e:	dbf4      	blt.n	fe7a <sdhc_spi_skip_until_ready+0x2a>
		if (status == 0xFF) {
    fe90:	28ff      	cmp	r0, #255	; 0xff
    fe92:	d0f6      	beq.n	fe82 <sdhc_spi_skip_until_ready+0x32>
		return -EPROTO;
    fe94:	f06f 0046 	mvn.w	r0, #70	; 0x46
    fe98:	e7ef      	b.n	fe7a <sdhc_spi_skip_until_ready+0x2a>

0000fe9a <sdhc_spi_tx>:
{
    fe9a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct spi_buf spi_bufs[] = {
    fe9c:	e9cd 1200 	strd	r1, r2, [sp]
	const struct spi_buf_set tx = {
    fea0:	2201      	movs	r2, #1
	return sdhc_spi_trace(data, 1,
    fea2:	e9d0 0100 	ldrd	r0, r1, [r0]
	const struct spi_buf_set tx = {
    fea6:	f8cd d008 	str.w	sp, [sp, #8]
    feaa:	9203      	str	r2, [sp, #12]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    feac:	6883      	ldr	r3, [r0, #8]
    feae:	aa02      	add	r2, sp, #8
    feb0:	681c      	ldr	r4, [r3, #0]
    feb2:	2300      	movs	r3, #0
    feb4:	47a0      	blx	r4
}
    feb6:	b004      	add	sp, #16
    feb8:	bd10      	pop	{r4, pc}

0000feba <sdhc_spi_tx_cmd>:
{
    feba:	b513      	push	{r0, r1, r4, lr}
	buf[0] = SDHC_TX | (cmd & ~SDHC_START);
    febc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    fec0:	f88d 1000 	strb.w	r1, [sp]
	sys_put_be16(val >> 16, dst);
    fec4:	0c13      	lsrs	r3, r2, #16
	dst[0] = val >> 8;
    fec6:	0e11      	lsrs	r1, r2, #24
{
    fec8:	4604      	mov	r4, r0
    feca:	f88d 1001 	strb.w	r1, [sp, #1]
	dst[1] = val;
    fece:	f88d 3002 	strb.w	r3, [sp, #2]
    fed2:	f88d 2004 	strb.w	r2, [sp, #4]
	dst[0] = val >> 8;
    fed6:	f3c2 2307 	ubfx	r3, r2, #8, #8
	buf[SDHC_CMD_BODY_SIZE] = crc7_be(0, buf, SDHC_CMD_BODY_SIZE) | 0x01;
    feda:	4669      	mov	r1, sp
    fedc:	2205      	movs	r2, #5
    fede:	2000      	movs	r0, #0
    fee0:	f88d 3003 	strb.w	r3, [sp, #3]
    fee4:	f7ff fa39 	bl	f35a <crc7_be>
    fee8:	f040 0001 	orr.w	r0, r0, #1
    feec:	f88d 0005 	strb.w	r0, [sp, #5]
	return sdhc_spi_tx(data, buf, sizeof(buf));
    fef0:	2206      	movs	r2, #6
    fef2:	4669      	mov	r1, sp
    fef4:	4620      	mov	r0, r4
    fef6:	f7ff ffd0 	bl	fe9a <sdhc_spi_tx>
}
    fefa:	b002      	add	sp, #8
    fefc:	bd10      	pop	{r4, pc}

0000fefe <sdhc_spi_recover>:
	return sdhc_spi_cmd_r1(data, SDHC_SEND_STATUS, 0);
    fefe:	2200      	movs	r2, #0
    ff00:	210d      	movs	r1, #13
    ff02:	f7f7 b94b 	b.w	719c <sdhc_spi_cmd_r1>

0000ff06 <sdhc_spi_read.part.0>:
static int sdhc_spi_read(struct sdhc_spi_data *data,
    ff06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ff08:	461e      	mov	r6, r3
	if (data->high_capacity) {
    ff0a:	7a03      	ldrb	r3, [r0, #8]
static int sdhc_spi_read(struct sdhc_spi_data *data,
    ff0c:	4605      	mov	r5, r0
    ff0e:	460f      	mov	r7, r1
	if (data->high_capacity) {
    ff10:	b903      	cbnz	r3, ff14 <sdhc_spi_read.part.0+0xe>
		addr = sector * SDMMC_DEFAULT_BLOCK_SIZE;
    ff12:	0252      	lsls	r2, r2, #9
	err = sdhc_spi_cmd_r1(data, SDHC_READ_MULTIPLE_BLOCK, addr);
    ff14:	2112      	movs	r1, #18
    ff16:	4628      	mov	r0, r5
    ff18:	f7f7 f940 	bl	719c <sdhc_spi_cmd_r1>
	if (err != 0) {
    ff1c:	4604      	mov	r4, r0
    ff1e:	b188      	cbz	r0, ff44 <sdhc_spi_read.part.0+0x3e>
	spi_release(data->spi, data->spi_cfg);
    ff20:	e9d5 0100 	ldrd	r0, r1, [r5]
    ff24:	f7ff fee4 	bl	fcf0 <spi_release>
}
    ff28:	4620      	mov	r0, r4
    ff2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = sdhc_spi_rx_block(data, buf, SDMMC_DEFAULT_BLOCK_SIZE);
    ff2c:	f44f 7200 	mov.w	r2, #512	; 0x200
    ff30:	4639      	mov	r1, r7
    ff32:	4628      	mov	r0, r5
    ff34:	f7f7 f8a6 	bl	7084 <sdhc_spi_rx_block>
		if (err != 0) {
    ff38:	4604      	mov	r4, r0
    ff3a:	2800      	cmp	r0, #0
    ff3c:	d1f0      	bne.n	ff20 <sdhc_spi_read.part.0+0x1a>
		buf += SDMMC_DEFAULT_BLOCK_SIZE;
    ff3e:	f507 7700 	add.w	r7, r7, #512	; 0x200
	for (; count != 0U; count--) {
    ff42:	3e01      	subs	r6, #1
    ff44:	2e00      	cmp	r6, #0
    ff46:	d1f1      	bne.n	ff2c <sdhc_spi_read.part.0+0x26>
	sdhc_spi_cmd_r1(data, SDHC_STOP_TRANSMISSION, 0);
    ff48:	4632      	mov	r2, r6
    ff4a:	210c      	movs	r1, #12
    ff4c:	4628      	mov	r0, r5
    ff4e:	f7f7 f925 	bl	719c <sdhc_spi_cmd_r1>
	err = sdhc_spi_skip_until_ready(data);
    ff52:	4628      	mov	r0, r5
    ff54:	f7ff ff7c 	bl	fe50 <sdhc_spi_skip_until_ready>
    ff58:	4604      	mov	r4, r0
    ff5a:	e7e1      	b.n	ff20 <sdhc_spi_read.part.0+0x1a>

0000ff5c <set_starting_state>:
{
    ff5c:	b510      	push	{r4, lr}
	__asm__ volatile(
    ff5e:	f04f 0320 	mov.w	r3, #32
    ff62:	f3ef 8211 	mrs	r2, BASEPRI
    ff66:	f383 8812 	msr	BASEPRI_MAX, r3
    ff6a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    ff6e:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    ff70:	f003 0407 	and.w	r4, r3, #7
    ff74:	2c01      	cmp	r4, #1
    ff76:	d106      	bne.n	ff86 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    ff78:	6001      	str	r1, [r0, #0]
	int err = 0;
    ff7a:	2000      	movs	r0, #0
	__asm__ volatile(
    ff7c:	f382 8811 	msr	BASEPRI, r2
    ff80:	f3bf 8f6f 	isb	sy
}
    ff84:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    ff86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    ff8a:	428b      	cmp	r3, r1
		err = -EALREADY;
    ff8c:	bf14      	ite	ne
    ff8e:	f04f 30ff 	movne.w	r0, #4294967295
    ff92:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    ff96:	e7f1      	b.n	ff7c <set_starting_state+0x20>

0000ff98 <set_on_state>:
	__asm__ volatile(
    ff98:	f04f 0320 	mov.w	r3, #32
    ff9c:	f3ef 8211 	mrs	r2, BASEPRI
    ffa0:	f383 8812 	msr	BASEPRI_MAX, r3
    ffa4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    ffa8:	6803      	ldr	r3, [r0, #0]
    ffaa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ffae:	f043 0302 	orr.w	r3, r3, #2
    ffb2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    ffb4:	f382 8811 	msr	BASEPRI, r2
    ffb8:	f3bf 8f6f 	isb	sy
}
    ffbc:	4770      	bx	lr

0000ffbe <onoff_started_callback>:
	return &data->mgr[type];
    ffbe:	6900      	ldr	r0, [r0, #16]
    ffc0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    ffc2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    ffc6:	2100      	movs	r1, #0
    ffc8:	4710      	bx	r2

0000ffca <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    ffca:	2000      	movs	r0, #0
    ffcc:	f7fa bf0e 	b.w	adec <nrfx_clock_stop>

0000ffd0 <api_stop>:
	return stop(dev, subsys, CTX_API);
    ffd0:	2280      	movs	r2, #128	; 0x80
    ffd2:	f7f7 bbe5 	b.w	77a0 <stop>

0000ffd6 <blocking_start_callback>:
{
    ffd6:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    ffd8:	f7fc bb66 	b.w	c6a8 <z_impl_k_sem_give>

0000ffdc <api_start>:
{
    ffdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ffe0:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
    ffe2:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    ffe4:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    ffe6:	434c      	muls	r4, r1
{
    ffe8:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    ffea:	f104 0048 	add.w	r0, r4, #72	; 0x48
    ffee:	2180      	movs	r1, #128	; 0x80
    fff0:	4428      	add	r0, r5
{
    fff2:	4690      	mov	r8, r2
    fff4:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
    fff6:	f7ff ffb1 	bl	ff5c <set_starting_state>
	if (err < 0) {
    fffa:	2800      	cmp	r0, #0
    fffc:	db06      	blt.n	1000c <CONFIG_PM_SRAM_SIZE+0xc>
	subdata->cb = cb;
    fffe:	4425      	add	r5, r4
	subdata->user_data = user_data;
   10000:	e9c5 8710 	strd	r8, r7, [r5, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   10004:	6873      	ldr	r3, [r6, #4]
   10006:	591b      	ldr	r3, [r3, r4]
   10008:	4798      	blx	r3
	return 0;
   1000a:	2000      	movs	r0, #0
}
   1000c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010010 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10010:	6843      	ldr	r3, [r0, #4]
   10012:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   10014:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   10018:	600b      	str	r3, [r1, #0]
}
   1001a:	2000      	movs	r0, #0
   1001c:	4770      	bx	lr

0001001e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1001e:	6843      	ldr	r3, [r0, #4]
   10020:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   10022:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   10026:	4042      	eors	r2, r0
   10028:	400a      	ands	r2, r1
   1002a:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1002c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   10030:	2000      	movs	r0, #0
   10032:	4770      	bx	lr

00010034 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10034:	6843      	ldr	r3, [r0, #4]
   10036:	685b      	ldr	r3, [r3, #4]
}
   10038:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1003a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1003e:	4770      	bx	lr

00010040 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10040:	6843      	ldr	r3, [r0, #4]
   10042:	685b      	ldr	r3, [r3, #4]
}
   10044:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   10046:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1004a:	4770      	bx	lr

0001004c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1004c:	6843      	ldr	r3, [r0, #4]
   1004e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   10050:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   10054:	404b      	eors	r3, r1
    p_reg->OUT = value;
   10056:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1005a:	2000      	movs	r0, #0
   1005c:	4770      	bx	lr

0001005e <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   1005e:	b530      	push	{r4, r5, lr}
   10060:	4604      	mov	r4, r0
	while (*count) {
   10062:	6808      	ldr	r0, [r1, #0]
   10064:	b908      	cbnz	r0, 1006a <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
   10066:	6010      	str	r0, [r2, #0]
	return NULL;
   10068:	e004      	b.n	10074 <spi_context_get_next_buf.constprop.0+0x16>
		if (((*current)->len / dfs) != 0) {
   1006a:	6823      	ldr	r3, [r4, #0]
   1006c:	685d      	ldr	r5, [r3, #4]
   1006e:	b115      	cbz	r5, 10076 <spi_context_get_next_buf.constprop.0+0x18>
			return (*current)->buf;
   10070:	6818      	ldr	r0, [r3, #0]
			*buf_len = (*current)->len / dfs;
   10072:	6015      	str	r5, [r2, #0]
}
   10074:	bd30      	pop	{r4, r5, pc}
		++(*current);
   10076:	3308      	adds	r3, #8
		--(*count);
   10078:	3801      	subs	r0, #1
		++(*current);
   1007a:	6023      	str	r3, [r4, #0]
		--(*count);
   1007c:	6008      	str	r0, [r1, #0]
   1007e:	e7f0      	b.n	10062 <spi_context_get_next_buf.constprop.0+0x4>

00010080 <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   10080:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   10082:	6803      	ldr	r3, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   10084:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   10086:	b1e3      	cbz	r3, 100c2 <_spi_context_cs_control.isra.0+0x42>
   10088:	6898      	ldr	r0, [r3, #8]
   1008a:	b1d0      	cbz	r0, 100c2 <_spi_context_cs_control.isra.0+0x42>
   1008c:	6805      	ldr	r5, [r0, #0]
   1008e:	b1c5      	cbz	r5, 100c2 <_spi_context_cs_control.isra.0+0x42>
		if (on) {
   10090:	b149      	cbz	r1, 100a6 <_spi_context_cs_control.isra.0+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   10092:	2101      	movs	r1, #1
   10094:	f7f7 ff7e 	bl	7f94 <gpio_pin_set_dt>
			k_busy_wait(ctx->config->cs->delay);
   10098:	6823      	ldr	r3, [r4, #0]
   1009a:	689b      	ldr	r3, [r3, #8]
   1009c:	6898      	ldr	r0, [r3, #8]
}
   1009e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   100a2:	f002 b8e5 	b.w	12270 <z_impl_k_busy_wait>
			if (!force_off &&
   100a6:	b912      	cbnz	r2, 100ae <_spi_context_cs_control.isra.0+0x2e>
   100a8:	889b      	ldrh	r3, [r3, #4]
   100aa:	04db      	lsls	r3, r3, #19
   100ac:	d409      	bmi.n	100c2 <_spi_context_cs_control.isra.0+0x42>
			k_busy_wait(ctx->config->cs->delay);
   100ae:	6880      	ldr	r0, [r0, #8]
   100b0:	f002 f8de 	bl	12270 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   100b4:	6823      	ldr	r3, [r4, #0]
   100b6:	2100      	movs	r1, #0
   100b8:	6898      	ldr	r0, [r3, #8]
}
   100ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   100be:	f7f7 bf69 	b.w	7f94 <gpio_pin_set_dt>
}
   100c2:	bd38      	pop	{r3, r4, r5, pc}

000100c4 <spi_context_unlock_unconditionally>:
{
   100c4:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   100c6:	2201      	movs	r2, #1
   100c8:	2100      	movs	r1, #0
{
   100ca:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   100cc:	f7ff ffd8 	bl	10080 <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
   100d0:	69a3      	ldr	r3, [r4, #24]
   100d2:	b933      	cbnz	r3, 100e2 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   100d4:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   100d6:	f104 0010 	add.w	r0, r4, #16
}
   100da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   100de:	f7fc bae3 	b.w	c6a8 <z_impl_k_sem_give>
   100e2:	bd10      	pop	{r4, pc}

000100e4 <spi_nrfx_release>:
#endif /* CONFIG_SPI_ASYNC */

static int spi_nrfx_release(const struct device *dev,
			    const struct spi_config *spi_cfg)
{
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   100e4:	6900      	ldr	r0, [r0, #16]

	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   100e6:	6803      	ldr	r3, [r0, #0]
   100e8:	428b      	cmp	r3, r1
{
   100ea:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   100ec:	d106      	bne.n	100fc <spi_nrfx_release+0x18>
		return -EINVAL;
	}

	if (dev_data->busy) {
   100ee:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
   100f2:	b934      	cbnz	r4, 10102 <spi_nrfx_release+0x1e>
		return -EBUSY;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   100f4:	f7ff ffe6 	bl	100c4 <spi_context_unlock_unconditionally>

	return 0;
   100f8:	4620      	mov	r0, r4
}
   100fa:	bd10      	pop	{r4, pc}
		return -EINVAL;
   100fc:	f06f 0015 	mvn.w	r0, #21
   10100:	e7fb      	b.n	100fa <spi_nrfx_release+0x16>
		return -EBUSY;
   10102:	f06f 000f 	mvn.w	r0, #15
   10106:	e7f8      	b.n	100fa <spi_nrfx_release+0x16>

00010108 <spi_0_init>:
		      &spi_##idx##z_config,				       \
		      POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		       \
		      &spi_nrfx_driver_api)

#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEVICE(0);
   10108:	b510      	push	{r4, lr}
   1010a:	4604      	mov	r4, r0
   1010c:	2200      	movs	r2, #0
   1010e:	2101      	movs	r1, #1
   10110:	2003      	movs	r0, #3
   10112:	f7f5 fc0d 	bl	5930 <z_arm_irq_priority_set>
   10116:	6920      	ldr	r0, [r4, #16]
   10118:	f7f7 ff76 	bl	8008 <spi_context_cs_configure_all>
   1011c:	2800      	cmp	r0, #0
   1011e:	db03      	blt.n	10128 <spi_0_init+0x20>
   10120:	6920      	ldr	r0, [r4, #16]
   10122:	f7ff ffcf 	bl	100c4 <spi_context_unlock_unconditionally>
   10126:	2000      	movs	r0, #0
   10128:	bd10      	pop	{r4, pc}

0001012a <spi_1_init>:
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
   1012a:	b510      	push	{r4, lr}
   1012c:	4604      	mov	r4, r0
   1012e:	2200      	movs	r2, #0
   10130:	2101      	movs	r1, #1
   10132:	2004      	movs	r0, #4
   10134:	f7f5 fbfc 	bl	5930 <z_arm_irq_priority_set>
   10138:	6920      	ldr	r0, [r4, #16]
   1013a:	f7f7 ff65 	bl	8008 <spi_context_cs_configure_all>
   1013e:	2800      	cmp	r0, #0
   10140:	db03      	blt.n	1014a <spi_1_init+0x20>
   10142:	6920      	ldr	r0, [r4, #16]
   10144:	f7ff ffbe 	bl	100c4 <spi_context_unlock_unconditionally>
   10148:	2000      	movs	r0, #0
   1014a:	bd10      	pop	{r4, pc}

0001014c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1014c:	4770      	bx	lr

0001014e <sys_clock_cycle_get_32>:
{
   1014e:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   10150:	f7f8 fa94 	bl	867c <z_nrf_rtc_timer_read>
}
   10154:	bd08      	pop	{r3, pc}

00010156 <ESB_SYS_TIMER_IRQHandler>:

	return 1;
}

ISR_DIRECT_DECLARE(ESB_SYS_TIMER_IRQHandler)
   10156:	4668      	mov	r0, sp
   10158:	f020 0107 	bic.w	r1, r0, #7
   1015c:	468d      	mov	sp, r1
   1015e:	b501      	push	{r0, lr}
{
	ISR_DIRECT_PM();
   10160:	f7f5 fc0e 	bl	5980 <_arch_isr_direct_pm>
   10164:	f7f5 fcfa 	bl	5b5c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ESB_SYS_TIMER_IRQHandler)
   10168:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1016c:	4685      	mov	sp, r0
   1016e:	4770      	bx	lr

00010170 <ld_dword>:
	rv = rv << 8 | ptr[2];
   10170:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
   10172:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
   10174:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
   10176:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
}
   1017a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   1017e:	4770      	bx	lr

00010180 <ld_qword>:
{
   10180:	b530      	push	{r4, r5, lr}
	rv = rv << 8 | ptr[4];
   10182:	6843      	ldr	r3, [r0, #4]
	rv = rv << 8 | ptr[3];
   10184:	78c4      	ldrb	r4, [r0, #3]
	rv = rv << 8 | ptr[2];
   10186:	ea44 2103 	orr.w	r1, r4, r3, lsl #8
   1018a:	7884      	ldrb	r4, [r0, #2]
   1018c:	0c1b      	lsrs	r3, r3, #16
   1018e:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
	rv = rv << 8 | ptr[1];
   10192:	7844      	ldrb	r4, [r0, #1]
   10194:	021b      	lsls	r3, r3, #8
   10196:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
   1019a:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
	rv = rv << 8 | ptr[0];
   1019e:	7804      	ldrb	r4, [r0, #0]
   101a0:	021b      	lsls	r3, r3, #8
}
   101a2:	ea44 2001 	orr.w	r0, r4, r1, lsl #8
   101a6:	ea43 6111 	orr.w	r1, r3, r1, lsr #24
   101aa:	bd30      	pop	{r4, r5, pc}

000101ac <st_dword>:
	*ptr++ = (BYTE)val; val >>= 8;
   101ac:	0a0b      	lsrs	r3, r1, #8
   101ae:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   101b0:	7043      	strb	r3, [r0, #1]
   101b2:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
   101b4:	0e09      	lsrs	r1, r1, #24
   101b6:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
   101b8:	70c1      	strb	r1, [r0, #3]
}
   101ba:	4770      	bx	lr

000101bc <st_qword>:
	*ptr++ = (BYTE)val; val >>= 8;
   101bc:	0a11      	lsrs	r1, r2, #8
   101be:	7002      	strb	r2, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   101c0:	7041      	strb	r1, [r0, #1]
   101c2:	0c11      	lsrs	r1, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
   101c4:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
   101c6:	70c2      	strb	r2, [r0, #3]
	*ptr++ = (BYTE)val; val >>= 8;
   101c8:	0a1a      	lsrs	r2, r3, #8
   101ca:	7103      	strb	r3, [r0, #4]
	*ptr++ = (BYTE)val; val >>= 8;
   101cc:	7142      	strb	r2, [r0, #5]
   101ce:	0c1a      	lsrs	r2, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
   101d0:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val; val >>= 8;
   101d2:	7081      	strb	r1, [r0, #2]
	*ptr++ = (BYTE)val; val >>= 8;
   101d4:	7182      	strb	r2, [r0, #6]
	*ptr++ = (BYTE)val;
   101d6:	71c3      	strb	r3, [r0, #7]
}
   101d8:	4770      	bx	lr

000101da <clst2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
   101da:	69c3      	ldr	r3, [r0, #28]
	clst -= 2;		/* Cluster number is origin from 2 */
   101dc:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
   101de:	3b02      	subs	r3, #2
   101e0:	428b      	cmp	r3, r1
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
   101e2:	bf83      	ittte	hi
   101e4:	8943      	ldrhhi	r3, [r0, #10]
   101e6:	6b00      	ldrhi	r0, [r0, #48]	; 0x30
   101e8:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
   101ec:	2000      	movls	r0, #0
}
   101ee:	4770      	bx	lr

000101f0 <sum_sfn>:
{
   101f0:	4602      	mov	r2, r0
   101f2:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
   101f6:	2000      	movs	r0, #0
		sum = (sum >> 1) + (sum << 7) + *dir++;
   101f8:	f812 3b01 	ldrb.w	r3, [r2], #1
   101fc:	eb03 0350 	add.w	r3, r3, r0, lsr #1
   10200:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
	} while (--n);
   10204:	428a      	cmp	r2, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
   10206:	b2d8      	uxtb	r0, r3
	} while (--n);
   10208:	d1f6      	bne.n	101f8 <sum_sfn+0x8>
}
   1020a:	4770      	bx	lr

0001020c <xdir_sum>:
{
   1020c:	b510      	push	{r4, lr}
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
   1020e:	7841      	ldrb	r1, [r0, #1]
{
   10210:	4604      	mov	r4, r0
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
   10212:	3101      	adds	r1, #1
	for (i = sum = 0; i < szblk; i++) {
   10214:	2000      	movs	r0, #0
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
   10216:	0149      	lsls	r1, r1, #5
	for (i = sum = 0; i < szblk; i++) {
   10218:	4602      	mov	r2, r0
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
   1021a:	2a02      	cmp	r2, #2
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
   1021c:	bf17      	itett	ne
   1021e:	5ca3      	ldrbne	r3, [r4, r2]
			i++;
   10220:	2203      	moveq	r2, #3
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
   10222:	eb03 33c0 	addne.w	r3, r3, r0, lsl #15
   10226:	eb03 0350 	addne.w	r3, r3, r0, lsr #1
	for (i = sum = 0; i < szblk; i++) {
   1022a:	f102 0201 	add.w	r2, r2, #1
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
   1022e:	bf18      	it	ne
   10230:	b298      	uxthne	r0, r3
	for (i = sum = 0; i < szblk; i++) {
   10232:	4291      	cmp	r1, r2
   10234:	d8f1      	bhi.n	1021a <xdir_sum+0xe>
}
   10236:	bd10      	pop	{r4, pc}

00010238 <validate>:
{
   10238:	b538      	push	{r3, r4, r5, lr}
   1023a:	460d      	mov	r5, r1
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
   1023c:	4604      	mov	r4, r0
   1023e:	b918      	cbnz	r0, 10248 <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
   10240:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
   10242:	2300      	movs	r3, #0
   10244:	602b      	str	r3, [r5, #0]
}
   10246:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
   10248:	6803      	ldr	r3, [r0, #0]
   1024a:	2b00      	cmp	r3, #0
   1024c:	d0f8      	beq.n	10240 <validate+0x8>
   1024e:	781a      	ldrb	r2, [r3, #0]
   10250:	2a00      	cmp	r2, #0
   10252:	d0f5      	beq.n	10240 <validate+0x8>
   10254:	8881      	ldrh	r1, [r0, #4]
   10256:	88da      	ldrh	r2, [r3, #6]
   10258:	4291      	cmp	r1, r2
   1025a:	d1f1      	bne.n	10240 <validate+0x8>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
   1025c:	7858      	ldrb	r0, [r3, #1]
   1025e:	f7fa fa45 	bl	a6ec <disk_status>
   10262:	f010 0001 	ands.w	r0, r0, #1
   10266:	d1eb      	bne.n	10240 <validate+0x8>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
   10268:	6823      	ldr	r3, [r4, #0]
   1026a:	e7eb      	b.n	10244 <validate+0xc>

0001026c <put_utf>:
{
   1026c:	b538      	push	{r3, r4, r5, lr}
   1026e:	460d      	mov	r5, r1
	wc = ff_uni2oem(chr, CODEPAGE);
   10270:	f240 11b5 	movw	r1, #437	; 0x1b5
{
   10274:	4614      	mov	r4, r2
	wc = ff_uni2oem(chr, CODEPAGE);
   10276:	f7fa faf7 	bl	a868 <ff_uni2oem>
	if (wc >= 0x100) {	/* Is this a DBC? */
   1027a:	28ff      	cmp	r0, #255	; 0xff
   1027c:	d907      	bls.n	1028e <put_utf+0x22>
		if (szb < 2) return 0;
   1027e:	2c01      	cmp	r4, #1
   10280:	d90b      	bls.n	1029a <put_utf+0x2e>
		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
   10282:	0a03      	lsrs	r3, r0, #8
   10284:	702b      	strb	r3, [r5, #0]
		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
   10286:	7068      	strb	r0, [r5, #1]
		return 2;
   10288:	2402      	movs	r4, #2
}
   1028a:	4620      	mov	r0, r4
   1028c:	bd38      	pop	{r3, r4, r5, pc}
	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
   1028e:	b130      	cbz	r0, 1029e <put_utf+0x32>
   10290:	2c00      	cmp	r4, #0
   10292:	d0fa      	beq.n	1028a <put_utf+0x1e>
	*buf++ = (TCHAR)wc;					/* Store the character */
   10294:	7028      	strb	r0, [r5, #0]
	return 1;
   10296:	2401      	movs	r4, #1
   10298:	e7f7      	b.n	1028a <put_utf+0x1e>
		if (szb < 2) return 0;
   1029a:	2400      	movs	r4, #0
   1029c:	e7f5      	b.n	1028a <put_utf+0x1e>
   1029e:	4604      	mov	r4, r0
   102a0:	e7f3      	b.n	1028a <put_utf+0x1e>

000102a2 <get_fileinfo>:
{
   102a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	fno->fname[0] = 0;			/* Invaidate file info */
   102a6:	2500      	movs	r5, #0
	FATFS *fs = dp->obj.fs;
   102a8:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;			/* Invaidate file info */
   102ac:	768d      	strb	r5, [r1, #26]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
   102ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
   102b0:	4606      	mov	r6, r0
   102b2:	460c      	mov	r4, r1
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
   102b4:	2b00      	cmp	r3, #0
   102b6:	d053      	beq.n	10360 <get_fileinfo+0xbe>
	if (fs->fs_type == FS_EXFAT) {	/* exFAT volume */
   102b8:	f898 3000 	ldrb.w	r3, [r8]
   102bc:	2b04      	cmp	r3, #4
   102be:	d154      	bne.n	1036a <get_fileinfo+0xc8>
		hs = 0;
   102c0:	4628      	mov	r0, r5
		si = SZDIRE * 2; di = 0;	/* 1st C1 entry in the entry block */
   102c2:	462e      	mov	r6, r5
   102c4:	2740      	movs	r7, #64	; 0x40
   102c6:	e023      	b.n	10310 <get_fileinfo+0x6e>
			if (si >= MAXDIRB(FF_MAX_LFN)) { di = 0; break; }	/* Truncated directory block? */
   102c8:	f5b7 7f18 	cmp.w	r7, #608	; 0x260
   102cc:	f080 80d3 	bcs.w	10476 <get_fileinfo+0x1d4>
			if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
   102d0:	06f9      	lsls	r1, r7, #27
   102d2:	bf08      	it	eq
   102d4:	3702      	addeq	r7, #2
			wc = ld_word(fs->dirbuf + si); si += 2; nc++;	/* Get a character */
   102d6:	19d3      	adds	r3, r2, r7
   102d8:	3501      	adds	r5, #1
	rv = rv << 8 | ptr[0];
   102da:	7859      	ldrb	r1, [r3, #1]
   102dc:	5dd3      	ldrb	r3, [r2, r7]
			wc = ld_word(fs->dirbuf + si); si += 2; nc++;	/* Get a character */
   102de:	3702      	adds	r7, #2
	rv = rv << 8 | ptr[0];
   102e0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			if (hs == 0 && IsSurrogate(wc)) {		/* Is it a surrogate? */
   102e4:	b928      	cbnz	r0, 102f2 <get_fileinfo+0x50>
   102e6:	f503 5220 	add.w	r2, r3, #10240	; 0x2800
   102ea:	b292      	uxth	r2, r2
   102ec:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   102f0:	d30d      	bcc.n	1030e <get_fileinfo+0x6c>
			nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
   102f2:	f106 011a 	add.w	r1, r6, #26
   102f6:	f1c6 02ff 	rsb	r2, r6, #255	; 0xff
   102fa:	4421      	add	r1, r4
   102fc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   10300:	f7ff ffb4 	bl	1026c <put_utf>
			if (nw == 0) { di = 0; break; }			/* Buffer overflow or wrong char? */
   10304:	2800      	cmp	r0, #0
   10306:	f000 80b6 	beq.w	10476 <get_fileinfo+0x1d4>
			di += nw;
   1030a:	4406      	add	r6, r0
			hs = 0;
   1030c:	2300      	movs	r3, #0
   1030e:	4618      	mov	r0, r3
		while (nc < fs->dirbuf[XDIR_NumName]) {
   10310:	f8d8 2010 	ldr.w	r2, [r8, #16]
   10314:	f892 3023 	ldrb.w	r3, [r2, #35]	; 0x23
   10318:	42ab      	cmp	r3, r5
   1031a:	d8d5      	bhi.n	102c8 <get_fileinfo+0x26>
		if (hs != 0) di = 0;					/* Broken surrogate pair? */
   1031c:	2800      	cmp	r0, #0
   1031e:	f040 80aa 	bne.w	10476 <get_fileinfo+0x1d4>
		if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
   10322:	2e00      	cmp	r6, #0
   10324:	f000 80a7 	beq.w	10476 <get_fileinfo+0x1d4>
		fno->fname[di] = 0;						/* Terminate the name */
   10328:	4426      	add	r6, r4
   1032a:	2300      	movs	r3, #0
   1032c:	76b3      	strb	r3, [r6, #26]
		fno->altname[0] = 0;					/* exFAT does not support SFN */
   1032e:	7363      	strb	r3, [r4, #13]
		fno->fattrib = fs->dirbuf[XDIR_Attr] & AM_MASKX;		/* Attribute */
   10330:	f8d8 2010 	ldr.w	r2, [r8, #16]
   10334:	7913      	ldrb	r3, [r2, #4]
   10336:	f003 0137 	and.w	r1, r3, #55	; 0x37
		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
   1033a:	06db      	lsls	r3, r3, #27
		fno->fattrib = fs->dirbuf[XDIR_Attr] & AM_MASKX;		/* Attribute */
   1033c:	7321      	strb	r1, [r4, #12]
		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
   1033e:	d411      	bmi.n	10364 <get_fileinfo+0xc2>
   10340:	f102 0038 	add.w	r0, r2, #56	; 0x38
   10344:	f7ff ff1c 	bl	10180 <ld_qword>
   10348:	e9c4 0100 	strd	r0, r1, [r4]
	rv = rv << 8 | ptr[0];
   1034c:	7b51      	ldrb	r1, [r2, #13]
   1034e:	7b13      	ldrb	r3, [r2, #12]
   10350:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		fno->ftime = ld_word(fs->dirbuf + XDIR_ModTime + 0);	/* Time */
   10354:	8163      	strh	r3, [r4, #10]
	rv = rv << 8 | ptr[0];
   10356:	7bd1      	ldrb	r1, [r2, #15]
   10358:	7b93      	ldrb	r3, [r2, #14]
   1035a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
   1035e:	8123      	strh	r3, [r4, #8]
}
   10360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
   10364:	2000      	movs	r0, #0
   10366:	4601      	mov	r1, r0
   10368:	e7ee      	b.n	10348 <get_fileinfo+0xa6>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
   1036a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1036c:	3301      	adds	r3, #1
   1036e:	d15f      	bne.n	10430 <get_fileinfo+0x18e>
		wc = dp->dir[si++];			/* Get a char */
   10370:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   10372:	2300      	movs	r3, #0
   10374:	1e4d      	subs	r5, r1, #1
   10376:	4618      	mov	r0, r3
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
   10378:	262e      	movs	r6, #46	; 0x2e
		wc = dp->dir[si++];			/* Get a char */
   1037a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
		if (wc == ' ') continue;	/* Skip padding spaces */
   1037e:	2a20      	cmp	r2, #32
		wc = dp->dir[si++];			/* Get a char */
   10380:	f100 0001 	add.w	r0, r0, #1
		if (wc == ' ') continue;	/* Skip padding spaces */
   10384:	d00c      	beq.n	103a0 <get_fileinfo+0xfe>
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
   10386:	2a05      	cmp	r2, #5
   10388:	bf08      	it	eq
   1038a:	22e5      	moveq	r2, #229	; 0xe5
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
   1038c:	2809      	cmp	r0, #9
   1038e:	d104      	bne.n	1039a <get_fileinfo+0xf8>
   10390:	2b0b      	cmp	r3, #11
   10392:	bf9e      	ittt	ls
   10394:	18e7      	addls	r7, r4, r3
   10396:	3301      	addls	r3, #1
   10398:	737e      	strbls	r6, [r7, #13]
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
   1039a:	18e7      	adds	r7, r4, r3
   1039c:	3301      	adds	r3, #1
   1039e:	737a      	strb	r2, [r7, #13]
	while (si < 11) {		/* Get SFN from SFN entry */
   103a0:	280b      	cmp	r0, #11
   103a2:	d1ea      	bne.n	1037a <get_fileinfo+0xd8>
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
   103a4:	18e2      	adds	r2, r4, r3
   103a6:	2000      	movs	r0, #0
   103a8:	7350      	strb	r0, [r2, #13]
	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
   103aa:	7ea2      	ldrb	r2, [r4, #26]
   103ac:	2a00      	cmp	r2, #0
   103ae:	d14b      	bne.n	10448 <get_fileinfo+0x1a6>
		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccesible */
   103b0:	2b00      	cmp	r3, #0
   103b2:	d040      	beq.n	10436 <get_fileinfo+0x194>
   103b4:	f06f 060c 	mvn.w	r6, #12
   103b8:	f104 000d 	add.w	r0, r4, #13
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
   103bc:	2508      	movs	r5, #8
   103be:	1b36      	subs	r6, r6, r4
   103c0:	1833      	adds	r3, r6, r0
   103c2:	f810 2b01 	ldrb.w	r2, [r0], #1
   103c6:	2a00      	cmp	r2, #0
   103c8:	d038      	beq.n	1043c <get_fileinfo+0x19a>
				if (wc == '.') lcf = NS_EXT;
   103ca:	2a2e      	cmp	r2, #46	; 0x2e
				wc = (WCHAR)fno->altname[si];
   103cc:	b293      	uxth	r3, r2
				if (wc == '.') lcf = NS_EXT;
   103ce:	d050      	beq.n	10472 <get_fileinfo+0x1d0>
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
   103d0:	f1a3 0741 	sub.w	r7, r3, #65	; 0x41
   103d4:	2f19      	cmp	r7, #25
   103d6:	d804      	bhi.n	103e2 <get_fileinfo+0x140>
   103d8:	7b0f      	ldrb	r7, [r1, #12]
   103da:	423d      	tst	r5, r7
   103dc:	d001      	beq.n	103e2 <get_fileinfo+0x140>
   103de:	f102 0320 	add.w	r3, r2, #32
				fno->fname[di] = (TCHAR)wc;
   103e2:	7303      	strb	r3, [r0, #12]
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
   103e4:	e7ec      	b.n	103c0 <get_fileinfo+0x11e>
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
   103e6:	f1b9 0f00 	cmp.w	r9, #0
   103ea:	d105      	bne.n	103f8 <get_fileinfo+0x156>
   103ec:	f500 5320 	add.w	r3, r0, #10240	; 0x2800
   103f0:	b29b      	uxth	r3, r3
   103f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   103f6:	d30b      	bcc.n	10410 <get_fileinfo+0x16e>
				nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
   103f8:	f107 011a 	add.w	r1, r7, #26
   103fc:	f1c7 02ff 	rsb	r2, r7, #255	; 0xff
   10400:	4421      	add	r1, r4
   10402:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   10406:	f7ff ff31 	bl	1026c <put_utf>
				if (nw == 0) { di = 0; break; }	/* Buffer overflow or wrong char? */
   1040a:	b148      	cbz	r0, 10420 <get_fileinfo+0x17e>
				di += nw;
   1040c:	4407      	add	r7, r0
				hs = 0;
   1040e:	2000      	movs	r0, #0
   10410:	3502      	adds	r5, #2
   10412:	4681      	mov	r9, r0
			while (fs->lfnbuf[si] != 0) {
   10414:	f8d8 300c 	ldr.w	r3, [r8, #12]
   10418:	5b58      	ldrh	r0, [r3, r5]
   1041a:	2800      	cmp	r0, #0
   1041c:	d1e3      	bne.n	103e6 <get_fileinfo+0x144>
   1041e:	4638      	mov	r0, r7
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
   10420:	f1b9 0f00 	cmp.w	r9, #0
   10424:	bf18      	it	ne
   10426:	2000      	movne	r0, #0
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
   10428:	1823      	adds	r3, r4, r0
   1042a:	2200      	movs	r2, #0
   1042c:	769a      	strb	r2, [r3, #26]
   1042e:	e79f      	b.n	10370 <get_fileinfo+0xce>
			hs = 0;
   10430:	46a9      	mov	r9, r5
			si = di = 0;
   10432:	462f      	mov	r7, r5
   10434:	e7ee      	b.n	10414 <get_fileinfo+0x172>
			fno->fname[di++] = '?';
   10436:	233f      	movs	r3, #63	; 0x3f
   10438:	76a3      	strb	r3, [r4, #26]
   1043a:	2301      	movs	r3, #1
		fno->fname[di] = 0;	/* Terminate the LFN */
   1043c:	4423      	add	r3, r4
   1043e:	2200      	movs	r2, #0
   10440:	769a      	strb	r2, [r3, #26]
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
   10442:	7b0b      	ldrb	r3, [r1, #12]
   10444:	b903      	cbnz	r3, 10448 <get_fileinfo+0x1a6>
   10446:	7363      	strb	r3, [r4, #13]
	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
   10448:	7acb      	ldrb	r3, [r1, #11]
   1044a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1044e:	7323      	strb	r3, [r4, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
   10450:	f101 001c 	add.w	r0, r1, #28
   10454:	f7ff fe8c 	bl	10170 <ld_dword>
   10458:	2300      	movs	r3, #0
   1045a:	6020      	str	r0, [r4, #0]
   1045c:	6063      	str	r3, [r4, #4]
	rv = rv << 8 | ptr[0];
   1045e:	7dca      	ldrb	r2, [r1, #23]
   10460:	7d8b      	ldrb	r3, [r1, #22]
   10462:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
   10466:	8163      	strh	r3, [r4, #10]
	rv = rv << 8 | ptr[0];
   10468:	7e4a      	ldrb	r2, [r1, #25]
   1046a:	7e0b      	ldrb	r3, [r1, #24]
   1046c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10470:	e775      	b.n	1035e <get_fileinfo+0xbc>
				if (wc == '.') lcf = NS_EXT;
   10472:	2510      	movs	r5, #16
   10474:	e7b5      	b.n	103e2 <get_fileinfo+0x140>
		if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
   10476:	233f      	movs	r3, #63	; 0x3f
   10478:	76a3      	strb	r3, [r4, #26]
   1047a:	2601      	movs	r6, #1
   1047c:	e754      	b.n	10328 <get_fileinfo+0x86>

0001047e <xname_sum>:
{
   1047e:	b538      	push	{r3, r4, r5, lr}
   10480:	4605      	mov	r5, r0
	WORD sum = 0;
   10482:	2400      	movs	r4, #0
	while ((chr = *name++) != 0) {
   10484:	f835 0b02 	ldrh.w	r0, [r5], #2
   10488:	b908      	cbnz	r0, 1048e <xname_sum+0x10>
}
   1048a:	4620      	mov	r0, r4
   1048c:	bd38      	pop	{r3, r4, r5, pc}
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
   1048e:	f7fa fa1f 	bl	a8d0 <ff_wtoupper>
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
   10492:	0863      	lsrs	r3, r4, #1
   10494:	eb03 34c4 	add.w	r4, r3, r4, lsl #15
   10498:	fa54 f380 	uxtab	r3, r4, r0
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
   1049c:	f3c3 044e 	ubfx	r4, r3, #1, #15
   104a0:	f3c0 2207 	ubfx	r2, r0, #8, #8
   104a4:	4414      	add	r4, r2
   104a6:	eb04 34c3 	add.w	r4, r4, r3, lsl #15
   104aa:	b2a4      	uxth	r4, r4
   104ac:	e7ea      	b.n	10484 <xname_sum+0x6>

000104ae <ld_clust.isra.0>:
	rv = rv << 8 | ptr[0];
   104ae:	7eca      	ldrb	r2, [r1, #27]
   104b0:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
   104b2:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
   104b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
   104b8:	bf01      	itttt	eq
   104ba:	7d48      	ldrbeq	r0, [r1, #21]
   104bc:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
   104be:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
   104c2:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
   104c6:	4618      	mov	r0, r3
   104c8:	4770      	bx	lr

000104ca <st_clust.isra.0>:
	*ptr++ = (BYTE)val; val >>= 8;
   104ca:	f3c2 2307 	ubfx	r3, r2, #8, #8
   104ce:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
   104d0:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
   104d2:	7803      	ldrb	r3, [r0, #0]
   104d4:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
   104d6:	bf01      	itttt	eq
   104d8:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
   104da:	750a      	strbeq	r2, [r1, #20]
   104dc:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
   104de:	754a      	strbeq	r2, [r1, #21]
}
   104e0:	4770      	bx	lr

000104e2 <init_alloc_info.isra.0>:
static void init_alloc_info (
   104e2:	b538      	push	{r3, r4, r5, lr}
   104e4:	4605      	mov	r5, r0
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
   104e6:	3034      	adds	r0, #52	; 0x34
static void init_alloc_info (
   104e8:	460c      	mov	r4, r1
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
   104ea:	f7ff fe41 	bl	10170 <ld_dword>
   104ee:	6088      	str	r0, [r1, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
   104f0:	f105 0038 	add.w	r0, r5, #56	; 0x38
   104f4:	f7ff fe44 	bl	10180 <ld_qword>
   104f8:	e9c4 0104 	strd	r0, r1, [r4, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
   104fc:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   10500:	f003 0302 	and.w	r3, r3, #2
   10504:	71e3      	strb	r3, [r4, #7]
	obj->n_frag = 0;										/* No last fragment info */
   10506:	2300      	movs	r3, #0
   10508:	61e3      	str	r3, [r4, #28]
}
   1050a:	bd38      	pop	{r3, r4, r5, pc}

0001050c <sync_window>:
{
   1050c:	b570      	push	{r4, r5, r6, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
   1050e:	78c3      	ldrb	r3, [r0, #3]
{
   10510:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
   10512:	b913      	cbnz	r3, 1051a <sync_window+0xe>
	FRESULT res = FR_OK;
   10514:	2500      	movs	r5, #0
}
   10516:	4628      	mov	r0, r5
   10518:	bd70      	pop	{r4, r5, r6, pc}
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
   1051a:	f100 063c 	add.w	r6, r0, #60	; 0x3c
   1051e:	6b82      	ldr	r2, [r0, #56]	; 0x38
   10520:	7840      	ldrb	r0, [r0, #1]
   10522:	2301      	movs	r3, #1
   10524:	4631      	mov	r1, r6
   10526:	f7fa f93b 	bl	a7a0 <disk_write>
   1052a:	4605      	mov	r5, r0
   1052c:	b980      	cbnz	r0, 10550 <sync_window+0x44>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
   1052e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   10530:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10532:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;	/* Clear window dirty flag */
   10534:	70e0      	strb	r0, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
   10536:	1acb      	subs	r3, r1, r3
   10538:	4293      	cmp	r3, r2
   1053a:	d2eb      	bcs.n	10514 <sync_window+0x8>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
   1053c:	78a3      	ldrb	r3, [r4, #2]
   1053e:	2b02      	cmp	r3, #2
   10540:	d1e8      	bne.n	10514 <sync_window+0x8>
   10542:	440a      	add	r2, r1
   10544:	7860      	ldrb	r0, [r4, #1]
   10546:	2301      	movs	r3, #1
   10548:	4631      	mov	r1, r6
   1054a:	f7fa f929 	bl	a7a0 <disk_write>
   1054e:	e7e2      	b.n	10516 <sync_window+0xa>
			res = FR_DISK_ERR;
   10550:	2501      	movs	r5, #1
   10552:	e7e0      	b.n	10516 <sync_window+0xa>

00010554 <move_window>:
{
   10554:	b538      	push	{r3, r4, r5, lr}
	if (sect != fs->winsect) {	/* Window offset changed? */
   10556:	6b83      	ldr	r3, [r0, #56]	; 0x38
   10558:	428b      	cmp	r3, r1
{
   1055a:	4605      	mov	r5, r0
   1055c:	460c      	mov	r4, r1
	if (sect != fs->winsect) {	/* Window offset changed? */
   1055e:	d010      	beq.n	10582 <move_window+0x2e>
		res = sync_window(fs);		/* Flush the window */
   10560:	f7ff ffd4 	bl	1050c <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
   10564:	b960      	cbnz	r0, 10580 <move_window+0x2c>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
   10566:	4622      	mov	r2, r4
   10568:	7868      	ldrb	r0, [r5, #1]
   1056a:	2301      	movs	r3, #1
   1056c:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   10570:	f7fa f8f4 	bl	a75c <disk_read>
				res = FR_DISK_ERR;
   10574:	2800      	cmp	r0, #0
   10576:	bf1c      	itt	ne
   10578:	f04f 34ff 	movne.w	r4, #4294967295
   1057c:	2001      	movne	r0, #1
			fs->winsect = sect;
   1057e:	63ac      	str	r4, [r5, #56]	; 0x38
}
   10580:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
   10582:	2000      	movs	r0, #0
   10584:	e7fc      	b.n	10580 <move_window+0x2c>

00010586 <change_bitmap>:
	clst -= 2;	/* The first bit corresponds to cluster #2 */
   10586:	3902      	subs	r1, #2
{
   10588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
   1058c:	6b46      	ldr	r6, [r0, #52]	; 0x34
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
   1058e:	f001 0407 	and.w	r4, r1, #7
   10592:	f04f 0a01 	mov.w	sl, #1
   10596:	fa0a f404 	lsl.w	r4, sl, r4
{
   1059a:	4605      	mov	r5, r0
   1059c:	4617      	mov	r7, r2
   1059e:	4698      	mov	r8, r3
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
   105a0:	eb06 3611 	add.w	r6, r6, r1, lsr #12
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
   105a4:	f3c1 09c8 	ubfx	r9, r1, #3, #9
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
   105a8:	b2e4      	uxtb	r4, r4
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
   105aa:	4631      	mov	r1, r6
   105ac:	4628      	mov	r0, r5
   105ae:	3601      	adds	r6, #1
   105b0:	f7ff ffd0 	bl	10554 <move_window>
   105b4:	b118      	cbz	r0, 105be <change_bitmap+0x38>
   105b6:	2001      	movs	r0, #1
}
   105b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   105bc:	4699      	mov	r9, r3
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
   105be:	eb05 0209 	add.w	r2, r5, r9
   105c2:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
   105c6:	4223      	tst	r3, r4
   105c8:	bf14      	ite	ne
   105ca:	2101      	movne	r1, #1
   105cc:	2100      	moveq	r1, #0
   105ce:	4541      	cmp	r1, r8
   105d0:	d014      	beq.n	105fc <change_bitmap+0x76>
				fs->win[i] ^= bm;	/* Flip the bit */
   105d2:	4063      	eors	r3, r4
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
   105d4:	3f01      	subs	r7, #1
				fs->win[i] ^= bm;	/* Flip the bit */
   105d6:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
				fs->wflag = 1;
   105da:	f885 a003 	strb.w	sl, [r5, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
   105de:	d0eb      	beq.n	105b8 <change_bitmap+0x32>
			} while (bm <<= 1);		/* Next bit */
   105e0:	0064      	lsls	r4, r4, #1
   105e2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   105e6:	d1ea      	bne.n	105be <change_bitmap+0x38>
		} while (++i < SS(fs));		/* Next byte */
   105e8:	f109 0301 	add.w	r3, r9, #1
   105ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
			bm = 1;
   105f0:	f04f 0401 	mov.w	r4, #1
		i = 0;
   105f4:	f04f 0900 	mov.w	r9, #0
		} while (++i < SS(fs));		/* Next byte */
   105f8:	d1e0      	bne.n	105bc <change_bitmap+0x36>
   105fa:	e7d6      	b.n	105aa <change_bitmap+0x24>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
   105fc:	2002      	movs	r0, #2
   105fe:	e7db      	b.n	105b8 <change_bitmap+0x32>

00010600 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
   10600:	2901      	cmp	r1, #1
{
   10602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10604:	4603      	mov	r3, r0
   10606:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
   10608:	f240 8090 	bls.w	1072c <get_fat+0x12c>
	FATFS *fs = obj->fs;
   1060c:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
   1060e:	69f2      	ldr	r2, [r6, #28]
   10610:	428a      	cmp	r2, r1
   10612:	f240 808b 	bls.w	1072c <get_fat+0x12c>
		switch (fs->fs_type) {
   10616:	7832      	ldrb	r2, [r6, #0]
   10618:	3a01      	subs	r2, #1
   1061a:	2a03      	cmp	r2, #3
   1061c:	f200 8086 	bhi.w	1072c <get_fat+0x12c>
   10620:	e8df f002 	tbb	[pc, r2]
   10624:	4e3b2902 	.word	0x4e3b2902
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   10628:	6ab1      	ldr	r1, [r6, #40]	; 0x28
			bc = (UINT)clst; bc += bc / 2;
   1062a:	eb04 0554 	add.w	r5, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   1062e:	eb01 2155 	add.w	r1, r1, r5, lsr #9
   10632:	4630      	mov	r0, r6
   10634:	f7ff ff8e 	bl	10554 <move_window>
   10638:	b110      	cbz	r0, 10640 <get_fat+0x40>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
   1063a:	f04f 30ff 	mov.w	r0, #4294967295
}
   1063e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
   10640:	1c6f      	adds	r7, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   10642:	6ab1      	ldr	r1, [r6, #40]	; 0x28
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
   10644:	f3c5 0508 	ubfx	r5, r5, #0, #9
   10648:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   1064a:	eb01 2157 	add.w	r1, r1, r7, lsr #9
   1064e:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
   10650:	f895 503c 	ldrb.w	r5, [r5, #60]	; 0x3c
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   10654:	f7ff ff7e 	bl	10554 <move_window>
   10658:	2800      	cmp	r0, #0
   1065a:	d1ee      	bne.n	1063a <get_fat+0x3a>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
   1065c:	f3c7 0708 	ubfx	r7, r7, #0, #9
   10660:	443e      	add	r6, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
   10662:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
   10664:	f896 003c 	ldrb.w	r0, [r6, #60]	; 0x3c
   10668:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
   1066c:	bf4c      	ite	mi
   1066e:	0900      	lsrmi	r0, r0, #4
   10670:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
   10674:	e7e3      	b.n	1063e <get_fat+0x3e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
   10676:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   10678:	4630      	mov	r0, r6
   1067a:	eb01 2114 	add.w	r1, r1, r4, lsr #8
   1067e:	f7ff ff69 	bl	10554 <move_window>
   10682:	2800      	cmp	r0, #0
   10684:	d1d9      	bne.n	1063a <get_fat+0x3a>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
   10686:	0061      	lsls	r1, r4, #1
   10688:	363c      	adds	r6, #60	; 0x3c
   1068a:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
   1068e:	1873      	adds	r3, r6, r1
	rv = rv << 8 | ptr[0];
   10690:	5c70      	ldrb	r0, [r6, r1]
   10692:	785c      	ldrb	r4, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
   10694:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
			break;
   10698:	e7d1      	b.n	1063e <get_fat+0x3e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
   1069a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   1069c:	4630      	mov	r0, r6
   1069e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   106a2:	f7ff ff57 	bl	10554 <move_window>
   106a6:	2800      	cmp	r0, #0
   106a8:	d1c7      	bne.n	1063a <get_fat+0x3a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
   106aa:	00a4      	lsls	r4, r4, #2
   106ac:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   106b0:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
   106b4:	4420      	add	r0, r4
   106b6:	f7ff fd5b 	bl	10170 <ld_dword>
   106ba:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
   106be:	e7be      	b.n	1063e <get_fat+0x3e>
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
   106c0:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
   106c4:	ea50 0201 	orrs.w	r2, r0, r1
   106c8:	79dd      	ldrb	r5, [r3, #7]
   106ca:	d001      	beq.n	106d0 <get_fat+0xd0>
   106cc:	689a      	ldr	r2, [r3, #8]
   106ce:	b902      	cbnz	r2, 106d2 <get_fat+0xd2>
   106d0:	bb65      	cbnz	r5, 1072c <get_fat+0x12c>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
   106d2:	689a      	ldr	r2, [r3, #8]
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
   106d4:	8977      	ldrh	r7, [r6, #10]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
   106d6:	2d02      	cmp	r5, #2
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
   106d8:	eba4 0202 	sub.w	r2, r4, r2
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
   106dc:	d10d      	bne.n	106fa <get_fat+0xfa>
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
   106de:	f110 33ff 	adds.w	r3, r0, #4294967295
   106e2:	f141 31ff 	adc.w	r1, r1, #4294967295
   106e6:	0a5b      	lsrs	r3, r3, #9
   106e8:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
   106ec:	fbb3 f3f7 	udiv	r3, r3, r7
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
   106f0:	429a      	cmp	r2, r3
   106f2:	d81b      	bhi.n	1072c <get_fat+0x12c>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
   106f4:	d01c      	beq.n	10730 <get_fat+0x130>
   106f6:	1c60      	adds	r0, r4, #1
   106f8:	e7a1      	b.n	1063e <get_fat+0x3e>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
   106fa:	2d03      	cmp	r5, #3
   106fc:	d102      	bne.n	10704 <get_fat+0x104>
   106fe:	6999      	ldr	r1, [r3, #24]
   10700:	4291      	cmp	r1, r2
   10702:	d8f8      	bhi.n	106f6 <get_fat+0xf6>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
   10704:	69db      	ldr	r3, [r3, #28]
   10706:	b99b      	cbnz	r3, 10730 <get_fat+0x130>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
   10708:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   1070a:	4630      	mov	r0, r6
   1070c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   10710:	f7ff ff20 	bl	10554 <move_window>
   10714:	2800      	cmp	r0, #0
   10716:	d190      	bne.n	1063a <get_fat+0x3a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
   10718:	00a0      	lsls	r0, r4, #2
   1071a:	363c      	adds	r6, #60	; 0x3c
   1071c:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
   10720:	4430      	add	r0, r6
   10722:	f7ff fd25 	bl	10170 <ld_dword>
   10726:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   1072a:	e788      	b.n	1063e <get_fat+0x3e>
		val = 1;	/* Internal error */
   1072c:	2001      	movs	r0, #1
   1072e:	e786      	b.n	1063e <get_fat+0x3e>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
   10730:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return val;
   10734:	e783      	b.n	1063e <get_fat+0x3e>

00010736 <dir_sdi>:
{
   10736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = dp->obj.fs;
   10738:	6806      	ldr	r6, [r0, #0]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
   1073a:	7833      	ldrb	r3, [r6, #0]
   1073c:	2b04      	cmp	r3, #4
   1073e:	bf0c      	ite	eq
   10740:	f04f 5280 	moveq.w	r2, #268435456	; 0x10000000
   10744:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
   10748:	428a      	cmp	r2, r1
{
   1074a:	4604      	mov	r4, r0
   1074c:	460d      	mov	r5, r1
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
   1074e:	d801      	bhi.n	10754 <dir_sdi+0x1e>
		return FR_INT_ERR;
   10750:	2002      	movs	r0, #2
}
   10752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
   10754:	06ca      	lsls	r2, r1, #27
   10756:	d1fb      	bne.n	10750 <dir_sdi+0x1a>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
   10758:	6882      	ldr	r2, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
   1075a:	6301      	str	r1, [r0, #48]	; 0x30
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
   1075c:	b9d2      	cbnz	r2, 10794 <dir_sdi+0x5e>
   1075e:	2b02      	cmp	r3, #2
   10760:	d813      	bhi.n	1078a <dir_sdi+0x54>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
   10762:	8933      	ldrh	r3, [r6, #8]
   10764:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
   10768:	d9f2      	bls.n	10750 <dir_sdi+0x1a>
		dp->sect = fs->dirbase;
   1076a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1076c:	63a3      	str	r3, [r4, #56]	; 0x38
	if (dp->sect == 0) return FR_INT_ERR;
   1076e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	dp->clust = clst;					/* Current cluster# */
   10770:	6362      	str	r2, [r4, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
   10772:	2b00      	cmp	r3, #0
   10774:	d0ec      	beq.n	10750 <dir_sdi+0x1a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
   10776:	eb03 2355 	add.w	r3, r3, r5, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
   1077a:	363c      	adds	r6, #60	; 0x3c
   1077c:	f3c5 0508 	ubfx	r5, r5, #0, #9
   10780:	4435      	add	r5, r6
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
   10782:	63a3      	str	r3, [r4, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
   10784:	63e5      	str	r5, [r4, #60]	; 0x3c
	return FR_OK;
   10786:	2000      	movs	r0, #0
   10788:	e7e3      	b.n	10752 <dir_sdi+0x1c>
		clst = (DWORD)fs->dirbase;
   1078a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
   1078c:	71c2      	strb	r2, [r0, #7]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
   1078e:	2b00      	cmp	r3, #0
   10790:	d0e7      	beq.n	10762 <dir_sdi+0x2c>
   10792:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
   10794:	8977      	ldrh	r7, [r6, #10]
   10796:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
   10798:	42bd      	cmp	r5, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
   1079a:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
   1079c:	d204      	bcs.n	107a8 <dir_sdi+0x72>
		dp->sect = clst2sect(fs, clst);
   1079e:	4630      	mov	r0, r6
   107a0:	f7ff fd1b 	bl	101da <clst2sect>
   107a4:	63a0      	str	r0, [r4, #56]	; 0x38
   107a6:	e7e2      	b.n	1076e <dir_sdi+0x38>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
   107a8:	4620      	mov	r0, r4
   107aa:	f7ff ff29 	bl	10600 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   107ae:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
   107b0:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   107b2:	d006      	beq.n	107c2 <dir_sdi+0x8c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
   107b4:	2801      	cmp	r0, #1
   107b6:	d9cb      	bls.n	10750 <dir_sdi+0x1a>
   107b8:	69f3      	ldr	r3, [r6, #28]
   107ba:	4283      	cmp	r3, r0
   107bc:	d9c8      	bls.n	10750 <dir_sdi+0x1a>
			ofs -= csz;
   107be:	1bed      	subs	r5, r5, r7
   107c0:	e7ea      	b.n	10798 <dir_sdi+0x62>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   107c2:	2001      	movs	r0, #1
   107c4:	e7c5      	b.n	10752 <dir_sdi+0x1c>

000107c6 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
   107c6:	2901      	cmp	r1, #1
{
   107c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   107cc:	4606      	mov	r6, r0
   107ce:	460c      	mov	r4, r1
   107d0:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
   107d2:	d908      	bls.n	107e6 <put_fat+0x20>
   107d4:	69c3      	ldr	r3, [r0, #28]
   107d6:	428b      	cmp	r3, r1
   107d8:	d905      	bls.n	107e6 <put_fat+0x20>
		switch (fs->fs_type) {
   107da:	7803      	ldrb	r3, [r0, #0]
   107dc:	2b02      	cmp	r3, #2
   107de:	d061      	beq.n	108a4 <put_fat+0xde>
   107e0:	d803      	bhi.n	107ea <put_fat+0x24>
   107e2:	2b01      	cmp	r3, #1
   107e4:	d022      	beq.n	1082c <put_fat+0x66>
   107e6:	2502      	movs	r5, #2
   107e8:	e051      	b.n	1088e <put_fat+0xc8>
   107ea:	3b03      	subs	r3, #3
   107ec:	2b01      	cmp	r3, #1
   107ee:	d8fa      	bhi.n	107e6 <put_fat+0x20>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   107f0:	6a81      	ldr	r1, [r0, #40]	; 0x28
   107f2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   107f6:	f7ff fead 	bl	10554 <move_window>
			if (res != FR_OK) break;
   107fa:	4605      	mov	r5, r0
   107fc:	2800      	cmp	r0, #0
   107fe:	d146      	bne.n	1088e <put_fat+0xc8>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
   10800:	00a4      	lsls	r4, r4, #2
   10802:	f106 033c 	add.w	r3, r6, #60	; 0x3c
   10806:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
   1080a:	441c      	add	r4, r3
   1080c:	7833      	ldrb	r3, [r6, #0]
   1080e:	2b04      	cmp	r3, #4
   10810:	d007      	beq.n	10822 <put_fat+0x5c>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
   10812:	4620      	mov	r0, r4
   10814:	f7ff fcac 	bl	10170 <ld_dword>
   10818:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
   1081c:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
   10820:	4307      	orrs	r7, r0
			st_dword(fs->win + clst * 4 % SS(fs), val);
   10822:	4639      	mov	r1, r7
   10824:	4620      	mov	r0, r4
   10826:	f7ff fcc1 	bl	101ac <st_dword>
   1082a:	e02e      	b.n	1088a <put_fat+0xc4>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
   1082c:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   10830:	6a81      	ldr	r1, [r0, #40]	; 0x28
   10832:	eb01 2158 	add.w	r1, r1, r8, lsr #9
   10836:	f7ff fe8d 	bl	10554 <move_window>
			if (res != FR_OK) break;
   1083a:	4605      	mov	r5, r0
   1083c:	bb38      	cbnz	r0, 1088e <put_fat+0xc8>
			p = fs->win + bc++ % SS(fs);
   1083e:	f106 093c 	add.w	r9, r6, #60	; 0x3c
   10842:	f108 0a01 	add.w	sl, r8, #1
   10846:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
   1084a:	f014 0401 	ands.w	r4, r4, #1
   1084e:	bf1f      	itttt	ne
   10850:	f819 3008 	ldrbne.w	r3, [r9, r8]
   10854:	f003 020f 	andne.w	r2, r3, #15
   10858:	013b      	lslne	r3, r7, #4
   1085a:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
   1085e:	bf14      	ite	ne
   10860:	4313      	orrne	r3, r2
   10862:	b2fb      	uxtbeq	r3, r7
   10864:	f809 3008 	strb.w	r3, [r9, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   10868:	6ab1      	ldr	r1, [r6, #40]	; 0x28
			fs->wflag = 1;
   1086a:	2301      	movs	r3, #1
   1086c:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   1086e:	eb01 215a 	add.w	r1, r1, sl, lsr #9
   10872:	4630      	mov	r0, r6
   10874:	f7ff fe6e 	bl	10554 <move_window>
			if (res != FR_OK) break;
   10878:	4605      	mov	r5, r0
   1087a:	b940      	cbnz	r0, 1088e <put_fat+0xc8>
			p = fs->win + bc % SS(fs);
   1087c:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
   10880:	b144      	cbz	r4, 10894 <put_fat+0xce>
   10882:	f3c7 1707 	ubfx	r7, r7, #4, #8
   10886:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
   1088a:	2301      	movs	r3, #1
   1088c:	70f3      	strb	r3, [r6, #3]
}
   1088e:	4628      	mov	r0, r5
   10890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
   10894:	f819 300a 	ldrb.w	r3, [r9, sl]
   10898:	f3c7 2703 	ubfx	r7, r7, #8, #4
   1089c:	f023 030f 	bic.w	r3, r3, #15
   108a0:	431f      	orrs	r7, r3
   108a2:	e7f0      	b.n	10886 <put_fat+0xc0>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   108a4:	6a81      	ldr	r1, [r0, #40]	; 0x28
   108a6:	eb01 2114 	add.w	r1, r1, r4, lsr #8
   108aa:	f7ff fe53 	bl	10554 <move_window>
			if (res != FR_OK) break;
   108ae:	4605      	mov	r5, r0
   108b0:	2800      	cmp	r0, #0
   108b2:	d1ec      	bne.n	1088e <put_fat+0xc8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
   108b4:	0064      	lsls	r4, r4, #1
   108b6:	f106 033c 	add.w	r3, r6, #60	; 0x3c
   108ba:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
   108be:	1919      	adds	r1, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
   108c0:	551f      	strb	r7, [r3, r4]
   108c2:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
   108c6:	704f      	strb	r7, [r1, #1]
			fs->wflag = 1;
   108c8:	e7df      	b.n	1088a <put_fat+0xc4>

000108ca <fill_last_frag>:
{
   108ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   108cc:	4604      	mov	r4, r0
   108ce:	460e      	mov	r6, r1
   108d0:	4617      	mov	r7, r2
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
   108d2:	69e3      	ldr	r3, [r4, #28]
   108d4:	b90b      	cbnz	r3, 108da <fill_last_frag+0x10>
	return FR_OK;
   108d6:	4618      	mov	r0, r3
}
   108d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
   108da:	2b01      	cmp	r3, #1
   108dc:	eba6 0503 	sub.w	r5, r6, r3
   108e0:	bf8c      	ite	hi
   108e2:	1caa      	addhi	r2, r5, #2
   108e4:	463a      	movls	r2, r7
   108e6:	6820      	ldr	r0, [r4, #0]
   108e8:	1c69      	adds	r1, r5, #1
   108ea:	f7ff ff6c 	bl	107c6 <put_fat>
		if (res != FR_OK) return res;
   108ee:	2800      	cmp	r0, #0
   108f0:	d1f2      	bne.n	108d8 <fill_last_frag+0xe>
		obj->n_frag--;
   108f2:	69e3      	ldr	r3, [r4, #28]
   108f4:	3b01      	subs	r3, #1
   108f6:	61e3      	str	r3, [r4, #28]
   108f8:	e7eb      	b.n	108d2 <fill_last_frag+0x8>

000108fa <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
   108fa:	2901      	cmp	r1, #1
{
   108fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
   10900:	6805      	ldr	r5, [r0, #0]
{
   10902:	4606      	mov	r6, r0
   10904:	460c      	mov	r4, r1
   10906:	4617      	mov	r7, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
   10908:	d802      	bhi.n	10910 <remove_chain+0x16>
   1090a:	2002      	movs	r0, #2
}
   1090c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
   10910:	69eb      	ldr	r3, [r5, #28]
   10912:	428b      	cmp	r3, r1
   10914:	d9f9      	bls.n	1090a <remove_chain+0x10>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
   10916:	b97a      	cbnz	r2, 10938 <remove_chain+0x3e>
{
   10918:	46a1      	mov	r9, r4
		nxt = get_fat(obj, clst);			/* Get cluster status */
   1091a:	4621      	mov	r1, r4
   1091c:	4630      	mov	r0, r6
   1091e:	f7ff fe6f 	bl	10600 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
   10922:	46a0      	mov	r8, r4
   10924:	4604      	mov	r4, r0
   10926:	b9b0      	cbnz	r0, 10956 <remove_chain+0x5c>
	if (fs->fs_type == FS_EXFAT) {
   10928:	782b      	ldrb	r3, [r5, #0]
   1092a:	2b04      	cmp	r3, #4
   1092c:	d102      	bne.n	10934 <remove_chain+0x3a>
		if (pclst == 0) {	/* Has the entire chain been removed? */
   1092e:	2f00      	cmp	r7, #0
   10930:	d143      	bne.n	109ba <remove_chain+0xc0>
			obj->stat = 0;		/* Change the chain status 'initial' */
   10932:	71f7      	strb	r7, [r6, #7]
	return FR_OK;
   10934:	2000      	movs	r0, #0
   10936:	e7e9      	b.n	1090c <remove_chain+0x12>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
   10938:	782b      	ldrb	r3, [r5, #0]
   1093a:	2b04      	cmp	r3, #4
   1093c:	d102      	bne.n	10944 <remove_chain+0x4a>
   1093e:	79c3      	ldrb	r3, [r0, #7]
   10940:	2b02      	cmp	r3, #2
   10942:	d0e9      	beq.n	10918 <remove_chain+0x1e>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
   10944:	f04f 32ff 	mov.w	r2, #4294967295
   10948:	4639      	mov	r1, r7
   1094a:	4628      	mov	r0, r5
   1094c:	f7ff ff3b 	bl	107c6 <put_fat>
		if (res != FR_OK) return res;
   10950:	2800      	cmp	r0, #0
   10952:	d0e1      	beq.n	10918 <remove_chain+0x1e>
   10954:	e7da      	b.n	1090c <remove_chain+0x12>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
   10956:	2801      	cmp	r0, #1
   10958:	d0d7      	beq.n	1090a <remove_chain+0x10>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
   1095a:	1c42      	adds	r2, r0, #1
   1095c:	d101      	bne.n	10962 <remove_chain+0x68>
   1095e:	2001      	movs	r0, #1
   10960:	e7d4      	b.n	1090c <remove_chain+0x12>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
   10962:	782b      	ldrb	r3, [r5, #0]
   10964:	2b04      	cmp	r3, #4
   10966:	d119      	bne.n	1099c <remove_chain+0xa2>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
   10968:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
   1096c:	3a02      	subs	r2, #2
   1096e:	4293      	cmp	r3, r2
   10970:	d31c      	bcc.n	109ac <remove_chain+0xb2>
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
   10972:	f108 0201 	add.w	r2, r8, #1
   10976:	42a2      	cmp	r2, r4
   10978:	d00c      	beq.n	10994 <remove_chain+0x9a>
			if (fs->fs_type == FS_EXFAT) {
   1097a:	782b      	ldrb	r3, [r5, #0]
   1097c:	2b04      	cmp	r3, #4
   1097e:	d108      	bne.n	10992 <remove_chain+0x98>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
   10980:	2300      	movs	r3, #0
   10982:	eba2 0209 	sub.w	r2, r2, r9
   10986:	4649      	mov	r1, r9
   10988:	4628      	mov	r0, r5
   1098a:	f7ff fdfc 	bl	10586 <change_bitmap>
				if (res != FR_OK) return res;
   1098e:	2800      	cmp	r0, #0
   10990:	d1bc      	bne.n	1090c <remove_chain+0x12>
   10992:	46a1      	mov	r9, r4
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
   10994:	69eb      	ldr	r3, [r5, #28]
   10996:	42a3      	cmp	r3, r4
   10998:	d8bf      	bhi.n	1091a <remove_chain+0x20>
   1099a:	e7c5      	b.n	10928 <remove_chain+0x2e>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
   1099c:	2200      	movs	r2, #0
   1099e:	4641      	mov	r1, r8
   109a0:	4628      	mov	r0, r5
   109a2:	f7ff ff10 	bl	107c6 <put_fat>
			if (res != FR_OK) return res;
   109a6:	2800      	cmp	r0, #0
   109a8:	d0de      	beq.n	10968 <remove_chain+0x6e>
   109aa:	e7af      	b.n	1090c <remove_chain+0x12>
			fs->free_clst++;
   109ac:	3301      	adds	r3, #1
   109ae:	61ab      	str	r3, [r5, #24]
			fs->fsi_flag |= 1;
   109b0:	792b      	ldrb	r3, [r5, #4]
   109b2:	f043 0301 	orr.w	r3, r3, #1
   109b6:	712b      	strb	r3, [r5, #4]
   109b8:	e7db      	b.n	10972 <remove_chain+0x78>
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
   109ba:	79f3      	ldrb	r3, [r6, #7]
   109bc:	b98b      	cbnz	r3, 109e2 <remove_chain+0xe8>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
   109be:	68b4      	ldr	r4, [r6, #8]
				while (clst != pclst) {
   109c0:	42bc      	cmp	r4, r7
   109c2:	d102      	bne.n	109ca <remove_chain+0xd0>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
   109c4:	2302      	movs	r3, #2
   109c6:	71f3      	strb	r3, [r6, #7]
   109c8:	e7b4      	b.n	10934 <remove_chain+0x3a>
					nxt = get_fat(obj, clst);
   109ca:	4621      	mov	r1, r4
   109cc:	4630      	mov	r0, r6
   109ce:	f7ff fe17 	bl	10600 <get_fat>
					if (nxt < 2) return FR_INT_ERR;
   109d2:	2801      	cmp	r0, #1
   109d4:	d999      	bls.n	1090a <remove_chain+0x10>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
   109d6:	1c43      	adds	r3, r0, #1
   109d8:	d0c1      	beq.n	1095e <remove_chain+0x64>
					if (nxt != clst + 1) break;	/* Not contiguous? */
   109da:	3401      	adds	r4, #1
   109dc:	4284      	cmp	r4, r0
   109de:	d0ef      	beq.n	109c0 <remove_chain+0xc6>
   109e0:	e7a8      	b.n	10934 <remove_chain+0x3a>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
   109e2:	2b03      	cmp	r3, #3
   109e4:	d1a6      	bne.n	10934 <remove_chain+0x3a>
   109e6:	68b3      	ldr	r3, [r6, #8]
   109e8:	42bb      	cmp	r3, r7
   109ea:	d8a3      	bhi.n	10934 <remove_chain+0x3a>
   109ec:	69b2      	ldr	r2, [r6, #24]
   109ee:	4413      	add	r3, r2
   109f0:	42bb      	cmp	r3, r7
   109f2:	d39f      	bcc.n	10934 <remove_chain+0x3a>
   109f4:	e7e6      	b.n	109c4 <remove_chain+0xca>

000109f6 <fill_first_frag>:
{
   109f6:	b570      	push	{r4, r5, r6, lr}
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
   109f8:	79c3      	ldrb	r3, [r0, #7]
   109fa:	2b03      	cmp	r3, #3
{
   109fc:	4604      	mov	r4, r0
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
   109fe:	d110      	bne.n	10a22 <fill_first_frag+0x2c>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
   10a00:	6881      	ldr	r1, [r0, #8]
   10a02:	6983      	ldr	r3, [r0, #24]
   10a04:	18cd      	adds	r5, r1, r3
   10a06:	42a9      	cmp	r1, r5
   10a08:	d102      	bne.n	10a10 <fill_first_frag+0x1a>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
   10a0a:	2000      	movs	r0, #0
   10a0c:	71e0      	strb	r0, [r4, #7]
}
   10a0e:	bd70      	pop	{r4, r5, r6, pc}
			res = put_fat(obj->fs, cl, cl + 1);
   10a10:	1c4e      	adds	r6, r1, #1
   10a12:	6820      	ldr	r0, [r4, #0]
   10a14:	4632      	mov	r2, r6
   10a16:	f7ff fed6 	bl	107c6 <put_fat>
			if (res != FR_OK) return res;
   10a1a:	2800      	cmp	r0, #0
   10a1c:	d1f7      	bne.n	10a0e <fill_first_frag+0x18>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
   10a1e:	4631      	mov	r1, r6
   10a20:	e7f1      	b.n	10a06 <fill_first_frag+0x10>
	return FR_OK;
   10a22:	2000      	movs	r0, #0
   10a24:	e7f3      	b.n	10a0e <fill_first_frag+0x18>

00010a26 <dir_clear>:
{
   10a26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10a28:	4605      	mov	r5, r0
   10a2a:	460e      	mov	r6, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
   10a2c:	f7ff fd6e 	bl	1050c <sync_window>
   10a30:	4604      	mov	r4, r0
   10a32:	b9f8      	cbnz	r0, 10a74 <dir_clear+0x4e>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
   10a34:	4631      	mov	r1, r6
   10a36:	4628      	mov	r0, r5
   10a38:	f7ff fbcf 	bl	101da <clst2sect>
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
   10a3c:	f105 073c 	add.w	r7, r5, #60	; 0x3c
	sect = clst2sect(fs, clst);		/* Top of the cluster */
   10a40:	4606      	mov	r6, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
   10a42:	63a8      	str	r0, [r5, #56]	; 0x38
__ssp_bos_icheck3(memset, void *, int)
   10a44:	f44f 7200 	mov.w	r2, #512	; 0x200
   10a48:	4621      	mov	r1, r4
   10a4a:	4638      	mov	r0, r7
   10a4c:	f001 fc5a 	bl	12304 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
   10a50:	896b      	ldrh	r3, [r5, #10]
   10a52:	429c      	cmp	r4, r3
   10a54:	d304      	bcc.n	10a60 <dir_clear+0x3a>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
   10a56:	8968      	ldrh	r0, [r5, #10]
   10a58:	1b00      	subs	r0, r0, r4
   10a5a:	bf18      	it	ne
   10a5c:	2001      	movne	r0, #1
}
   10a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
   10a60:	7868      	ldrb	r0, [r5, #1]
   10a62:	2301      	movs	r3, #1
   10a64:	1932      	adds	r2, r6, r4
   10a66:	4639      	mov	r1, r7
   10a68:	f7f9 fe9a 	bl	a7a0 <disk_write>
   10a6c:	2800      	cmp	r0, #0
   10a6e:	d1f2      	bne.n	10a56 <dir_clear+0x30>
   10a70:	3401      	adds	r4, #1
   10a72:	e7ed      	b.n	10a50 <dir_clear+0x2a>
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
   10a74:	2001      	movs	r0, #1
   10a76:	e7f2      	b.n	10a5e <dir_clear+0x38>

00010a78 <sync_fs>:
{
   10a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10a7a:	4604      	mov	r4, r0
	res = sync_window(fs);
   10a7c:	f7ff fd46 	bl	1050c <sync_window>
   10a80:	4605      	mov	r5, r0
	if (res == FR_OK) {
   10a82:	2800      	cmp	r0, #0
   10a84:	d142      	bne.n	10b0c <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
   10a86:	7823      	ldrb	r3, [r4, #0]
   10a88:	2b03      	cmp	r3, #3
   10a8a:	d137      	bne.n	10afc <sync_fs+0x84>
   10a8c:	7927      	ldrb	r7, [r4, #4]
   10a8e:	2f01      	cmp	r7, #1
   10a90:	d134      	bne.n	10afc <sync_fs+0x84>
			memset(fs->win, 0, sizeof fs->win);
   10a92:	f104 063c 	add.w	r6, r4, #60	; 0x3c
   10a96:	4601      	mov	r1, r0
   10a98:	f44f 7200 	mov.w	r2, #512	; 0x200
   10a9c:	4630      	mov	r0, r6
   10a9e:	f001 fc31 	bl	12304 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
   10aa2:	2355      	movs	r3, #85	; 0x55
   10aa4:	f884 323a 	strb.w	r3, [r4, #570]	; 0x23a
	*ptr++ = (BYTE)val;
   10aa8:	23aa      	movs	r3, #170	; 0xaa
   10aaa:	f884 323b 	strb.w	r3, [r4, #571]	; 0x23b
	*ptr++ = (BYTE)val; val >>= 8;
   10aae:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
   10ab0:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
   10ab2:	2172      	movs	r1, #114	; 0x72
   10ab4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	*ptr++ = (BYTE)val; val >>= 8;
   10ab8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	*ptr++ = (BYTE)val; val >>= 8;
   10abc:	2361      	movs	r3, #97	; 0x61
   10abe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
	*ptr++ = (BYTE)val;
   10ac2:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
	*ptr++ = (BYTE)val; val >>= 8;
   10ac6:	f884 2222 	strb.w	r2, [r4, #546]	; 0x222
	*ptr++ = (BYTE)val;
   10aca:	f884 3223 	strb.w	r3, [r4, #547]	; 0x223
	*ptr++ = (BYTE)val; val >>= 8;
   10ace:	f884 1220 	strb.w	r1, [r4, #544]	; 0x220
	*ptr++ = (BYTE)val; val >>= 8;
   10ad2:	f884 1221 	strb.w	r1, [r4, #545]	; 0x221
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
   10ad6:	f504 7009 	add.w	r0, r4, #548	; 0x224
   10ada:	69a1      	ldr	r1, [r4, #24]
   10adc:	f7ff fb66 	bl	101ac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
   10ae0:	6961      	ldr	r1, [r4, #20]
   10ae2:	f504 700a 	add.w	r0, r4, #552	; 0x228
   10ae6:	f7ff fb61 	bl	101ac <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
   10aea:	6a62      	ldr	r2, [r4, #36]	; 0x24
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
   10aec:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
   10aee:	3201      	adds	r2, #1
   10af0:	63a2      	str	r2, [r4, #56]	; 0x38
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
   10af2:	463b      	mov	r3, r7
   10af4:	4631      	mov	r1, r6
   10af6:	f7f9 fe53 	bl	a7a0 <disk_write>
			fs->fsi_flag = 0;
   10afa:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
   10afc:	2200      	movs	r2, #0
   10afe:	7860      	ldrb	r0, [r4, #1]
   10b00:	4611      	mov	r1, r2
   10b02:	f7f9 fe6f 	bl	a7e4 <disk_ioctl>
	res = sync_window(fs);
   10b06:	3800      	subs	r0, #0
   10b08:	bf18      	it	ne
   10b0a:	2001      	movne	r0, #1
}
   10b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010b0e <create_chain>:
{
   10b0e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
   10b12:	6805      	ldr	r5, [r0, #0]
{
   10b14:	4607      	mov	r7, r0
	if (clst == 0) {	/* Create a new chain */
   10b16:	4688      	mov	r8, r1
   10b18:	b949      	cbnz	r1, 10b2e <create_chain+0x20>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
   10b1a:	696e      	ldr	r6, [r5, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
   10b1c:	b1c6      	cbz	r6, 10b50 <create_chain+0x42>
   10b1e:	69eb      	ldr	r3, [r5, #28]
   10b20:	42b3      	cmp	r3, r6
   10b22:	bf98      	it	ls
   10b24:	2601      	movls	r6, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
   10b26:	69ab      	ldr	r3, [r5, #24]
   10b28:	b9a3      	cbnz	r3, 10b54 <create_chain+0x46>
   10b2a:	2400      	movs	r4, #0
   10b2c:	e005      	b.n	10b3a <create_chain+0x2c>
		cs = get_fat(obj, clst);			/* Check the cluster status */
   10b2e:	f7ff fd67 	bl	10600 <get_fat>
		if (cs < 2) return 1;				/* Test for insanity */
   10b32:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
   10b34:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Test for insanity */
   10b36:	d803      	bhi.n	10b40 <create_chain+0x32>
   10b38:	2401      	movs	r4, #1
}
   10b3a:	4620      	mov	r0, r4
   10b3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
   10b40:	1c42      	adds	r2, r0, #1
   10b42:	f000 80d2 	beq.w	10cea <create_chain+0x1dc>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   10b46:	69eb      	ldr	r3, [r5, #28]
   10b48:	4283      	cmp	r3, r0
   10b4a:	d8f6      	bhi.n	10b3a <create_chain+0x2c>
   10b4c:	4646      	mov	r6, r8
   10b4e:	e7ea      	b.n	10b26 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
   10b50:	2601      	movs	r6, #1
   10b52:	e7e8      	b.n	10b26 <create_chain+0x18>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
   10b54:	782a      	ldrb	r2, [r5, #0]
   10b56:	69eb      	ldr	r3, [r5, #28]
   10b58:	2a04      	cmp	r2, #4
   10b5a:	f040 8083 	bne.w	10c64 <create_chain+0x156>
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
   10b5e:	f1a6 0a02 	sub.w	sl, r6, #2
	if (clst >= fs->n_fatent - 2) clst = 0;
   10b62:	3b02      	subs	r3, #2
   10b64:	459a      	cmp	sl, r3
   10b66:	bf28      	it	cs
   10b68:	f04f 0a00 	movcs.w	sl, #0
	scl = val = clst; ctr = 0;
   10b6c:	46d1      	mov	r9, sl
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
   10b6e:	f04f 0b01 	mov.w	fp, #1
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
   10b72:	6b69      	ldr	r1, [r5, #52]	; 0x34
   10b74:	4628      	mov	r0, r5
   10b76:	eb01 3119 	add.w	r1, r1, r9, lsr #12
   10b7a:	f7ff fceb 	bl	10554 <move_window>
   10b7e:	2800      	cmp	r0, #0
   10b80:	d13b      	bne.n	10bfa <create_chain+0xec>
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
   10b82:	69ea      	ldr	r2, [r5, #28]
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
   10b84:	f009 0307 	and.w	r3, r9, #7
   10b88:	fa0b f303 	lsl.w	r3, fp, r3
   10b8c:	f3c9 01c8 	ubfx	r1, r9, #3, #9
   10b90:	b2db      	uxtb	r3, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
   10b92:	1e90      	subs	r0, r2, #2
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
   10b94:	186a      	adds	r2, r5, r1
			bm = 1;
   10b96:	464c      	mov	r4, r9
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
   10b98:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
   10b9c:	f109 0901 	add.w	r9, r9, #1
   10ba0:	4581      	cmp	r9, r0
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
   10ba2:	ea02 0203 	and.w	r2, r2, r3
   10ba6:	bf35      	itete	cc
   10ba8:	005b      	lslcc	r3, r3, #1
					val = 0; bm = 0; i = SS(fs);
   10baa:	2300      	movcs	r3, #0
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
   10bac:	b2db      	uxtbcc	r3, r3
					val = 0; bm = 0; i = SS(fs);
   10bae:	4699      	movcs	r9, r3
   10bb0:	bf28      	it	cs
   10bb2:	f44f 7100 	movcs.w	r1, #512	; 0x200
				if (bv == 0) {	/* Is it a free cluster? */
   10bb6:	b9b2      	cbnz	r2, 10be6 <create_chain+0xd8>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
   10bb8:	3402      	adds	r4, #2
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
   10bba:	1e63      	subs	r3, r4, #1
   10bbc:	3303      	adds	r3, #3
   10bbe:	d8bc      	bhi.n	10b3a <create_chain+0x2c>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
   10bc0:	2301      	movs	r3, #1
   10bc2:	461a      	mov	r2, r3
   10bc4:	4621      	mov	r1, r4
   10bc6:	4628      	mov	r0, r5
   10bc8:	f7ff fcdd 	bl	10586 <change_bitmap>
		if (res == FR_INT_ERR) return 1;
   10bcc:	2802      	cmp	r0, #2
   10bce:	d0b3      	beq.n	10b38 <create_chain+0x2a>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
   10bd0:	2801      	cmp	r0, #1
   10bd2:	f000 808a 	beq.w	10cea <create_chain+0x1dc>
		if (clst == 0) {							/* Is it a new chain? */
   10bd6:	f1b8 0f00 	cmp.w	r8, #0
   10bda:	d113      	bne.n	10c04 <create_chain+0xf6>
			obj->stat = 2;							/* Set status 'contiguous' */
   10bdc:	2302      	movs	r3, #2
   10bde:	71fb      	strb	r3, [r7, #7]
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
   10be0:	2800      	cmp	r0, #0
   10be2:	d1a9      	bne.n	10b38 <create_chain+0x2a>
   10be4:	e030      	b.n	10c48 <create_chain+0x13a>
				if (val == clst) return 0;	/* All cluster scanned? */
   10be6:	45ca      	cmp	sl, r9
   10be8:	d00a      	beq.n	10c00 <create_chain+0xf2>
			} while (bm != 0);
   10bea:	2b00      	cmp	r3, #0
   10bec:	d1d2      	bne.n	10b94 <create_chain+0x86>
		} while (++i < SS(fs));
   10bee:	3101      	adds	r1, #1
   10bf0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   10bf4:	d2bd      	bcs.n	10b72 <create_chain+0x64>
			bm = 1;
   10bf6:	2301      	movs	r3, #1
   10bf8:	e7cc      	b.n	10b94 <create_chain+0x86>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
   10bfa:	f04f 34ff 	mov.w	r4, #4294967295
   10bfe:	e7dc      	b.n	10bba <create_chain+0xac>
				if (val == clst) return 0;	/* All cluster scanned? */
   10c00:	2400      	movs	r4, #0
   10c02:	e7da      	b.n	10bba <create_chain+0xac>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
   10c04:	79fb      	ldrb	r3, [r7, #7]
   10c06:	2b02      	cmp	r3, #2
   10c08:	d107      	bne.n	10c1a <create_chain+0x10c>
   10c0a:	1c73      	adds	r3, r6, #1
   10c0c:	42a3      	cmp	r3, r4
   10c0e:	d0e7      	beq.n	10be0 <create_chain+0xd2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
   10c10:	68bb      	ldr	r3, [r7, #8]
   10c12:	1af6      	subs	r6, r6, r3
				obj->stat = 3;						/* Change status 'just fragmented' */
   10c14:	2303      	movs	r3, #3
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
   10c16:	61be      	str	r6, [r7, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
   10c18:	71fb      	strb	r3, [r7, #7]
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
   10c1a:	f108 0201 	add.w	r2, r8, #1
   10c1e:	42a2      	cmp	r2, r4
   10c20:	69fb      	ldr	r3, [r7, #28]
   10c22:	d105      	bne.n	10c30 <create_chain+0x122>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
   10c24:	b113      	cbz	r3, 10c2c <create_chain+0x11e>
   10c26:	3301      	adds	r3, #1
   10c28:	61fb      	str	r3, [r7, #28]
   10c2a:	e7d9      	b.n	10be0 <create_chain+0xd2>
   10c2c:	2302      	movs	r3, #2
   10c2e:	e7fb      	b.n	10c28 <create_chain+0x11a>
				if (obj->n_frag == 0) obj->n_frag = 1;
   10c30:	b90b      	cbnz	r3, 10c36 <create_chain+0x128>
   10c32:	2301      	movs	r3, #1
   10c34:	61fb      	str	r3, [r7, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
   10c36:	4622      	mov	r2, r4
   10c38:	4641      	mov	r1, r8
   10c3a:	4638      	mov	r0, r7
   10c3c:	f7ff fe45 	bl	108ca <fill_last_frag>
				if (res == FR_OK) obj->n_frag = 1;
   10c40:	2800      	cmp	r0, #0
   10c42:	d14f      	bne.n	10ce4 <create_chain+0x1d6>
   10c44:	2301      	movs	r3, #1
   10c46:	61fb      	str	r3, [r7, #28]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
   10c48:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
   10c4c:	3a02      	subs	r2, #2
   10c4e:	4293      	cmp	r3, r2
   10c50:	bf9c      	itt	ls
   10c52:	f103 33ff 	addls.w	r3, r3, #4294967295
   10c56:	61ab      	strls	r3, [r5, #24]
		fs->fsi_flag |= 1;
   10c58:	792b      	ldrb	r3, [r5, #4]
		fs->last_clst = ncl;
   10c5a:	616c      	str	r4, [r5, #20]
		fs->fsi_flag |= 1;
   10c5c:	f043 0301 	orr.w	r3, r3, #1
   10c60:	712b      	strb	r3, [r5, #4]
   10c62:	e76a      	b.n	10b3a <create_chain+0x2c>
		if (scl == clst) {						/* Stretching an existing chain? */
   10c64:	4546      	cmp	r6, r8
   10c66:	d114      	bne.n	10c92 <create_chain+0x184>
   10c68:	1c74      	adds	r4, r6, #1
			if (ncl >= fs->n_fatent) ncl = 2;
   10c6a:	42a3      	cmp	r3, r4
   10c6c:	bf98      	it	ls
   10c6e:	2402      	movls	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
   10c70:	4621      	mov	r1, r4
   10c72:	4638      	mov	r0, r7
   10c74:	f7ff fcc4 	bl	10600 <get_fat>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
   10c78:	2801      	cmp	r0, #1
   10c7a:	f43f af5d 	beq.w	10b38 <create_chain+0x2a>
   10c7e:	1c43      	adds	r3, r0, #1
   10c80:	d033      	beq.n	10cea <create_chain+0x1dc>
			if (cs != 0) {						/* Not free? */
   10c82:	b1e0      	cbz	r0, 10cbe <create_chain+0x1b0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
   10c84:	696b      	ldr	r3, [r5, #20]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
   10c86:	2b01      	cmp	r3, #1
   10c88:	d903      	bls.n	10c92 <create_chain+0x184>
   10c8a:	69ea      	ldr	r2, [r5, #28]
   10c8c:	4293      	cmp	r3, r2
   10c8e:	bf38      	it	cc
   10c90:	461e      	movcc	r6, r3
   10c92:	4634      	mov	r4, r6
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
   10c94:	69eb      	ldr	r3, [r5, #28]
				ncl++;							/* Next cluster */
   10c96:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
   10c98:	42a3      	cmp	r3, r4
   10c9a:	d803      	bhi.n	10ca4 <create_chain+0x196>
					if (ncl > scl) return 0;	/* No free cluster found? */
   10c9c:	2e01      	cmp	r6, #1
   10c9e:	f67f af44 	bls.w	10b2a <create_chain+0x1c>
					ncl = 2;
   10ca2:	2402      	movs	r4, #2
				cs = get_fat(obj, ncl);			/* Get the cluster status */
   10ca4:	4621      	mov	r1, r4
   10ca6:	4638      	mov	r0, r7
   10ca8:	f7ff fcaa 	bl	10600 <get_fat>
				if (cs == 0) break;				/* Found a free cluster? */
   10cac:	b148      	cbz	r0, 10cc2 <create_chain+0x1b4>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
   10cae:	2801      	cmp	r0, #1
   10cb0:	f43f af42 	beq.w	10b38 <create_chain+0x2a>
   10cb4:	3001      	adds	r0, #1
   10cb6:	d018      	beq.n	10cea <create_chain+0x1dc>
				if (ncl == scl) return 0;		/* No free cluster found? */
   10cb8:	42b4      	cmp	r4, r6
   10cba:	d1eb      	bne.n	10c94 <create_chain+0x186>
   10cbc:	e735      	b.n	10b2a <create_chain+0x1c>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
   10cbe:	2c00      	cmp	r4, #0
   10cc0:	d0e7      	beq.n	10c92 <create_chain+0x184>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
   10cc2:	f04f 32ff 	mov.w	r2, #4294967295
   10cc6:	4621      	mov	r1, r4
   10cc8:	4628      	mov	r0, r5
   10cca:	f7ff fd7c 	bl	107c6 <put_fat>
		if (res == FR_OK && clst != 0) {
   10cce:	b948      	cbnz	r0, 10ce4 <create_chain+0x1d6>
   10cd0:	f1b8 0f00 	cmp.w	r8, #0
   10cd4:	d0b8      	beq.n	10c48 <create_chain+0x13a>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
   10cd6:	4622      	mov	r2, r4
   10cd8:	4641      	mov	r1, r8
   10cda:	4628      	mov	r0, r5
   10cdc:	f7ff fd73 	bl	107c6 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
   10ce0:	2800      	cmp	r0, #0
   10ce2:	d0b1      	beq.n	10c48 <create_chain+0x13a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
   10ce4:	2801      	cmp	r0, #1
   10ce6:	f47f af27 	bne.w	10b38 <create_chain+0x2a>
   10cea:	f04f 34ff 	mov.w	r4, #4294967295
   10cee:	e724      	b.n	10b3a <create_chain+0x2c>

00010cf0 <dir_next>:
{
   10cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
   10cf4:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
   10cf6:	6b07      	ldr	r7, [r0, #48]	; 0x30
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
   10cf8:	7833      	ldrb	r3, [r6, #0]
   10cfa:	2b04      	cmp	r3, #4
   10cfc:	bf0c      	ite	eq
   10cfe:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
   10d02:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
	ofs = dp->dptr + SZDIRE;	/* Next entry */
   10d06:	3720      	adds	r7, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
   10d08:	42bb      	cmp	r3, r7
   10d0a:	bf9c      	itt	ls
   10d0c:	2300      	movls	r3, #0
   10d0e:	6383      	strls	r3, [r0, #56]	; 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
   10d10:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
   10d12:	4604      	mov	r4, r0
   10d14:	4689      	mov	r9, r1
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
   10d16:	b173      	cbz	r3, 10d36 <dir_next+0x46>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
   10d18:	f3c7 0808 	ubfx	r8, r7, #0, #9
   10d1c:	f1b8 0f00 	cmp.w	r8, #0
   10d20:	d13c      	bne.n	10d9c <dir_next+0xac>
		if (dp->clust == 0) {	/* Static table */
   10d22:	6b41      	ldr	r1, [r0, #52]	; 0x34
		dp->sect++;				/* Next sector */
   10d24:	3301      	adds	r3, #1
   10d26:	6383      	str	r3, [r0, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
   10d28:	b939      	cbnz	r1, 10d3a <dir_next+0x4a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
   10d2a:	8933      	ldrh	r3, [r6, #8]
   10d2c:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
   10d30:	d834      	bhi.n	10d9c <dir_next+0xac>
				dp->sect = 0; return FR_NO_FILE;
   10d32:	2300      	movs	r3, #0
   10d34:	63a3      	str	r3, [r4, #56]	; 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
   10d36:	2004      	movs	r0, #4
   10d38:	e00a      	b.n	10d50 <dir_next+0x60>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
   10d3a:	8973      	ldrh	r3, [r6, #10]
   10d3c:	3b01      	subs	r3, #1
   10d3e:	ea13 2357 	ands.w	r3, r3, r7, lsr #9
   10d42:	d12b      	bne.n	10d9c <dir_next+0xac>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
   10d44:	f7ff fc5c 	bl	10600 <get_fat>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
   10d48:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
   10d4a:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
   10d4c:	d802      	bhi.n	10d54 <dir_next+0x64>
   10d4e:	2002      	movs	r0, #2
}
   10d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   10d54:	1c42      	adds	r2, r0, #1
   10d56:	d101      	bne.n	10d5c <dir_next+0x6c>
   10d58:	2001      	movs	r0, #1
   10d5a:	e7f9      	b.n	10d50 <dir_next+0x60>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
   10d5c:	69f3      	ldr	r3, [r6, #28]
   10d5e:	4283      	cmp	r3, r0
   10d60:	d816      	bhi.n	10d90 <dir_next+0xa0>
					if (!stretch) {								/* If no stretch, report EOT */
   10d62:	f1b9 0f00 	cmp.w	r9, #0
   10d66:	d0e4      	beq.n	10d32 <dir_next+0x42>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
   10d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10d6a:	4620      	mov	r0, r4
   10d6c:	f7ff fecf 	bl	10b0e <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   10d70:	4605      	mov	r5, r0
   10d72:	b1c8      	cbz	r0, 10da8 <dir_next+0xb8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
   10d74:	2801      	cmp	r0, #1
   10d76:	d0ea      	beq.n	10d4e <dir_next+0x5e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   10d78:	1c43      	adds	r3, r0, #1
   10d7a:	d0ed      	beq.n	10d58 <dir_next+0x68>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
   10d7c:	4601      	mov	r1, r0
   10d7e:	4630      	mov	r0, r6
   10d80:	f7ff fe51 	bl	10a26 <dir_clear>
   10d84:	2800      	cmp	r0, #0
   10d86:	d1e7      	bne.n	10d58 <dir_next+0x68>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
   10d88:	79e3      	ldrb	r3, [r4, #7]
   10d8a:	f043 0304 	orr.w	r3, r3, #4
   10d8e:	71e3      	strb	r3, [r4, #7]
				dp->clust = clst;		/* Initialize data for new cluster */
   10d90:	6365      	str	r5, [r4, #52]	; 0x34
				dp->sect = clst2sect(fs, clst);
   10d92:	4629      	mov	r1, r5
   10d94:	4630      	mov	r0, r6
   10d96:	f7ff fa20 	bl	101da <clst2sect>
   10d9a:	63a0      	str	r0, [r4, #56]	; 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
   10d9c:	363c      	adds	r6, #60	; 0x3c
   10d9e:	4446      	add	r6, r8
	dp->dptr = ofs;						/* Current entry */
   10da0:	6327      	str	r7, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
   10da2:	63e6      	str	r6, [r4, #60]	; 0x3c
	return FR_OK;
   10da4:	2000      	movs	r0, #0
   10da6:	e7d3      	b.n	10d50 <dir_next+0x60>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   10da8:	2007      	movs	r0, #7
   10daa:	e7d1      	b.n	10d50 <dir_next+0x60>

00010dac <dir_alloc>:
{
   10dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10dae:	460c      	mov	r4, r1
	res = dir_sdi(dp, 0);
   10db0:	2100      	movs	r1, #0
	FATFS *fs = dp->obj.fs;
   10db2:	6805      	ldr	r5, [r0, #0]
{
   10db4:	4606      	mov	r6, r0
	res = dir_sdi(dp, 0);
   10db6:	f7ff fcbe 	bl	10736 <dir_sdi>
	if (res == FR_OK) {
   10dba:	bb00      	cbnz	r0, 10dfe <dir_alloc+0x52>
		n = 0;
   10dbc:	4607      	mov	r7, r0
			res = move_window(fs, dp->sect);
   10dbe:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   10dc0:	4628      	mov	r0, r5
   10dc2:	f7ff fbc7 	bl	10554 <move_window>
			if (res != FR_OK) break;
   10dc6:	b9d0      	cbnz	r0, 10dfe <dir_alloc+0x52>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
   10dc8:	782a      	ldrb	r2, [r5, #0]
   10dca:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   10dcc:	2a04      	cmp	r2, #4
   10dce:	781b      	ldrb	r3, [r3, #0]
   10dd0:	d107      	bne.n	10de2 <dir_alloc+0x36>
   10dd2:	43db      	mvns	r3, r3
   10dd4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   10dd8:	b153      	cbz	r3, 10df0 <dir_alloc+0x44>
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
   10dda:	3701      	adds	r7, #1
   10ddc:	42a7      	cmp	r7, r4
   10dde:	d108      	bne.n	10df2 <dir_alloc+0x46>
}
   10de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
   10de2:	2be5      	cmp	r3, #229	; 0xe5
   10de4:	bf1a      	itte	ne
   10de6:	fab3 f383 	clzne	r3, r3
   10dea:	095b      	lsrne	r3, r3, #5
   10dec:	2301      	moveq	r3, #1
   10dee:	e7f3      	b.n	10dd8 <dir_alloc+0x2c>
				n = 0;				/* Not a free entry, restart to search */
   10df0:	461f      	mov	r7, r3
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
   10df2:	2101      	movs	r1, #1
   10df4:	4630      	mov	r0, r6
   10df6:	f7ff ff7b 	bl	10cf0 <dir_next>
		} while (res == FR_OK);
   10dfa:	2800      	cmp	r0, #0
   10dfc:	d0df      	beq.n	10dbe <dir_alloc+0x12>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
   10dfe:	2804      	cmp	r0, #4
   10e00:	bf08      	it	eq
   10e02:	2007      	moveq	r0, #7
   10e04:	e7ec      	b.n	10de0 <dir_alloc+0x34>

00010e06 <dir_remove>:
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
   10e06:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
   10e08:	1c4b      	adds	r3, r1, #1
{
   10e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
   10e0e:	6805      	ldr	r5, [r0, #0]
	DWORD last = dp->dptr;
   10e10:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
   10e12:	4604      	mov	r4, r0
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
   10e14:	d11f      	bne.n	10e56 <dir_remove+0x50>
				dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'. */
   10e16:	27e5      	movs	r7, #229	; 0xe5
			fs->wflag = 1;
   10e18:	f04f 0801 	mov.w	r8, #1
			res = move_window(fs, dp->sect);
   10e1c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   10e1e:	4628      	mov	r0, r5
   10e20:	f7ff fb98 	bl	10554 <move_window>
			if (res != FR_OK) break;
   10e24:	b998      	cbnz	r0, 10e4e <dir_remove+0x48>
			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
   10e26:	782a      	ldrb	r2, [r5, #0]
   10e28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   10e2a:	2a04      	cmp	r2, #4
				dp->dir[XDIR_Type] &= 0x7F;	/* Clear the entry InUse flag. */
   10e2c:	bf09      	itett	eq
   10e2e:	781a      	ldrbeq	r2, [r3, #0]
				dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'. */
   10e30:	701f      	strbne	r7, [r3, #0]
				dp->dir[XDIR_Type] &= 0x7F;	/* Clear the entry InUse flag. */
   10e32:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
   10e36:	701a      	strbeq	r2, [r3, #0]
			fs->wflag = 1;
   10e38:	f885 8003 	strb.w	r8, [r5, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
   10e3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10e3e:	42b3      	cmp	r3, r6
   10e40:	d20d      	bcs.n	10e5e <dir_remove+0x58>
			res = dir_next(dp, 0);	/* Next entry */
   10e42:	2100      	movs	r1, #0
   10e44:	4620      	mov	r0, r4
   10e46:	f7ff ff53 	bl	10cf0 <dir_next>
		} while (res == FR_OK);
   10e4a:	2800      	cmp	r0, #0
   10e4c:	d0e6      	beq.n	10e1c <dir_remove+0x16>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
   10e4e:	2804      	cmp	r0, #4
   10e50:	bf08      	it	eq
   10e52:	2002      	moveq	r0, #2
   10e54:	e003      	b.n	10e5e <dir_remove+0x58>
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
   10e56:	f7ff fc6e 	bl	10736 <dir_sdi>
	if (res == FR_OK) {
   10e5a:	2800      	cmp	r0, #0
   10e5c:	d0db      	beq.n	10e16 <dir_remove+0x10>
}
   10e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010e62 <load_xdir>:
{
   10e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e66:	4605      	mov	r5, r0
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
   10e68:	6800      	ldr	r0, [r0, #0]
	res = move_window(dp->obj.fs, dp->sect);
   10e6a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
   10e6c:	6906      	ldr	r6, [r0, #16]
	res = move_window(dp->obj.fs, dp->sect);
   10e6e:	f7ff fb71 	bl	10554 <move_window>
	if (res != FR_OK) return res;
   10e72:	4604      	mov	r4, r0
   10e74:	2800      	cmp	r0, #0
   10e76:	d16d      	bne.n	10f54 <load_xdir+0xf2>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
   10e78:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   10e7a:	781a      	ldrb	r2, [r3, #0]
   10e7c:	2a85      	cmp	r2, #133	; 0x85
   10e7e:	d168      	bne.n	10f52 <load_xdir+0xf0>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   10e80:	4632      	mov	r2, r6
   10e82:	f103 0120 	add.w	r1, r3, #32
   10e86:	f853 0b04 	ldr.w	r0, [r3], #4
   10e8a:	f842 0b04 	str.w	r0, [r2], #4
   10e8e:	428b      	cmp	r3, r1
   10e90:	d1f9      	bne.n	10e86 <load_xdir+0x24>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
   10e92:	7877      	ldrb	r7, [r6, #1]
   10e94:	3701      	adds	r7, #1
   10e96:	017f      	lsls	r7, r7, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
   10e98:	f1a7 0360 	sub.w	r3, r7, #96	; 0x60
   10e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   10ea0:	d857      	bhi.n	10f52 <load_xdir+0xf0>
	res = dir_next(dp, 0);
   10ea2:	2100      	movs	r1, #0
   10ea4:	4628      	mov	r0, r5
   10ea6:	f7ff ff23 	bl	10cf0 <dir_next>
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
   10eaa:	2804      	cmp	r0, #4
	res = dir_next(dp, 0);
   10eac:	4604      	mov	r4, r0
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
   10eae:	d050      	beq.n	10f52 <load_xdir+0xf0>
	if (res != FR_OK) return res;
   10eb0:	2800      	cmp	r0, #0
   10eb2:	d14f      	bne.n	10f54 <load_xdir+0xf2>
	res = move_window(dp->obj.fs, dp->sect);
   10eb4:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   10eb6:	6828      	ldr	r0, [r5, #0]
   10eb8:	f7ff fb4c 	bl	10554 <move_window>
	if (res != FR_OK) return res;
   10ebc:	4604      	mov	r4, r0
   10ebe:	2800      	cmp	r0, #0
   10ec0:	d148      	bne.n	10f54 <load_xdir+0xf2>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
   10ec2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   10ec4:	781a      	ldrb	r2, [r3, #0]
   10ec6:	2ac0      	cmp	r2, #192	; 0xc0
   10ec8:	d143      	bne.n	10f52 <load_xdir+0xf0>
   10eca:	f106 0220 	add.w	r2, r6, #32
   10ece:	f103 0120 	add.w	r1, r3, #32
   10ed2:	f853 0b04 	ldr.w	r0, [r3], #4
   10ed6:	f842 0b04 	str.w	r0, [r2], #4
   10eda:	428b      	cmp	r3, r1
   10edc:	d1f9      	bne.n	10ed2 <load_xdir+0x70>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
   10ede:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   10ee2:	220f      	movs	r2, #15
   10ee4:	332c      	adds	r3, #44	; 0x2c
   10ee6:	fbb3 f3f2 	udiv	r3, r3, r2
   10eea:	ebb7 1f43 	cmp.w	r7, r3, lsl #5
   10eee:	d330      	bcc.n	10f52 <load_xdir+0xf0>
	i = 2 * SZDIRE;	/* Name offset to load */
   10ef0:	f04f 0840 	mov.w	r8, #64	; 0x40
		res = dir_next(dp, 0);
   10ef4:	2100      	movs	r1, #0
   10ef6:	4628      	mov	r0, r5
   10ef8:	f7ff fefa 	bl	10cf0 <dir_next>
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
   10efc:	2804      	cmp	r0, #4
		res = dir_next(dp, 0);
   10efe:	4604      	mov	r4, r0
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
   10f00:	d027      	beq.n	10f52 <load_xdir+0xf0>
		if (res != FR_OK) return res;
   10f02:	bb38      	cbnz	r0, 10f54 <load_xdir+0xf2>
		res = move_window(dp->obj.fs, dp->sect);
   10f04:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   10f06:	6828      	ldr	r0, [r5, #0]
   10f08:	f7ff fb24 	bl	10554 <move_window>
		if (res != FR_OK) return res;
   10f0c:	4604      	mov	r4, r0
   10f0e:	bb08      	cbnz	r0, 10f54 <load_xdir+0xf2>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
   10f10:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   10f12:	781a      	ldrb	r2, [r3, #0]
   10f14:	2ac1      	cmp	r2, #193	; 0xc1
   10f16:	d11c      	bne.n	10f52 <load_xdir+0xf0>
		if (i < MAXDIRB(FF_MAX_LFN)) memcpy(dirb + i, dp->dir, SZDIRE);
   10f18:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
   10f1c:	d209      	bcs.n	10f32 <load_xdir+0xd0>
   10f1e:	eb06 0208 	add.w	r2, r6, r8
   10f22:	f103 0120 	add.w	r1, r3, #32
   10f26:	f853 0b04 	ldr.w	r0, [r3], #4
   10f2a:	f842 0b04 	str.w	r0, [r2], #4
   10f2e:	428b      	cmp	r3, r1
   10f30:	d1f9      	bne.n	10f26 <load_xdir+0xc4>
	} while ((i += SZDIRE) < sz_ent);
   10f32:	f108 0820 	add.w	r8, r8, #32
   10f36:	4547      	cmp	r7, r8
   10f38:	d8dc      	bhi.n	10ef4 <load_xdir+0x92>
	if (i <= MAXDIRB(FF_MAX_LFN)) {
   10f3a:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
   10f3e:	d809      	bhi.n	10f54 <load_xdir+0xf2>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
   10f40:	4630      	mov	r0, r6
   10f42:	f7ff f963 	bl	1020c <xdir_sum>
	rv = rv << 8 | ptr[0];
   10f46:	78f2      	ldrb	r2, [r6, #3]
   10f48:	78b3      	ldrb	r3, [r6, #2]
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
   10f4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10f4e:	4298      	cmp	r0, r3
   10f50:	d000      	beq.n	10f54 <load_xdir+0xf2>
   10f52:	2402      	movs	r4, #2
}
   10f54:	4620      	mov	r0, r4
   10f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010f5a <store_xdir>:
{
   10f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
   10f5c:	6803      	ldr	r3, [r0, #0]
   10f5e:	691c      	ldr	r4, [r3, #16]
{
   10f60:	4605      	mov	r5, r0
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
   10f62:	4620      	mov	r0, r4
   10f64:	f7ff f952 	bl	1020c <xdir_sum>
	*ptr++ = (BYTE)val; val >>= 8;
   10f68:	70a0      	strb	r0, [r4, #2]
   10f6a:	0a00      	lsrs	r0, r0, #8
	*ptr++ = (BYTE)val;
   10f6c:	70e0      	strb	r0, [r4, #3]
	res = dir_sdi(dp, dp->blk_ofs);
   10f6e:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
	nent = dirb[XDIR_NumSec] + 1;
   10f70:	7866      	ldrb	r6, [r4, #1]
	res = dir_sdi(dp, dp->blk_ofs);
   10f72:	4628      	mov	r0, r5
   10f74:	f7ff fbdf 	bl	10736 <dir_sdi>
		dp->obj.fs->wflag = 1;
   10f78:	2701      	movs	r7, #1
	while (res == FR_OK) {
   10f7a:	b120      	cbz	r0, 10f86 <store_xdir+0x2c>
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
   10f7c:	2802      	cmp	r0, #2
   10f7e:	bf28      	it	cs
   10f80:	2002      	movcs	r0, #2
}
   10f82:	b2c0      	uxtb	r0, r0
   10f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		res = move_window(dp->obj.fs, dp->sect);
   10f86:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   10f88:	6828      	ldr	r0, [r5, #0]
   10f8a:	f7ff fae3 	bl	10554 <move_window>
		if (res != FR_OK) break;
   10f8e:	2800      	cmp	r0, #0
   10f90:	d1f4      	bne.n	10f7c <store_xdir+0x22>
   10f92:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   10f94:	f104 0220 	add.w	r2, r4, #32
   10f98:	f854 1b04 	ldr.w	r1, [r4], #4
   10f9c:	f843 1b04 	str.w	r1, [r3], #4
   10fa0:	4294      	cmp	r4, r2
   10fa2:	d1f9      	bne.n	10f98 <store_xdir+0x3e>
		dp->obj.fs->wflag = 1;
   10fa4:	682b      	ldr	r3, [r5, #0]
   10fa6:	70df      	strb	r7, [r3, #3]
		if (--nent == 0) break;
   10fa8:	2e00      	cmp	r6, #0
   10faa:	d0e7      	beq.n	10f7c <store_xdir+0x22>
		res = dir_next(dp, 0);
   10fac:	2100      	movs	r1, #0
   10fae:	4628      	mov	r0, r5
   10fb0:	f7ff fe9e 	bl	10cf0 <dir_next>
   10fb4:	3e01      	subs	r6, #1
   10fb6:	e7e0      	b.n	10f7a <store_xdir+0x20>

00010fb8 <f_open>:
{
   10fb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10fbc:	b099      	sub	sp, #100	; 0x64
   10fbe:	4615      	mov	r5, r2
   10fc0:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
   10fc2:	4604      	mov	r4, r0
   10fc4:	2800      	cmp	r0, #0
   10fc6:	f000 812b 	beq.w	11220 <f_open+0x268>
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
   10fca:	f002 063f 	and.w	r6, r2, #63	; 0x3f
	res = mount_volume(&path, &fs, mode);
   10fce:	4632      	mov	r2, r6
   10fd0:	a903      	add	r1, sp, #12
   10fd2:	a801      	add	r0, sp, #4
   10fd4:	f7f7 fe5e 	bl	8c94 <mount_volume>
	if (res == FR_OK) {
   10fd8:	2800      	cmp	r0, #0
   10fda:	f040 8119 	bne.w	11210 <f_open+0x258>
		dj.obj.fs = fs;
   10fde:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
   10fe0:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
   10fe2:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
   10fe4:	a804      	add	r0, sp, #16
   10fe6:	f7f8 f9ed 	bl	93c4 <follow_path>
		if (res == FR_OK) {
   10fea:	4602      	mov	r2, r0
   10fec:	b920      	cbnz	r0, 10ff8 <f_open+0x40>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
   10fee:	f99d 305b 	ldrsb.w	r3, [sp, #91]	; 0x5b
				res = FR_INVALID_NAME;
   10ff2:	2b00      	cmp	r3, #0
   10ff4:	bfb8      	it	lt
   10ff6:	2206      	movlt	r2, #6
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   10ff8:	f015 0f1c 	tst.w	r5, #28
   10ffc:	f000 80ba 	beq.w	11174 <f_open+0x1bc>
			if (res != FR_OK) {					/* No file, create new */
   11000:	2a00      	cmp	r2, #0
   11002:	d046      	beq.n	11092 <f_open+0xda>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
   11004:	2a04      	cmp	r2, #4
   11006:	d141      	bne.n	1108c <f_open+0xd4>
					res = dir_register(&dj);
   11008:	a804      	add	r0, sp, #16
   1100a:	f7f8 fb3d 	bl	9688 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
   1100e:	4602      	mov	r2, r0
   11010:	2800      	cmp	r0, #0
   11012:	d13b      	bne.n	1108c <f_open+0xd4>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
   11014:	f046 0608 	orr.w	r6, r6, #8
				if (fs->fs_type == FS_EXFAT) {
   11018:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1101c:	f898 3000 	ldrb.w	r3, [r8]
   11020:	2b04      	cmp	r3, #4
   11022:	d170      	bne.n	11106 <f_open+0x14e>
					init_alloc_info(fs, &fp->obj);
   11024:	f8d8 0010 	ldr.w	r0, [r8, #16]
					fp->obj.fs = fs;
   11028:	f8c4 8000 	str.w	r8, [r4]
					init_alloc_info(fs, &fp->obj);
   1102c:	4621      	mov	r1, r4
   1102e:	f7ff fa58 	bl	104e2 <init_alloc_info.isra.0>
					memset(fs->dirbuf + 2, 0, 30);	/* Clear 85 entry except for NumSec */
   11032:	9b03      	ldr	r3, [sp, #12]
   11034:	6918      	ldr	r0, [r3, #16]
__ssp_bos_icheck3(memset, void *, int)
   11036:	221e      	movs	r2, #30
   11038:	2100      	movs	r1, #0
   1103a:	3002      	adds	r0, #2
   1103c:	f001 f962 	bl	12304 <memset>
					memset(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
   11040:	9d03      	ldr	r5, [sp, #12]
   11042:	6928      	ldr	r0, [r5, #16]
   11044:	221a      	movs	r2, #26
   11046:	2100      	movs	r1, #0
   11048:	3026      	adds	r0, #38	; 0x26
   1104a:	f001 f95b 	bl	12304 <memset>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
   1104e:	692b      	ldr	r3, [r5, #16]
   11050:	2220      	movs	r2, #32
   11052:	711a      	strb	r2, [r3, #4]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
   11054:	692b      	ldr	r3, [r5, #16]
	*ptr++ = (BYTE)val; val >>= 8;
   11056:	2200      	movs	r2, #0
   11058:	721a      	strb	r2, [r3, #8]
	*ptr++ = (BYTE)val; val >>= 8;
   1105a:	725a      	strb	r2, [r3, #9]
	*ptr++ = (BYTE)val; val >>= 8;
   1105c:	2221      	movs	r2, #33	; 0x21
   1105e:	729a      	strb	r2, [r3, #10]
	*ptr++ = (BYTE)val;
   11060:	2250      	movs	r2, #80	; 0x50
   11062:	72da      	strb	r2, [r3, #11]
					fs->dirbuf[XDIR_GenFlags] = 1;
   11064:	692b      	ldr	r3, [r5, #16]
   11066:	2201      	movs	r2, #1
   11068:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					res = store_xdir(&dj);
   1106c:	a804      	add	r0, sp, #16
   1106e:	f7ff ff74 	bl	10f5a <store_xdir>
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
   11072:	4602      	mov	r2, r0
   11074:	b950      	cbnz	r0, 1108c <f_open+0xd4>
   11076:	68a1      	ldr	r1, [r4, #8]
   11078:	b1a9      	cbz	r1, 110a6 <f_open+0xee>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
   1107a:	4620      	mov	r0, r4
   1107c:	f7ff fc3d 	bl	108fa <remove_chain>
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
   11080:	68a3      	ldr	r3, [r4, #8]
   11082:	9903      	ldr	r1, [sp, #12]
   11084:	3b01      	subs	r3, #1
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
   11086:	4602      	mov	r2, r0
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
   11088:	614b      	str	r3, [r1, #20]
		if (res == FR_OK) {
   1108a:	b162      	cbz	r2, 110a6 <f_open+0xee>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
   1108c:	2300      	movs	r3, #0
   1108e:	6023      	str	r3, [r4, #0]
   11090:	e035      	b.n	110fe <f_open+0x146>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   11092:	f89d 3016 	ldrb.w	r3, [sp, #22]
   11096:	f013 0f11 	tst.w	r3, #17
   1109a:	d175      	bne.n	11188 <f_open+0x1d0>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
   1109c:	076a      	lsls	r2, r5, #29
   1109e:	f100 80b9 	bmi.w	11214 <f_open+0x25c>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
   110a2:	072b      	lsls	r3, r5, #28
   110a4:	d4b8      	bmi.n	11018 <f_open+0x60>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
   110a6:	9a03      	ldr	r2, [sp, #12]
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
   110a8:	0731      	lsls	r1, r6, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
   110aa:	6b93      	ldr	r3, [r2, #56]	; 0x38
			fp->dir_ptr = dj.dir;
   110ac:	9913      	ldr	r1, [sp, #76]	; 0x4c
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
   110ae:	64a3      	str	r3, [r4, #72]	; 0x48
			fp->dir_ptr = dj.dir;
   110b0:	64e1      	str	r1, [r4, #76]	; 0x4c
			if (fs->fs_type == FS_EXFAT) {
   110b2:	7810      	ldrb	r0, [r2, #0]
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
   110b4:	bf48      	it	mi
   110b6:	f046 0640 	orrmi.w	r6, r6, #64	; 0x40
			if (fs->fs_type == FS_EXFAT) {
   110ba:	2804      	cmp	r0, #4
   110bc:	d166      	bne.n	1118c <f_open+0x1d4>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
   110be:	9b06      	ldr	r3, [sp, #24]
   110c0:	6223      	str	r3, [r4, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
   110c2:	9b08      	ldr	r3, [sp, #32]
   110c4:	f89d 1017 	ldrb.w	r1, [sp, #23]
				init_alloc_info(fs, &fp->obj);
   110c8:	6910      	ldr	r0, [r2, #16]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
   110ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   110ce:	430b      	orrs	r3, r1
   110d0:	6263      	str	r3, [r4, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
   110d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   110d4:	62a3      	str	r3, [r4, #40]	; 0x28
				init_alloc_info(fs, &fp->obj);
   110d6:	4621      	mov	r1, r4
   110d8:	f7ff fa03 	bl	104e2 <init_alloc_info.isra.0>
			fp->obj.fs = fs;	/* Validate the file object */
   110dc:	9b03      	ldr	r3, [sp, #12]
   110de:	6023      	str	r3, [r4, #0]
			fp->obj.id = fs->id;
   110e0:	88da      	ldrh	r2, [r3, #6]
   110e2:	80a2      	strh	r2, [r4, #4]
			fp->err = 0;		/* Clear error flag */
   110e4:	2200      	movs	r2, #0
   110e6:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
			fp->sect = 0;		/* Invalidate current data sector */
   110ea:	6462      	str	r2, [r4, #68]	; 0x44
			fp->fptr = 0;		/* Set file pointer top of the file */
   110ec:	2000      	movs	r0, #0
   110ee:	2100      	movs	r1, #0
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
   110f0:	06b2      	lsls	r2, r6, #26
			fp->fptr = 0;		/* Set file pointer top of the file */
   110f2:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
			fp->flag = mode;	/* Set file access mode */
   110f6:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
   110fa:	d452      	bmi.n	111a2 <f_open+0x1ea>
						res = FR_INT_ERR;
   110fc:	2200      	movs	r2, #0
}
   110fe:	4610      	mov	r0, r2
   11100:	b019      	add	sp, #100	; 0x64
   11102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					st_dword(dj.dir + DIR_CrtTime, tm);
   11106:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	*ptr++ = (BYTE)val; val >>= 8;
   11108:	2500      	movs	r5, #0
	*ptr++ = (BYTE)val;
   1110a:	2250      	movs	r2, #80	; 0x50
	*ptr++ = (BYTE)val; val >>= 8;
   1110c:	2121      	movs	r1, #33	; 0x21
	*ptr++ = (BYTE)val;
   1110e:	745a      	strb	r2, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
   11110:	739d      	strb	r5, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
   11112:	73dd      	strb	r5, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
   11114:	7419      	strb	r1, [r3, #16]
					st_dword(dj.dir + DIR_ModTime, tm);
   11116:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	*ptr++ = (BYTE)val;
   11118:	765a      	strb	r2, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
   1111a:	759d      	strb	r5, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
   1111c:	75dd      	strb	r5, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
   1111e:	7619      	strb	r1, [r3, #24]
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
   11120:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11122:	f898 0000 	ldrb.w	r0, [r8]
   11126:	f7ff f9c2 	bl	104ae <ld_clust.isra.0>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
   1112a:	2320      	movs	r3, #32
   1112c:	72cb      	strb	r3, [r1, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
   1112e:	462a      	mov	r2, r5
   11130:	9913      	ldr	r1, [sp, #76]	; 0x4c
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
   11132:	4607      	mov	r7, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
   11134:	4640      	mov	r0, r8
   11136:	f7ff f9c8 	bl	104ca <st_clust.isra.0>
					st_dword(dj.dir + DIR_FileSize, 0);
   1113a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	*ptr++ = (BYTE)val; val >>= 8;
   1113c:	771d      	strb	r5, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
   1113e:	775d      	strb	r5, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
   11140:	779d      	strb	r5, [r3, #30]
	*ptr++ = (BYTE)val;
   11142:	77dd      	strb	r5, [r3, #31]
					fs->wflag = 1;
   11144:	9b03      	ldr	r3, [sp, #12]
   11146:	2201      	movs	r2, #1
   11148:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
   1114a:	2f00      	cmp	r7, #0
   1114c:	d0ab      	beq.n	110a6 <f_open+0xee>
						res = remove_chain(&dj.obj, cl, 0);
   1114e:	462a      	mov	r2, r5
   11150:	4639      	mov	r1, r7
   11152:	a804      	add	r0, sp, #16
						sc = fs->winsect;
   11154:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
						res = remove_chain(&dj.obj, cl, 0);
   11158:	f7ff fbcf 	bl	108fa <remove_chain>
						if (res == FR_OK) {
   1115c:	4602      	mov	r2, r0
   1115e:	2800      	cmp	r0, #0
   11160:	d194      	bne.n	1108c <f_open+0xd4>
							res = move_window(fs, sc);
   11162:	9803      	ldr	r0, [sp, #12]
   11164:	4641      	mov	r1, r8
   11166:	f7ff f9f5 	bl	10554 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
   1116a:	9b03      	ldr	r3, [sp, #12]
   1116c:	3f01      	subs	r7, #1
							res = move_window(fs, sc);
   1116e:	4602      	mov	r2, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
   11170:	615f      	str	r7, [r3, #20]
   11172:	e78a      	b.n	1108a <f_open+0xd2>
			if (res == FR_OK) {					/* Is the object exsiting? */
   11174:	2a00      	cmp	r2, #0
   11176:	d189      	bne.n	1108c <f_open+0xd4>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
   11178:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1117c:	06df      	lsls	r7, r3, #27
   1117e:	d44b      	bmi.n	11218 <f_open+0x260>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
   11180:	07ad      	lsls	r5, r5, #30
   11182:	d590      	bpl.n	110a6 <f_open+0xee>
   11184:	07d8      	lsls	r0, r3, #31
   11186:	d58e      	bpl.n	110a6 <f_open+0xee>
					res = FR_DENIED;
   11188:	2207      	movs	r2, #7
   1118a:	e77f      	b.n	1108c <f_open+0xd4>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
   1118c:	f7ff f98f 	bl	104ae <ld_clust.isra.0>
   11190:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
   11192:	f101 001c 	add.w	r0, r1, #28
   11196:	f7fe ffeb 	bl	10170 <ld_dword>
   1119a:	2300      	movs	r3, #0
   1119c:	6120      	str	r0, [r4, #16]
   1119e:	6163      	str	r3, [r4, #20]
   111a0:	e79c      	b.n	110dc <f_open+0x124>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
   111a2:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
   111a6:	ea56 0207 	orrs.w	r2, r6, r7
   111aa:	d0a7      	beq.n	110fc <f_open+0x144>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
   111ac:	f8b3 800a 	ldrh.w	r8, [r3, #10]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
   111b0:	68a1      	ldr	r1, [r4, #8]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
   111b2:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
   111b6:	ea4f 2848 	mov.w	r8, r8, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
   111ba:	f04f 0900 	mov.w	r9, #0
   111be:	45b9      	cmp	r9, r7
   111c0:	bf08      	it	eq
   111c2:	45b0      	cmpeq	r8, r6
   111c4:	d314      	bcc.n	111f0 <f_open+0x238>
   111c6:	2200      	movs	r2, #0
				fp->clust = clst;
   111c8:	6421      	str	r1, [r4, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
   111ca:	2a00      	cmp	r2, #0
   111cc:	f47f af5e 	bne.w	1108c <f_open+0xd4>
   111d0:	f3c6 0808 	ubfx	r8, r6, #0, #9
   111d4:	4691      	mov	r9, r2
   111d6:	ea58 0309 	orrs.w	r3, r8, r9
   111da:	d08f      	beq.n	110fc <f_open+0x144>
					sc = clst2sect(fs, clst);
   111dc:	9803      	ldr	r0, [sp, #12]
   111de:	f7fe fffc 	bl	101da <clst2sect>
					if (sc == 0) {
   111e2:	b1d8      	cbz	r0, 1121c <f_open+0x264>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
   111e4:	0a73      	lsrs	r3, r6, #9
   111e6:	ea43 53c7 	orr.w	r3, r3, r7, lsl #23
   111ea:	4418      	add	r0, r3
   111ec:	6460      	str	r0, [r4, #68]	; 0x44
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
   111ee:	e786      	b.n	110fe <f_open+0x146>
					clst = get_fat(&fp->obj, clst);
   111f0:	4620      	mov	r0, r4
   111f2:	f7ff fa05 	bl	10600 <get_fat>
   111f6:	ebb6 0608 	subs.w	r6, r6, r8
   111fa:	eb67 0709 	sbc.w	r7, r7, r9
					if (clst <= 1) res = FR_INT_ERR;
   111fe:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
   11200:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
   11202:	d903      	bls.n	1120c <f_open+0x254>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
   11204:	1c43      	adds	r3, r0, #1
   11206:	d1da      	bne.n	111be <f_open+0x206>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
   11208:	2201      	movs	r2, #1
   1120a:	e7dd      	b.n	111c8 <f_open+0x210>
					if (clst <= 1) res = FR_INT_ERR;
   1120c:	2202      	movs	r2, #2
   1120e:	e7db      	b.n	111c8 <f_open+0x210>
   11210:	4602      	mov	r2, r0
   11212:	e73b      	b.n	1108c <f_open+0xd4>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
   11214:	2208      	movs	r2, #8
   11216:	e739      	b.n	1108c <f_open+0xd4>
					res = FR_NO_FILE;
   11218:	2204      	movs	r2, #4
   1121a:	e737      	b.n	1108c <f_open+0xd4>
						res = FR_INT_ERR;
   1121c:	2202      	movs	r2, #2
   1121e:	e735      	b.n	1108c <f_open+0xd4>
	if (!fp) return FR_INVALID_OBJECT;
   11220:	2209      	movs	r2, #9
   11222:	e76c      	b.n	110fe <f_open+0x146>

00011224 <f_read>:
{
   11224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11228:	469b      	mov	fp, r3
   1122a:	b087      	sub	sp, #28
	*br = 0;	/* Clear read byte counter */
   1122c:	2300      	movs	r3, #0
{
   1122e:	468a      	mov	sl, r1
	*br = 0;	/* Clear read byte counter */
   11230:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
   11234:	a905      	add	r1, sp, #20
{
   11236:	4604      	mov	r4, r0
   11238:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
   1123a:	f7fe fffd 	bl	10238 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
   1123e:	4606      	mov	r6, r0
   11240:	2800      	cmp	r0, #0
   11242:	d135      	bne.n	112b0 <f_read+0x8c>
   11244:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
   11248:	bb96      	cbnz	r6, 112b0 <f_read+0x8c>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
   1124a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1124e:	f013 0301 	ands.w	r3, r3, #1
   11252:	9302      	str	r3, [sp, #8]
   11254:	f000 8096 	beq.w	11384 <f_read+0x160>
	remain = fp->obj.objsize - fp->fptr;
   11258:	e9d4 310e 	ldrd	r3, r1, [r4, #56]	; 0x38
   1125c:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   11260:	ebb2 0803 	subs.w	r8, r2, r3
   11264:	eb60 0901 	sbc.w	r9, r0, r1
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
   11268:	2300      	movs	r3, #0
   1126a:	4599      	cmp	r9, r3
   1126c:	bf08      	it	eq
   1126e:	45b8      	cmpeq	r8, r7
   11270:	bf38      	it	cc
   11272:	4647      	movcc	r7, r8
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
   11274:	b1e7      	cbz	r7, 112b0 <f_read+0x8c>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
   11276:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
   1127a:	f3c0 0308 	ubfx	r3, r0, #0, #9
   1127e:	9300      	str	r3, [sp, #0]
   11280:	2300      	movs	r3, #0
   11282:	9301      	str	r3, [sp, #4]
   11284:	e9dd 2300 	ldrd	r2, r3, [sp]
   11288:	4313      	orrs	r3, r2
   1128a:	d162      	bne.n	11352 <f_read+0x12e>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
   1128c:	9b05      	ldr	r3, [sp, #20]
   1128e:	895b      	ldrh	r3, [r3, #10]
   11290:	1e5a      	subs	r2, r3, #1
   11292:	0a43      	lsrs	r3, r0, #9
   11294:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
			if (csect == 0) {					/* On the cluster boundary? */
   11298:	ea12 0903 	ands.w	r9, r2, r3
   1129c:	d119      	bne.n	112d2 <f_read+0xae>
				if (fp->fptr == 0) {			/* On the top of the file? */
   1129e:	ea50 0301 	orrs.w	r3, r0, r1
   112a2:	d109      	bne.n	112b8 <f_read+0x94>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
   112a4:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
   112a6:	2801      	cmp	r0, #1
   112a8:	d80b      	bhi.n	112c2 <f_read+0x9e>
   112aa:	2602      	movs	r6, #2
   112ac:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
}
   112b0:	4630      	mov	r0, r6
   112b2:	b007      	add	sp, #28
   112b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
   112b8:	6c21      	ldr	r1, [r4, #64]	; 0x40
   112ba:	4620      	mov	r0, r4
   112bc:	f7ff f9a0 	bl	10600 <get_fat>
   112c0:	e7f1      	b.n	112a6 <f_read+0x82>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   112c2:	1c43      	adds	r3, r0, #1
   112c4:	d104      	bne.n	112d0 <f_read+0xac>
   112c6:	2301      	movs	r3, #1
   112c8:	9e02      	ldr	r6, [sp, #8]
   112ca:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   112ce:	e7ef      	b.n	112b0 <f_read+0x8c>
				fp->clust = clst;				/* Update current cluster */
   112d0:	6420      	str	r0, [r4, #64]	; 0x40
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
   112d2:	f8dd 8014 	ldr.w	r8, [sp, #20]
   112d6:	6c21      	ldr	r1, [r4, #64]	; 0x40
   112d8:	4640      	mov	r0, r8
   112da:	f7fe ff7e 	bl	101da <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
   112de:	2800      	cmp	r0, #0
   112e0:	d0e3      	beq.n	112aa <f_read+0x86>
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
   112e2:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
   112e6:	eb09 0200 	add.w	r2, r9, r0
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
   112ea:	d331      	bcc.n	11350 <f_read+0x12c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
   112ec:	f8b8 100a 	ldrh.w	r1, [r8, #10]
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   112f0:	9203      	str	r2, [sp, #12]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
   112f2:	eb09 2057 	add.w	r0, r9, r7, lsr #9
   112f6:	4288      	cmp	r0, r1
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
   112f8:	ea4f 2557 	mov.w	r5, r7, lsr #9
					cc = fs->csize - csect;
   112fc:	bf88      	it	hi
   112fe:	eba1 0509 	subhi.w	r5, r1, r9
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   11302:	f898 0001 	ldrb.w	r0, [r8, #1]
   11306:	462b      	mov	r3, r5
   11308:	4651      	mov	r1, sl
   1130a:	f7f9 fa27 	bl	a75c <disk_read>
   1130e:	2800      	cmp	r0, #0
   11310:	d1d9      	bne.n	112c6 <f_read+0xa2>
				if (fs->wflag && fs->winsect - sect < cc) {
   11312:	9905      	ldr	r1, [sp, #20]
   11314:	78cb      	ldrb	r3, [r1, #3]
   11316:	b15b      	cbz	r3, 11330 <f_read+0x10c>
   11318:	6b88      	ldr	r0, [r1, #56]	; 0x38
   1131a:	9a03      	ldr	r2, [sp, #12]
   1131c:	1a80      	subs	r0, r0, r2
   1131e:	42a8      	cmp	r0, r5
   11320:	d206      	bcs.n	11330 <f_read+0x10c>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11322:	f44f 7200 	mov.w	r2, #512	; 0x200
   11326:	313c      	adds	r1, #60	; 0x3c
   11328:	eb0a 2040 	add.w	r0, sl, r0, lsl #9
   1132c:	f000 ffdc 	bl	122e8 <memcpy>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
   11330:	026d      	lsls	r5, r5, #9
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
   11332:	f8db 3000 	ldr.w	r3, [fp]
   11336:	442b      	add	r3, r5
   11338:	f8cb 3000 	str.w	r3, [fp]
   1133c:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
   11340:	1952      	adds	r2, r2, r5
   11342:	f143 0300 	adc.w	r3, r3, #0
   11346:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
   1134a:	1b7f      	subs	r7, r7, r5
   1134c:	44aa      	add	sl, r5
   1134e:	e791      	b.n	11274 <f_read+0x50>
			fp->sect = sect;
   11350:	6462      	str	r2, [r4, #68]	; 0x44
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
   11352:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
   11354:	6c61      	ldr	r1, [r4, #68]	; 0x44
   11356:	9805      	ldr	r0, [sp, #20]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
   11358:	f3c5 0508 	ubfx	r5, r5, #0, #9
   1135c:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
   11360:	42bd      	cmp	r5, r7
   11362:	bf28      	it	cs
   11364:	463d      	movcs	r5, r7
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
   11366:	f7ff f8f5 	bl	10554 <move_window>
   1136a:	2800      	cmp	r0, #0
   1136c:	d1ab      	bne.n	112c6 <f_read+0xa2>
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
   1136e:	9905      	ldr	r1, [sp, #20]
   11370:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   11372:	313c      	adds	r1, #60	; 0x3c
   11374:	f3c3 0308 	ubfx	r3, r3, #0, #9
   11378:	462a      	mov	r2, r5
   1137a:	4419      	add	r1, r3
   1137c:	4650      	mov	r0, sl
   1137e:	f000 ffb3 	bl	122e8 <memcpy>
   11382:	e7d6      	b.n	11332 <f_read+0x10e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
   11384:	2607      	movs	r6, #7
   11386:	e793      	b.n	112b0 <f_read+0x8c>

00011388 <f_write>:
{
   11388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1138c:	4698      	mov	r8, r3
   1138e:	b087      	sub	sp, #28
	*bw = 0;	/* Clear write byte counter */
   11390:	2300      	movs	r3, #0
{
   11392:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
   11394:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
   11398:	a905      	add	r1, sp, #20
{
   1139a:	4604      	mov	r4, r0
   1139c:	4692      	mov	sl, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
   1139e:	f7fe ff4b 	bl	10238 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
   113a2:	4605      	mov	r5, r0
   113a4:	2800      	cmp	r0, #0
   113a6:	d138      	bne.n	1141a <f_write+0x92>
   113a8:	f894 5031 	ldrb.w	r5, [r4, #49]	; 0x31
   113ac:	2d00      	cmp	r5, #0
   113ae:	d134      	bne.n	1141a <f_write+0x92>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   113b0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   113b4:	079a      	lsls	r2, r3, #30
   113b6:	f140 80c9 	bpl.w	1154c <f_write+0x1c4>
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
   113ba:	9b05      	ldr	r3, [sp, #20]
   113bc:	781b      	ldrb	r3, [r3, #0]
   113be:	2b04      	cmp	r3, #4
   113c0:	d005      	beq.n	113ce <f_write+0x46>
   113c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   113c4:	eb13 0f0a 	cmn.w	r3, sl
   113c8:	d301      	bcc.n	113ce <f_write+0x46>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
   113ca:	ea6f 0a03 	mvn.w	sl, r3
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
   113ce:	f1ba 0f00 	cmp.w	sl, #0
   113d2:	d01c      	beq.n	1140e <f_write+0x86>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
   113d4:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
   113d8:	f3c2 0108 	ubfx	r1, r2, #0, #9
   113dc:	9100      	str	r1, [sp, #0]
   113de:	2100      	movs	r1, #0
   113e0:	9101      	str	r1, [sp, #4]
   113e2:	e9dd 0100 	ldrd	r0, r1, [sp]
   113e6:	4301      	orrs	r1, r0
   113e8:	f040 8093 	bne.w	11512 <f_write+0x18a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
   113ec:	9905      	ldr	r1, [sp, #20]
   113ee:	894e      	ldrh	r6, [r1, #10]
   113f0:	0a51      	lsrs	r1, r2, #9
   113f2:	3e01      	subs	r6, #1
   113f4:	ea41 51c3 	orr.w	r1, r1, r3, lsl #23
			if (csect == 0) {				/* On the cluster boundary? */
   113f8:	400e      	ands	r6, r1
   113fa:	d122      	bne.n	11442 <f_write+0xba>
				if (fp->fptr == 0) {		/* On the top of the file? */
   113fc:	4313      	orrs	r3, r2
   113fe:	d110      	bne.n	11422 <f_write+0x9a>
					clst = fp->obj.sclust;	/* Follow from the origin */
   11400:	68a1      	ldr	r1, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
   11402:	b981      	cbnz	r1, 11426 <f_write+0x9e>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   11404:	4620      	mov	r0, r4
   11406:	f7ff fb82 	bl	10b0e <create_chain>
   1140a:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   1140c:	b958      	cbnz	r0, 11426 <f_write+0x9e>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
   1140e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   11412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11416:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
   1141a:	4628      	mov	r0, r5
   1141c:	b007      	add	sp, #28
   1141e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   11422:	6c21      	ldr	r1, [r4, #64]	; 0x40
   11424:	e7ee      	b.n	11404 <f_write+0x7c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
   11426:	2901      	cmp	r1, #1
   11428:	d103      	bne.n	11432 <f_write+0xaa>
   1142a:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   1142c:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
   11430:	e7f3      	b.n	1141a <f_write+0x92>
   11432:	1c4b      	adds	r3, r1, #1
   11434:	d101      	bne.n	1143a <f_write+0xb2>
   11436:	2501      	movs	r5, #1
   11438:	e7f8      	b.n	1142c <f_write+0xa4>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
   1143a:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
   1143c:	6421      	str	r1, [r4, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
   1143e:	b903      	cbnz	r3, 11442 <f_write+0xba>
   11440:	60a1      	str	r1, [r4, #8]
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
   11442:	9805      	ldr	r0, [sp, #20]
   11444:	6c63      	ldr	r3, [r4, #68]	; 0x44
   11446:	6b82      	ldr	r2, [r0, #56]	; 0x38
   11448:	429a      	cmp	r2, r3
   1144a:	d103      	bne.n	11454 <f_write+0xcc>
   1144c:	f7ff f85e 	bl	1050c <sync_window>
   11450:	2800      	cmp	r0, #0
   11452:	d1f0      	bne.n	11436 <f_write+0xae>
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
   11454:	f8dd b014 	ldr.w	fp, [sp, #20]
   11458:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1145a:	4658      	mov	r0, fp
   1145c:	f7fe febd 	bl	101da <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
   11460:	2800      	cmp	r0, #0
   11462:	d0e2      	beq.n	1142a <f_write+0xa2>
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
   11464:	f5ba 7f00 	cmp.w	sl, #512	; 0x200
			sect += csect;
   11468:	eb06 0200 	add.w	r2, r6, r0
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
   1146c:	d33f      	bcc.n	114ee <f_write+0x166>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
   1146e:	f8bb 300a 	ldrh.w	r3, [fp, #10]
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   11472:	f89b 0001 	ldrb.w	r0, [fp, #1]
   11476:	9203      	str	r2, [sp, #12]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
   11478:	eb06 215a 	add.w	r1, r6, sl, lsr #9
   1147c:	4299      	cmp	r1, r3
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
   1147e:	ea4f 275a 	mov.w	r7, sl, lsr #9
					cc = fs->csize - csect;
   11482:	bf88      	it	hi
   11484:	1b9f      	subhi	r7, r3, r6
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   11486:	463b      	mov	r3, r7
   11488:	4649      	mov	r1, r9
   1148a:	f7f9 f989 	bl	a7a0 <disk_write>
   1148e:	4606      	mov	r6, r0
   11490:	2800      	cmp	r0, #0
   11492:	d1d0      	bne.n	11436 <f_write+0xae>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   11494:	f8dd b014 	ldr.w	fp, [sp, #20]
   11498:	9a03      	ldr	r2, [sp, #12]
   1149a:	f8db 1038 	ldr.w	r1, [fp, #56]	; 0x38
   1149e:	1a89      	subs	r1, r1, r2
   114a0:	42b9      	cmp	r1, r7
   114a2:	d209      	bcs.n	114b8 <f_write+0x130>
   114a4:	f44f 7200 	mov.w	r2, #512	; 0x200
   114a8:	eb09 2141 	add.w	r1, r9, r1, lsl #9
   114ac:	f10b 003c 	add.w	r0, fp, #60	; 0x3c
   114b0:	f000 ff1a 	bl	122e8 <memcpy>
					fs->wflag = 0;
   114b4:	f88b 6003 	strb.w	r6, [fp, #3]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
   114b8:	027f      	lsls	r7, r7, #9
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
   114ba:	f8d8 3000 	ldr.w	r3, [r8]
   114be:	443b      	add	r3, r7
   114c0:	f8c8 3000 	str.w	r3, [r8]
   114c4:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
   114c8:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   114cc:	19d2      	adds	r2, r2, r7
   114ce:	f143 0300 	adc.w	r3, r3, #0
   114d2:	4299      	cmp	r1, r3
   114d4:	bf08      	it	eq
   114d6:	4290      	cmpeq	r0, r2
   114d8:	bf3c      	itt	cc
   114da:	4610      	movcc	r0, r2
   114dc:	4619      	movcc	r1, r3
   114de:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
   114e2:	e9c4 0104 	strd	r0, r1, [r4, #16]
   114e6:	ebaa 0a07 	sub.w	sl, sl, r7
   114ea:	44b9      	add	r9, r7
   114ec:	e76f      	b.n	113ce <f_write+0x46>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
   114ee:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
   114f2:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
   114f6:	42b9      	cmp	r1, r7
   114f8:	bf08      	it	eq
   114fa:	42b0      	cmpeq	r0, r6
   114fc:	d308      	bcc.n	11510 <f_write+0x188>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
   114fe:	4658      	mov	r0, fp
   11500:	9203      	str	r2, [sp, #12]
   11502:	f7ff f803 	bl	1050c <sync_window>
   11506:	2800      	cmp	r0, #0
   11508:	d195      	bne.n	11436 <f_write+0xae>
				fs->winsect = sect;
   1150a:	9b05      	ldr	r3, [sp, #20]
   1150c:	9a03      	ldr	r2, [sp, #12]
   1150e:	639a      	str	r2, [r3, #56]	; 0x38
			fp->sect = sect;
   11510:	6462      	str	r2, [r4, #68]	; 0x44
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
   11512:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
   11514:	6c61      	ldr	r1, [r4, #68]	; 0x44
   11516:	9805      	ldr	r0, [sp, #20]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
   11518:	f3c7 0708 	ubfx	r7, r7, #0, #9
   1151c:	f5c7 7700 	rsb	r7, r7, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
   11520:	4557      	cmp	r7, sl
   11522:	bf28      	it	cs
   11524:	4657      	movcs	r7, sl
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
   11526:	f7ff f815 	bl	10554 <move_window>
   1152a:	2800      	cmp	r0, #0
   1152c:	d183      	bne.n	11436 <f_write+0xae>
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
   1152e:	9805      	ldr	r0, [sp, #20]
   11530:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   11532:	303c      	adds	r0, #60	; 0x3c
   11534:	f3c3 0308 	ubfx	r3, r3, #0, #9
   11538:	463a      	mov	r2, r7
   1153a:	4418      	add	r0, r3
   1153c:	4649      	mov	r1, r9
   1153e:	f000 fed3 	bl	122e8 <memcpy>
		fs->wflag = 1;
   11542:	9b05      	ldr	r3, [sp, #20]
   11544:	f04f 0201 	mov.w	r2, #1
   11548:	70da      	strb	r2, [r3, #3]
   1154a:	e7b6      	b.n	114ba <f_write+0x132>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   1154c:	2507      	movs	r5, #7
   1154e:	e764      	b.n	1141a <f_write+0x92>

00011550 <f_sync>:
{
   11550:	b570      	push	{r4, r5, r6, lr}
   11552:	b096      	sub	sp, #88	; 0x58
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
   11554:	a901      	add	r1, sp, #4
{
   11556:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
   11558:	f7fe fe6e 	bl	10238 <validate>
	if (res == FR_OK) {
   1155c:	4604      	mov	r4, r0
   1155e:	2800      	cmp	r0, #0
   11560:	d16e      	bne.n	11640 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
   11562:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
   11566:	f010 0440 	ands.w	r4, r0, #64	; 0x40
   1156a:	d069      	beq.n	11640 <f_sync+0xf0>
			if (fs->fs_type == FS_EXFAT) {
   1156c:	9801      	ldr	r0, [sp, #4]
   1156e:	7803      	ldrb	r3, [r0, #0]
   11570:	2b04      	cmp	r3, #4
   11572:	d168      	bne.n	11646 <f_sync+0xf6>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
   11574:	4628      	mov	r0, r5
   11576:	f7ff fa3e 	bl	109f6 <fill_first_frag>
				if (res == FR_OK) {
   1157a:	4604      	mov	r4, r0
   1157c:	2800      	cmp	r0, #0
   1157e:	d15f      	bne.n	11640 <f_sync+0xf0>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
   11580:	6c29      	ldr	r1, [r5, #64]	; 0x40
   11582:	f04f 32ff 	mov.w	r2, #4294967295
   11586:	4628      	mov	r0, r5
   11588:	f7ff f99f 	bl	108ca <fill_last_frag>
				if (res == FR_OK) {
   1158c:	4604      	mov	r4, r0
   1158e:	2800      	cmp	r0, #0
   11590:	d156      	bne.n	11640 <f_sync+0xf0>
	dp->obj.fs = obj->fs;
   11592:	682b      	ldr	r3, [r5, #0]
   11594:	9302      	str	r3, [sp, #8]
	dp->obj.sclust = obj->c_scl;
   11596:	6a2b      	ldr	r3, [r5, #32]
   11598:	9304      	str	r3, [sp, #16]
	dp->obj.stat = (BYTE)obj->c_size;
   1159a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1159c:	f88d 300f 	strb.w	r3, [sp, #15]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
   115a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   115a4:	e9cd 3006 	strd	r3, r0, [sp, #24]
	dp->blk_ofs = obj->c_ofs;
   115a8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
	dp->obj.n_frag = 0;
   115aa:	9009      	str	r0, [sp, #36]	; 0x24
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
   115ac:	a802      	add	r0, sp, #8
	dp->blk_ofs = obj->c_ofs;
   115ae:	9115      	str	r1, [sp, #84]	; 0x54
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
   115b0:	f7ff f8c1 	bl	10736 <dir_sdi>
	if (res == FR_OK) {
   115b4:	4604      	mov	r4, r0
   115b6:	2800      	cmp	r0, #0
   115b8:	d142      	bne.n	11640 <f_sync+0xf0>
		res = load_xdir(dp);		/* Load the object's entry block */
   115ba:	a802      	add	r0, sp, #8
   115bc:	f7ff fc51 	bl	10e62 <load_xdir>
					if (res == FR_OK) {
   115c0:	4604      	mov	r4, r0
   115c2:	2800      	cmp	r0, #0
   115c4:	d13c      	bne.n	11640 <f_sync+0xf0>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
   115c6:	9b01      	ldr	r3, [sp, #4]
   115c8:	6919      	ldr	r1, [r3, #16]
   115ca:	790a      	ldrb	r2, [r1, #4]
   115cc:	f042 0220 	orr.w	r2, r2, #32
   115d0:	710a      	strb	r2, [r1, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
   115d2:	79ea      	ldrb	r2, [r5, #7]
   115d4:	6919      	ldr	r1, [r3, #16]
   115d6:	f042 0201 	orr.w	r2, r2, #1
   115da:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
   115de:	6918      	ldr	r0, [r3, #16]
   115e0:	68a9      	ldr	r1, [r5, #8]
   115e2:	3034      	adds	r0, #52	; 0x34
   115e4:	f7fe fde2 	bl	101ac <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
   115e8:	9b01      	ldr	r3, [sp, #4]
   115ea:	6918      	ldr	r0, [r3, #16]
   115ec:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   115f0:	3038      	adds	r0, #56	; 0x38
   115f2:	f7fe fde3 	bl	101bc <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
   115f6:	9b01      	ldr	r3, [sp, #4]
   115f8:	6918      	ldr	r0, [r3, #16]
   115fa:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   115fe:	3028      	adds	r0, #40	; 0x28
   11600:	f7fe fddc 	bl	101bc <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
   11604:	9a01      	ldr	r2, [sp, #4]
   11606:	6913      	ldr	r3, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
   11608:	2121      	movs	r1, #33	; 0x21
   1160a:	7399      	strb	r1, [r3, #14]
	*ptr++ = (BYTE)val;
   1160c:	2150      	movs	r1, #80	; 0x50
	*ptr++ = (BYTE)val; val >>= 8;
   1160e:	731c      	strb	r4, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
   11610:	735c      	strb	r4, [r3, #13]
	*ptr++ = (BYTE)val;
   11612:	73d9      	strb	r1, [r3, #15]
						fs->dirbuf[XDIR_ModTime10] = 0;
   11614:	6913      	ldr	r3, [r2, #16]
   11616:	755c      	strb	r4, [r3, #21]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
   11618:	6913      	ldr	r3, [r2, #16]
						res = store_xdir(&dj);	/* Restore it to the directory */
   1161a:	a802      	add	r0, sp, #8
	*ptr++ = (BYTE)val; val >>= 8;
   1161c:	741c      	strb	r4, [r3, #16]
	*ptr++ = (BYTE)val; val >>= 8;
   1161e:	745c      	strb	r4, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
   11620:	749c      	strb	r4, [r3, #18]
	*ptr++ = (BYTE)val;
   11622:	74dc      	strb	r4, [r3, #19]
						res = store_xdir(&dj);	/* Restore it to the directory */
   11624:	f7ff fc99 	bl	10f5a <store_xdir>
						if (res == FR_OK) {
   11628:	4604      	mov	r4, r0
   1162a:	b948      	cbnz	r0, 11640 <f_sync+0xf0>
							res = sync_fs(fs);
   1162c:	9801      	ldr	r0, [sp, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
   1162e:	f7ff fa23 	bl	10a78 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
   11632:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   11636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
   1163a:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
   1163c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
}
   11640:	4620      	mov	r0, r4
   11642:	b016      	add	sp, #88	; 0x58
   11644:	bd70      	pop	{r4, r5, r6, pc}
				res = move_window(fs, fp->dir_sect);
   11646:	6ca9      	ldr	r1, [r5, #72]	; 0x48
   11648:	f7fe ff84 	bl	10554 <move_window>
				if (res == FR_OK) {
   1164c:	4604      	mov	r4, r0
   1164e:	2800      	cmp	r0, #0
   11650:	d1f6      	bne.n	11640 <f_sync+0xf0>
					dir = fp->dir_ptr;
   11652:	6cee      	ldr	r6, [r5, #76]	; 0x4c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
   11654:	7af3      	ldrb	r3, [r6, #11]
   11656:	f043 0320 	orr.w	r3, r3, #32
   1165a:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
   1165c:	68aa      	ldr	r2, [r5, #8]
   1165e:	6828      	ldr	r0, [r5, #0]
   11660:	4631      	mov	r1, r6
   11662:	f7fe ff32 	bl	104ca <st_clust.isra.0>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
   11666:	f106 001c 	add.w	r0, r6, #28
   1166a:	6929      	ldr	r1, [r5, #16]
   1166c:	f7fe fd9e 	bl	101ac <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
   11670:	2321      	movs	r3, #33	; 0x21
   11672:	7633      	strb	r3, [r6, #24]
					fs->wflag = 1;
   11674:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
   11676:	75b4      	strb	r4, [r6, #22]
	*ptr++ = (BYTE)val;
   11678:	2350      	movs	r3, #80	; 0x50
   1167a:	7673      	strb	r3, [r6, #25]
					fs->wflag = 1;
   1167c:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
   1167e:	75f4      	strb	r4, [r6, #23]
	*ptr++ = (BYTE)val; val >>= 8;
   11680:	74b4      	strb	r4, [r6, #18]
	*ptr++ = (BYTE)val;
   11682:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
   11684:	70c3      	strb	r3, [r0, #3]
   11686:	e7d2      	b.n	1162e <f_sync+0xde>

00011688 <f_close>:
{
   11688:	b513      	push	{r0, r1, r4, lr}
   1168a:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
   1168c:	f7ff ff60 	bl	11550 <f_sync>
	if (res == FR_OK)
   11690:	b928      	cbnz	r0, 1169e <f_close+0x16>
		res = validate(&fp->obj, &fs);	/* Lock volume */
   11692:	a901      	add	r1, sp, #4
   11694:	4620      	mov	r0, r4
   11696:	f7fe fdcf 	bl	10238 <validate>
		if (res == FR_OK) {
   1169a:	b900      	cbnz	r0, 1169e <f_close+0x16>
			fp->obj.fs = 0;	/* Invalidate file object */
   1169c:	6020      	str	r0, [r4, #0]
}
   1169e:	b002      	add	sp, #8
   116a0:	bd10      	pop	{r4, pc}

000116a2 <f_lseek>:
{
   116a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116a6:	b087      	sub	sp, #28
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
   116a8:	a905      	add	r1, sp, #20
{
   116aa:	4604      	mov	r4, r0
   116ac:	4616      	mov	r6, r2
   116ae:	461f      	mov	r7, r3
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
   116b0:	f7fe fdc2 	bl	10238 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
   116b4:	4605      	mov	r5, r0
   116b6:	2800      	cmp	r0, #0
   116b8:	f040 80aa 	bne.w	11810 <f_lseek+0x16e>
   116bc:	f894 5031 	ldrb.w	r5, [r4, #49]	; 0x31
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
   116c0:	2d00      	cmp	r5, #0
   116c2:	f040 80a5 	bne.w	11810 <f_lseek+0x16e>
   116c6:	9b05      	ldr	r3, [sp, #20]
   116c8:	781b      	ldrb	r3, [r3, #0]
   116ca:	2b04      	cmp	r3, #4
   116cc:	d035      	beq.n	1173a <f_lseek+0x98>
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
   116ce:	f8dd c014 	ldr.w	ip, [sp, #20]
   116d2:	f89c 3000 	ldrb.w	r3, [ip]
   116d6:	2b04      	cmp	r3, #4
   116d8:	d139      	bne.n	1174e <f_lseek+0xac>
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
   116da:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   116de:	42bb      	cmp	r3, r7
   116e0:	bf08      	it	eq
   116e2:	42b2      	cmpeq	r2, r6
   116e4:	d205      	bcs.n	116f2 <f_lseek+0x50>
   116e6:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   116ea:	0789      	lsls	r1, r1, #30
   116ec:	bf5c      	itt	pl
   116ee:	4616      	movpl	r6, r2
   116f0:	461f      	movpl	r7, r3
		fp->fptr = nsect = 0;
   116f2:	2300      	movs	r3, #0
   116f4:	2200      	movs	r2, #0
		ifptr = fp->fptr;
   116f6:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
		fp->fptr = nsect = 0;
   116fa:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
		if (ofs > 0) {
   116fe:	ea56 0307 	orrs.w	r3, r6, r7
   11702:	d12e      	bne.n	11762 <f_lseek+0xc0>
		fp->fptr = nsect = 0;
   11704:	2000      	movs	r0, #0
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
   11706:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
   1170a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1170e:	42bb      	cmp	r3, r7
   11710:	bf08      	it	eq
   11712:	42b2      	cmpeq	r2, r6
   11714:	d207      	bcs.n	11726 <f_lseek+0x84>
			fp->flag |= FA_MODIFIED;
   11716:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
			fp->obj.objsize = fp->fptr;
   1171a:	e9c4 6704 	strd	r6, r7, [r4, #16]
			fp->flag |= FA_MODIFIED;
   1171e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11722:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
   11726:	f3c6 0208 	ubfx	r2, r6, #0, #9
   1172a:	2300      	movs	r3, #0
   1172c:	4313      	orrs	r3, r2
   1172e:	d06f      	beq.n	11810 <f_lseek+0x16e>
   11730:	6c63      	ldr	r3, [r4, #68]	; 0x44
   11732:	4283      	cmp	r3, r0
   11734:	d06c      	beq.n	11810 <f_lseek+0x16e>
			fp->sect = nsect;
   11736:	6460      	str	r0, [r4, #68]	; 0x44
   11738:	e06a      	b.n	11810 <f_lseek+0x16e>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
   1173a:	6c21      	ldr	r1, [r4, #64]	; 0x40
   1173c:	f04f 32ff 	mov.w	r2, #4294967295
   11740:	4620      	mov	r0, r4
   11742:	f7ff f8c2 	bl	108ca <fill_last_frag>
	if (res != FR_OK) LEAVE_FF(fs, res);
   11746:	2800      	cmp	r0, #0
   11748:	d0c1      	beq.n	116ce <f_lseek+0x2c>
   1174a:	4605      	mov	r5, r0
   1174c:	e060      	b.n	11810 <f_lseek+0x16e>
   1174e:	2300      	movs	r3, #0
   11750:	42bb      	cmp	r3, r7
   11752:	f04f 32ff 	mov.w	r2, #4294967295
   11756:	bf08      	it	eq
   11758:	42b2      	cmpeq	r2, r6
   1175a:	bf3c      	itt	cc
   1175c:	4616      	movcc	r6, r2
   1175e:	461f      	movcc	r7, r3
   11760:	e7bb      	b.n	116da <f_lseek+0x38>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
   11762:	f8bc 200a 	ldrh.w	r2, [ip, #10]
			if (ifptr > 0 &&
   11766:	ea50 0301 	orrs.w	r3, r0, r1
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
   1176a:	ea4f 2a42 	mov.w	sl, r2, lsl #9
			if (ifptr > 0 &&
   1176e:	d044      	beq.n	117fa <f_lseek+0x158>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
   11770:	f110 3bff 	adds.w	fp, r0, #4294967295
   11774:	f141 33ff 	adc.w	r3, r1, #4294967295
   11778:	f116 30ff 	adds.w	r0, r6, #4294967295
   1177c:	f147 31ff 	adc.w	r1, r7, #4294967295
   11780:	9303      	str	r3, [sp, #12]
   11782:	4652      	mov	r2, sl
   11784:	2300      	movs	r3, #0
   11786:	f7ef fc9b 	bl	10c0 <__aeabi_uldivmod>
   1178a:	e9cd 0100 	strd	r0, r1, [sp]
   1178e:	4652      	mov	r2, sl
   11790:	2300      	movs	r3, #0
   11792:	9903      	ldr	r1, [sp, #12]
   11794:	4658      	mov	r0, fp
   11796:	f7ef fc93 	bl	10c0 <__aeabi_uldivmod>
			if (ifptr > 0 &&
   1179a:	e9dd 2300 	ldrd	r2, r3, [sp]
   1179e:	428b      	cmp	r3, r1
   117a0:	bf08      	it	eq
   117a2:	4282      	cmpeq	r2, r0
   117a4:	d329      	bcc.n	117fa <f_lseek+0x158>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
   117a6:	f1ca 0000 	rsb	r0, sl, #0
   117aa:	9903      	ldr	r1, [sp, #12]
   117ac:	ea00 030b 	and.w	r3, r0, fp
				ofs -= fp->fptr;
   117b0:	1af6      	subs	r6, r6, r3
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
   117b2:	e9c4 310e 	strd	r3, r1, [r4, #56]	; 0x38
				ofs -= fp->fptr;
   117b6:	eb67 0701 	sbc.w	r7, r7, r1
				clst = fp->clust;
   117ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
			if (clst != 0) {
   117bc:	2900      	cmp	r1, #0
   117be:	d0a1      	beq.n	11704 <f_lseek+0x62>
				while (ofs > bcs) {						/* Cluster following loop */
   117c0:	f04f 0b00 	mov.w	fp, #0
   117c4:	45bb      	cmp	fp, r7
   117c6:	bf08      	it	eq
   117c8:	45b2      	cmpeq	sl, r6
   117ca:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	; 0x38
   117ce:	d32a      	bcc.n	11826 <f_lseek+0x184>
				fp->fptr += ofs;
   117d0:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	; 0x38
   117d4:	199b      	adds	r3, r3, r6
   117d6:	eb47 0202 	adc.w	r2, r7, r2
   117da:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
				if (ofs % SS(fs)) {
   117de:	f3c6 0208 	ubfx	r2, r6, #0, #9
   117e2:	2300      	movs	r3, #0
   117e4:	4313      	orrs	r3, r2
   117e6:	d08d      	beq.n	11704 <f_lseek+0x62>
					nsect = clst2sect(fs, clst);	/* Current sector */
   117e8:	9805      	ldr	r0, [sp, #20]
   117ea:	f7fe fcf6 	bl	101da <clst2sect>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
   117ee:	b160      	cbz	r0, 1180a <f_lseek+0x168>
					nsect += (DWORD)(ofs / SS(fs));
   117f0:	0a73      	lsrs	r3, r6, #9
   117f2:	ea43 53c7 	orr.w	r3, r3, r7, lsl #23
   117f6:	4418      	add	r0, r3
   117f8:	e785      	b.n	11706 <f_lseek+0x64>
				clst = fp->obj.sclust;					/* start from the first cluster */
   117fa:	68a1      	ldr	r1, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
   117fc:	b989      	cbnz	r1, 11822 <f_lseek+0x180>
					clst = create_chain(&fp->obj, 0);
   117fe:	4620      	mov	r0, r4
   11800:	f7ff f985 	bl	10b0e <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
   11804:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
   11806:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
   11808:	d106      	bne.n	11818 <f_lseek+0x176>
   1180a:	2502      	movs	r5, #2
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   1180c:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
}
   11810:	4628      	mov	r0, r5
   11812:	b007      	add	sp, #28
   11814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   11818:	1c48      	adds	r0, r1, #1
   1181a:	d101      	bne.n	11820 <f_lseek+0x17e>
   1181c:	2501      	movs	r5, #1
   1181e:	e7f5      	b.n	1180c <f_lseek+0x16a>
					fp->obj.sclust = clst;
   11820:	60a1      	str	r1, [r4, #8]
				fp->clust = clst;
   11822:	6421      	str	r1, [r4, #64]	; 0x40
   11824:	e7ca      	b.n	117bc <f_lseek+0x11a>
					ofs -= bcs; fp->fptr += bcs;
   11826:	ebb6 060a 	subs.w	r6, r6, sl
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
   1182a:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
					ofs -= bcs; fp->fptr += bcs;
   1182e:	eb67 070b 	sbc.w	r7, r7, fp
   11832:	eb1a 0803 	adds.w	r8, sl, r3
   11836:	eb4b 0902 	adc.w	r9, fp, r2
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
   1183a:	0782      	lsls	r2, r0, #30
					ofs -= bcs; fp->fptr += bcs;
   1183c:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
   11840:	d513      	bpl.n	1186a <f_lseek+0x1c8>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
   11842:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   11846:	454b      	cmp	r3, r9
   11848:	bf08      	it	eq
   1184a:	4542      	cmpeq	r2, r8
   1184c:	d205      	bcs.n	1185a <f_lseek+0x1b8>
							fp->obj.objsize = fp->fptr;
   1184e:	e9c4 8904 	strd	r8, r9, [r4, #16]
							fp->flag |= FA_MODIFIED;
   11852:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   11856:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
   1185a:	4620      	mov	r0, r4
   1185c:	f7ff f957 	bl	10b0e <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
   11860:	4601      	mov	r1, r0
   11862:	b930      	cbnz	r0, 11872 <f_lseek+0x1d0>
							ofs = 0; break;
   11864:	2600      	movs	r6, #0
   11866:	2700      	movs	r7, #0
   11868:	e7b2      	b.n	117d0 <f_lseek+0x12e>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
   1186a:	4620      	mov	r0, r4
   1186c:	f7fe fec8 	bl	10600 <get_fat>
   11870:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   11872:	1c4b      	adds	r3, r1, #1
   11874:	d0d2      	beq.n	1181c <f_lseek+0x17a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
   11876:	2901      	cmp	r1, #1
   11878:	d9c7      	bls.n	1180a <f_lseek+0x168>
   1187a:	9b05      	ldr	r3, [sp, #20]
   1187c:	69db      	ldr	r3, [r3, #28]
   1187e:	428b      	cmp	r3, r1
   11880:	d9c3      	bls.n	1180a <f_lseek+0x168>
					fp->clust = clst;
   11882:	6421      	str	r1, [r4, #64]	; 0x40
   11884:	e79e      	b.n	117c4 <f_lseek+0x122>

00011886 <f_opendir>:
{
   11886:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (!dp) return FR_INVALID_OBJECT;
   11888:	4604      	mov	r4, r0
{
   1188a:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
   1188c:	2800      	cmp	r0, #0
   1188e:	d03c      	beq.n	1190a <f_opendir+0x84>
	res = mount_volume(&path, &fs, 0);
   11890:	2200      	movs	r2, #0
   11892:	a903      	add	r1, sp, #12
   11894:	a801      	add	r0, sp, #4
   11896:	f7f7 f9fd 	bl	8c94 <mount_volume>
	if (res == FR_OK) {
   1189a:	b978      	cbnz	r0, 118bc <f_opendir+0x36>
		dp->obj.fs = fs;
   1189c:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
   1189e:	9901      	ldr	r1, [sp, #4]
		dp->obj.fs = fs;
   118a0:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
   118a2:	4620      	mov	r0, r4
   118a4:	f7f7 fd8e 	bl	93c4 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
   118a8:	2800      	cmp	r0, #0
   118aa:	d130      	bne.n	1190e <f_opendir+0x88>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
   118ac:	f994 304b 	ldrsb.w	r3, [r4, #75]	; 0x4b
   118b0:	2b00      	cmp	r3, #0
   118b2:	db18      	blt.n	118e6 <f_opendir+0x60>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
   118b4:	79a3      	ldrb	r3, [r4, #6]
   118b6:	06db      	lsls	r3, r3, #27
   118b8:	d403      	bmi.n	118c2 <f_opendir+0x3c>
					res = FR_NO_PATH;
   118ba:	2005      	movs	r0, #5
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
   118bc:	2300      	movs	r3, #0
   118be:	6023      	str	r3, [r4, #0]
   118c0:	e01c      	b.n	118fc <f_opendir+0x76>
					if (fs->fs_type == FS_EXFAT) {
   118c2:	9a03      	ldr	r2, [sp, #12]
   118c4:	7810      	ldrb	r0, [r2, #0]
   118c6:	2804      	cmp	r0, #4
   118c8:	d11a      	bne.n	11900 <f_opendir+0x7a>
						dp->obj.c_scl = dp->obj.sclust;							/* Get containing directory inforamation */
   118ca:	68a3      	ldr	r3, [r4, #8]
   118cc:	6223      	str	r3, [r4, #32]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
   118ce:	6923      	ldr	r3, [r4, #16]
   118d0:	79e1      	ldrb	r1, [r4, #7]
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
   118d2:	6910      	ldr	r0, [r2, #16]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
   118d4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   118d8:	430b      	orrs	r3, r1
   118da:	6263      	str	r3, [r4, #36]	; 0x24
						dp->obj.c_ofs = dp->blk_ofs;
   118dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   118de:	62a3      	str	r3, [r4, #40]	; 0x28
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
   118e0:	4621      	mov	r1, r4
   118e2:	f7fe fdfe 	bl	104e2 <init_alloc_info.isra.0>
				dp->obj.id = fs->id;
   118e6:	9b03      	ldr	r3, [sp, #12]
   118e8:	88db      	ldrh	r3, [r3, #6]
   118ea:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
   118ec:	2100      	movs	r1, #0
   118ee:	4620      	mov	r0, r4
   118f0:	f7fe ff21 	bl	10736 <dir_sdi>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
   118f4:	2804      	cmp	r0, #4
   118f6:	d0e0      	beq.n	118ba <f_opendir+0x34>
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
   118f8:	2800      	cmp	r0, #0
   118fa:	d1df      	bne.n	118bc <f_opendir+0x36>
}
   118fc:	b004      	add	sp, #16
   118fe:	bd10      	pop	{r4, pc}
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
   11900:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   11902:	f7fe fdd4 	bl	104ae <ld_clust.isra.0>
   11906:	60a0      	str	r0, [r4, #8]
   11908:	e7ed      	b.n	118e6 <f_opendir+0x60>
	if (!dp) return FR_INVALID_OBJECT;
   1190a:	2009      	movs	r0, #9
   1190c:	e7f6      	b.n	118fc <f_opendir+0x76>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
   1190e:	2804      	cmp	r0, #4
   11910:	d0d3      	beq.n	118ba <f_opendir+0x34>
   11912:	e7d3      	b.n	118bc <f_opendir+0x36>

00011914 <f_closedir>:
{
   11914:	b513      	push	{r0, r1, r4, lr}
	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
   11916:	a901      	add	r1, sp, #4
{
   11918:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
   1191a:	f7fe fc8d 	bl	10238 <validate>
	if (res == FR_OK) {
   1191e:	b900      	cbnz	r0, 11922 <f_closedir+0xe>
		dp->obj.fs = 0;	/* Invalidate directory object */
   11920:	6020      	str	r0, [r4, #0]
}
   11922:	b002      	add	sp, #8
   11924:	bd10      	pop	{r4, pc}

00011926 <f_readdir>:
{
   11926:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11928:	460d      	mov	r5, r1
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
   1192a:	a901      	add	r1, sp, #4
{
   1192c:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
   1192e:	f7fe fc83 	bl	10238 <validate>
	if (res == FR_OK) {
   11932:	b920      	cbnz	r0, 1193e <f_readdir+0x18>
		if (!fno) {
   11934:	b92d      	cbnz	r5, 11942 <f_readdir+0x1c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
   11936:	4601      	mov	r1, r0
   11938:	4620      	mov	r0, r4
   1193a:	f7fe fefc 	bl	10736 <dir_sdi>
}
   1193e:	b002      	add	sp, #8
   11940:	bd70      	pop	{r4, r5, r6, pc}
			res = DIR_READ_FILE(dp);		/* Read an item */
   11942:	4620      	mov	r0, r4
   11944:	f7f7 fbb0 	bl	90a8 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
   11948:	f010 06fb 	ands.w	r6, r0, #251	; 0xfb
   1194c:	d1f7      	bne.n	1193e <f_readdir+0x18>
				get_fileinfo(dp, fno);		/* Get the object information */
   1194e:	4629      	mov	r1, r5
   11950:	4620      	mov	r0, r4
   11952:	f7fe fca6 	bl	102a2 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
   11956:	4631      	mov	r1, r6
   11958:	4620      	mov	r0, r4
   1195a:	f7ff f9c9 	bl	10cf0 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
   1195e:	2804      	cmp	r0, #4
   11960:	bf08      	it	eq
   11962:	2000      	moveq	r0, #0
   11964:	e7eb      	b.n	1193e <f_readdir+0x18>

00011966 <f_stat>:
{
   11966:	b530      	push	{r4, r5, lr}
   11968:	b097      	sub	sp, #92	; 0x5c
   1196a:	460d      	mov	r5, r1
   1196c:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &dj.obj.fs, 0);
   1196e:	2200      	movs	r2, #0
   11970:	a902      	add	r1, sp, #8
   11972:	a801      	add	r0, sp, #4
   11974:	f7f7 f98e 	bl	8c94 <mount_volume>
	if (res == FR_OK) {
   11978:	4604      	mov	r4, r0
   1197a:	b970      	cbnz	r0, 1199a <f_stat+0x34>
		res = follow_path(&dj, path);	/* Follow the file path */
   1197c:	9901      	ldr	r1, [sp, #4]
   1197e:	a802      	add	r0, sp, #8
   11980:	f7f7 fd20 	bl	93c4 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
   11984:	4604      	mov	r4, r0
   11986:	b940      	cbnz	r0, 1199a <f_stat+0x34>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
   11988:	f99d 3053 	ldrsb.w	r3, [sp, #83]	; 0x53
   1198c:	2b00      	cmp	r3, #0
   1198e:	db07      	blt.n	119a0 <f_stat+0x3a>
				if (fno) get_fileinfo(&dj, fno);
   11990:	b11d      	cbz	r5, 1199a <f_stat+0x34>
   11992:	4629      	mov	r1, r5
   11994:	a802      	add	r0, sp, #8
   11996:	f7fe fc84 	bl	102a2 <get_fileinfo>
}
   1199a:	4620      	mov	r0, r4
   1199c:	b017      	add	sp, #92	; 0x5c
   1199e:	bd30      	pop	{r4, r5, pc}
				res = FR_INVALID_NAME;
   119a0:	2406      	movs	r4, #6
   119a2:	e7fa      	b.n	1199a <f_stat+0x34>

000119a4 <f_getfree>:
{
   119a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   119a8:	b091      	sub	sp, #68	; 0x44
   119aa:	4688      	mov	r8, r1
   119ac:	9001      	str	r0, [sp, #4]
   119ae:	4615      	mov	r5, r2
	res = mount_volume(&path, &fs, 0);
   119b0:	a903      	add	r1, sp, #12
   119b2:	2200      	movs	r2, #0
   119b4:	a801      	add	r0, sp, #4
   119b6:	f7f7 f96d 	bl	8c94 <mount_volume>
	if (res == FR_OK) {
   119ba:	4604      	mov	r4, r0
   119bc:	b940      	cbnz	r0, 119d0 <f_getfree+0x2c>
		*fatfs = fs;				/* Return ptr to the fs object */
   119be:	9b03      	ldr	r3, [sp, #12]
   119c0:	602b      	str	r3, [r5, #0]
		if (fs->free_clst <= fs->n_fatent - 2) {
   119c2:	e9d3 2706 	ldrd	r2, r7, [r3, #24]
   119c6:	1ebe      	subs	r6, r7, #2
   119c8:	42b2      	cmp	r2, r6
   119ca:	d805      	bhi.n	119d8 <f_getfree+0x34>
			*nclst = fs->free_clst;
   119cc:	f8c8 2000 	str.w	r2, [r8]
}
   119d0:	4620      	mov	r0, r4
   119d2:	b011      	add	sp, #68	; 0x44
   119d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
   119d8:	781a      	ldrb	r2, [r3, #0]
   119da:	2a01      	cmp	r2, #1
   119dc:	d11a      	bne.n	11a14 <f_getfree+0x70>
				clst = 2; obj.fs = fs;
   119de:	9304      	str	r3, [sp, #16]
   119e0:	2602      	movs	r6, #2
			nfree = 0;
   119e2:	4605      	mov	r5, r0
					stat = get_fat(&obj, clst);
   119e4:	4631      	mov	r1, r6
   119e6:	a804      	add	r0, sp, #16
   119e8:	f7fe fe0a 	bl	10600 <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
   119ec:	1c47      	adds	r7, r0, #1
   119ee:	d05c      	beq.n	11aaa <f_getfree+0x106>
					if (stat == 1) { res = FR_INT_ERR; break; }
   119f0:	2801      	cmp	r0, #1
   119f2:	d05c      	beq.n	11aae <f_getfree+0x10a>
					if (stat == 0) nfree++;
   119f4:	b900      	cbnz	r0, 119f8 <f_getfree+0x54>
   119f6:	3501      	adds	r5, #1
				} while (++clst < fs->n_fatent);
   119f8:	9b03      	ldr	r3, [sp, #12]
   119fa:	69db      	ldr	r3, [r3, #28]
   119fc:	3601      	adds	r6, #1
   119fe:	42b3      	cmp	r3, r6
   11a00:	d8f0      	bhi.n	119e4 <f_getfree+0x40>
				fs->free_clst = nfree;	/* Now free_clst is valid */
   11a02:	9b03      	ldr	r3, [sp, #12]
				*nclst = nfree;			/* Return the free clusters */
   11a04:	f8c8 5000 	str.w	r5, [r8]
				fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
   11a08:	791a      	ldrb	r2, [r3, #4]
				fs->free_clst = nfree;	/* Now free_clst is valid */
   11a0a:	619d      	str	r5, [r3, #24]
				fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
   11a0c:	f042 0201 	orr.w	r2, r2, #1
   11a10:	711a      	strb	r2, [r3, #4]
	LEAVE_FF(fs, res);
   11a12:	e7dd      	b.n	119d0 <f_getfree+0x2c>
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan allocation bitmap */
   11a14:	2a04      	cmp	r2, #4
   11a16:	d121      	bne.n	11a5c <f_getfree+0xb8>
					sect = fs->bitbase;			/* Bitmap sector */
   11a18:	6b59      	ldr	r1, [r3, #52]	; 0x34
					i = 0;						/* Offset in the sector */
   11a1a:	4607      	mov	r7, r0
			nfree = 0;
   11a1c:	4605      	mov	r5, r0
						if (i == 0) {
   11a1e:	b93f      	cbnz	r7, 11a30 <f_getfree+0x8c>
							res = move_window(fs, sect++);
   11a20:	9803      	ldr	r0, [sp, #12]
   11a22:	f101 0901 	add.w	r9, r1, #1
   11a26:	f7fe fd95 	bl	10554 <move_window>
							if (res != FR_OK) break;
   11a2a:	2800      	cmp	r0, #0
   11a2c:	d141      	bne.n	11ab2 <f_getfree+0x10e>
							res = move_window(fs, sect++);
   11a2e:	4649      	mov	r1, r9
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
   11a30:	9b03      	ldr	r3, [sp, #12]
   11a32:	443b      	add	r3, r7
   11a34:	f1a6 0208 	sub.w	r2, r6, #8
   11a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   11a3c:	b146      	cbz	r6, 11a50 <f_getfree+0xac>
							if (!(bm & 1)) nfree++;
   11a3e:	07d8      	lsls	r0, r3, #31
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
   11a40:	f106 36ff 	add.w	r6, r6, #4294967295
							if (!(bm & 1)) nfree++;
   11a44:	bf58      	it	pl
   11a46:	3501      	addpl	r5, #1
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
   11a48:	4296      	cmp	r6, r2
							bm >>= 1;
   11a4a:	ea4f 0353 	mov.w	r3, r3, lsr #1
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
   11a4e:	d1f5      	bne.n	11a3c <f_getfree+0x98>
						i = (i + 1) % SS(fs);
   11a50:	3701      	adds	r7, #1
   11a52:	f3c7 0708 	ubfx	r7, r7, #0, #9
					} while (clst);
   11a56:	2e00      	cmp	r6, #0
   11a58:	d1e1      	bne.n	11a1e <f_getfree+0x7a>
   11a5a:	e7d2      	b.n	11a02 <f_getfree+0x5e>
					sect = fs->fatbase;		/* Top of the FAT */
   11a5c:	6a99      	ldr	r1, [r3, #40]	; 0x28
					i = 0;					/* Offset in the sector */
   11a5e:	4606      	mov	r6, r0
			nfree = 0;
   11a60:	4605      	mov	r5, r0
						if (i == 0) {
   11a62:	b936      	cbnz	r6, 11a72 <f_getfree+0xce>
							res = move_window(fs, sect++);
   11a64:	9803      	ldr	r0, [sp, #12]
   11a66:	f101 0901 	add.w	r9, r1, #1
   11a6a:	f7fe fd73 	bl	10554 <move_window>
							if (res != FR_OK) break;
   11a6e:	bb00      	cbnz	r0, 11ab2 <f_getfree+0x10e>
							res = move_window(fs, sect++);
   11a70:	4649      	mov	r1, r9
						if (fs->fs_type == FS_FAT16) {
   11a72:	9a03      	ldr	r2, [sp, #12]
   11a74:	f102 033c 	add.w	r3, r2, #60	; 0x3c
   11a78:	7812      	ldrb	r2, [r2, #0]
   11a7a:	2a02      	cmp	r2, #2
   11a7c:	eb03 0006 	add.w	r0, r3, r6
   11a80:	d10b      	bne.n	11a9a <f_getfree+0xf6>
	rv = rv << 8 | ptr[0];
   11a82:	5d9b      	ldrb	r3, [r3, r6]
   11a84:	7842      	ldrb	r2, [r0, #1]
							if (ld_word(fs->win + i) == 0) nfree++;
   11a86:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
   11a8a:	bf08      	it	eq
   11a8c:	3501      	addeq	r5, #1
							i += 2;
   11a8e:	3602      	adds	r6, #2
					} while (--clst);
   11a90:	3f01      	subs	r7, #1
						i %= SS(fs);
   11a92:	f3c6 0608 	ubfx	r6, r6, #0, #9
					} while (--clst);
   11a96:	d1e4      	bne.n	11a62 <f_getfree+0xbe>
   11a98:	e7b3      	b.n	11a02 <f_getfree+0x5e>
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
   11a9a:	f7fe fb69 	bl	10170 <ld_dword>
   11a9e:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
   11aa2:	bf08      	it	eq
   11aa4:	3501      	addeq	r5, #1
							i += 4;
   11aa6:	3604      	adds	r6, #4
   11aa8:	e7f2      	b.n	11a90 <f_getfree+0xec>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
   11aaa:	2401      	movs	r4, #1
   11aac:	e790      	b.n	119d0 <f_getfree+0x2c>
					if (stat == 1) { res = FR_INT_ERR; break; }
   11aae:	2402      	movs	r4, #2
   11ab0:	e78e      	b.n	119d0 <f_getfree+0x2c>
							res = move_window(fs, sect++);
   11ab2:	4604      	mov	r4, r0
   11ab4:	e78c      	b.n	119d0 <f_getfree+0x2c>

00011ab6 <f_truncate>:
{
   11ab6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
   11ab8:	a901      	add	r1, sp, #4
{
   11aba:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
   11abc:	f7fe fbbc 	bl	10238 <validate>
   11ac0:	4604      	mov	r4, r0
   11ac2:	4606      	mov	r6, r0
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
   11ac4:	bb28      	cbnz	r0, 11b12 <f_truncate+0x5c>
   11ac6:	f895 4031 	ldrb.w	r4, [r5, #49]	; 0x31
   11aca:	bb14      	cbnz	r4, 11b12 <f_truncate+0x5c>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   11acc:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   11ad0:	079a      	lsls	r2, r3, #30
   11ad2:	d538      	bpl.n	11b46 <f_truncate+0x90>
	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
   11ad4:	e9d5 010e 	ldrd	r0, r1, [r5, #56]	; 0x38
   11ad8:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   11adc:	4299      	cmp	r1, r3
   11ade:	bf08      	it	eq
   11ae0:	4290      	cmpeq	r0, r2
   11ae2:	d216      	bcs.n	11b12 <f_truncate+0x5c>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
   11ae4:	ea50 0301 	orrs.w	r3, r0, r1
   11ae8:	d116      	bne.n	11b18 <f_truncate+0x62>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
   11aea:	4622      	mov	r2, r4
   11aec:	68a9      	ldr	r1, [r5, #8]
   11aee:	4628      	mov	r0, r5
   11af0:	f7fe ff03 	bl	108fa <remove_chain>
			fp->obj.sclust = 0;
   11af4:	60ae      	str	r6, [r5, #8]
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
   11af6:	4604      	mov	r4, r0
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
   11af8:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
   11afc:	e9c5 2304 	strd	r2, r3, [r5, #16]
		fp->flag |= FA_MODIFIED;
   11b00:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   11b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11b08:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
		if (res != FR_OK) ABORT(fs, res);
   11b0c:	b10c      	cbz	r4, 11b12 <f_truncate+0x5c>
   11b0e:	f885 4031 	strb.w	r4, [r5, #49]	; 0x31
}
   11b12:	4620      	mov	r0, r4
   11b14:	b002      	add	sp, #8
   11b16:	bd70      	pop	{r4, r5, r6, pc}
			ncl = get_fat(&fp->obj, fp->clust);
   11b18:	6c29      	ldr	r1, [r5, #64]	; 0x40
   11b1a:	4628      	mov	r0, r5
   11b1c:	f7fe fd70 	bl	10600 <get_fat>
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
   11b20:	1c43      	adds	r3, r0, #1
			ncl = get_fat(&fp->obj, fp->clust);
   11b22:	4601      	mov	r1, r0
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
   11b24:	d00b      	beq.n	11b3e <f_truncate+0x88>
			if (ncl == 1) res = FR_INT_ERR;
   11b26:	2801      	cmp	r0, #1
   11b28:	d00b      	beq.n	11b42 <f_truncate+0x8c>
			if (res == FR_OK && ncl < fs->n_fatent) {
   11b2a:	9b01      	ldr	r3, [sp, #4]
   11b2c:	69db      	ldr	r3, [r3, #28]
   11b2e:	4283      	cmp	r3, r0
   11b30:	d9e2      	bls.n	11af8 <f_truncate+0x42>
				res = remove_chain(&fp->obj, ncl, fp->clust);
   11b32:	6c2a      	ldr	r2, [r5, #64]	; 0x40
   11b34:	4628      	mov	r0, r5
   11b36:	f7fe fee0 	bl	108fa <remove_chain>
   11b3a:	4604      	mov	r4, r0
   11b3c:	e7dc      	b.n	11af8 <f_truncate+0x42>
   11b3e:	2401      	movs	r4, #1
   11b40:	e7da      	b.n	11af8 <f_truncate+0x42>
			if (ncl == 1) res = FR_INT_ERR;
   11b42:	2402      	movs	r4, #2
   11b44:	e7d8      	b.n	11af8 <f_truncate+0x42>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   11b46:	2407      	movs	r4, #7
   11b48:	e7e3      	b.n	11b12 <f_truncate+0x5c>

00011b4a <f_unlink>:
{
   11b4a:	b510      	push	{r4, lr}
   11b4c:	b0b8      	sub	sp, #224	; 0xe0
	res = mount_volume(&path, &fs, FA_WRITE);
   11b4e:	2202      	movs	r2, #2
{
   11b50:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &fs, FA_WRITE);
   11b52:	a903      	add	r1, sp, #12
   11b54:	a801      	add	r0, sp, #4
   11b56:	f7f7 f89d 	bl	8c94 <mount_volume>
	if (res == FR_OK) {
   11b5a:	b978      	cbnz	r0, 11b7c <f_unlink+0x32>
		dj.obj.fs = fs;
   11b5c:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);		/* Follow the file path */
   11b5e:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
   11b60:	9310      	str	r3, [sp, #64]	; 0x40
		res = follow_path(&dj, path);		/* Follow the file path */
   11b62:	a810      	add	r0, sp, #64	; 0x40
   11b64:	f7f7 fc2e 	bl	93c4 <follow_path>
		if (res == FR_OK) {					/* The object is accessible */
   11b68:	b940      	cbnz	r0, 11b7c <f_unlink+0x32>
			if (dj.fn[NSFLAG] & NS_NONAME) {
   11b6a:	f99d 308b 	ldrsb.w	r3, [sp, #139]	; 0x8b
   11b6e:	2b00      	cmp	r3, #0
   11b70:	db47      	blt.n	11c02 <f_unlink+0xb8>
				if (dj.obj.attr & AM_RDO) {
   11b72:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
   11b76:	07da      	lsls	r2, r3, #31
   11b78:	d502      	bpl.n	11b80 <f_unlink+0x36>
					res = FR_DENIED;		/* Cannot remove R/O object */
   11b7a:	2007      	movs	r0, #7
}
   11b7c:	b038      	add	sp, #224	; 0xe0
   11b7e:	bd10      	pop	{r4, pc}
				obj.fs = fs;
   11b80:	9b03      	ldr	r3, [sp, #12]
   11b82:	9304      	str	r3, [sp, #16]
				if (fs->fs_type == FS_EXFAT) {
   11b84:	7818      	ldrb	r0, [r3, #0]
   11b86:	2804      	cmp	r0, #4
   11b88:	d112      	bne.n	11bb0 <f_unlink+0x66>
					init_alloc_info(fs, &obj);
   11b8a:	6918      	ldr	r0, [r3, #16]
   11b8c:	a904      	add	r1, sp, #16
   11b8e:	f7fe fca8 	bl	104e2 <init_alloc_info.isra.0>
					dclst = obj.sclust;
   11b92:	9c06      	ldr	r4, [sp, #24]
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
   11b94:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
   11b98:	06db      	lsls	r3, r3, #27
   11b9a:	d40e      	bmi.n	11bba <f_unlink+0x70>
				res = dir_remove(&dj);			/* Remove the directory entry */
   11b9c:	a810      	add	r0, sp, #64	; 0x40
   11b9e:	f7ff f932 	bl	10e06 <dir_remove>
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
   11ba2:	2800      	cmp	r0, #0
   11ba4:	d1ea      	bne.n	11b7c <f_unlink+0x32>
   11ba6:	bb24      	cbnz	r4, 11bf2 <f_unlink+0xa8>
				if (res == FR_OK) res = sync_fs(fs);
   11ba8:	9803      	ldr	r0, [sp, #12]
   11baa:	f7fe ff65 	bl	10a78 <sync_fs>
   11bae:	e7e5      	b.n	11b7c <f_unlink+0x32>
					dclst = ld_clust(fs, dj.dir);
   11bb0:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11bb2:	f7fe fc7c 	bl	104ae <ld_clust.isra.0>
   11bb6:	4604      	mov	r4, r0
   11bb8:	e7ec      	b.n	11b94 <f_unlink+0x4a>
						sdj.obj.fs = fs;			/* Open the sub-directory */
   11bba:	9b03      	ldr	r3, [sp, #12]
   11bbc:	9324      	str	r3, [sp, #144]	; 0x90
						sdj.obj.sclust = dclst;
   11bbe:	9426      	str	r4, [sp, #152]	; 0x98
						if (fs->fs_type == FS_EXFAT) {
   11bc0:	781b      	ldrb	r3, [r3, #0]
   11bc2:	2b04      	cmp	r3, #4
   11bc4:	d107      	bne.n	11bd6 <f_unlink+0x8c>
							sdj.obj.objsize = obj.objsize;
   11bc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   11bca:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
							sdj.obj.stat = obj.stat;
   11bce:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11bd2:	f88d 3097 	strb.w	r3, [sp, #151]	; 0x97
						res = dir_sdi(&sdj, 0);
   11bd6:	2100      	movs	r1, #0
   11bd8:	a824      	add	r0, sp, #144	; 0x90
   11bda:	f7fe fdac 	bl	10736 <dir_sdi>
						if (res == FR_OK) {
   11bde:	2800      	cmp	r0, #0
   11be0:	d1cc      	bne.n	11b7c <f_unlink+0x32>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
   11be2:	a824      	add	r0, sp, #144	; 0x90
   11be4:	f7f7 fa60 	bl	90a8 <dir_read.constprop.0>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
   11be8:	2800      	cmp	r0, #0
   11bea:	d0c6      	beq.n	11b7a <f_unlink+0x30>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
   11bec:	2804      	cmp	r0, #4
   11bee:	d1c5      	bne.n	11b7c <f_unlink+0x32>
   11bf0:	e7d4      	b.n	11b9c <f_unlink+0x52>
					res = remove_chain(&obj, dclst, 0);
   11bf2:	4602      	mov	r2, r0
   11bf4:	4621      	mov	r1, r4
   11bf6:	a804      	add	r0, sp, #16
   11bf8:	f7fe fe7f 	bl	108fa <remove_chain>
				if (res == FR_OK) res = sync_fs(fs);
   11bfc:	2800      	cmp	r0, #0
   11bfe:	d1bd      	bne.n	11b7c <f_unlink+0x32>
   11c00:	e7d2      	b.n	11ba8 <f_unlink+0x5e>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
   11c02:	2006      	movs	r0, #6
   11c04:	e7ba      	b.n	11b7c <f_unlink+0x32>

00011c06 <f_mkdir>:
{
   11c06:	b530      	push	{r4, r5, lr}
   11c08:	b0a5      	sub	sp, #148	; 0x94
	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
   11c0a:	2202      	movs	r2, #2
{
   11c0c:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
   11c0e:	a903      	add	r1, sp, #12
   11c10:	a801      	add	r0, sp, #4
   11c12:	f7f7 f83f 	bl	8c94 <mount_volume>
   11c16:	4604      	mov	r4, r0
   11c18:	4605      	mov	r5, r0
	if (res == FR_OK) {
   11c1a:	2800      	cmp	r0, #0
   11c1c:	f040 808f 	bne.w	11d3e <f_mkdir+0x138>
		dj.obj.fs = fs;
   11c20:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);			/* Follow the file path */
   11c22:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
   11c24:	9310      	str	r3, [sp, #64]	; 0x40
		res = follow_path(&dj, path);			/* Follow the file path */
   11c26:	a810      	add	r0, sp, #64	; 0x40
   11c28:	f7f7 fbcc 	bl	93c4 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
   11c2c:	4604      	mov	r4, r0
   11c2e:	2800      	cmp	r0, #0
   11c30:	f000 80a4 	beq.w	11d7c <f_mkdir+0x176>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
   11c34:	2804      	cmp	r0, #4
   11c36:	f040 8082 	bne.w	11d3e <f_mkdir+0x138>
			sobj.fs = fs;						/* New object id to create a new chain */
   11c3a:	9b03      	ldr	r3, [sp, #12]
   11c3c:	9304      	str	r3, [sp, #16]
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
   11c3e:	4629      	mov	r1, r5
   11c40:	a804      	add	r0, sp, #16
   11c42:	f7fe ff64 	bl	10b0e <create_chain>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
   11c46:	4605      	mov	r5, r0
   11c48:	2800      	cmp	r0, #0
   11c4a:	f000 808c 	beq.w	11d66 <f_mkdir+0x160>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
   11c4e:	2801      	cmp	r0, #1
   11c50:	f000 8090 	beq.w	11d74 <f_mkdir+0x16e>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
   11c54:	1c43      	adds	r3, r0, #1
   11c56:	f000 808f 	beq.w	11d78 <f_mkdir+0x172>
				res = dir_clear(fs, dcl);		/* Clean up the new table */
   11c5a:	9803      	ldr	r0, [sp, #12]
   11c5c:	4629      	mov	r1, r5
   11c5e:	f7fe fee2 	bl	10a26 <dir_clear>
   11c62:	4603      	mov	r3, r0
   11c64:	4604      	mov	r4, r0
				if (res == FR_OK) {
   11c66:	2800      	cmp	r0, #0
   11c68:	d17e      	bne.n	11d68 <f_mkdir+0x162>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
   11c6a:	9803      	ldr	r0, [sp, #12]
   11c6c:	7802      	ldrb	r2, [r0, #0]
   11c6e:	2a04      	cmp	r2, #4
   11c70:	d02f      	beq.n	11cd2 <f_mkdir+0xcc>
__ssp_bos_icheck3(memset, void *, int)
   11c72:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
   11c76:	63c2      	str	r2, [r0, #60]	; 0x3c
   11c78:	6402      	str	r2, [r0, #64]	; 0x40
	*ptr++ = (BYTE)val; val >>= 8;
   11c7a:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
   11c7e:	f8c0 2043 	str.w	r2, [r0, #67]	; 0x43
	*ptr++ = (BYTE)val; val >>= 8;
   11c82:	f880 3053 	strb.w	r3, [r0, #83]	; 0x53
						fs->win[DIR_Name] = '.';
   11c86:	222e      	movs	r2, #46	; 0x2e
	*ptr++ = (BYTE)val; val >>= 8;
   11c88:	2321      	movs	r3, #33	; 0x21
						fs->win[DIR_Name] = '.';
   11c8a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
	*ptr++ = (BYTE)val; val >>= 8;
   11c8e:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
						fs->win[DIR_Attr] = AM_DIR;
   11c92:	2210      	movs	r2, #16
	*ptr++ = (BYTE)val;
   11c94:	2350      	movs	r3, #80	; 0x50
						fs->win[DIR_Attr] = AM_DIR;
   11c96:	f880 2047 	strb.w	r2, [r0, #71]	; 0x47
	*ptr++ = (BYTE)val;
   11c9a:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
						st_clust(fs, fs->win, dcl);
   11c9e:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   11ca2:	462a      	mov	r2, r5
   11ca4:	f7fe fc11 	bl	104ca <st_clust.isra.0>
						memcpy(fs->win + SZDIRE, fs->win, SZDIRE);	/* Create ".." entry */
   11ca8:	9803      	ldr	r0, [sp, #12]
   11caa:	f100 035c 	add.w	r3, r0, #92	; 0x5c
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11cae:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   11cb2:	461a      	mov	r2, r3
   11cb4:	f851 4b04 	ldr.w	r4, [r1], #4
   11cb8:	f842 4b04 	str.w	r4, [r2], #4
   11cbc:	4299      	cmp	r1, r3
   11cbe:	d1f9      	bne.n	11cb4 <f_mkdir+0xae>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
   11cc0:	232e      	movs	r3, #46	; 0x2e
						st_clust(fs, fs->win + SZDIRE, pcl);
   11cc2:	9a12      	ldr	r2, [sp, #72]	; 0x48
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
   11cc4:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
						st_clust(fs, fs->win + SZDIRE, pcl);
   11cc8:	f7fe fbff 	bl	104ca <st_clust.isra.0>
						fs->wflag = 1;
   11ccc:	9b03      	ldr	r3, [sp, #12]
   11cce:	2201      	movs	r2, #1
   11cd0:	70da      	strb	r2, [r3, #3]
					res = dir_register(&dj);	/* Register the object to the parent directoy */
   11cd2:	a810      	add	r0, sp, #64	; 0x40
   11cd4:	f7f7 fcd8 	bl	9688 <dir_register>
			if (res == FR_OK) {
   11cd8:	4604      	mov	r4, r0
   11cda:	2800      	cmp	r0, #0
   11cdc:	d144      	bne.n	11d68 <f_mkdir+0x162>
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
   11cde:	9803      	ldr	r0, [sp, #12]
   11ce0:	7803      	ldrb	r3, [r0, #0]
   11ce2:	2b04      	cmp	r3, #4
   11ce4:	f04f 0221 	mov.w	r2, #33	; 0x21
   11ce8:	d12c      	bne.n	11d44 <f_mkdir+0x13e>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
   11cea:	6903      	ldr	r3, [r0, #16]
	*ptr++ = (BYTE)val; val >>= 8;
   11cec:	739a      	strb	r2, [r3, #14]
	*ptr++ = (BYTE)val;
   11cee:	2250      	movs	r2, #80	; 0x50
   11cf0:	73da      	strb	r2, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
   11cf2:	731c      	strb	r4, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
   11cf4:	735c      	strb	r4, [r3, #13]
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
   11cf6:	6900      	ldr	r0, [r0, #16]
   11cf8:	4629      	mov	r1, r5
   11cfa:	3034      	adds	r0, #52	; 0x34
   11cfc:	f7fe fa56 	bl	101ac <st_dword>
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)fs->csize * SS(fs));	/* Directory size needs to be valid */
   11d00:	9b03      	ldr	r3, [sp, #12]
   11d02:	8959      	ldrh	r1, [r3, #10]
   11d04:	6918      	ldr	r0, [r3, #16]
   11d06:	0249      	lsls	r1, r1, #9
   11d08:	3038      	adds	r0, #56	; 0x38
   11d0a:	f7fe fa4f 	bl	101ac <st_dword>
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)fs->csize * SS(fs));
   11d0e:	9b03      	ldr	r3, [sp, #12]
   11d10:	8959      	ldrh	r1, [r3, #10]
   11d12:	6918      	ldr	r0, [r3, #16]
   11d14:	0249      	lsls	r1, r1, #9
   11d16:	3028      	adds	r0, #40	; 0x28
   11d18:	f7fe fa48 	bl	101ac <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag */
   11d1c:	9b03      	ldr	r3, [sp, #12]
   11d1e:	691a      	ldr	r2, [r3, #16]
   11d20:	2103      	movs	r1, #3
   11d22:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
   11d26:	691b      	ldr	r3, [r3, #16]
   11d28:	2210      	movs	r2, #16
   11d2a:	711a      	strb	r2, [r3, #4]
					res = store_xdir(&dj);
   11d2c:	a810      	add	r0, sp, #64	; 0x40
   11d2e:	f7ff f914 	bl	10f5a <store_xdir>
				if (res == FR_OK) {
   11d32:	4604      	mov	r4, r0
   11d34:	b918      	cbnz	r0, 11d3e <f_mkdir+0x138>
					res = sync_fs(fs);
   11d36:	9803      	ldr	r0, [sp, #12]
   11d38:	f7fe fe9e 	bl	10a78 <sync_fs>
   11d3c:	4604      	mov	r4, r0
}
   11d3e:	4620      	mov	r0, r4
   11d40:	b025      	add	sp, #148	; 0x94
   11d42:	bd30      	pop	{r4, r5, pc}
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
   11d44:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
	*ptr++ = (BYTE)val; val >>= 8;
   11d46:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
   11d48:	2250      	movs	r2, #80	; 0x50
   11d4a:	765a      	strb	r2, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
   11d4c:	759c      	strb	r4, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
   11d4e:	75dc      	strb	r4, [r3, #23]
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
   11d50:	462a      	mov	r2, r5
   11d52:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11d54:	f7fe fbb9 	bl	104ca <st_clust.isra.0>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
   11d58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   11d5a:	2210      	movs	r2, #16
   11d5c:	72da      	strb	r2, [r3, #11]
					fs->wflag = 1;
   11d5e:	9b03      	ldr	r3, [sp, #12]
   11d60:	2201      	movs	r2, #1
   11d62:	70da      	strb	r2, [r3, #3]
				if (res == FR_OK) {
   11d64:	e7e7      	b.n	11d36 <f_mkdir+0x130>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
   11d66:	2407      	movs	r4, #7
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
   11d68:	2200      	movs	r2, #0
   11d6a:	4629      	mov	r1, r5
   11d6c:	a804      	add	r0, sp, #16
   11d6e:	f7fe fdc4 	bl	108fa <remove_chain>
   11d72:	e7e4      	b.n	11d3e <f_mkdir+0x138>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
   11d74:	2402      	movs	r4, #2
   11d76:	e7f7      	b.n	11d68 <f_mkdir+0x162>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
   11d78:	2401      	movs	r4, #1
   11d7a:	e7f5      	b.n	11d68 <f_mkdir+0x162>
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
   11d7c:	2408      	movs	r4, #8
	LEAVE_FF(fs, res);
   11d7e:	e7de      	b.n	11d3e <f_mkdir+0x138>

00011d80 <f_rename>:
{
   11d80:	b5f0      	push	{r4, r5, r6, r7, lr}
   11d82:	b0bd      	sub	sp, #244	; 0xf4
   11d84:	e9cd 1000 	strd	r1, r0, [sp]
	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
   11d88:	4668      	mov	r0, sp
   11d8a:	f7f6 fec7 	bl	8b1c <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
   11d8e:	2202      	movs	r2, #2
   11d90:	a903      	add	r1, sp, #12
   11d92:	a801      	add	r0, sp, #4
   11d94:	f7f6 ff7e 	bl	8c94 <mount_volume>
	if (res == FR_OK) {
   11d98:	bb70      	cbnz	r0, 11df8 <f_rename+0x78>
		res = follow_path(&djo, path_old);			/* Check old object */
   11d9a:	ac14      	add	r4, sp, #80	; 0x50
		djo.obj.fs = fs;
   11d9c:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&djo, path_old);			/* Check old object */
   11d9e:	9901      	ldr	r1, [sp, #4]
		djo.obj.fs = fs;
   11da0:	9314      	str	r3, [sp, #80]	; 0x50
		res = follow_path(&djo, path_old);			/* Check old object */
   11da2:	4620      	mov	r0, r4
   11da4:	f7f7 fb0e 	bl	93c4 <follow_path>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
   11da8:	bb30      	cbnz	r0, 11df8 <f_rename+0x78>
   11daa:	f89d 309b 	ldrb.w	r3, [sp, #155]	; 0x9b
   11dae:	f013 0fa0 	tst.w	r3, #160	; 0xa0
   11db2:	f040 80d0 	bne.w	11f56 <f_rename+0x1d6>
			if (fs->fs_type == FS_EXFAT) {	/* At exFAT volume */
   11db6:	9b03      	ldr	r3, [sp, #12]
   11db8:	9e00      	ldr	r6, [sp, #0]
   11dba:	781a      	ldrb	r2, [r3, #0]
   11dbc:	2a04      	cmp	r2, #4
   11dbe:	d164      	bne.n	11e8a <f_rename+0x10a>
				memcpy(buf, fs->dirbuf, SZDIRE * 2);	/* Save 85+C0 entry of old object */
   11dc0:	691b      	ldr	r3, [r3, #16]
   11dc2:	ad04      	add	r5, sp, #16
   11dc4:	f103 0740 	add.w	r7, r3, #64	; 0x40
   11dc8:	6818      	ldr	r0, [r3, #0]
   11dca:	6859      	ldr	r1, [r3, #4]
   11dcc:	462a      	mov	r2, r5
   11dce:	c203      	stmia	r2!, {r0, r1}
   11dd0:	3308      	adds	r3, #8
   11dd2:	42bb      	cmp	r3, r7
   11dd4:	4615      	mov	r5, r2
   11dd6:	d1f7      	bne.n	11dc8 <f_rename+0x48>
				memcpy(&djn, &djo, sizeof djo);
   11dd8:	4621      	mov	r1, r4
   11dda:	2250      	movs	r2, #80	; 0x50
   11ddc:	a828      	add	r0, sp, #160	; 0xa0
   11dde:	f000 fa83 	bl	122e8 <memcpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
   11de2:	4631      	mov	r1, r6
   11de4:	a828      	add	r0, sp, #160	; 0xa0
   11de6:	f7f7 faed 	bl	93c4 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
   11dea:	2800      	cmp	r0, #0
   11dec:	d14a      	bne.n	11e84 <f_rename+0x104>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
   11dee:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   11df0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   11df2:	429a      	cmp	r2, r3
   11df4:	d002      	beq.n	11dfc <f_rename+0x7c>
   11df6:	2008      	movs	r0, #8
}
   11df8:	b03d      	add	sp, #244	; 0xf4
   11dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
   11dfc:	9a34      	ldr	r2, [sp, #208]	; 0xd0
   11dfe:	9b20      	ldr	r3, [sp, #128]	; 0x80
   11e00:	429a      	cmp	r2, r3
   11e02:	d1f8      	bne.n	11df6 <f_rename+0x76>
					res = dir_register(&djn);			/* Register the new entry */
   11e04:	a828      	add	r0, sp, #160	; 0xa0
   11e06:	f7f7 fc3f 	bl	9688 <dir_register>
					if (res == FR_OK) {
   11e0a:	2800      	cmp	r0, #0
   11e0c:	d1f4      	bne.n	11df8 <f_rename+0x78>
						nf = fs->dirbuf[XDIR_NumSec]; nn = fs->dirbuf[XDIR_NumName];
   11e0e:	9b03      	ldr	r3, [sp, #12]
   11e10:	691b      	ldr	r3, [r3, #16]
	rv = rv << 8 | ptr[0];
   11e12:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
   11e16:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
						nf = fs->dirbuf[XDIR_NumSec]; nn = fs->dirbuf[XDIR_NumName];
   11e1a:	f893 c001 	ldrb.w	ip, [r3, #1]
   11e1e:	f893 7023 	ldrb.w	r7, [r3, #35]	; 0x23
	rv = rv << 8 | ptr[0];
   11e22:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   11e26:	b212      	sxth	r2, r2
   11e28:	ae04      	add	r6, sp, #16
   11e2a:	4635      	mov	r5, r6
   11e2c:	cd03      	ldmia	r5!, {r0, r1}
   11e2e:	42a5      	cmp	r5, r4
   11e30:	6018      	str	r0, [r3, #0]
   11e32:	6059      	str	r1, [r3, #4]
   11e34:	462e      	mov	r6, r5
   11e36:	f103 0308 	add.w	r3, r3, #8
   11e3a:	d1f6      	bne.n	11e2a <f_rename+0xaa>
						fs->dirbuf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;
   11e3c:	9b03      	ldr	r3, [sp, #12]
   11e3e:	691b      	ldr	r3, [r3, #16]
   11e40:	f883 c001 	strb.w	ip, [r3, #1]
   11e44:	9b03      	ldr	r3, [sp, #12]
   11e46:	6919      	ldr	r1, [r3, #16]
   11e48:	f881 7023 	strb.w	r7, [r1, #35]	; 0x23
						st_word(fs->dirbuf + XDIR_NameHash, nh);
   11e4c:	6919      	ldr	r1, [r3, #16]
	*ptr++ = (BYTE)val; val >>= 8;
   11e4e:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
   11e52:	f3c2 2207 	ubfx	r2, r2, #8, #8
	*ptr++ = (BYTE)val;
   11e56:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
						if (!(fs->dirbuf[XDIR_Attr] & AM_DIR)) fs->dirbuf[XDIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
   11e5a:	691a      	ldr	r2, [r3, #16]
   11e5c:	7913      	ldrb	r3, [r2, #4]
   11e5e:	06d9      	lsls	r1, r3, #27
   11e60:	bf5c      	itt	pl
   11e62:	f043 0320 	orrpl.w	r3, r3, #32
   11e66:	7113      	strbpl	r3, [r2, #4]
						res = store_xdir(&djn);
   11e68:	a828      	add	r0, sp, #160	; 0xa0
   11e6a:	f7ff f876 	bl	10f5a <store_xdir>
			if (res == FR_OK) {
   11e6e:	2800      	cmp	r0, #0
   11e70:	d1c2      	bne.n	11df8 <f_rename+0x78>
				res = dir_remove(&djo);		/* Remove old entry */
   11e72:	4620      	mov	r0, r4
   11e74:	f7fe ffc7 	bl	10e06 <dir_remove>
				if (res == FR_OK) {
   11e78:	2800      	cmp	r0, #0
   11e7a:	d1bd      	bne.n	11df8 <f_rename+0x78>
					res = sync_fs(fs);
   11e7c:	9803      	ldr	r0, [sp, #12]
   11e7e:	f7fe fdfb 	bl	10a78 <sync_fs>
   11e82:	e7b9      	b.n	11df8 <f_rename+0x78>
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
   11e84:	2804      	cmp	r0, #4
   11e86:	d1b7      	bne.n	11df8 <f_rename+0x78>
   11e88:	e7bc      	b.n	11e04 <f_rename+0x84>
				memcpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
   11e8a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   11e8c:	ab04      	add	r3, sp, #16
   11e8e:	f102 0720 	add.w	r7, r2, #32
   11e92:	6810      	ldr	r0, [r2, #0]
   11e94:	6851      	ldr	r1, [r2, #4]
   11e96:	461d      	mov	r5, r3
   11e98:	c503      	stmia	r5!, {r0, r1}
   11e9a:	3208      	adds	r2, #8
   11e9c:	42ba      	cmp	r2, r7
   11e9e:	462b      	mov	r3, r5
   11ea0:	d1f7      	bne.n	11e92 <f_rename+0x112>
				memcpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
   11ea2:	4621      	mov	r1, r4
   11ea4:	2250      	movs	r2, #80	; 0x50
   11ea6:	a828      	add	r0, sp, #160	; 0xa0
   11ea8:	f000 fa1e 	bl	122e8 <memcpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
   11eac:	4631      	mov	r1, r6
   11eae:	a828      	add	r0, sp, #160	; 0xa0
   11eb0:	f7f7 fa88 	bl	93c4 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
   11eb4:	2800      	cmp	r0, #0
   11eb6:	d14a      	bne.n	11f4e <f_rename+0x1ce>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
   11eb8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   11eba:	9b16      	ldr	r3, [sp, #88]	; 0x58
   11ebc:	429a      	cmp	r2, r3
   11ebe:	d19a      	bne.n	11df6 <f_rename+0x76>
   11ec0:	9a34      	ldr	r2, [sp, #208]	; 0xd0
   11ec2:	9b20      	ldr	r3, [sp, #128]	; 0x80
   11ec4:	429a      	cmp	r2, r3
   11ec6:	d196      	bne.n	11df6 <f_rename+0x76>
					res = dir_register(&djn);			/* Register the new entry */
   11ec8:	a828      	add	r0, sp, #160	; 0xa0
   11eca:	f7f7 fbdd 	bl	9688 <dir_register>
					if (res == FR_OK) {
   11ece:	2800      	cmp	r0, #0
   11ed0:	d192      	bne.n	11df8 <f_rename+0x78>
						dir = djn.dir;					/* Copy directory entry of the object except name */
   11ed2:	9937      	ldr	r1, [sp, #220]	; 0xdc
   11ed4:	f10d 031d 	add.w	r3, sp, #29
   11ed8:	f101 020d 	add.w	r2, r1, #13
   11edc:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
   11ee0:	f853 5b04 	ldr.w	r5, [r3], #4
   11ee4:	f842 5b04 	str.w	r5, [r2], #4
   11ee8:	4283      	cmp	r3, r0
   11eea:	d1f9      	bne.n	11ee0 <f_rename+0x160>
   11eec:	8818      	ldrh	r0, [r3, #0]
   11eee:	8010      	strh	r0, [r2, #0]
   11ef0:	789b      	ldrb	r3, [r3, #2]
   11ef2:	7093      	strb	r3, [r2, #2]
						dir[DIR_Attr] = buf[DIR_Attr];
   11ef4:	f89d 301b 	ldrb.w	r3, [sp, #27]
						fs->wflag = 1;
   11ef8:	9d03      	ldr	r5, [sp, #12]
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
   11efa:	06da      	lsls	r2, r3, #27
   11efc:	bf58      	it	pl
   11efe:	f043 0320 	orrpl.w	r3, r3, #32
						fs->wflag = 1;
   11f02:	2601      	movs	r6, #1
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
   11f04:	72cb      	strb	r3, [r1, #11]
						fs->wflag = 1;
   11f06:	70ee      	strb	r6, [r5, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
   11f08:	7acb      	ldrb	r3, [r1, #11]
   11f0a:	06db      	lsls	r3, r3, #27
   11f0c:	d5b1      	bpl.n	11e72 <f_rename+0xf2>
   11f0e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   11f10:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   11f12:	429a      	cmp	r2, r3
   11f14:	d0ad      	beq.n	11e72 <f_rename+0xf2>
							sect = clst2sect(fs, ld_clust(fs, dir));
   11f16:	7828      	ldrb	r0, [r5, #0]
   11f18:	f7fe fac9 	bl	104ae <ld_clust.isra.0>
   11f1c:	4601      	mov	r1, r0
   11f1e:	4628      	mov	r0, r5
   11f20:	f7fe f95b 	bl	101da <clst2sect>
							if (sect == 0) {
   11f24:	4601      	mov	r1, r0
   11f26:	b1c0      	cbz	r0, 11f5a <f_rename+0x1da>
								res = move_window(fs, sect);
   11f28:	4628      	mov	r0, r5
   11f2a:	f7fe fb13 	bl	10554 <move_window>
								if (res == FR_OK && dir[1] == '.') {
   11f2e:	2800      	cmp	r0, #0
   11f30:	f47f af62 	bne.w	11df8 <f_rename+0x78>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
   11f34:	9803      	ldr	r0, [sp, #12]
								if (res == FR_OK && dir[1] == '.') {
   11f36:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   11f3a:	2b2e      	cmp	r3, #46	; 0x2e
   11f3c:	d199      	bne.n	11e72 <f_rename+0xf2>
									st_clust(fs, dir, djn.obj.sclust);
   11f3e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   11f40:	f100 015c 	add.w	r1, r0, #92	; 0x5c
   11f44:	f7fe fac1 	bl	104ca <st_clust.isra.0>
									fs->wflag = 1;
   11f48:	9b03      	ldr	r3, [sp, #12]
   11f4a:	70de      	strb	r6, [r3, #3]
			if (res == FR_OK) {
   11f4c:	e791      	b.n	11e72 <f_rename+0xf2>
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
   11f4e:	2804      	cmp	r0, #4
   11f50:	f47f af52 	bne.w	11df8 <f_rename+0x78>
   11f54:	e7b8      	b.n	11ec8 <f_rename+0x148>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
   11f56:	2006      	movs	r0, #6
   11f58:	e74e      	b.n	11df8 <f_rename+0x78>
								res = FR_INT_ERR;
   11f5a:	2002      	movs	r0, #2
   11f5c:	e74c      	b.n	11df8 <f_rename+0x78>

00011f5e <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   11f5e:	4700      	bx	r0

00011f60 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   11f60:	f000 b986 	b.w	12270 <z_impl_k_busy_wait>

00011f64 <nrf_gpio_pin_present_check>:
    switch (port)
   11f64:	0943      	lsrs	r3, r0, #5
   11f66:	bf0c      	ite	eq
   11f68:	f04f 33ff 	moveq.w	r3, #4294967295
   11f6c:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   11f6e:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   11f72:	fa23 f000 	lsr.w	r0, r3, r0
}
   11f76:	f000 0001 	and.w	r0, r0, #1
   11f7a:	4770      	bx	lr

00011f7c <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   11f7c:	0080      	lsls	r0, r0, #2
}
   11f7e:	f500 7080 	add.w	r0, r0, #256	; 0x100
   11f82:	4770      	bx	lr

00011f84 <nrf_gpio_reconfigure>:
{
   11f84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11f88:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   11f8a:	a801      	add	r0, sp, #4
{
   11f8c:	460e      	mov	r6, r1
   11f8e:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   11f92:	4690      	mov	r8, r2
   11f94:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   11f96:	f7f9 f849 	bl	b02c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   11f9a:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   11f9c:	f1b8 0f00 	cmp.w	r8, #0
   11fa0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   11fa4:	bf14      	ite	ne
   11fa6:	2302      	movne	r3, #2
   11fa8:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   11faa:	2e00      	cmp	r6, #0
   11fac:	bf18      	it	ne
   11fae:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   11fb2:	2d00      	cmp	r5, #0
   11fb4:	bf14      	ite	ne
   11fb6:	210c      	movne	r1, #12
   11fb8:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   11fba:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   11fbc:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   11fc0:	bf14      	ite	ne
   11fc2:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   11fc6:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   11fc8:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   11fca:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   11fce:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   11fd2:	bf14      	ite	ne
   11fd4:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   11fd8:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   11fda:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   11fdc:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   11fe0:	b106      	cbz	r6, 11fe4 <nrf_gpio_reconfigure+0x60>
   11fe2:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   11fe4:	f1b8 0f00 	cmp.w	r8, #0
   11fe8:	d003      	beq.n	11ff2 <nrf_gpio_reconfigure+0x6e>
   11fea:	f898 8000 	ldrb.w	r8, [r8]
   11fee:	ea4f 0848 	mov.w	r8, r8, lsl #1
   11ff2:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   11ff4:	b10d      	cbz	r5, 11ffa <nrf_gpio_reconfigure+0x76>
   11ff6:	782d      	ldrb	r5, [r5, #0]
   11ff8:	00ad      	lsls	r5, r5, #2
   11ffa:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   11ffe:	b10c      	cbz	r4, 12004 <nrf_gpio_reconfigure+0x80>
   12000:	7822      	ldrb	r2, [r4, #0]
   12002:	0214      	lsls	r4, r2, #8
   12004:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   12006:	b10f      	cbz	r7, 1200c <nrf_gpio_reconfigure+0x88>
   12008:	783f      	ldrb	r7, [r7, #0]
   1200a:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1200c:	432c      	orrs	r4, r5
   1200e:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   12010:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   12014:	b002      	add	sp, #8
   12016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001201a <nrf_gpio_cfg_sense_set>:
{
   1201a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1201c:	f10d 030f 	add.w	r3, sp, #15
   12020:	9301      	str	r3, [sp, #4]
   12022:	2300      	movs	r3, #0
{
   12024:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   12028:	9300      	str	r3, [sp, #0]
   1202a:	461a      	mov	r2, r3
   1202c:	4619      	mov	r1, r3
   1202e:	f7ff ffa9 	bl	11f84 <nrf_gpio_reconfigure>
}
   12032:	b005      	add	sp, #20
   12034:	f85d fb04 	ldr.w	pc, [sp], #4

00012038 <transfer_byte>:
{
   12038:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   1203a:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   1203e:	698a      	ldr	r2, [r1, #24]
   12040:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   12042:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   12046:	6a0b      	ldr	r3, [r1, #32]
   12048:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   1204a:	bf3e      	ittt	cc
   1204c:	694a      	ldrcc	r2, [r1, #20]
   1204e:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   12052:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   12054:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
   12056:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
   1205a:	1c53      	adds	r3, r2, #1
   1205c:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   1205e:	3202      	adds	r2, #2
    if (p_cb->abort)
   12060:	b13c      	cbz	r4, 12072 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   12062:	690c      	ldr	r4, [r1, #16]
   12064:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   12066:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   12068:	bf38      	it	cc
   1206a:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   1206c:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   1206e:	bf88      	it	hi
   12070:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   12072:	690d      	ldr	r5, [r1, #16]
   12074:	4295      	cmp	r5, r2
   12076:	d905      	bls.n	12084 <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   12078:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
   1207a:	5c9b      	ldrb	r3, [r3, r2]
   1207c:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   12080:	2001      	movs	r0, #1
   12082:	e00a      	b.n	1209a <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   12084:	698c      	ldr	r4, [r1, #24]
   12086:	4294      	cmp	r4, r2
   12088:	d901      	bls.n	1208e <transfer_byte+0x56>
   1208a:	7fcb      	ldrb	r3, [r1, #31]
   1208c:	e7f6      	b.n	1207c <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   1208e:	42ab      	cmp	r3, r5
   12090:	d3f6      	bcc.n	12080 <transfer_byte+0x48>
   12092:	42a3      	cmp	r3, r4
   12094:	bf2c      	ite	cs
   12096:	2000      	movcs	r0, #0
   12098:	2001      	movcc	r0, #1
}
   1209a:	b003      	add	sp, #12
   1209c:	bd30      	pop	{r4, r5, pc}

0001209e <nrf_gpio_cfg_default>:
{
   1209e:	b507      	push	{r0, r1, r2, lr}
   120a0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   120a2:	a801      	add	r0, sp, #4
   120a4:	f7f9 fad8 	bl	b658 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   120a8:	9b01      	ldr	r3, [sp, #4]
   120aa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   120ae:	2202      	movs	r2, #2
   120b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   120b4:	b003      	add	sp, #12
   120b6:	f85d fb04 	ldr.w	pc, [sp], #4

000120ba <nrf_gpio_pin_clear>:
{
   120ba:	b507      	push	{r0, r1, r2, lr}
   120bc:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   120be:	a801      	add	r0, sp, #4
   120c0:	f7f9 faca 	bl	b658 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   120c4:	9a01      	ldr	r2, [sp, #4]
   120c6:	2301      	movs	r3, #1
   120c8:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   120ca:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   120ce:	b003      	add	sp, #12
   120d0:	f85d fb04 	ldr.w	pc, [sp], #4

000120d4 <nrf_gpio_pin_set>:
{
   120d4:	b507      	push	{r0, r1, r2, lr}
   120d6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   120d8:	a801      	add	r0, sp, #4
   120da:	f7f9 fabd 	bl	b658 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   120de:	9a01      	ldr	r2, [sp, #4]
   120e0:	2301      	movs	r3, #1
   120e2:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   120e4:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   120e8:	b003      	add	sp, #12
   120ea:	f85d fb04 	ldr.w	pc, [sp], #4

000120ee <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   120ee:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   120f0:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
   120f2:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   120f4:	bf9d      	ittte	ls
   120f6:	6882      	ldrls	r2, [r0, #8]
   120f8:	18d2      	addls	r2, r2, r3
   120fa:	f102 32ff 	addls.w	r2, r2, #4294967295
    r = RdOff - WrOff - 1u;
   120fe:	f103 33ff 	addhi.w	r3, r3, #4294967295
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   12102:	bf94      	ite	ls
   12104:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
   12106:	1a58      	subhi	r0, r3, r1
}
   12108:	4770      	bx	lr

0001210a <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1210a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1210e:	4604      	mov	r4, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   12110:	e9d0 8002 	ldrd	r8, r0, [r0, #8]
   12114:	6867      	ldr	r7, [r4, #4]
   12116:	eba8 0600 	sub.w	r6, r8, r0
  if (Rem > NumBytes) {
   1211a:	4296      	cmp	r6, r2
   1211c:	eb00 0502 	add.w	r5, r0, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   12120:	4689      	mov	r9, r1
  if (Rem > NumBytes) {
   12122:	4438      	add	r0, r7
   12124:	d904      	bls.n	12130 <_WriteNoCheck+0x26>
   12126:	f000 f8df 	bl	122e8 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1212a:	60e5      	str	r5, [r4, #12]
}
   1212c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12130:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
   12132:	eba5 0508 	sub.w	r5, r5, r8
   12136:	f000 f8d7 	bl	122e8 <memcpy>
   1213a:	6860      	ldr	r0, [r4, #4]
   1213c:	462a      	mov	r2, r5
   1213e:	eb09 0106 	add.w	r1, r9, r6
   12142:	e7f0      	b.n	12126 <_WriteNoCheck+0x1c>

00012144 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   12144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   12148:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1214a:	4606      	mov	r6, r0
   1214c:	4689      	mov	r9, r1
   1214e:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   12150:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   12154:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   12156:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   12158:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   1215a:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1215c:	bf28      	it	cs
   1215e:	18e4      	addcs	r4, r4, r3
   12160:	3c01      	subs	r4, #1
   12162:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   12164:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   12166:	42bc      	cmp	r4, r7
   12168:	bf28      	it	cs
   1216a:	463c      	movcs	r4, r7
   1216c:	4294      	cmp	r4, r2
   1216e:	bf28      	it	cs
   12170:	4614      	movcs	r4, r2
   12172:	4649      	mov	r1, r9
   12174:	4428      	add	r0, r5
   12176:	4622      	mov	r2, r4
   12178:	f000 f8b6 	bl	122e8 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1217c:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1217e:	4425      	add	r5, r4
      WrOff = 0u;
   12180:	42ab      	cmp	r3, r5
   12182:	bf08      	it	eq
   12184:	2500      	moveq	r5, #0
  } while (NumBytes);
   12186:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   12188:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1218a:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   1218c:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1218e:	d1e1      	bne.n	12154 <_WriteBlocking+0x10>
}
   12190:	4640      	mov	r0, r8
   12192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00012196 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   12196:	f7f9 bc89 	b.w	baac <_DoInit>

0001219a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1219a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1219c:	f7ff fffb 	bl	12196 <SEGGER_RTT_Init>

	return 0;
}
   121a0:	2000      	movs	r0, #0
   121a2:	bd08      	pop	{r3, pc}

000121a4 <z_device_state_init>:
}
   121a4:	4770      	bx	lr

000121a6 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   121a6:	b138      	cbz	r0, 121b8 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   121a8:	68c3      	ldr	r3, [r0, #12]
   121aa:	8818      	ldrh	r0, [r3, #0]
   121ac:	f3c0 0008 	ubfx	r0, r0, #0, #9
   121b0:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   121b4:	4258      	negs	r0, r3
   121b6:	4158      	adcs	r0, r3
}
   121b8:	4770      	bx	lr

000121ba <k_mem_slab_init>:
{
   121ba:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   121bc:	2400      	movs	r4, #0
   121be:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   121c0:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   121c2:	ea41 0402 	orr.w	r4, r1, r2
   121c6:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   121ca:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   121ce:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   121d0:	d10c      	bne.n	121ec <k_mem_slab_init+0x32>
	slab->free_list = NULL;
   121d2:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   121d4:	42a3      	cmp	r3, r4
   121d6:	d103      	bne.n	121e0 <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
   121d8:	e9c0 0000 	strd	r0, r0, [r0]
}
   121dc:	2000      	movs	r0, #0
}
   121de:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   121e0:	6985      	ldr	r5, [r0, #24]
   121e2:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   121e4:	3401      	adds	r4, #1
		slab->free_list = p;
   121e6:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
   121e8:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   121ea:	e7f3      	b.n	121d4 <k_mem_slab_init+0x1a>
		return -EINVAL;
   121ec:	f06f 0015 	mvn.w	r0, #21
	return rc;
   121f0:	e7f5      	b.n	121de <k_mem_slab_init+0x24>

000121f2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   121f2:	f3ef 8005 	mrs	r0, IPSR
}
   121f6:	3800      	subs	r0, #0
   121f8:	bf18      	it	ne
   121fa:	2001      	movne	r0, #1
   121fc:	4770      	bx	lr

000121fe <z_impl_k_thread_name_set>:
}
   121fe:	f06f 0057 	mvn.w	r0, #87	; 0x57
   12202:	4770      	bx	lr

00012204 <k_thread_name_get>:
}
   12204:	2000      	movs	r0, #0
   12206:	4770      	bx	lr

00012208 <z_pm_save_idle_exit>:
{
   12208:	b508      	push	{r3, lr}
	pm_system_resume();
   1220a:	f7f3 fa45 	bl	5698 <pm_system_resume>
}
   1220e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   12212:	f7fd bf9b 	b.w	1014c <sys_clock_idle_exit>

00012216 <z_impl_k_mutex_init>:
{
   12216:	4603      	mov	r3, r0
	mutex->owner = NULL;
   12218:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   1221a:	e9c3 0002 	strd	r0, r0, [r3, #8]
   1221e:	e9c3 3300 	strd	r3, r3, [r3]
}
   12222:	4770      	bx	lr

00012224 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   12224:	4603      	mov	r3, r0
   12226:	b920      	cbnz	r0, 12232 <z_reschedule_irqlock+0xe>
   12228:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   1222c:	b90a      	cbnz	r2, 12232 <z_reschedule_irqlock+0xe>
   1222e:	f7f3 bbd5 	b.w	59dc <arch_swap>
   12232:	f383 8811 	msr	BASEPRI, r3
   12236:	f3bf 8f6f 	isb	sy
}
   1223a:	4770      	bx	lr

0001223c <z_reschedule_unlocked>:
	__asm__ volatile(
   1223c:	f04f 0320 	mov.w	r3, #32
   12240:	f3ef 8011 	mrs	r0, BASEPRI
   12244:	f383 8812 	msr	BASEPRI_MAX, r3
   12248:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1224c:	f7ff bfea 	b.w	12224 <z_reschedule_irqlock>

00012250 <z_priq_dumb_best>:
{
   12250:	4603      	mov	r3, r0
	return list->head == list;
   12252:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12254:	4283      	cmp	r3, r0
   12256:	d003      	beq.n	12260 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   12258:	2800      	cmp	r0, #0
   1225a:	bf38      	it	cc
   1225c:	2000      	movcc	r0, #0
   1225e:	4770      	bx	lr
	struct k_thread *thread = NULL;
   12260:	2000      	movs	r0, #0
}
   12262:	4770      	bx	lr

00012264 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   12264:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   12266:	f7fb fd15 	bl	dc94 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1226a:	bd08      	pop	{r3, pc}

0001226c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   1226c:	f7fb bd12 	b.w	dc94 <sys_clock_tick_get>

00012270 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   12270:	b108      	cbz	r0, 12276 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   12272:	f7f4 b967 	b.w	6544 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   12276:	4770      	bx	lr

00012278 <k_timer_init>:
	timer->status = 0U;
   12278:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1227a:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
   1227e:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   12282:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   12286:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   1228a:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   1228c:	6343      	str	r3, [r0, #52]	; 0x34
}
   1228e:	4770      	bx	lr

00012290 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   12290:	b510      	push	{r4, lr}
   12292:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   12294:	f7fb fb96 	bl	d9c4 <z_abort_timeout>

	if (inactive) {
   12298:	b9b0      	cbnz	r0, 122c8 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   1229a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1229c:	b10b      	cbz	r3, 122a2 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1229e:	4620      	mov	r0, r4
   122a0:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   122a2:	f104 0018 	add.w	r0, r4, #24
   122a6:	f7fb f807 	bl	d2b8 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   122aa:	b168      	cbz	r0, 122c8 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   122ac:	f7fa fd3a 	bl	cd24 <z_ready_thread>
   122b0:	f04f 0320 	mov.w	r3, #32
   122b4:	f3ef 8011 	mrs	r0, BASEPRI
   122b8:	f383 8812 	msr	BASEPRI_MAX, r3
   122bc:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   122c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   122c4:	f7ff bfae 	b.w	12224 <z_reschedule_irqlock>
   122c8:	bd10      	pop	{r4, pc}

000122ca <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   122ca:	4770      	bx	lr

000122cc <memcmp>:
   122cc:	b530      	push	{r4, r5, lr}
   122ce:	3901      	subs	r1, #1
   122d0:	2400      	movs	r4, #0
   122d2:	42a2      	cmp	r2, r4
   122d4:	d101      	bne.n	122da <memcmp+0xe>
   122d6:	2000      	movs	r0, #0
   122d8:	e005      	b.n	122e6 <memcmp+0x1a>
   122da:	5d03      	ldrb	r3, [r0, r4]
   122dc:	3401      	adds	r4, #1
   122de:	5d0d      	ldrb	r5, [r1, r4]
   122e0:	42ab      	cmp	r3, r5
   122e2:	d0f6      	beq.n	122d2 <memcmp+0x6>
   122e4:	1b58      	subs	r0, r3, r5
   122e6:	bd30      	pop	{r4, r5, pc}

000122e8 <memcpy>:
   122e8:	440a      	add	r2, r1
   122ea:	4291      	cmp	r1, r2
   122ec:	f100 33ff 	add.w	r3, r0, #4294967295
   122f0:	d100      	bne.n	122f4 <memcpy+0xc>
   122f2:	4770      	bx	lr
   122f4:	b510      	push	{r4, lr}
   122f6:	f811 4b01 	ldrb.w	r4, [r1], #1
   122fa:	f803 4f01 	strb.w	r4, [r3, #1]!
   122fe:	4291      	cmp	r1, r2
   12300:	d1f9      	bne.n	122f6 <memcpy+0xe>
   12302:	bd10      	pop	{r4, pc}

00012304 <memset>:
   12304:	4402      	add	r2, r0
   12306:	4603      	mov	r3, r0
   12308:	4293      	cmp	r3, r2
   1230a:	d100      	bne.n	1230e <memset+0xa>
   1230c:	4770      	bx	lr
   1230e:	f803 1b01 	strb.w	r1, [r3], #1
   12312:	e7f9      	b.n	12308 <memset+0x4>

00012314 <__cvt>:
   12314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12318:	b088      	sub	sp, #32
   1231a:	2b00      	cmp	r3, #0
   1231c:	461f      	mov	r7, r3
   1231e:	4614      	mov	r4, r2
   12320:	bfb8      	it	lt
   12322:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   12326:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12328:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1232a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   1232e:	bfb6      	itet	lt
   12330:	461f      	movlt	r7, r3
   12332:	2300      	movge	r3, #0
   12334:	232d      	movlt	r3, #45	; 0x2d
   12336:	7013      	strb	r3, [r2, #0]
   12338:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1233a:	f023 0820 	bic.w	r8, r3, #32
   1233e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   12342:	d005      	beq.n	12350 <__cvt+0x3c>
   12344:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   12348:	d100      	bne.n	1234c <__cvt+0x38>
   1234a:	3501      	adds	r5, #1
   1234c:	2302      	movs	r3, #2
   1234e:	e000      	b.n	12352 <__cvt+0x3e>
   12350:	2303      	movs	r3, #3
   12352:	aa07      	add	r2, sp, #28
   12354:	9204      	str	r2, [sp, #16]
   12356:	aa06      	add	r2, sp, #24
   12358:	e9cd a202 	strd	sl, r2, [sp, #8]
   1235c:	e9cd 3500 	strd	r3, r5, [sp]
   12360:	4622      	mov	r2, r4
   12362:	463b      	mov	r3, r7
   12364:	f7ef fe7c 	bl	2060 <_dtoa_r>
   12368:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   1236c:	4606      	mov	r6, r0
   1236e:	d102      	bne.n	12376 <__cvt+0x62>
   12370:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12372:	07db      	lsls	r3, r3, #31
   12374:	d522      	bpl.n	123bc <__cvt+0xa8>
   12376:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   1237a:	eb06 0905 	add.w	r9, r6, r5
   1237e:	d110      	bne.n	123a2 <__cvt+0x8e>
   12380:	7833      	ldrb	r3, [r6, #0]
   12382:	2b30      	cmp	r3, #48	; 0x30
   12384:	d10a      	bne.n	1239c <__cvt+0x88>
   12386:	2200      	movs	r2, #0
   12388:	2300      	movs	r3, #0
   1238a:	4620      	mov	r0, r4
   1238c:	4639      	mov	r1, r7
   1238e:	f7ee fb1b 	bl	9c8 <__aeabi_dcmpeq>
   12392:	b918      	cbnz	r0, 1239c <__cvt+0x88>
   12394:	f1c5 0501 	rsb	r5, r5, #1
   12398:	f8ca 5000 	str.w	r5, [sl]
   1239c:	f8da 3000 	ldr.w	r3, [sl]
   123a0:	4499      	add	r9, r3
   123a2:	2200      	movs	r2, #0
   123a4:	2300      	movs	r3, #0
   123a6:	4620      	mov	r0, r4
   123a8:	4639      	mov	r1, r7
   123aa:	f7ee fb0d 	bl	9c8 <__aeabi_dcmpeq>
   123ae:	b108      	cbz	r0, 123b4 <__cvt+0xa0>
   123b0:	f8cd 901c 	str.w	r9, [sp, #28]
   123b4:	2230      	movs	r2, #48	; 0x30
   123b6:	9b07      	ldr	r3, [sp, #28]
   123b8:	454b      	cmp	r3, r9
   123ba:	d307      	bcc.n	123cc <__cvt+0xb8>
   123bc:	9b07      	ldr	r3, [sp, #28]
   123be:	9a15      	ldr	r2, [sp, #84]	; 0x54
   123c0:	1b9b      	subs	r3, r3, r6
   123c2:	4630      	mov	r0, r6
   123c4:	6013      	str	r3, [r2, #0]
   123c6:	b008      	add	sp, #32
   123c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   123cc:	1c59      	adds	r1, r3, #1
   123ce:	9107      	str	r1, [sp, #28]
   123d0:	701a      	strb	r2, [r3, #0]
   123d2:	e7f0      	b.n	123b6 <__cvt+0xa2>

000123d4 <__exponent>:
   123d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   123d6:	4603      	mov	r3, r0
   123d8:	2900      	cmp	r1, #0
   123da:	bfb8      	it	lt
   123dc:	4249      	neglt	r1, r1
   123de:	f803 2b02 	strb.w	r2, [r3], #2
   123e2:	bfb4      	ite	lt
   123e4:	222d      	movlt	r2, #45	; 0x2d
   123e6:	222b      	movge	r2, #43	; 0x2b
   123e8:	2909      	cmp	r1, #9
   123ea:	7042      	strb	r2, [r0, #1]
   123ec:	dd2a      	ble.n	12444 <__exponent+0x70>
   123ee:	f10d 0407 	add.w	r4, sp, #7
   123f2:	46a4      	mov	ip, r4
   123f4:	270a      	movs	r7, #10
   123f6:	46a6      	mov	lr, r4
   123f8:	460a      	mov	r2, r1
   123fa:	fb91 f6f7 	sdiv	r6, r1, r7
   123fe:	fb07 1516 	mls	r5, r7, r6, r1
   12402:	3530      	adds	r5, #48	; 0x30
   12404:	2a63      	cmp	r2, #99	; 0x63
   12406:	f104 34ff 	add.w	r4, r4, #4294967295
   1240a:	f80e 5c01 	strb.w	r5, [lr, #-1]
   1240e:	4631      	mov	r1, r6
   12410:	dcf1      	bgt.n	123f6 <__exponent+0x22>
   12412:	3130      	adds	r1, #48	; 0x30
   12414:	f1ae 0502 	sub.w	r5, lr, #2
   12418:	f804 1c01 	strb.w	r1, [r4, #-1]
   1241c:	1c44      	adds	r4, r0, #1
   1241e:	4629      	mov	r1, r5
   12420:	4561      	cmp	r1, ip
   12422:	d30a      	bcc.n	1243a <__exponent+0x66>
   12424:	f10d 0209 	add.w	r2, sp, #9
   12428:	eba2 020e 	sub.w	r2, r2, lr
   1242c:	4565      	cmp	r5, ip
   1242e:	bf88      	it	hi
   12430:	2200      	movhi	r2, #0
   12432:	4413      	add	r3, r2
   12434:	1a18      	subs	r0, r3, r0
   12436:	b003      	add	sp, #12
   12438:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1243a:	f811 2b01 	ldrb.w	r2, [r1], #1
   1243e:	f804 2f01 	strb.w	r2, [r4, #1]!
   12442:	e7ed      	b.n	12420 <__exponent+0x4c>
   12444:	2330      	movs	r3, #48	; 0x30
   12446:	3130      	adds	r1, #48	; 0x30
   12448:	7083      	strb	r3, [r0, #2]
   1244a:	70c1      	strb	r1, [r0, #3]
   1244c:	1d03      	adds	r3, r0, #4
   1244e:	e7f1      	b.n	12434 <__exponent+0x60>

00012450 <_printf_common>:
   12450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12454:	4616      	mov	r6, r2
   12456:	4699      	mov	r9, r3
   12458:	688a      	ldr	r2, [r1, #8]
   1245a:	690b      	ldr	r3, [r1, #16]
   1245c:	f8dd 8020 	ldr.w	r8, [sp, #32]
   12460:	4293      	cmp	r3, r2
   12462:	bfb8      	it	lt
   12464:	4613      	movlt	r3, r2
   12466:	6033      	str	r3, [r6, #0]
   12468:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   1246c:	4607      	mov	r7, r0
   1246e:	460c      	mov	r4, r1
   12470:	b10a      	cbz	r2, 12476 <_printf_common+0x26>
   12472:	3301      	adds	r3, #1
   12474:	6033      	str	r3, [r6, #0]
   12476:	6823      	ldr	r3, [r4, #0]
   12478:	0699      	lsls	r1, r3, #26
   1247a:	bf42      	ittt	mi
   1247c:	6833      	ldrmi	r3, [r6, #0]
   1247e:	3302      	addmi	r3, #2
   12480:	6033      	strmi	r3, [r6, #0]
   12482:	6825      	ldr	r5, [r4, #0]
   12484:	f015 0506 	ands.w	r5, r5, #6
   12488:	d106      	bne.n	12498 <_printf_common+0x48>
   1248a:	f104 0a19 	add.w	sl, r4, #25
   1248e:	68e3      	ldr	r3, [r4, #12]
   12490:	6832      	ldr	r2, [r6, #0]
   12492:	1a9b      	subs	r3, r3, r2
   12494:	42ab      	cmp	r3, r5
   12496:	dc26      	bgt.n	124e6 <_printf_common+0x96>
   12498:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   1249c:	1e13      	subs	r3, r2, #0
   1249e:	6822      	ldr	r2, [r4, #0]
   124a0:	bf18      	it	ne
   124a2:	2301      	movne	r3, #1
   124a4:	0692      	lsls	r2, r2, #26
   124a6:	d42b      	bmi.n	12500 <_printf_common+0xb0>
   124a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   124ac:	4649      	mov	r1, r9
   124ae:	4638      	mov	r0, r7
   124b0:	47c0      	blx	r8
   124b2:	3001      	adds	r0, #1
   124b4:	d01e      	beq.n	124f4 <_printf_common+0xa4>
   124b6:	6823      	ldr	r3, [r4, #0]
   124b8:	68e5      	ldr	r5, [r4, #12]
   124ba:	6832      	ldr	r2, [r6, #0]
   124bc:	f003 0306 	and.w	r3, r3, #6
   124c0:	2b04      	cmp	r3, #4
   124c2:	bf08      	it	eq
   124c4:	1aad      	subeq	r5, r5, r2
   124c6:	68a3      	ldr	r3, [r4, #8]
   124c8:	6922      	ldr	r2, [r4, #16]
   124ca:	bf0c      	ite	eq
   124cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   124d0:	2500      	movne	r5, #0
   124d2:	4293      	cmp	r3, r2
   124d4:	bfc4      	itt	gt
   124d6:	1a9b      	subgt	r3, r3, r2
   124d8:	18ed      	addgt	r5, r5, r3
   124da:	2600      	movs	r6, #0
   124dc:	341a      	adds	r4, #26
   124de:	42b5      	cmp	r5, r6
   124e0:	d11a      	bne.n	12518 <_printf_common+0xc8>
   124e2:	2000      	movs	r0, #0
   124e4:	e008      	b.n	124f8 <_printf_common+0xa8>
   124e6:	2301      	movs	r3, #1
   124e8:	4652      	mov	r2, sl
   124ea:	4649      	mov	r1, r9
   124ec:	4638      	mov	r0, r7
   124ee:	47c0      	blx	r8
   124f0:	3001      	adds	r0, #1
   124f2:	d103      	bne.n	124fc <_printf_common+0xac>
   124f4:	f04f 30ff 	mov.w	r0, #4294967295
   124f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   124fc:	3501      	adds	r5, #1
   124fe:	e7c6      	b.n	1248e <_printf_common+0x3e>
   12500:	18e1      	adds	r1, r4, r3
   12502:	1c5a      	adds	r2, r3, #1
   12504:	2030      	movs	r0, #48	; 0x30
   12506:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   1250a:	4422      	add	r2, r4
   1250c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   12510:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   12514:	3302      	adds	r3, #2
   12516:	e7c7      	b.n	124a8 <_printf_common+0x58>
   12518:	2301      	movs	r3, #1
   1251a:	4622      	mov	r2, r4
   1251c:	4649      	mov	r1, r9
   1251e:	4638      	mov	r0, r7
   12520:	47c0      	blx	r8
   12522:	3001      	adds	r0, #1
   12524:	d0e6      	beq.n	124f4 <_printf_common+0xa4>
   12526:	3601      	adds	r6, #1
   12528:	e7d9      	b.n	124de <_printf_common+0x8e>

0001252a <__sprintf_chk>:
   1252a:	b408      	push	{r3}
   1252c:	b517      	push	{r0, r1, r2, r4, lr}
   1252e:	ab05      	add	r3, sp, #20
   12530:	1e14      	subs	r4, r2, #0
   12532:	f853 1b04 	ldr.w	r1, [r3], #4
   12536:	9301      	str	r3, [sp, #4]
   12538:	da07      	bge.n	1254a <__sprintf_chk+0x20>
   1253a:	461a      	mov	r2, r3
   1253c:	f7fc fad8 	bl	eaf0 <vsiprintf>
   12540:	b003      	add	sp, #12
   12542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12546:	b001      	add	sp, #4
   12548:	4770      	bx	lr
   1254a:	460a      	mov	r2, r1
   1254c:	4621      	mov	r1, r4
   1254e:	f7fc faab 	bl	eaa8 <vsniprintf>
   12552:	2800      	cmp	r0, #0
   12554:	dbf4      	blt.n	12540 <__sprintf_chk+0x16>
   12556:	42a0      	cmp	r0, r4
   12558:	d3f2      	bcc.n	12540 <__sprintf_chk+0x16>
   1255a:	f7f3 ffbb 	bl	64d4 <__chk_fail>

0001255e <strchr>:
   1255e:	b2c9      	uxtb	r1, r1
   12560:	4603      	mov	r3, r0
   12562:	4618      	mov	r0, r3
   12564:	f813 2b01 	ldrb.w	r2, [r3], #1
   12568:	b112      	cbz	r2, 12570 <strchr+0x12>
   1256a:	428a      	cmp	r2, r1
   1256c:	d1f9      	bne.n	12562 <strchr+0x4>
   1256e:	4770      	bx	lr
   12570:	2900      	cmp	r1, #0
   12572:	bf18      	it	ne
   12574:	2000      	movne	r0, #0
   12576:	4770      	bx	lr

00012578 <strcpy>:
   12578:	4603      	mov	r3, r0
   1257a:	f811 2b01 	ldrb.w	r2, [r1], #1
   1257e:	f803 2b01 	strb.w	r2, [r3], #1
   12582:	2a00      	cmp	r2, #0
   12584:	d1f9      	bne.n	1257a <strcpy+0x2>
   12586:	4770      	bx	lr

00012588 <strncmp>:
   12588:	b510      	push	{r4, lr}
   1258a:	b16a      	cbz	r2, 125a8 <strncmp+0x20>
   1258c:	3901      	subs	r1, #1
   1258e:	1884      	adds	r4, r0, r2
   12590:	f810 3b01 	ldrb.w	r3, [r0], #1
   12594:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   12598:	4293      	cmp	r3, r2
   1259a:	d103      	bne.n	125a4 <strncmp+0x1c>
   1259c:	42a0      	cmp	r0, r4
   1259e:	d001      	beq.n	125a4 <strncmp+0x1c>
   125a0:	2b00      	cmp	r3, #0
   125a2:	d1f5      	bne.n	12590 <strncmp+0x8>
   125a4:	1a98      	subs	r0, r3, r2
   125a6:	bd10      	pop	{r4, pc}
   125a8:	4610      	mov	r0, r2
   125aa:	e7fc      	b.n	125a6 <strncmp+0x1e>

000125ac <strncpy>:
   125ac:	b510      	push	{r4, lr}
   125ae:	3901      	subs	r1, #1
   125b0:	4603      	mov	r3, r0
   125b2:	b132      	cbz	r2, 125c2 <strncpy+0x16>
   125b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   125b8:	f803 4b01 	strb.w	r4, [r3], #1
   125bc:	3a01      	subs	r2, #1
   125be:	2c00      	cmp	r4, #0
   125c0:	d1f7      	bne.n	125b2 <strncpy+0x6>
   125c2:	441a      	add	r2, r3
   125c4:	2100      	movs	r1, #0
   125c6:	4293      	cmp	r3, r2
   125c8:	d100      	bne.n	125cc <strncpy+0x20>
   125ca:	bd10      	pop	{r4, pc}
   125cc:	f803 1b01 	strb.w	r1, [r3], #1
   125d0:	e7f9      	b.n	125c6 <strncpy+0x1a>

000125d2 <strnlen>:
   125d2:	b510      	push	{r4, lr}
   125d4:	4602      	mov	r2, r0
   125d6:	4401      	add	r1, r0
   125d8:	428a      	cmp	r2, r1
   125da:	4613      	mov	r3, r2
   125dc:	d101      	bne.n	125e2 <strnlen+0x10>
   125de:	1a18      	subs	r0, r3, r0
   125e0:	bd10      	pop	{r4, pc}
   125e2:	781c      	ldrb	r4, [r3, #0]
   125e4:	3201      	adds	r2, #1
   125e6:	2c00      	cmp	r4, #0
   125e8:	d1f6      	bne.n	125d8 <strnlen+0x6>
   125ea:	e7f8      	b.n	125de <strnlen+0xc>

000125ec <_vsniprintf_r>:
   125ec:	b530      	push	{r4, r5, lr}
   125ee:	1e14      	subs	r4, r2, #0
   125f0:	4605      	mov	r5, r0
   125f2:	b09b      	sub	sp, #108	; 0x6c
   125f4:	4618      	mov	r0, r3
   125f6:	da05      	bge.n	12604 <_vsniprintf_r+0x18>
   125f8:	238b      	movs	r3, #139	; 0x8b
   125fa:	602b      	str	r3, [r5, #0]
   125fc:	f04f 30ff 	mov.w	r0, #4294967295
   12600:	b01b      	add	sp, #108	; 0x6c
   12602:	bd30      	pop	{r4, r5, pc}
   12604:	f44f 7302 	mov.w	r3, #520	; 0x208
   12608:	f8ad 300c 	strh.w	r3, [sp, #12]
   1260c:	bf14      	ite	ne
   1260e:	f104 33ff 	addne.w	r3, r4, #4294967295
   12612:	4623      	moveq	r3, r4
   12614:	9302      	str	r3, [sp, #8]
   12616:	9305      	str	r3, [sp, #20]
   12618:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1261c:	9100      	str	r1, [sp, #0]
   1261e:	9104      	str	r1, [sp, #16]
   12620:	f8ad 300e 	strh.w	r3, [sp, #14]
   12624:	4602      	mov	r2, r0
   12626:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   12628:	4669      	mov	r1, sp
   1262a:	4628      	mov	r0, r5
   1262c:	f7fc fac8 	bl	ebc0 <_svfiprintf_r>
   12630:	1c43      	adds	r3, r0, #1
   12632:	bfbc      	itt	lt
   12634:	238b      	movlt	r3, #139	; 0x8b
   12636:	602b      	strlt	r3, [r5, #0]
   12638:	2c00      	cmp	r4, #0
   1263a:	d0e1      	beq.n	12600 <_vsniprintf_r+0x14>
   1263c:	9b00      	ldr	r3, [sp, #0]
   1263e:	2200      	movs	r2, #0
   12640:	701a      	strb	r2, [r3, #0]
   12642:	e7dd      	b.n	12600 <_vsniprintf_r+0x14>

00012644 <quorem>:
   12644:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12648:	6903      	ldr	r3, [r0, #16]
   1264a:	690c      	ldr	r4, [r1, #16]
   1264c:	42a3      	cmp	r3, r4
   1264e:	4607      	mov	r7, r0
   12650:	f2c0 8081 	blt.w	12756 <quorem+0x112>
   12654:	3c01      	subs	r4, #1
   12656:	f101 0814 	add.w	r8, r1, #20
   1265a:	f100 0514 	add.w	r5, r0, #20
   1265e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   12662:	9301      	str	r3, [sp, #4]
   12664:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   12668:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   1266c:	3301      	adds	r3, #1
   1266e:	429a      	cmp	r2, r3
   12670:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   12674:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   12678:	fbb2 f6f3 	udiv	r6, r2, r3
   1267c:	d331      	bcc.n	126e2 <quorem+0x9e>
   1267e:	f04f 0e00 	mov.w	lr, #0
   12682:	4640      	mov	r0, r8
   12684:	46ac      	mov	ip, r5
   12686:	46f2      	mov	sl, lr
   12688:	f850 2b04 	ldr.w	r2, [r0], #4
   1268c:	b293      	uxth	r3, r2
   1268e:	fb06 e303 	mla	r3, r6, r3, lr
   12692:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   12696:	b29b      	uxth	r3, r3
   12698:	ebaa 0303 	sub.w	r3, sl, r3
   1269c:	0c12      	lsrs	r2, r2, #16
   1269e:	f8dc a000 	ldr.w	sl, [ip]
   126a2:	fb06 e202 	mla	r2, r6, r2, lr
   126a6:	fa13 f38a 	uxtah	r3, r3, sl
   126aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   126ae:	fa1f fa82 	uxth.w	sl, r2
   126b2:	f8dc 2000 	ldr.w	r2, [ip]
   126b6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   126ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
   126be:	b29b      	uxth	r3, r3
   126c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   126c4:	4581      	cmp	r9, r0
   126c6:	f84c 3b04 	str.w	r3, [ip], #4
   126ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
   126ce:	d2db      	bcs.n	12688 <quorem+0x44>
   126d0:	f855 300b 	ldr.w	r3, [r5, fp]
   126d4:	b92b      	cbnz	r3, 126e2 <quorem+0x9e>
   126d6:	9b01      	ldr	r3, [sp, #4]
   126d8:	3b04      	subs	r3, #4
   126da:	429d      	cmp	r5, r3
   126dc:	461a      	mov	r2, r3
   126de:	d32e      	bcc.n	1273e <quorem+0xfa>
   126e0:	613c      	str	r4, [r7, #16]
   126e2:	4638      	mov	r0, r7
   126e4:	f000 fa14 	bl	12b10 <__mcmp>
   126e8:	2800      	cmp	r0, #0
   126ea:	db24      	blt.n	12736 <quorem+0xf2>
   126ec:	3601      	adds	r6, #1
   126ee:	4628      	mov	r0, r5
   126f0:	f04f 0c00 	mov.w	ip, #0
   126f4:	f858 2b04 	ldr.w	r2, [r8], #4
   126f8:	f8d0 e000 	ldr.w	lr, [r0]
   126fc:	b293      	uxth	r3, r2
   126fe:	ebac 0303 	sub.w	r3, ip, r3
   12702:	0c12      	lsrs	r2, r2, #16
   12704:	fa13 f38e 	uxtah	r3, r3, lr
   12708:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   1270c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   12710:	b29b      	uxth	r3, r3
   12712:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   12716:	45c1      	cmp	r9, r8
   12718:	f840 3b04 	str.w	r3, [r0], #4
   1271c:	ea4f 4c22 	mov.w	ip, r2, asr #16
   12720:	d2e8      	bcs.n	126f4 <quorem+0xb0>
   12722:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   12726:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   1272a:	b922      	cbnz	r2, 12736 <quorem+0xf2>
   1272c:	3b04      	subs	r3, #4
   1272e:	429d      	cmp	r5, r3
   12730:	461a      	mov	r2, r3
   12732:	d30a      	bcc.n	1274a <quorem+0x106>
   12734:	613c      	str	r4, [r7, #16]
   12736:	4630      	mov	r0, r6
   12738:	b003      	add	sp, #12
   1273a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1273e:	6812      	ldr	r2, [r2, #0]
   12740:	3b04      	subs	r3, #4
   12742:	2a00      	cmp	r2, #0
   12744:	d1cc      	bne.n	126e0 <quorem+0x9c>
   12746:	3c01      	subs	r4, #1
   12748:	e7c7      	b.n	126da <quorem+0x96>
   1274a:	6812      	ldr	r2, [r2, #0]
   1274c:	3b04      	subs	r3, #4
   1274e:	2a00      	cmp	r2, #0
   12750:	d1f0      	bne.n	12734 <quorem+0xf0>
   12752:	3c01      	subs	r4, #1
   12754:	e7eb      	b.n	1272e <quorem+0xea>
   12756:	2000      	movs	r0, #0
   12758:	e7ee      	b.n	12738 <quorem+0xf4>

0001275a <_Balloc>:
   1275a:	b570      	push	{r4, r5, r6, lr}
   1275c:	6a46      	ldr	r6, [r0, #36]	; 0x24
   1275e:	4604      	mov	r4, r0
   12760:	460d      	mov	r5, r1
   12762:	b93e      	cbnz	r6, 12774 <_Balloc+0x1a>
   12764:	2010      	movs	r0, #16
   12766:	f7fb fd5b 	bl	e220 <malloc>
   1276a:	e9c0 6601 	strd	r6, r6, [r0, #4]
   1276e:	6260      	str	r0, [r4, #36]	; 0x24
   12770:	6006      	str	r6, [r0, #0]
   12772:	60c6      	str	r6, [r0, #12]
   12774:	6a66      	ldr	r6, [r4, #36]	; 0x24
   12776:	68f3      	ldr	r3, [r6, #12]
   12778:	b183      	cbz	r3, 1279c <_Balloc+0x42>
   1277a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1277c:	68db      	ldr	r3, [r3, #12]
   1277e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   12782:	b9b8      	cbnz	r0, 127b4 <_Balloc+0x5a>
   12784:	2101      	movs	r1, #1
   12786:	fa01 f605 	lsl.w	r6, r1, r5
   1278a:	1d72      	adds	r2, r6, #5
   1278c:	0092      	lsls	r2, r2, #2
   1278e:	4620      	mov	r0, r4
   12790:	f000 fa9e 	bl	12cd0 <_calloc_r>
   12794:	b160      	cbz	r0, 127b0 <_Balloc+0x56>
   12796:	e9c0 5601 	strd	r5, r6, [r0, #4]
   1279a:	e00e      	b.n	127ba <_Balloc+0x60>
   1279c:	2221      	movs	r2, #33	; 0x21
   1279e:	2104      	movs	r1, #4
   127a0:	4620      	mov	r0, r4
   127a2:	f000 fa95 	bl	12cd0 <_calloc_r>
   127a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   127a8:	60f0      	str	r0, [r6, #12]
   127aa:	68db      	ldr	r3, [r3, #12]
   127ac:	2b00      	cmp	r3, #0
   127ae:	d1e4      	bne.n	1277a <_Balloc+0x20>
   127b0:	2000      	movs	r0, #0
   127b2:	bd70      	pop	{r4, r5, r6, pc}
   127b4:	6802      	ldr	r2, [r0, #0]
   127b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   127ba:	2300      	movs	r3, #0
   127bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
   127c0:	e7f7      	b.n	127b2 <_Balloc+0x58>

000127c2 <_Bfree>:
   127c2:	b570      	push	{r4, r5, r6, lr}
   127c4:	6a46      	ldr	r6, [r0, #36]	; 0x24
   127c6:	4605      	mov	r5, r0
   127c8:	460c      	mov	r4, r1
   127ca:	b93e      	cbnz	r6, 127dc <_Bfree+0x1a>
   127cc:	2010      	movs	r0, #16
   127ce:	f7fb fd27 	bl	e220 <malloc>
   127d2:	e9c0 6601 	strd	r6, r6, [r0, #4]
   127d6:	6268      	str	r0, [r5, #36]	; 0x24
   127d8:	6006      	str	r6, [r0, #0]
   127da:	60c6      	str	r6, [r0, #12]
   127dc:	b13c      	cbz	r4, 127ee <_Bfree+0x2c>
   127de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   127e0:	6862      	ldr	r2, [r4, #4]
   127e2:	68db      	ldr	r3, [r3, #12]
   127e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   127e8:	6021      	str	r1, [r4, #0]
   127ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   127ee:	bd70      	pop	{r4, r5, r6, pc}

000127f0 <__multadd>:
   127f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   127f4:	690e      	ldr	r6, [r1, #16]
   127f6:	4607      	mov	r7, r0
   127f8:	4698      	mov	r8, r3
   127fa:	460c      	mov	r4, r1
   127fc:	f101 0014 	add.w	r0, r1, #20
   12800:	2300      	movs	r3, #0
   12802:	6805      	ldr	r5, [r0, #0]
   12804:	b2a9      	uxth	r1, r5
   12806:	fb02 8101 	mla	r1, r2, r1, r8
   1280a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   1280e:	0c2d      	lsrs	r5, r5, #16
   12810:	fb02 c505 	mla	r5, r2, r5, ip
   12814:	b289      	uxth	r1, r1
   12816:	3301      	adds	r3, #1
   12818:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   1281c:	429e      	cmp	r6, r3
   1281e:	f840 1b04 	str.w	r1, [r0], #4
   12822:	ea4f 4815 	mov.w	r8, r5, lsr #16
   12826:	dcec      	bgt.n	12802 <__multadd+0x12>
   12828:	f1b8 0f00 	cmp.w	r8, #0
   1282c:	d01b      	beq.n	12866 <__multadd+0x76>
   1282e:	68a3      	ldr	r3, [r4, #8]
   12830:	42b3      	cmp	r3, r6
   12832:	dc12      	bgt.n	1285a <__multadd+0x6a>
   12834:	6861      	ldr	r1, [r4, #4]
   12836:	4638      	mov	r0, r7
   12838:	3101      	adds	r1, #1
   1283a:	f7ff ff8e 	bl	1275a <_Balloc>
   1283e:	6922      	ldr	r2, [r4, #16]
   12840:	3202      	adds	r2, #2
   12842:	f104 010c 	add.w	r1, r4, #12
   12846:	4605      	mov	r5, r0
   12848:	0092      	lsls	r2, r2, #2
   1284a:	300c      	adds	r0, #12
   1284c:	f7ff fd4c 	bl	122e8 <memcpy>
   12850:	4621      	mov	r1, r4
   12852:	4638      	mov	r0, r7
   12854:	f7ff ffb5 	bl	127c2 <_Bfree>
   12858:	462c      	mov	r4, r5
   1285a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   1285e:	3601      	adds	r6, #1
   12860:	f8c3 8014 	str.w	r8, [r3, #20]
   12864:	6126      	str	r6, [r4, #16]
   12866:	4620      	mov	r0, r4
   12868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001286c <__hi0bits>:
   1286c:	0c02      	lsrs	r2, r0, #16
   1286e:	0412      	lsls	r2, r2, #16
   12870:	4603      	mov	r3, r0
   12872:	b9ca      	cbnz	r2, 128a8 <__hi0bits+0x3c>
   12874:	0403      	lsls	r3, r0, #16
   12876:	2010      	movs	r0, #16
   12878:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   1287c:	bf04      	itt	eq
   1287e:	021b      	lsleq	r3, r3, #8
   12880:	3008      	addeq	r0, #8
   12882:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   12886:	bf04      	itt	eq
   12888:	011b      	lsleq	r3, r3, #4
   1288a:	3004      	addeq	r0, #4
   1288c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   12890:	bf04      	itt	eq
   12892:	009b      	lsleq	r3, r3, #2
   12894:	3002      	addeq	r0, #2
   12896:	2b00      	cmp	r3, #0
   12898:	db05      	blt.n	128a6 <__hi0bits+0x3a>
   1289a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   1289e:	f100 0001 	add.w	r0, r0, #1
   128a2:	bf08      	it	eq
   128a4:	2020      	moveq	r0, #32
   128a6:	4770      	bx	lr
   128a8:	2000      	movs	r0, #0
   128aa:	e7e5      	b.n	12878 <__hi0bits+0xc>

000128ac <__lo0bits>:
   128ac:	6803      	ldr	r3, [r0, #0]
   128ae:	4602      	mov	r2, r0
   128b0:	f013 0007 	ands.w	r0, r3, #7
   128b4:	d00b      	beq.n	128ce <__lo0bits+0x22>
   128b6:	07d9      	lsls	r1, r3, #31
   128b8:	d422      	bmi.n	12900 <__lo0bits+0x54>
   128ba:	0798      	lsls	r0, r3, #30
   128bc:	bf49      	itett	mi
   128be:	085b      	lsrmi	r3, r3, #1
   128c0:	089b      	lsrpl	r3, r3, #2
   128c2:	2001      	movmi	r0, #1
   128c4:	6013      	strmi	r3, [r2, #0]
   128c6:	bf5c      	itt	pl
   128c8:	6013      	strpl	r3, [r2, #0]
   128ca:	2002      	movpl	r0, #2
   128cc:	4770      	bx	lr
   128ce:	b299      	uxth	r1, r3
   128d0:	b909      	cbnz	r1, 128d6 <__lo0bits+0x2a>
   128d2:	0c1b      	lsrs	r3, r3, #16
   128d4:	2010      	movs	r0, #16
   128d6:	f013 0fff 	tst.w	r3, #255	; 0xff
   128da:	bf04      	itt	eq
   128dc:	0a1b      	lsreq	r3, r3, #8
   128de:	3008      	addeq	r0, #8
   128e0:	0719      	lsls	r1, r3, #28
   128e2:	bf04      	itt	eq
   128e4:	091b      	lsreq	r3, r3, #4
   128e6:	3004      	addeq	r0, #4
   128e8:	0799      	lsls	r1, r3, #30
   128ea:	bf04      	itt	eq
   128ec:	089b      	lsreq	r3, r3, #2
   128ee:	3002      	addeq	r0, #2
   128f0:	07d9      	lsls	r1, r3, #31
   128f2:	d403      	bmi.n	128fc <__lo0bits+0x50>
   128f4:	085b      	lsrs	r3, r3, #1
   128f6:	f100 0001 	add.w	r0, r0, #1
   128fa:	d003      	beq.n	12904 <__lo0bits+0x58>
   128fc:	6013      	str	r3, [r2, #0]
   128fe:	4770      	bx	lr
   12900:	2000      	movs	r0, #0
   12902:	4770      	bx	lr
   12904:	2020      	movs	r0, #32
   12906:	4770      	bx	lr

00012908 <__i2b>:
   12908:	b510      	push	{r4, lr}
   1290a:	460c      	mov	r4, r1
   1290c:	2101      	movs	r1, #1
   1290e:	f7ff ff24 	bl	1275a <_Balloc>
   12912:	2201      	movs	r2, #1
   12914:	6144      	str	r4, [r0, #20]
   12916:	6102      	str	r2, [r0, #16]
   12918:	bd10      	pop	{r4, pc}

0001291a <__multiply>:
   1291a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1291e:	4615      	mov	r5, r2
   12920:	690a      	ldr	r2, [r1, #16]
   12922:	692b      	ldr	r3, [r5, #16]
   12924:	429a      	cmp	r2, r3
   12926:	bfb8      	it	lt
   12928:	460b      	movlt	r3, r1
   1292a:	460c      	mov	r4, r1
   1292c:	bfbc      	itt	lt
   1292e:	462c      	movlt	r4, r5
   12930:	461d      	movlt	r5, r3
   12932:	6927      	ldr	r7, [r4, #16]
   12934:	f8d5 9010 	ldr.w	r9, [r5, #16]
   12938:	68a3      	ldr	r3, [r4, #8]
   1293a:	6861      	ldr	r1, [r4, #4]
   1293c:	eb07 0609 	add.w	r6, r7, r9
   12940:	42b3      	cmp	r3, r6
   12942:	bfb8      	it	lt
   12944:	3101      	addlt	r1, #1
   12946:	b085      	sub	sp, #20
   12948:	f7ff ff07 	bl	1275a <_Balloc>
   1294c:	f100 0114 	add.w	r1, r0, #20
   12950:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   12954:	460b      	mov	r3, r1
   12956:	2200      	movs	r2, #0
   12958:	4543      	cmp	r3, r8
   1295a:	d31d      	bcc.n	12998 <__multiply+0x7e>
   1295c:	f104 0314 	add.w	r3, r4, #20
   12960:	f105 0214 	add.w	r2, r5, #20
   12964:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   12968:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   1296c:	9302      	str	r3, [sp, #8]
   1296e:	1b3b      	subs	r3, r7, r4
   12970:	3b15      	subs	r3, #21
   12972:	f023 0303 	bic.w	r3, r3, #3
   12976:	3304      	adds	r3, #4
   12978:	f104 0515 	add.w	r5, r4, #21
   1297c:	42af      	cmp	r7, r5
   1297e:	bf38      	it	cc
   12980:	2304      	movcc	r3, #4
   12982:	9301      	str	r3, [sp, #4]
   12984:	9b02      	ldr	r3, [sp, #8]
   12986:	9203      	str	r2, [sp, #12]
   12988:	4293      	cmp	r3, r2
   1298a:	d808      	bhi.n	1299e <__multiply+0x84>
   1298c:	2e00      	cmp	r6, #0
   1298e:	dc5a      	bgt.n	12a46 <__multiply+0x12c>
   12990:	6106      	str	r6, [r0, #16]
   12992:	b005      	add	sp, #20
   12994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12998:	f843 2b04 	str.w	r2, [r3], #4
   1299c:	e7dc      	b.n	12958 <__multiply+0x3e>
   1299e:	f8b2 a000 	ldrh.w	sl, [r2]
   129a2:	f1ba 0f00 	cmp.w	sl, #0
   129a6:	d024      	beq.n	129f2 <__multiply+0xd8>
   129a8:	f104 0e14 	add.w	lr, r4, #20
   129ac:	4689      	mov	r9, r1
   129ae:	f04f 0c00 	mov.w	ip, #0
   129b2:	f85e 5b04 	ldr.w	r5, [lr], #4
   129b6:	f8d9 b000 	ldr.w	fp, [r9]
   129ba:	b2ab      	uxth	r3, r5
   129bc:	fa1f fb8b 	uxth.w	fp, fp
   129c0:	fb0a b303 	mla	r3, sl, r3, fp
   129c4:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   129c8:	f8d9 5000 	ldr.w	r5, [r9]
   129cc:	4463      	add	r3, ip
   129ce:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   129d2:	fb0a c50b 	mla	r5, sl, fp, ip
   129d6:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   129da:	b29b      	uxth	r3, r3
   129dc:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   129e0:	4577      	cmp	r7, lr
   129e2:	f849 3b04 	str.w	r3, [r9], #4
   129e6:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   129ea:	d8e2      	bhi.n	129b2 <__multiply+0x98>
   129ec:	9b01      	ldr	r3, [sp, #4]
   129ee:	f841 c003 	str.w	ip, [r1, r3]
   129f2:	9b03      	ldr	r3, [sp, #12]
   129f4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   129f8:	3204      	adds	r2, #4
   129fa:	f1b9 0f00 	cmp.w	r9, #0
   129fe:	d020      	beq.n	12a42 <__multiply+0x128>
   12a00:	680b      	ldr	r3, [r1, #0]
   12a02:	f104 0c14 	add.w	ip, r4, #20
   12a06:	468e      	mov	lr, r1
   12a08:	f04f 0a00 	mov.w	sl, #0
   12a0c:	f8bc 5000 	ldrh.w	r5, [ip]
   12a10:	f8be b002 	ldrh.w	fp, [lr, #2]
   12a14:	fb09 b505 	mla	r5, r9, r5, fp
   12a18:	44aa      	add	sl, r5
   12a1a:	b29b      	uxth	r3, r3
   12a1c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   12a20:	f84e 3b04 	str.w	r3, [lr], #4
   12a24:	f85c 3b04 	ldr.w	r3, [ip], #4
   12a28:	f8be 5000 	ldrh.w	r5, [lr]
   12a2c:	0c1b      	lsrs	r3, r3, #16
   12a2e:	fb09 5303 	mla	r3, r9, r3, r5
   12a32:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   12a36:	4567      	cmp	r7, ip
   12a38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   12a3c:	d8e6      	bhi.n	12a0c <__multiply+0xf2>
   12a3e:	9d01      	ldr	r5, [sp, #4]
   12a40:	514b      	str	r3, [r1, r5]
   12a42:	3104      	adds	r1, #4
   12a44:	e79e      	b.n	12984 <__multiply+0x6a>
   12a46:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   12a4a:	2b00      	cmp	r3, #0
   12a4c:	d1a0      	bne.n	12990 <__multiply+0x76>
   12a4e:	3e01      	subs	r6, #1
   12a50:	e79c      	b.n	1298c <__multiply+0x72>

00012a52 <__lshift>:
   12a52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12a56:	460c      	mov	r4, r1
   12a58:	6849      	ldr	r1, [r1, #4]
   12a5a:	6923      	ldr	r3, [r4, #16]
   12a5c:	eb03 1862 	add.w	r8, r3, r2, asr #5
   12a60:	68a3      	ldr	r3, [r4, #8]
   12a62:	4607      	mov	r7, r0
   12a64:	4691      	mov	r9, r2
   12a66:	ea4f 1a62 	mov.w	sl, r2, asr #5
   12a6a:	f108 0601 	add.w	r6, r8, #1
   12a6e:	42b3      	cmp	r3, r6
   12a70:	db3f      	blt.n	12af2 <__lshift+0xa0>
   12a72:	4638      	mov	r0, r7
   12a74:	f7ff fe71 	bl	1275a <_Balloc>
   12a78:	2300      	movs	r3, #0
   12a7a:	4605      	mov	r5, r0
   12a7c:	f100 0114 	add.w	r1, r0, #20
   12a80:	f100 0210 	add.w	r2, r0, #16
   12a84:	4618      	mov	r0, r3
   12a86:	4553      	cmp	r3, sl
   12a88:	db36      	blt.n	12af8 <__lshift+0xa6>
   12a8a:	6920      	ldr	r0, [r4, #16]
   12a8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   12a90:	f104 0314 	add.w	r3, r4, #20
   12a94:	f019 091f 	ands.w	r9, r9, #31
   12a98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   12a9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   12aa0:	d02e      	beq.n	12b00 <__lshift+0xae>
   12aa2:	f1c9 0e20 	rsb	lr, r9, #32
   12aa6:	468a      	mov	sl, r1
   12aa8:	2200      	movs	r2, #0
   12aaa:	6818      	ldr	r0, [r3, #0]
   12aac:	fa00 f009 	lsl.w	r0, r0, r9
   12ab0:	4302      	orrs	r2, r0
   12ab2:	f84a 2b04 	str.w	r2, [sl], #4
   12ab6:	f853 2b04 	ldr.w	r2, [r3], #4
   12aba:	459c      	cmp	ip, r3
   12abc:	fa22 f20e 	lsr.w	r2, r2, lr
   12ac0:	d8f3      	bhi.n	12aaa <__lshift+0x58>
   12ac2:	ebac 0304 	sub.w	r3, ip, r4
   12ac6:	3b15      	subs	r3, #21
   12ac8:	f023 0303 	bic.w	r3, r3, #3
   12acc:	3304      	adds	r3, #4
   12ace:	f104 0015 	add.w	r0, r4, #21
   12ad2:	4560      	cmp	r0, ip
   12ad4:	bf88      	it	hi
   12ad6:	2304      	movhi	r3, #4
   12ad8:	50ca      	str	r2, [r1, r3]
   12ada:	b10a      	cbz	r2, 12ae0 <__lshift+0x8e>
   12adc:	f108 0602 	add.w	r6, r8, #2
   12ae0:	3e01      	subs	r6, #1
   12ae2:	4638      	mov	r0, r7
   12ae4:	612e      	str	r6, [r5, #16]
   12ae6:	4621      	mov	r1, r4
   12ae8:	f7ff fe6b 	bl	127c2 <_Bfree>
   12aec:	4628      	mov	r0, r5
   12aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12af2:	3101      	adds	r1, #1
   12af4:	005b      	lsls	r3, r3, #1
   12af6:	e7ba      	b.n	12a6e <__lshift+0x1c>
   12af8:	f842 0f04 	str.w	r0, [r2, #4]!
   12afc:	3301      	adds	r3, #1
   12afe:	e7c2      	b.n	12a86 <__lshift+0x34>
   12b00:	3904      	subs	r1, #4
   12b02:	f853 2b04 	ldr.w	r2, [r3], #4
   12b06:	f841 2f04 	str.w	r2, [r1, #4]!
   12b0a:	459c      	cmp	ip, r3
   12b0c:	d8f9      	bhi.n	12b02 <__lshift+0xb0>
   12b0e:	e7e7      	b.n	12ae0 <__lshift+0x8e>

00012b10 <__mcmp>:
   12b10:	690a      	ldr	r2, [r1, #16]
   12b12:	4603      	mov	r3, r0
   12b14:	6900      	ldr	r0, [r0, #16]
   12b16:	1a80      	subs	r0, r0, r2
   12b18:	b530      	push	{r4, r5, lr}
   12b1a:	d10d      	bne.n	12b38 <__mcmp+0x28>
   12b1c:	3314      	adds	r3, #20
   12b1e:	3114      	adds	r1, #20
   12b20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   12b24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   12b28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   12b2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   12b30:	4295      	cmp	r5, r2
   12b32:	d002      	beq.n	12b3a <__mcmp+0x2a>
   12b34:	d304      	bcc.n	12b40 <__mcmp+0x30>
   12b36:	2001      	movs	r0, #1
   12b38:	bd30      	pop	{r4, r5, pc}
   12b3a:	42a3      	cmp	r3, r4
   12b3c:	d3f4      	bcc.n	12b28 <__mcmp+0x18>
   12b3e:	e7fb      	b.n	12b38 <__mcmp+0x28>
   12b40:	f04f 30ff 	mov.w	r0, #4294967295
   12b44:	e7f8      	b.n	12b38 <__mcmp+0x28>

00012b46 <__mdiff>:
   12b46:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b4a:	460c      	mov	r4, r1
   12b4c:	4606      	mov	r6, r0
   12b4e:	4611      	mov	r1, r2
   12b50:	4620      	mov	r0, r4
   12b52:	4617      	mov	r7, r2
   12b54:	f7ff ffdc 	bl	12b10 <__mcmp>
   12b58:	1e05      	subs	r5, r0, #0
   12b5a:	d108      	bne.n	12b6e <__mdiff+0x28>
   12b5c:	4629      	mov	r1, r5
   12b5e:	4630      	mov	r0, r6
   12b60:	f7ff fdfb 	bl	1275a <_Balloc>
   12b64:	2301      	movs	r3, #1
   12b66:	e9c0 3504 	strd	r3, r5, [r0, #16]
   12b6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b6e:	bfa4      	itt	ge
   12b70:	463b      	movge	r3, r7
   12b72:	4627      	movge	r7, r4
   12b74:	4630      	mov	r0, r6
   12b76:	6879      	ldr	r1, [r7, #4]
   12b78:	bfa6      	itte	ge
   12b7a:	461c      	movge	r4, r3
   12b7c:	2500      	movge	r5, #0
   12b7e:	2501      	movlt	r5, #1
   12b80:	f7ff fdeb 	bl	1275a <_Balloc>
   12b84:	693e      	ldr	r6, [r7, #16]
   12b86:	60c5      	str	r5, [r0, #12]
   12b88:	6925      	ldr	r5, [r4, #16]
   12b8a:	f107 0114 	add.w	r1, r7, #20
   12b8e:	f104 0914 	add.w	r9, r4, #20
   12b92:	f100 0e14 	add.w	lr, r0, #20
   12b96:	f107 0210 	add.w	r2, r7, #16
   12b9a:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   12b9e:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   12ba2:	46f2      	mov	sl, lr
   12ba4:	2700      	movs	r7, #0
   12ba6:	f859 3b04 	ldr.w	r3, [r9], #4
   12baa:	f852 bf04 	ldr.w	fp, [r2, #4]!
   12bae:	fa1f f883 	uxth.w	r8, r3
   12bb2:	fa17 f78b 	uxtah	r7, r7, fp
   12bb6:	0c1b      	lsrs	r3, r3, #16
   12bb8:	eba7 0808 	sub.w	r8, r7, r8
   12bbc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   12bc0:	eb03 4328 	add.w	r3, r3, r8, asr #16
   12bc4:	fa1f f888 	uxth.w	r8, r8
   12bc8:	141f      	asrs	r7, r3, #16
   12bca:	454d      	cmp	r5, r9
   12bcc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   12bd0:	f84a 3b04 	str.w	r3, [sl], #4
   12bd4:	d8e7      	bhi.n	12ba6 <__mdiff+0x60>
   12bd6:	1b2b      	subs	r3, r5, r4
   12bd8:	3b15      	subs	r3, #21
   12bda:	f023 0303 	bic.w	r3, r3, #3
   12bde:	3304      	adds	r3, #4
   12be0:	3415      	adds	r4, #21
   12be2:	42a5      	cmp	r5, r4
   12be4:	bf38      	it	cc
   12be6:	2304      	movcc	r3, #4
   12be8:	4419      	add	r1, r3
   12bea:	4473      	add	r3, lr
   12bec:	469e      	mov	lr, r3
   12bee:	460d      	mov	r5, r1
   12bf0:	4565      	cmp	r5, ip
   12bf2:	d30e      	bcc.n	12c12 <__mdiff+0xcc>
   12bf4:	f10c 0203 	add.w	r2, ip, #3
   12bf8:	1a52      	subs	r2, r2, r1
   12bfa:	f022 0203 	bic.w	r2, r2, #3
   12bfe:	3903      	subs	r1, #3
   12c00:	458c      	cmp	ip, r1
   12c02:	bf38      	it	cc
   12c04:	2200      	movcc	r2, #0
   12c06:	441a      	add	r2, r3
   12c08:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   12c0c:	b17b      	cbz	r3, 12c2e <__mdiff+0xe8>
   12c0e:	6106      	str	r6, [r0, #16]
   12c10:	e7ab      	b.n	12b6a <__mdiff+0x24>
   12c12:	f855 8b04 	ldr.w	r8, [r5], #4
   12c16:	fa17 f488 	uxtah	r4, r7, r8
   12c1a:	1422      	asrs	r2, r4, #16
   12c1c:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   12c20:	b2a4      	uxth	r4, r4
   12c22:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   12c26:	f84e 4b04 	str.w	r4, [lr], #4
   12c2a:	1417      	asrs	r7, r2, #16
   12c2c:	e7e0      	b.n	12bf0 <__mdiff+0xaa>
   12c2e:	3e01      	subs	r6, #1
   12c30:	e7ea      	b.n	12c08 <__mdiff+0xc2>

00012c32 <__d2b>:
   12c32:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12c36:	2101      	movs	r1, #1
   12c38:	461c      	mov	r4, r3
   12c3a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
   12c3e:	4690      	mov	r8, r2
   12c40:	f7ff fd8b 	bl	1275a <_Balloc>
   12c44:	f3c4 0313 	ubfx	r3, r4, #0, #20
   12c48:	f3c4 540a 	ubfx	r4, r4, #20, #11
   12c4c:	4607      	mov	r7, r0
   12c4e:	bb2c      	cbnz	r4, 12c9c <__d2b+0x6a>
   12c50:	9301      	str	r3, [sp, #4]
   12c52:	f1b8 0300 	subs.w	r3, r8, #0
   12c56:	d026      	beq.n	12ca6 <__d2b+0x74>
   12c58:	4668      	mov	r0, sp
   12c5a:	9300      	str	r3, [sp, #0]
   12c5c:	f7ff fe26 	bl	128ac <__lo0bits>
   12c60:	9900      	ldr	r1, [sp, #0]
   12c62:	b1f0      	cbz	r0, 12ca2 <__d2b+0x70>
   12c64:	9a01      	ldr	r2, [sp, #4]
   12c66:	f1c0 0320 	rsb	r3, r0, #32
   12c6a:	fa02 f303 	lsl.w	r3, r2, r3
   12c6e:	430b      	orrs	r3, r1
   12c70:	40c2      	lsrs	r2, r0
   12c72:	617b      	str	r3, [r7, #20]
   12c74:	9201      	str	r2, [sp, #4]
   12c76:	9b01      	ldr	r3, [sp, #4]
   12c78:	61bb      	str	r3, [r7, #24]
   12c7a:	2b00      	cmp	r3, #0
   12c7c:	bf14      	ite	ne
   12c7e:	2102      	movne	r1, #2
   12c80:	2101      	moveq	r1, #1
   12c82:	6139      	str	r1, [r7, #16]
   12c84:	b1c4      	cbz	r4, 12cb8 <__d2b+0x86>
   12c86:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   12c8a:	4404      	add	r4, r0
   12c8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   12c90:	6034      	str	r4, [r6, #0]
   12c92:	6028      	str	r0, [r5, #0]
   12c94:	4638      	mov	r0, r7
   12c96:	b002      	add	sp, #8
   12c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12c9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   12ca0:	e7d6      	b.n	12c50 <__d2b+0x1e>
   12ca2:	6179      	str	r1, [r7, #20]
   12ca4:	e7e7      	b.n	12c76 <__d2b+0x44>
   12ca6:	a801      	add	r0, sp, #4
   12ca8:	f7ff fe00 	bl	128ac <__lo0bits>
   12cac:	9b01      	ldr	r3, [sp, #4]
   12cae:	617b      	str	r3, [r7, #20]
   12cb0:	2101      	movs	r1, #1
   12cb2:	6139      	str	r1, [r7, #16]
   12cb4:	3020      	adds	r0, #32
   12cb6:	e7e5      	b.n	12c84 <__d2b+0x52>
   12cb8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   12cbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   12cc0:	6030      	str	r0, [r6, #0]
   12cc2:	6918      	ldr	r0, [r3, #16]
   12cc4:	f7ff fdd2 	bl	1286c <__hi0bits>
   12cc8:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   12ccc:	6029      	str	r1, [r5, #0]
   12cce:	e7e1      	b.n	12c94 <__d2b+0x62>

00012cd0 <_calloc_r>:
   12cd0:	b538      	push	{r3, r4, r5, lr}
   12cd2:	fb02 f501 	mul.w	r5, r2, r1
   12cd6:	4629      	mov	r1, r5
   12cd8:	f7fb faf8 	bl	e2cc <_malloc_r>
   12cdc:	4604      	mov	r4, r0
   12cde:	b118      	cbz	r0, 12ce8 <_calloc_r+0x18>
   12ce0:	462a      	mov	r2, r5
   12ce2:	2100      	movs	r1, #0
   12ce4:	f7ff fb0e 	bl	12304 <memset>
   12ce8:	4620      	mov	r0, r4
   12cea:	bd38      	pop	{r3, r4, r5, pc}

00012cec <__ssputs_r>:
   12cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12cf0:	688e      	ldr	r6, [r1, #8]
   12cf2:	429e      	cmp	r6, r3
   12cf4:	4682      	mov	sl, r0
   12cf6:	460c      	mov	r4, r1
   12cf8:	4690      	mov	r8, r2
   12cfa:	461f      	mov	r7, r3
   12cfc:	d838      	bhi.n	12d70 <__ssputs_r+0x84>
   12cfe:	898a      	ldrh	r2, [r1, #12]
   12d00:	f412 6f90 	tst.w	r2, #1152	; 0x480
   12d04:	d032      	beq.n	12d6c <__ssputs_r+0x80>
   12d06:	6825      	ldr	r5, [r4, #0]
   12d08:	6909      	ldr	r1, [r1, #16]
   12d0a:	eba5 0901 	sub.w	r9, r5, r1
   12d0e:	6965      	ldr	r5, [r4, #20]
   12d10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   12d14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   12d18:	3301      	adds	r3, #1
   12d1a:	444b      	add	r3, r9
   12d1c:	106d      	asrs	r5, r5, #1
   12d1e:	429d      	cmp	r5, r3
   12d20:	bf38      	it	cc
   12d22:	461d      	movcc	r5, r3
   12d24:	0553      	lsls	r3, r2, #21
   12d26:	d531      	bpl.n	12d8c <__ssputs_r+0xa0>
   12d28:	4629      	mov	r1, r5
   12d2a:	f7fb facf 	bl	e2cc <_malloc_r>
   12d2e:	4606      	mov	r6, r0
   12d30:	b950      	cbnz	r0, 12d48 <__ssputs_r+0x5c>
   12d32:	230c      	movs	r3, #12
   12d34:	f8ca 3000 	str.w	r3, [sl]
   12d38:	89a3      	ldrh	r3, [r4, #12]
   12d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12d3e:	81a3      	strh	r3, [r4, #12]
   12d40:	f04f 30ff 	mov.w	r0, #4294967295
   12d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12d48:	6921      	ldr	r1, [r4, #16]
   12d4a:	464a      	mov	r2, r9
   12d4c:	f7ff facc 	bl	122e8 <memcpy>
   12d50:	89a3      	ldrh	r3, [r4, #12]
   12d52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   12d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12d5a:	81a3      	strh	r3, [r4, #12]
   12d5c:	6126      	str	r6, [r4, #16]
   12d5e:	6165      	str	r5, [r4, #20]
   12d60:	444e      	add	r6, r9
   12d62:	eba5 0509 	sub.w	r5, r5, r9
   12d66:	6026      	str	r6, [r4, #0]
   12d68:	60a5      	str	r5, [r4, #8]
   12d6a:	463e      	mov	r6, r7
   12d6c:	42be      	cmp	r6, r7
   12d6e:	d900      	bls.n	12d72 <__ssputs_r+0x86>
   12d70:	463e      	mov	r6, r7
   12d72:	4632      	mov	r2, r6
   12d74:	6820      	ldr	r0, [r4, #0]
   12d76:	4641      	mov	r1, r8
   12d78:	f000 f825 	bl	12dc6 <memmove>
   12d7c:	68a3      	ldr	r3, [r4, #8]
   12d7e:	6822      	ldr	r2, [r4, #0]
   12d80:	1b9b      	subs	r3, r3, r6
   12d82:	4432      	add	r2, r6
   12d84:	60a3      	str	r3, [r4, #8]
   12d86:	6022      	str	r2, [r4, #0]
   12d88:	2000      	movs	r0, #0
   12d8a:	e7db      	b.n	12d44 <__ssputs_r+0x58>
   12d8c:	462a      	mov	r2, r5
   12d8e:	f000 f834 	bl	12dfa <_realloc_r>
   12d92:	4606      	mov	r6, r0
   12d94:	2800      	cmp	r0, #0
   12d96:	d1e1      	bne.n	12d5c <__ssputs_r+0x70>
   12d98:	6921      	ldr	r1, [r4, #16]
   12d9a:	4650      	mov	r0, sl
   12d9c:	f7fb fa48 	bl	e230 <_free_r>
   12da0:	e7c7      	b.n	12d32 <__ssputs_r+0x46>

00012da2 <__ascii_mbtowc>:
   12da2:	b082      	sub	sp, #8
   12da4:	b901      	cbnz	r1, 12da8 <__ascii_mbtowc+0x6>
   12da6:	a901      	add	r1, sp, #4
   12da8:	b142      	cbz	r2, 12dbc <__ascii_mbtowc+0x1a>
   12daa:	b14b      	cbz	r3, 12dc0 <__ascii_mbtowc+0x1e>
   12dac:	7813      	ldrb	r3, [r2, #0]
   12dae:	600b      	str	r3, [r1, #0]
   12db0:	7812      	ldrb	r2, [r2, #0]
   12db2:	1e10      	subs	r0, r2, #0
   12db4:	bf18      	it	ne
   12db6:	2001      	movne	r0, #1
   12db8:	b002      	add	sp, #8
   12dba:	4770      	bx	lr
   12dbc:	4610      	mov	r0, r2
   12dbe:	e7fb      	b.n	12db8 <__ascii_mbtowc+0x16>
   12dc0:	f06f 0001 	mvn.w	r0, #1
   12dc4:	e7f8      	b.n	12db8 <__ascii_mbtowc+0x16>

00012dc6 <memmove>:
   12dc6:	4288      	cmp	r0, r1
   12dc8:	b510      	push	{r4, lr}
   12dca:	eb01 0402 	add.w	r4, r1, r2
   12dce:	d902      	bls.n	12dd6 <memmove+0x10>
   12dd0:	4284      	cmp	r4, r0
   12dd2:	4623      	mov	r3, r4
   12dd4:	d807      	bhi.n	12de6 <memmove+0x20>
   12dd6:	1e43      	subs	r3, r0, #1
   12dd8:	42a1      	cmp	r1, r4
   12dda:	d008      	beq.n	12dee <memmove+0x28>
   12ddc:	f811 2b01 	ldrb.w	r2, [r1], #1
   12de0:	f803 2f01 	strb.w	r2, [r3, #1]!
   12de4:	e7f8      	b.n	12dd8 <memmove+0x12>
   12de6:	4402      	add	r2, r0
   12de8:	4601      	mov	r1, r0
   12dea:	428a      	cmp	r2, r1
   12dec:	d100      	bne.n	12df0 <memmove+0x2a>
   12dee:	bd10      	pop	{r4, pc}
   12df0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   12df4:	f802 4d01 	strb.w	r4, [r2, #-1]!
   12df8:	e7f7      	b.n	12dea <memmove+0x24>

00012dfa <_realloc_r>:
   12dfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12dfc:	4607      	mov	r7, r0
   12dfe:	4614      	mov	r4, r2
   12e00:	460e      	mov	r6, r1
   12e02:	b921      	cbnz	r1, 12e0e <_realloc_r+0x14>
   12e04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   12e08:	4611      	mov	r1, r2
   12e0a:	f7fb ba5f 	b.w	e2cc <_malloc_r>
   12e0e:	b922      	cbnz	r2, 12e1a <_realloc_r+0x20>
   12e10:	f7fb fa0e 	bl	e230 <_free_r>
   12e14:	4625      	mov	r5, r4
   12e16:	4628      	mov	r0, r5
   12e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12e1a:	f000 f821 	bl	12e60 <_malloc_usable_size_r>
   12e1e:	42a0      	cmp	r0, r4
   12e20:	d20f      	bcs.n	12e42 <_realloc_r+0x48>
   12e22:	4621      	mov	r1, r4
   12e24:	4638      	mov	r0, r7
   12e26:	f7fb fa51 	bl	e2cc <_malloc_r>
   12e2a:	4605      	mov	r5, r0
   12e2c:	2800      	cmp	r0, #0
   12e2e:	d0f2      	beq.n	12e16 <_realloc_r+0x1c>
   12e30:	4631      	mov	r1, r6
   12e32:	4622      	mov	r2, r4
   12e34:	f7ff fa58 	bl	122e8 <memcpy>
   12e38:	4631      	mov	r1, r6
   12e3a:	4638      	mov	r0, r7
   12e3c:	f7fb f9f8 	bl	e230 <_free_r>
   12e40:	e7e9      	b.n	12e16 <_realloc_r+0x1c>
   12e42:	4635      	mov	r5, r6
   12e44:	e7e7      	b.n	12e16 <_realloc_r+0x1c>

00012e46 <__ascii_wctomb>:
   12e46:	4603      	mov	r3, r0
   12e48:	4608      	mov	r0, r1
   12e4a:	b141      	cbz	r1, 12e5e <__ascii_wctomb+0x18>
   12e4c:	2aff      	cmp	r2, #255	; 0xff
   12e4e:	d904      	bls.n	12e5a <__ascii_wctomb+0x14>
   12e50:	228a      	movs	r2, #138	; 0x8a
   12e52:	601a      	str	r2, [r3, #0]
   12e54:	f04f 30ff 	mov.w	r0, #4294967295
   12e58:	4770      	bx	lr
   12e5a:	700a      	strb	r2, [r1, #0]
   12e5c:	2001      	movs	r0, #1
   12e5e:	4770      	bx	lr

00012e60 <_malloc_usable_size_r>:
   12e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
   12e64:	1f18      	subs	r0, r3, #4
   12e66:	2b00      	cmp	r3, #0
   12e68:	bfbc      	itt	lt
   12e6a:	580b      	ldrlt	r3, [r1, r0]
   12e6c:	18c0      	addlt	r0, r0, r3
   12e6e:	4770      	bx	lr

00012e70 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   12e70:	f7f7 bd9a 	b.w	a9a8 <SystemInit>
